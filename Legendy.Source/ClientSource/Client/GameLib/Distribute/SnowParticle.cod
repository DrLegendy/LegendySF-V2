; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CSnowParticle@@QAE@XZ			; CSnowParticle::CSnowParticle
PUBLIC	??1CSnowParticle@@QAE@XZ			; CSnowParticle::~CSnowParticle
PUBLIC	?New@CSnowParticle@@SAPAV1@XZ			; CSnowParticle::New
PUBLIC	?Delete@CSnowParticle@@SAXPAV1@@Z		; CSnowParticle::Delete
PUBLIC	?DestroyPool@CSnowParticle@@SAXXZ		; CSnowParticle::DestroyPool
PUBLIC	?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z	; CSnowParticle::Init
PUBLIC	?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z ; CSnowParticle::SetCameraVertex
PUBLIC	?IsActivate@CSnowParticle@@QAE_NXZ		; CSnowParticle::IsActivate
PUBLIC	?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z	; CSnowParticle::Update
PUBLIC	?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z ; CSnowParticle::GetVerticies
PUBLIC	?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@QAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAXPAPAVCSnowParticle@@QAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ; std::_Destroy_range<std::allocator<CSnowParticle *> >
PUBLIC	??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ; std::_Uninitialized_move<CSnowParticle * *,std::allocator<CSnowParticle *> >
PUBLIC	??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A ; CSnowParticle::ms_kVct_SnowParticlePool
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
PUBLIC	__real@43fa0000
PUBLIC	__real@4788b800
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	__CxxThrowException@8:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A DB 0cH DUP (?) ; CSnowParticle::ms_kVct_SnowParticlePool
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kVct_SnowParticlePool$initializer$@CSnowParticle@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ; ??ms_kVct_SnowParticlePool$initializer$@CSnowParticle@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4788b800
CONST	SEGMENT
__real@4788b800 DD 04788b800r			; 70000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z PROC ; std::_Uninitialized_move<CSnowParticle * *,std::allocator<CSnowParticle *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ENDP ; std::_Uninitialized_move<CSnowParticle * *,std::allocator<CSnowParticle *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAXPAPAVCSnowParticle@@QAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAXPAPAVCSnowParticle@@QAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CSnowParticle *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAXPAPAVCSnowParticle@@QAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CSnowParticle *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@QAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@QAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ; std::_Uninitialized_move<CSnowParticle * *,std::allocator<CSnowParticle *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@YAPAPAVCSnowParticle@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSnowParticle@@@0@@Z ; std::_Uninitialized_move<CSnowParticle * *,std::allocator<CSnowParticle *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@QAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool'', COMDAT

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A
  00006	85 c9		 test	 ecx, ecx
  00008	74 32		 je	 SHORT $LN6@ms_kVct_Sn

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8
  0000f	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e0 fc	 and	 eax, -4			; fffffffcH
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A, 0

; 1698 :             _Mylast  = pointer();

  00028	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, 0

; 1699 :             _Myend   = pointer();

  00032	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8, 0
$LN6@ms_kVct_Sn:
  0003c	c3		 ret	 0
??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CSnowParticle::ms_kVct_SnowParticlePool'', COMDAT

; 6    : std::vector<CSnowParticle*> CSnowParticle::ms_kVct_SnowParticlePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSnowParticle::ms_kVct_SnowParticlePool''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ PROC ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ENDP ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z
_TEXT	SEGMENT
_rv3Vertex1$ = 8					; size = 4
_rv3Vertex2$ = 12					; size = 4
_rv3Vertex3$ = 16					; size = 4
_rv3Vertex4$ = 20					; size = 4
?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z PROC ; CSnowParticle::GetVerticies, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00008	f3 0f 5c 41 30	 subss	 xmm0, DWORD PTR [ecx+48]
  0000d	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  00012	f3 0f 5c 51 34	 subss	 xmm2, DWORD PTR [ecx+52]
  00017	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  0001c	f3 0f 5c 49 38	 subss	 xmm1, DWORD PTR [ecx+56]
  00021	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 38   : 	rv3Vertex1.v3Pos = m_v3Position - m_v3Cross - m_v3Up;

  00026	8b 45 08	 mov	 eax, DWORD PTR _rv3Vertex1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00029	f3 0f 5c 51 28	 subss	 xmm2, DWORD PTR [ecx+40]
  0002e	f3 0f 5c 49 2c	 subss	 xmm1, DWORD PTR [ecx+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 38   : 	rv3Vertex1.v3Pos = m_v3Position - m_v3Cross - m_v3Up;

  00033	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00037	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  0003c	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 39   : 	rv3Vertex1.u = 0.0f;

  00041	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 40   : 	rv3Vertex1.v = 0.0f;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0004f	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00054	f3 0f 58 41 30	 addss	 xmm0, DWORD PTR [ecx+48]
  00059	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  0005e	f3 0f 58 51 34	 addss	 xmm2, DWORD PTR [ecx+52]
  00063	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00068	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006d	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 42   : 	rv3Vertex2.v3Pos = m_v3Position + m_v3Cross - m_v3Up;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _rv3Vertex2$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00075	f3 0f 5c 51 28	 subss	 xmm2, DWORD PTR [ecx+40]
  0007a	f3 0f 5c 49 2c	 subss	 xmm1, DWORD PTR [ecx+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 42   : 	rv3Vertex2.v3Pos = m_v3Position + m_v3Cross - m_v3Up;

  0007f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00083	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00088	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 43   : 	rv3Vertex2.u = 1.0f;

  0008d	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 44   : 	rv3Vertex2.v = 0.0f;

  00094	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0009b	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000a0	f3 0f 5c 41 30	 subss	 xmm0, DWORD PTR [ecx+48]
  000a5	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  000aa	f3 0f 5c 51 34	 subss	 xmm2, DWORD PTR [ecx+52]
  000af	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  000b4	f3 0f 5c 49 38	 subss	 xmm1, DWORD PTR [ecx+56]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000b9	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 46   : 	rv3Vertex3.v3Pos = m_v3Position - m_v3Cross + m_v3Up;

  000be	8b 45 10	 mov	 eax, DWORD PTR _rv3Vertex3$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000c1	f3 0f 58 51 28	 addss	 xmm2, DWORD PTR [ecx+40]
  000c6	f3 0f 58 49 2c	 addss	 xmm1, DWORD PTR [ecx+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 46   : 	rv3Vertex3.v3Pos = m_v3Position - m_v3Cross + m_v3Up;

  000cb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000cf	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  000d4	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 47   : 	rv3Vertex3.u = 0.0f;

  000d9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 48   : 	rv3Vertex3.v = 1.0f;

  000e0	c7 40 10 00 00
	80 3f		 mov	 DWORD PTR [eax+16], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000e7	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000ec	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  000f1	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  000f6	f3 0f 58 41 30	 addss	 xmm0, DWORD PTR [ecx+48]
  000fb	f3 0f 58 51 34	 addss	 xmm2, DWORD PTR [ecx+52]
  00100	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 50   : 	rv3Vertex4.v3Pos = m_v3Position + m_v3Cross + m_v3Up;

  00105	8b 45 14	 mov	 eax, DWORD PTR _rv3Vertex4$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00108	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
  0010d	f3 0f 58 51 28	 addss	 xmm2, DWORD PTR [ecx+40]
  00112	f3 0f 58 49 2c	 addss	 xmm1, DWORD PTR [ecx+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 50   : 	rv3Vertex4.v3Pos = m_v3Position + m_v3Cross + m_v3Up;

  00117	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0011b	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00120	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 51   : 	rv3Vertex4.u = 1.0f;

  00125	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 52   : 	rv3Vertex4.v = 1.0f;

  0012c	c7 40 10 00 00
	80 3f		 mov	 DWORD PTR [eax+16], 1065353216 ; 3f800000H

; 53   : }

  00133	5d		 pop	 ebp
  00134	c2 10 00	 ret	 16			; 00000010H
?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z ENDP ; CSnowParticle::GetVerticies
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv376 = -4						; size = 4
_fElapsedTime$ = 8					; size = 4
_c_rv3Pos$ = 12						; size = 4
?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z PROC	; CSnowParticle::Update, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00004	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fElapsedTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 20   : {

  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0000c	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00011	f3 0f 10 4e 14	 movss	 xmm1, DWORD PTR [esi+20]
  00016	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  0001b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0001f	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 205  :     y += v.y;

  00023	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00028	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 204  :     x += v.x;

  0002c	f3 0f 58 56 18	 addss	 xmm2, DWORD PTR [esi+24]

; 206  :     z += v.z;

  00031	f3 0f 58 4e 20	 addss	 xmm1, DWORD PTR [esi+32]
  00036	f3 0f 11 46 1c	 movss	 DWORD PTR [esi+28], xmm0
  0003b	f3 0f 11 56 18	 movss	 DWORD PTR [esi+24], xmm2
  00040	f3 0f 11 55 fc	 movss	 DWORD PTR tv376[ebp], xmm2
  00045	f3 0f 11 4e 20	 movss	 DWORD PTR [esi+32], xmm1
  0004a	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 750  :             return (float)sin(_X);

  0004f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00052	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 23   : 	m_v3Position.x += m_v3Cross.x * sin(m_fcurRadian) / 10.0f;

  00057	f3 0f 10 5e 30	 movss	 xmm3, DWORD PTR [esi+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 750  :             return (float)sin(_X);

  0005c	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 24   : 	m_v3Position.y += m_v3Cross.y * sin(m_fcurRadian) / 10.0f;

  0005f	f3 0f 10 56 34	 movss	 xmm2, DWORD PTR [esi+52]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 750  :             return (float)sin(_X);

  00064	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 27   : 	if (m_v3Position.z < c_rv3Pos.z - 500.0f)

  00068	8b 45 0c	 mov	 eax, DWORD PTR _c_rv3Pos$[ebp]
  0006b	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00070	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00074	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00078	f3 0f 5e 1d 00
	00 00 00	 divss	 xmm3, DWORD PTR __real@41200000
  00080	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@41200000
  00088	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0008d	f3 0f 58 5d fc	 addss	 xmm3, DWORD PTR tv376[ebp]
  00092	f3 0f 58 56 1c	 addss	 xmm2, DWORD PTR [esi+28]
  00097	f3 0f 58 46 40	 addss	 xmm0, DWORD PTR [esi+64]
  0009c	f3 0f 11 5e 18	 movss	 DWORD PTR [esi+24], xmm3
  000a1	f3 0f 11 56 1c	 movss	 DWORD PTR [esi+28], xmm2
  000a6	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
  000ab	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43fa0000
  000b8	0f 2f 46 20	 comiss	 xmm0, DWORD PTR [esi+32]
  000bc	77 29		 ja	 SHORT $LN30@Update

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000be	f3 0f 5c 18	 subss	 xmm3, DWORD PTR [eax]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  000c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000ca	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4788b800
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  000d2	0f 54 d8	 andps	 xmm3, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000d5	0f 2f d9	 comiss	 xmm3, xmm1
  000d8	77 0d		 ja	 SHORT $LN30@Update

; 31   : 	else if (abs(m_v3Position.y - c_rv3Pos.y) > c_fSnowDistance)

  000da	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  000df	0f 54 d0	 andps	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 31   : 	else if (abs(m_v3Position.y - c_rv3Pos.y) > c_fSnowDistance)

  000e2	0f 2f d1	 comiss	 xmm2, xmm1
  000e5	76 03		 jbe	 SHORT $LN6@Update
$LN30@Update:

; 32   : 		m_bActivate = false;

  000e7	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN6@Update:
  000ea	5e		 pop	 esi

; 33   : }

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z ENDP	; CSnowParticle::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?IsActivate@CSnowParticle@@QAE_NXZ
_TEXT	SEGMENT
?IsActivate@CSnowParticle@@QAE_NXZ PROC			; CSnowParticle::IsActivate, COMDAT
; _this$ = ecx

; 16   : 	return m_bActivate;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 17   : }

  00002	c3		 ret	 0
?IsActivate@CSnowParticle@@QAE_NXZ ENDP			; CSnowParticle::IsActivate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_rv3Up$ = 8						; size = 4
_rv3Cross$ = 12						; size = 4
?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z PROC ; CSnowParticle::SetCameraVertex, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00006	8b 45 08	 mov	 eax, DWORD PTR _rv3Up$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 10   : 	m_v3Up = rv3Up*m_fHalfWidth;

  00009	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0000e	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00012	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00017	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001c	f3 0f 59 da	 mulss	 xmm3, xmm2
  00020	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00024	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 11   : 	m_v3Cross = rv3Cross*m_fHalfHeight;

  00028	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [ecx+8]
  0002d	0f 14 d9	 unpcklps xmm3, xmm1
  00030	66 0f d6 59 24	 movq	 QWORD PTR [ecx+36], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00035	f3 0f 11 45 fc	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 10   : 	m_v3Up = rv3Up*m_fHalfWidth;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp+8]
  0003d	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _rv3Cross$[ebp]
  00043	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00047	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0004c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00051	f3 0f 59 da	 mulss	 xmm3, xmm2
  00055	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00059	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 11   : 	m_v3Cross = rv3Cross*m_fHalfHeight;

  0005d	0f 14 d9	 unpcklps xmm3, xmm1
  00060	66 0f d6 59 30	 movq	 QWORD PTR [ecx+48], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00065	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 11   : 	m_v3Cross = rv3Cross*m_fHalfHeight;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  0006d	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 12   : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z ENDP ; CSnowParticle::SetCameraVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv231 = -16						; size = 8
tv240 = -8						; size = 8
_fRot$ = -4						; size = 4
tv183 = 8						; size = 4
_c_rv3Pos$ = 8						; size = 4
?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z PROC	; CSnowParticle::Init, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 57   : 	float fRot = frandom(0.0f, 36000.0f) / 100.0f;

  00008	83 ec 08	 sub	 esp, 8
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 44 24 04 00
	a0 0c 47	 mov	 DWORD PTR [esp+4], 1192009728 ; 470ca000H
  00015	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0001c	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00021	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@42c80000

; 58   : 	float fDistance = frandom(0.0f, c_fSnowDistance) / 10.0f;

  00027	c7 44 24 04 00
	b8 88 47	 mov	 DWORD PTR [esp+4], 1200142336 ; 4788b800H
  0002f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00036	d9 5d fc	 fstp	 DWORD PTR _fRot$[ebp]

; 59   : 
; 60   : 	m_v3Position.x = c_rv3Pos.x + fDistance*sin((double)D3DXToRadian(fRot));

  00039	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fRot$[ebp]
  0003e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00046	0f 5a c0	 cvtps2pd xmm0, xmm0
  00049	f2 0f 11 45 f8	 movsd	 QWORD PTR tv240[ebp], xmm0
  0004e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00053	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@41200000
  00059	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv240[ebp]
  0005e	dd 5d f0	 fstp	 QWORD PTR tv231[ebp]
  00061	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00066	8b 75 08	 mov	 esi, DWORD PTR _c_rv3Pos$[ebp]
  00069	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR tv231[ebp]
  0006e	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00072	0f 5a c9	 cvtps2pd xmm1, xmm1
  00075	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00079	0f 57 c9	 xorps	 xmm1, xmm1
  0007c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 61   : 	m_v3Position.y = c_rv3Pos.y + fDistance*cos((double)D3DXToRadian(fRot));

  00080	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv240[ebp]
  00085	f3 0f 11 4f 18	 movss	 DWORD PTR [edi+24], xmm1
  0008a	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0008f	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00094	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR tv231[ebp]

; 62   : 	m_v3Position.z = c_rv3Pos.z + frandom(1500.0f, 2000.0f);

  00099	c7 44 24 04 00
	00 fa 44	 mov	 DWORD PTR [esp+4], 1157234688 ; 44fa0000H
  000a1	0f 5a c9	 cvtps2pd xmm1, xmm1
  000a4	c7 04 24 00 80
	bb 44		 mov	 DWORD PTR [esp], 1153138688 ; 44bb8000H
  000ab	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b3	f3 0f 11 47 1c	 movss	 DWORD PTR [edi+28], xmm0
  000b8	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000bd	d8 46 08	 fadd	 DWORD PTR [esi+8]

; 63   : 	m_v3Velocity.x = 0.0f;
; 64   : 	m_v3Velocity.y = 0.0f;
; 65   : 	m_v3Velocity.z = frandom(-50.0f, -200.0f);

  000c0	c7 44 24 04 00
	00 48 c3	 mov	 DWORD PTR [esp+4], -1018691584 ; c3480000H
  000c8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  000cf	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  000d6	c7 04 24 00 00
	48 c2		 mov	 DWORD PTR [esp], -1035468800 ; c2480000H
  000dd	d9 5f 20	 fstp	 DWORD PTR [edi+32]
  000e0	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000e5	d9 5f 14	 fstp	 DWORD PTR [edi+20]

; 66   : 	m_fHalfWidth = frandom(2.0f, 7.0f);

  000e8	c7 44 24 04 00
	00 e0 40	 mov	 DWORD PTR [esp+4], 1088421888 ; 40e00000H
  000f0	c7 04 24 00 00
	00 40		 mov	 DWORD PTR [esp], 1073741824 ; 40000000H
  000f7	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000fc	d9 5d 08	 fstp	 DWORD PTR tv183[ebp]
  000ff	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv183[ebp]

; 67   : 	m_fHalfHeight = m_fHalfWidth;
; 68   : 	m_bActivate = true;
; 69   : 	m_bChangedSize = false;
; 70   : 
; 71   : 	m_fPeriod = frandom(1.5f, 5.0f);

  00104	c7 44 24 04 00
	00 a0 40	 mov	 DWORD PTR [esp+4], 1084227584 ; 40a00000H
  0010c	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0
  00111	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  00116	66 c7 07 01 00	 mov	 WORD PTR [edi], 1
  0011b	c7 04 24 00 00
	c0 3f		 mov	 DWORD PTR [esp], 1069547520 ; 3fc00000H
  00122	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00127	d9 5f 3c	 fstp	 DWORD PTR [edi+60]

; 72   : 	m_fcurRadian = frandom(-1.6f, 1.6f);

  0012a	c7 44 24 04 cd
	cc cc 3f	 mov	 DWORD PTR [esp+4], 1070386381 ; 3fcccccdH
  00132	c7 04 24 cd cc
	cc bf		 mov	 DWORD PTR [esp], -1077097267 ; bfcccccdH
  00139	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0013e	d9 5f 40	 fstp	 DWORD PTR [edi+64]

; 73   : 	m_fAmplitude = frandom(1.0f, 3.0f);

  00141	c7 44 24 04 00
	00 40 40	 mov	 DWORD PTR [esp+4], 1077936128 ; 40400000H
  00149	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00150	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00155	83 c4 08	 add	 esp, 8
  00158	d9 5f 44	 fstp	 DWORD PTR [edi+68]
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi

; 74   : }

  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 04 00	 ret	 4
?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CSnowParticle::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?DestroyPool@CSnowParticle@@SAXXZ
_TEXT	SEGMENT
?DestroyPool@CSnowParticle@@SAXXZ PROC			; CSnowParticle::DestroyPool, COMDAT

; 94   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A

; 149  :         return _Ptr == _Right._Ptr;

  00007	3b 35 04 00 00
	00		 cmp	 esi, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  0000d	74 2f		 je	 SHORT $LN37@DestroyPoo
  0000f	90		 npad	 1
$LL6@DestroyPoo:

; 96   : 	{
; 97   : 		delete *i;

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	74 0b		 je	 SHORT $LN31@DestroyPoo
  00016	6a 48		 push	 72			; 00000048H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
$LN31@DestroyPoo:

; 98   : 		*i = NULL;

  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00027	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  0002a	3b 35 04 00 00
	00		 cmp	 esi, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  00030	75 de		 jne	 SHORT $LL6@DestroyPoo

; 101  : 	container.clear();

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A
  00037	a3 04 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, eax
  0003c	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 96   : }

  0003d	c3		 ret	 0
$LN37@DestroyPoo:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 101  : 	container.clear();

  0003e	89 35 04 00 00
	00		 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, esi
  00044	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 96   : }

  00045	c3		 ret	 0
?DestroyPool@CSnowParticle@@SAXXZ ENDP			; CSnowParticle::DestroyPool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Delete@CSnowParticle@@SAXPAV1@@Z
_TEXT	SEGMENT
_pSnowParticle$ = 8					; size = 4
?Delete@CSnowParticle@@SAXPAV1@@Z PROC			; CSnowParticle::Delete, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00003	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
  00009	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8
  0000f	74 0e		 je	 SHORT $LN6@Delete

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00011	8b 45 08	 mov	 eax, DWORD PTR _pSnowParticle$[ebp]
  00014	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 04 00 00
	00 04		 add	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 91   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN6@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001f	8d 45 08	 lea	 eax, DWORD PTR _pSnowParticle$[ebp]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A ; CSnowParticle::ms_kVct_SnowParticlePool
  00029	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@QAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 91   : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?Delete@CSnowParticle@@SAXPAV1@@Z ENDP			; CSnowParticle::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ?New@CSnowParticle@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?New@CSnowParticle@@SAPAV1@XZ PROC			; CSnowParticle::New, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
  0000a	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 78   : 	if (ms_kVct_SnowParticlePool.empty())

  00010	75 22		 jne	 SHORT $LN2@New

; 79   : 	{
; 80   : 		return new CSnowParticle;

  00012	6a 48		 push	 72			; 00000048H
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001f	85 c0		 test	 eax, eax
  00021	74 0b		 je	 SHORT $LN4@New
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ??0CSnowParticle@@QAE@XZ ; CSnowParticle::CSnowParticle

; 86   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN4@New:

; 79   : 	{
; 80   : 		return new CSnowParticle;

  0002e	33 c0		 xor	 eax, eax

; 86   : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN2@New:

; 81   : 	}
; 82   : 
; 83   : 	CSnowParticle * pParticle = ms_kVct_SnowParticlePool.back();

  00034	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  00037	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1338 :         --_Mylast;

  0003a	89 0d 04 00 00
	00		 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp

; 86   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?New@CSnowParticle@@SAPAV1@XZ ENDP			; CSnowParticle::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ??1CSnowParticle@@QAE@XZ
_TEXT	SEGMENT
??1CSnowParticle@@QAE@XZ PROC				; CSnowParticle::~CSnowParticle, COMDAT
; _this$ = ecx

; 103  : }

  00000	c2 00 00	 ret	 0
??1CSnowParticle@@QAE@XZ ENDP				; CSnowParticle::~CSnowParticle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\SnowParticle.cpp
;	COMDAT ??0CSnowParticle@@QAE@XZ
_TEXT	SEGMENT
??0CSnowParticle@@QAE@XZ PROC				; CSnowParticle::CSnowParticle, COMDAT
; _this$ = ecx

; 100  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0CSnowParticle@@QAE@XZ ENDP				; CSnowParticle::CSnowParticle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
