; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
PUBLIC	?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
PUBLIC	?GetDegreeFromPosition@@YAMMM@Z			; GetDegreeFromPosition
PUBLIC	?GetDegreeFromPosition2@@YAMMMMM@Z		; GetDegreeFromPosition2
PUBLIC	?GetInterpolatedRotation@@YAMMMM@Z		; GetInterpolatedRotation
PUBLIC	?IsCWRotation@@YA_NMM@Z				; IsCWRotation
PUBLIC	?IsCCWRotation@@YA_NMM@Z			; IsCCWRotation
PUBLIC	?IsCWAcuteAngle@@YA_NMM@Z			; IsCWAcuteAngle
PUBLIC	?IsCCWAcuteAngle@@YA_NMM@Z			; IsCCWAcuteAngle
PUBLIC	?GetDegreeDifference@@YAMMM@Z			; GetDegreeDifference
PUBLIC	?GetRotatingDirection@@YAHMM@Z			; GetRotatingDirection
PUBLIC	?CameraRotationToCharacterRotation@@YAMM@Z	; CameraRotationToCharacterRotation
PUBLIC	?CharacterRotationToCameraRotation@@YAMM@Z	; CharacterRotationToCameraRotation
PUBLIC	__real@3f800000
PUBLIC	__real@4076800000000000
PUBLIC	__real@42652ee0
PUBLIC	__real@43340000
PUBLIC	__real@43b40000
PUBLIC	__real@44070000
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	?GetLinearInterpolation@@YAMMMM@Z:PROC		; GetLinearInterpolation
EXTRN	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z:PROC ; IntersectLineSegments
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIfmod:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	_floor:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@44070000
CONST	SEGMENT
__real@44070000 DD 044070000r			; 540
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?CharacterRotationToCameraRotation@@YAMM@Z
_TEXT	SEGMENT
tv129 = -8						; size = 8
tv71 = 8						; size = 4
_fCharacterRotation$ = 8				; size = 4
?CharacterRotationToCameraRotation@@YAMM@Z PROC		; CharacterRotationToCameraRotation, COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 306  : 	return fmod((540.0f - fCharacterRotation), 360.0f);

  00006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44070000
  0000e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _fCharacterRotation$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 691  :             return (float)fmod(_X, _Y);

  00013	0f 5a c0	 cvtps2pd xmm0, xmm0
  00016	f2 0f 11 45 f8	 movsd	 QWORD PTR tv129[ebp], xmm0
  0001b	dd 45 f8	 fld	 QWORD PTR tv129[ebp]
  0001e	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4076800000000000
  00024	e8 00 00 00 00	 call	 __CIfmod
  00029	d9 5d 08	 fstp	 DWORD PTR tv71[ebp]
  0002c	d9 45 08	 fld	 DWORD PTR tv71[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 307  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?CharacterRotationToCameraRotation@@YAMM@Z ENDP		; CharacterRotationToCameraRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?CameraRotationToCharacterRotation@@YAMM@Z
_TEXT	SEGMENT
tv129 = -8						; size = 8
tv71 = 8						; size = 4
_fCameraRotation$ = 8					; size = 4
?CameraRotationToCharacterRotation@@YAMM@Z PROC		; CameraRotationToCharacterRotation, COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 301  : 	return fmod((540.0f - fCameraRotation), 360.0f);

  00006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44070000
  0000e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _fCameraRotation$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 691  :             return (float)fmod(_X, _Y);

  00013	0f 5a c0	 cvtps2pd xmm0, xmm0
  00016	f2 0f 11 45 f8	 movsd	 QWORD PTR tv129[ebp], xmm0
  0001b	dd 45 f8	 fld	 QWORD PTR tv129[ebp]
  0001e	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4076800000000000
  00024	e8 00 00 00 00	 call	 __CIfmod
  00029	d9 5d 08	 fstp	 DWORD PTR tv71[ebp]
  0002c	d9 45 08	 fld	 DWORD PTR tv71[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 302  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?CameraRotationToCharacterRotation@@YAMM@Z ENDP		; CameraRotationToCharacterRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?GetRotatingDirection@@YAHMM@Z
_TEXT	SEGMENT
_fSource$ = 8						; size = 4
_fTarget$ = 12						; size = 4
?GetRotatingDirection@@YAHMM@Z PROC			; GetRotatingDirection, COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  : 	if (fSource < 180.0f)

  00003	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43340000
  0000b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fSource$[ebp]
  00010	0f 2f d1	 comiss	 xmm2, xmm1
  00013	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fTarget$[ebp]
  00018	76 21		 jbe	 SHORT $LN2@GetRotatin

; 273  : 	{
; 274  : 		if (fTarget < fSource)

  0001a	0f 2f cb	 comiss	 xmm1, xmm3
  0001d	77 36		 ja	 SHORT $LN9@GetRotatin

; 275  : 			return DEGREE_DIRECTION_RIGHT;
; 276  : 
; 277  : 		else if((360.0f - fTarget) + fSource < 180.0f)

  0001f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b40000
  00027	f3 0f 5c c3	 subss	 xmm0, xmm3
  0002b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0002f	0f 2f d0	 comiss	 xmm2, xmm0
  00032	77 21		 ja	 SHORT $LN9@GetRotatin
$LN11@GetRotatin:

; 289  : 		{
; 290  : 			return DEGREE_DIRECTION_LEFT;

  00034	b8 02 00 00 00	 mov	 eax, 2

; 294  : 	}
; 295  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@GetRotatin:

; 278  : 			return DEGREE_DIRECTION_RIGHT;
; 279  : 
; 280  : 		return DEGREE_DIRECTION_LEFT;
; 281  : 	}
; 282  : 	else
; 283  : 	{
; 284  : 		if (fTarget > fSource)

  0003b	0f 2f d9	 comiss	 xmm3, xmm1
  0003e	77 f4		 ja	 SHORT $LN11@GetRotatin

; 285  : 		{
; 286  : 			return DEGREE_DIRECTION_LEFT;
; 287  : 		}
; 288  : 		else if ((360.0f - fSource) + fTarget < 180.0f)

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b40000
  00048	f3 0f 5c c1	 subss	 xmm0, xmm1
  0004c	f3 0f 58 c3	 addss	 xmm0, xmm3
  00050	0f 2f d0	 comiss	 xmm2, xmm0
  00053	77 df		 ja	 SHORT $LN11@GetRotatin
$LN9@GetRotatin:

; 291  : 		}
; 292  : 
; 293  : 		return DEGREE_DIRECTION_RIGHT;

  00055	b8 01 00 00 00	 mov	 eax, 1

; 294  : 	}
; 295  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?GetRotatingDirection@@YAHMM@Z ENDP			; GetRotatingDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?GetDegreeDifference@@YAMMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
tv130 = 8						; size = 4
_fSource$ = 8						; size = 4
_fTarget$ = 12						; size = 4
?GetDegreeDifference@@YAMMM@Z PROC			; GetDegreeDifference, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 	if (fSource < 180.0f)

  00003	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43340000
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fSource$[ebp]
  00010	0f 2f d0	 comiss	 xmm2, xmm0
  00013	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fTarget$[ebp]
  00018	76 2b		 jbe	 SHORT $LN2@GetDegreeD

; 248  : 	{
; 249  : 		if (fTarget < fSource)

  0001a	0f 2f c1	 comiss	 xmm0, xmm1
  0001d	76 08		 jbe	 SHORT $LN4@GetDegreeD

; 250  : 			return fSource - fTarget;

  0001f	d9 45 08	 fld	 DWORD PTR _fSource$[ebp]
  00022	d8 65 0c	 fsub	 DWORD PTR _fTarget$[ebp]

; 268  : 	}
; 269  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN4@GetDegreeD:

; 251  : 
; 252  : 		else if(fTarget - fSource > 180.0f)

  00027	f3 0f 5c c8	 subss	 xmm1, xmm0
  0002b	0f 2f ca	 comiss	 xmm1, xmm2
  0002e	f3 0f 11 4d 08	 movss	 DWORD PTR tv131[ebp], xmm1
  00033	76 0b		 jbe	 SHORT $LN6@GetDegreeD

; 253  : 			return (360.0f - (fTarget - fSource));

  00035	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43b40000
  0003b	d8 65 08	 fsub	 DWORD PTR tv131[ebp]

; 268  : 	}
; 269  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN6@GetDegreeD:

; 254  : 
; 255  : 		return fTarget - fSource;

  00040	d9 45 08	 fld	 DWORD PTR tv131[ebp]

; 268  : 	}
; 269  : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN2@GetDegreeD:

; 256  : 	}
; 257  : 	else
; 258  : 	{
; 259  : 		if (fTarget > fSource)

  00045	0f 2f c8	 comiss	 xmm1, xmm0
  00048	76 08		 jbe	 SHORT $LN7@GetDegreeD

; 260  : 			return fTarget - fSource;

  0004a	d9 45 0c	 fld	 DWORD PTR _fTarget$[ebp]
  0004d	d8 65 08	 fsub	 DWORD PTR _fSource$[ebp]

; 268  : 	}
; 269  : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN7@GetDegreeD:

; 261  : 
; 262  : 		else if (fSource - fTarget > 180.0f)

  00052	f3 0f 5c c1	 subss	 xmm0, xmm1
  00056	0f 2f c2	 comiss	 xmm0, xmm2
  00059	f3 0f 11 45 08	 movss	 DWORD PTR tv130[ebp], xmm0
  0005e	76 0b		 jbe	 SHORT $LN9@GetDegreeD

; 263  : 		{
; 264  : 			return (360.0f - (fSource - fTarget));

  00060	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43b40000
  00066	d8 65 08	 fsub	 DWORD PTR tv130[ebp]

; 268  : 	}
; 269  : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN9@GetDegreeD:

; 265  : 		}
; 266  : 
; 267  : 		return fSource - fTarget;

  0006b	d9 45 08	 fld	 DWORD PTR tv130[ebp]

; 268  : 	}
; 269  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?GetDegreeDifference@@YAMMM@Z ENDP			; GetDegreeDifference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?IsCCWAcuteAngle@@YA_NMM@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?IsCCWAcuteAngle@@YA_NMM@Z PROC				; IsCCWAcuteAngle, COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 192  : 	int fValue = abs((int) (360.0f - end + begin));

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b40000
  0000b	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _end$[ebp]
  00010	f3 0f 5c c2	 subss	 xmm0, xmm2

; 193  : 	return fValue >= (end - begin) ? true : false;

  00014	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _begin$[ebp]
  00019	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _begin$[ebp]
  0001e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00022	99		 cdq
  00023	33 c2		 xor	 eax, edx
  00025	2b c2		 sub	 eax, edx
  00027	66 0f 6e c0	 movd	 xmm0, eax
  0002b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0002e	0f 2f c2	 comiss	 xmm0, xmm2
  00031	0f 93 c0	 setae	 al

; 194  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?IsCCWAcuteAngle@@YA_NMM@Z ENDP				; IsCCWAcuteAngle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?IsCWAcuteAngle@@YA_NMM@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?IsCWAcuteAngle@@YA_NMM@Z PROC				; IsCWAcuteAngle, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	return ((360.0f - begin + end) > (begin - end));

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _begin$[ebp]
  00008	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43b40000
  00010	f3 0f 5c d1	 subss	 xmm2, xmm1
  00014	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _end$[ebp]
  00019	f3 0f 58 55 0c	 addss	 xmm2, DWORD PTR _end$[ebp]
  0001e	0f 2f d1	 comiss	 xmm2, xmm1
  00021	0f 97 c0	 seta	 al

; 188  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?IsCWAcuteAngle@@YA_NMM@Z ENDP				; IsCWAcuteAngle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?IsCCWRotation@@YA_NMM@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?IsCCWRotation@@YA_NMM@Z PROC				; IsCCWRotation, COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 203  : 	//     180
; 204  : 	// 270      90
; 205  : 	//      0
; 206  : 	//
; 207  : 	return (begin - end < 0);

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _begin$[ebp]
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _end$[ebp]
  00010	0f 2f c1	 comiss	 xmm0, xmm1
  00013	0f 97 c0	 seta	 al

; 208  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsCCWRotation@@YA_NMM@Z ENDP				; IsCCWRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?IsCWRotation@@YA_NMM@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?IsCWRotation@@YA_NMM@Z PROC				; IsCWRotation, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	return !IsCCWRotation(begin, end);

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _end$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _begin$[ebp]
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	e8 00 00 00 00	 call	 ?IsCCWRotation@@YA_NMM@Z ; IsCCWRotation
  00020	83 c4 08	 add	 esp, 8
  00023	34 01		 xor	 al, 1

; 199  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?IsCWRotation@@YA_NMM@Z ENDP				; IsCWRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?GetInterpolatedRotation@@YAMMMM@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
_curRate$ = 16						; size = 4
?GetInterpolatedRotation@@YAMMMM@Z PROC			; GetInterpolatedRotation, COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  : 	if (IsCCWRotation(begin, end))

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _end$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _begin$[ebp]
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	e8 00 00 00 00	 call	 ?IsCCWRotation@@YA_NMM@Z ; IsCCWRotation
  00020	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _end$[ebp]
  00025	83 c4 08	 add	 esp, 8
  00028	83 ec 08	 sub	 esp, 8
  0002b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00031	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _begin$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	84 c0		 test	 al, al
  0003d	74 47		 je	 SHORT $LN2@GetInterpo

; 213  : 	{
; 214  : 		if (IsCCWAcuteAngle(begin, end))

  0003f	e8 00 00 00 00	 call	 ?IsCCWAcuteAngle@@YA_NMM@Z ; IsCCWAcuteAngle
  00044	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _curRate$[ebp]
  00049	83 c4 08	 add	 esp, 8
  0004c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0004f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _end$[ebp]
  0005a	84 c0		 test	 al, al
  0005c	75 4f		 jne	 SHORT $LN6@GetInterpo

; 215  : 			return GetLinearInterpolation(begin, end, curRate);
; 216  : 
; 217  : 		return (360.0f + GetLinearInterpolation(begin, end - 360.0f, curRate));

  0005e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43b40000
  00066	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _begin$[ebp]
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?GetLinearInterpolation@@YAMMMM@Z ; GetLinearInterpolation
  0007b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@43b40000

; 224  : }

  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN2@GetInterpo:

; 218  : 	}
; 219  : 
; 220  : 	if (IsCWAcuteAngle(begin, end))

  00086	e8 00 00 00 00	 call	 ?IsCWAcuteAngle@@YA_NMM@Z ; IsCWAcuteAngle
  0008b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _curRate$[ebp]
  00090	83 c4 08	 add	 esp, 8
  00093	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00096	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0009c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _end$[ebp]
  000a1	84 c0		 test	 al, al
  000a3	75 08		 jne	 SHORT $LN6@GetInterpo

; 221  : 		return GetLinearInterpolation(begin, end, curRate);
; 222  : 
; 223  : 	return GetLinearInterpolation(begin, end + 360.0f, curRate);

  000a5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43b40000
$LN6@GetInterpo:

; 224  : }

  000ad	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _begin$[ebp]
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	e8 00 00 00 00	 call	 ?GetLinearInterpolation@@YAMMMM@Z ; GetLinearInterpolation
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?GetInterpolatedRotation@@YAMMMM@Z ENDP			; GetInterpolatedRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?GetDegreeFromPosition2@@YAMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?GetDegreeFromPosition2@@YAMMMMM@Z PROC			; GetDegreeFromPosition2, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 242  : 	return GetDegreeFromPosition(ex - sx, ey - sy);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _sy$[ebp]
  00010	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00016	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0001b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _sx$[ebp]
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?GetDegreeFromPosition@@YAMMM@Z ; GetDegreeFromPosition
  0002a	83 c4 08	 add	 esp, 8

; 243  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetDegreeFromPosition2@@YAMMMMM@Z ENDP			; GetDegreeFromPosition2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?GetDegreeFromPosition@@YAMMM@Z
_TEXT	SEGMENT
tv258 = -24						; size = 8
tv250 = -24						; size = 8
_ret$ = -20						; size = 4
_vtDir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetDegreeFromPosition@@YAMMM@Z PROC			; GetDegreeFromPosition, COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 686  :             return (float)floor(_X);

  00015	83 ec 08	 sub	 esp, 8
  00018	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001b	f2 0f 11 45 e8	 movsd	 QWORD PTR tv258[ebp], xmm0
  00020	dd 45 e8	 fld	 QWORD PTR tv258[ebp]
  00023	dd 1c 24	 fstp	 QWORD PTR [esp]
  00026	e8 00 00 00 00	 call	 _floor
  0002b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00030	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00033	d9 5d f0	 fstp	 DWORD PTR _vtDir$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 686  :             return (float)floor(_X);

  00036	f2 0f 11 45 e8	 movsd	 QWORD PTR tv250[ebp], xmm0
  0003b	dd 45 e8	 fld	 QWORD PTR tv250[ebp]
  0003e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00041	e8 00 00 00 00	 call	 _floor
  00046	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vtDir$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 229  : 	D3DXVec3Normalize(&vtDir, &vtDir);

  00050	8d 45 f0	 lea	 eax, DWORD PTR _vtDir$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00053	d9 5d f4	 fstp	 DWORD PTR _vtDir$[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 229  : 	D3DXVec3Normalize(&vtDir, &vtDir);

  00056	50		 push	 eax
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0005d	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vtDir$[ebp]
  00062	0f 57 d2	 xorps	 xmm2, xmm2

; 182  :     z = fz;

  00065	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vtDir$[ebp+4]
  0006a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f800000

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00072	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00076	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vtDir$[ebp+8]
  0007f	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00083	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  00087	0f 5a c1	 cvtps2pd xmm0, xmm1
  0008a	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  0008f	0f 57 c9	 xorps	 xmm1, xmm1
  00092	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 234  : 	if (vtDir.x < 0.0f)

  00099	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _vtDir$[ebp]
  0009d	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42652ee0
  000a5	f3 0f 11 4d ec	 movss	 DWORD PTR _ret$[ebp], xmm1
  000aa	76 11		 jbe	 SHORT $LN20@GetDegreeF

; 235  : 		ret = 360.0f - ret;

  000ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b40000
  000b4	f3 0f 5c c1	 subss	 xmm0, xmm1
  000b8	f3 0f 11 45 ec	 movss	 DWORD PTR _ret$[ebp], xmm0
$LN20@GetDegreeF:

; 236  : 
; 237  : 	return ret;
; 238  : }

  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	d9 45 ec	 fld	 DWORD PTR _ret$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
?GetDegreeFromPosition@@YAMMM@Z ENDP			; GetDegreeFromPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z
_TEXT	SEGMENT
_mi1$ = -136						; size = 12
_mi4$ = -124						; size = 12
_r$1$ = -112						; size = 4
_mi1$2$ = -108						; size = 4
_mi1$3$ = -104						; size = 4
_mi1$1$ = -100						; size = 4
_mi4$1$ = -96						; size = 4
_mi2$1$ = -92						; size = 4
_mi3$1$ = -88						; size = 4
_c_rCylinder2$ = -84					; size = 28
_c_rCylinder1$ = -56					; size = 28
_vA$ = -28						; size = 12
_mi3$ = -28						; size = 12
_vB$ = -16						; size = 12
_mi2$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rSphere1$ = 8					; size = 4
_c_rSphere2$ = 12					; size = 4
?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z PROC ; DetectCollisionDynamicZCylinderVSDynamicZCylinder, COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _c_rSphere1$[ebp]
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rSphere2$[ebp]

; 8    : 	CDynamicSphereInstance c_rCylinder1=c_rSphere1;

  00019	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0001c	0f 11 45 c8	 movups	 XMMWORD PTR _c_rCylinder1$[ebp], xmm0

; 9    : 	CDynamicSphereInstance c_rCylinder2=c_rSphere2;
; 10   : 
; 11   : 	c_rCylinder1.v3Position.z=0;

  00020	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _c_rCylinder1$[ebp+8], 0
  00027	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0002c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0002f	66 0f d6 45 d8	 movq	 QWORD PTR _c_rCylinder1$[ebp+16], xmm0
  00034	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00037	89 45 e0	 mov	 DWORD PTR _c_rCylinder1$[ebp+24], eax
  0003a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0003d	0f 11 45 ac	 movups	 XMMWORD PTR _c_rCylinder2$[ebp], xmm0
  00041	89 45 c4	 mov	 DWORD PTR _c_rCylinder2$[ebp+24], eax
  00044	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00049	66 0f d6 45 bc	 movq	 QWORD PTR _c_rCylinder2$[ebp+16], xmm0

; 12   : 	c_rCylinder1.v3LastPosition.z=0;
; 13   : 
; 14   : 	c_rCylinder2.v3Position.z=0;
; 15   : 	c_rCylinder2.v3LastPosition.z=0;
; 16   : 
; 17   : 	float r = c_rCylinder1.fRadius+c_rCylinder2.fRadius;

  0004e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _c_rCylinder2$[ebp+24]
  00053	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _c_rCylinder1$[ebp+24]

; 18   : 	float rsq = r*r;
; 19   : 
; 20   : 	// AABB check
; 21   : 	D3DXVECTOR3 mi1=c_rCylinder1.v3LastPosition, mi2 = c_rCylinder1.v3Position;
; 22   : 	D3DXVECTOR3 mi3=c_rCylinder2.v3LastPosition, mi4 = c_rCylinder2.v3Position;
; 23   : 	if (mi1.x>mi2.x) std::swap(mi1.x,mi2.x);

  00058	f3 0f 10 5d c8	 movss	 xmm3, DWORD PTR _c_rCylinder1$[ebp]
  0005d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _c_rCylinder1$[ebp+20], 0
  00064	8b 45 dc	 mov	 eax, DWORD PTR _c_rCylinder1$[ebp+20]
  00067	89 45 80	 mov	 DWORD PTR _mi1$[ebp+8], eax
  0006a	8b 45 d0	 mov	 eax, DWORD PTR _c_rCylinder1$[ebp+8]
  0006d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00071	89 45 f8	 mov	 DWORD PTR _mi2$[ebp+8], eax
  00074	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _c_rCylinder2$[ebp+20], 0
  0007b	8b 45 c0	 mov	 eax, DWORD PTR _c_rCylinder2$[ebp+20]
  0007e	f3 0f 11 45 90	 movss	 DWORD PTR _r$1$[ebp], xmm0
  00083	f3 0f 7e 45 d4	 movq	 xmm0, QWORD PTR _c_rCylinder1$[ebp+12]
  00088	66 0f d6 85 78
	ff ff ff	 movq	 QWORD PTR _mi1$[ebp], xmm0
  00090	f3 0f 7e 45 c8	 movq	 xmm0, QWORD PTR _c_rCylinder1$[ebp]
  00095	66 0f d6 45 f0	 movq	 QWORD PTR _mi2$[ebp], xmm0
  0009a	f3 0f 7e 45 b8	 movq	 xmm0, QWORD PTR _c_rCylinder2$[ebp+12]
  0009f	66 0f d6 45 e4	 movq	 QWORD PTR _mi3$[ebp], xmm0
  000a4	f3 0f 7e 45 ac	 movq	 xmm0, QWORD PTR _c_rCylinder2$[ebp]
  000a9	66 0f d6 45 84	 movq	 QWORD PTR _mi4$[ebp], xmm0
  000ae	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _c_rCylinder1$[ebp+12]
  000b3	0f 2f c3	 comiss	 xmm0, xmm3
  000b6	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _c_rCylinder2$[ebp+8], 0
  000bd	89 45 ec	 mov	 DWORD PTR _mi3$[ebp+8], eax
  000c0	8b 45 b4	 mov	 eax, DWORD PTR _c_rCylinder2$[ebp+8]
  000c3	89 45 8c	 mov	 DWORD PTR _mi4$[ebp+8], eax
  000c6	f3 0f 11 45 a4	 movss	 DWORD PTR _mi2$1$[ebp], xmm0
  000cb	f3 0f 11 5d 9c	 movss	 DWORD PTR _mi1$1$[ebp], xmm3
  000d0	77 17		 ja	 SHORT $LN16@DetectColl
  000d2	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _mi1$[ebp]
  000da	f3 0f 11 45 9c	 movss	 DWORD PTR _mi1$1$[ebp], xmm0
  000df	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mi2$[ebp]
  000e4	f3 0f 11 45 a4	 movss	 DWORD PTR _mi2$1$[ebp], xmm0
$LN16@DetectColl:

; 24   : 	if (mi1.y>mi2.y) std::swap(mi1.y,mi2.y);

  000e9	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _mi1$[ebp+4]
  000f1	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _mi2$[ebp+4]
  000f6	0f 2f ca	 comiss	 xmm1, xmm2
  000f9	76 09		 jbe	 SHORT $LN18@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000fb	0f 28 c1	 movaps	 xmm0, xmm1

; 107  :     _Left    = _STD move(_Right);

  000fe	0f 28 ca	 movaps	 xmm1, xmm2

; 108  :     _Right   = _STD move(_Tmp);

  00101	0f 28 d0	 movaps	 xmm2, xmm0
$LN18@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 25   : 	if (mi1.z>mi2.z) std::swap(mi1.z,mi2.z);

  00104	f3 0f 10 5d 80	 movss	 xmm3, DWORD PTR _mi1$[ebp+8]
  00109	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _mi2$[ebp+8]
  0010e	0f 2f dc	 comiss	 xmm3, xmm4
  00111	76 09		 jbe	 SHORT $LN20@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00113	0f 28 c3	 movaps	 xmm0, xmm3

; 107  :     _Left    = _STD move(_Right);

  00116	0f 28 dc	 movaps	 xmm3, xmm4

; 108  :     _Right   = _STD move(_Tmp);

  00119	0f 28 e0	 movaps	 xmm4, xmm0
$LN20@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 26   : 	if (mi3.x>mi4.x) std::swap(mi3.x,mi4.x);

  0011c	f3 0f 10 75 b8	 movss	 xmm6, DWORD PTR _c_rCylinder2$[ebp+12]
  00121	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _c_rCylinder2$[ebp]
  00126	0f 2f f0	 comiss	 xmm6, xmm0
  00129	f3 0f 11 75 a0	 movss	 DWORD PTR _mi4$1$[ebp], xmm6
  0012e	f3 0f 11 45 a8	 movss	 DWORD PTR _mi3$1$[ebp], xmm0
  00133	77 14		 ja	 SHORT $LN22@DetectColl
  00135	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mi3$[ebp]
  0013a	f3 0f 11 45 a8	 movss	 DWORD PTR _mi3$1$[ebp], xmm0
  0013f	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _mi4$[ebp]
  00144	f3 0f 11 45 a0	 movss	 DWORD PTR _mi4$1$[ebp], xmm0
$LN22@DetectColl:

; 27   : 	if (mi3.y>mi4.y) std::swap(mi3.y,mi4.y);

  00149	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR _mi3$[ebp+4]
  0014e	f3 0f 10 7d 88	 movss	 xmm7, DWORD PTR _mi4$[ebp+4]
  00153	0f 2f ef	 comiss	 xmm5, xmm7
  00156	76 09		 jbe	 SHORT $LN24@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00158	0f 28 c5	 movaps	 xmm0, xmm5

; 107  :     _Left    = _STD move(_Right);

  0015b	0f 28 ef	 movaps	 xmm5, xmm7

; 108  :     _Right   = _STD move(_Tmp);

  0015e	0f 28 f8	 movaps	 xmm7, xmm0
$LN24@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 28   : 	if (mi3.z>mi4.z) std::swap(mi3.z,mi4.z);

  00161	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR _mi3$[ebp+8]
  00166	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _mi4$[ebp+8]
  0016b	0f 2f f0	 comiss	 xmm6, xmm0
  0016e	76 08		 jbe	 SHORT $LN26@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00170	0f 28 c6	 movaps	 xmm0, xmm6

; 107  :     _Left    = _STD move(_Right);

  00173	f3 0f 10 75 8c	 movss	 xmm6, DWORD PTR _mi4$[ebp+8]
$LN26@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 29   : 	mi1.x -= c_rCylinder1.fRadius; mi1.y -= c_rCylinder1.fRadius; mi1.z -= c_rCylinder1.fRadius;

  00178	f3 0f 5c 4d e0	 subss	 xmm1, DWORD PTR _c_rCylinder1$[ebp+24]
  0017d	f3 0f 11 4d 94	 movss	 DWORD PTR _mi1$2$[ebp], xmm1
  00182	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _c_rCylinder1$[ebp+24]
  00187	f3 0f 5c d9	 subss	 xmm3, xmm1

; 30   : 	mi2.x += c_rCylinder1.fRadius; mi2.y += c_rCylinder1.fRadius; mi2.z += c_rCylinder1.fRadius;

  0018b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0018f	f3 0f 58 e1	 addss	 xmm4, xmm1
  00193	f3 0f 11 5d 98	 movss	 DWORD PTR _mi1$3$[ebp], xmm3
  00198	f3 0f 10 5d a4	 movss	 xmm3, DWORD PTR _mi2$1$[ebp]
  0019d	f3 0f 58 d9	 addss	 xmm3, xmm1

; 31   : 	mi3.x -= c_rCylinder2.fRadius; mi3.y -= c_rCylinder2.fRadius; mi3.z -= c_rCylinder2.fRadius;

  001a1	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _c_rCylinder2$[ebp+24]
  001a6	f3 0f 5c e9	 subss	 xmm5, xmm1
  001aa	f3 0f 5c f1	 subss	 xmm6, xmm1

; 32   : 	mi4.x += c_rCylinder2.fRadius; mi4.y += c_rCylinder2.fRadius; mi4.z += c_rCylinder2.fRadius;

  001ae	f3 0f 58 f9	 addss	 xmm7, xmm1
  001b2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b6	f3 0f 11 5d a4	 movss	 DWORD PTR _mi2$1$[ebp], xmm3
  001bb	f3 0f 10 5d a8	 movss	 xmm3, DWORD PTR _mi3$1$[ebp]
  001c0	f3 0f 5c d9	 subss	 xmm3, xmm1
  001c4	f3 0f 11 5d a8	 movss	 DWORD PTR _mi3$1$[ebp], xmm3
  001c9	f3 0f 10 5d a0	 movss	 xmm3, DWORD PTR _mi4$1$[ebp]
  001ce	f3 0f 58 d9	 addss	 xmm3, xmm1
  001d2	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _mi1$1$[ebp]
  001d7	f3 0f 5c 4d e0	 subss	 xmm1, DWORD PTR _c_rCylinder1$[ebp+24]
  001dc	0f 2f cb	 comiss	 xmm1, xmm3

; 33   : 	if (mi4.x<mi1.x || mi2.x<mi3.x) return false;

  001df	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _mi1$2$[ebp]
  001e4	0f 87 8f 00 00
	00		 ja	 $LN9@DetectColl
  001ea	f3 0f 10 5d a8	 movss	 xmm3, DWORD PTR _mi3$1$[ebp]
  001ef	0f 2f 5d a4	 comiss	 xmm3, DWORD PTR _mi2$1$[ebp]
  001f3	f3 0f 10 5d 98	 movss	 xmm3, DWORD PTR _mi1$3$[ebp]
  001f8	77 7f		 ja	 SHORT $LN9@DetectColl

; 34   : 	if (mi4.y<mi1.y || mi2.y<mi3.y) return false;

  001fa	0f 2f cf	 comiss	 xmm1, xmm7
  001fd	77 7a		 ja	 SHORT $LN9@DetectColl
  001ff	0f 2f ea	 comiss	 xmm5, xmm2
  00202	77 75		 ja	 SHORT $LN9@DetectColl

; 35   : 	if (mi4.z<mi1.z || mi2.z<mi3.z) return false;

  00204	0f 2f d8	 comiss	 xmm3, xmm0
  00207	77 70		 ja	 SHORT $LN9@DetectColl
  00209	0f 2f f4	 comiss	 xmm6, xmm4
  0020c	77 6b		 ja	 SHORT $LN9@DetectColl

; 38   : 	IntersectLineSegments(c_rCylinder1.v3LastPosition, c_rCylinder1.v3Position,

  0020e	8d 45 f0	 lea	 eax, DWORD PTR _vB$[ebp]
  00211	50		 push	 eax
  00212	8d 45 e4	 lea	 eax, DWORD PTR _vA$[ebp]
  00215	50		 push	 eax
  00216	8d 45 ac	 lea	 eax, DWORD PTR _c_rCylinder2$[ebp]
  00219	50		 push	 eax
  0021a	8d 45 b8	 lea	 eax, DWORD PTR _c_rCylinder2$[ebp+12]
  0021d	50		 push	 eax
  0021e	8d 45 c8	 lea	 eax, DWORD PTR _c_rCylinder1$[ebp]
  00221	50		 push	 eax
  00222	8d 45 d4	 lea	 eax, DWORD PTR _c_rCylinder1$[ebp+12]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0022b	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vA$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 38   : 	IntersectLineSegments(c_rCylinder1.v3LastPosition, c_rCylinder1.v3Position,

  00230	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00233	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vA$[ebp+4]
  00238	f3 0f 5c 55 f4	 subss	 xmm2, DWORD PTR _vB$[ebp+4]
  0023d	f3 0f 5c 4d f0	 subss	 xmm1, DWORD PTR _vB$[ebp]
  00242	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vA$[ebp+8]
  00247	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _vB$[ebp+8]

; 182  :     z = fz;

  0024c	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00250	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00254	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00258	f3 0f 58 d1	 addss	 xmm2, xmm1
  0025c	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 41   : 	return (D3DXVec3LengthSq(&(vA-vB))<=rsq);

  00260	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _r$1$[ebp]
  00265	0f 2f c2	 comiss	 xmm0, xmm2
  00268	0f 93 c0	 setae	 al

; 42   : }

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	33 cd		 xor	 ecx, ebp
  00270	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
$LN9@DetectColl:
  00279	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027c	32 c0		 xor	 al, al
  0027e	33 cd		 xor	 ecx, ebp
  00280	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c3		 ret	 0
?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z ENDP ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp
;	COMDAT ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z
_TEXT	SEGMENT
_mi1$ = -84						; size = 12
_r$1$ = -72						; size = 4
tv693 = -68						; size = 4
tv692 = -64						; size = 4
_mi1$3$ = -60						; size = 4
_mi4$ = -56						; size = 12
_mi1$1$ = -44						; size = 4
_mi4$1$ = -40						; size = 4
_mi4$2$ = -36						; size = 4
tv697 = -36						; size = 4
_mi2$1$ = -32						; size = 4
tv691 = -32						; size = 4
_vA$ = -28						; size = 12
_mi3$ = -28						; size = 12
_vB$ = -16						; size = 12
_mi2$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rSphere1$ = 8					; size = 4
_c_rSphere2$ = 12					; size = 4
?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z PROC ; DetectCollisionDynamicSphereVSDynamicSphere, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _c_rSphere1$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _c_rSphere2$[ebp]

; 46   : 	float r = c_rSphere1.fRadius+c_rSphere2.fRadius;
; 47   : 	float rsq = r*r;
; 48   : 
; 49   : 	/*if (D3DXVec3LengthSq(&(c_rSphere1.v3Position		-c_rSphere2.v3Position		))<=rsq) return true;
; 50   : 	if (D3DXVec3LengthSq(&(c_rSphere1.v3Position		-c_rSphere2.v3LastPosition	))<=rsq) return true;
; 51   : 	if (D3DXVec3LengthSq(&(c_rSphere1.v3LastPosition	-c_rSphere2.v3Position		))<=rsq) return true;
; 52   : 	if (D3DXVec3LengthSq(&(c_rSphere1.v3LastPosition	-c_rSphere2.v3LastPosition	))<=rsq) return true;*/
; 53   : 
; 54   : 
; 55   : 	//*/
; 56   : 	// using gpg line-collision
; 57   : 
; 58   : 	// AABB check
; 59   : 
; 60   : 	D3DXVECTOR3 mi1=c_rSphere1.v3LastPosition, mi2 = c_rSphere1.v3Position;

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	56		 push	 esi
  0001a	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0001f	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  00022	f3 0f 58 42 18	 addss	 xmm0, DWORD PTR [edx+24]
  00027	57		 push	 edi
  00028	89 45 b4	 mov	 DWORD PTR _mi1$[ebp+8], eax

; 61   : 	D3DXVECTOR3 mi3=c_rSphere2.v3LastPosition, mi4 = c_rSphere2.v3Position;

  0002b	8d 7a 0c	 lea	 edi, DWORD PTR [edx+12]
  0002e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00031	89 45 f8	 mov	 DWORD PTR _mi2$[ebp+8], eax
  00034	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00037	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0003b	89 45 ec	 mov	 DWORD PTR _mi3$[ebp+8], eax
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	89 45 d0	 mov	 DWORD PTR _mi4$[ebp+8], eax
  00044	f3 0f 11 45 b8	 movss	 DWORD PTR _r$1$[ebp], xmm0
  00049	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0004d	66 0f d6 45 ac	 movq	 QWORD PTR _mi1$[ebp], xmm0
  00052	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]

; 62   : 	if (mi1.x>mi2.x) std::swap(mi1.x,mi2.x);

  00056	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _mi1$[ebp]
  0005b	66 0f d6 45 f0	 movq	 QWORD PTR _mi2$[ebp], xmm0
  00060	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00064	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _mi2$[ebp]
  00069	0f 2f ca	 comiss	 xmm1, xmm2
  0006c	66 0f d6 45 e4	 movq	 QWORD PTR _mi3$[ebp], xmm0
  00071	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00075	66 0f d6 45 c8	 movq	 QWORD PTR _mi4$[ebp], xmm0
  0007a	f3 0f 11 4d d4	 movss	 DWORD PTR _mi1$1$[ebp], xmm1
  0007f	f3 0f 11 55 e0	 movss	 DWORD PTR _mi2$1$[ebp], xmm2
  00084	76 10		 jbe	 SHORT $LN16@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00086	0f 28 c1	 movaps	 xmm0, xmm1

; 107  :     _Left    = _STD move(_Right);

  00089	0f 28 ca	 movaps	 xmm1, xmm2
  0008c	f3 0f 11 4d d4	 movss	 DWORD PTR _mi1$1$[ebp], xmm1

; 108  :     _Right   = _STD move(_Tmp);

  00091	f3 0f 11 45 e0	 movss	 DWORD PTR _mi2$1$[ebp], xmm0
$LN16@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 63   : 	if (mi1.y>mi2.y) std::swap(mi1.y,mi2.y);

  00096	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _mi1$[ebp+4]
  0009b	f3 0f 10 75 f4	 movss	 xmm6, DWORD PTR _mi2$[ebp+4]
  000a0	0f 2f ce	 comiss	 xmm1, xmm6
  000a3	76 09		 jbe	 SHORT $LN18@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000a5	0f 28 c1	 movaps	 xmm0, xmm1

; 107  :     _Left    = _STD move(_Right);

  000a8	0f 28 ce	 movaps	 xmm1, xmm6

; 108  :     _Right   = _STD move(_Tmp);

  000ab	0f 28 f0	 movaps	 xmm6, xmm0
$LN18@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 64   : 	if (mi1.z>mi2.z) std::swap(mi1.z,mi2.z);

  000ae	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _mi1$[ebp+8]
  000b3	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR _mi2$[ebp+8]
  000b8	0f 2f d7	 comiss	 xmm2, xmm7
  000bb	76 09		 jbe	 SHORT $LN20@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000bd	0f 28 c2	 movaps	 xmm0, xmm2

; 107  :     _Left    = _STD move(_Right);

  000c0	0f 28 d7	 movaps	 xmm2, xmm7

; 108  :     _Right   = _STD move(_Tmp);

  000c3	0f 28 f8	 movaps	 xmm7, xmm0
$LN20@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 65   : 	if (mi3.x>mi4.x) std::swap(mi3.x,mi4.x);

  000c6	f3 0f 10 6d c8	 movss	 xmm5, DWORD PTR _mi4$[ebp]
  000cb	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _mi3$[ebp]
  000d0	0f 2f dd	 comiss	 xmm3, xmm5
  000d3	f3 0f 11 6d d8	 movss	 DWORD PTR _mi4$1$[ebp], xmm5
  000d8	76 0b		 jbe	 SHORT $LN22@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000da	0f 28 c3	 movaps	 xmm0, xmm3

; 107  :     _Left    = _STD move(_Right);

  000dd	0f 28 dd	 movaps	 xmm3, xmm5

; 108  :     _Right   = _STD move(_Tmp);

  000e0	f3 0f 11 45 d8	 movss	 DWORD PTR _mi4$1$[ebp], xmm0
$LN22@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 66   : 	if (mi3.y>mi4.y) std::swap(mi3.y,mi4.y);

  000e5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mi4$[ebp+4]
  000ea	f3 0f 10 65 e8	 movss	 xmm4, DWORD PTR _mi3$[ebp+4]
  000ef	0f 2f e0	 comiss	 xmm4, xmm0
  000f2	f3 0f 11 45 dc	 movss	 DWORD PTR _mi4$2$[ebp], xmm0
  000f7	76 0d		 jbe	 SHORT $LN24@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000f9	0f 28 c4	 movaps	 xmm0, xmm4

; 107  :     _Left    = _STD move(_Right);

  000fc	f3 0f 10 65 cc	 movss	 xmm4, DWORD PTR _mi4$[ebp+4]

; 108  :     _Right   = _STD move(_Tmp);

  00101	f3 0f 11 45 dc	 movss	 DWORD PTR _mi4$2$[ebp], xmm0
$LN24@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 67   : 	if (mi3.z>mi4.z) std::swap(mi3.z,mi4.z);

  00106	f3 0f 10 6d ec	 movss	 xmm5, DWORD PTR _mi3$[ebp+8]
  0010b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mi4$[ebp+8]
  00110	0f 2f e8	 comiss	 xmm5, xmm0
  00113	76 08		 jbe	 SHORT $LN26@DetectColl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00115	0f 28 c5	 movaps	 xmm0, xmm5

; 107  :     _Left    = _STD move(_Right);

  00118	f3 0f 10 6d d0	 movss	 xmm5, DWORD PTR _mi4$[ebp+8]
$LN26@DetectColl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 68   : 	mi1.x -= c_rSphere1.fRadius; mi1.y -= c_rSphere1.fRadius; mi1.z -= c_rSphere1.fRadius;

  0011d	f3 0f 5c 51 18	 subss	 xmm2, DWORD PTR [ecx+24]
  00122	f3 0f 5c 49 18	 subss	 xmm1, DWORD PTR [ecx+24]
  00127	f3 0f 11 55 c4	 movss	 DWORD PTR _mi1$3$[ebp], xmm2

; 69   : 	mi2.x += c_rSphere1.fRadius; mi2.y += c_rSphere1.fRadius; mi2.z += c_rSphere1.fRadius;

  0012c	f3 0f 10 51 18	 movss	 xmm2, DWORD PTR [ecx+24]
  00131	f3 0f 58 55 e0	 addss	 xmm2, DWORD PTR _mi2$1$[ebp]
  00136	f3 0f 11 55 e0	 movss	 DWORD PTR tv691[ebp], xmm2
  0013b	f3 0f 10 51 18	 movss	 xmm2, DWORD PTR [ecx+24]
  00140	f3 0f 58 d6	 addss	 xmm2, xmm6
  00144	f3 0f 10 71 18	 movss	 xmm6, DWORD PTR [ecx+24]
  00149	f3 0f 58 f7	 addss	 xmm6, xmm7
  0014d	f3 0f 11 55 c0	 movss	 DWORD PTR tv692[ebp], xmm2
  00152	f3 0f 11 75 bc	 movss	 DWORD PTR tv693[ebp], xmm6

; 70   : 	mi3.x -= c_rSphere2.fRadius; mi3.y -= c_rSphere2.fRadius; mi3.z -= c_rSphere2.fRadius;

  00157	f3 0f 10 72 18	 movss	 xmm6, DWORD PTR [edx+24]

; 71   : 	mi4.x += c_rSphere2.fRadius; mi4.y += c_rSphere2.fRadius; mi4.z += c_rSphere2.fRadius;

  0015c	0f 28 fe	 movaps	 xmm7, xmm6
  0015f	f3 0f 5c de	 subss	 xmm3, xmm6
  00163	0f 28 d6	 movaps	 xmm2, xmm6
  00166	f3 0f 58 f8	 addss	 xmm7, xmm0
  0016a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mi1$1$[ebp]
  0016f	f3 0f 5c e6	 subss	 xmm4, xmm6
  00173	f3 0f 58 55 dc	 addss	 xmm2, DWORD PTR _mi4$2$[ebp]
  00178	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  0017d	f3 0f 5c ee	 subss	 xmm5, xmm6
  00181	f3 0f 58 75 d8	 addss	 xmm6, DWORD PTR _mi4$1$[ebp]
  00186	f3 0f 11 55 dc	 movss	 DWORD PTR tv697[ebp], xmm2

; 72   : 	if (mi4.x<mi1.x || mi2.x<mi3.x) return false;

  0018b	f3 0f 10 55 c4	 movss	 xmm2, DWORD PTR _mi1$3$[ebp]
  00190	0f 2f c6	 comiss	 xmm0, xmm6
  00193	77 7e		 ja	 SHORT $LN9@DetectColl
  00195	0f 2f 5d e0	 comiss	 xmm3, DWORD PTR tv691[ebp]
  00199	77 78		 ja	 SHORT $LN9@DetectColl

; 73   : 	if (mi4.y<mi1.y || mi2.y<mi3.y) return false;

  0019b	0f 2f 4d dc	 comiss	 xmm1, DWORD PTR tv697[ebp]
  0019f	77 72		 ja	 SHORT $LN9@DetectColl
  001a1	0f 2f 65 c0	 comiss	 xmm4, DWORD PTR tv692[ebp]
  001a5	77 6c		 ja	 SHORT $LN9@DetectColl

; 74   : 	if (mi4.z<mi1.z || mi2.z<mi3.z) return false;

  001a7	0f 2f d7	 comiss	 xmm2, xmm7
  001aa	77 67		 ja	 SHORT $LN9@DetectColl
  001ac	0f 2f 6d bc	 comiss	 xmm5, DWORD PTR tv693[ebp]
  001b0	77 61		 ja	 SHORT $LN9@DetectColl

; 83   : 	IntersectLineSegments(c_rSphere1.v3LastPosition, c_rSphere1.v3Position,

  001b2	8d 45 f0	 lea	 eax, DWORD PTR _vB$[ebp]
  001b5	50		 push	 eax
  001b6	8d 45 e4	 lea	 eax, DWORD PTR _vA$[ebp]
  001b9	50		 push	 eax
  001ba	52		 push	 edx
  001bb	57		 push	 edi
  001bc	51		 push	 ecx
  001bd	56		 push	 esi
  001be	e8 00 00 00 00	 call	 ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001c3	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vA$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 83   : 	IntersectLineSegments(c_rSphere1.v3LastPosition, c_rSphere1.v3Position,

  001c8	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001cb	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vA$[ebp+4]
  001d0	f3 0f 5c 55 f4	 subss	 xmm2, DWORD PTR _vB$[ebp+4]
  001d5	f3 0f 5c 4d f0	 subss	 xmm1, DWORD PTR _vB$[ebp]
  001da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vA$[ebp+8]
  001df	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _vB$[ebp+8]
  001e4	5f		 pop	 edi

; 182  :     z = fz;

  001e5	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 90   : }

  001e9	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001ea	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001ee	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001f2	f3 0f 58 d1	 addss	 xmm2, xmm1
  001f6	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\GameUtil.cpp

; 86   : 	return (D3DXVec3LengthSq(&(vA-vB))<=rsq);

  001fa	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _r$1$[ebp]
  001ff	0f 2f c2	 comiss	 xmm0, xmm2
  00202	0f 93 c0	 setae	 al

; 90   : }

  00205	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00208	33 cd		 xor	 ecx, ebp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c3		 ret	 0
$LN9@DetectColl:
  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	32 c0		 xor	 al, al
  00218	5f		 pop	 edi
  00219	33 cd		 xor	 ecx, ebp
  0021b	5e		 pop	 esi
  0021c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ENDP ; DetectCollisionDynamicSphereVSDynamicSphere
_TEXT	ENDS
END
