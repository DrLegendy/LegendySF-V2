; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA DB 'None', 00H ; prt::c_szPropertyTypeName
	ORG $+27
	DB	'Tree', 00H
	ORG $+27
	DB	'Building', 00H
	ORG $+23
	DB	'Effect', 00H
	ORG $+25
	DB	'Ambience', 00H
	ORG $+23
	DB	'DungeonBlock', 00H
	ORG $+19
?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA DB '.pr', 00H ; prt::c_szPropertyExtension
	ORG $+12
	DB	'.prt', 00H
	ORG $+11
	DB	'.prb', 00H
	ORG $+11
	DB	'.pre', 00H
	ORG $+11
	DB	'.pra', 00H
	ORG $+11
	DB	'.prd', 00H
	ORG $+11
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?GetPropertyType@prt@@YAKPBD@Z			; prt::GetPropertyType
PUBLIC	?GetPropertyExtension@prt@@YAPBDK@Z		; prt::GetPropertyExtension
PUBLIC	?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ; prt::PropertyTreeDataToString
PUBLIC	?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ; prt::PropertyTreeStringToData
PUBLIC	?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ; prt::PropertyBuildingDataToString
PUBLIC	?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ; prt::PropertyBuildingStringToData
PUBLIC	?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ; prt::PropertyEffectDataToString
PUBLIC	?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ; prt::PropertyEffectStringToData
PUBLIC	?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ; prt::PropertyAmbienceDataToString
PUBLIC	?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ; prt::PropertyAmbienceStringToData
PUBLIC	?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ; prt::PropertyDungeonBlockDataToString
PUBLIC	?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ; prt::PropertyDungeonBlockStringToData
PUBLIC	?GetFogNearDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogNearDistance
PUBLIC	?GetFogFarDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogFarDistance
PUBLIC	?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ; SPixelPosition_CalculateDistanceSq3d
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?IntegerNumberToString@prt@@YAPBDH@Z		; prt::IntegerNumberToString
PUBLIC	?FloatNumberToString@prt@@YAPBDM@Z		; prt::FloatNumberToString
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_04GDOOJPNH@Tree@				; `string'
PUBLIC	??_C@_0N@FPEBPNJJ@PropertyType@			; `string'
PUBLIC	??_C@_0N@PEECDNOJ@PropertyName@			; `string'
PUBLIC	??_C@_08JBFACIKL@TreeFile@			; `string'
PUBLIC	??_C@_08CBPLOPJL@TreeSize@			; `string'
PUBLIC	??_C@_0N@IDDBDNKA@TreeVariance@			; `string'
PUBLIC	??_C@_08COFDOLHN@Building@			; `string'
PUBLIC	??_C@_0N@LJHIPMJO@BuildingFile@			; `string'
PUBLIC	??_C@_0L@GJODCEE@ShadowFlag@			; `string'
PUBLIC	??_C@_06OIKCOENH@?4mdatr@			; `string'
PUBLIC	??_C@_06LBEFNKEP@Effect@			; `string'
PUBLIC	??_C@_0L@LKNLHIBB@EffectFile@			; `string'
PUBLIC	??_C@_08HABDNILH@Ambience@			; `string'
PUBLIC	??_C@_08HKNDHFCE@PlayType@			; `string'
PUBLIC	??_C@_0N@PFAKOMHI@PlayInterval@			; `string'
PUBLIC	??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@	; `string'
PUBLIC	??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@	; `string'
PUBLIC	??_C@_0BE@CHLDPEGL@AmbienceSoundVector@		; `string'
PUBLIC	??_C@_0N@HFPGEGLM@DungeonBlock@			; `string'
PUBLIC	??_C@_0BB@IJOAHLBO@DungeonBlockFile@		; `string'
PUBLIC	??_C@_0BB@CJNPGFDA@dungeonblockfile@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Clear@CProperty@@QAEXXZ:PROC			; CProperty::Clear
EXTRN	?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::GetVector
EXTRN	?GetString@CProperty@@QAE_NPBDPAPBD@Z:PROC	; CProperty::GetString
EXTRN	?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::PutVector
EXTRN	?PutString@CProperty@@QAEXPBD0@Z:PROC		; CProperty::PutString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
_BSS	SEGMENT
?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA DB 011H DUP (?) ; `prt::IntegerNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
_BSS	SEGMENT
?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA DB 011H DUP (?) ; `prt::FloatNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJNPGFDA@dungeonblockfile@
CONST	SEGMENT
??_C@_0BB@CJNPGFDA@dungeonblockfile@ DB 'dungeonblockfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
CONST	SEGMENT
??_C@_0BB@IJOAHLBO@DungeonBlockFile@ DB 'DungeonBlockFile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFPGEGLM@DungeonBlock@
CONST	SEGMENT
??_C@_0N@HFPGEGLM@DungeonBlock@ DB 'DungeonBlock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
CONST	SEGMENT
??_C@_0BE@CHLDPEGL@AmbienceSoundVector@ DB 'AmbienceSoundVector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
CONST	SEGMENT
??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@ DB 'MaxVolumeAreaPercentage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
CONST	SEGMENT
??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@ DB 'PlayIntervalVariation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFAKOMHI@PlayInterval@
CONST	SEGMENT
??_C@_0N@PFAKOMHI@PlayInterval@ DB 'PlayInterval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKNDHFCE@PlayType@
CONST	SEGMENT
??_C@_08HKNDHFCE@PlayType@ DB 'PlayType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HABDNILH@Ambience@
CONST	SEGMENT
??_C@_08HABDNILH@Ambience@ DB 'Ambience', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LKNLHIBB@EffectFile@
CONST	SEGMENT
??_C@_0L@LKNLHIBB@EffectFile@ DB 'EffectFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBEFNKEP@Effect@
CONST	SEGMENT
??_C@_06LBEFNKEP@Effect@ DB 'Effect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKCOENH@?4mdatr@
CONST	SEGMENT
??_C@_06OIKCOENH@?4mdatr@ DB '.mdatr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJODCEE@ShadowFlag@
CONST	SEGMENT
??_C@_0L@GJODCEE@ShadowFlag@ DB 'ShadowFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJHIPMJO@BuildingFile@
CONST	SEGMENT
??_C@_0N@LJHIPMJO@BuildingFile@ DB 'BuildingFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08COFDOLHN@Building@
CONST	SEGMENT
??_C@_08COFDOLHN@Building@ DB 'Building', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDDBDNKA@TreeVariance@
CONST	SEGMENT
??_C@_0N@IDDBDNKA@TreeVariance@ DB 'TreeVariance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBPLOPJL@TreeSize@
CONST	SEGMENT
??_C@_08CBPLOPJL@TreeSize@ DB 'TreeSize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBFACIKL@TreeFile@
CONST	SEGMENT
??_C@_08JBFACIKL@TreeFile@ DB 'TreeFile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEECDNOJ@PropertyName@
CONST	SEGMENT
??_C@_0N@PEECDNOJ@PropertyName@ DB 'PropertyName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPEBPNJJ@PropertyType@
CONST	SEGMENT
??_C@_0N@FPEBPNJJ@PropertyType@ DB 'PropertyType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOOJPNH@Tree@
CONST	SEGMENT
??_C@_04GDOOJPNH@Tree@ DB 'Tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1
__ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0
__ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1
__ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0
__ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 49		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00027	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0002f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00032	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00035	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0003a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003f	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00042	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00049	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00050	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00053	83 c0 18	 add	 eax, 24			; 00000018H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	3b c2		 cmp	 eax, edx
  00058	75 c6		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0005a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0005d	56		 push	 esi
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 2d		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 0c		 jb	 SHORT $LN15@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00021	83 c4 08	 add	 esp, 8
$LN15@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	3b f7		 cmp	 esi, edi
  0003a	75 d4		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0003c	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Newvec$ = -40						; size = 4
_this$ = -36						; size = 4
tv296 = -32						; size = 4
__Oldsize$1$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
__Constructed_last$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d dc	 mov	 DWORD PTR _this$[ebp], edi

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx
  00061	89 45 e4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00064	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00069	0f 84 f5 00 00
	00		 je	 $LN37@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00072	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	2b ce		 sub	 ecx, esi
  00077	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007c	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0007e	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 02	 sar	 edx, 2
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 07		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00097	8b f3		 mov	 esi, ebx
  00099	89 5d e8	 mov	 DWORD PTR __Newcapacity$[ebp], ebx
  0009c	eb 0b		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009e	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000a1	3b f3		 cmp	 esi, ebx
  000a3	0f 42 f3	 cmovb	 esi, ebx
  000a6	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000af	0f 87 b4 00 00
	00		 ja	 $LN38@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000b8	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000c1	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 748  :         _TRY_BEGIN

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ca	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000cd	83 c4 04	 add	 esp, 4
  000d0	89 5d d8	 mov	 DWORD PTR __Newvec$[ebp], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d3	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000d6	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000d9	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  000dc	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  000df	89 4d e0	 mov	 DWORD PTR tv296[ebp], ecx
  000e2	89 45 ec	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ea	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ed	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000f0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f2	3b d0		 cmp	 edx, eax
  000f4	75 04		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f6	8b d3		 mov	 edx, ebx

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  000f8	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000fa	57		 push	 edi
  000fb	53		 push	 ebx
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00103	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00106	83 c4 10	 add	 esp, 16			; 00000010H
  00109	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010c	8b 55 ec	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0010f	57		 push	 edi
  00110	52		 push	 edx
  00111	50		 push	 eax
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00118	8b 4d e4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	41		 inc	 ecx
  0011f	56		 push	 esi
  00120	51		 push	 ecx
  00121	53		 push	 ebx
  00122	8b cf		 mov	 ecx, edi
  00124	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00129	8b 45 e0	 mov	 eax, DWORD PTR tv296[ebp]

; 767  :     }

  0012c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00136	59		 pop	 ecx
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00140	8b 45 ec	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00143	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	50		 push	 eax
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0014d	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  00150	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	ff 75 d8	 push	 DWORD PTR __Newvec$[ebp]
  00156	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 762  :         _RERAISE;

  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Emplace_re:

; 738  :             _Xlength();

  00164	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN38@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00169	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Emplace_re:
  0016e	cc		 int	 3
  0016f	cc		 int	 3
  00170	cc		 int	 3
  00171	cc		 int	 3
  00172	cc		 int	 3
  00173	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Newvec$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 37		 mov	 esi, DWORD PTR [edi]
  00015	2b d6		 sub	 edx, esi

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b da		 mov	 ebx, edx
  00037	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0003a	03 da		 add	 ebx, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0003c	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00042	0f 84 d6 00 00
	00		 je	 $LN49@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	2b ce		 sub	 ecx, esi

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00052	43		 inc	 ebx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00055	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005a	c1 fa 02	 sar	 edx, 2
  0005d	8b ca		 mov	 ecx, edx
  0005f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00062	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00064	8b d1		 mov	 edx, ecx
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0006e	8b f3		 mov	 esi, ebx
  00070	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00072	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00075	3b f3		 cmp	 esi, ebx
  00077	0f 42 f3	 cmovb	 esi, ebx
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007a	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00080	0f 87 9d 00 00
	00		 ja	 $LN50@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00086	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00089	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00095	83 c4 04	 add	 esp, 4
  00098	89 45 f8	 mov	 DWORD PTR __Newvec$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0009e	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000a4	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  000ab	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000b2	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000b5	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b8	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  000bb	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  000c0	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000c5	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000cc	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d3	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000d9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000db	39 55 08	 cmp	 DWORD PTR __Whereptr$[ebp], edx
  000de	74 1a		 je	 SHORT $LN5@Emplace_re

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000e0	57		 push	 edi
  000e1	50		 push	 eax
  000e2	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ee	83 c4 10	 add	 esp, 16			; 00000010H
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000f4	83 c0 18	 add	 eax, 24			; 00000018H

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f7	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fa	57		 push	 edi
  000fb	50		 push	 eax
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00103	83 c4 10	 add	 esp, 16			; 00000010H

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00106	8b cf		 mov	 ecx, edi
  00108	56		 push	 esi
  00109	53		 push	 ebx
  0010a	ff 75 f8	 push	 DWORD PTR __Newvec$1$[ebp]
  0010d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx

; 767  :     }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN49@Emplace_re:

; 738  :             _Xlength();

  0011e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN50@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00123	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN47@Emplace_re:
  00128	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
__Old_size$1$ = -12					; size = 4
__New_ptr$1 = -8					; size = 4
__Old$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
tv545 = 12						; size = 4
tv542 = 12						; size = 4
$T2 = 12						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL64@operator:
  00011	8a 07		 mov	 al, BYTE PTR [edi]
  00013	47		 inc	 edi
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL64@operator

; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00018	8b 5d 0c	 mov	 ebx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001b	2b fa		 sub	 edi, edx

; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  0001d	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00020	8b c2		 mov	 eax, edx
  00022	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00025	2b c6		 sub	 eax, esi
  00027	89 75 f4	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0002a	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0002d	3b f8		 cmp	 edi, eax
  0002f	77 25		 ja	 SHORT $LN10@operator

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00031	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00034	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00037	8b c3		 mov	 eax, ebx

; 2153 :         return _BUF_SIZE <= _Myres;

  00039	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0003c	72 02		 jb	 SHORT $LN13@operator

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0003e	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN13@operator:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00040	57		 push	 edi

; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00041	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00043	51		 push	 ecx
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 _memmove
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0004d	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 2865 :             return *this;

  00051	e9 cb 00 00 00	 jmp	 $LN22@operator
$LN10@operator:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00056	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0005b	2b c6		 sub	 eax, esi
  0005d	3b c7		 cmp	 eax, edi
  0005f	0f 82 f5 00 00
	00		 jb	 $LN69@operator

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00065	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00068	83 c9 0f	 or	 ecx, 15			; 0000000fH
  0006b	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00071	76 07		 jbe	 SHORT $LN27@operator

; 4203 :             return _Max;

  00073	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00078	eb 24		 jmp	 SHORT $LN66@operator
$LN27@operator:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b c2		 mov	 eax, edx
  0007c	d1 e8		 shr	 eax, 1
  0007e	89 45 0c	 mov	 DWORD PTR tv545[ebp], eax
  00081	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00086	2b 45 0c	 sub	 eax, DWORD PTR tv545[ebp]
  00089	3b d0		 cmp	 edx, eax
  0008b	76 07		 jbe	 SHORT $LN28@operator

; 4207 :             return _Max;

  0008d	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00092	eb 0a		 jmp	 SHORT $LN66@operator
$LN28@operator:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00094	8b 45 0c	 mov	 eax, DWORD PTR tv545[ebp]
  00097	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00099	3b c8		 cmp	 ecx, eax
  0009b	0f 42 c8	 cmovb	 ecx, eax
$LN66@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0009e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000a1	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000aa	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  000ad	89 45 f8	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000b0	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b3	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000b6	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000bd	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
  000c0	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000c3	89 4d 0c	 mov	 DWORD PTR tv542[ebp], ecx
  000c6	72 32		 jb	 SHORT $LN21@operator

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c8	ff 75 f4	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cb	8b 33		 mov	 esi, DWORD PTR [ebx]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cd	56		 push	 esi
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  000d7	57		 push	 edi
  000d8	50		 push	 eax
  000d9	ff 75 0c	 push	 DWORD PTR tv542[ebp]
  000dc	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000e1	8b 45 0c	 mov	 eax, DWORD PTR tv542[ebp]
  000e4	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e8	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000eb	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ec	50		 push	 eax
  000ed	56		 push	 esi
  000ee	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
  000f6	89 03		 mov	 DWORD PTR [ebx], eax

; 4267 :         } else {

  000f8	eb 24		 jmp	 SHORT $LN67@operator
$LN21@operator:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000fa	56		 push	 esi
  000fb	53		 push	 ebx
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _memcpy
  00102	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00105	8b 75 0c	 mov	 esi, DWORD PTR tv542[ebp]
  00108	57		 push	 edi
  00109	50		 push	 eax
  0010a	56		 push	 esi
  0010b	e8 00 00 00 00	 call	 _memcpy

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00110	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00113	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00117	50		 push	 eax
  00118	53		 push	 ebx
  00119	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN67@operator:

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0011e	83 c4 20	 add	 esp, 32			; 00000020H
$LN22@operator:
  00121	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4458 :     return _STD move(_Left.append(_Right));

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00126	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0012d	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00134	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  00137	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0013a	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  0013f	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00144	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0014b	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00152	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 4458 :     return _STD move(_Left.append(_Right));

  00155	5b		 pop	 ebx

; 4459 : }

  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
$LN69@operator:

; 4250 :             _Xlen_string(); // result too long

  0015a	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@operator:
  0015f	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?FloatNumberToString@prt@@YAPBDM@Z
_TEXT	SEGMENT
_fNumber$ = 8						; size = 4
?FloatNumberToString@prt@@YAPBDM@Z PROC			; prt::FloatNumberToString, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fNumber$[ebp]

; 55   : 	static char szString[16+1];
; 56   : 	_snprintf(szString, sizeof(szString), "%f", fNumber);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00018	6a 11		 push	 17			; 00000011H
  0001a	68 00 00 00 00	 push	 OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
  0001f	e8 00 00 00 00	 call	 __snprintf
  00024	83 c4 14	 add	 esp, 20			; 00000014H

; 57   : 	return szString;

  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA

; 58   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?FloatNumberToString@prt@@YAPBDM@Z ENDP			; prt::FloatNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?IntegerNumberToString@prt@@YAPBDH@Z
_TEXT	SEGMENT
_iNumber$ = 8						; size = 4
?IntegerNumberToString@prt@@YAPBDH@Z PROC		; prt::IntegerNumberToString, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	static char szString[16+1];
; 49   : 	_snprintf(szString, sizeof(szString), "%d", iNumber);

  00003	ff 75 08	 push	 DWORD PTR _iNumber$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0000b	6a 11		 push	 17			; 00000011H
  0000d	68 00 00 00 00	 push	 OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
  00012	e8 00 00 00 00	 call	 __snprintf
  00017	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : 	return szString;

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA

; 51   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?IntegerNumberToString@prt@@YAPBDH@Z ENDP		; prt::IntegerNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 902  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 903  :         _Left = _STD move(_Right);
; 904  :     }
; 905  : }

  00000	c2 00 00	 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv184 = 8						; size = 4
_c_rkPPosLeft$ = 8					; size = 4
_c_rkPPosRight$ = 12					; size = 4
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z PROC ; SPixelPosition_CalculateDistanceSq3d, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	float dx=c_rkPPosLeft.x-c_rkPPosRight.x;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c_rkPPosLeft$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_rkPPosRight$[ebp]
  00009	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]

; 18   : 	float dy=c_rkPPosLeft.y-c_rkPPosRight.y;

  0000d	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  00012	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
  00017	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]

; 19   : 	float dz=c_rkPPosLeft.z-c_rkPPosRight.z;

  0001b	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00020	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]

; 20   : 
; 21   : 	return dx*dx+dy*dy+dz*dz;

  00025	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00029	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00031	f3 0f 58 d1	 addss	 xmm2, xmm1
  00035	f3 0f 58 d0	 addss	 xmm2, xmm0
  00039	f3 0f 11 55 08	 movss	 DWORD PTR tv184[ebp], xmm2
  0003e	d9 45 08	 fld	 DWORD PTR tv184[ebp]

; 22   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ENDP ; SPixelPosition_CalculateDistanceSq3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogFarDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogFarDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogFarDistance, COMDAT
; _this$ = ecx

; 12   : 	return m_fFogFarDistance;

  00000	d9 81 28 01 00
	00		 fld	 DWORD PTR [ecx+296]

; 13   : }

  00006	c3		 ret	 0
?GetFogFarDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogFarDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogNearDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogNearDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogNearDistance, COMDAT
; _this$ = ecx

; 7    : 	return m_fFogNearDistance;

  00000	d9 81 24 01 00
	00		 fld	 DWORD PTR [ecx+292]

; 8    : }

  00006	c3		 ret	 0
?GetFogNearDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogNearDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
_TEXT	SEGMENT
_c_pszPropertyName$ = -100				; size = 4
_c_pszPropertyType$ = -96				; size = 4
_c_pszDungeonBlockFileName$ = -92			; size = 4
$T2 = -88						; size = 24
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z PROC ; prt::PropertyDungeonBlockStringToData, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 273  : 	const char * c_pszPropertyType;
; 274  : 	const char * c_pszPropertyName;
; 275  : 
; 276  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002e	8d 45 a0	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _pData$[ebp]
  00034	8b ce		 mov	 ecx, esi
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003c	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00041	84 c0		 test	 al, al
  00043	0f 84 28 01 00
	00		 je	 $LN79@PropertyDu

; 277  : 		return false;
; 278  : 
; 279  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00049	8d 45 9c	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004c	8b ce		 mov	 ecx, esi
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00054	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00059	84 c0		 test	 al, al
  0005b	0f 84 10 01 00
	00		 je	 $LN79@PropertyDu

; 280  : 		return false;
; 281  : 
; 282  : 	if (strcmp(c_pszPropertyType, "DungeonBlock"))

  00061	8b 45 a0	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL80@PropertyDu:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN81@PropertyDu
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN82@PropertyDu
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN81@PropertyDu
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL80@PropertyDu
$LN82@PropertyDu:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN83@PropertyDu
$LN81@PropertyDu:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN83@PropertyDu:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 d4 00 00
	00		 jne	 $LN79@PropertyDu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 4d 9c	 mov	 ecx, DWORD PTR _c_pszPropertyName$[ebp]
  000a0	8b d1		 mov	 edx, ecx
  000a2	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL84@PropertyDu:
  000a5	8a 02		 mov	 al, BYTE PTR [edx]
  000a7	42		 inc	 edx
  000a8	84 c0		 test	 al, al
  000aa	75 f9		 jne	 SHORT $LL84@PropertyDu
  000ac	2b d7		 sub	 edx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	52		 push	 edx
  000af	51		 push	 ecx
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 290  : 	if (!pProperty->GetString("dungeonblockfile", &c_pszDungeonBlockFileName))

  000b7	8d 45 a4	 lea	 eax, DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000ba	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _c_pszDungeonBlockFileName$[ebp], 0
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CJNPGFDA@dungeonblockfile@
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000ce	84 c0		 test	 al, al
  000d0	0f 84 9b 00 00
	00		 je	 $LN79@PropertyDu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d6	8b 55 a4	 mov	 edx, DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000d9	8b ca		 mov	 ecx, edx
  000db	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  000de	66 90		 npad	 2
$LL85@PropertyDu:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	41		 inc	 ecx
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL85@PropertyDu
  000e7	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 293  : 	pData->strFileName = c_pszDungeonBlockFileName;

  000e9	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ec	51		 push	 ecx
  000ed	52		 push	 edx
  000ee	8b ce		 mov	 ecx, esi
  000f0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIKCOENH@?4mdatr@
  000fa	89 45 d8	 mov	 DWORD PTR $T4[ebp], eax
  000fd	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06OIKCOENH@?4mdatr@+4

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00103	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0010a	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 6

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00111	66 89 45 dc	 mov	 WORD PTR $T4[ebp+4], ax

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00115	c6 45 de 00	 mov	 BYTE PTR $T4[ebp+6], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  00119	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  0011c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00123	56		 push	 esi
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0012a	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0012d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00131	51		 push	 ecx
  00132	50		 push	 eax
  00133	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0013c	83 c4 14	 add	 esp, 20			; 00000014H
  0013f	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00148	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0014b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00150	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00153	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00158	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp+20]
  0015b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0015e	72 0d		 jb	 SHORT $LN73@PropertyDu

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00160	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00161	50		 push	 eax
  00162	ff 75 d8	 push	 DWORD PTR $T4[ebp]
  00165	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0016a	83 c4 08	 add	 esp, 8
$LN73@PropertyDu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 296  : 	return true;

  0016d	b0 01		 mov	 al, 1
  0016f	eb 02		 jmp	 SHORT $LN1@PropertyDu
$LN79@PropertyDu:

; 291  : 		return false;

  00171	32 c0		 xor	 al, al
$LN1@PropertyDu:

; 297  : }

  00173	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00176	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017d	59		 pop	 ecx
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ENDP ; prt::PropertyDungeonBlockStringToData
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z PROC ; prt::PropertyDungeonBlockDataToString, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 265  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 266  : 	pProperty->PutString("PropertyType", "DungeonBlock");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyDu

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyDu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 267  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2145 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyDu

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyDu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 268  : 	pProperty->PutString("DungeonBlockFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 269  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 270  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ENDP ; prt::PropertyDungeonBlockDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
_TEXT	SEGMENT
_AmbienceSoundVector$ = -48				; size = 12
_c_pszPlayIntervalVariation$ = -36			; size = 4
_c_pszPlayInterval$ = -32				; size = 4
_c_pszPlayType$ = -28					; size = 4
_c_pszPropertyName$ = -24				; size = 4
_c_pszPropertyType$ = -20				; size = 4
_c_pszMaxVolumeAreaPercentage$ = -16			; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z PROC ; prt::PropertyAmbienceStringToData, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 218  : 	const char * c_pszPropertyType;
; 219  : 	const char * c_pszPropertyName;
; 220  : 
; 221  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00028	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0002b	8d 45 ec	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0003b	84 c0		 test	 al, al
  0003d	0f 84 c9 01 00
	00		 je	 $LN110@PropertyAm

; 222  : 		return false;
; 223  : 
; 224  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00043	8d 45 e8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00046	8b ce		 mov	 ecx, esi
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0004e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00053	84 c0		 test	 al, al
  00055	0f 84 b1 01 00
	00		 je	 $LN110@PropertyAm

; 225  : 		return false;
; 226  : 
; 227  : 	if (strcmp(c_pszPropertyType, "Ambience"))

  0005b	8b 45 ec	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08HABDNILH@Ambience@
$LL111@PropertyAm:
  00063	8a 10		 mov	 dl, BYTE PTR [eax]
  00065	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00067	75 1a		 jne	 SHORT $LN112@PropertyAm
  00069	84 d2		 test	 dl, dl
  0006b	74 12		 je	 SHORT $LN113@PropertyAm
  0006d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00070	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00073	75 0e		 jne	 SHORT $LN112@PropertyAm
  00075	83 c0 02	 add	 eax, 2
  00078	83 c1 02	 add	 ecx, 2
  0007b	84 d2		 test	 dl, dl
  0007d	75 e4		 jne	 SHORT $LL111@PropertyAm
$LN113@PropertyAm:
  0007f	33 c0		 xor	 eax, eax
  00081	eb 05		 jmp	 SHORT $LN114@PropertyAm
$LN112@PropertyAm:
  00083	1b c0		 sbb	 eax, eax
  00085	83 c8 01	 or	 eax, 1
$LN114@PropertyAm:
  00088	85 c0		 test	 eax, eax
  0008a	0f 85 7c 01 00
	00		 jne	 $LN110@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00090	8b 55 e8	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  00093	8b ca		 mov	 ecx, edx
  00095	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL115@PropertyAm:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL115@PropertyAm
  0009f	2b cf		 sub	 ecx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a1	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  000a4	51		 push	 ecx
  000a5	52		 push	 edx
  000a6	8b cf		 mov	 ecx, edi
  000a8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 237  : 	const char * c_pszMaxVolumeAreaPercentage = NULL;

  000ad	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000b4	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000bb	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000c2	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 239  : 	if (!pProperty->GetString("PlayType", &c_pszPlayType))

  000c9	8d 45 e4	 lea	 eax, DWORD PTR _c_pszPlayType$[ebp]
  000cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d3	50		 push	 eax
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000e0	84 c0		 test	 al, al
  000e2	0f 84 d0 00 00
	00		 je	 $LN18@PropertyAm

; 240  : 		return false;
; 241  : 	if (!pProperty->GetString("PlayInterval", &c_pszPlayInterval))

  000e8	8d 45 e0	 lea	 eax, DWORD PTR _c_pszPlayInterval$[ebp]
  000eb	8b ce		 mov	 ecx, esi
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  000f3	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000f8	84 c0		 test	 al, al
  000fa	0f 84 b8 00 00
	00		 je	 $LN18@PropertyAm

; 242  : 		return false;
; 243  : 	if (!pProperty->GetString("PlayIntervalVariation", &c_pszPlayIntervalVariation))

  00100	8d 45 dc	 lea	 eax, DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  00103	8b ce		 mov	 ecx, esi
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  0010b	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00110	84 c0		 test	 al, al
  00112	0f 84 a0 00 00
	00		 je	 $LN18@PropertyAm

; 244  : 		return false;
; 245  : 	if (!pProperty->GetString("MaxVolumeAreaPercentage", &c_pszMaxVolumeAreaPercentage))

  00118	8d 45 f0	 lea	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  0011b	8b ce		 mov	 ecx, esi
  0011d	50		 push	 eax
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  00123	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00128	84 c0		 test	 al, al
  0012a	75 07		 jne	 SHORT $LN11@PropertyAm

; 246  : 	{
; 247  : 		pData->fMaxVolumeAreaPercentage = 0.0f;

  0012c	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN11@PropertyAm:

; 248  : 	}
; 249  : 	if (!pProperty->GetVector("AmbienceSoundVector", AmbienceSoundVector))

  00133	8d 45 d0	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  00136	8b ce		 mov	 ecx, esi
  00138	50		 push	 eax
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  0013e	e8 00 00 00 00	 call	 ?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::GetVector
  00143	84 c0		 test	 al, al
  00145	74 71		 je	 SHORT $LN18@PropertyAm

; 250  : 		return false;
; 251  : 
; 252  : 	pData->strPlayType = c_pszPlayType;

  00147	ff 75 e4	 push	 DWORD PTR _c_pszPlayType$[ebp]
  0014a	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0014d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 253  : 	pData->fPlayInterval = atof(c_pszPlayInterval);

  00152	ff 75 e0	 push	 DWORD PTR _c_pszPlayInterval$[ebp]
  00155	e8 00 00 00 00	 call	 _atof

; 254  : 	pData->fPlayIntervalVariation = atof(c_pszPlayIntervalVariation);

  0015a	ff 75 dc	 push	 DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  0015d	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  00160	e8 00 00 00 00	 call	 _atof

; 255  : 	if (c_pszMaxVolumeAreaPercentage)

  00165	8b 45 f0	 mov	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  00168	83 c4 08	 add	 esp, 8
  0016b	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  0016e	85 c0		 test	 eax, eax
  00170	74 0c		 je	 SHORT $LN13@PropertyAm

; 256  : 		pData->fMaxVolumeAreaPercentage = atof(c_pszMaxVolumeAreaPercentage);

  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _atof
  00178	d9 5f 38	 fstp	 DWORD PTR [edi+56]
  0017b	83 c4 04	 add	 esp, 4
$LN13@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0017e	8b 75 d0	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  00181	8b 45 d4	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]
  00184	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  00186	74 2c		 je	 SHORT $LN3@PropertyAm
$LL4@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00188	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0018b	56		 push	 esi
  0018c	3b 47 44	 cmp	 eax, DWORD PTR [edi+68]
  0018f	74 0d		 je	 SHORT $LN91@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00191	8b c8		 mov	 ecx, eax
  00193	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00198	83 47 40 18	 add	 DWORD PTR [edi+64], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019c	eb 09		 jmp	 SHORT $LN2@PropertyAm
$LN91@PropertyAm:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0019e	50		 push	 eax
  0019f	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  001a2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
$LN2@PropertyAm:

; 149  :         return _Ptr == _Right._Ptr;

  001a7	8b 45 d4	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]

; 75   :         ++_Ptr;

  001aa	83 c6 18	 add	 esi, 24			; 00000018H

; 149  :         return _Ptr == _Right._Ptr;

  001ad	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  001af	75 d7		 jne	 SHORT $LL4@PropertyAm
  001b1	8b 75 d0	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN3@PropertyAm:

; 260  : 	return true;

  001b4	b3 01		 mov	 bl, 1
  001b6	eb 08		 jmp	 SHORT $LN19@PropertyAm
$LN18@PropertyAm:
  001b8	8b 45 d4	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]
  001bb	32 db		 xor	 bl, bl
  001bd	8b 75 d0	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN19@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  001c0	85 f6		 test	 esi, esi
  001c2	74 34		 je	 SHORT $LN100@PropertyAm

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  001c4	8d 4d d0	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  001c7	51		 push	 ecx
  001c8	50		 push	 eax
  001c9	56		 push	 esi
  001ca	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001cf	8b 4d d8	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  001d2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d7	8b 75 d0	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  001da	2b ce		 sub	 ecx, esi
  001dc	f7 e9		 imul	 ecx
  001de	c1 fa 02	 sar	 edx, 2
  001e1	8b ca		 mov	 ecx, edx
  001e3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001e6	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e8	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  001eb	c1 e1 03	 shl	 ecx, 3
  001ee	51		 push	 ecx
  001ef	56		 push	 esi
  001f0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001f5	83 c4 14	 add	 esp, 20			; 00000014H
$LN100@PropertyAm:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 260  : 	return true;

  001f8	8a c3		 mov	 al, bl

; 261  : }

  001fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00204	59		 pop	 ecx
  00205	5f		 pop	 edi
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
$LN110@PropertyAm:

; 228  : 		return false;

  0020c	32 c0		 xor	 al, al

; 261  : }

  0020e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00211	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00218	59		 pop	 ecx
  00219	5f		 pop	 edi
  0021a	5e		 pop	 esi
  0021b	5b		 pop	 ebx
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ENDP ; prt::PropertyAmbienceStringToData
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pProperty$GSCopy$1$ = -60				; size = 4
tv769 = -56						; size = 4
_AmbienceSoundVector$ = -52				; size = 12
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z PROC ; prt::PropertyAmbienceDataToString, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 197  : 	pProperty->Clear();

  0002d	8b ce		 mov	 ecx, esi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _pData$[ebp]
  00032	89 75 c4	 mov	 DWORD PTR _pProperty$GSCopy$1$[ebp], esi
  00035	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 198  : 	pProperty->PutString("PropertyType", "Ambience");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_08HABDNILH@Ambience@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0004b	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0004f	8b c7		 mov	 eax, edi
  00051	72 02		 jb	 SHORT $LN11@PropertyAm

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00053	8b 07		 mov	 eax, DWORD PTR [edi]
$LN11@PropertyAm:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 199  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00062	83 7f 2c 10	 cmp	 DWORD PTR [edi+44], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  00066	8d 47 18	 lea	 eax, DWORD PTR [edi+24]

; 2145 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN18@PropertyAm

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@PropertyAm:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 200  : 	pProperty->PutString("PlayType", pData->strPlayType.c_str());

  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 201  : 	pProperty->PutString("PlayInterval", FloatNumberToString(pData->fPlayInterval));

  0007a	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0007f	51		 push	 ecx
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  0008a	83 c4 04	 add	 esp, 4
  0008d	8b ce		 mov	 ecx, esi
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  00095	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 202  : 	pProperty->PutString("PlayIntervalVariation", FloatNumberToString(pData->fPlayIntervalVariation));

  0009a	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0009f	51		 push	 ecx
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b ce		 mov	 ecx, esi
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  000b5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 203  : 	pProperty->PutString("MaxVolumeAreaPercentage", FloatNumberToString(pData->fMaxVolumeAreaPercentage));

  000ba	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  000bf	51		 push	 ecx
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000ca	83 c4 04	 add	 esp, 4
  000cd	8b ce		 mov	 ecx, esi
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  000d5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000da	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000e1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000e8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ef	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 205  : 	CTokenVector AmbienceSoundVector;

  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000f9	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  000fc	0f 84 9d 00 00
	00		 je	 $LN3@PropertyAm
$LL4@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00102	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00106	8b d6		 mov	 edx, esi
  00108	72 02		 jb	 SHORT $LN51@PropertyAm

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0010a	8b 16		 mov	 edx, DWORD PTR [esi]
$LN51@PropertyAm:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0010c	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0010e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00115	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0011c	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00120	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00123	89 45 c8	 mov	 DWORD PTR tv769[ebp], eax
$LL112@PropertyAm:
  00126	8a 01		 mov	 al, BYTE PTR [ecx]
  00128	41		 inc	 ecx
  00129	84 c0		 test	 al, al
  0012b	75 f9		 jne	 SHORT $LL112@PropertyAm
  0012d	2b 4d c8	 sub	 ecx, DWORD PTR tv769[ebp]

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00130	51		 push	 ecx
  00131	52		 push	 edx
  00132	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00135	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0013a	8b 45 d0	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  0013d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00141	3b 45 d4	 cmp	 eax, DWORD PTR _AmbienceSoundVector$[ebp+8]
  00144	74 27		 je	 SHORT $LN70@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00146	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0014a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00151	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00155	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00158	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  0015d	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00162	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00167	83 45 d0 18	 add	 DWORD PTR _AmbienceSoundVector$[ebp+4], 24 ; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016b	eb 10		 jmp	 SHORT $LN69@PropertyAm
$LN70@PropertyAm:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0016d	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00170	51		 push	 ecx
  00171	50		 push	 eax
  00172	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00175	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0017a	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+20]
$LN69@PropertyAm:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  0017d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00181	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00184	72 0d		 jb	 SHORT $LN93@PropertyAm

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00186	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00187	50		 push	 eax
  00188	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  0018b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00190	83 c4 08	 add	 esp, 8
$LN93@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00193	83 c6 18	 add	 esi, 24			; 00000018H

; 149  :         return _Ptr == _Right._Ptr;

  00196	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  00199	0f 85 63 ff ff
	ff		 jne	 $LL4@PropertyAm
$LN3@PropertyAm:

; 211  : 	}
; 212  : 	pProperty->PutVector("AmbienceSoundVector", AmbienceSoundVector);

  0019f	8b 4d c4	 mov	 ecx, DWORD PTR _pProperty$GSCopy$1$[ebp]
  001a2	8d 45 cc	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001a5	50		 push	 eax
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  001ab	e8 00 00 00 00	 call	 ?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::PutVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  001b0	8b 45 cc	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001b3	85 c0		 test	 eax, eax
  001b5	74 36		 je	 SHORT $LN113@PropertyAm

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  001b7	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  001ba	51		 push	 ecx
  001bb	ff 75 d0	 push	 DWORD PTR _AmbienceSoundVector$[ebp+4]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001c4	8b 4d d4	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  001c7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001cc	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  001cf	2b ce		 sub	 ecx, esi
  001d1	f7 e9		 imul	 ecx
  001d3	c1 fa 02	 sar	 edx, 2
  001d6	8b c2		 mov	 eax, edx
  001d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001db	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001dd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001e0	c1 e0 03	 shl	 eax, 3
  001e3	50		 push	 eax
  001e4	56		 push	 esi
  001e5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001ea	83 c4 14	 add	 esp, 20			; 00000014H
$LN113@PropertyAm:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 214  : }

  001ed	b0 01		 mov	 al, 1
  001ef	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f9	59		 pop	 ecx
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ff	33 cd		 xor	 ecx, ebp
  00201	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ENDP ; prt::PropertyAmbienceDataToString
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z
_TEXT	SEGMENT
_c_pszEffectName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z PROC ; prt::PropertyEffectStringToData, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 170  : 	const char * c_pszPropertyType;
; 171  : 	const char * c_pszPropertyName;
; 172  : 
; 173  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	0f 84 9d 00 00
	00		 je	 $LN19@PropertyEf

; 174  : 		return false;
; 175  : 
; 176  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00023	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00033	84 c0		 test	 al, al
  00035	0f 84 85 00 00
	00		 je	 $LN19@PropertyEf

; 177  : 		return false;
; 178  : 
; 179  : 	if (strcmp(c_pszPropertyType, "Effect"))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06LBEFNKEP@Effect@
$LL20@PropertyEf:
  00043	8a 10		 mov	 dl, BYTE PTR [eax]
  00045	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00047	75 1a		 jne	 SHORT $LN21@PropertyEf
  00049	84 d2		 test	 dl, dl
  0004b	74 12		 je	 SHORT $LN22@PropertyEf
  0004d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00050	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00053	75 0e		 jne	 SHORT $LN21@PropertyEf
  00055	83 c0 02	 add	 eax, 2
  00058	83 c1 02	 add	 ecx, 2
  0005b	84 d2		 test	 dl, dl
  0005d	75 e4		 jne	 SHORT $LL20@PropertyEf
$LN22@PropertyEf:
  0005f	33 c0		 xor	 eax, eax
  00061	eb 05		 jmp	 SHORT $LN23@PropertyEf
$LN21@PropertyEf:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
$LN23@PropertyEf:
  00068	85 c0		 test	 eax, eax
  0006a	75 54		 jne	 SHORT $LN19@PropertyEf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _c_pszPropertyName$[ebp]
  0006f	8b d1		 mov	 edx, ecx
  00071	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL24@PropertyEf:
  00074	8a 02		 mov	 al, BYTE PTR [edx]
  00076	42		 inc	 edx
  00077	84 c0		 test	 al, al
  00079	75 f9		 jne	 SHORT $LL24@PropertyEf
  0007b	2b d7		 sub	 edx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007d	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00080	52		 push	 edx
  00081	51		 push	 ecx
  00082	8b cf		 mov	 ecx, edi
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 187  : 	if (!pProperty->GetString("EffectFile", &c_pszEffectName))

  00089	8d 45 f4	 lea	 eax, DWORD PTR _c_pszEffectName$[ebp]
  0008c	8b ce		 mov	 ecx, esi
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  00094	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00099	84 c0		 test	 al, al
  0009b	74 23		 je	 SHORT $LN19@PropertyEf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 55 f4	 mov	 edx, DWORD PTR _c_pszEffectName$[ebp]
  000a0	8b ca		 mov	 ecx, edx
  000a2	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL25@PropertyEf:
  000a5	8a 01		 mov	 al, BYTE PTR [ecx]
  000a7	41		 inc	 ecx
  000a8	84 c0		 test	 al, al
  000aa	75 f9		 jne	 SHORT $LL25@PropertyEf
  000ac	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	51		 push	 ecx
  000af	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 190  : 	pData->strFileName = c_pszEffectName;

  000b0	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b8	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 192  : 	return true;

  000b9	b0 01		 mov	 al, 1

; 193  : }

  000bb	5e		 pop	 esi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN19@PropertyEf:
  000c0	5f		 pop	 edi

; 188  : 		return false;

  000c1	32 c0		 xor	 al, al

; 193  : }

  000c3	5e		 pop	 esi
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ENDP ; prt::PropertyEffectStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z PROC ; prt::PropertyEffectDataToString, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 160  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 161  : 
; 162  : 	pProperty->PutString("PropertyType", "Effect");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06LBEFNKEP@Effect@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyEf

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyEf:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 163  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2145 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyEf

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyEf:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 164  : 	pProperty->PutString("EffectFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 165  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 166  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ENDP ; prt::PropertyEffectDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
_TEXT	SEGMENT
_c_pszShadowFlag$ = -80					; size = 4
_c_pszBuildingName$ = -76				; size = 4
_c_pszPropertyName$ = -72				; size = 4
_c_pszPropertyType$ = -68				; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z PROC ; prt::PropertyBuildingStringToData, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 08	 mov	 edi, DWORD PTR _pProperty$[ebp]

; 121  : 	const char * c_pszPropertyType;
; 122  : 	const char * c_pszPropertyName;
; 123  : 
; 124  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002e	8d 45 bc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _pData$[ebp]
  00034	8b cf		 mov	 ecx, edi
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003c	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00041	84 c0		 test	 al, al
  00043	0f 84 15 01 00
	00		 je	 $LN23@PropertyBu

; 125  : 		return false;
; 126  : 
; 127  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00049	8d 45 b8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004c	8b cf		 mov	 ecx, edi
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00054	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00059	84 c0		 test	 al, al
  0005b	0f 84 fd 00 00
	00		 je	 $LN23@PropertyBu

; 128  : 		return false;
; 129  : 
; 130  : 	if (strcmp(c_pszPropertyType, "Building"))

  00061	8b 4d bc	 mov	 ecx, DWORD PTR _c_pszPropertyType$[ebp]
  00064	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08COFDOLHN@Building@
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@PropertyBu:
  00070	8a 11		 mov	 dl, BYTE PTR [ecx]
  00072	3a 10		 cmp	 dl, BYTE PTR [eax]
  00074	75 1a		 jne	 SHORT $LN25@PropertyBu
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN26@PropertyBu
  0007a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0007d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00080	75 0e		 jne	 SHORT $LN25@PropertyBu
  00082	83 c1 02	 add	 ecx, 2
  00085	83 c0 02	 add	 eax, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL24@PropertyBu
$LN26@PropertyBu:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN27@PropertyBu
$LN25@PropertyBu:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN27@PropertyBu:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 c1 00 00
	00		 jne	 $LN23@PropertyBu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 55 b8	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  000a0	8b ca		 mov	 ecx, edx
  000a2	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL28@PropertyBu:
  000a5	8a 01		 mov	 al, BYTE PTR [ecx]
  000a7	41		 inc	 ecx
  000a8	84 c0		 test	 al, al
  000aa	75 f9		 jne	 SHORT $LL28@PropertyBu
  000ac	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	51		 push	 ecx
  000af	52		 push	 edx
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 138  : 	if (!pProperty->GetString("BuildingFile", &c_pszBuildingName))

  000b7	8d 45 b4	 lea	 eax, DWORD PTR _c_pszBuildingName$[ebp]
  000ba	8b cf		 mov	 ecx, edi
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  000c2	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000c7	84 c0		 test	 al, al
  000c9	0f 84 8f 00 00
	00		 je	 $LN23@PropertyBu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000cf	8b 55 b4	 mov	 edx, DWORD PTR _c_pszBuildingName$[ebp]
  000d2	8b ca		 mov	 ecx, edx
  000d4	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL29@PropertyBu:
  000d7	8a 01		 mov	 al, BYTE PTR [ecx]
  000d9	41		 inc	 ecx
  000da	84 c0		 test	 al, al
  000dc	75 f9		 jne	 SHORT $LL29@PropertyBu
  000de	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 141  : 	pData->strFileName = c_pszBuildingName;

  000e0	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000e3	51		 push	 ecx
  000e4	52		 push	 edx
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000ec	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  000ef	56		 push	 esi
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKCOENH@?4mdatr@
  000fb	50		 push	 eax
  000fc	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0010c	83 c4 14	 add	 esp, 20			; 00000014H
  0010f	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00118	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0011b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00123	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 143  : 
; 144  : 	const char * c_pszShadowFlag;
; 145  : 	if (!pProperty->GetString("ShadowFlag", &c_pszShadowFlag))

  0012f	8d 45 b0	 lea	 eax, DWORD PTR _c_pszShadowFlag$[ebp]
  00132	8b cf		 mov	 ecx, edi
  00134	50		 push	 eax
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  0013a	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0013f	84 c0		 test	 al, al
  00141	75 09		 jne	 SHORT $LN6@PropertyBu

; 146  : 	{
; 147  : 		pData->isShadowFlag = FALSE;

  00143	33 c0		 xor	 eax, eax

; 152  : 	}
; 153  : 
; 154  : 	return true;

  00145	89 43 48	 mov	 DWORD PTR [ebx+72], eax
  00148	b0 01		 mov	 al, 1
  0014a	eb 14		 jmp	 SHORT $LN1@PropertyBu
$LN6@PropertyBu:

; 148  : 	}
; 149  : 	else
; 150  : 	{
; 151  : 		pData->isShadowFlag = atoi(c_pszShadowFlag);

  0014c	ff 75 b0	 push	 DWORD PTR _c_pszShadowFlag$[ebp]
  0014f	e8 00 00 00 00	 call	 __atoi64

; 152  : 	}
; 153  : 
; 154  : 	return true;

  00154	89 43 48	 mov	 DWORD PTR [ebx+72], eax
  00157	83 c4 04	 add	 esp, 4
  0015a	b0 01		 mov	 al, 1
  0015c	eb 02		 jmp	 SHORT $LN1@PropertyBu
$LN23@PropertyBu:

; 139  : 		return false;

  0015e	32 c0		 xor	 al, al
$LN1@PropertyBu:

; 155  : }

  00160	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00163	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016a	59		 pop	 ecx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ENDP ; prt::PropertyBuildingStringToData
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z PROC ; prt::PropertyBuildingDataToString, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 110  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 111  : 
; 112  : 	pProperty->PutString("PropertyType", "Building");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08COFDOLHN@Building@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyBu

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyBu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 113  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2145 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyBu

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyBu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 114  : 	pProperty->PutString("BuildingFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 115  : 	pProperty->PutString("ShadowFlag", IntegerNumberToString(pData->isShadowFlag));

  00052	ff 76 48	 push	 DWORD PTR [esi+72]
  00055	e8 00 00 00 00	 call	 ?IntegerNumberToString@prt@@YAPBDH@Z ; prt::IntegerNumberToString
  0005a	83 c4 04	 add	 esp, 4
  0005d	8b cf		 mov	 ecx, edi
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  00065	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 116  : 	return true;

  0006a	5f		 pop	 edi
  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 117  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ENDP ; prt::PropertyBuildingDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z
_TEXT	SEGMENT
_c_pszTreeVariance$ = -20				; size = 4
_c_pszTreeSize$ = -16					; size = 4
_c_pszTreeName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z PROC ; prt::PropertyTreeStringToData, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 75   : 	const char * c_pszPropertyType;
; 76   : 	const char * c_pszPropertyName;
; 77   : 
; 78   : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	0f 84 d2 00 00
	00		 je	 $LN15@PropertyTr

; 79   : 		return false;
; 80   : 
; 81   : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00023	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00033	84 c0		 test	 al, al
  00035	0f 84 ba 00 00
	00		 je	 $LN15@PropertyTr

; 82   : 		return false;
; 83   : 
; 84   : 	if (strcmp(c_pszPropertyType, "Tree"))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04GDOOJPNH@Tree@
$LL16@PropertyTr:
  00043	8a 10		 mov	 dl, BYTE PTR [eax]
  00045	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00047	75 1a		 jne	 SHORT $LN17@PropertyTr
  00049	84 d2		 test	 dl, dl
  0004b	74 12		 je	 SHORT $LN18@PropertyTr
  0004d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00050	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00053	75 0e		 jne	 SHORT $LN17@PropertyTr
  00055	83 c0 02	 add	 eax, 2
  00058	83 c1 02	 add	 ecx, 2
  0005b	84 d2		 test	 dl, dl
  0005d	75 e4		 jne	 SHORT $LL16@PropertyTr
$LN18@PropertyTr:
  0005f	33 c0		 xor	 eax, eax
  00061	eb 05		 jmp	 SHORT $LN19@PropertyTr
$LN17@PropertyTr:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
$LN19@PropertyTr:
  00068	85 c0		 test	 eax, eax
  0006a	0f 85 85 00 00
	00		 jne	 $LN15@PropertyTr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00070	8b 55 f8	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  00073	8b ca		 mov	 ecx, edx
  00075	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL20@PropertyTr:
  00078	8a 01		 mov	 al, BYTE PTR [ecx]
  0007a	41		 inc	 ecx
  0007b	84 c0		 test	 al, al
  0007d	75 f9		 jne	 SHORT $LL20@PropertyTr
  0007f	2b cf		 sub	 ecx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00081	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00084	51		 push	 ecx
  00085	52		 push	 edx
  00086	8b cf		 mov	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 94   : 	if (!pProperty->GetString("TreeFile", &c_pszTreeName))

  0008d	8d 45 f4	 lea	 eax, DWORD PTR _c_pszTreeName$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  00098	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0009d	84 c0		 test	 al, al
  0009f	74 54		 je	 SHORT $LN15@PropertyTr

; 95   : 		return false;
; 96   : 	if (!pProperty->GetString("TreeSize", &c_pszTreeSize))

  000a1	8d 45 f0	 lea	 eax, DWORD PTR _c_pszTreeSize$[ebp]
  000a4	8b ce		 mov	 ecx, esi
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  000ac	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000b1	84 c0		 test	 al, al
  000b3	74 40		 je	 SHORT $LN15@PropertyTr

; 97   : 		return false;
; 98   : 	if (!pProperty->GetString("TreeVariance", &c_pszTreeVariance))

  000b5	8d 45 ec	 lea	 eax, DWORD PTR _c_pszTreeVariance$[ebp]
  000b8	8b ce		 mov	 ecx, esi
  000ba	50		 push	 eax
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  000c0	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000c5	84 c0		 test	 al, al
  000c7	74 2c		 je	 SHORT $LN15@PropertyTr

; 100  : 
; 101  : 	pData->strFileName = c_pszTreeName;

  000c9	ff 75 f4	 push	 DWORD PTR _c_pszTreeName$[ebp]
  000cc	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000cf	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 102  : 	pData->fSize = atof(c_pszTreeSize);

  000d4	ff 75 f0	 push	 DWORD PTR _c_pszTreeSize$[ebp]
  000d7	e8 00 00 00 00	 call	 _atof

; 103  : 	pData->fVariance = atof(c_pszTreeVariance);

  000dc	ff 75 ec	 push	 DWORD PTR _c_pszTreeVariance$[ebp]
  000df	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  000e2	e8 00 00 00 00	 call	 _atof
  000e7	83 c4 08	 add	 esp, 8

; 104  : 
; 105  : 	return true;

  000ea	b0 01		 mov	 al, 1
  000ec	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  000ef	5f		 pop	 edi

; 106  : }

  000f0	5e		 pop	 esi
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN15@PropertyTr:
  000f5	5f		 pop	 edi

; 99   : 		return false;

  000f6	32 c0		 xor	 al, al

; 106  : }

  000f8	5e		 pop	 esi
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ENDP ; prt::PropertyTreeStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z PROC ; prt::PropertyTreeDataToString, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 62   : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 63   : 
; 64   : 	pProperty->PutString("PropertyType", "Tree");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_04GDOOJPNH@Tree@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyTr

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyTr:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 65   : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2145 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyTr

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyTr:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp

; 67   : 	pProperty->PutString("TreeFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 68   : 	pProperty->PutString("TreeSize", FloatNumberToString(pData->fSize));

  00052	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00057	51		 push	 ecx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00062	83 c4 04	 add	 esp, 4
  00065	8b cf		 mov	 ecx, edi
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  0006d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 69   : 	pProperty->PutString("TreeVariance", FloatNumberToString(pData->fVariance));

  00072	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00077	51		 push	 ecx
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00082	83 c4 04	 add	 esp, 4
  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  0008d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 70   : 	return true;

  00092	5f		 pop	 edi
  00093	b0 01		 mov	 al, 1
  00095	5e		 pop	 esi

; 71   : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ENDP ; prt::PropertyTreeDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyExtension@prt@@YAPBDK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?GetPropertyExtension@prt@@YAPBDK@Z PROC		; prt::GetPropertyExtension, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	if (dwType >= PROPERTY_TYPE_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00006	83 f8 06	 cmp	 eax, 6
  00009	72 07		 jb	 SHORT $LN2@GetPropert

; 41   : 		return c_szPropertyExtension[0];

  0000b	b8 00 00 00 00	 mov	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN2@GetPropert:

; 42   : 
; 43   : 	return c_szPropertyExtension[dwType];

  00012	c1 e0 04	 shl	 eax, 4
  00015	05 00 00 00 00	 add	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetPropertyExtension@prt@@YAPBDK@Z ENDP		; prt::GetPropertyExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyType@prt@@YAKPBD@Z
_TEXT	SEGMENT
_c_szTypeName$ = 8					; size = 4
?GetPropertyType@prt@@YAKPBD@Z PROC			; prt::GetPropertyType, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _c_szTypeName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 f6		 xor	 esi, esi
  0000b	bf 00 00 00 00	 mov	 edi, OFFSET ?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA
$LL4@GetPropert:

; 30   : 	{
; 31   : 		if (!strcmp(c_szPropertyTypeName[i], c_szTypeName))

  00010	8b c3		 mov	 eax, ebx
  00012	8b cf		 mov	 ecx, edi
$LL12@GetPropert:
  00014	8a 11		 mov	 dl, BYTE PTR [ecx]
  00016	3a 10		 cmp	 dl, BYTE PTR [eax]
  00018	75 1a		 jne	 SHORT $LN13@GetPropert
  0001a	84 d2		 test	 dl, dl
  0001c	74 12		 je	 SHORT $LN14@GetPropert
  0001e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00021	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00024	75 0e		 jne	 SHORT $LN13@GetPropert
  00026	83 c1 02	 add	 ecx, 2
  00029	83 c0 02	 add	 eax, 2
  0002c	84 d2		 test	 dl, dl
  0002e	75 e4		 jne	 SHORT $LL12@GetPropert
$LN14@GetPropert:
  00030	33 c0		 xor	 eax, eax
  00032	eb 05		 jmp	 SHORT $LN15@GetPropert
$LN13@GetPropert:
  00034	1b c0		 sbb	 eax, eax
  00036	83 c8 01	 or	 eax, 1
$LN15@GetPropert:
  00039	85 c0		 test	 eax, eax
  0003b	74 10		 je	 SHORT $LN8@GetPropert

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  0003d	46		 inc	 esi
  0003e	83 c7 20	 add	 edi, 32			; 00000020H
  00041	83 fe 06	 cmp	 esi, 6
  00044	72 ca		 jb	 SHORT $LL4@GetPropert

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	33 c0		 xor	 eax, eax
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN8@GetPropert:
  0004d	5f		 pop	 edi

; 32   : 			return i;

  0004e	8b c6		 mov	 eax, esi

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetPropertyType@prt@@YAKPBD@Z ENDP			; prt::GetPropertyType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;
; 1669 :         pointer& _Myfirst = _My_data._Myfirst;
; 1670 :         pointer& _Mylast  = _My_data._Mylast;
; 1671 :         pointer& _Myend   = _My_data._Myend;
; 1672 : 
; 1673 :         _My_data._Orphan_all();
; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 31		 je	 SHORT $LN2@Change_arr

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000c	57		 push	 edi
  0000d	ff 77 04	 push	 DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00020	f7 e9		 imul	 ecx
  00022	c1 fa 02	 sar	 edx, 2
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002f	c1 e0 03	 shl	 eax, 3
  00032	50		 push	 eax
  00033	ff 37		 push	 DWORD PTR [edi]
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1680 :         _Myfirst = _Newvec;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00040	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00043	89 0f		 mov	 DWORD PTR [edi], ecx
  00045	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00048	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0004b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00051	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00054	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00057	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0005a	5f		 pop	 edi

; 1683 :     }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	85 c0		 test	 eax, eax
  00007	74 45		 je	 SHORT $LN4@vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	ff 77 04	 push	 DWORD PTR [edi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 02	 sar	 edx, 2
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 03	 shl	 eax, 3
  0002f	50		 push	 eax
  00030	ff 37		 push	 DWORD PTR [edi]
  00032	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003d	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00040	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1699 :             _Myend   = pointer();

  00047	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0004e	5f		 pop	 edi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0004f	c3		 ret	 0
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	c1 e0 03	 shl	 eax, 3
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8

; 804  :     }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 332  : {

  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00007	8b f2		 mov	 esi, edx

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN59@NoExtensio

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 32		 mov	 esi, DWORD PTR [edx]
$LN59@NoExtensio:

; 3997 :         return static_cast<size_type>(

  00011	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 604  :     if (_Hay_size != 0) { // room for match, look for it

  00014	85 c0		 test	 eax, eax
  00016	74 52		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00018	83 c9 ff	 or	 ecx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001b	48		 dec	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0001c	3b c1		 cmp	 eax, ecx
  0001e	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00021	03 ce		 add	 ecx, esi

; 377  :         return _Left == _Right;

  00023	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 606  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00026	74 0a		 je	 SHORT $LN51@NoExtensio
$LL16@NoExtensio:

; 608  :             }
; 609  : 
; 610  :             if (_Match_try == _Haystack) {

  00028	3b ce		 cmp	 ecx, esi
  0002a	74 3e		 je	 SHORT $LN2@NoExtensio

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0002c	49		 dec	 ecx

; 377  :         return _Left == _Right;

  0002d	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 606  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00030	75 f6		 jne	 SHORT $LL16@NoExtensio
$LN51@NoExtensio:

; 607  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00032	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 335  : 	if (string::npos != npos)

  00034	83 f9 ff	 cmp	 ecx, -1
  00037	74 31		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00039	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00043	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004d	39 4a 10	 cmp	 DWORD PTR [edx+16], ecx
  00050	0f 42 4a 10	 cmovb	 ecx, DWORD PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00054	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00058	72 02		 jb	 SHORT $LN44@NoExtensio

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0005a	8b 12		 mov	 edx, DWORD PTR [edx]
$LN44@NoExtensio:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0005c	51		 push	 ecx
  0005d	52		 push	 edx
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 336  : 		return std::string(str, 0, npos);

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi

; 339  : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN2@NoExtensio:

; 337  : 
; 338  : 	return str;

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00076	5e		 pop	 esi

; 339  : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4432 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4433 : #if _ITERATOR_DEBUG_LEVEL == 2
; 4434 :     _STL_VERIFY(_STD addressof(_Left) != _STD addressof(_Right),
; 4435 :         "You cannot concatenate the same moved string to itself. See "
; 4436 :         "N4849 [res.on.arguments]/1.3: If a function argument binds to an rvalue reference "
; 4437 :         "parameter, the implementation may assume that this parameter is a unique reference "
; 4438 :         "to this argument");
; 4439 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 4440 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00003	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR $T1[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4441 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2799 :     basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 2799 :     basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator
  00017	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2800 :         return assign(_Ptr);

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2801 :     }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2586 :     basic_string& operator=(basic_string&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2587 :         if (this != _STD addressof(_Right)) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 46		 je	 SHORT $LN19@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00014	72 0c		 jb	 SHORT $LN7@operator

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00016	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	50		 push	 eax
  00018	ff 36		 push	 DWORD PTR [esi]
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001f	83 c4 08	 add	 esp, 8
$LN7@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00029	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00030	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00033	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00036	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00039	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  0003e	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00043	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004a	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00051	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN19@operator:
  00054	5f		 pop	 edi

; 2588 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});
; 2589 :         }
; 2590 : 
; 2591 :         return *this;
; 2592 :     }

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -12					; size = 4
__Fancyptr$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__New_capacity$1$ = 16					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2469 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00011	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00018	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  0001f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  00022	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00025	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  00028	89 55 f4	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2477 : 
; 2478 :         const auto _Left_capacity  = _Left_data._Myres;
; 2479 :         const auto _Right_capacity = _Right_data._Myres;
; 2480 :         // overflow is OK due to max_size() checks:
; 2481 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  0002b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0002e	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2482 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	2b c1		 sub	 eax, ecx
  00036	3b d0		 cmp	 edx, eax

; 2483 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  00038	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003b	77 5a		 ja	 SHORT $LN2@basic_stri
  0003d	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00040	77 55		 ja	 SHORT $LN2@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00042	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00045	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  00048	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0004d	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00052	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00059	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00060	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2135 :         value_type* _Result = _Bx._Buf;

  00063	8b f3		 mov	 esi, ebx

; 2153 :         return _BUF_SIZE <= _Myres;

  00065	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN17@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN17@basic_stri:

; 2153 :         return _BUF_SIZE <= _Myres;

  0006d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00071	72 02		 jb	 SHORT $LN22@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00073	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN22@basic_stri:

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00075	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00078	50		 push	 eax

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00079	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007c	57		 push	 edi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memcpy

; 2489 :             _My_data._Mysize = _New_size;

  00083	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0008c	8b c3		 mov	 eax, ebx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
$LN2@basic_stri:

; 2490 :             return;
; 2491 :         }
; 2492 : 
; 2493 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  00097	2b c2		 sub	 eax, edx
  00099	3b c8		 cmp	 ecx, eax

; 2494 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  0009b	77 5a		 ja	 SHORT $LN3@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000a3	50		 push	 eax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a4	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000a7	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000ac	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b1	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b8	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bf	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2495 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2496 :             // At this point, we have tested:
; 2497 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2498 :             // therefore: (by De Morgan's Laws)
; 2499 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2500 :             // therefore: (by the distributive property)
; 2501 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2502 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2503 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2504 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2505 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2506 :             _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2507 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c2	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c4	57		 push	 edi

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000c5	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _memmove
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  000d1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000d5	72 02		 jb	 SHORT $LN37@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000d7	8b 36		 mov	 esi, DWORD PTR [esi]
$LN37@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000d9	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  000dc	56		 push	 esi
  000dd	57		 push	 edi
  000de	e8 00 00 00 00	 call	 _memcpy

; 2509 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2510 :             _My_data._Mysize = _New_size;

  000e3	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000ec	8b c3		 mov	 eax, ebx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
$LN3@basic_stri:

; 2511 :             return;
; 2512 :         }
; 2513 : 
; 2514 :         // can't use either buffer, reallocate
; 2515 :         const auto _Max = max_size();
; 2516 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000f7	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000fc	2b c1		 sub	 eax, ecx
  000fe	3b c2		 cmp	 eax, edx
  00100	0f 82 83 00 00
	00		 jb	 $LN70@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00106	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00109	83 c8 0f	 or	 eax, 15			; 0000000fH
  0010c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00111	76 07		 jbe	 SHORT $LN44@basic_stri

; 4203 :             return _Max;

  00113	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00118	eb 0a		 jmp	 SHORT $LN68@basic_stri
$LN44@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0011a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0011f	3b c1		 cmp	 eax, ecx
  00121	0f 42 c1	 cmovb	 eax, ecx
$LN68@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00124	89 45 10	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
  00127	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0012e	89 45 f8	 mov	 DWORD PTR __Fancyptr$[ebp], eax

; 2524 :         // nothrow hereafter
; 2525 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00131	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$[ebp]
  00134	50		 push	 eax
  00135	53		 push	 ebx
  00136	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2526 :         _My_data._Mysize = _New_size;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2527 :         _My_data._Myres  = _New_capacity;

  00141	8b 4d 10	 mov	 ecx, DWORD PTR __New_capacity$1$[ebp]
  00144	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00147	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0014a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0014e	72 02		 jb	 SHORT $LN52@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00150	8b 36		 mov	 esi, DWORD PTR [esi]
$LN52@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00152	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  00155	56		 push	 esi
  00156	8b 75 f8	 mov	 esi, DWORD PTR __Fancyptr$[ebp]
  00159	56		 push	 esi
  0015a	e8 00 00 00 00	 call	 _memcpy
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  00162	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00166	72 02		 jb	 SHORT $LN59@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00168	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN59@basic_stri:

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016a	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0016d	40		 inc	 eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0016e	50		 push	 eax

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016f	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00172	03 c6		 add	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _memcpy

; 2531 :         _Proxy._Release();
; 2532 :     }

  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	8b c3		 mov	 eax, ebx
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 0c 00	 ret	 12			; 0000000cH
$LN70@basic_stri:

; 2517 :             _Xlen_string();

  00189	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@basic_stri:
  0018e	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	5e		 pop	 esi

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);
; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1975 :         __crt_va_end(_ArgList);
; 1976 :         return _Result;
; 1977 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
