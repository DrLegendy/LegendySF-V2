; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_R4?$CDynamicPool@VCTerrain@@@@6B@		; CDynamicPool<CTerrain>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCTerrain@@@@@8		; CDynamicPool<CTerrain> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCTerrain@@@@8		; CDynamicPool<CTerrain>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCTerrain@@@@8		; CDynamicPool<CTerrain>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCTerrain@@@@8	; CDynamicPool<CTerrain>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCTerrain@@@@6B@		; CDynamicPool<CTerrain>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z	; CDynamicPool<CTerrain>::`scalar deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z:PROC	; CDynamicPool<CTerrain>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPool@VCTerrain@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCTerrain@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCTerrain@@@@6B@ ; CDynamicPool<CTerrain>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCTerrain@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCTerrain@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCTerrain@@@@@8 ; CDynamicPool<CTerrain>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCTerrain@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCTerrain@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCTerrain@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCTerrain@@@@8 ; CDynamicPool<CTerrain>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCTerrain@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCTerrain@@@@8 DD 00H		; CDynamicPool<CTerrain>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCTerrain@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCTerrain@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCTerrain@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CTerrain> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCTerrain@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCTerrain@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCTerrain@@@@6B@ DD 00H		; CDynamicPool<CTerrain>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCTerrain@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCTerrain@@@@8
rdata$r	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0HardwareTransformPatch_SSourceVertex@@QAE@XZ	; HardwareTransformPatch_SSourceVertex::HardwareTransformPatch_SSourceVertex
PUBLIC	??0CTerrainPatch@@QAE@XZ			; CTerrainPatch::CTerrainPatch
PUBLIC	??1CTerrainPatch@@QAE@XZ			; CTerrainPatch::~CTerrainPatch
PUBLIC	??1SHardwareTransformPatch@CTerrainPatch@@QAE@XZ ; CTerrainPatch::SHardwareTransformPatch::~SHardwareTransformPatch
PUBLIC	??0CTerrain@@QAE@XZ				; CTerrain::CTerrain
PUBLIC	??1CTerrain@@UAE@XZ				; CTerrain::~CTerrain
PUBLIC	?Clear@CTerrain@@UAEXXZ				; CTerrain::Clear
PUBLIC	?SetMapOutDoor@CTerrain@@QAEXPAVCMapOutdoor@@@Z	; CTerrain::SetMapOutDoor
PUBLIC	?RAW_LoadTileMap@CTerrain@@QAE_NPBD_N@Z		; CTerrain::RAW_LoadTileMap
PUBLIC	?LoadHeightMap@CTerrain@@QAE_NPBD@Z		; CTerrain::LoadHeightMap
PUBLIC	?CalculateTerrainPatch@CTerrain@@QAEXXZ		; CTerrain::CalculateTerrainPatch
PUBLIC	?CopySettingFromGlobalSetting@CTerrain@@QAEXXZ	; CTerrain::CopySettingFromGlobalSetting
PUBLIC	?WE_GetHeightMapValue@CTerrain@@QAEGFF@Z	; CTerrain::WE_GetHeightMapValue
PUBLIC	?GetHeight@CTerrain@@QAEMHH@Z			; CTerrain::GetHeight
PUBLIC	?GetNormal@CTerrain@@QAE_NHHPAUD3DXVECTOR3@@@Z	; CTerrain::GetNormal
PUBLIC	?LoadAttrMap@CTerrain@@QAE_NPBD@Z		; CTerrain::LoadAttrMap
PUBLIC	?GetAttr@CTerrain@@QAEEGG@Z			; CTerrain::GetAttr
PUBLIC	?isAttrOn@CTerrain@@QAE_NGGE@Z			; CTerrain::isAttrOn
PUBLIC	?GetWaterHeight@CTerrain@@QAEXEPAJ@Z		; CTerrain::GetWaterHeight
PUBLIC	?GetWaterHeight@CTerrain@@QAE_NGGPAJ@Z		; CTerrain::GetWaterHeight
PUBLIC	?LoadShadowTexture@CTerrain@@QAEXPBD@Z		; CTerrain::LoadShadowTexture
PUBLIC	?LoadShadowMap@CTerrain@@QAE_NPBD@Z		; CTerrain::LoadShadowMap
PUBLIC	?LoadMiniMapTexture@CTerrain@@QAEXPBD@Z		; CTerrain::LoadMiniMapTexture
PUBLIC	?AllocateMarkedSplats@CTerrain@@QAEXPAE@Z	; CTerrain::AllocateMarkedSplats
PUBLIC	?DeallocateMarkedSplats@CTerrain@@QAEXXZ	; CTerrain::DeallocateMarkedSplats
PUBLIC	?SetCoordinate@CTerrain@@QAEXGG@Z		; CTerrain::SetCoordinate
PUBLIC	?RAW_GenerateSplat@CTerrain@@QAEX_N@Z		; CTerrain::RAW_GenerateSplat
PUBLIC	?Initialize@CTerrain@@IAE_NXZ			; CTerrain::Initialize
PUBLIC	?RAW_AllocateSplats@CTerrain@@IAEX_N@Z		; CTerrain::RAW_AllocateSplats
PUBLIC	?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z	; CTerrain::RAW_DeallocateSplats
PUBLIC	?RAW_CountTiles@CTerrain@@MAEXXZ		; CTerrain::RAW_CountTiles
PUBLIC	?AddTexture32@CTerrain@@IAEPAUIDirect3DTexture8@@EPAEJJ@Z ; CTerrain::AddTexture32
PUBLIC	?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z		; CTerrain::PutImage32
PUBLIC	?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z		; CTerrain::PutImage16
PUBLIC	?CalculateNormal@CTerrain@@IAEXJJ@Z		; CTerrain::CalculateNormal
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?GetTerrainPatchPtr@CTerrain@@QAEPAVCTerrainPatch@@EE@Z ; CTerrain::GetTerrainPatchPtr
PUBLIC	?_CalculateTerrainPatch@CTerrain@@IAEXEE@Z	; CTerrain::_CalculateTerrainPatch
PUBLIC	?DestroySystem@CTerrain@@SAXXZ			; CTerrain::DestroySystem
PUBLIC	?New@CTerrain@@SAPAV1@XZ			; CTerrain::New
PUBLIC	?Delete@CTerrain@@SAXPAV1@@Z			; CTerrain::Delete
PUBLIC	??_GCTerrain@@UAEPAXI@Z				; CTerrain::`scalar deleting destructor'
PUBLIC	?_Xlength@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@CAXXZ ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCTerrain@@@@UAE@XZ		; CDynamicPool<CTerrain>::~CDynamicPool<CTerrain>
PUBLIC	?Delete@?$CDynamicPool@VCTerrain@@@@KAXPAVCTerrain@@@Z ; CDynamicPool<CTerrain>::Delete
PUBLIC	??$_Destroy_range@V?$allocator@PAVCTerrain@@@std@@@std@@YAXPAPAVCTerrain@@QAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ; std::_Destroy_range<std::allocator<CTerrain *> >
PUBLIC	??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Emplace_reallocate<CTerrain * const &>
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
PUBLIC	??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ; std::_Uninitialized_move<CTerrain * *,std::allocator<CTerrain *> >
PUBLIC	??$_Copy_memmove@PAPAVCTerrain@@PAPAV1@@std@@YAPAPAVCTerrain@@PAPAV1@00@Z ; std::_Copy_memmove<CTerrain * *,CTerrain * *>
PUBLIC	??_ECTerrain@@WGKFFA@AEPAXI@Z			; [thunk]:CTerrain::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A ; CTerrain::ms_kPool
PUBLIC	??_7CTerrain@@6BCTerrainImpl@@@			; CTerrain::`vftable'
PUBLIC	??_7CTerrain@@6BCGraphicBase@@@			; CTerrain::`vftable'
PUBLIC	??_C@_0CE@KIPOLACJ@CTerrain?3?3LoadMiniMapTexture?5?$CFd@ ; `string'
PUBLIC	??_C@_0DF@NCADIKFN@?5CTerrain?3?3LoadMiniMapTexture?5?9@ ; `string'
PUBLIC	??_C@_0DG@HIAJBENM@?5CTerrain?3?3LoadShadowTexture?5?9?5@ ; `string'
PUBLIC	??_C@_0CD@IJFAIKJL@CTerrain?3?3LoadShadowTexture?5?$CFd?5@ ; `string'
PUBLIC	??_C@_0BC@DNLHKNND@LoadShadowMap?5?$CFs?5@	; `string'
PUBLIC	??_C@_0CJ@CPMONPNA@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5O@ ; `string'
PUBLIC	??_C@_0CJ@HOIKLCAI@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5S@ ; `string'
PUBLIC	??_C@_06MIKGEFKP@?$CFd?5ms?6@			; `string'
PUBLIC	??_C@_0EI@CCJJGEPA@CTerrain?3?3WE_GetHeightMapValue?5@ ; `string'
PUBLIC	??_C@_0CB@BJJCGNIJ@CTerrain?3?3RAW_AllocateSplats?5?$CFd@ ; `string'
PUBLIC	??_C@_0CG@DNKMEFFO@LoadHeightMap?3?3CalculateNormal?5@ ; `string'
PUBLIC	??_C@_0GK@JCKMMDJF@CTerrain?3?3isAttrOn?5Coordiante?5E@ ; `string'
PUBLIC	??_C@_0GF@DKPFJAMA@CTerrain?3?3GetAttr?5Coordiante?5Er@ ; `string'
PUBLIC	??_C@_0DK@FNOMKIKO@CTerrain?3?3GetWaterHeight?5WaterN@ ; `string'
PUBLIC	??_C@_0CN@IPEKMCGJ@CTerrain?3?3GetWaterHeight?5?$CIX?5?$CFd?0@ ; `string'
PUBLIC	??_C@_0EP@MGCDBJBL@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@ ; `string'
PUBLIC	??_C@_0EN@EFOOENIC@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@ ; `string'
PUBLIC	??_C@_0CN@NONLPBAM@CTerrain?3?3AddTexture32?5?9?5Create@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CTerrain@@6BCTerrainImpl@@@		; CTerrain::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTerrain@@@8				; CTerrain `RTTI Type Descriptor'
PUBLIC	??_R3CTerrain@@8				; CTerrain::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTerrain@@8				; CTerrain::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTerrain@@8			; CTerrain::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CTerrainImpl@@8			; CTerrainImpl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCTerrainImpl@@@8			; CTerrainImpl `RTTI Type Descriptor'
PUBLIC	??_R3CTerrainImpl@@8				; CTerrainImpl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTerrainImpl@@8				; CTerrainImpl::`RTTI Base Class Array'
PUBLIC	??_R1GKFFA@?0A@EA@CGraphicBase@@8		; CGraphicBase::`RTTI Base Class Descriptor at (435536,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTerrain@@6BCGraphicBase@@@		; CTerrain::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c0101f3
PUBLIC	__real@3c010204
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f5db3d7
PUBLIC	__real@3f800000
PUBLIC	__real@42fe0000
PUBLIC	__real@43480000
PUBLIC	__real@437f0000
PUBLIC	__real@43c80000
PUBLIC	__real@45480000
PUBLIC	__real@481c4000
PUBLIC	__real@497423f0
PUBLIC	__real@c97423f0
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicVertexBuffer@@QAE@XZ:PROC		; CGraphicVertexBuffer::CGraphicVertexBuffer
EXTRN	??1CGraphicVertexBuffer@@UAE@XZ:PROC		; CGraphicVertexBuffer::~CGraphicVertexBuffer
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	?GetTextureCount@CTextureSet@@QAEKXZ:PROC	; CTextureSet::GetTextureCount
EXTRN	?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ:PROC ; CTerrainImpl::GetTextureSet
EXTRN	??0CTerrainImpl@@QAE@XZ:PROC			; CTerrainImpl::CTerrainImpl
EXTRN	??1CTerrainImpl@@UAE@XZ:PROC			; CTerrainImpl::~CTerrainImpl
EXTRN	?Clear@CTerrainImpl@@MAEXXZ:PROC		; CTerrainImpl::Clear
EXTRN	?LoadHeightMap@CTerrainImpl@@IAE_NPBD@Z:PROC	; CTerrainImpl::LoadHeightMap
EXTRN	?RAW_LoadTileMap@CTerrainImpl@@IAE_NPBD@Z:PROC	; CTerrainImpl::RAW_LoadTileMap
EXTRN	?LoadAttrMap@CTerrainImpl@@IAE_NPBD@Z:PROC	; CTerrainImpl::LoadAttrMap
EXTRN	?Clear@CTerrainPatch@@QAEXXZ:PROC		; CTerrainPatch::Clear
EXTRN	?BuildTerrainVertexBuffer@CTerrainPatch@@QAEXPAUHardwareTransformPatch_SSourceVertex@@@Z:PROC ; CTerrainPatch::BuildTerrainVertexBuffer
EXTRN	?BuildWaterVertexBuffer@CTerrainPatch@@QAEXPAUSWaterVertex@@I@Z:PROC ; CTerrainPatch::BuildWaterVertexBuffer
EXTRN	??0SSoftwareTransformPatch@CTerrainPatch@@QAE@XZ:PROC ; CTerrainPatch::SSoftwareTransformPatch::SSoftwareTransformPatch
EXTRN	??1SSoftwareTransformPatch@CTerrainPatch@@QAE@XZ:PROC ; CTerrainPatch::SSoftwareTransformPatch::~SSoftwareTransformPatch
EXTRN	??_ECTerrain@@UAEPAXI@Z:PROC			; CTerrain::`vector deleting destructor'
EXTRN	?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z:PROC ; CMapOutdoor::GetTerrainPointer
EXTRN	?GetTerrainNumFromCoord@CMapOutdoor@@QAE_NGGPAE@Z:PROC ; CMapOutdoor::GetTerrainNumFromCoord
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_bSupportDXT@CGraphicBase@@1_NA:BYTE		; CGraphicBase::ms_bSupportDXT
EXTRN	?PR_FCNV@@3MA:DWORD				; PR_FCNV
EXTRN	?PR_ICNV@@3JA:DWORD				; PR_ICNV
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CTerrain@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CTerrain@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c97423f0
CONST	SEGMENT
__real@c97423f0 DD 0c97423f0r			; -999999
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@481c4000
CONST	SEGMENT
__real@481c4000 DD 0481c4000r			; 160000
CONST	ENDS
;	COMDAT __real@45480000
CONST	SEGMENT
__real@45480000 DD 045480000r			; 3200
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f5db3d7
CONST	SEGMENT
__real@3f5db3d7 DD 03f5db3d7r			; 0.866025
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c010204
CONST	SEGMENT
__real@3c010204 DD 03c010204r			; 0.00787402
CONST	ENDS
;	COMDAT __real@3c0101f3
CONST	SEGMENT
__real@3c0101f3 DD 03c0101f3r			; 0.007874
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4CTerrain@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CTerrain@@6BCGraphicBase@@@ DD 00H			; CTerrain::`RTTI Complete Object Locator'
	DD	06a550H
	DD	00H
	DD	FLAT:??_R0?AVCTerrain@@@8
	DD	FLAT:??_R3CTerrain@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1GKFFA@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1GKFFA@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (435536,-1,0,64)'
	DD	00H
	DD	06a550H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CTerrainImpl@@8
rdata$r	SEGMENT
??_R2CTerrainImpl@@8 DD FLAT:??_R1A@?0A@EA@CTerrainImpl@@8 ; CTerrainImpl::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTerrainImpl@@8
rdata$r	SEGMENT
??_R3CTerrainImpl@@8 DD 00H				; CTerrainImpl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTerrainImpl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTerrainImpl@@@8
data$r	SEGMENT
??_R0?AVCTerrainImpl@@@8 DD FLAT:??_7type_info@@6B@	; CTerrainImpl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTerrainImpl@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTerrainImpl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTerrainImpl@@8 DD FLAT:??_R0?AVCTerrainImpl@@@8 ; CTerrainImpl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTerrainImpl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTerrain@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTerrain@@8 DD FLAT:??_R0?AVCTerrain@@@8	; CTerrain::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTerrain@@8
rdata$r	ENDS
;	COMDAT ??_R2CTerrain@@8
rdata$r	SEGMENT
??_R2CTerrain@@8 DD FLAT:??_R1A@?0A@EA@CTerrain@@8	; CTerrain::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CTerrainImpl@@8
	DD	FLAT:??_R1GKFFA@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CTerrain@@8
rdata$r	SEGMENT
??_R3CTerrain@@8 DD 00H					; CTerrain::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CTerrain@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTerrain@@@8
data$r	SEGMENT
??_R0?AVCTerrain@@@8 DD FLAT:??_7type_info@@6B@		; CTerrain `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTerrain@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTerrain@@6BCTerrainImpl@@@
rdata$r	SEGMENT
??_R4CTerrain@@6BCTerrainImpl@@@ DD 00H			; CTerrain::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTerrain@@@8
	DD	FLAT:??_R3CTerrain@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NONLPBAM@CTerrain?3?3AddTexture32?5?9?5Create@
CONST	SEGMENT
??_C@_0CN@NONLPBAM@CTerrain?3?3AddTexture32?5?9?5Create@ DB 'CTerrain::Ad'
	DB	'dTexture32 - CreateTexture Error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@EFOOENIC@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@
CONST	SEGMENT
??_C@_0EN@EFOOENIC@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@ DB ' CTerrain::'
	DB	'RAW_GenerateSplat - TileDount 0 : Alpha Texture Release(%d) E'
	DB	'RROR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MGCDBJBL@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@
CONST	SEGMENT
??_C@_0EP@MGCDBJBL@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@ DB ' CTerrain::'
	DB	'RAW_GenerateSplat - TileCount > 0 : Alpha Texture Release(%d)'
	DB	' ERROR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IPEKMCGJ@CTerrain?3?3GetWaterHeight?5?$CIX?5?$CFd?0@
CONST	SEGMENT
??_C@_0CN@IPEKMCGJ@CTerrain?3?3GetWaterHeight?5?$CIX?5?$CFd?0@ DB 'CTerra'
	DB	'in::GetWaterHeight (X %d, Y %d) ERROR!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FNOMKIKO@CTerrain?3?3GetWaterHeight?5WaterN@
CONST	SEGMENT
??_C@_0DK@FNOMKIKO@CTerrain?3?3GetWaterHeight?5WaterN@ DB 'CTerrain::GetW'
	DB	'aterHeight WaterNum %d(Total Num %d) ERROR!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@DKPFJAMA@CTerrain?3?3GetAttr?5Coordiante?5Er@
CONST	SEGMENT
??_C@_0GF@DKPFJAMA@CTerrain?3?3GetAttr?5Coordiante?5Er@ DB 'CTerrain::Get'
	DB	'Attr Coordiante Error! Return 0... Input Coord - X : %d, Y : '
	DB	'%d ( Limit X : %d, Y : %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JCKMMDJF@CTerrain?3?3isAttrOn?5Coordiante?5E@
CONST	SEGMENT
??_C@_0GK@JCKMMDJF@CTerrain?3?3isAttrOn?5Coordiante?5E@ DB 'CTerrain::isA'
	DB	'ttrOn Coordiante Error! Return false... Input Coord - X : %d,'
	DB	' Y : %d ( Limit X : %d, Y : %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DNKMEFFO@LoadHeightMap?3?3CalculateNormal?5@
CONST	SEGMENT
??_C@_0CG@DNKMEFFO@LoadHeightMap?3?3CalculateNormal?5@ DB 'LoadHeightMap:'
	DB	':CalculateNormal %d ms', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BJJCGNIJ@CTerrain?3?3RAW_AllocateSplats?5?$CFd@
CONST	SEGMENT
??_C@_0CB@BJJCGNIJ@CTerrain?3?3RAW_AllocateSplats?5?$CFd@ DB 'CTerrain::R'
	DB	'AW_AllocateSplats %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@CCJJGEPA@CTerrain?3?3WE_GetHeightMapValue?5@
CONST	SEGMENT
??_C@_0EI@CCJJGEPA@CTerrain?3?3WE_GetHeightMapValue?5@ DB 'CTerrain::WE_G'
	DB	'etHeightMapValue : Can''t Get TerrainNum from Coord %d, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIKGEFKP@?$CFd?5ms?6@
CONST	SEGMENT
??_C@_06MIKGEFKP@?$CFd?5ms?6@ DB '%d ms', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HOIKLCAI@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5S@
CONST	SEGMENT
??_C@_0CJ@HOIKLCAI@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5S@ DB ' CTerra'
	DB	'in::LoadShadowMap - %s SIZE ERROR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CPMONPNA@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5O@
CONST	SEGMENT
??_C@_0CJ@CPMONPNA@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5O@ DB ' CTerra'
	DB	'in::LoadShadowMap - %s OPEN ERROR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DNLHKNND@LoadShadowMap?5?$CFs?5@
CONST	SEGMENT
??_C@_0BC@DNLHKNND@LoadShadowMap?5?$CFs?5@ DB 'LoadShadowMap %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IJFAIKJL@CTerrain?3?3LoadShadowTexture?5?$CFd?5@
CONST	SEGMENT
??_C@_0CD@IJFAIKJL@CTerrain?3?3LoadShadowTexture?5?$CFd?5@ DB 'CTerrain::'
	DB	'LoadShadowTexture %d ms', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HIAJBENM@?5CTerrain?3?3LoadShadowTexture?5?9?5@
CONST	SEGMENT
??_C@_0DG@HIAJBENM@?5CTerrain?3?3LoadShadowTexture?5?9?5@ DB ' CTerrain::'
	DB	'LoadShadowTexture - ShadowTexture is Empty', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NCADIKFN@?5CTerrain?3?3LoadMiniMapTexture?5?9@
CONST	SEGMENT
??_C@_0DF@NCADIKFN@?5CTerrain?3?3LoadMiniMapTexture?5?9@ DB ' CTerrain::L'
	DB	'oadMiniMapTexture - MiniMapTexture Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KIPOLACJ@CTerrain?3?3LoadMiniMapTexture?5?$CFd@
CONST	SEGMENT
??_C@_0CE@KIPOLACJ@CTerrain?3?3LoadMiniMapTexture?5?$CFd@ DB 'CTerrain::L'
	DB	'oadMiniMapTexture %d ms', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTerrain@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CTerrain@@6BCGraphicBase@@@ DD FLAT:??_R4CTerrain@@6BCGraphicBase@@@ ; CTerrain::`vftable'
	DD	FLAT:??_ECTerrain@@WGKFFA@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CTerrain@@6BCTerrainImpl@@@
CONST	SEGMENT
??_7CTerrain@@6BCTerrainImpl@@@ DD FLAT:??_R4CTerrain@@6BCTerrainImpl@@@ ; CTerrain::`vftable'
	DD	FLAT:??_ECTerrain@@UAEPAXI@Z
	DD	FLAT:?Clear@CTerrain@@UAEXXZ
	DD	FLAT:?RAW_CountTiles@CTerrain@@MAEXXZ
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A DD FLAT:??_7?$CDynamicPool@VCTerrain@@@@6B@ ; CTerrain::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCTerrain@@@@QAEPAVCTerrain@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCTerrain@@@@QAEPAVCTerrain@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCTerrain@@@@QAEPAVCTerrain@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCTerrain@@@@QAEPAVCTerrain@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CTerrain@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CTerrain@@SAPAV1@XZ$0
__ehfuncinfo$?New@CTerrain@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CTerrain@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadShadowMap@CTerrain@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadShadowMap@CTerrain@@QAE_NPBD@Z$0
__ehfuncinfo$?LoadShadowMap@CTerrain@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadShadowMap@CTerrain@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTerrain@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CTerrain@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CTerrain@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CTerrain@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CTerrain@@QAE@XZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTerrainPatch@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTerrainPatch@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTerrainPatch@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTerrainPatch@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTerrainPatch@@QAE@XZ$2
__ehfuncinfo$??0CTerrainPatch@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CTerrainPatch@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECTerrain@@WGKFFA@AEPAXI@Z
_TEXT	SEGMENT
??_ECTerrain@@WGKFFA@AEPAXI@Z PROC			; [thunk]:CTerrain::`vector deleting destructor', COMDAT
  00000	81 e9 50 a5 06
	00		 sub	 ecx, 435536		; 0006a550H
  00006	e9 00 00 00 00	 jmp	 ??_ECTerrain@@UAEPAXI@Z
??_ECTerrain@@WGKFFA@AEPAXI@Z ENDP			; [thunk]:CTerrain::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCTerrain@@PAPAV1@@std@@YAPAPAVCTerrain@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCTerrain@@PAPAV1@@std@@YAPAPAVCTerrain@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CTerrain * *,CTerrain * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCTerrain@@PAPAV1@@std@@YAPAPAVCTerrain@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CTerrain * *,CTerrain * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z PROC ; std::_Uninitialized_move<CTerrain * *,std::allocator<CTerrain *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCTerrain@@PAPAV1@@std@@YAPAPAVCTerrain@@PAPAV1@00@Z ; std::_Copy_memmove<CTerrain * *,CTerrain * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ENDP ; std::_Uninitialized_move<CTerrain * *,std::allocator<CTerrain *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Emplace_reallocate<CTerrain * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ; std::_Uninitialized_move<CTerrain * *,std::allocator<CTerrain *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@YAPAPAVCTerrain@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ; std::_Uninitialized_move<CTerrain * *,std::allocator<CTerrain *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@CAXXZ ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Emplace_reallocate<CTerrain * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCTerrain@@@std@@@std@@YAXPAPAVCTerrain@@QAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCTerrain@@@std@@@std@@YAXPAPAVCTerrain@@QAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CTerrain *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCTerrain@@@std@@@std@@YAXPAPAVCTerrain@@QAPAV1@AAV?$allocator@PAVCTerrain@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CTerrain *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CTerrain::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A ; CTerrain::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCTerrain@@@@UAE@XZ ; CDynamicPool<CTerrain>::~CDynamicPool<CTerrain>
??__F?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CTerrain::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ??__E?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CTerrain::ms_kPool'', COMDAT

; 11   : CDynamicPool<CTerrain>		CTerrain::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CTerrain::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CTerrain::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z PROC		; CDynamicPool<CTerrain>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCTerrain@@@@UAE@XZ ; CDynamicPool<CTerrain>::~CDynamicPool<CTerrain>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCTerrain@@@@UAEPAXI@Z ENDP		; CDynamicPool<CTerrain>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCTerrain@@@@KAXPAVCTerrain@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCTerrain@@@@KAXPAVCTerrain@@@Z PROC ; CDynamicPool<CTerrain>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCTerrain@@@@KAXPAVCTerrain@@@Z ENDP ; CDynamicPool<CTerrain>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCTerrain@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCTerrain@@@@UAE@XZ PROC		; CDynamicPool<CTerrain>::~CDynamicPool<CTerrain>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCTerrain@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCTerrain@@@@UAE@XZ ENDP		; CDynamicPool<CTerrain>::~CDynamicPool<CTerrain>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@CAXXZ PROC ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@CAXXZ ENDP ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCTerrain@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTerrain@@UAEPAXI@Z PROC				; CTerrain::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CTerrain@@UAE@XZ	; CTerrain::~CTerrain
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 e4 d1 07 00	 push	 512484			; 0007d1e4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCTerrain@@UAEPAXI@Z ENDP				; CTerrain::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?Delete@CTerrain@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkTerrain$ = 8						; size = 4
?Delete@CTerrain@@SAXPAV1@@Z PROC			; CTerrain::Delete, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 25   : 	pkTerrain->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkTerrain$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 26   : 	ms_kPool.Free(pkTerrain);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 27   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Emplace_reallocate<CTerrain * const &>
  00039	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 27   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CTerrain@@SAXPAV1@@Z ENDP			; CTerrain::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?New@CTerrain@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CTerrain@@SAPAV1@XZ PROC				; CTerrain::New, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CTerrain@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 e4 d1 07 00	 push	 512484			; 0007d1e4H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CTerrain@@QAE@XZ	; CTerrain::CTerrain
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 20   : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+32
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 21   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCTerrain@@@?$vector@PAVCTerrain@@V?$allocator@PAVCTerrain@@@std@@@std@@QAEPAPAVCTerrain@@QAPAV2@ABQAV2@@Z ; std::vector<CTerrain *,std::allocator<CTerrain *> >::_Emplace_reallocate<CTerrain * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+32
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 20   : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 21   : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1338 :         --_Mylast;

  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 21   : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CTerrain@@SAPAV1@XZ$0:
  00000	68 e4 d1 07 00	 push	 512484			; 0007d1e4H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CTerrain@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CTerrain@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CTerrain@@SAPAV1@XZ ENDP				; CTerrain::New
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?DestroySystem@CTerrain@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CTerrain@@SAXXZ PROC			; CTerrain::DestroySystem, COMDAT

; 14   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 14   : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+8

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+8, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 16   : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+16
  00041	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+8, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 16   : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CTerrain@@2V?$CDynamicPool@VCTerrain@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CTerrain@@SAXXZ ENDP			; CTerrain::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?_CalculateTerrainPatch@CTerrain@@IAEXEE@Z
_TEXT	SEGMENT
_kNormal$ = -31640					; size = 12
_fOrigX$1$ = -31628					; size = 4
_lWaterHeight$1$ = -31624				; size = 4
_fOOOpaqueWaterDepth$1$ = -31620			; size = 4
tv1189 = -31616						; size = 4
_fY$1$ = -31612						; size = 4
_lpWaterVertex$1$ = -31608				; size = 4
_pbyWater$1$ = -31604					; size = 4
_uWaterVertexCount$1$ = -31600				; size = 4
_rkTerrainPatch$1$ = -31596				; size = 4
_wNumPlainType$1$ = -31592				; size = 4
_wNumCliffType$1$ = -31588				; size = 4
_wNumHillType$1$ = -31584				; size = 4
_byOrigWaterPtr$1$ = -31580				; size = 4
_chOrigNormalPtr$1$ = -31576				; size = 4
_wOrigRawHeightPtr$1$ = -31572				; size = 4
_this$GSCopy$1$ = -31568				; size = 4
_fTransparentWaterDepth$1$ = -31564			; size = 4
_dwAlpha3$1$ = -31560					; size = 4
tv1186 = -31560						; size = 4
_dwY$1$ = -31556					; size = 4
_pwRawHeight$1$ = -31552				; size = 4
_dwX$1$ = -31548					; size = 4
_lpTerrainVertex$1$ = -31544				; size = 4
_fMaxZ$1$ = -31540					; size = 4
_fMinZ$1$ = -31536					; size = 4
_dwStartX$1$ = -31532					; size = 4
_pchNormal$1$ = -31528					; size = 4
tv1194 = -31524						; size = 4
_bWaterExist$1$ = -31517				; size = 1
_akSrcWaterVertex$ = -31516				; size = 24576
_akSrcTerrainVertex$ = -6940				; size = 6936
__$ArrayPad$ = -4					; size = 4
_byPatchNumX$ = 8					; size = 1
_byPatchNumY$ = 12					; size = 1
?_CalculateTerrainPatch@CTerrain@@IAEXEE@Z PROC		; CTerrain::_CalculateTerrainPatch, COMDAT
; _this$ = ecx

; 928  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 98 7b 00 00	 mov	 eax, 31640		; 00007b98H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx
  0001a	89 bd b0 84 ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi

; 929  : 	if (!m_awRawHeightMap || !m_acNormalMap || !m_abyWaterMap)

  00020	8d 87 04 04 00
	00		 lea	 eax, DWORD PTR [edi+1028]
  00026	85 c0		 test	 eax, eax
  00028	0f 84 51 07 00
	00		 je	 $LN9@CalculateT
  0002e	8d 87 1a ce 02
	00		 lea	 eax, DWORD PTR [edi+183834]
  00034	85 c0		 test	 eax, eax
  00036	0f 84 43 07 00
	00		 je	 $LN9@CalculateT
  0003c	8d 87 1a 8e 02
	00		 lea	 eax, DWORD PTR [edi+167450]
  00042	85 c0		 test	 eax, eax
  00044	0f 84 35 07 00
	00		 je	 $LN9@CalculateT

; 930  : 		return;
; 931  : 
; 932  : 	DWORD dwPatchNum = byPatchNumY * PATCH_XCOUNT + byPatchNumX;
; 933  : 
; 934  : 	CTerrainPatch& rkTerrainPatch=m_TerrainPatchList[dwPatchNum];

  0004a	0f b6 45 08	 movzx	 eax, BYTE PTR _byPatchNumX$[ebp]
  0004e	8d 8f d8 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435672]
  00054	56		 push	 esi
  00055	0f b6 75 0c	 movzx	 esi, BYTE PTR _byPatchNumY$[ebp]
  00059	89 85 d4 84 ff
	ff		 mov	 DWORD PTR _dwStartX$1$[ebp], eax
  0005f	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  00062	6b c0 70	 imul	 eax, eax, 112
  00065	03 c8		 add	 ecx, eax
  00067	89 8d 94 84 ff
	ff		 mov	 DWORD PTR _rkTerrainPatch$1$[ebp], ecx

; 935  : 	if (!rkTerrainPatch.NeedUpdate())

  0006d	80 79 45 00	 cmp	 BYTE PTR [ecx+69], 0
  00071	0f 84 07 07 00
	00		 je	 $LN68@CalculateT

; 936  : 		return;
; 937  : 
; 938  : 	const float fOpaqueWaterDepth = m_pOwnerOutdoorMap->GetOpaqueWaterDepth();

  00077	8b 87 b8 a5 06
	00		 mov	 eax, DWORD PTR [edi+435640]

; 939  : 	const float fOOOpaqueWaterDepth = 1.0f/fOpaqueWaterDepth;

  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	f3 0f 10 88 24
	0a 00 00	 movss	 xmm1, DWORD PTR [eax+2596]
  0008d	f3 0f 5e c1	 divss	 xmm0, xmm1

; 940  : 	const float fTransparentWaterDepth = 0.8f * fOpaqueWaterDepth;

  00091	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f4ccccd
  00099	f3 0f 11 85 7c
	84 ff ff	 movss	 DWORD PTR _fOOOpaqueWaterDepth$1$[ebp], xmm0
  000a1	f3 0f 11 8d b4
	84 ff ff	 movss	 DWORD PTR _fTransparentWaterDepth$1$[ebp], xmm1

; 941  : 
; 942  : 	rkTerrainPatch.Clear();

  000a9	e8 00 00 00 00	 call	 ?Clear@CTerrainPatch@@QAEXXZ ; CTerrainPatch::Clear

; 943  : 
; 944  : 	HardwareTransformPatch_SSourceVertex akSrcTerrainVertex[CTerrainPatch::TERRAIN_VERTEX_COUNT];
; 945  : 	SWaterVertex akSrcWaterVertex[PATCH_XSIZE * PATCH_YSIZE * 6];
; 946  : 
; 947  : 	DWORD dwNormalWidth = CTerrainImpl::NORMALMAP_XSIZE * 3;
; 948  : 	DWORD dwStartX = byPatchNumX * PATCH_XSIZE;

  000ae	8b 95 d4 84 ff
	ff		 mov	 edx, DWORD PTR _dwStartX$1$[ebp]

; 949  : 	DWORD dwStartY = byPatchNumY * PATCH_YSIZE;

  000b4	c1 e6 04	 shl	 esi, 4

; 950  : 
; 951  : 	WORD * wOrigRawHeightPtr = m_awRawHeightMap + ((dwStartY+1) * HEIGHTMAP_RAW_XSIZE) + dwStartX+1;

  000b7	69 c6 83 00 00
	00		 imul	 eax, esi, 131
  000bd	c1 e2 04	 shl	 edx, 4

; 963  : 
; 964  : 	float fMinZ =  999999.0f;
; 965  : 	float fMaxZ = -999999.0f;

  000c0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c97423f0
  000c8	89 95 d4 84 ff
	ff		 mov	 DWORD PTR _dwStartX$1$[ebp], edx
  000ce	89 b5 bc 84 ff
	ff		 mov	 DWORD PTR _dwY$1$[ebp], esi
  000d4	05 86 02 00 00	 add	 eax, 646		; 00000286H
  000d9	f3 0f 11 8d cc
	84 ff ff	 movss	 DWORD PTR _fMaxZ$1$[ebp], xmm1
  000e1	03 c2		 add	 eax, edx

; 966  : 	WORD wNumPlainType = 0;

  000e3	c7 85 98 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR _wNumPlainType$1$[ebp], 0
  000ed	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  000f0	89 85 ac 84 ff
	ff		 mov	 DWORD PTR _wOrigRawHeightPtr$1$[ebp], eax
  000f6	69 c6 81 00 00
	00		 imul	 eax, esi, 129
  000fc	05 5e ef 00 00	 add	 eax, 61278		; 0000ef5eH
  00101	03 c2		 add	 eax, edx
  00103	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  00106	03 c8		 add	 ecx, eax
  00108	8b c6		 mov	 eax, esi
  0010a	c1 e0 07	 shl	 eax, 7
  0010d	05 1a 8e 02 00	 add	 eax, 167450		; 00028e1aH
  00112	89 8d a8 84 ff
	ff		 mov	 DWORD PTR _chOrigNormalPtr$1$[ebp], ecx
  00118	03 c7		 add	 eax, edi
  0011a	03 c2		 add	 eax, edx
  0011c	89 85 a4 84 ff
	ff		 mov	 DWORD PTR _byOrigWaterPtr$1$[ebp], eax
  00122	0f b7 87 6c a5
	06 00		 movzx	 eax, WORD PTR [edi+435564]
  00129	69 c0 00 64 00
	00		 imul	 eax, eax, 25600
  0012f	66 0f 6e e8	 movd	 xmm5, eax
  00133	69 c2 c8 00 00
	00		 imul	 eax, edx, 200

; 967  : 	WORD wNumHillType = 0;

  00139	33 d2		 xor	 edx, edx
  0013b	0f 5b ed	 cvtdq2ps xmm5, xmm5
  0013e	89 95 a0 84 ff
	ff		 mov	 DWORD PTR _wNumHillType$1$[ebp], edx

; 968  : 	WORD wNumCliffType = 0;

  00144	89 95 9c 84 ff
	ff		 mov	 DWORD PTR _wNumCliffType$1$[ebp], edx

; 969  : 
; 970  : 	bool bWaterExist=false;

  0014a	88 95 e3 84 ff
	ff		 mov	 BYTE PTR _bWaterExist$1$[ebp], dl

; 973  : 	UINT uWaterVertexCount=0;

  00150	89 95 90 84 ff
	ff		 mov	 DWORD PTR _uWaterVertexCount$1$[ebp], edx
  00156	66 0f 6e c0	 movd	 xmm0, eax
  0015a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0015e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00161	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0016a	0f b7 87 6e a5
	06 00		 movzx	 eax, WORD PTR [edi+435566]

; 974  : 
; 975  : 	HardwareTransformPatch_SSourceVertex*	lpTerrainVertex=akSrcTerrainVertex;

  00171	8d bd e4 e4 ff
	ff		 lea	 edi, DWORD PTR _akSrcTerrainVertex$[ebp]
  00177	69 c0 00 64 00
	00		 imul	 eax, eax, 25600
  0017d	89 bd c8 84 ff
	ff		 mov	 DWORD PTR _lpTerrainVertex$1$[ebp], edi
  00183	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00187	66 0f 6e d8	 movd	 xmm3, eax
  0018b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0018f	69 c6 c8 00 00
	00		 imul	 eax, esi, 200
  00195	0f 5b db	 cvtdq2ps xmm3, xmm3
  00198	f3 0f 11 ad 74
	84 ff ff	 movss	 DWORD PTR _fOrigX$1$[ebp], xmm5
  001a0	66 0f 6e c0	 movd	 xmm0, eax
  001a4	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ab	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h

; 63   : 	void SetMinX(float fMinX)								{ m_fMinX = fMinX; }

  001b4	8b 85 94 84 ff
	ff		 mov	 eax, DWORD PTR _rkTerrainPatch$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 957  : 	fOrigY = fY = (float)(m_wY * YSIZE * CELLSCALE) + (float)(dwStartY * CELLSCALE);

  001ba	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h

; 63   : 	void SetMinX(float fMinX)								{ m_fMinX = fMinX; }

  001be	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 957  : 	fOrigY = fY = (float)(m_wY * YSIZE * CELLSCALE) + (float)(dwStartY * CELLSCALE);

  001c2	f3 0f 58 d8	 addss	 xmm3, xmm0

; 958  : 
; 959  : 	rkTerrainPatch.SetMinX(fX);
; 960  : 	rkTerrainPatch.SetMaxX(fX + (float)(PATCH_XSIZE*CELLSCALE));

  001c6	0f 28 c5	 movaps	 xmm0, xmm5
  001c9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@45480000

; 961  : 	rkTerrainPatch.SetMinY(fY);

  001d1	f3 0f 11 58 08	 movss	 DWORD PTR [eax+8], xmm3
  001d6	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 962  : 	rkTerrainPatch.SetMaxY(fY + (float)(PATCH_YSIZE*CELLSCALE));

  001db	0f 28 c3	 movaps	 xmm0, xmm3
  001de	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@45480000
  001e6	f3 0f 11 9d 84
	84 ff ff	 movss	 DWORD PTR _fY$1$[ebp], xmm3
  001ee	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 971  : 
; 972  : 	SWaterVertex*	lpWaterVertex=akSrcWaterVertex;

  001f3	8d 85 e4 84 ff
	ff		 lea	 eax, DWORD PTR _akSrcWaterVertex$[ebp]
  001f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@497423f0
  00201	89 85 88 84 ff
	ff		 mov	 DWORD PTR _lpWaterVertex$1$[ebp], eax

; 976  : 	UINT uTerrainVertexCount=0;
; 977  : 
; 978  : 	D3DXVECTOR3 kNormal;
; 979  : 	D3DXVECTOR3 kPosition;
; 980  : 	for (DWORD dwY = dwStartY; dwY <= dwStartY + PATCH_YSIZE; ++dwY)

  00207	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0020a	f3 0f 11 85 d0
	84 ff ff	 movss	 DWORD PTR _fMinZ$1$[ebp], xmm0
  00212	89 85 80 84 ff
	ff		 mov	 DWORD PTR tv1189[ebp], eax
  00218	3b f0		 cmp	 esi, eax
  0021a	0f 87 e8 04 00
	00		 ja	 $LN3@CalculateT

; 983  : 		char * pchNormal	= chOrigNormalPtr;
; 984  : 		BYTE * pbyWater		= byOrigWaterPtr;
; 985  : 		fX = fOrigX;
; 986  : 
; 987  : 		for (DWORD dwX = dwStartX; dwX <= dwStartX + PATCH_XSIZE; ++dwX)

  00220	8b 95 d4 84 ff
	ff		 mov	 edx, DWORD PTR _dwStartX$1$[ebp]
  00226	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@437f0000
  0022e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@43480000
  00236	8d 42 10	 lea	 eax, DWORD PTR [edx+16]
  00239	89 85 dc 84 ff
	ff		 mov	 DWORD PTR tv1194[ebp], eax
  0023f	8b c1		 mov	 eax, ecx
$LL4@CalculateT:

; 981  :     {
; 982  : 		WORD * pwRawHeight	= wOrigRawHeightPtr;

  00241	8b bd a4 84 ff
	ff		 mov	 edi, DWORD PTR _byOrigWaterPtr$1$[ebp]
  00247	8b 8d ac 84 ff
	ff		 mov	 ecx, DWORD PTR _wOrigRawHeightPtr$1$[ebp]

; 983  : 		char * pchNormal	= chOrigNormalPtr;
; 984  : 		BYTE * pbyWater		= byOrigWaterPtr;
; 985  : 		fX = fOrigX;
; 986  : 
; 987  : 		for (DWORD dwX = dwStartX; dwX <= dwStartX + PATCH_XSIZE; ++dwX)

  0024d	89 95 c4 84 ff
	ff		 mov	 DWORD PTR _dwX$1$[ebp], edx
  00253	8b 95 d4 84 ff
	ff		 mov	 edx, DWORD PTR _dwStartX$1$[ebp]
  00259	3b 95 dc 84 ff
	ff		 cmp	 edx, DWORD PTR tv1194[ebp]
  0025f	8b 95 c4 84 ff
	ff		 mov	 edx, DWORD PTR _dwX$1$[ebp]
  00265	89 bd 8c 84 ff
	ff		 mov	 DWORD PTR _pbyWater$1$[ebp], edi
  0026b	8b bd c8 84 ff
	ff		 mov	 edi, DWORD PTR _lpTerrainVertex$1$[ebp]
  00271	89 8d c0 84 ff
	ff		 mov	 DWORD PTR _pwRawHeight$1$[ebp], ecx
  00277	89 85 d8 84 ff
	ff		 mov	 DWORD PTR _pchNormal$1$[ebp], eax
  0027d	0f 87 30 04 00
	00		 ja	 $LN6@CalculateT
  00283	0f 28 fb	 movaps	 xmm7, xmm3
  00286	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  0028d	0f 1f 00	 npad	 3
$LL7@CalculateT:

; 988  : 		{
; 989  : 			WORD hgt = (*pwRawHeight++);
; 990  : 
; 991  : 			kNormal.x = -(*pchNormal++) * 0.0078740f;

  00290	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00293	f7 d8		 neg	 eax
  00295	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00298	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c0101f3
  002a0	83 85 c0 84 ff
	ff 02		 add	 DWORD PTR _pwRawHeight$1$[ebp], 2
  002a7	66 0f 6e c8	 movd	 xmm1, eax
  002ab	8b 85 d8 84 ff
	ff		 mov	 eax, DWORD PTR _pchNormal$1$[ebp]
  002b1	40		 inc	 eax
  002b2	89 85 d8 84 ff
	ff		 mov	 DWORD PTR _pchNormal$1$[ebp], eax
  002b8	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 992  : 			kNormal.y = (*pchNormal++) * 0.0078740f;

  002bb	0f be 00	 movsx	 eax, BYTE PTR [eax]
  002be	66 0f 6e c0	 movd	 xmm0, eax
  002c2	8b 85 d8 84 ff
	ff		 mov	 eax, DWORD PTR _pchNormal$1$[ebp]
  002c8	40		 inc	 eax
  002c9	f3 0f 59 ca	 mulss	 xmm1, xmm2
  002cd	89 85 d8 84 ff
	ff		 mov	 DWORD PTR _pchNormal$1$[ebp], eax

; 993  : 			kNormal.z = (*pchNormal++) * 0.0078740f;

  002d3	ff 85 d8 84 ff
	ff		 inc	 DWORD PTR _pchNormal$1$[ebp]
  002d9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002dc	0f be 00	 movsx	 eax, BYTE PTR [eax]
  002df	66 0f 6e d8	 movd	 xmm3, eax

; 994  : 
; 995  : 			kPosition.x = +fX;
; 996  : 			kPosition.y = -fY;
; 997  : 			kPosition.z = (float)(hgt) * m_fHeightScale;

  002e3	8b c1		 mov	 eax, ecx
  002e5	0f 5b db	 cvtdq2ps xmm3, xmm3
  002e8	89 85 b8 84 ff
	ff		 mov	 DWORD PTR tv1186[ebp], eax
  002ee	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002f2	f3 0f 59 da	 mulss	 xmm3, xmm2
  002f6	66 0f 6e d0	 movd	 xmm2, eax
  002fa	8b 85 b0 84 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00300	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00303	f3 0f 11 9d 70
	84 ff ff	 movss	 DWORD PTR _kNormal$[ebp+8], xmm3
  0030b	f3 0f 59 90 38
	91 03 00	 mulss	 xmm2, DWORD PTR [eax+233784]

; 998  : 			lpTerrainVertex->kPosition = kPosition;

  00313	f3 0f 11 2f	 movss	 DWORD PTR [edi], xmm5
  00317	f3 0f 11 7f 04	 movss	 DWORD PTR [edi+4], xmm7
  0031c	f3 0f 11 57 08	 movss	 DWORD PTR [edi+8], xmm2

; 999  : 			lpTerrainVertex->kNormal = kNormal;

  00321	8b 85 70 84 ff
	ff		 mov	 eax, DWORD PTR _kNormal$[ebp+8]
  00327	0f 14 c8	 unpcklps xmm1, xmm0

; 1000 : 
; 1001 : 			if (0.5f > kNormal.z)

  0032a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00332	0f 2f c3	 comiss	 xmm0, xmm3
  00335	66 0f d6 4f 0c	 movq	 QWORD PTR [edi+12], xmm1
  0033a	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0033d	76 08		 jbe	 SHORT $LN11@CalculateT

; 1002 : 				++wNumCliffType;

  0033f	ff 85 9c 84 ff
	ff		 inc	 DWORD PTR _wNumCliffType$1$[ebp]
  00345	eb 1b		 jmp	 SHORT $LN14@CalculateT
$LN11@CalculateT:

; 1003 : 			else if (0.8660254f > kNormal.z)

  00347	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5db3d7
  0034f	0f 2f c3	 comiss	 xmm0, xmm3
  00352	76 08		 jbe	 SHORT $LN13@CalculateT

; 1004 : 				++wNumHillType;

  00354	ff 85 a0 84 ff
	ff		 inc	 DWORD PTR _wNumHillType$1$[ebp]
  0035a	eb 06		 jmp	 SHORT $LN14@CalculateT
$LN13@CalculateT:

; 1005 : 			else
; 1006 : 				++wNumPlainType;

  0035c	ff 85 98 84 ff
	ff		 inc	 DWORD PTR _wNumPlainType$1$[ebp]
$LN14@CalculateT:

; 1007 : 
; 1008 : 			if (kPosition.z > fMaxZ)
; 1009 : 				fMaxZ = kPosition.z;
; 1010 : 			if (kPosition.z < fMinZ)
; 1011 : 				fMinZ = kPosition.z;
; 1012 : 
; 1013 : 			if (0 <= dwX && 0 <= dwY && XSIZE > dwX && YSIZE > dwY &&
; 1014 : 				(dwStartX + PATCH_XSIZE) != dwX && (dwStartY + PATCH_YSIZE) != dwY)

  00362	8b 85 dc 84 ff
	ff		 mov	 eax, DWORD PTR tv1194[ebp]
  00368	0f 28 ca	 movaps	 xmm1, xmm2
  0036b	f3 0f 5d 95 d0
	84 ff ff	 minss	 xmm2, DWORD PTR _fMinZ$1$[ebp]
  00373	f3 0f 5f 8d cc
	84 ff ff	 maxss	 xmm1, DWORD PTR _fMaxZ$1$[ebp]
  0037b	0f 28 c2	 movaps	 xmm0, xmm2
  0037e	f3 0f 11 8d cc
	84 ff ff	 movss	 DWORD PTR _fMaxZ$1$[ebp], xmm1
  00386	f3 0f 11 85 d0
	84 ff ff	 movss	 DWORD PTR _fMinZ$1$[ebp], xmm0
  0038e	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  00394	0f 83 e9 02 00
	00		 jae	 $LN28@CalculateT
  0039a	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  003a0	0f 83 dd 02 00
	00		 jae	 $LN28@CalculateT
  003a6	3b c2		 cmp	 eax, edx
  003a8	0f 84 d5 02 00
	00		 je	 $LN28@CalculateT
  003ae	39 b5 80 84 ff
	ff		 cmp	 DWORD PTR tv1189[ebp], esi
  003b4	0f 84 c9 02 00
	00		 je	 $LN28@CalculateT

; 1015 : 			{
; 1016 : 				BYTE byNumWater = (*pbyWater++);

  003ba	8b 8d 8c 84 ff
	ff		 mov	 ecx, DWORD PTR _pbyWater$1$[ebp]
  003c0	8a 01		 mov	 al, BYTE PTR [ecx]
  003c2	41		 inc	 ecx
  003c3	89 8d 8c 84 ff
	ff		 mov	 DWORD PTR _pbyWater$1$[ebp], ecx

; 1017 : 
; 1018 : 				if (byNumWater != 0xFF)

  003c9	3c ff		 cmp	 al, 255			; 000000ffH
  003cb	0f 84 ac 02 00
	00		 je	 $LN66@CalculateT

; 1019 : 				{
; 1020 : 					long lWaterHeight = m_lWaterHeight[byNumWater];

  003d1	8b 8d b0 84 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  003d7	0f b6 c0	 movzx	 eax, al
  003da	8b b4 81 44 a1
	04 00		 mov	 esi, DWORD PTR [ecx+eax*4+303428]
  003e1	89 b5 78 84 ff
	ff		 mov	 DWORD PTR _lWaterHeight$1$[ebp], esi

; 1021 : 					if (-1 != lWaterHeight)

  003e7	83 fe ff	 cmp	 esi, -1
  003ea	0f 84 87 02 00
	00		 je	 $LN63@CalculateT

; 1022 : 					{
; 1023 : 						float fWaterTerrainHeightDifference0 = (float)(lWaterHeight - (long)hgt);
; 1024 : 						if (fWaterTerrainHeightDifference0 >= fTransparentWaterDepth)
; 1025 : 							fWaterTerrainHeightDifference0 = fTransparentWaterDepth;
; 1026 : 						if (fWaterTerrainHeightDifference0 <= 0.0f)
; 1027 : 							fWaterTerrainHeightDifference0 = 0.0f;
; 1028 : 
; 1029 : 						float fWaterTerrainHeightDifference1 = (float)(lWaterHeight - (long)(*(pwRawHeight + CTerrainImpl::HEIGHTMAP_RAW_XSIZE - 1)));

  003f0	8b 95 c0 84 ff
	ff		 mov	 edx, DWORD PTR _pwRawHeight$1$[ebp]
  003f6	8b ce		 mov	 ecx, esi

; 1030 : 						if (fWaterTerrainHeightDifference1 >= fTransparentWaterDepth)

  003f8	f3 0f 10 8d b4
	84 ff ff	 movss	 xmm1, DWORD PTR _fTransparentWaterDepth$1$[ebp]
  00400	0f 57 d2	 xorps	 xmm2, xmm2
  00403	0f 57 db	 xorps	 xmm3, xmm3
  00406	0f 57 e4	 xorps	 xmm4, xmm4
  00409	0f b7 82 04 01
	00 00		 movzx	 eax, WORD PTR [edx+260]
  00410	2b c8		 sub	 ecx, eax

; 1031 : 							fWaterTerrainHeightDifference1 = fTransparentWaterDepth;
; 1032 : 						if (fWaterTerrainHeightDifference1 <= 0.0f)
; 1033 : 							fWaterTerrainHeightDifference1 = 0.0f;
; 1034 : 
; 1035 : 						float fWaterTerrainHeightDifference2 = (float)(lWaterHeight - (long)(*(pwRawHeight)));

  00412	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00415	66 0f 6e c1	 movd	 xmm0, ecx
  00419	8b ce		 mov	 ecx, esi
  0041b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0041e	2b c8		 sub	 ecx, eax

; 1036 : 						if (fWaterTerrainHeightDifference2 >= fTransparentWaterDepth)
; 1037 : 							fWaterTerrainHeightDifference2 = fTransparentWaterDepth;
; 1038 : 						if (fWaterTerrainHeightDifference2 <= 0.0f)
; 1039 : 							fWaterTerrainHeightDifference2 = 0.0f;
; 1040 : 
; 1041 : 						float fWaterTerrainHeightDifference3 = (float)(lWaterHeight - (long)(*(pwRawHeight + CTerrainImpl::HEIGHTMAP_RAW_XSIZE)));

  00420	0f b7 82 06 01
	00 00		 movzx	 eax, WORD PTR [edx+262]
  00427	f3 0f 5d c8	 minss	 xmm1, xmm0
  0042b	66 0f 6e c1	 movd	 xmm0, ecx
  0042f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00432	8b ce		 mov	 ecx, esi
  00434	2b c8		 sub	 ecx, eax
  00436	8b c6		 mov	 eax, esi
  00438	2b 85 b8 84 ff
	ff		 sub	 eax, DWORD PTR tv1186[ebp]
  0043e	f3 0f 5f d1	 maxss	 xmm2, xmm1
  00442	f3 0f 10 8d b4
	84 ff ff	 movss	 xmm1, DWORD PTR _fTransparentWaterDepth$1$[ebp]
  0044a	f3 0f 5d c8	 minss	 xmm1, xmm0
  0044e	66 0f 6e c1	 movd	 xmm0, ecx
  00452	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00455	f3 0f 5f d9	 maxss	 xmm3, xmm1

; 1042 : 						if (fWaterTerrainHeightDifference3 >= fTransparentWaterDepth)

  00459	f3 0f 10 8d b4
	84 ff ff	 movss	 xmm1, DWORD PTR _fTransparentWaterDepth$1$[ebp]
  00461	f3 0f 5d c8	 minss	 xmm1, xmm0
  00465	66 0f 6e c0	 movd	 xmm0, eax
  00469	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1043 : 							fWaterTerrainHeightDifference3 = fTransparentWaterDepth;
; 1044 : 						if (fWaterTerrainHeightDifference3 <= 0.0f)

  0046c	f3 0f 5f e1	 maxss	 xmm4, xmm1
  00470	f3 0f 10 8d b4
	84 ff ff	 movss	 xmm1, DWORD PTR _fTransparentWaterDepth$1$[ebp]
  00478	f3 0f 5d c8	 minss	 xmm1, xmm0
  0047c	0f 57 c0	 xorps	 xmm0, xmm0
  0047f	f3 0f 5f c1	 maxss	 xmm0, xmm1

; 1045 : 							fWaterTerrainHeightDifference3 = 0.0f;
; 1046 : 
; 1047 : 						DWORD dwAlpha0;
; 1048 : 						DWORD dwAlpha1;
; 1049 : 						DWORD dwAlpha2;
; 1050 : 						DWORD dwAlpha3;
; 1051 : 
; 1052 : 						PR_FLOAT_TO_INT(fWaterTerrainHeightDifference0 * fOOOpaqueWaterDepth * 255.0f, dwAlpha0);

  00483	f3 0f 10 8d 7c
	84 ff ff	 movss	 xmm1, DWORD PTR _fOOOpaqueWaterDepth$1$[ebp]
  0048b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0048f	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00493	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm0
  0049b	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  004a1	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  004a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  004ad	66 0f 6e c7	 movd	 xmm0, edi
  004b1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  004b4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  004bb	76 01		 jbe	 SHORT $LN34@CalculateT
  004bd	4f		 dec	 edi
$LN34@CalculateT:

; 1053 : 						PR_FLOAT_TO_INT(fWaterTerrainHeightDifference1 * fOOOpaqueWaterDepth * 255.0f, dwAlpha1);

  004be	f3 0f 59 d1	 mulss	 xmm2, xmm1
  004c2	f3 0f 59 d6	 mulss	 xmm2, xmm6
  004c6	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm2
  004ce	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  004d4	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  004da	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  004e0	66 0f 6e c6	 movd	 xmm0, esi
  004e4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  004e7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  004ee	76 01		 jbe	 SHORT $LN36@CalculateT
  004f0	4e		 dec	 esi
$LN36@CalculateT:

; 1054 : 						PR_FLOAT_TO_INT(fWaterTerrainHeightDifference2 * fOOOpaqueWaterDepth * 255.0f, dwAlpha2);

  004f1	f3 0f 59 d9	 mulss	 xmm3, xmm1
  004f5	f3 0f 59 de	 mulss	 xmm3, xmm6
  004f9	f3 0f 11 1d 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm3
  00501	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  00507	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  0050d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  00513	66 0f 6e c2	 movd	 xmm0, edx
  00517	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0051a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  00521	76 01		 jbe	 SHORT $LN38@CalculateT
  00523	4a		 dec	 edx
$LN38@CalculateT:

; 1055 : 						PR_FLOAT_TO_INT(fWaterTerrainHeightDifference3 * fOOOpaqueWaterDepth * 255.0f, dwAlpha3);

  00524	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00528	f3 0f 59 e6	 mulss	 xmm4, xmm6
  0052c	f3 0f 11 25 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm4
  00534	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  0053a	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  00540	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  00546	89 8d b8 84 ff
	ff		 mov	 DWORD PTR _dwAlpha3$1$[ebp], ecx
  0054c	66 0f 6e c1	 movd	 xmm0, ecx
  00550	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00553	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  0055a	76 07		 jbe	 SHORT $LN40@CalculateT
  0055c	49		 dec	 ecx
  0055d	89 8d b8 84 ff
	ff		 mov	 DWORD PTR _dwAlpha3$1$[ebp], ecx
$LN40@CalculateT:

; 1056 : 
; 1057 : 						DWORD dwAlphaKey=(dwAlpha0<<24)|(dwAlpha1<<16)|(dwAlpha2<<8)|dwAlpha3;
; 1058 : 						if (dwAlphaKey!=0)

  00563	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@43480000
  0056b	8b c7		 mov	 eax, edi
  0056d	c1 e0 08	 shl	 eax, 8
  00570	0b c6		 or	 eax, esi
  00572	c1 e0 08	 shl	 eax, 8
  00575	0b c2		 or	 eax, edx
  00577	c1 e0 08	 shl	 eax, 8
  0057a	0b c1		 or	 eax, ecx
  0057c	0f 84 d9 00 00
	00		 je	 $LN62@CalculateT

; 1059 : 						{
; 1060 : 							assert(lpWaterVertex<akSrcWaterVertex+PATCH_XSIZE * PATCH_YSIZE * 6);
; 1061 : 							lpWaterVertex->x = fX;

  00582	8b 85 88 84 ff
	ff		 mov	 eax, DWORD PTR _lpWaterVertex$1$[ebp]

; 1062 : 							lpWaterVertex->y = -fY;
; 1063 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1064 : 							lpWaterVertex->dwDiffuse = ((dwAlpha0 << 24) & 0xFF000000) | 0x000000FF;// 0x000F939B
; 1065 : 							lpWaterVertex++;
; 1066 : 
; 1067 : 							lpWaterVertex->x = fX;
; 1068 : 							lpWaterVertex->y = -fY - float(CELLSCALE);

  00588	0f 28 cf	 movaps	 xmm1, xmm7
  0058b	66 0f 6e 95 78
	84 ff ff	 movd	 xmm2, DWORD PTR _lWaterHeight$1$[ebp]
  00593	f3 0f 5c cc	 subss	 xmm1, xmm4
  00597	8b 8d b0 84 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 1069 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1070 : 							lpWaterVertex->dwDiffuse = ((dwAlpha1 << 24) & 0xFF000000) | 0x00FFFFFF;
; 1071 : 							lpWaterVertex++;
; 1072 : 
; 1073 : 							lpWaterVertex->x = fX + float(CELLSCALE);

  0059d	0f 28 c5	 movaps	 xmm0, xmm5
  005a0	0f 5b d2	 cvtdq2ps xmm2, xmm2
  005a3	c1 e7 18	 shl	 edi, 24			; 00000018H
  005a6	c1 e6 18	 shl	 esi, 24			; 00000018H
  005a9	81 cf ff 00 00
	00		 or	 edi, 255		; 000000ffH

; 1074 : 							lpWaterVertex->y = -fY;
; 1075 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1076 : 							lpWaterVertex->dwDiffuse = ((dwAlpha2 << 24) & 0xFF000000) | 0x00FFFFFF;

  005af	c1 e2 18	 shl	 edx, 24			; 00000018H
  005b2	81 ce ff ff ff
	00		 or	 esi, 16777215		; 00ffffffH
  005b8	81 ca ff ff ff
	00		 or	 edx, 16777215		; 00ffffffH
  005be	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  005c1	f3 0f 58 c4	 addss	 xmm0, xmm4
  005c5	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  005c9	f3 0f 59 91 38
	91 03 00	 mulss	 xmm2, DWORD PTR [ecx+233784]

; 1077 : 							lpWaterVertex++;
; 1078 : 
; 1079 : 							lpWaterVertex->x = fX + float(CELLSCALE);
; 1080 : 							lpWaterVertex->y = -fY;
; 1081 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1082 : 							lpWaterVertex->dwDiffuse = ((dwAlpha2 << 24) & 0xFF000000) | 0x00FFFFFF;
; 1083 : 							lpWaterVertex++;
; 1084 : 
; 1085 : 							lpWaterVertex->x = fX;
; 1086 : 							lpWaterVertex->y = -fY - float(CELLSCALE);
; 1087 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1088 : 							lpWaterVertex->dwDiffuse = ((dwAlpha1 << 24) & 0xFF000000) | 0x00FFFFFF;
; 1089 : 							lpWaterVertex++;
; 1090 : 
; 1091 : 							lpWaterVertex->x = fX + float(CELLSCALE);
; 1092 : 							lpWaterVertex->y = -fY - float(CELLSCALE);
; 1093 : 							lpWaterVertex->z = (float)lWaterHeight * m_fHeightScale;
; 1094 : 							lpWaterVertex->dwDiffuse = ((dwAlpha3 << 24) & 0xFF0000FF) | 0x00FFFFFF;

  005d1	8b 8d b8 84 ff
	ff		 mov	 ecx, DWORD PTR _dwAlpha3$1$[ebp]
  005d7	c1 e1 18	 shl	 ecx, 24			; 00000018H
  005da	81 c9 ff ff ff
	00		 or	 ecx, 16777215		; 00ffffffH
  005e0	f3 0f 11 78 04	 movss	 DWORD PTR [eax+4], xmm7
  005e5	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
  005ea	f3 0f 11 68 10	 movss	 DWORD PTR [eax+16], xmm5
  005ef	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1
  005f4	f3 0f 11 50 18	 movss	 DWORD PTR [eax+24], xmm2
  005f9	89 70 1c	 mov	 DWORD PTR [eax+28], esi
  005fc	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0
  00601	f3 0f 11 78 24	 movss	 DWORD PTR [eax+36], xmm7
  00606	f3 0f 11 50 28	 movss	 DWORD PTR [eax+40], xmm2
  0060b	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  0060e	f3 0f 11 40 30	 movss	 DWORD PTR [eax+48], xmm0
  00613	f3 0f 11 78 34	 movss	 DWORD PTR [eax+52], xmm7
  00618	f3 0f 11 50 38	 movss	 DWORD PTR [eax+56], xmm2
  0061d	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00620	f3 0f 11 68 40	 movss	 DWORD PTR [eax+64], xmm5
  00625	f3 0f 11 48 44	 movss	 DWORD PTR [eax+68], xmm1
  0062a	f3 0f 11 50 48	 movss	 DWORD PTR [eax+72], xmm2
  0062f	89 70 4c	 mov	 DWORD PTR [eax+76], esi
  00632	f3 0f 11 40 50	 movss	 DWORD PTR [eax+80], xmm0
  00637	f3 0f 11 48 54	 movss	 DWORD PTR [eax+84], xmm1
  0063c	f3 0f 11 50 58	 movss	 DWORD PTR [eax+88], xmm2
  00641	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 1095 : 							lpWaterVertex++;

  00644	83 c0 60	 add	 eax, 96			; 00000060H

; 1096 : 
; 1097 : 							uWaterVertexCount+=6;

  00647	83 85 90 84 ff
	ff 06		 add	 DWORD PTR _uWaterVertexCount$1$[ebp], 6
  0064e	89 85 88 84 ff
	ff		 mov	 DWORD PTR _lpWaterVertex$1$[ebp], eax

; 1098 : 							bWaterExist = true;

  00654	c6 85 e3 84 ff
	ff 01		 mov	 BYTE PTR _bWaterExist$1$[ebp], 1
$LN62@CalculateT:

; 1099 : 						}
; 1100 : 					}
; 1101 : 
; 1102 : 				}
; 1103 : 			}
; 1104 : 
; 1105 : 			++lpTerrainVertex;

  0065b	f3 0f 10 85 d0
	84 ff ff	 movss	 xmm0, DWORD PTR _fMinZ$1$[ebp]
  00663	f3 0f 10 8d cc
	84 ff ff	 movss	 xmm1, DWORD PTR _fMaxZ$1$[ebp]
  0066b	8b 95 c4 84 ff
	ff		 mov	 edx, DWORD PTR _dwX$1$[ebp]
  00671	8b bd c8 84 ff
	ff		 mov	 edi, DWORD PTR _lpTerrainVertex$1$[ebp]
$LN63@CalculateT:
  00677	8b b5 bc 84 ff
	ff		 mov	 esi, DWORD PTR _dwY$1$[ebp]
$LN66@CalculateT:
  0067d	8b 85 dc 84 ff
	ff		 mov	 eax, DWORD PTR tv1194[ebp]
$LN28@CalculateT:

; 983  : 		char * pchNormal	= chOrigNormalPtr;
; 984  : 		BYTE * pbyWater		= byOrigWaterPtr;
; 985  : 		fX = fOrigX;
; 986  : 
; 987  : 		for (DWORD dwX = dwStartX; dwX <= dwStartX + PATCH_XSIZE; ++dwX)

  00683	8b 8d c0 84 ff
	ff		 mov	 ecx, DWORD PTR _pwRawHeight$1$[ebp]

; 1106 : 			++uTerrainVertexCount;
; 1107 : 			fX += float(CELLSCALE);

  00689	f3 0f 58 ec	 addss	 xmm5, xmm4
  0068d	42		 inc	 edx
  0068e	83 c7 18	 add	 edi, 24			; 00000018H
  00691	3b d0		 cmp	 edx, eax
  00693	89 bd c8 84 ff
	ff		 mov	 DWORD PTR _lpTerrainVertex$1$[ebp], edi
  00699	8b 85 d8 84 ff
	ff		 mov	 eax, DWORD PTR _pchNormal$1$[ebp]
  0069f	89 95 c4 84 ff
	ff		 mov	 DWORD PTR _dwX$1$[ebp], edx
  006a5	0f 86 e5 fb ff
	ff		 jbe	 $LL7@CalculateT
  006ab	f3 0f 10 9d 84
	84 ff ff	 movss	 xmm3, DWORD PTR _fY$1$[ebp]
$LN6@CalculateT:

; 1108 : 		}
; 1109 : 
; 1110 : 		wOrigRawHeightPtr += CTerrainImpl::HEIGHTMAP_RAW_XSIZE;
; 1111 : 		chOrigNormalPtr += dwNormalWidth;

  006b3	8b 85 a8 84 ff
	ff		 mov	 eax, DWORD PTR _chOrigNormalPtr$1$[ebp]

; 1112 : 		byOrigWaterPtr  += CTerrainImpl::XSIZE;
; 1113 : 		fY += float(CELLSCALE);

  006b9	f3 0f 58 dc	 addss	 xmm3, xmm4
  006bd	81 85 ac 84 ff
	ff 06 01 00 00	 add	 DWORD PTR _wOrigRawHeightPtr$1$[ebp], 262 ; 00000106H
  006c7	46		 inc	 esi
  006c8	83 ad a4 84 ff
	ff 80		 sub	 DWORD PTR _byOrigWaterPtr$1$[ebp], -128 ; ffffff80H
  006cf	05 83 01 00 00	 add	 eax, 387		; 00000183H
  006d4	f3 0f 10 ad 74
	84 ff ff	 movss	 xmm5, DWORD PTR _fOrigX$1$[ebp]
  006dc	8b 95 d4 84 ff
	ff		 mov	 edx, DWORD PTR _dwStartX$1$[ebp]
  006e2	89 85 a8 84 ff
	ff		 mov	 DWORD PTR _chOrigNormalPtr$1$[ebp], eax
  006e8	f3 0f 11 9d 84
	84 ff ff	 movss	 DWORD PTR _fY$1$[ebp], xmm3
  006f0	89 b5 bc 84 ff
	ff		 mov	 DWORD PTR _dwY$1$[ebp], esi
  006f6	3b b5 80 84 ff
	ff		 cmp	 esi, DWORD PTR tv1189[ebp]
  006fc	0f 86 3f fb ff
	ff		 jbe	 $LL4@CalculateT
  00702	8b 95 a0 84 ff
	ff		 mov	 edx, DWORD PTR _wNumHillType$1$[ebp]
$LN3@CalculateT:

; 1114 :     }
; 1115 : 
; 1116 : 	if (wNumPlainType <= max(wNumHillType, wNumCliffType))

  00708	8b b5 9c 84 ff
	ff		 mov	 esi, DWORD PTR _wNumCliffType$1$[ebp]
  0070e	66 3b d6	 cmp	 dx, si
  00711	0f b7 ce	 movzx	 ecx, si
  00714	0f b7 c2	 movzx	 eax, dx
  00717	0f 47 c8	 cmova	 ecx, eax
  0071a	66 39 8d 98 84
	ff ff		 cmp	 WORD PTR _wNumPlainType$1$[ebp], cx
  00721	77 13		 ja	 SHORT $LN67@CalculateT

; 1117 : 	{
; 1118 : 		if (wNumCliffType <= wNumHillType)

  00723	66 3b f2	 cmp	 si, dx
  00726	8b b5 94 84 ff
	ff		 mov	 esi, DWORD PTR _rkTerrainPatch$1$[ebp]
  0072c	0f 97 c0	 seta	 al
  0072f	fe c0		 inc	 al
  00731	88 46 44	 mov	 BYTE PTR [esi+68], al
  00734	eb 06		 jmp	 SHORT $LN30@CalculateT
$LN67@CalculateT:

; 1114 :     }
; 1115 : 
; 1116 : 	if (wNumPlainType <= max(wNumHillType, wNumCliffType))

  00736	8b b5 94 84 ff
	ff		 mov	 esi, DWORD PTR _rkTerrainPatch$1$[ebp]
$LN30@CalculateT:

; 1119 : 			rkTerrainPatch.SetType(CTerrainPatch::PATCH_TYPE_HILL);
; 1120 : 		else
; 1121 : 			rkTerrainPatch.SetType(CTerrainPatch::PATCH_TYPE_CLIFF);
; 1122 : 	}
; 1123 : 
; 1124 : 	rkTerrainPatch.SetWaterExist(bWaterExist);

  0073c	8a 85 e3 84 ff
	ff		 mov	 al, BYTE PTR _bWaterExist$1$[ebp]

; 1125 : 
; 1126 : 	rkTerrainPatch.SetMinZ(fMinZ);
; 1127 : 	rkTerrainPatch.SetMaxZ(fMaxZ);
; 1128 : 
; 1129 : 	assert((PATCH_XSIZE+1)*(PATCH_YSIZE+1)==uTerrainVertexCount);
; 1130 : 	rkTerrainPatch.BuildTerrainVertexBuffer(akSrcTerrainVertex);

  00742	8b ce		 mov	 ecx, esi
  00744	88 46 19	 mov	 BYTE PTR [esi+25], al
  00747	8d 85 e4 e4 ff
	ff		 lea	 eax, DWORD PTR _akSrcTerrainVertex$[ebp]
  0074d	50		 push	 eax
  0074e	f3 0f 11 46 10	 movss	 DWORD PTR [esi+16], xmm0
  00753	f3 0f 11 4e 14	 movss	 DWORD PTR [esi+20], xmm1
  00758	e8 00 00 00 00	 call	 ?BuildTerrainVertexBuffer@CTerrainPatch@@QAEXPAUHardwareTransformPatch_SSourceVertex@@@Z ; CTerrainPatch::BuildTerrainVertexBuffer

; 1131 : 
; 1132 : 	if (bWaterExist)

  0075d	80 bd e3 84 ff
	ff 00		 cmp	 BYTE PTR _bWaterExist$1$[ebp], 0
  00764	74 14		 je	 SHORT $LN32@CalculateT

; 1133 : 		rkTerrainPatch.BuildWaterVertexBuffer(akSrcWaterVertex, uWaterVertexCount);

  00766	ff b5 90 84 ff
	ff		 push	 DWORD PTR _uWaterVertexCount$1$[ebp]
  0076c	8d 85 e4 84 ff
	ff		 lea	 eax, DWORD PTR _akSrcWaterVertex$[ebp]
  00772	8b ce		 mov	 ecx, esi
  00774	50		 push	 eax
  00775	e8 00 00 00 00	 call	 ?BuildWaterVertexBuffer@CTerrainPatch@@QAEXPAUSWaterVertex@@I@Z ; CTerrainPatch::BuildWaterVertexBuffer
$LN32@CalculateT:

; 1134 : 
; 1135 : 	rkTerrainPatch.NeedUpdate(false);

  0077a	c6 46 45 00	 mov	 BYTE PTR [esi+69], 0
$LN68@CalculateT:
  0077e	5e		 pop	 esi
$LN9@CalculateT:

; 1136 : }

  0077f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00782	33 cd		 xor	 ecx, ebp
  00784	5f		 pop	 edi
  00785	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0078a	8b e5		 mov	 esp, ebp
  0078c	5d		 pop	 ebp
  0078d	c2 08 00	 ret	 8
?_CalculateTerrainPatch@CTerrain@@IAEXEE@Z ENDP		; CTerrain::_CalculateTerrainPatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetTerrainPatchPtr@CTerrain@@QAEPAVCTerrainPatch@@EE@Z
_TEXT	SEGMENT
_byPatchNumX$ = 8					; size = 1
_byPatchNumY$ = 12					; size = 1
?GetTerrainPatchPtr@CTerrain@@QAEPAVCTerrainPatch@@EE@Z PROC ; CTerrain::GetTerrainPatchPtr, COMDAT
; _this$ = ecx

; 918  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 919  : 	if (byPatchNumX < 0 || byPatchNumX >= PATCH_XCOUNT || byPatchNumY < 0 || byPatchNumY >= PATCH_YCOUNT)

  00003	8a 55 08	 mov	 dl, BYTE PTR _byPatchNumX$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	80 fa 08	 cmp	 dl, 8
  0000c	73 1f		 jae	 SHORT $LN3@GetTerrain
  0000e	8a 45 0c	 mov	 al, BYTE PTR _byPatchNumY$[ebp]
  00011	3c 08		 cmp	 al, 8
  00013	73 18		 jae	 SHORT $LN3@GetTerrain

; 921  : 
; 922  : 	return &m_TerrainPatchList[byPatchNumY * PATCH_XCOUNT + byPatchNumX];

  00015	0f b6 c8	 movzx	 ecx, al
  00018	0f b6 c2	 movzx	 eax, dl
  0001b	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0001e	6b c0 70	 imul	 eax, eax, 112
  00021	05 d8 a5 06 00	 add	 eax, 435672		; 0006a5d8H
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi

; 923  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
$LN3@GetTerrain:

; 920  : 		return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 923  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?GetTerrainPatchPtr@CTerrain@@QAEPAVCTerrainPatch@@EE@Z ENDP ; CTerrain::GetTerrainPatchPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?CalculateNormal@CTerrain@@IAEXJJ@Z
_TEXT	SEGMENT
_ix$1$ = -12						; size = 4
tv680 = -12						; size = 4
_iy$1$ = -8						; size = 4
tv679 = -8						; size = 4
_this$1$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CalculateNormal@CTerrain@@IAEXJJ@Z PROC		; CTerrain::CalculateNormal, COMDAT
; _this$ = ecx

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00009	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 439  : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0000e	0f bf f8	 movsx	 edi, ax
  00011	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00014	0f bf f0	 movsx	 esi, ax
  00017	69 d7 83 00 00
	00		 imul	 edx, edi, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 442  : 	normal.x = -m_fHeightScale * ((float)GetHeightMapValue((x-1),y)-(float)GetHeightMapValue((x+1),y));

  0001d	f3 0f 10 89 38
	91 03 00	 movss	 xmm1, DWORD PTR [ecx+233784]
  00025	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0002c	89 4c 24 14	 mov	 DWORD PTR _this$1$[esp+24], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00030	03 d6		 add	 edx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 442  : 	normal.x = -m_fHeightScale * ((float)GetHeightMapValue((x-1),y)-(float)GetHeightMapValue((x+1),y));

  00032	0f b7 84 51 0a
	05 00 00	 movzx	 eax, WORD PTR [ecx+edx*2+1290]
  0003a	66 0f 6e d8	 movd	 xmm3, eax
  0003e	0f b7 84 51 0e
	05 00 00	 movzx	 eax, WORD PTR [ecx+edx*2+1294]
  00046	0f 5b db	 cvtdq2ps xmm3, xmm3
  00049	66 0f 6e c0	 movd	 xmm0, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0004d	69 c7 83 00 00
	00		 imul	 eax, edi, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 442  : 	normal.x = -m_fHeightScale * ((float)GetHeightMapValue((x-1),y)-(float)GetHeightMapValue((x+1),y));

  00053	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00056	03 c6		 add	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 442  : 	normal.x = -m_fHeightScale * ((float)GetHeightMapValue((x-1),y)-(float)GetHeightMapValue((x+1),y));

  00058	f3 0f 5c d8	 subss	 xmm3, xmm0

; 443  : 	normal.y = -m_fHeightScale * ((float)GetHeightMapValue(x,(y-1))-(float)GetHeightMapValue(x,(y+1)));

  0005c	0f b7 84 41 06
	04 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+1030]
  00064	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00068	66 0f 6e d0	 movd	 xmm2, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0006c	69 c7 83 00 00
	00		 imul	 eax, edi, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 443  : 	normal.y = -m_fHeightScale * ((float)GetHeightMapValue(x,(y-1))-(float)GetHeightMapValue(x,(y+1)));

  00072	0f 5b d2	 cvtdq2ps xmm2, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00075	03 c6		 add	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 442  : 	normal.x = -m_fHeightScale * ((float)GetHeightMapValue((x-1),y)-(float)GetHeightMapValue((x+1),y));

  00077	f3 0f 11 5c 24
	10		 movss	 DWORD PTR tv679[esp+24], xmm3

; 443  : 	normal.y = -m_fHeightScale * ((float)GetHeightMapValue(x,(y-1))-(float)GetHeightMapValue(x,(y+1)));

  0007d	0f b7 84 41 12
	06 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+1554]
  00085	66 0f 6e c0	 movd	 xmm0, eax
  00089	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008c	f3 0f 5c d0	 subss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00090	0f 28 c3	 movaps	 xmm0, xmm3
  00093	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 443  : 	normal.y = -m_fHeightScale * ((float)GetHeightMapValue(x,(y-1))-(float)GetHeightMapValue(x,(y+1)));

  00097	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 444  : 
; 445  : 	normal.z = 2.0f * CELLSCALE;

  0009b	0f 28 ca	 movaps	 xmm1, xmm2
  0009e	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv680[esp+24], xmm2
  000a4	f3 0f 59 ca	 mulss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000a8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ac	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@481c4000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000b4	0f 5a c1	 cvtps2pd xmm0, xmm1
  000b7	0f 57 c9	 xorps	 xmm1, xmm1
  000ba	66 0f 2e c8	 ucomisd xmm1, xmm0
  000be	77 06		 ja	 SHORT $LN23@CalculateN
  000c0	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000c4	eb 05		 jmp	 SHORT $LN24@CalculateN
$LN23@CalculateN:
  000c6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN24@CalculateN:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 446  : 	normal *= 127.0f / D3DXVec3Length(&normal);

  000cb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42fe0000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 446  : 	normal *= 127.0f / D3DXVec3Length(&normal);

  000d7	f3 0f 5e c8	 divss	 xmm1, xmm0
  000db	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 222  :     x *= f;

  000de	0f 28 d1	 movaps	 xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 446  : 	normal *= 127.0f / D3DXVec3Length(&normal);

  000e1	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR tv679[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 222  :     x *= f;

  000e7	f3 0f 59 54 24
	0c		 mulss	 xmm2, DWORD PTR tv680[esp+24]

; 223  :     y *= f;

  000ed	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@43c80000
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 449  : 	PR_FLOAT_TO_INT(normal.x, ix);

  000f5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm0
  000fd	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  00103	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  0010e	89 44 24 0c	 mov	 DWORD PTR _ix$1$[esp+24], eax
  00112	66 0f 6e c0	 movd	 xmm0, eax
  00116	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00119	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  00120	76 05		 jbe	 SHORT $LN3@CalculateN
  00122	48		 dec	 eax
  00123	89 44 24 0c	 mov	 DWORD PTR _ix$1$[esp+24], eax
$LN3@CalculateN:

; 450  : 	PR_FLOAT_TO_INT(normal.y, iy);

  00127	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm2
  0012f	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  00135	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  00140	89 44 24 10	 mov	 DWORD PTR _iy$1$[esp+24], eax
  00144	66 0f 6e c0	 movd	 xmm0, eax
  00148	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0014b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  00152	76 05		 jbe	 SHORT $LN5@CalculateN
  00154	48		 dec	 eax
  00155	89 44 24 10	 mov	 DWORD PTR _iy$1$[esp+24], eax
$LN5@CalculateN:

; 451  : 	PR_FLOAT_TO_INT(normal.z, iz);

  00159	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?PR_FCNV@@3MA, xmm1
  00161	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PR_FCNV@@3MA	; PR_FCNV
  00167	db 1d 00 00 00
	00		 fistp	 DWORD PTR ?PR_ICNV@@3JA
  0016d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?PR_ICNV@@3JA ; PR_ICNV
  00173	66 0f 6e c2	 movd	 xmm0, edx
  00177	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?PR_FCNV@@3MA
  00181	76 01		 jbe	 SHORT $LN7@CalculateN
  00183	4a		 dec	 edx
$LN7@CalculateN:

; 452  : 
; 453  : 	char * n = (char*) &m_acNormalMap[(y * NORMALMAP_XSIZE + x)*3];

  00184	69 45 0c 81 00
	00 00		 imul	 eax, DWORD PTR _y$[ebp], 129
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0018e	81 c1 5e ef 00
	00		 add	 ecx, 61278		; 0000ef5eH

; 454  : 
; 455  : 	*n++ = (char) ix;
; 456  : 	*n++ = (char) iy;
; 457  : 	*n++ = (char) iz;
; 458  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	03 c1		 add	 eax, ecx
  00198	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$1$[esp+16]
  0019c	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  0019f	03 c8		 add	 ecx, eax
  001a1	8b 44 24 04	 mov	 eax, DWORD PTR _ix$1$[esp+16]
  001a5	88 01		 mov	 BYTE PTR [ecx], al
  001a7	8b 44 24 08	 mov	 eax, DWORD PTR _iy$1$[esp+16]
  001ab	88 41 01	 mov	 BYTE PTR [ecx+1], al
  001ae	88 51 02	 mov	 BYTE PTR [ecx+2], dl
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
?CalculateNormal@CTerrain@@IAEXJJ@Z ENDP		; CTerrain::CalculateNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_src_pitch$ = 16					; size = 4
_dst_pitch$ = 20					; size = 4
tv686 = 24						; size = 4
tv685 = 24						; size = 4
_texturewidth$ = 24					; size = 4
_textureheight$ = 28					; size = 4
_bResize$ = 32						; size = 1
?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z PROC		; CTerrain::PutImage16, COMDAT
; _this$ = ecx

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 890  : 	for (int y = 0; y < textureheight; ++y)

  00003	83 7d 1c 00	 cmp	 DWORD PTR _textureheight$[ebp], 0
  00007	8b 55 18	 mov	 edx, DWORD PTR _texturewidth$[ebp]
  0000a	0f 8e d4 00 00
	00		 jle	 $LN3@PutImage16
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _src$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _dst$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@PutImage16:

; 891  :     {
; 892  : 		for (int x = 0; x < texturewidth; ++x)

  00020	33 c0		 xor	 eax, eax
  00022	85 d2		 test	 edx, edx
  00024	0f 8e a7 00 00
	00		 jle	 $LN6@PutImage16
  0002a	83 fa 20	 cmp	 edx, 32			; 00000020H
  0002d	0f 82 8d 00 00
	00		 jb	 $LL30@PutImage16
  00033	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00036	03 ce		 add	 ecx, esi
  00038	8d 5a ff	 lea	 ebx, DWORD PTR [edx-1]
  0003b	8d 1c 5f	 lea	 ebx, DWORD PTR [edi+ebx*2]
  0003e	3b f9		 cmp	 edi, ecx
  00040	77 04		 ja	 SHORT $LN15@PutImage16
  00042	3b de		 cmp	 ebx, esi
  00044	73 7a		 jae	 SHORT $LL30@PutImage16
$LN15@PutImage16:
  00046	8b ca		 mov	 ecx, edx
  00048	8d 5f 20	 lea	 ebx, DWORD PTR [edi+32]
  0004b	83 e1 e0	 and	 ecx, -32		; ffffffe0H
  0004e	89 4d 18	 mov	 DWORD PTR tv686[ebp], ecx

; 893  : 		{
; 894  : 			WORD packed_pixel = src[x] << 8;

  00051	b9 08 00 00 00	 mov	 ecx, 8
  00056	66 0f 6e d1	 movd	 xmm2, ecx
  0005a	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0005d	0f 1f 00	 npad	 3
$LL7@PutImage16:
  00060	f3 0f 7e 49 f0	 movq	 xmm1, QWORD PTR [ecx-16]
  00065	8d 5b 40	 lea	 ebx, DWORD PTR [ebx+64]
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	8d 49 20	 lea	 ecx, DWORD PTR [ecx+32]
  0006e	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00072	83 c0 20	 add	 eax, 32			; 00000020H
  00075	66 0f f1 ca	 psllw	 xmm1, xmm2

; 895  : 			//WORD packed_pixel = (src[x]&0xF0) << 8;
; 896  : 			*((WORD*)(dst+x*2)) = packed_pixel;

  00079	0f 11 4b a0	 movups	 XMMWORD PTR [ebx-96], xmm1
  0007d	f3 0f 7e 49 d8	 movq	 xmm1, QWORD PTR [ecx-40]
  00082	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00086	66 0f f1 ca	 psllw	 xmm1, xmm2
  0008a	0f 11 4b b0	 movups	 XMMWORD PTR [ebx-80], xmm1
  0008e	f3 0f 7e 49 e0	 movq	 xmm1, QWORD PTR [ecx-32]
  00093	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00097	66 0f f1 ca	 psllw	 xmm1, xmm2
  0009b	0f 11 4b c0	 movups	 XMMWORD PTR [ebx-64], xmm1
  0009f	f3 0f 7e 49 e8	 movq	 xmm1, QWORD PTR [ecx-24]
  000a4	66 0f 60 c8	 punpcklbw xmm1, xmm0
  000a8	66 0f f1 ca	 psllw	 xmm1, xmm2
  000ac	0f 11 4b d0	 movups	 XMMWORD PTR [ebx-48], xmm1
  000b0	3b 45 18	 cmp	 eax, DWORD PTR tv686[ebp]
  000b3	7c ab		 jl	 SHORT $LL7@PutImage16

; 891  :     {
; 892  : 		for (int x = 0; x < texturewidth; ++x)

  000b5	89 45 18	 mov	 DWORD PTR tv685[ebp], eax
  000b8	3b c2		 cmp	 eax, edx
  000ba	7d 15		 jge	 SHORT $LN6@PutImage16
  000bc	0f 1f 40 00	 npad	 4
$LL30@PutImage16:

; 893  : 		{
; 894  : 			WORD packed_pixel = src[x] << 8;

  000c0	0f b6 0c 30	 movzx	 ecx, BYTE PTR [eax+esi]
  000c4	66 c1 e1 08	 shl	 cx, 8

; 895  : 			//WORD packed_pixel = (src[x]&0xF0) << 8;
; 896  : 			*((WORD*)(dst+x*2)) = packed_pixel;

  000c8	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000cc	40		 inc	 eax
  000cd	3b c2		 cmp	 eax, edx
  000cf	7c ef		 jl	 SHORT $LL30@PutImage16
$LN6@PutImage16:

; 897  : 		}
; 898  : 
; 899  : 		dst += dst_pitch;

  000d1	03 7d 14	 add	 edi, DWORD PTR _dst_pitch$[ebp]

; 900  : 		src += src_pitch;

  000d4	03 75 10	 add	 esi, DWORD PTR _src_pitch$[ebp]
  000d7	83 6d 1c 01	 sub	 DWORD PTR _textureheight$[ebp], 1
  000db	0f 85 3f ff ff
	ff		 jne	 $LL4@PutImage16
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
$LN3@PutImage16:

; 901  :     }
; 902  : }

  000e4	5d		 pop	 ebp
  000e5	c2 1c 00	 ret	 28			; 0000001cH
?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z ENDP		; CTerrain::PutImage16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_src_pitch$ = 16					; size = 4
_dst_pitch$ = 20					; size = 4
tv673 = 24						; size = 4
tv672 = 24						; size = 4
_texturewidth$ = 24					; size = 4
_textureheight$ = 28					; size = 4
_bResize$ = 32						; size = 1
?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z PROC		; CTerrain::PutImage32, COMDAT
; _this$ = ecx

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 874  : 	for (int y = 0; y < textureheight; ++y)

  00003	83 7d 1c 00	 cmp	 DWORD PTR _textureheight$[ebp], 0
  00007	8b 55 18	 mov	 edx, DWORD PTR _texturewidth$[ebp]
  0000a	0f 8e e2 00 00
	00		 jle	 $LN3@PutImage32
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _src$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _dst$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@PutImage32:

; 875  :     {
; 876  : 		for (int x = 0; x < texturewidth; ++x)

  00020	33 c0		 xor	 eax, eax
  00022	85 d2		 test	 edx, edx
  00024	0f 8e b5 00 00
	00		 jle	 $LN6@PutImage32
  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H
  0002d	0f 82 9d 00 00
	00		 jb	 $LL30@PutImage32
  00033	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00036	03 ce		 add	 ecx, esi
  00038	8d 5a ff	 lea	 ebx, DWORD PTR [edx-1]
  0003b	8d 1c 9f	 lea	 ebx, DWORD PTR [edi+ebx*4]
  0003e	3b f9		 cmp	 edi, ecx
  00040	77 08		 ja	 SHORT $LN15@PutImage32
  00042	3b de		 cmp	 ebx, esi
  00044	0f 83 86 00 00
	00		 jae	 $LL30@PutImage32
$LN15@PutImage32:
  0004a	8b ca		 mov	 ecx, edx
  0004c	8d 5f 20	 lea	 ebx, DWORD PTR [edi+32]
  0004f	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00052	89 4d 18	 mov	 DWORD PTR tv673[ebp], ecx

; 877  : 		{
; 878  : 			DWORD packed_pixel = src[x] << 24;

  00055	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005a	66 0f 6e d1	 movd	 xmm2, ecx
  0005e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
$LL7@PutImage32:
  00061	66 0f 6e 49 f8	 movd	 xmm1, DWORD PTR [ecx-8]
  00066	8d 5b 40	 lea	 ebx, DWORD PTR [ebx+64]
  00069	0f 57 c0	 xorps	 xmm0, xmm0
  0006c	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  0006f	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00073	83 c0 10	 add	 eax, 16			; 00000010H
  00076	66 0f 61 c8	 punpcklwd xmm1, xmm0
  0007a	66 0f f2 ca	 pslld	 xmm1, xmm2

; 879  : 			*((DWORD*)(dst+x*4)) = packed_pixel;

  0007e	0f 11 4b a0	 movups	 XMMWORD PTR [ebx-96], xmm1
  00082	66 0f 6e 49 ec	 movd	 xmm1, DWORD PTR [ecx-20]
  00087	66 0f 60 c8	 punpcklbw xmm1, xmm0
  0008b	66 0f 61 c8	 punpcklwd xmm1, xmm0
  0008f	66 0f f2 ca	 pslld	 xmm1, xmm2
  00093	0f 11 4b b0	 movups	 XMMWORD PTR [ebx-80], xmm1
  00097	66 0f 6e 49 f0	 movd	 xmm1, DWORD PTR [ecx-16]
  0009c	66 0f 60 c8	 punpcklbw xmm1, xmm0
  000a0	66 0f 61 c8	 punpcklwd xmm1, xmm0
  000a4	66 0f f2 ca	 pslld	 xmm1, xmm2
  000a8	0f 11 4b c0	 movups	 XMMWORD PTR [ebx-64], xmm1
  000ac	66 0f 6e 49 f4	 movd	 xmm1, DWORD PTR [ecx-12]
  000b1	66 0f 60 c8	 punpcklbw xmm1, xmm0
  000b5	66 0f 61 c8	 punpcklwd xmm1, xmm0
  000b9	66 0f f2 ca	 pslld	 xmm1, xmm2
  000bd	0f 11 4b d0	 movups	 XMMWORD PTR [ebx-48], xmm1
  000c1	3b 45 18	 cmp	 eax, DWORD PTR tv673[ebp]
  000c4	7c 9b		 jl	 SHORT $LL7@PutImage32

; 875  :     {
; 876  : 		for (int x = 0; x < texturewidth; ++x)

  000c6	89 45 18	 mov	 DWORD PTR tv672[ebp], eax
  000c9	3b c2		 cmp	 eax, edx
  000cb	7d 12		 jge	 SHORT $LN6@PutImage32
  000cd	0f 1f 00	 npad	 3
$LL30@PutImage32:

; 877  : 		{
; 878  : 			DWORD packed_pixel = src[x] << 24;

  000d0	0f b6 0c 30	 movzx	 ecx, BYTE PTR [eax+esi]
  000d4	c1 e1 18	 shl	 ecx, 24			; 00000018H

; 879  : 			*((DWORD*)(dst+x*4)) = packed_pixel;

  000d7	89 0c 87	 mov	 DWORD PTR [edi+eax*4], ecx
  000da	40		 inc	 eax
  000db	3b c2		 cmp	 eax, edx
  000dd	7c f1		 jl	 SHORT $LL30@PutImage32
$LN6@PutImage32:

; 880  : 
; 881  : 		}
; 882  : 
; 883  : 		dst += dst_pitch;

  000df	03 7d 14	 add	 edi, DWORD PTR _dst_pitch$[ebp]

; 884  : 		src += src_pitch;

  000e2	03 75 10	 add	 esi, DWORD PTR _src_pitch$[ebp]
  000e5	83 6d 1c 01	 sub	 DWORD PTR _textureheight$[ebp], 1
  000e9	0f 85 31 ff ff
	ff		 jne	 $LL4@PutImage32
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
$LN3@PutImage32:

; 885  :     }
; 886  : }

  000f2	5d		 pop	 ebp
  000f3	c2 1c 00	 ret	 28			; 0000001cH
?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z ENDP		; CTerrain::PutImage32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?AddTexture32@CTerrain@@IAEPAUIDirect3DTexture8@@EPAEJJ@Z
_TEXT	SEGMENT
tv1176 = -81976						; size = 4
_d3dlr$1 = -81972					; size = 8
_uMipMapLevel$1$ = -81964				; size = 4
tv1166 = -81960						; size = 4
_d3dlr$2 = -81956					; size = 8
_uDstSize$1$ = -81952					; size = 4
_this$GSCopy$1$ = -81948				; size = 4
tv1169 = -81944						; size = 4
_y$1$ = -81944						; size = 4
tv1171 = -81940						; size = 4
_pbSrcBuffer$1$ = -81940				; size = 4
_uSrcSize$1$ = -81936					; size = 4
_pbDstPixel$1$ = -81936					; size = 4
tv1170 = -81932						; size = 4
_pbDstBuffer$1$ = -81932				; size = 4
_pkTex$ = -81928					; size = 4
_abResizeImage$ = -81924				; size = 65536
_abResizeImage2$ = -16388				; size = 16384
__$ArrayPad$ = -4					; size = 4
_byImageNum$ = 8					; size = 1
_pbyImage$ = 12						; size = 4
_lTextureWidth$ = 16					; size = 4
_lTextureHeight$ = 20					; size = 4
?AddTexture32@CTerrain@@IAEPAUIDirect3DTexture8@@EPAEJJ@Z PROC ; CTerrain::AddTexture32, COMDAT
; _this$ = ecx

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 38 40 01 00	 mov	 eax, 81976		; 00014038H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8a 45 08	 mov	 al, BYTE PTR _byImageNum$[ebp]
  0001a	53		 push	 ebx

; 761  : 	assert(NULL==m_lpAlphaTexture[byImageNum]);
; 762  : 
; 763  : 	if (m_lpAlphaTexture[byImageNum])

  0001b	0f b6 d8	 movzx	 ebx, al
  0001e	43		 inc	 ebx
  0001f	89 8d e4 bf fe
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00025	8b 14 99	 mov	 edx, DWORD PTR [ecx+ebx*4]
  00028	8d 1c 99	 lea	 ebx, DWORD PTR [ecx+ebx*4]
  0002b	89 9d c8 bf fe
	ff		 mov	 DWORD PTR tv1176[ebp], ebx
  00031	56		 push	 esi
  00032	85 d2		 test	 edx, edx
  00034	74 06		 je	 SHORT $LN17@AddTexture

; 764  : 		m_lpAlphaTexture[byImageNum]->Release();

  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	52		 push	 edx
  00039	ff 50 08	 call	 DWORD PTR [eax+8]
$LN17@AddTexture:

; 765  : 
; 766  : 	m_lpAlphaTexture[byImageNum]=NULL;

  0003c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 767  : 
; 768  : 	HRESULT hr;
; 769  : 	D3DFORMAT format;
; 770  : 
; 771  : 	if(ms_bSupportDXT)
; 772  : 		format = D3DFMT_A8R8G8B8;
; 773  : 	else
; 774  : 		format = D3DFMT_A4R4G4B4;
; 775  : 
; 776  : 
; 777  : 	bool bResizedAndSuccess = false;
; 778  : 
; 779  : 	IDirect3DTexture8* pkTex=NULL;
; 780  : 
; 781  : 	UINT uiNewWidth = 256;
; 782  : 	UINT uiNewHeight = 256;
; 783  : 	hr = ms_lpd3dDevice->CreateTexture(

  00042	8d b5 f8 bf fe
	ff		 lea	 esi, DWORD PTR _pkTex$[ebp]
  00048	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
  0004f	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
  00054	56		 push	 esi
  00055	6a 01		 push	 1
  00057	ba 1a 00 00 00	 mov	 edx, 26			; 0000001aH
  0005c	c7 85 f8 bf fe
	ff 00 00 00 00	 mov	 DWORD PTR _pkTex$[ebp], 0
  00066	0f 45 d0	 cmovne	 edx, eax
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0006e	52		 push	 edx
  0006f	6a 00		 push	 0
  00071	6a 05		 push	 5
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	68 00 01 00 00	 push	 256			; 00000100H
  0007a	68 00 01 00 00	 push	 256			; 00000100H
  0007f	50		 push	 eax
  00080	ff 51 50	 call	 DWORD PTR [ecx+80]

; 784  : 		uiNewWidth, uiNewHeight, 5, 0,
; 785  : 		format, D3DPOOL_MANAGED, &pkTex);
; 786  : 	if (FAILED(hr))

  00083	85 c0		 test	 eax, eax
  00085	79 21		 jns	 SHORT $LN20@AddTexture

; 787  : 	{
; 788  : 		TraceError("CTerrain::AddTexture32 - CreateTexture Error");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NONLPBAM@CTerrain?3?3AddTexture32?5?9?5Create@
  0008c	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00091	83 c4 04	 add	 esp, 4

; 789  : 		return NULL;

  00094	33 c0		 xor	 eax, eax
  00096	5e		 pop	 esi

; 868  : 
; 869  : 	return pkTex;
; 870  : }

  00097	5b		 pop	 ebx
  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 10 00	 ret	 16			; 00000010H
$LN20@AddTexture:
  000a8	57		 push	 edi

; 790  : 	}
; 791  : 
; 792  : 
; 793  : 	BYTE abResizeImage[256*256];
; 794  : 	{
; 795  : 		BYTE* pbDstPixel=abResizeImage;

  000a9	8b 7d 0c	 mov	 edi, DWORD PTR _pbyImage$[ebp]
  000ac	8d 85 fc bf fe
	ff		 lea	 eax, DWORD PTR _abResizeImage$[ebp]
  000b2	81 c7 05 02 00
	00		 add	 edi, 517		; 00000205H
  000b8	89 85 f0 bf fe
	ff		 mov	 DWORD PTR _pbDstPixel$1$[ebp], eax
  000be	89 bd f4 bf fe
	ff		 mov	 DWORD PTR tv1170[ebp], edi
  000c4	c7 85 e8 bf fe
	ff 00 01 00 00	 mov	 DWORD PTR tv1169[ebp], 256 ; 00000100H
  000ce	66 90		 npad	 2
$LL4@AddTexture:

; 799  : 		{
; 800  : 			for (UINT x=0; x<256; ++x)

  000d0	8a 3f		 mov	 bh, BYTE PTR [edi]
  000d2	8b f7		 mov	 esi, edi
  000d4	8b bd f0 bf fe
	ff		 mov	 edi, DWORD PTR _pbDstPixel$1$[ebp]
  000da	c7 85 ec bf fe
	ff 00 01 00 00	 mov	 DWORD PTR tv1171[ebp], 256 ; 00000100H
$LL7@AddTexture:

; 801  : 			{
; 802  : 				pbSrcPixel=abCurLine+x;
; 803  : 				*pbDstPixel++=

  000e4	0f b6 86 fc fd
	ff ff		 movzx	 eax, BYTE PTR [esi-516]
  000eb	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000ee	0f b6 8e fa fd
	ff ff		 movzx	 ecx, BYTE PTR [esi-518]
  000f5	8a 1e		 mov	 bl, BYTE PTR [esi]
  000f7	03 c8		 add	 ecx, eax
  000f9	0f b6 86 fc fd
	ff ff		 movzx	 eax, BYTE PTR [esi-516]
  00100	03 c8		 add	 ecx, eax
  00102	0f b6 86 fc fe
	ff ff		 movzx	 eax, BYTE PTR [esi-260]
  00109	03 c8		 add	 ecx, eax
  0010b	0f b6 86 fe fe
	ff ff		 movzx	 eax, BYTE PTR [esi-258]
  00112	03 c8		 add	 ecx, eax
  00114	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  00118	03 c8		 add	 ecx, eax
  0011a	0f b6 c3	 movzx	 eax, bl
  0011d	03 c8		 add	 ecx, eax
  0011f	0f b6 c7	 movzx	 eax, bh
  00122	03 c8		 add	 ecx, eax
  00124	8a fb		 mov	 bh, bl
  00126	0f b6 86 fd fe
	ff ff		 movzx	 eax, BYTE PTR [esi-259]
  0012d	c1 e9 03	 shr	 ecx, 3
  00130	03 c8		 add	 ecx, eax
  00132	d1 e9		 shr	 ecx, 1
  00134	88 0f		 mov	 BYTE PTR [edi], cl
  00136	47		 inc	 edi
  00137	83 ad ec bf fe
	ff 01		 sub	 DWORD PTR tv1171[ebp], 1
  0013e	75 a4		 jne	 SHORT $LL7@AddTexture

; 796  : 		BYTE* pbSrcPixel;
; 797  : 		BYTE* abCurLine=pbyImage;
; 798  : 		for (UINT y=0; y<256; ++y, abCurLine+=258)

  00140	89 bd f0 bf fe
	ff		 mov	 DWORD PTR _pbDstPixel$1$[ebp], edi
  00146	8b bd f4 bf fe
	ff		 mov	 edi, DWORD PTR tv1170[ebp]
  0014c	81 c7 02 01 00
	00		 add	 edi, 258		; 00000102H
  00152	83 ad e8 bf fe
	ff 01		 sub	 DWORD PTR tv1169[ebp], 1
  00159	89 bd f4 bf fe
	ff		 mov	 DWORD PTR tv1170[ebp], edi
  0015f	0f 85 6b ff ff
	ff		 jne	 $LL4@AddTexture

; 804  : 				(((	pbSrcPixel[0]+pbSrcPixel[1]+pbSrcPixel[2]+
; 805  : 					pbSrcPixel[258]+pbSrcPixel[260]+
; 806  : 					pbSrcPixel[258*2]+pbSrcPixel[258*2+1]+pbSrcPixel[258*2+2])
; 807  : 				>>3)+pbSrcPixel[259])>>1;
; 808  : 			}
; 809  : 		}
; 810  : 
; 811  : 		D3DLOCKED_RECT  d3dlr;
; 812  : 		hr = pkTex->LockRect(0, &d3dlr, 0, 0);

  00165	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  0016b	8d 95 dc bf fe
	ff		 lea	 edx, DWORD PTR _d3dlr$2[ebp]
  00171	6a 00		 push	 0
  00173	6a 00		 push	 0
  00175	52		 push	 edx
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	6a 00		 push	 0
  0017a	50		 push	 eax
  0017b	ff 51 40	 call	 DWORD PTR [ecx+64]

; 813  : 		if (FAILED(hr))

  0017e	85 c0		 test	 eax, eax
  00180	79 21		 jns	 SHORT $LN21@AddTexture

; 814  : 		{
; 815  : 			pkTex->Release();

  00182	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  00188	50		 push	 eax
  00189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018b	ff 51 08	 call	 DWORD PTR [ecx+8]
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi

; 816  : 			return NULL;

  00190	33 c0		 xor	 eax, eax

; 868  : 
; 869  : 	return pkTex;
; 870  : }

  00192	5b		 pop	 ebx
  00193	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00196	33 cd		 xor	 ecx, ebp
  00198	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 10 00	 ret	 16			; 00000010H
$LN21@AddTexture:

; 817  : 		}
; 818  : 
; 819  : 		if(ms_bSupportDXT)

  001a3	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
  001aa	8d 85 fc bf fe
	ff		 lea	 eax, DWORD PTR _abResizeImage$[ebp]
  001b0	8b 8d e4 bf fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001b6	6a 00		 push	 0
  001b8	68 00 01 00 00	 push	 256			; 00000100H
  001bd	68 00 01 00 00	 push	 256			; 00000100H
  001c2	ff b5 dc bf fe
	ff		 push	 DWORD PTR _d3dlr$2[ebp]
  001c8	68 00 01 00 00	 push	 256			; 00000100H
  001cd	ff b5 e0 bf fe
	ff		 push	 DWORD PTR _d3dlr$2[ebp+4]
  001d3	50		 push	 eax
  001d4	74 07		 je	 SHORT $LN22@AddTexture

; 820  : 			PutImage32(abResizeImage, (BYTE*) d3dlr.pBits, 256, d3dlr.Pitch, 256, 256, bResizedAndSuccess);

  001d6	e8 00 00 00 00	 call	 ?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z ; CTerrain::PutImage32
  001db	eb 05		 jmp	 SHORT $LN23@AddTexture
$LN22@AddTexture:

; 821  : 		else
; 822  : 			PutImage16(abResizeImage, (BYTE*) d3dlr.pBits, 256, d3dlr.Pitch, 256, 256, bResizedAndSuccess);

  001dd	e8 00 00 00 00	 call	 ?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z ; CTerrain::PutImage16
$LN23@AddTexture:

; 823  : 
; 824  : 		pkTex->UnlockRect(0);

  001e2	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  001e8	6a 00		 push	 0
  001ea	50		 push	 eax
  001eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ed	ff 51 44	 call	 DWORD PTR [ecx+68]

; 825  : 	}
; 826  : 
; 827  : 	BYTE abResizeImage2[128*128];
; 828  : 
; 829  : 	BYTE* pbSrcBuffer=abResizeImage;
; 830  : 	BYTE* pbDstBuffer=abResizeImage2;
; 831  : 
; 832  : 	UINT uSrcSize=256;

  001f0	b8 00 01 00 00	 mov	 eax, 256		; 00000100H

; 833  : 
; 834  : 	for (UINT uMipMapLevel=1; uMipMapLevel!=pkTex->GetLevelCount(); ++uMipMapLevel)

  001f5	c7 85 d4 bf fe
	ff 01 00 00 00	 mov	 DWORD PTR _uMipMapLevel$1$[ebp], 1
  001ff	89 85 f0 bf fe
	ff		 mov	 DWORD PTR _uSrcSize$1$[ebp], eax
  00205	8d 9d fc bf fe
	ff		 lea	 ebx, DWORD PTR _abResizeImage$[ebp]
  0020b	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  00211	8d bd fc bf ff
	ff		 lea	 edi, DWORD PTR _abResizeImage2$[ebp]
  00217	50		 push	 eax
  00218	89 9d ec bf fe
	ff		 mov	 DWORD PTR _pbSrcBuffer$1$[ebp], ebx
  0021e	89 bd f4 bf fe
	ff		 mov	 DWORD PTR _pbDstBuffer$1$[ebp], edi
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	ff 51 34	 call	 DWORD PTR [ecx+52]
  00229	83 f8 01	 cmp	 eax, 1
  0022c	0f 84 1e 01 00
	00		 je	 $LN9@AddTexture
$LL10@AddTexture:

; 835  : 	{
; 836  : 		UINT uDstSize=uSrcSize>>1;

  00232	8b 8d f0 bf fe
	ff		 mov	 ecx, DWORD PTR _uSrcSize$1$[ebp]
  00238	8b f1		 mov	 esi, ecx
  0023a	d1 ee		 shr	 esi, 1
  0023c	89 b5 e0 bf fe
	ff		 mov	 DWORD PTR _uDstSize$1$[ebp], esi
  00242	c7 85 e8 bf fe
	ff 00 00 00 00	 mov	 DWORD PTR _y$1$[ebp], 0

; 837  : 
; 838  : 		BYTE* pbDstPixel=pbDstBuffer;
; 839  : 		BYTE* pbSrcPixel;
; 840  : 		BYTE* abCurLine=pbSrcBuffer;
; 841  : 		for (UINT y=0; y!=uSrcSize; y+=2, abCurLine+=uSrcSize*2)

  0024c	85 c9		 test	 ecx, ecx
  0024e	74 63		 je	 SHORT $LN12@AddTexture
  00250	ba 01 00 00 00	 mov	 edx, 1
  00255	2b d1		 sub	 edx, ecx
  00257	89 95 d8 bf fe
	ff		 mov	 DWORD PTR tv1166[ebp], edx
  0025d	0f 1f 00	 npad	 3
$LL13@AddTexture:

; 842  : 		{
; 843  : 			for (UINT x=0; x!=uSrcSize; x+=2)

  00260	33 f6		 xor	 esi, esi
  00262	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
$LL16@AddTexture:

; 844  : 			{
; 845  : 				pbSrcPixel=abCurLine+x;
; 846  : 				*pbDstPixel++=(pbSrcPixel[0]+pbSrcPixel[1]+pbSrcPixel[uSrcSize+0]+pbSrcPixel[uSrcSize+1])>>2;

  00265	0f b6 14 02	 movzx	 edx, BYTE PTR [edx+eax]
  00269	8d 40 02	 lea	 eax, DWORD PTR [eax+2]
  0026c	0f b6 0c 1e	 movzx	 ecx, BYTE PTR [esi+ebx]
  00270	83 c6 02	 add	 esi, 2
  00273	03 d1		 add	 edx, ecx
  00275	0f b6 48 ff	 movzx	 ecx, BYTE PTR [eax-1]
  00279	03 d1		 add	 edx, ecx
  0027b	0f b6 48 fe	 movzx	 ecx, BYTE PTR [eax-2]
  0027f	03 d1		 add	 edx, ecx
  00281	8b 8d f0 bf fe
	ff		 mov	 ecx, DWORD PTR _uSrcSize$1$[ebp]
  00287	c1 ea 02	 shr	 edx, 2
  0028a	88 17		 mov	 BYTE PTR [edi], dl
  0028c	47		 inc	 edi
  0028d	8b 95 d8 bf fe
	ff		 mov	 edx, DWORD PTR tv1166[ebp]
  00293	3b f1		 cmp	 esi, ecx
  00295	75 ce		 jne	 SHORT $LL16@AddTexture

; 837  : 
; 838  : 		BYTE* pbDstPixel=pbDstBuffer;
; 839  : 		BYTE* pbSrcPixel;
; 840  : 		BYTE* abCurLine=pbSrcBuffer;
; 841  : 		for (UINT y=0; y!=uSrcSize; y+=2, abCurLine+=uSrcSize*2)

  00297	8b 85 e8 bf fe
	ff		 mov	 eax, DWORD PTR _y$1$[ebp]
  0029d	8d 1c 4b	 lea	 ebx, DWORD PTR [ebx+ecx*2]
  002a0	83 c0 02	 add	 eax, 2
  002a3	89 85 e8 bf fe
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  002a9	3b c1		 cmp	 eax, ecx
  002ab	75 b3		 jne	 SHORT $LL13@AddTexture
  002ad	8b b5 e0 bf fe
	ff		 mov	 esi, DWORD PTR _uDstSize$1$[ebp]
$LN12@AddTexture:

; 847  : 			}
; 848  : 		}
; 849  : 
; 850  : 		D3DLOCKED_RECT  d3dlr;
; 851  : 
; 852  : 		hr = pkTex->LockRect(uMipMapLevel, &d3dlr, 0, 0);

  002b3	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  002b9	8d 95 cc bf fe
	ff		 lea	 edx, DWORD PTR _d3dlr$1[ebp]
  002bf	8b 9d d4 bf fe
	ff		 mov	 ebx, DWORD PTR _uMipMapLevel$1$[ebp]
  002c5	6a 00		 push	 0
  002c7	6a 00		 push	 0
  002c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cb	52		 push	 edx
  002cc	53		 push	 ebx
  002cd	50		 push	 eax
  002ce	ff 51 40	 call	 DWORD PTR [ecx+64]

; 853  : 		if (FAILED(hr))

  002d1	8b bd f4 bf fe
	ff		 mov	 edi, DWORD PTR _pbDstBuffer$1$[ebp]
  002d7	85 c0		 test	 eax, eax
  002d9	78 54		 js	 SHORT $LN8@AddTexture

; 854  : 			continue;
; 855  : 
; 856  : 		if(ms_bSupportDXT)

  002db	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
  002e2	8b 8d e4 bf fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002e8	6a 00		 push	 0
  002ea	56		 push	 esi
  002eb	56		 push	 esi
  002ec	ff b5 cc bf fe
	ff		 push	 DWORD PTR _d3dlr$1[ebp]
  002f2	56		 push	 esi
  002f3	ff b5 d0 bf fe
	ff		 push	 DWORD PTR _d3dlr$1[ebp+4]
  002f9	57		 push	 edi
  002fa	74 07		 je	 SHORT $LN25@AddTexture

; 857  : 			PutImage32(pbDstBuffer, (BYTE*) d3dlr.pBits, uDstSize, d3dlr.Pitch, uDstSize, uDstSize, bResizedAndSuccess);

  002fc	e8 00 00 00 00	 call	 ?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z ; CTerrain::PutImage32
  00301	eb 05		 jmp	 SHORT $LN26@AddTexture
$LN25@AddTexture:

; 858  : 		else
; 859  : 			PutImage16(pbDstBuffer, (BYTE*) d3dlr.pBits, uDstSize, d3dlr.Pitch, uDstSize, uDstSize, bResizedAndSuccess);

  00303	e8 00 00 00 00	 call	 ?PutImage16@CTerrain@@IAEXPAE0JJJJ_N@Z ; CTerrain::PutImage16
$LN26@AddTexture:

; 860  : 
; 861  : 		hr = pkTex->UnlockRect(uMipMapLevel);

  00308	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  0030e	53		 push	 ebx
  0030f	50		 push	 eax
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	ff 51 44	 call	 DWORD PTR [ecx+68]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00315	8b 85 ec bf fe
	ff		 mov	 eax, DWORD PTR _pbSrcBuffer$1$[ebp]

; 107  :     _Left    = _STD move(_Right);

  0031b	89 bd ec bf fe
	ff		 mov	 DWORD PTR _pbSrcBuffer$1$[ebp], edi

; 108  :     _Right   = _STD move(_Tmp);

  00321	8b f8		 mov	 edi, eax
  00323	89 bd f4 bf fe
	ff		 mov	 DWORD PTR _pbDstBuffer$1$[ebp], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 864  : 		uSrcSize=uDstSize;

  00329	89 b5 f0 bf fe
	ff		 mov	 DWORD PTR _uSrcSize$1$[ebp], esi
$LN8@AddTexture:

; 833  : 
; 834  : 	for (UINT uMipMapLevel=1; uMipMapLevel!=pkTex->GetLevelCount(); ++uMipMapLevel)

  0032f	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  00335	43		 inc	 ebx
  00336	50		 push	 eax
  00337	89 9d d4 bf fe
	ff		 mov	 DWORD PTR _uMipMapLevel$1$[ebp], ebx
  0033d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033f	ff 51 34	 call	 DWORD PTR [ecx+52]
  00342	3b d8		 cmp	 ebx, eax
  00344	8b 9d ec bf fe
	ff		 mov	 ebx, DWORD PTR _pbSrcBuffer$1$[ebp]
  0034a	0f 85 e2 fe ff
	ff		 jne	 $LL10@AddTexture
$LN9@AddTexture:

; 865  : 	}
; 866  : 
; 867  : 	m_lpAlphaTexture[byImageNum]=pkTex;

  00350	8b 8d c8 bf fe
	ff		 mov	 ecx, DWORD PTR tv1176[ebp]
  00356	8b 85 f8 bf fe
	ff		 mov	 eax, DWORD PTR _pkTex$[ebp]
  0035c	5f		 pop	 edi
  0035d	5e		 pop	 esi
  0035e	89 01		 mov	 DWORD PTR [ecx], eax

; 868  : 
; 869  : 	return pkTex;
; 870  : }

  00360	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00363	33 cd		 xor	 ecx, ebp
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c2 10 00	 ret	 16			; 00000010H
?AddTexture32@CTerrain@@IAEPAUIDirect3DTexture8@@EPAEJJ@Z ENDP ; CTerrain::AddTexture32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?RAW_CountTiles@CTerrain@@MAEXXZ
_TEXT	SEGMENT
tv1612 = -24						; size = 4
tv1637 = -20						; size = 4
tv1618 = -16						; size = 4
_this$1$ = -12						; size = 4
_lPatchIndexY$1$ = -8					; size = 4
_y$1$ = -4						; size = 4
?RAW_CountTiles@CTerrain@@MAEXXZ PROC			; CTerrain::RAW_CountTiles, COMDAT
; _this$ = ecx

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 583  : 	for (long y = 0; y < TILEMAP_RAW_YSIZE; ++y)

  0000b	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR tv1612[ebp], 7
  00012	33 db		 xor	 ebx, ebx
  00014	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  00017	89 5d fc	 mov	 DWORD PTR _y$1$[ebp], ebx
  0001a	8d b7 16 8a 00
	00		 lea	 esi, DWORD PTR [edi+35350]
$LL4@RAW_CountT:

; 584  : 	{
; 585  : 		long lPatchIndexY = min(max((y-1)/PATCH_TILE_YSIZE,0), PATCH_YCOUNT - 1);

  00020	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]

; 586  : 		for (long x = 0; x < TILEMAP_RAW_XSIZE; ++x)

  00023	89 75 f0	 mov	 DWORD PTR tv1618[ebp], esi
  00026	99		 cdq
  00027	33 c9		 xor	 ecx, ecx
  00029	83 e2 1f	 and	 edx, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx
  0002e	ba 07 00 00 00	 mov	 edx, 7
  00033	c1 f8 05	 sar	 eax, 5
  00036	85 c0		 test	 eax, eax
  00038	0f 4e c1	 cmovle	 eax, ecx
  0003b	3b c2		 cmp	 eax, edx
  0003d	0f 4c d0	 cmovl	 edx, eax
  00040	8b c3		 mov	 eax, ebx
  00042	83 e0 1f	 and	 eax, 31			; 0000001fH
  00045	89 55 f8	 mov	 DWORD PTR _lPatchIndexY$1$[ebp], edx
  00048	89 45 ec	 mov	 DWORD PTR tv1637[ebp], eax
  0004b	0f 1f 44 00 00	 npad	 5
$LL7@RAW_CountT:

; 587  : 		{
; 588  : 			long lPatchIndexX = min(max((x-1)/(PATCH_TILE_XSIZE), 0), PATCH_XCOUNT - 1);
; 589  : 			BYTE tilenum = m_abyTileMap[y * TILEMAP_RAW_XSIZE + x];
; 590  : 
; 591  : 			++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + lPatchIndexX][tilenum];

  00050	8b 5d f8	 mov	 ebx, DWORD PTR _lPatchIndexY$1$[ebp]
  00053	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00056	0f b6 36	 movzx	 esi, BYTE PTR [esi]
  00059	99		 cdq
  0005a	83 e2 1f	 and	 edx, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx
  0005f	33 d2		 xor	 edx, edx
  00061	c1 f8 05	 sar	 eax, 5
  00064	85 c0		 test	 eax, eax
  00066	0f 4e c2	 cmovle	 eax, edx
  00069	ba 07 00 00 00	 mov	 edx, 7
  0006e	3b c2		 cmp	 eax, edx
  00070	0f 4c d0	 cmovl	 edx, eax
  00073	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]

; 592  : 
; 593  : 			if ( 0 == y % PATCH_TILE_YSIZE && 0 != y && (TILEMAP_RAW_YSIZE - 2) != y)

  0007a	8b 5d fc	 mov	 ebx, DWORD PTR _y$1$[ebp]
  0007d	03 c2		 add	 eax, edx
  0007f	c1 e0 08	 shl	 eax, 8
  00082	03 c6		 add	 eax, esi
  00084	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]
  0008b	8b 45 ec	 mov	 eax, DWORD PTR tv1637[ebp]
  0008e	85 c0		 test	 eax, eax
  00090	0f 85 f3 00 00
	00		 jne	 $LN8@RAW_CountT
  00096	85 db		 test	 ebx, ebx
  00098	0f 84 d2 01 00
	00		 je	 $LN13@RAW_CountT
  0009e	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  000a4	0f 84 c6 01 00
	00		 je	 $LN13@RAW_CountT

; 594  : 			{
; 595  : 				++m_TerrainSplatPatch.PatchTileCount[min(PATCH_YCOUNT - 1, lPatchIndexY + 1) * PATCH_XCOUNT + lPatchIndexX][tilenum];

  000aa	8b 5d f8	 mov	 ebx, DWORD PTR _lPatchIndexY$1$[ebp]
  000ad	43		 inc	 ebx
  000ae	83 fb 07	 cmp	 ebx, 7
  000b1	8b c3		 mov	 eax, ebx
  000b3	0f 4f 45 e8	 cmovg	 eax, DWORD PTR tv1612[ebp]
  000b7	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  000ba	c1 e0 08	 shl	 eax, 8
  000bd	03 c6		 add	 eax, esi
  000bf	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 596  : 				if ( 0 == x % PATCH_TILE_XSIZE && 0 != x && (TILEMAP_RAW_XSIZE - 2) != x)

  000c6	8b c1		 mov	 eax, ecx
  000c8	83 e0 1f	 and	 eax, 31			; 0000001fH
  000cb	75 5b		 jne	 SHORT $LN10@RAW_CountT
  000cd	85 c9		 test	 ecx, ecx
  000cf	0f 84 03 02 00
	00		 je	 $LN83@RAW_CountT
  000d5	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  000db	0f 84 f7 01 00
	00		 je	 $LN83@RAW_CountT

; 597  : 				{
; 598  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + min(PATCH_XCOUNT - 1, lPatchIndexX + 1)][tilenum];

  000e1	42		 inc	 edx
  000e2	bf 07 00 00 00	 mov	 edi, 7
  000e7	83 fa 07	 cmp	 edx, 7
  000ea	8b c2		 mov	 eax, edx
  000ec	0f 4f c7	 cmovg	 eax, edi
  000ef	8b 7d f8	 mov	 edi, DWORD PTR _lPatchIndexY$1$[ebp]
  000f2	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  000f5	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  000f8	c1 e0 08	 shl	 eax, 8
  000fb	03 c6		 add	 eax, esi
  000fd	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 599  : 					++m_TerrainSplatPatch.PatchTileCount[min(PATCH_YCOUNT - 1, lPatchIndexY + 1) * PATCH_XCOUNT + min(PATCH_XCOUNT - 1, lPatchIndexX + 1)][tilenum];

  00104	83 fb 07	 cmp	 ebx, 7
  00107	b8 07 00 00 00	 mov	 eax, 7
  0010c	0f 4f d8	 cmovg	 ebx, eax
  0010f	3b d0		 cmp	 edx, eax
  00111	0f 4f d0	 cmovg	 edx, eax
  00114	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  00117	c1 e0 08	 shl	 eax, 8
  0011a	03 c6		 add	 eax, esi
  0011c	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 600  : 				}

  00123	e9 b0 01 00 00	 jmp	 $LN83@RAW_CountT
$LN10@RAW_CountT:

; 601  : 				else if ( 1 == x % PATCH_TILE_XSIZE && (TILEMAP_RAW_XSIZE -1) != x && 1 != x)

  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 85 a7 01 00
	00		 jne	 $LN83@RAW_CountT
  00131	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  00137	0f 84 9b 01 00
	00		 je	 $LN83@RAW_CountT
  0013d	3b c8		 cmp	 ecx, eax
  0013f	0f 84 93 01 00
	00		 je	 $LN83@RAW_CountT

; 602  : 				{
; 603  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + max(0, lPatchIndexX - 1)][tilenum];

  00145	8b 7d f8	 mov	 edi, DWORD PTR _lPatchIndexY$1$[ebp]
  00148	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0014b	33 d2		 xor	 edx, edx
  0014d	85 c0		 test	 eax, eax
  0014f	0f 49 d0	 cmovns	 edx, eax
  00152	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00159	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  0015c	03 c2		 add	 eax, edx
  0015e	c1 e0 08	 shl	 eax, 8
  00161	03 c6		 add	 eax, esi
  00163	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 604  : 					++m_TerrainSplatPatch.PatchTileCount[min(PATCH_YCOUNT - 1, lPatchIndexY + 1) * PATCH_XCOUNT + max(0, lPatchIndexX - 1)][tilenum];

  0016a	83 fb 07	 cmp	 ebx, 7
  0016d	b8 07 00 00 00	 mov	 eax, 7
  00172	0f 4f d8	 cmovg	 ebx, eax
  00175	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  00178	c1 e0 08	 shl	 eax, 8
  0017b	03 c6		 add	 eax, esi
  0017d	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 605  : 				}
; 606  : 			}

  00184	e9 4f 01 00 00	 jmp	 $LN83@RAW_CountT
$LN8@RAW_CountT:

; 607  : 			else if ( 1 == y % PATCH_TILE_YSIZE && (TILEMAP_RAW_YSIZE -1) != y && 1 != y)

  00189	83 f8 01	 cmp	 eax, 1
  0018c	0f 85 de 00 00
	00		 jne	 $LN13@RAW_CountT
  00192	81 fb 01 01 00
	00		 cmp	 ebx, 257		; 00000101H
  00198	0f 84 d2 00 00
	00		 je	 $LN13@RAW_CountT
  0019e	3b d8		 cmp	 ebx, eax
  001a0	0f 84 ca 00 00
	00		 je	 $LN13@RAW_CountT

; 608  : 			{
; 609  : 				++m_TerrainSplatPatch.PatchTileCount[max(0, lPatchIndexY - 1) * PATCH_XCOUNT + lPatchIndexX][tilenum];

  001a6	8b 45 f8	 mov	 eax, DWORD PTR _lPatchIndexY$1$[ebp]
  001a9	33 db		 xor	 ebx, ebx
  001ab	83 c0 ff	 add	 eax, -1
  001ae	0f 49 d8	 cmovns	 ebx, eax
  001b1	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  001b4	c1 e0 08	 shl	 eax, 8
  001b7	03 c6		 add	 eax, esi
  001b9	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 610  : 				if ( 0 == x % PATCH_TILE_XSIZE && 0 != x && (TILEMAP_RAW_XSIZE - 2) != x)

  001c0	8b c1		 mov	 eax, ecx
  001c2	83 e0 1f	 and	 eax, 31			; 0000001fH
  001c5	75 56		 jne	 SHORT $LN15@RAW_CountT
  001c7	85 c9		 test	 ecx, ecx
  001c9	0f 84 09 01 00
	00		 je	 $LN83@RAW_CountT
  001cf	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  001d5	0f 84 fd 00 00
	00		 je	 $LN83@RAW_CountT

; 611  : 				{
; 612  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + min(PATCH_XCOUNT - 1, lPatchIndexX + 1)][tilenum];

  001db	42		 inc	 edx
  001dc	bf 07 00 00 00	 mov	 edi, 7
  001e1	83 fa 07	 cmp	 edx, 7
  001e4	8b c2		 mov	 eax, edx
  001e6	0f 4f c7	 cmovg	 eax, edi
  001e9	8b 7d f8	 mov	 edi, DWORD PTR _lPatchIndexY$1$[ebp]
  001ec	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  001ef	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  001f2	c1 e0 08	 shl	 eax, 8
  001f5	03 c6		 add	 eax, esi
  001f7	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 613  : 					++m_TerrainSplatPatch.PatchTileCount[max(0, lPatchIndexY - 1) * PATCH_XCOUNT + min(PATCH_XCOUNT - 1, lPatchIndexX + 1)][tilenum];

  001fe	83 fa 07	 cmp	 edx, 7
  00201	b8 07 00 00 00	 mov	 eax, 7
  00206	0f 4f d0	 cmovg	 edx, eax
  00209	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  0020c	c1 e0 08	 shl	 eax, 8
  0020f	03 c6		 add	 eax, esi
  00211	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 614  : 				}

  00218	e9 bb 00 00 00	 jmp	 $LN83@RAW_CountT
$LN15@RAW_CountT:

; 615  : 				else if ( 1 == x % PATCH_TILE_XSIZE && (TILEMAP_RAW_XSIZE -1) != x && 1 != x)

  0021d	83 f8 01	 cmp	 eax, 1
  00220	0f 85 b2 00 00
	00		 jne	 $LN83@RAW_CountT
  00226	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  0022c	0f 84 a6 00 00
	00		 je	 $LN83@RAW_CountT
  00232	3b c8		 cmp	 ecx, eax
  00234	0f 84 9e 00 00
	00		 je	 $LN83@RAW_CountT

; 616  : 				{
; 617  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + max(0, lPatchIndexX - 1)][tilenum];

  0023a	8b 7d f8	 mov	 edi, DWORD PTR _lPatchIndexY$1$[ebp]
  0023d	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00240	33 d2		 xor	 edx, edx
  00242	85 c0		 test	 eax, eax
  00244	0f 49 d0	 cmovns	 edx, eax
  00247	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  0024e	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  00251	03 c2		 add	 eax, edx
  00253	c1 e0 08	 shl	 eax, 8
  00256	03 c6		 add	 eax, esi
  00258	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 618  : 					++m_TerrainSplatPatch.PatchTileCount[max(0, lPatchIndexY - 1) * PATCH_XCOUNT + max(0, lPatchIndexX - 1)][tilenum];

  0025f	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  00262	c1 e0 08	 shl	 eax, 8
  00265	03 c6		 add	 eax, esi
  00267	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]

; 619  : 				}
; 620  : 			}

  0026e	eb 68		 jmp	 SHORT $LN83@RAW_CountT
$LN13@RAW_CountT:

; 621  : 			else
; 622  : 			{
; 623  : 				if ( 0 == x % PATCH_TILE_XSIZE && 0 != x && (TILEMAP_RAW_XSIZE - 2) != x)

  00270	8b c1		 mov	 eax, ecx
  00272	83 e0 1f	 and	 eax, 31			; 0000001fH
  00275	75 2e		 jne	 SHORT $LN18@RAW_CountT
  00277	85 c9		 test	 ecx, ecx
  00279	74 60		 je	 SHORT $LN20@RAW_CountT
  0027b	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00281	74 58		 je	 SHORT $LN20@RAW_CountT

; 624  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + min(PATCH_XCOUNT - 1, lPatchIndexX + 1)][tilenum];

  00283	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00286	ba 07 00 00 00	 mov	 edx, 7
  0028b	83 f8 07	 cmp	 eax, 7
  0028e	0f 4f c2	 cmovg	 eax, edx
  00291	8b 55 f8	 mov	 edx, DWORD PTR _lPatchIndexY$1$[ebp]
  00294	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  00297	c1 e0 08	 shl	 eax, 8
  0029a	03 c6		 add	 eax, esi
  0029c	ff 84 87 3c 95
	03 00		 inc	 DWORD PTR [edi+eax*4+234812]
  002a3	eb 36		 jmp	 SHORT $LN20@RAW_CountT
$LN18@RAW_CountT:

; 625  : 				else if ( 1 == x % PATCH_TILE_XSIZE && (TILEMAP_RAW_XSIZE -1) != x && 1 != x)

  002a5	83 f8 01	 cmp	 eax, 1
  002a8	75 31		 jne	 SHORT $LN20@RAW_CountT
  002aa	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  002b0	74 29		 je	 SHORT $LN20@RAW_CountT
  002b2	3b c8		 cmp	 ecx, eax
  002b4	74 25		 je	 SHORT $LN20@RAW_CountT

; 626  : 					++m_TerrainSplatPatch.PatchTileCount[lPatchIndexY * PATCH_XCOUNT + max(0, lPatchIndexX - 1)][tilenum];

  002b6	8b 5d f8	 mov	 ebx, DWORD PTR _lPatchIndexY$1$[ebp]
  002b9	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  002bc	33 d2		 xor	 edx, edx
  002be	85 c0		 test	 eax, eax
  002c0	0f 49 d0	 cmovns	 edx, eax
  002c3	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  002ca	03 d0		 add	 edx, eax
  002cc	c1 e2 08	 shl	 edx, 8
  002cf	03 d6		 add	 edx, esi
  002d1	ff 84 97 3c 95
	03 00		 inc	 DWORD PTR [edi+edx*4+234812]
$LN83@RAW_CountT:

; 627  : 			}
; 628  : 
; 629  : 			++m_TerrainSplatPatch.TileCount[tilenum];

  002d8	8b 5d fc	 mov	 ebx, DWORD PTR _y$1$[ebp]
$LN20@RAW_CountT:
  002db	ff 84 b7 3c 91
	03 00		 inc	 DWORD PTR [edi+esi*4+233788]
  002e2	41		 inc	 ecx
  002e3	8b 75 f0	 mov	 esi, DWORD PTR tv1618[ebp]
  002e6	46		 inc	 esi
  002e7	89 75 f0	 mov	 DWORD PTR tv1618[ebp], esi
  002ea	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  002f0	0f 8c 5a fd ff
	ff		 jl	 $LL7@RAW_CountT

; 583  : 	for (long y = 0; y < TILEMAP_RAW_YSIZE; ++y)

  002f6	43		 inc	 ebx
  002f7	89 5d fc	 mov	 DWORD PTR _y$1$[ebp], ebx
  002fa	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  00300	0f 8c 1a fd ff
	ff		 jl	 $LL4@RAW_CountT

; 630  : 		}
; 631  : 	}
; 632  : }

  00306	5f		 pop	 edi
  00307	5e		 pop	 esi
  00308	5b		 pop	 ebx
  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c3		 ret	 0
?RAW_CountTiles@CTerrain@@MAEXXZ ENDP			; CTerrain::RAW_CountTiles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_bBGLoading$ = 8					; size = 1
?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z PROC		; CTerrain::RAW_DeallocateSplats, COMDAT
; _this$ = ecx

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 543  : 	for (DWORD i = 1; i < GetTextureSet()->GetTextureCount(); ++i)

  00008	bb 01 00 00 00	 mov	 ebx, 1
  0000d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	e8 00 00 00 00	 call	 ?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ ; CTerrainImpl::GetTextureSet
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  0001c	3b c3		 cmp	 eax, ebx
  0001e	76 49		 jbe	 SHORT $LN3@RAW_Deallo
  00020	56		 push	 esi
  00021	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00024	81 c7 48 95 04
	00		 add	 edi, 300360		; 00049548H
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@RAW_Deallo:

; 544  : 	{
; 545  : 		TTerainSplat & rSplat = m_TerrainSplatPatch.Splats[i];
; 546  : 
; 547  : 		if (m_lpAlphaTexture[i])

  00030	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00033	74 0c		 je	 SHORT $LN6@RAW_Deallo
$LL7@RAW_Deallo:

; 548  : 		{
; 549  : 			ULONG ulRef;
; 550  : 			do
; 551  : 			{
; 552  : 				ulRef = m_lpAlphaTexture[i]->Release();

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	50		 push	 eax
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	ff 51 08	 call	 DWORD PTR [ecx+8]

; 553  : 			} while(ulRef > 0);

  0003d	85 c0		 test	 eax, eax
  0003f	75 f4		 jne	 SHORT $LL7@RAW_Deallo
$LN6@RAW_Deallo:

; 554  : 		}
; 555  : 
; 556  : 		rSplat.pd3dTexture = m_lpAlphaTexture[i] = NULL;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00047	43		 inc	 ebx
  00048	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004f	83 c6 04	 add	 esi, 4
  00052	83 c7 0c	 add	 edi, 12			; 0000000cH
  00055	e8 00 00 00 00	 call	 ?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ ; CTerrainImpl::GetTextureSet
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00061	3b d8		 cmp	 ebx, eax
  00063	72 cb		 jb	 SHORT $LL4@RAW_Deallo
  00065	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00068	5e		 pop	 esi
$LN3@RAW_Deallo:

; 557  :  	}
; 558  : 
; 559  : 	memset(&m_TerrainSplatPatch, 0, sizeof(m_TerrainSplatPatch));

  00069	68 04 10 01 00	 push	 69636			; 00011004H
  0006e	8d 87 3c 91 03
	00		 lea	 eax, DWORD PTR [edi+233788]
  00074	6a 00		 push	 0
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memset
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	5f		 pop	 edi
  00080	5b		 pop	 ebx

; 560  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z ENDP		; CTerrain::RAW_DeallocateSplats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?RAW_AllocateSplats@CTerrain@@IAEX_N@Z
_TEXT	SEGMENT
_bBGLoading$ = 8					; size = 1
?RAW_AllocateSplats@CTerrain@@IAEX_N@Z PROC		; CTerrain::RAW_AllocateSplats, COMDAT
; _this$ = ecx

; 563  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 564  : 	RAW_DeallocateSplats(bBGLoading);

  00004	ff 75 08	 push	 DWORD PTR _bBGLoading$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z ; CTerrain::RAW_DeallocateSplats

; 565  : 	DWORD dwTexCount = GetTextureSet()->GetTextureCount();

  0000e	e8 00 00 00 00	 call	 ?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ ; CTerrainImpl::GetTextureSet
  00013	8b c8		 mov	 ecx, eax
  00015	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount

; 566  : 
; 567  : 	m_TerrainSplatPatch.m_bNeedsUpdate = true;

  0001a	c6 86 3c a1 04
	00 01		 mov	 BYTE PTR [esi+303420], 1

; 568  : 
; 569  : 	for (DWORD t = 0; t < dwTexCount; ++t)

  00021	85 c0		 test	 eax, eax
  00023	74 19		 je	 SHORT $LN3@RAW_Alloca

; 564  : 	RAW_DeallocateSplats(bBGLoading);

  00025	8d 8e 40 95 04
	00		 lea	 ecx, DWORD PTR [esi+300352]
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@RAW_Alloca:

; 570  : 		m_TerrainSplatPatch.Splats[t].NeedsUpdate = 1;

  00030	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00036	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
  00039	83 e8 01	 sub	 eax, 1
  0003c	75 f2		 jne	 SHORT $LL4@RAW_Alloca
$LN3@RAW_Alloca:

; 571  : 
; 572  : 	RAW_CountTiles();

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b ce		 mov	 ecx, esi
  00042	ff 50 08	 call	 DWORD PTR [eax+8]

; 573  : 
; 574  : // 	if ( WAIT_OBJECT_0 == LockDataWrite() )
; 575  : 		RAW_GenerateSplat(bBGLoading);

  00045	ff 75 08	 push	 DWORD PTR _bBGLoading$[ebp]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?RAW_GenerateSplat@CTerrain@@QAEX_N@Z ; CTerrain::RAW_GenerateSplat

; 576  : // 	UnlockDataWrite();
; 577  : 
; 578  : 	m_TerrainSplatPatch.m_bNeedsUpdate = false;

  0004f	c6 86 3c a1 04
	00 00		 mov	 BYTE PTR [esi+303420], 0
  00056	5e		 pop	 esi

; 579  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?RAW_AllocateSplats@CTerrain@@IAEX_N@Z ENDP		; CTerrain::RAW_AllocateSplats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?Initialize@CTerrain@@IAE_NXZ
_TEXT	SEGMENT
?Initialize@CTerrain@@IAE_NXZ PROC			; CTerrain::Initialize, COMDAT
; _this$ = ecx

; 56   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00005	6a 00		 push	 0
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 58   : 	m_strName = "";

  0000c	8d 8e 54 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435540]
  00012	c6 86 70 a5 06
	00 00		 mov	 BYTE PTR [esi+435568], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 59   : 	m_wX = m_wY = 0xFFFF;

  0001e	c7 86 6c a5 06
	00 ff ff ff ff	 mov	 DWORD PTR [esi+435564], -1
  00028	bb 08 00 00 00	 mov	 ebx, 8

; 60   : 	m_bReady = false;

  0002d	c6 86 70 a5 06
	00 00		 mov	 BYTE PTR [esi+435568], 0

; 61   : 	m_bMarked = false;

  00034	c7 86 d8 c1 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+442840], 0
  0003e	81 c6 d8 a5 06
	00		 add	 esi, 435672		; 0006a5d8H
$LL4@Initialize:

; 64   : 		for (BYTE byX = 0; byX < PATCH_XCOUNT; ++byX)

  00044	bf 08 00 00 00	 mov	 edi, 8
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Initialize:

; 65   : 			m_TerrainPatchList[byY * PATCH_XCOUNT + byX].Clear();

  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?Clear@CTerrainPatch@@QAEXXZ ; CTerrainPatch::Clear
  00057	83 c6 70	 add	 esi, 112		; 00000070H
  0005a	83 ef 01	 sub	 edi, 1
  0005d	75 f1		 jne	 SHORT $LL7@Initialize

; 62   : 
; 63   : 	for (BYTE byY = 0; byY < PATCH_YCOUNT; ++byY)

  0005f	83 eb 01	 sub	 ebx, 1
  00062	75 e0		 jne	 SHORT $LL4@Initialize

; 66   : 
; 67   : 	return true;

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	b0 01		 mov	 al, 1
  00068	5b		 pop	 ebx

; 68   : }

  00069	c3		 ret	 0
?Initialize@CTerrain@@IAE_NXZ ENDP			; CTerrain::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?RAW_GenerateSplat@CTerrain@@QAEX_N@Z
_TEXT	SEGMENT
tv1283 = -66592						; size = 4
tv1282 = -66588						; size = 4
_aptr$1$ = -66584					; size = 4
_this$GSCopy$1$ = -66580				; size = 4
_byTileR$1$ = -66573					; size = 1
_byTileB$1$ = -66572					; size = 1
_byTileBR$1$ = -66571					; size = 1
_byTileBL$1$ = -66570					; size = 1
_byTileTR$1$ = -66569					; size = 1
_abyAlphaMap$ = -66568					; size = 66564
__$ArrayPad$ = -4					; size = 4
_bBGLoading$ = 8					; size = 1
?RAW_GenerateSplat@CTerrain@@QAEX_N@Z PROC		; CTerrain::RAW_GenerateSplat, COMDAT
; _this$ = ecx

; 635  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 20 04 01 00	 mov	 eax, 66592		; 00010420H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 636  : 	if (!m_TerrainSplatPatch.m_bNeedsUpdate)

  00017	80 b9 3c a1 04
	00 00		 cmp	 BYTE PTR [ecx+303420], 0
  0001e	89 8d ec fb fe
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00024	0f 84 bc 02 00
	00		 je	 $LN3@RAW_Genera

; 637  : 		return;
; 638  : 
; 639  : 	m_TerrainSplatPatch.m_bNeedsUpdate = false;

  0002a	56		 push	 esi
  0002b	c6 81 3c a1 04
	00 00		 mov	 BYTE PTR [ecx+303420], 0

; 640  : 
; 641  : 	BYTE abyAlphaMap[SPLATALPHA_RAW_XSIZE * SPLATALPHA_RAW_YSIZE];
; 642  : 	BYTE * aptr;
; 643  : 
; 644  : 	for (DWORD i = 1; i < GetTextureSet()->GetTextureCount(); ++i)

  00032	be 01 00 00 00	 mov	 esi, 1
  00037	e8 00 00 00 00	 call	 ?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ ; CTerrainImpl::GetTextureSet
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00043	3b c6		 cmp	 eax, esi
  00045	0f 86 9a 02 00
	00		 jbe	 $LN75@RAW_Genera

; 637  : 		return;
; 638  : 
; 639  : 	m_TerrainSplatPatch.m_bNeedsUpdate = false;

  0004b	8b 8d ec fb fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
  00056	8d b9 48 95 04
	00		 lea	 edi, DWORD PTR [ecx+300360]
  0005c	89 9d e0 fb fe
	ff		 mov	 DWORD PTR tv1283[ebp], ebx
  00062	89 bd e4 fb fe
	ff		 mov	 DWORD PTR tv1282[ebp], edi
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@RAW_Genera:

; 645  : 	{
; 646  : 		TTerainSplat & rSplat = m_TerrainSplatPatch.Splats[i];
; 647  : 
; 648  : 		if (rSplat.NeedsUpdate)

  00070	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00074	0f 84 3c 02 00
	00		 je	 $LN2@RAW_Genera

; 649  : 		{
; 650  : 			if (m_TerrainSplatPatch.TileCount[i] > 0)

  0007a	83 bb 38 91 03
	00 00		 cmp	 DWORD PTR [ebx+233784], 0
  00081	8b 07		 mov	 eax, DWORD PTR [edi]
  00083	0f 86 e8 01 00
	00		 jbe	 $LN19@RAW_Genera

; 651  : 			{
; 652  : 				if (rSplat.Active)   // We already have an alpha map which needs to be updated

  00089	85 c0		 test	 eax, eax
  0008b	74 34		 je	 SHORT $LN21@RAW_Genera

; 653  : 				{
; 654  : 					if (m_lpAlphaTexture[i])

  0008d	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00090	74 22		 je	 SHORT $LN6@RAW_Genera
$LL7@RAW_Genera:

; 655  : 					{
; 656  : 						ULONG ulRef;
; 657  : 						do
; 658  : 						{
; 659  : 							ulRef = m_lpAlphaTexture[i]->Release();

  00092	8b 03		 mov	 eax, DWORD PTR [ebx]
  00094	50		 push	 eax
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	ff 51 08	 call	 DWORD PTR [ecx+8]

; 660  : 							if (ulRef > 0)

  0009a	85 c0		 test	 eax, eax
  0009c	74 10		 je	 SHORT $LN73@RAW_Genera

; 661  : 								TraceError(" CTerrain::RAW_GenerateSplat - TileCount > 0 : Alpha Texture Release(%d) ERROR", ulRef);

  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MGCDBJBL@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@
  000a4	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a9	83 c4 08	 add	 esp, 8

; 662  : 						} while(ulRef > 0);

  000ac	eb e4		 jmp	 SHORT $LL7@RAW_Genera
$LN73@RAW_Genera:
  000ae	8b 8d ec fb fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN6@RAW_Genera:

; 663  : 					}
; 664  : 
; 665  : 					rSplat.pd3dTexture = m_lpAlphaTexture[i] = NULL;

  000b4	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  000ba	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN21@RAW_Genera:

; 666  :  				}
; 667  : 
; 668  : 				rSplat.Active = 1;

  000c1	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 669  : 				rSplat.NeedsUpdate = 0;
; 670  : 
; 671  : 				aptr = abyAlphaMap;

  000c7	8d 9d f8 fb fe
	ff		 lea	 ebx, DWORD PTR _abyAlphaMap$[ebp]
  000cd	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  000d4	33 ff		 xor	 edi, edi
  000d6	89 9d e8 fb fe
	ff		 mov	 DWORD PTR _aptr$1$[ebp], ebx
  000dc	81 c1 13 89 00
	00		 add	 ecx, 35091		; 00008913H
$LL10@RAW_Genera:

; 674  : 				{
; 675  : 					for (long x = 0; x < SPLATALPHA_RAW_XSIZE; ++x)

  000e2	33 d2		 xor	 edx, edx
$LL13@RAW_Genera:

; 676  : 					{
; 677  : 						long lTileMapOffset = y * TILEMAP_RAW_XSIZE + x;
; 678  : 
; 679  : 						BYTE byTileNum = m_abyTileMap[lTileMapOffset];
; 680  : 						if (byTileNum == i)

  000e4	0f b6 81 03 01
	00 00		 movzx	 eax, BYTE PTR [ecx+259]
  000eb	3b c6		 cmp	 eax, esi
  000ed	75 07		 jne	 SHORT $LN24@RAW_Genera

; 681  :  							*aptr = 0xFF;

  000ef	0c ff		 or	 al, 255			; 000000ffH
  000f1	e9 29 01 00 00	 jmp	 $LN27@RAW_Genera
$LN24@RAW_Genera:

; 682  : 						else if (byTileNum > i)

  000f6	0f 86 21 01 00
	00		 jbe	 $LN26@RAW_Genera

; 683  : 						{
; 684  : 							BYTE byTileTL, byTileTR, byTileBL, byTileBR, byTileT, byTileB, byTileL, byTileR;
; 685  : 
; 686  : 							if ( x > 0 && y > 0 )

  000fc	85 d2		 test	 edx, edx
  000fe	74 08		 je	 SHORT $LN28@RAW_Genera
  00100	85 ff		 test	 edi, edi
  00102	74 04		 je	 SHORT $LN28@RAW_Genera

; 687  : 								byTileTL = m_abyTileMap[lTileMapOffset - TILEMAP_RAW_YSIZE - 1];

  00104	8a 21		 mov	 ah, BYTE PTR [ecx]
  00106	eb 02		 jmp	 SHORT $LN29@RAW_Genera
$LN28@RAW_Genera:

; 688  : 							else
; 689  : 								byTileTL = 0;

  00108	32 e4		 xor	 ah, ah
$LN29@RAW_Genera:

; 690  : 							if ( x < (SPLATALPHA_RAW_XSIZE - 1) && y > 0 )

  0010a	81 fa 01 01 00
	00		 cmp	 edx, 257		; 00000101H
  00110	73 0f		 jae	 SHORT $LN30@RAW_Genera
  00112	85 ff		 test	 edi, edi
  00114	74 0b		 je	 SHORT $LN30@RAW_Genera

; 691  : 								byTileTR = m_abyTileMap[lTileMapOffset - TILEMAP_RAW_YSIZE + 1];

  00116	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00119	88 85 f7 fb fe
	ff		 mov	 BYTE PTR _byTileTR$1$[ebp], al
  0011f	eb 07		 jmp	 SHORT $LN31@RAW_Genera
$LN30@RAW_Genera:

; 692  : 							else
; 693  : 								byTileTR = 0;

  00121	c6 85 f7 fb fe
	ff 00		 mov	 BYTE PTR _byTileTR$1$[ebp], 0
$LN31@RAW_Genera:

; 694  : 							if ( x > 0 && y < (SPLATALPHA_RAW_YSIZE - 1) )

  00128	85 d2		 test	 edx, edx
  0012a	74 16		 je	 SHORT $LN32@RAW_Genera
  0012c	81 ff 01 01 00
	00		 cmp	 edi, 257		; 00000101H
  00132	73 0e		 jae	 SHORT $LN32@RAW_Genera

; 695  : 								byTileBL = m_abyTileMap[lTileMapOffset + TILEMAP_RAW_YSIZE - 1];

  00134	8a 81 04 02 00
	00		 mov	 al, BYTE PTR [ecx+516]
  0013a	88 85 f6 fb fe
	ff		 mov	 BYTE PTR _byTileBL$1$[ebp], al
  00140	eb 07		 jmp	 SHORT $LN33@RAW_Genera
$LN32@RAW_Genera:

; 696  : 							else
; 697  : 								byTileBL = 0;

  00142	c6 85 f6 fb fe
	ff 00		 mov	 BYTE PTR _byTileBL$1$[ebp], 0
$LN33@RAW_Genera:

; 698  : 							if ( x < (SPLATALPHA_RAW_XSIZE - 1) && y < (SPLATALPHA_RAW_YSIZE - 1) )

  00149	81 fa 01 01 00
	00		 cmp	 edx, 257		; 00000101H
  0014f	73 16		 jae	 SHORT $LN34@RAW_Genera
  00151	81 ff 01 01 00
	00		 cmp	 edi, 257		; 00000101H
  00157	73 0e		 jae	 SHORT $LN34@RAW_Genera

; 699  : 								byTileBR = m_abyTileMap[lTileMapOffset + TILEMAP_RAW_YSIZE + 1];

  00159	8a 81 06 02 00
	00		 mov	 al, BYTE PTR [ecx+518]
  0015f	88 85 f5 fb fe
	ff		 mov	 BYTE PTR _byTileBR$1$[ebp], al
  00165	eb 07		 jmp	 SHORT $LN35@RAW_Genera
$LN34@RAW_Genera:

; 700  : 							else
; 701  : 								byTileBR = 0;

  00167	c6 85 f5 fb fe
	ff 00		 mov	 BYTE PTR _byTileBR$1$[ebp], 0
$LN35@RAW_Genera:

; 702  : 							if ( y > 0 )

  0016e	85 ff		 test	 edi, edi
  00170	74 14		 je	 SHORT $LN36@RAW_Genera

; 703  : 								byTileT = m_abyTileMap[lTileMapOffset - TILEMAP_RAW_YSIZE];

  00172	8a 79 01	 mov	 bh, BYTE PTR [ecx+1]

; 706  : 							if ( y < (SPLATALPHA_RAW_YSIZE - 1) )

  00175	81 ff 01 01 00
	00		 cmp	 edi, 257		; 00000101H
  0017b	72 0b		 jb	 SHORT $LN72@RAW_Genera

; 708  : 							else
; 709  : 								byTileB = 0;

  0017d	c6 85 f4 fb fe
	ff 00		 mov	 BYTE PTR _byTileB$1$[ebp], 0
  00184	eb 0e		 jmp	 SHORT $LN39@RAW_Genera
$LN36@RAW_Genera:

; 704  : 							else
; 705  : 								byTileT = 0;

  00186	32 ff		 xor	 bh, bh
$LN72@RAW_Genera:

; 707  : 								byTileB = m_abyTileMap[lTileMapOffset + TILEMAP_RAW_YSIZE];

  00188	8a 81 05 02 00
	00		 mov	 al, BYTE PTR [ecx+517]
  0018e	88 85 f4 fb fe
	ff		 mov	 BYTE PTR _byTileB$1$[ebp], al
$LN39@RAW_Genera:

; 710  : 							if ( x > 0 )

  00194	85 d2		 test	 edx, edx
  00196	74 17		 je	 SHORT $LN40@RAW_Genera

; 711  : 								byTileL = m_abyTileMap[lTileMapOffset - 1];

  00198	8a 99 02 01 00
	00		 mov	 bl, BYTE PTR [ecx+258]

; 714  : 							if ( x < (SPLATALPHA_RAW_XSIZE - 1) )

  0019e	81 fa 01 01 00
	00		 cmp	 edx, 257		; 00000101H
  001a4	72 0b		 jb	 SHORT $LN71@RAW_Genera

; 716  : 							else
; 717  : 								byTileR = 0;

  001a6	c6 85 f3 fb fe
	ff 00		 mov	 BYTE PTR _byTileR$1$[ebp], 0
  001ad	eb 0e		 jmp	 SHORT $LN43@RAW_Genera
$LN40@RAW_Genera:

; 712  : 							else
; 713  : 								byTileL = 0;

  001af	32 db		 xor	 bl, bl
$LN71@RAW_Genera:

; 715  : 								byTileR = m_abyTileMap[lTileMapOffset + 1];

  001b1	8a 81 04 01 00
	00		 mov	 al, BYTE PTR [ecx+260]
  001b7	88 85 f3 fb fe
	ff		 mov	 BYTE PTR _byTileR$1$[ebp], al
$LN43@RAW_Genera:

; 718  : 
; 719  : 							if (byTileTL == i || byTileTR == i || byTileBL == i || byTileBR == i ||
; 720  : 								byTileT == i || byTileB == i || byTileL == i || byTileR == i)

  001bd	0f b6 c4	 movzx	 eax, ah
  001c0	3b c6		 cmp	 eax, esi
  001c2	74 4f		 je	 SHORT $LN46@RAW_Genera
  001c4	0f b6 85 f7 fb
	fe ff		 movzx	 eax, BYTE PTR _byTileTR$1$[ebp]
  001cb	3b c6		 cmp	 eax, esi
  001cd	74 44		 je	 SHORT $LN46@RAW_Genera
  001cf	0f b6 85 f6 fb
	fe ff		 movzx	 eax, BYTE PTR _byTileBL$1$[ebp]
  001d6	3b c6		 cmp	 eax, esi
  001d8	74 39		 je	 SHORT $LN46@RAW_Genera
  001da	0f b6 85 f5 fb
	fe ff		 movzx	 eax, BYTE PTR _byTileBR$1$[ebp]
  001e1	3b c6		 cmp	 eax, esi
  001e3	74 2e		 je	 SHORT $LN46@RAW_Genera
  001e5	0f b6 c7	 movzx	 eax, bh
  001e8	3b c6		 cmp	 eax, esi
  001ea	74 27		 je	 SHORT $LN46@RAW_Genera
  001ec	0f b6 85 f4 fb
	fe ff		 movzx	 eax, BYTE PTR _byTileB$1$[ebp]
  001f3	3b c6		 cmp	 eax, esi
  001f5	74 1c		 je	 SHORT $LN46@RAW_Genera
  001f7	0f b6 c3	 movzx	 eax, bl
  001fa	3b c6		 cmp	 eax, esi
  001fc	74 15		 je	 SHORT $LN46@RAW_Genera
  001fe	0f b6 85 f3 fb
	fe ff		 movzx	 eax, BYTE PTR _byTileR$1$[ebp]
  00205	3b c6		 cmp	 eax, esi
  00207	74 0a		 je	 SHORT $LN46@RAW_Genera

; 721  :  								*aptr = 0xFF;
; 722  : 							else
; 723  :  								*aptr = 0x00;
; 724  : 						}

  00209	8b 9d e8 fb fe
	ff		 mov	 ebx, DWORD PTR _aptr$1$[ebp]
  0020f	32 c0		 xor	 al, al
  00211	eb 0c		 jmp	 SHORT $LN27@RAW_Genera
$LN46@RAW_Genera:
  00213	8b 9d e8 fb fe
	ff		 mov	 ebx, DWORD PTR _aptr$1$[ebp]
  00219	0c ff		 or	 al, 255			; 000000ffH
  0021b	eb 02		 jmp	 SHORT $LN27@RAW_Genera
$LN26@RAW_Genera:

; 725  : 						else
; 726  :  							*aptr = 0x00;

  0021d	32 c0		 xor	 al, al
$LN27@RAW_Genera:

; 727  : 
; 728  :  						++aptr;

  0021f	88 03		 mov	 BYTE PTR [ebx], al
  00221	42		 inc	 edx
  00222	43		 inc	 ebx
  00223	41		 inc	 ecx
  00224	89 9d e8 fb fe
	ff		 mov	 DWORD PTR _aptr$1$[ebp], ebx
  0022a	81 fa 02 01 00
	00		 cmp	 edx, 258		; 00000102H
  00230	0f 8c ae fe ff
	ff		 jl	 $LL13@RAW_Genera

; 672  : 
; 673  : 				for (long y = 0; y < SPLATALPHA_RAW_YSIZE; ++y)

  00236	47		 inc	 edi
  00237	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0023d	0f 8c 9f fe ff
	ff		 jl	 $LL10@RAW_Genera

; 729  : 					}
; 730  : 				}
; 731  : 
; 732  : 
; 733  : 				rSplat.pd3dTexture = AddTexture32(i, abyAlphaMap, SPLATALPHA_RAW_XSIZE, SPLATALPHA_RAW_YSIZE);

  00243	8b 8d ec fb fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00249	8d 85 f8 fb fe
	ff		 lea	 eax, DWORD PTR _abyAlphaMap$[ebp]
  0024f	68 02 01 00 00	 push	 258			; 00000102H
  00254	68 02 01 00 00	 push	 258			; 00000102H
  00259	50		 push	 eax
  0025a	56		 push	 esi
  0025b	e8 00 00 00 00	 call	 ?AddTexture32@CTerrain@@IAEPAUIDirect3DTexture8@@EPAEJJ@Z ; CTerrain::AddTexture32
  00260	8b bd e4 fb fe
	ff		 mov	 edi, DWORD PTR tv1282[ebp]

; 734  : 			}

  00266	8b 9d e0 fb fe
	ff		 mov	 ebx, DWORD PTR tv1283[ebp]
  0026c	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0026f	eb 45		 jmp	 SHORT $LN2@RAW_Genera
$LN19@RAW_Genera:

; 735  : 			else
; 736  : 			{
; 737  : 				if (rSplat.Active)

  00271	85 c0		 test	 eax, eax
  00273	74 34		 je	 SHORT $LN47@RAW_Genera

; 738  : 				{
; 739  : 					if (m_lpAlphaTexture[i])

  00275	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00278	74 22		 je	 SHORT $LN15@RAW_Genera
  0027a	66 0f 1f 44 00
	00		 npad	 6
$LL16@RAW_Genera:

; 740  : 					{
; 741  : 						ULONG ulRef;
; 742  : 						do
; 743  : 						{
; 744  : 							ulRef = m_lpAlphaTexture[i]->Release();

  00280	8b 03		 mov	 eax, DWORD PTR [ebx]
  00282	50		 push	 eax
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	ff 51 08	 call	 DWORD PTR [ecx+8]

; 745  : 							if (ulRef > 0)

  00288	85 c0		 test	 eax, eax
  0028a	74 10		 je	 SHORT $LN15@RAW_Genera

; 746  : 								TraceError(" CTerrain::RAW_GenerateSplat - TileDount 0 : Alpha Texture Release(%d) ERROR", ulRef);

  0028c	50		 push	 eax
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EFOOENIC@?5CTerrain?3?3RAW_GenerateSplat?5?9?5@
  00292	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00297	83 c4 08	 add	 esp, 8

; 747  : 						} while(ulRef > 0);

  0029a	eb e4		 jmp	 SHORT $LL16@RAW_Genera
$LN15@RAW_Genera:

; 748  : 					}
; 749  : 
; 750  : 					rSplat.pd3dTexture = m_lpAlphaTexture[i] = NULL;

  0029c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  002a2	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN47@RAW_Genera:

; 751  :  				}
; 752  : 				rSplat.NeedsUpdate = 0;

  002a9	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 753  : 				rSplat.Active = 0;

  002b0	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN2@RAW_Genera:

; 640  : 
; 641  : 	BYTE abyAlphaMap[SPLATALPHA_RAW_XSIZE * SPLATALPHA_RAW_YSIZE];
; 642  : 	BYTE * aptr;
; 643  : 
; 644  : 	for (DWORD i = 1; i < GetTextureSet()->GetTextureCount(); ++i)

  002b6	83 c7 0c	 add	 edi, 12			; 0000000cH
  002b9	83 c3 04	 add	 ebx, 4
  002bc	46		 inc	 esi
  002bd	89 bd e4 fb fe
	ff		 mov	 DWORD PTR tv1282[ebp], edi
  002c3	89 9d e0 fb fe
	ff		 mov	 DWORD PTR tv1283[ebp], ebx
  002c9	e8 00 00 00 00	 call	 ?GetTextureSet@CTerrainImpl@@SAPAVCTextureSet@@XZ ; CTerrainImpl::GetTextureSet
  002ce	8b c8		 mov	 ecx, eax
  002d0	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  002d5	8b 8d ec fb fe
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002db	3b f0		 cmp	 esi, eax
  002dd	0f 82 8d fd ff
	ff		 jb	 $LL4@RAW_Genera
  002e3	5f		 pop	 edi
  002e4	5b		 pop	 ebx
$LN75@RAW_Genera:
  002e5	5e		 pop	 esi
$LN3@RAW_Genera:

; 754  : 			}
; 755  : 		}
; 756  : 	}
; 757  : }

  002e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e9	33 cd		 xor	 ecx, ebp
  002eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c2 04 00	 ret	 4
?RAW_GenerateSplat@CTerrain@@QAEX_N@Z ENDP		; CTerrain::RAW_GenerateSplat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?SetCoordinate@CTerrain@@QAEXGG@Z
_TEXT	SEGMENT
_wCoordX$ = 8						; size = 2
_wCoordY$ = 12						; size = 2
?SetCoordinate@CTerrain@@QAEXGG@Z PROC			; CTerrain::SetCoordinate, COMDAT
; _this$ = ecx

; 905  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 906  : 	m_wX = wCoordX;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _wCoordX$[ebp]
  00007	66 89 81 6c a5
	06 00		 mov	 WORD PTR [ecx+435564], ax

; 907  : 	m_wY = wCoordY;

  0000e	66 8b 45 0c	 mov	 ax, WORD PTR _wCoordY$[ebp]
  00012	66 89 81 6e a5
	06 00		 mov	 WORD PTR [ecx+435566], ax

; 908  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?SetCoordinate@CTerrain@@QAEXGG@Z ENDP			; CTerrain::SetCoordinate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?DeallocateMarkedSplats@CTerrain@@QAEXXZ
_TEXT	SEGMENT
?DeallocateMarkedSplats@CTerrain@@QAEXXZ PROC		; CTerrain::DeallocateMarkedSplats, COMDAT
; _this$ = ecx

; 1175 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1176 : 	TTerainSplat & rSplat = m_MarkedSplatPatch.Splats[0];
; 1177 : 	if (m_lpMarkedTexture)

  00003	83 be e0 d1 07
	00 00		 cmp	 DWORD PTR [esi+512480], 0
  0000a	74 14		 je	 SHORT $LN3@Deallocate
  0000c	0f 1f 40 00	 npad	 4
$LL4@Deallocate:

; 1178 : 	{
; 1179 : 		ULONG ulRef;
; 1180 : 		do
; 1181 : 		{
; 1182 : 			ulRef = m_lpMarkedTexture->Release();

  00010	8b 86 e0 d1 07
	00		 mov	 eax, DWORD PTR [esi+512480]
  00016	50		 push	 eax
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	ff 52 08	 call	 DWORD PTR [edx+8]

; 1183 : 		} while(ulRef > 0);

  0001c	85 c0		 test	 eax, eax
  0001e	75 f0		 jne	 SHORT $LL4@Deallocate
$LN3@Deallocate:

; 1184 : 	}
; 1185 : 
; 1186 : 	rSplat.pd3dTexture = NULL;
; 1187 : 	m_lpMarkedTexture = NULL;
; 1188 : 	m_bMarked = FALSE;
; 1189 : 
; 1190 : 	memset(&m_MarkedSplatPatch, 0, sizeof(m_MarkedSplatPatch));

  00020	68 04 10 01 00	 push	 69636			; 00011004H
  00025	8d 86 dc c1 06
	00		 lea	 eax, DWORD PTR [esi+442844]
  0002b	c7 86 e0 d1 07
	00 00 00 00 00	 mov	 DWORD PTR [esi+512480], 0
  00035	6a 00		 push	 0
  00037	50		 push	 eax
  00038	c7 86 d8 c1 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+442840], 0
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	5e		 pop	 esi

; 1191 : }

  0004b	c3		 ret	 0
?DeallocateMarkedSplats@CTerrain@@QAEXXZ ENDP		; CTerrain::DeallocateMarkedSplats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?AllocateMarkedSplats@CTerrain@@QAEXPAE@Z
_TEXT	SEGMENT
_d3dlr$ = -8						; size = 8
_pbyAlphaMap$ = 8					; size = 4
?AllocateMarkedSplats@CTerrain@@QAEXPAE@Z PROC		; CTerrain::AllocateMarkedSplats, COMDAT
; _this$ = ecx

; 1139 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1140 : 	TTerainSplat & rAttrSplat = m_MarkedSplatPatch.Splats[0];
; 1141 : 	HRESULT hr;
; 1142 : 
; 1143 : 	if (m_lpMarkedTexture)

  0000a	83 bf e0 d1 07
	00 00		 cmp	 DWORD PTR [edi+512480], 0
  00011	8d b7 e0 d1 07
	00		 lea	 esi, DWORD PTR [edi+512480]
  00017	74 17		 je	 SHORT $LL7@AllocateMa
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@AllocateMa:

; 1144 : 	{
; 1145 : 		ULONG ulRef;
; 1146 : 		do
; 1147 : 		{
; 1148 : 			ulRef = m_lpMarkedTexture->Release();

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	50		 push	 eax
  00023	8b 10		 mov	 edx, DWORD PTR [eax]
  00025	ff 52 08	 call	 DWORD PTR [edx+8]

; 1149 : 		} while(ulRef > 0);

  00028	85 c0		 test	 eax, eax
  0002a	75 f4		 jne	 SHORT $LL4@AllocateMa
  0002c	0f 1f 40 00	 npad	 4
$LL7@AllocateMa:

; 1150 : 	}
; 1151 : 
; 1152 : 	do
; 1153 : 	{
; 1154 : 		hr = ms_lpd3dDevice->CreateTexture(ATTRMAP_XSIZE, ATTRMAP_YSIZE, 1, 0, D3DFMT_A8R8G8B8, D3DPOOL_MANAGED, &m_lpMarkedTexture);

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00035	56		 push	 esi
  00036	6a 01		 push	 1
  00038	6a 15		 push	 21			; 00000015H
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	6a 00		 push	 0
  0003e	6a 01		 push	 1
  00040	68 00 01 00 00	 push	 256			; 00000100H
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	50		 push	 eax
  0004b	ff 51 50	 call	 DWORD PTR [ecx+80]

; 1155 : 	} while(FAILED(hr));

  0004e	85 c0		 test	 eax, eax
  00050	78 de		 js	 SHORT $LL7@AllocateMa
$LL10@AllocateMa:

; 1156 : 
; 1157 : 	D3DLOCKED_RECT d3dlr;
; 1158 : 	do
; 1159 : 	{
; 1160 : 		hr = m_lpMarkedTexture->LockRect(0, &d3dlr, 0, 0);

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	8d 55 f8	 lea	 edx, DWORD PTR _d3dlr$[ebp]
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	52		 push	 edx
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	6a 00		 push	 0
  00060	50		 push	 eax
  00061	ff 51 40	 call	 DWORD PTR [ecx+64]

; 1161 : 	} while(FAILED(hr));

  00064	85 c0		 test	 eax, eax
  00066	78 ea		 js	 SHORT $LL10@AllocateMa

; 1162 : 
; 1163 : 	PutImage32(pbyAlphaMap, (BYTE*) d3dlr.pBits, ATTRMAP_XSIZE, d3dlr.Pitch, ATTRMAP_XSIZE, ATTRMAP_YSIZE);

  00068	6a 00		 push	 0
  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	68 00 01 00 00	 push	 256			; 00000100H
  00074	ff 75 f8	 push	 DWORD PTR _d3dlr$[ebp]
  00077	8b cf		 mov	 ecx, edi
  00079	68 00 01 00 00	 push	 256			; 00000100H
  0007e	ff 75 fc	 push	 DWORD PTR _d3dlr$[ebp+4]
  00081	ff 75 08	 push	 DWORD PTR _pbyAlphaMap$[ebp]
  00084	e8 00 00 00 00	 call	 ?PutImage32@CTerrain@@IAEXPAE0JJJJ_N@Z ; CTerrain::PutImage32
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@AllocateMa:

; 1164 : 
; 1165 : 	do
; 1166 : 	{
; 1167 : 		hr = m_lpMarkedTexture->UnlockRect(0);

  00090	8b 06		 mov	 eax, DWORD PTR [esi]
  00092	6a 00		 push	 0
  00094	50		 push	 eax
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	ff 51 44	 call	 DWORD PTR [ecx+68]

; 1168 : 	} while(FAILED(hr));

  0009a	85 c0		 test	 eax, eax
  0009c	78 f2		 js	 SHORT $LL13@AllocateMa

; 1169 : 
; 1170 : 	rAttrSplat.pd3dTexture = m_lpMarkedTexture;

  0009e	8b 06		 mov	 eax, DWORD PTR [esi]
  000a0	89 87 e4 c5 07
	00		 mov	 DWORD PTR [edi+509412], eax

; 1171 : 	m_bMarked = true;

  000a6	c7 87 d8 c1 06
	00 01 00 00 00	 mov	 DWORD PTR [edi+442840], 1
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1172 : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
?AllocateMarkedSplats@CTerrain@@QAEXPAE@Z ENDP		; CTerrain::AllocateMarkedSplats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?LoadMiniMapTexture@CTerrain@@QAEXPBD@Z
_TEXT	SEGMENT
_c_pchMiniMapFileName$ = 8				; size = 4
?LoadMiniMapTexture@CTerrain@@QAEXPBD@Z PROC		; CTerrain::LoadMiniMapTexture, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 72   : 	DWORD dwStart = ELTimer_GetMSec();

  00008	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 73   : 	CGraphicImage * pImage = (CGraphicImage *) CResourceManager::Instance().GetResourcePointer(c_pchMiniMapFileName);

  0000d	ff 75 08	 push	 DWORD PTR _c_pchMiniMapFileName$[ebp]
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00016	8b d8		 mov	 ebx, eax
  00018	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 74   : 	m_MiniMapGraphicImageInstance.SetImagePointer(pImage);

  0001d	50		 push	 eax
  0001e	8d 8e 94 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435604]
  00024	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 75   : 
; 76   : 	if (!m_MiniMapGraphicImageInstance.GetTexturePointer()->IsEmpty())

  00029	8d 8e 94 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435604]
  0002f	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00034	8b c8		 mov	 ecx, eax
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003b	ff d0		 call	 eax
  0003d	84 c0		 test	 al, al
  0003f	75 34		 jne	 SHORT $LN2@LoadMiniMa

; 77   : 	{
; 78   : 		m_lpMiniMapTexture = m_MiniMapGraphicImageInstance.GetTexturePointer()->GetD3DTexture();

  00041	8d 8e 94 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435604]
  00047	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  0004c	8b c8		 mov	 ecx, eax
  0004e	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00053	89 86 b4 a5 06
	00		 mov	 DWORD PTR [esi+435636], eax

; 79   : 		Tracef("CTerrain::LoadMiniMapTexture %d ms\n", ELTimer_GetMSec() - dwStart);

  00059	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0005e	2b c3		 sub	 eax, ebx
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KIPOLACJ@CTerrain?3?3LoadMiniMapTexture?5?$CFd@
  00066	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0006b	83 c4 08	 add	 esp, 8
  0006e	5f		 pop	 edi

; 85   : 	}
; 86   : }

  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN2@LoadMiniMa:

; 80   : 	}
; 81   : 	else
; 82   : 	{
; 83   : 		Tracef(" CTerrain::LoadMiniMapTexture - MiniMapTexture Error");

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NCADIKFN@?5CTerrain?3?3LoadMiniMapTexture?5?9@
  0007a	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0007f	83 c4 04	 add	 esp, 4

; 84   : 		m_lpMiniMapTexture = NULL;

  00082	c7 86 b4 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435636], 0
  0008c	5f		 pop	 edi

; 85   : 	}
; 86   : }

  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?LoadMiniMapTexture@CTerrain@@QAEXPBD@Z ENDP		; CTerrain::LoadMiniMapTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?LoadShadowMap@CTerrain@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_pvData$ = -344					; size = 4
_file$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_pszFileName$ = 8					; size = 4
?LoadShadowMap@CTerrain@@QAE_NPBD@Z PROC		; CTerrain::LoadShadowMap, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadShadowMap@CTerrain@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_pszFileName$[ebp]

; 106  : 	DWORD dwStart = ELTimer_GetMSec();

  00033	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 107  : 	Tracef("LoadShadowMap %s ", c_pszFileName);

  00038	56		 push	 esi
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DNLHKNND@LoadShadowMap?5?$CFs?5@
  0003e	8b d8		 mov	 ebx, eax
  00040	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00045	83 c4 08	 add	 esp, 8

; 108  : 
; 109  : 	CMappedFile file;

  00048	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 110  : 	LPCVOID c_pvData;
; 111  : 
; 112  : 	if (!CEterPackManager::Instance().Get(file, c_pszFileName, &c_pvData))

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00059	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$[ebp]
  0005f	50		 push	 eax
  00060	56		 push	 esi
  00061	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00074	84 c0		 test	 al, al
  00076	75 13		 jne	 SHORT $LN2@LoadShadow

; 113  : 	{
; 114  : 		TraceError(" CTerrain::LoadShadowMap - %s OPEN ERROR", c_pszFileName);

  00078	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CJ@CPMONPNA@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5O@
  0007d	56		 push	 esi
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00084	83 c4 08	 add	 esp, 8
  00087	32 db		 xor	 bl, bl
  00089	eb 53		 jmp	 SHORT $LN7@LoadShadow
$LN2@LoadShadow:

; 115  : 		return false;
; 116  : 	}
; 117  : 
; 118  : 	DWORD dwShadowMapSize = sizeof(WORD) * 256 * 256;
; 119  : 
; 120  : 	if (file.Size() != dwShadowMapSize)

  0008b	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00091	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00096	3d 00 00 02 00	 cmp	 eax, 131072		; 00020000H
  0009b	74 13		 je	 SHORT $LN3@LoadShadow

; 121  : 	{
; 122  : 		TraceError(" CTerrain::LoadShadowMap - %s SIZE ERROR", c_pszFileName);
; 123  : 		return false;

  0009d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CJ@HOIKLCAI@?5CTerrain?3?3LoadShadowMap?5?9?5?$CFs?5S@
  000a2	56		 push	 esi
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a9	83 c4 08	 add	 esp, 8
  000ac	32 db		 xor	 bl, bl
  000ae	eb 2e		 jmp	 SHORT $LN7@LoadShadow
$LN3@LoadShadow:

; 124  : 	}
; 125  : 
; 126  : 	memcpy(m_awShadowMap, c_pvData, dwShadowMapSize);

  000b0	68 00 00 02 00	 push	 131072			; 00020000H
  000b5	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _c_pvData$[ebp]
  000bb	8d 87 48 a5 04
	00		 lea	 eax, DWORD PTR [edi+304456]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _memcpy

; 127  : 
; 128  : 	Tracef("%d ms\n", ELTimer_GetMSec() - dwStart);

  000c7	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  000cc	2b c3		 sub	 eax, ebx
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_06MIKGEFKP@?$CFd?5ms?6@
  000d4	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000d9	83 c4 14	 add	 esp, 20			; 00000014H

; 129  : 	return true;

  000dc	b3 01		 mov	 bl, 1
$LN7@LoadShadow:
  000de	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000e4	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  000e9	8a c3		 mov	 al, bl

; 130  : }

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadShadowMap@CTerrain@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?LoadShadowMap@CTerrain@@QAE_NPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-348]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadShadowMap@CTerrain@@QAE_NPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadShadowMap@CTerrain@@QAE_NPBD@Z ENDP		; CTerrain::LoadShadowMap
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?LoadShadowTexture@CTerrain@@QAEXPBD@Z
_TEXT	SEGMENT
_ShadowFileName$ = 8					; size = 4
?LoadShadowTexture@CTerrain@@QAEXPBD@Z PROC		; CTerrain::LoadShadowTexture, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 90   : 	DWORD dwStart = ELTimer_GetMSec();

  00008	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 91   : 	CGraphicImage * pImage = (CGraphicImage *) CResourceManager::Instance().GetResourcePointer(ShadowFileName);

  0000d	ff 75 08	 push	 DWORD PTR _ShadowFileName$[ebp]
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00016	8b d8		 mov	 ebx, eax
  00018	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 92   : 	m_ShadowGraphicImageInstance.SetImagePointer(pImage);

  0001d	50		 push	 eax
  0001e	8d 8f 74 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435572]
  00024	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 93   : 
; 94   : 	if (!m_ShadowGraphicImageInstance.GetTexturePointer()->IsEmpty())

  00029	8d 8f 74 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435572]
  0002f	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00034	8b c8		 mov	 ecx, eax
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003b	ff d0		 call	 eax
  0003d	84 c0		 test	 al, al
  0003f	75 14		 jne	 SHORT $LN2@LoadShadow

; 95   : 		m_lpShadowTexture = m_ShadowGraphicImageInstance.GetTexturePointer()->GetD3DTexture();

  00041	8d 8f 74 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435572]
  00047	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  0004c	8b c8		 mov	 ecx, eax
  0004e	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00053	eb 0f		 jmp	 SHORT $LN3@LoadShadow
$LN2@LoadShadow:

; 96   : 	else
; 97   : 	{
; 98   : 		TraceError(" CTerrain::LoadShadowTexture - ShadowTexture is Empty");

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HIAJBENM@?5CTerrain?3?3LoadShadowTexture?5?9?5@
  0005a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0005f	83 c4 04	 add	 esp, 4

; 99   : 		m_lpShadowTexture = NULL;

  00062	33 c0		 xor	 eax, eax
$LN3@LoadShadow:

; 100  : 	}
; 101  : 	Tracef("CTerrain::LoadShadowTexture %d ms\n", ELTimer_GetMSec() - dwStart);

  00064	89 87 44 a5 04
	00		 mov	 DWORD PTR [edi+304452], eax
  0006a	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0006f	2b c3		 sub	 eax, ebx
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IJFAIKJL@CTerrain?3?3LoadShadowTexture?5?$CFd?5@
  00077	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0007c	83 c4 08	 add	 esp, 8
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 102  : }

  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?LoadShadowTexture@CTerrain@@QAEXPBD@Z ENDP		; CTerrain::LoadShadowTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetWaterHeight@CTerrain@@QAE_NGGPAJ@Z
_TEXT	SEGMENT
_wCoordX$ = 8						; size = 2
_wCoordY$ = 12						; size = 2
_plWaterHeight$ = 16					; size = 4
?GetWaterHeight@CTerrain@@QAE_NGGPAJ@Z PROC		; CTerrain::GetWaterHeight, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 	BYTE byWaterNum = *(m_abyWaterMap + (wCoordY * WATERMAP_XSIZE) + wCoordX);

  00003	0f b7 55 0c	 movzx	 edx, WORD PTR _wCoordY$[ebp]
  00007	53		 push	 ebx
  00008	8b c2		 mov	 eax, edx
  0000a	c1 e0 07	 shl	 eax, 7
  0000d	56		 push	 esi
  0000e	0f b7 75 08	 movzx	 esi, WORD PTR _wCoordX$[ebp]
  00012	03 c6		 add	 eax, esi
  00014	8a 9c 08 1a 8e
	02 00		 mov	 bl, BYTE PTR [eax+ecx+167450]

; 531  : 	if (byWaterNum > m_byNumWater)

  0001b	8a 81 40 a1 04
	00		 mov	 al, BYTE PTR [ecx+303424]
  00021	3a d8		 cmp	 bl, al
  00023	76 1b		 jbe	 SHORT $LN2@GetWaterHe

; 532  : 	{
; 533  : 		Tracef("CTerrain::GetWaterHeight (X %d, Y %d) ERROR!", wCoordX, wCoordY, m_byNumWater);

  00025	0f b6 c0	 movzx	 eax, al
  00028	50		 push	 eax
  00029	52		 push	 edx
  0002a	56		 push	 esi
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IPEKMCGJ@CTerrain?3?3GetWaterHeight?5?$CIX?5?$CFd?0@
  00030	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 534  : 		return false;

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 537  : 
; 538  : 	return true;
; 539  : }

  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetWaterHe:

; 535  : 	}
; 536  : 	*plWaterHeight = m_lWaterHeight[byWaterNum] / 2;

  00040	0f b6 c3	 movzx	 eax, bl
  00043	5e		 pop	 esi

; 537  : 
; 538  : 	return true;
; 539  : }

  00044	5b		 pop	 ebx
  00045	8b 84 81 44 a1
	04 00		 mov	 eax, DWORD PTR [ecx+eax*4+303428]
  0004c	8b 4d 10	 mov	 ecx, DWORD PTR _plWaterHeight$[ebp]
  0004f	99		 cdq
  00050	2b c2		 sub	 eax, edx
  00052	d1 f8		 sar	 eax, 1
  00054	89 01		 mov	 DWORD PTR [ecx], eax
  00056	b0 01		 mov	 al, 1
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?GetWaterHeight@CTerrain@@QAE_NGGPAJ@Z ENDP		; CTerrain::GetWaterHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetWaterHeight@CTerrain@@QAEXEPAJ@Z
_TEXT	SEGMENT
_byWaterNum$ = 8					; size = 1
_plWaterHeight$ = 12					; size = 4
?GetWaterHeight@CTerrain@@QAEXEPAJ@Z PROC		; CTerrain::GetWaterHeight, COMDAT
; _this$ = ecx

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 520  : 	if (byWaterNum > m_byNumWater)

  00006	0f b6 4d 08	 movzx	 ecx, BYTE PTR _byWaterNum$[ebp]
  0000a	8a 96 40 a1 04
	00		 mov	 dl, BYTE PTR [esi+303424]
  00010	38 55 08	 cmp	 BYTE PTR _byWaterNum$[ebp], dl
  00013	76 17		 jbe	 SHORT $LN2@GetWaterHe

; 521  : 	{
; 522  : 		Tracef("CTerrain::GetWaterHeight WaterNum %d(Total Num %d) ERROR!", byWaterNum, m_byNumWater);

  00015	0f b6 c2	 movzx	 eax, dl
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@FNOMKIKO@CTerrain?3?3GetWaterHeight?5WaterN@
  0001f	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	5e		 pop	 esi

; 526  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
$LN2@GetWaterHe:

; 523  : 		return;
; 524  : 	}
; 525  : 	*plWaterHeight = m_lWaterHeight[byWaterNum];

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _plWaterHeight$[ebp]
  0002f	8b 8c 8e 44 a1
	04 00		 mov	 ecx, DWORD PTR [esi+ecx*4+303428]
  00036	5e		 pop	 esi
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 526  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetWaterHeight@CTerrain@@QAEXEPAJ@Z ENDP		; CTerrain::GetWaterHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?isAttrOn@CTerrain@@QAE_NGGE@Z
_TEXT	SEGMENT
_wCoordX$ = 8						; size = 2
_wCoordY$ = 12						; size = 2
_byAttrFlag$ = 16					; size = 1
?isAttrOn@CTerrain@@QAE_NGGE@Z PROC			; CTerrain::isAttrOn, COMDAT
; _this$ = ecx

; 487  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 488  : 	if (wCoordX >= ATTRMAP_XSIZE || wCoordY >= ATTRMAP_YSIZE)

  00003	66 8b 55 08	 mov	 dx, WORD PTR _wCoordX$[ebp]
  00007	66 8b 45 0c	 mov	 ax, WORD PTR _wCoordY$[ebp]
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00013	66 3b d1	 cmp	 dx, cx
  00016	73 35		 jae	 SHORT $LN3@isAttrOn
  00018	66 3b c1	 cmp	 ax, cx
  0001b	73 30		 jae	 SHORT $LN3@isAttrOn

; 492  : 	}
; 493  : 
; 494  : 	BYTE byMapAttr = m_abyAttrMap[wCoordY * ATTRMAP_XSIZE + wCoordX];

  0001d	0f b7 c8	 movzx	 ecx, ax
  00020	c1 e1 08	 shl	 ecx, 8
  00023	03 ce		 add	 ecx, esi
  00025	0f b7 c2	 movzx	 eax, dx
  00028	8a 84 08 1a 8e
	01 00		 mov	 al, BYTE PTR [eax+ecx+101914]

; 495  : 
; 496  : 	if ( byAttrFlag < 16 )

  0002f	8a 4d 10	 mov	 cl, BYTE PTR _byAttrFlag$[ebp]
  00032	80 f9 10	 cmp	 cl, 16			; 00000010H
  00035	73 0a		 jae	 SHORT $LN4@isAttrOn

; 497  : 		return (byMapAttr & byAttrFlag) ? true : false;

  00037	84 c1		 test	 al, cl
  00039	5e		 pop	 esi
  0003a	0f 95 c0	 setne	 al

; 501  : 			return true;
; 502  : 		else
; 503  : 			return false;
; 504  : 	}
; 505  : }

  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN4@isAttrOn:

; 498  : 	else
; 499  : 	{
; 500  : 		if ( byAttrFlag/16 == byMapAttr/16)

  00041	32 c1		 xor	 al, cl
  00043	a8 f0		 test	 al, 240			; 000000f0H
  00045	5e		 pop	 esi
  00046	0f 94 c0	 sete	 al

; 501  : 			return true;
; 502  : 		else
; 503  : 			return false;
; 504  : 	}
; 505  : }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@isAttrOn:

; 489  : 	{
; 490  : 		Tracef("CTerrain::isAttrOn Coordiante Error! Return false... Input Coord - X : %d, Y : %d ( Limit X : %d, Y : %d)", wCoordX, wCoordY, ATTRMAP_XSIZE, ATTRMAP_YSIZE);

  0004d	68 00 01 00 00	 push	 256			; 00000100H
  00052	68 00 01 00 00	 push	 256			; 00000100H
  00057	0f b7 c0	 movzx	 eax, ax
  0005a	50		 push	 eax
  0005b	0f b7 c2	 movzx	 eax, dx
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JCKMMDJF@CTerrain?3?3isAttrOn?5Coordiante?5E@
  00064	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00069	83 c4 14	 add	 esp, 20			; 00000014H

; 491  : 		return false;

  0006c	32 c0		 xor	 al, al
  0006e	5e		 pop	 esi

; 501  : 			return true;
; 502  : 		else
; 503  : 			return false;
; 504  : 	}
; 505  : }

  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
?isAttrOn@CTerrain@@QAE_NGGE@Z ENDP			; CTerrain::isAttrOn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetAttr@CTerrain@@QAEEGG@Z
_TEXT	SEGMENT
_wCoordX$ = 8						; size = 2
_wCoordY$ = 12						; size = 2
?GetAttr@CTerrain@@QAEEGG@Z PROC			; CTerrain::GetAttr, COMDAT
; _this$ = ecx

; 508  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 509  : 	if (wCoordX >= ATTRMAP_XSIZE || wCoordY >= ATTRMAP_YSIZE)

  00003	66 8b 55 08	 mov	 dx, WORD PTR _wCoordX$[ebp]
  00007	66 8b 45 0c	 mov	 ax, WORD PTR _wCoordY$[ebp]
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00013	66 3b d1	 cmp	 dx, cx
  00016	73 1c		 jae	 SHORT $LN3@GetAttr
  00018	66 3b c1	 cmp	 ax, cx
  0001b	73 17		 jae	 SHORT $LN3@GetAttr

; 513  : 	}
; 514  : 
; 515  : 	return m_abyAttrMap[wCoordY * ATTRMAP_XSIZE + wCoordX];

  0001d	0f b7 c8	 movzx	 ecx, ax
  00020	c1 e1 08	 shl	 ecx, 8
  00023	03 ce		 add	 ecx, esi
  00025	0f b7 c2	 movzx	 eax, dx
  00028	5e		 pop	 esi
  00029	8a 84 08 1a 8e
	01 00		 mov	 al, BYTE PTR [eax+ecx+101914]

; 516  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN3@GetAttr:

; 510  : 	{
; 511  : 		Tracef("CTerrain::GetAttr Coordiante Error! Return 0... Input Coord - X : %d, Y : %d ( Limit X : %d, Y : %d)", wCoordX, wCoordY, ATTRMAP_XSIZE, ATTRMAP_YSIZE);

  00034	68 00 01 00 00	 push	 256			; 00000100H
  00039	68 00 01 00 00	 push	 256			; 00000100H
  0003e	0f b7 c0	 movzx	 eax, ax
  00041	50		 push	 eax
  00042	0f b7 c2	 movzx	 eax, dx
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@DKPFJAMA@CTerrain?3?3GetAttr?5Coordiante?5Er@
  0004b	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00050	83 c4 14	 add	 esp, 20			; 00000014H

; 512  : 		return 0;

  00053	32 c0		 xor	 al, al
  00055	5e		 pop	 esi

; 516  : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?GetAttr@CTerrain@@QAEEGG@Z ENDP			; CTerrain::GetAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?LoadAttrMap@CTerrain@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_pszFileName$ = 8					; size = 4
?LoadAttrMap@CTerrain@@QAE_NPBD@Z PROC			; CTerrain::LoadAttrMap, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : }

  00003	5d		 pop	 ebp

; 483  : 	return CTerrainImpl::LoadAttrMap(c_pszFileName);

  00004	e9 00 00 00 00	 jmp	 ?LoadAttrMap@CTerrainImpl@@IAE_NPBD@Z ; CTerrainImpl::LoadAttrMap
?LoadAttrMap@CTerrain@@QAE_NPBD@Z ENDP			; CTerrain::LoadAttrMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetNormal@CTerrain@@QAE_NHHPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
_pv3Normal$ = 16					; size = 4
?GetNormal@CTerrain@@QAE_NHHPAUD3DXVECTOR3@@@Z PROC	; CTerrain::GetNormal, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 0c	 mov	 esi, DWORD PTR _iy$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _ix$[ebp]
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 343  : 	long lMapWidth = XSIZE * CELLSCALE;
; 344  : 	long lMapHeight = YSIZE * CELLSCALE;
; 345  : 	while (ix < 0)

  0000f	85 ff		 test	 edi, edi
  00011	79 1c		 jns	 SHORT $LN2@GetNormal
  00013	8b cf		 mov	 ecx, edi
  00015	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0001a	f7 d1		 not	 ecx
  0001c	81 c7 00 64 00
	00		 add	 edi, 25600		; 00006400H
  00022	f7 e1		 mul	 ecx
  00024	c1 ea 0d	 shr	 edx, 13			; 0000000dH
  00027	69 c2 00 64 00
	00		 imul	 eax, edx, 25600
  0002d	03 f8		 add	 edi, eax
$LN2@GetNormal:

; 346  : 		ix += lMapWidth;
; 347  : 
; 348  : 	while (iy < 0)

  0002f	85 f6		 test	 esi, esi
  00031	79 1c		 jns	 SHORT $LN4@GetNormal
  00033	8b ce		 mov	 ecx, esi
  00035	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0003a	f7 d1		 not	 ecx
  0003c	81 c6 00 64 00
	00		 add	 esi, 25600		; 00006400H
  00042	f7 e1		 mul	 ecx
  00044	c1 ea 0d	 shr	 edx, 13			; 0000000dH
  00047	69 c2 00 64 00
	00		 imul	 eax, edx, 25600
  0004d	03 f0		 add	 esi, eax
$LN4@GetNormal:

; 349  : 		iy += lMapHeight;
; 350  : 
; 351  : 	while (ix > lMapWidth)

  0004f	81 ff 00 64 00
	00		 cmp	 edi, 25600		; 00006400H
  00055	7e 1f		 jle	 SHORT $LN6@GetNormal
  00057	8d 8f ff 9b ff
	ff		 lea	 ecx, DWORD PTR [edi-25601]
  0005d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00062	f7 e1		 mul	 ecx
  00064	b9 00 9c ff ff	 mov	 ecx, -25600		; ffff9c00H
  00069	c1 ea 0d	 shr	 edx, 13			; 0000000dH
  0006c	69 c2 00 64 00
	00		 imul	 eax, edx, 25600
  00072	2b c8		 sub	 ecx, eax
  00074	03 f9		 add	 edi, ecx
$LN6@GetNormal:

; 352  : 		ix -= lMapWidth;
; 353  : 
; 354  : 	while (iy > lMapHeight)

  00076	81 fe 00 64 00
	00		 cmp	 esi, 25600		; 00006400H
  0007c	7e 1f		 jle	 SHORT $LN8@GetNormal
  0007e	8d 8e ff 9b ff
	ff		 lea	 ecx, DWORD PTR [esi-25601]
  00084	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00089	f7 e1		 mul	 ecx
  0008b	b9 00 9c ff ff	 mov	 ecx, -25600		; ffff9c00H
  00090	c1 ea 0d	 shr	 edx, 13			; 0000000dH
  00093	69 c2 00 64 00
	00		 imul	 eax, edx, 25600
  00099	2b c8		 sub	 ecx, eax
  0009b	03 f1		 add	 esi, ecx
$LN8@GetNormal:

; 355  : 		iy -= lMapHeight;
; 356  : 
; 357  : 	ix /= CELLSCALE;
; 358  : 	iy /= CELLSCALE;

  0009d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH

; 359  : 
; 360  : 	D3DXVECTOR3 v3Noraml;
; 361  : 	char * n = (char*) &m_acNormalMap[(iy * NORMALMAP_XSIZE + ix)*3];
; 362  : 	pv3Normal->x = -((float)*n++) * 0.007874016f;

  000a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c010204
  000aa	f7 ee		 imul	 esi
  000ac	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000b1	c1 fa 06	 sar	 edx, 6
  000b4	8b ca		 mov	 ecx, edx
  000b6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000b9	03 ca		 add	 ecx, edx
  000bb	f7 ef		 imul	 edi
  000bd	69 c9 81 00 00
	00		 imul	 ecx, ecx, 129

; 363  : 	pv3Normal->y = ((float)*n++) * 0.007874016f;
; 364  : 	pv3Normal->z = ((float)*n++) * 0.007874016f;
; 365  : 
; 366  : 	return true;

  000c3	5f		 pop	 edi
  000c4	c1 fa 06	 sar	 edx, 6
  000c7	8b c2		 mov	 eax, edx
  000c9	81 c2 5e ef 00
	00		 add	 edx, 61278		; 0000ef5eH
  000cf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d2	5e		 pop	 esi
  000d3	03 ca		 add	 ecx, edx
  000d5	03 c1		 add	 eax, ecx
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000da	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000dd	8b 4d 10	 mov	 ecx, DWORD PTR _pv3Normal$[ebp]
  000e0	03 d0		 add	 edx, eax
  000e2	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000e5	66 0f 6e c0	 movd	 xmm0, eax
  000e9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ec	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000f3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000f7	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  000fb	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  000ff	66 0f 6e c0	 movd	 xmm0, eax
  00103	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00106	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0010a	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  0010f	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  00113	66 0f 6e c0	 movd	 xmm0, eax
  00117	b0 01		 mov	 al, 1
  00119	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00120	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 367  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 0c 00	 ret	 12			; 0000000cH
?GetNormal@CTerrain@@QAE_NHHPAUD3DXVECTOR3@@@Z ENDP	; CTerrain::GetNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?GetHeight@CTerrain@@QAEMHH@Z
_TEXT	SEGMENT
tv615 = 8						; size = 4
tv610 = 8						; size = 4
_x$ = 8							; size = 4
tv600 = 12						; size = 4
_y$ = 12						; size = 4
?GetHeight@CTerrain@@QAEMHH@Z PROC			; CTerrain::GetHeight, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 371  : 	//if (0 == CELLSCALE)
; 372  : 		//return 0.0f;
; 373  : 
; 374  : 	x -= m_wX * XSIZE * CELLSCALE;

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000a	0f b7 87 6c a5
	06 00		 movzx	 eax, WORD PTR [edi+435564]
  00011	69 c0 00 9c ff
	ff		 imul	 eax, eax, -25600
  00017	03 c8		 add	 ecx, eax
  00019	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 376  : 
; 377  : 	if (x < 0 || y < 0 || x > XSIZE * CELLSCALE || y > XSIZE * CELLSCALE)

  0001c	0f 88 5f 01 00
	00		 js	 $LN3@GetHeight

; 375  : 	y -= m_wY * YSIZE * CELLSCALE;

  00022	0f b7 87 6e a5
	06 00		 movzx	 eax, WORD PTR [edi+435566]
  00029	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  0002c	69 c0 00 9c ff
	ff		 imul	 eax, eax, -25600
  00032	03 d8		 add	 ebx, eax

; 376  : 
; 377  : 	if (x < 0 || y < 0 || x > XSIZE * CELLSCALE || y > XSIZE * CELLSCALE)

  00034	0f 88 47 01 00
	00		 js	 $LN3@GetHeight
  0003a	81 f9 00 64 00
	00		 cmp	 ecx, 25600		; 00006400H
  00040	0f 8f 3b 01 00
	00		 jg	 $LN3@GetHeight
  00046	81 fb 00 64 00
	00		 cmp	 ebx, 25600		; 00006400H
  0004c	0f 8f 2f 01 00
	00		 jg	 $LN3@GetHeight

; 379  : 
; 380  : 	long	xdist;				/* x mod size of tile */
; 381  : 	long	ydist;				/* y mod size of tile */
; 382  : 	float	xslope, yslope;		/* slopes of heights between vertices */
; 383  : 
; 384  : 	float	h1, h2, h3;
; 385  : 	long	x2, y2;
; 386  : 	float	ooscale;
; 387  : 
; 388  : 	/* Find out the distance relative to the top left vertex of a tile */
; 389  : 	xdist = x % CELLSCALE;

  00052	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH

; 391  : 
; 392  : 	/* Convert into pixel coordinates */
; 393  : 	ooscale = 1.0f / ((float)CELLSCALE);
; 394  : 	x /= CELLSCALE;
; 395  : 	y /= CELLSCALE;
; 396  : 
; 397  : 	x2 = x; y2 = y;
; 398  : 	/* Get the height and color of the pixel at the top left corner */
; 399  : 	h1 = (float) GetHeightMapValue(x2, y2) * m_fHeightScale;

  00057	f3 0f 10 87 38
	91 03 00	 movss	 xmm0, DWORD PTR [edi+233784]
  0005f	f7 e9		 imul	 ecx

; 408  : 	if (xdist <= ydist)

  00061	0f 57 c9	 xorps	 xmm1, xmm1
  00064	56		 push	 esi
  00065	c1 fa 06	 sar	 edx, 6
  00068	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0006d	8b f2		 mov	 esi, edx
  0006f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00072	03 f2		 add	 esi, edx
  00074	f7 eb		 imul	 ebx
  00076	69 ce c8 00 00
	00		 imul	 ecx, esi, 200
  0007c	c1 fa 06	 sar	 edx, 6
  0007f	29 4d 08	 sub	 DWORD PTR _x$[ebp], ecx
  00082	8b ca		 mov	 ecx, edx
  00084	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00087	03 ca		 add	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00089	0f bf d6	 movsx	 edx, si
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 390  : 	ydist = y % CELLSCALE;

  0008c	69 c1 c8 00 00
	00		 imul	 eax, ecx, 200
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00092	0f bf c9	 movsx	 ecx, cx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 408  : 	if (xdist <= ydist)

  00095	5e		 pop	 esi
  00096	2b d8		 sub	 ebx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00098	69 c1 83 00 00
	00		 imul	 eax, ecx, 131
  0009e	66 0f 6e eb	 movd	 xmm5, ebx
  000a2	89 45 0c	 mov	 DWORD PTR tv600[ebp], eax
  000a5	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 405  : 	h2 = (float) GetHeightMapValue(x2, y2) * m_fHeightScale;

  000a7	0f 5b ed	 cvtdq2ps xmm5, xmm5
  000aa	0f b7 84 47 0c
	05 00 00	 movzx	 eax, WORD PTR [edi+eax*2+1292]
  000b2	66 0f 6e e0	 movd	 xmm4, eax
  000b6	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000b9	69 c8 83 00 00
	00		 imul	 ecx, eax, 131
  000bf	0f 5b e4	 cvtdq2ps xmm4, xmm4
  000c2	f3 0f 59 e0	 mulss	 xmm4, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  000c6	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 405  : 	h2 = (float) GetHeightMapValue(x2, y2) * m_fHeightScale;

  000c9	0f b7 84 47 0e
	05 00 00	 movzx	 eax, WORD PTR [edi+eax*2+1294]
  000d1	66 0f 6e d8	 movd	 xmm3, eax
  000d5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000d8	0f 5b db	 cvtdq2ps xmm3, xmm3
  000db	66 0f 6e f0	 movd	 xmm6, eax
  000df	f3 0f 59 d8	 mulss	 xmm3, xmm0
  000e3	0f 5b f6	 cvtdq2ps xmm6, xmm6

; 408  : 	if (xdist <= ydist)

  000e6	3b c3		 cmp	 eax, ebx
  000e8	7f 49		 jg	 SHORT $LN4@GetHeight
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  000ea	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 413  : 		h3 = (float) GetHeightMapValue(x2, y2) * m_fHeightScale;

  000ed	0f b7 84 47 0c
	05 00 00	 movzx	 eax, WORD PTR [edi+eax*2+1292]
  000f5	5f		 pop	 edi

; 427  : 
; 428  : 	/* Get the height of the pixel at the top right corner */
; 429  : 	xslope = (h3 - h1) * ooscale;
; 430  : 	yslope = (h2 - h3) * ooscale;
; 431  : 
; 432  : 	return (h1 + (xdist * xslope + ydist * yslope));
; 433  : }

  000f6	5b		 pop	 ebx
  000f7	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000fb	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000ff	f3 0f 5c d9	 subss	 xmm3, xmm1
  00103	f3 0f 5c cc	 subss	 xmm1, xmm4
  00107	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3ba3d70a
  0010f	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3ba3d70a
  00117	f3 0f 59 de	 mulss	 xmm3, xmm6
  0011b	f3 0f 59 cd	 mulss	 xmm1, xmm5
  0011f	f3 0f 58 d9	 addss	 xmm3, xmm1
  00123	f3 0f 58 dc	 addss	 xmm3, xmm4
  00127	f3 0f 11 5d 08	 movss	 DWORD PTR tv615[ebp], xmm3
  0012c	d9 45 08	 fld	 DWORD PTR tv615[ebp]
  0012f	5d		 pop	 ebp
  00130	c2 08 00	 ret	 8
$LN4@GetHeight:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00133	8b 45 0c	 mov	 eax, DWORD PTR tv600[ebp]
  00136	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 426  : 	h3 = (float) GetHeightMapValue(x2, y2) * m_fHeightScale;

  00138	0f b7 84 47 0e
	05 00 00	 movzx	 eax, WORD PTR [edi+eax*2+1294]
  00140	5f		 pop	 edi

; 427  : 
; 428  : 	/* Get the height of the pixel at the top right corner */
; 429  : 	xslope = (h3 - h1) * ooscale;
; 430  : 	yslope = (h2 - h3) * ooscale;
; 431  : 
; 432  : 	return (h1 + (xdist * xslope + ydist * yslope));
; 433  : }

  00141	5b		 pop	 ebx
  00142	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00146	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0014a	0f 28 d1	 movaps	 xmm2, xmm1
  0014d	f3 0f 5c d9	 subss	 xmm3, xmm1
  00151	f3 0f 5c d4	 subss	 xmm2, xmm4
  00155	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3ba3d70a
  0015d	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3ba3d70a
  00165	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00169	f3 0f 59 d6	 mulss	 xmm2, xmm6
  0016d	f3 0f 58 d3	 addss	 xmm2, xmm3
  00171	f3 0f 58 d4	 addss	 xmm2, xmm4
  00175	f3 0f 11 55 08	 movss	 DWORD PTR tv610[ebp], xmm2
  0017a	d9 45 08	 fld	 DWORD PTR tv610[ebp]
  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
$LN3@GetHeight:

; 378  : 		return 0.0f;

  00181	d9 ee		 fldz
  00183	5f		 pop	 edi

; 427  : 
; 428  : 	/* Get the height of the pixel at the top right corner */
; 429  : 	xslope = (h3 - h1) * ooscale;
; 430  : 	yslope = (h2 - h3) * ooscale;
; 431  : 
; 432  : 	return (h1 + (xdist * xslope + ydist * yslope));
; 433  : }

  00184	5b		 pop	 ebx
  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
?GetHeight@CTerrain@@QAEMHH@Z ENDP			; CTerrain::GetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapOutdoor.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?WE_GetHeightMapValue@CTerrain@@QAEGFF@Z
_TEXT	SEGMENT
_sTerrainCouuntY$1$ = -12				; size = 4
tv1516 = -8						; size = 4
_sTerrainCouuntX$1$ = -4				; size = 4
_sX$ = 8						; size = 2
_byTerrainNum$ = 11					; size = 1
_pTerrain$ = 12						; size = 4
_sY$ = 12						; size = 2
?WE_GetHeightMapValue@CTerrain@@QAEGFF@Z PROC		; CTerrain::WE_GetHeightMapValue, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 143  : 	if (sX>=-1 && sY>=-1 && sX<HEIGHTMAP_RAW_XSIZE-1 && sY<HEIGHTMAP_RAW_YSIZE-1)

  00007	66 8b 5d 0c	 mov	 bx, WORD PTR _sY$[ebp]
  0000b	b8 82 00 00 00	 mov	 eax, 130		; 00000082H
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	66 8b 7d 08	 mov	 di, WORD PTR _sX$[ebp]
  00016	8b f1		 mov	 esi, ecx
  00018	89 45 f8	 mov	 DWORD PTR tv1516[ebp], eax
  0001b	66 83 ff ff	 cmp	 di, -1
  0001f	7c 1e		 jl	 SHORT $LN2@WE_GetHeig
  00021	66 83 fb ff	 cmp	 bx, -1
  00025	7c 18		 jl	 SHORT $LN2@WE_GetHeig
  00027	66 3b f8	 cmp	 di, ax
  0002a	7d 13		 jge	 SHORT $LN2@WE_GetHeig
  0002c	66 3b d8	 cmp	 bx, ax
  0002f	7d 0e		 jge	 SHORT $LN2@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00031	0f bf c3	 movsx	 eax, bx
  00034	69 c0 83 00 00
	00		 imul	 eax, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 144  : 		return GetHeightMapValue(sX,sY);

  0003a	e9 91 05 00 00	 jmp	 $LN172@WE_GetHeig
$LN2@WE_GetHeig:

; 145  : 
; 146  : 	BYTE byTerrainNum;
; 147  : 	if ( !m_pOwnerOutdoorMap->GetTerrainNumFromCoord(m_wX, m_wY, &byTerrainNum) )

  0003f	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  00045	8d 45 0b	 lea	 eax, DWORD PTR _byTerrainNum$[ebp]
  00048	50		 push	 eax
  00049	0f b7 86 6e a5
	06 00		 movzx	 eax, WORD PTR [esi+435566]
  00050	50		 push	 eax
  00051	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetTerrainNumFromCoord@CMapOutdoor@@QAE_NGGPAE@Z ; CMapOutdoor::GetTerrainNumFromCoord
  0005e	84 c0		 test	 al, al
  00060	75 24		 jne	 SHORT $LN171@WE_GetHeig

; 148  : 	{
; 149  : 		Tracef("CTerrain::WE_GetHeightMapValue : Can't Get TerrainNum from Coord %d, %d", m_wX, m_wY);

  00062	0f b7 86 6e a5
	06 00		 movzx	 eax, WORD PTR [esi+435566]
  00069	50		 push	 eax
  0006a	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@CCJJGEPA@CTerrain?3?3WE_GetHeightMapValue?5@
  00077	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef

; 150  : 		byTerrainNum = 4;

  0007c	b2 04		 mov	 dl, 4
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	88 55 0b	 mov	 BYTE PTR _byTerrainNum$[ebp], dl
  00084	eb 03		 jmp	 SHORT $LN3@WE_GetHeig
$LN171@WE_GetHeig:

; 145  : 
; 146  : 	BYTE byTerrainNum;
; 147  : 	if ( !m_pOwnerOutdoorMap->GetTerrainNumFromCoord(m_wX, m_wY, &byTerrainNum) )

  00086	8a 55 0b	 mov	 dl, BYTE PTR _byTerrainNum$[ebp]
$LN3@WE_GetHeig:

; 151  : 	}
; 152  : 
; 153  : 	short sTerrainCouuntX, sTerrainCouuntY;
; 154  : 	m_pOwnerOutdoorMap->GetTerrainCount(&sTerrainCouuntX, &sTerrainCouuntY);

  00089	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MapOutdoor.h

; 140  : 			*psTerrainCountX = m_sTerrainCountX;

  0008f	0f b7 41 70	 movzx	 eax, WORD PTR [ecx+112]
  00093	89 45 fc	 mov	 DWORD PTR _sTerrainCouuntX$1$[ebp], eax

; 141  : 			*psTerrainCountY = m_sTerrainCountY;

  00096	0f b7 41 72	 movzx	 eax, WORD PTR [ecx+114]
  0009a	89 45 f4	 mov	 DWORD PTR _sTerrainCouuntY$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 158  : 	if (sY < -1)

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _sTerrainCouuntX$1$[ebp]
  000a0	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _pTerrain$[ebp], 0
  000a7	66 83 fb ff	 cmp	 bx, -1
  000ab	0f 8d 16 02 00
	00		 jge	 $LN4@WE_GetHeig

; 159  : 	{
; 160  : 		if (m_wY <= 0)

  000b1	66 83 be 6e a5
	06 00 00	 cmp	 WORD PTR [esi+435566], 0
  000b9	0f 87 b7 00 00
	00		 ja	 $LN6@WE_GetHeig

; 161  : 		{
; 162  : 			if ( sX < -1)

  000bf	66 83 ff ff	 cmp	 di, -1
  000c3	7d 44		 jge	 SHORT $LN8@WE_GetHeig

; 163  : 			{
; 164  : 				if (m_wX <= 0)

  000c5	66 83 be 6c a5
	06 00 00	 cmp	 WORD PTR [esi+435564], 0
  000cd	77 10		 ja	 SHORT $LN10@WE_GetHeig
$LN173@WE_GetHeig:

; 339  : }

  000cf	66 8b 86 04 04
	00 00		 mov	 ax, WORD PTR [esi+1028]
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN10@WE_GetHeig:

; 165  : 					return GetHeightMapValue(-1, -1);
; 166  : 				else
; 167  : 				{
; 168  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 1, &pTerrain))

  000df	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  000e2	fe ca		 dec	 dl
  000e4	50		 push	 eax
  000e5	0f b6 c2	 movzx	 eax, dl
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  000ee	85 c0		 test	 eax, eax
  000f0	74 dd		 je	 SHORT $LN173@WE_GetHeig

; 169  : 						return GetHeightMapValue(-1, -1);
; 170  : 					else
; 171  : 						return pTerrain->GetHeightMapValue(sX + XSIZE, -1);

  000f2	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  000f5	0f bf cf	 movsx	 ecx, di
  000f8	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	66 8b 84 48 06
	05 00 00	 mov	 ax, WORD PTR [eax+ecx*2+1286]
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
$LN8@WE_GetHeig:

; 172  : 				}
; 173  : 			}
; 174  : 			else if (sX >= HEIGHTMAP_RAW_XSIZE - 1)

  00109	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0010e	66 3b f9	 cmp	 di, cx
  00111	7c 4f		 jl	 SHORT $LN14@WE_GetHeig

; 175  : 			{
; 176  : 				if (m_wX >= sTerrainCouuntX - 1)

  00113	0f bf c8	 movsx	 ecx, ax
  00116	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  0011d	49		 dec	 ecx
  0011e	3b c1		 cmp	 eax, ecx
  00120	7c 10		 jl	 SHORT $LN16@WE_GetHeig
$LN174@WE_GetHeig:

; 339  : }

  00122	66 8b 86 0a 05
	00 00		 mov	 ax, WORD PTR [esi+1290]
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN16@WE_GetHeig:

; 177  : 					return GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, -1);
; 178  : 				else
; 179  : 				{
; 180  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 1, &pTerrain))

  00132	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  00138	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  0013b	50		 push	 eax
  0013c	fe c2		 inc	 dl
  0013e	0f b6 c2	 movzx	 eax, dl
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00147	85 c0		 test	 eax, eax
  00149	74 d7		 je	 SHORT $LN174@WE_GetHeig

; 181  : 						return GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, -1);
; 182  : 					else
; 183  : 						return pTerrain->GetHeightMapValue(sX - XSIZE, -1);

  0014b	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0014e	0f bf cf	 movsx	 ecx, di
  00151	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	66 8b 84 48 06
	03 00 00	 mov	 ax, WORD PTR [eax+ecx*2+774]
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 08 00	 ret	 8
$LN14@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00162	0f bf c7	 movsx	 eax, di
  00165	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 187  : 				return GetHeightMapValue(sX, -1);

  00166	66 8b 84 46 06
	04 00 00	 mov	 ax, WORD PTR [esi+eax*2+1030]

; 339  : }

  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 08 00	 ret	 8
$LN6@WE_GetHeig:

; 188  : 		}
; 189  : 		else
; 190  : 		{
; 191  : 			if (sX < -1)

  00176	66 83 ff ff	 cmp	 di, -1
  0017a	7d 75		 jge	 SHORT $LN20@WE_GetHeig

; 192  : 			{
; 193  : 				if (m_wX <= 0)

  0017c	66 83 be 6c a5
	06 00 00	 cmp	 WORD PTR [esi+435564], 0
  00184	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  00187	50		 push	 eax
  00188	77 31		 ja	 SHORT $LN22@WE_GetHeig

; 194  : 				{
; 195  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 3, &pTerrain))

  0018a	80 ea 03	 sub	 dl, 3
  0018d	0f b6 c2	 movzx	 eax, dl
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00196	85 c0		 test	 eax, eax
  00198	0f 84 31 ff ff
	ff		 je	 $LN173@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0019e	0f bf c3	 movsx	 eax, bx
  001a1	69 c8 06 01 00
	00		 imul	 ecx, eax, 262
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 198  : 						return pTerrain->GetHeightMapValue(-1, sY + YSIZE);

  001a7	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
  001aa	5f		 pop	 edi

; 339  : }

  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	66 8b 84 01 0a
	88 00 00	 mov	 ax, WORD PTR [ecx+eax+34826]
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 08 00	 ret	 8
$LN22@WE_GetHeig:

; 199  : 				}
; 200  : 				else
; 201  : 				{
; 202  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 4, &pTerrain))

  001bb	80 ea 04	 sub	 dl, 4
  001be	0f b6 c2	 movzx	 eax, dl
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  001c7	85 c0		 test	 eax, eax
  001c9	0f 84 00 ff ff
	ff		 je	 $LN173@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  001cf	0f bf c3	 movsx	 eax, bx
  001d2	69 d0 83 00 00
	00		 imul	 edx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 205  : 						return pTerrain->GetHeightMapValue(sX + XSIZE, sY + YSIZE);

  001d8	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  001db	0f bf cf	 movsx	 ecx, di
  001de	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  001df	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  001e0	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  001e2	5b		 pop	 ebx
  001e3	66 8b 84 50 0c
	89 00 00	 mov	 ax, WORD PTR [eax+edx*2+35084]
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 08 00	 ret	 8
$LN20@WE_GetHeig:

; 206  : 				}
; 207  : 			}
; 208  : 			else if (sX >= HEIGHTMAP_RAW_XSIZE - 1)

  001f1	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  001f6	66 3b f9	 cmp	 di, cx
  001f9	7c 7f		 jl	 SHORT $LN28@WE_GetHeig

; 209  : 			{
; 210  : 				if (m_wX >= sTerrainCouuntX)

  001fb	0f bf c8	 movsx	 ecx, ax
  001fe	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  00205	3b c1		 cmp	 eax, ecx
  00207	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  0020d	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  00210	50		 push	 eax
  00211	7c 31		 jl	 SHORT $LN30@WE_GetHeig

; 211  : 				{
; 212  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 3, &pTerrain))

  00213	80 ea 03	 sub	 dl, 3
  00216	0f b6 c2	 movzx	 eax, dl
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  0021f	85 c0		 test	 eax, eax
  00221	0f 84 fb fe ff
	ff		 je	 $LN174@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00227	0f bf c3	 movsx	 eax, bx
  0022a	69 c8 06 01 00
	00		 imul	 ecx, eax, 262
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 215  : 						return pTerrain->GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, sY + YSIZE);

  00230	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
  00233	5f		 pop	 edi

; 339  : }

  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	66 8b 84 01 10
	89 00 00	 mov	 ax, WORD PTR [ecx+eax+35088]
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 08 00	 ret	 8
$LN30@WE_GetHeig:

; 216  : 				}
; 217  : 				else
; 218  : 				{
; 219  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 2, &pTerrain))

  00244	80 ea 02	 sub	 dl, 2
  00247	0f b6 c2	 movzx	 eax, dl
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00250	85 c0		 test	 eax, eax
  00252	0f 84 ca fe ff
	ff		 je	 $LN174@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00258	0f bf c3	 movsx	 eax, bx
  0025b	69 d0 83 00 00
	00		 imul	 edx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 222  : 						return pTerrain->GetHeightMapValue(sX - XSIZE, sY + YSIZE);

  00261	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00264	0f bf cf	 movsx	 ecx, di
  00267	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00268	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00269	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  0026b	5b		 pop	 ebx
  0026c	66 8b 84 50 0c
	87 00 00	 mov	 ax, WORD PTR [eax+edx*2+34572]
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 08 00	 ret	 8
$LN28@WE_GetHeig:

; 223  : 				}
; 224  : 			}
; 225  : 			else
; 226  : 			{
; 227  : 				if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 3, &pTerrain))

  0027a	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  0027d	0f bf ff	 movsx	 edi, di
  00280	80 ea 03	 sub	 dl, 3
  00283	0f b6 ca	 movzx	 ecx, dl
  00286	50		 push	 eax
  00287	51		 push	 ecx
  00288	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  0028e	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00293	85 c0		 test	 eax, eax
  00295	75 11		 jne	 SHORT $LN36@WE_GetHeig

; 228  : 					return GetHeightMapValue(sX, -1);

  00297	66 8b 84 7e 06
	04 00 00	 mov	 ax, WORD PTR [esi+edi*2+1030]
  0029f	5f		 pop	 edi

; 339  : }

  002a0	5e		 pop	 esi
  002a1	5b		 pop	 ebx
  002a2	8b e5		 mov	 esp, ebp
  002a4	5d		 pop	 ebp
  002a5	c2 08 00	 ret	 8
$LN36@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  002a8	0f bf c3	 movsx	 eax, bx
  002ab	69 c8 83 00 00
	00		 imul	 ecx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 230  : 					return pTerrain->GetHeightMapValue(sX, sY + YSIZE);

  002b1	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  002b4	03 cf		 add	 ecx, edi
  002b6	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  002b7	5e		 pop	 esi
  002b8	5b		 pop	 ebx
  002b9	66 8b 84 48 0c
	88 00 00	 mov	 ax, WORD PTR [eax+ecx*2+34828]
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c2 08 00	 ret	 8
$LN4@WE_GetHeig:

; 231  : 			}
; 232  : 		}
; 233  : 	}
; 234  : 	else if (sY >= HEIGHTMAP_RAW_YSIZE - 1)

  002c7	66 3b 5d f8	 cmp	 bx, WORD PTR tv1516[ebp]
  002cb	0f 8c 35 02 00
	00		 jl	 $LN38@WE_GetHeig

; 235  : 	{
; 236  : 		if (m_wY >= sTerrainCouuntY - 1)

  002d1	8b 45 f4	 mov	 eax, DWORD PTR _sTerrainCouuntY$1$[ebp]
  002d4	0f bf c8	 movsx	 ecx, ax
  002d7	0f b7 86 6e a5
	06 00		 movzx	 eax, WORD PTR [esi+435566]
  002de	49		 dec	 ecx
  002df	3b c1		 cmp	 eax, ecx
  002e1	0f 8c c0 00 00
	00		 jl	 $LN40@WE_GetHeig

; 237  : 		{
; 238  : 			if (sX < -1)

  002e7	66 83 ff ff	 cmp	 di, -1
  002eb	7d 4a		 jge	 SHORT $LN42@WE_GetHeig

; 239  : 			{
; 240  : 				if (m_wX <= 0)

  002ed	66 83 be 6c a5
	06 00 00	 cmp	 WORD PTR [esi+435564], 0
  002f5	77 10		 ja	 SHORT $LN44@WE_GetHeig
$LN175@WE_GetHeig:

; 339  : }

  002f7	66 8b 86 16 8a
	00 00		 mov	 ax, WORD PTR [esi+35350]
  002fe	5f		 pop	 edi
  002ff	5e		 pop	 esi
  00300	5b		 pop	 ebx
  00301	8b e5		 mov	 esp, ebp
  00303	5d		 pop	 ebp
  00304	c2 08 00	 ret	 8
$LN44@WE_GetHeig:

; 241  : 					return GetHeightMapValue(-1, HEIGHTMAP_RAW_XSIZE - 1);
; 242  : 				else
; 243  : 				{
; 244  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 1, &pTerrain))

  00307	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  0030d	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  00310	50		 push	 eax
  00311	fe ca		 dec	 dl
  00313	0f b6 c2	 movzx	 eax, dl
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  0031c	85 c0		 test	 eax, eax
  0031e	74 d7		 je	 SHORT $LN175@WE_GetHeig

; 245  : 						return GetHeightMapValue(-1, HEIGHTMAP_RAW_XSIZE - 1);
; 246  : 					else
; 247  : 						return pTerrain->GetHeightMapValue(sX + XSIZE, HEIGHTMAP_RAW_YSIZE - 1);

  00320	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00323	0f bf cf	 movsx	 ecx, di
  00326	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00327	5e		 pop	 esi
  00328	5b		 pop	 ebx
  00329	66 8b 84 48 18
	8b 00 00	 mov	 ax, WORD PTR [eax+ecx*2+35608]
  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 08 00	 ret	 8
$LN42@WE_GetHeig:

; 248  : 				}
; 249  : 			}
; 250  : 			else if (sX >= HEIGHTMAP_RAW_XSIZE - 1)

  00337	b8 82 00 00 00	 mov	 eax, 130		; 00000082H
  0033c	66 3b f8	 cmp	 di, ax
  0033f	7c 52		 jl	 SHORT $LN48@WE_GetHeig

; 251  : 			{
; 252  : 				if (m_wX >= sTerrainCouuntX - 1)

  00341	8b 45 fc	 mov	 eax, DWORD PTR _sTerrainCouuntX$1$[ebp]
  00344	0f bf c8	 movsx	 ecx, ax
  00347	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  0034e	49		 dec	 ecx
  0034f	3b c1		 cmp	 eax, ecx
  00351	7c 10		 jl	 SHORT $LN50@WE_GetHeig
$LN176@WE_GetHeig:

; 339  : }

  00353	66 8b 86 1c 8b
	00 00		 mov	 ax, WORD PTR [esi+35612]
  0035a	5f		 pop	 edi
  0035b	5e		 pop	 esi
  0035c	5b		 pop	 ebx
  0035d	8b e5		 mov	 esp, ebp
  0035f	5d		 pop	 ebp
  00360	c2 08 00	 ret	 8
$LN50@WE_GetHeig:

; 253  : 					return GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, HEIGHTMAP_RAW_YSIZE - 1);
; 254  : 				else
; 255  : 				{
; 256  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 1, &pTerrain))

  00363	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  00369	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  0036c	50		 push	 eax
  0036d	fe c2		 inc	 dl
  0036f	0f b6 c2	 movzx	 eax, dl
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00378	85 c0		 test	 eax, eax
  0037a	74 d7		 je	 SHORT $LN176@WE_GetHeig

; 257  : 						return GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, HEIGHTMAP_RAW_YSIZE - 1);
; 258  : 					else
; 259  : 						return pTerrain->GetHeightMapValue(sX - XSIZE, HEIGHTMAP_RAW_YSIZE - 1);

  0037c	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  0037f	0f bf cf	 movsx	 ecx, di
  00382	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00383	5e		 pop	 esi
  00384	5b		 pop	 ebx
  00385	66 8b 84 48 18
	89 00 00	 mov	 ax, WORD PTR [eax+ecx*2+35096]
  0038d	8b e5		 mov	 esp, ebp
  0038f	5d		 pop	 ebp
  00390	c2 08 00	 ret	 8
$LN48@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00393	0f bf c7	 movsx	 eax, di
  00396	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 263  : 				return GetHeightMapValue(sX, HEIGHTMAP_RAW_YSIZE - 1);

  00397	66 8b 84 46 18
	8a 00 00	 mov	 ax, WORD PTR [esi+eax*2+35352]

; 339  : }

  0039f	5e		 pop	 esi
  003a0	5b		 pop	 ebx
  003a1	8b e5		 mov	 esp, ebp
  003a3	5d		 pop	 ebp
  003a4	c2 08 00	 ret	 8
$LN40@WE_GetHeig:

; 264  : 		}
; 265  : 		else
; 266  : 		{
; 267  : 			if (sX < -1)

  003a7	66 83 ff ff	 cmp	 di, -1
  003ab	7d 7b		 jge	 SHORT $LN54@WE_GetHeig

; 268  : 			{
; 269  : 				if (m_wX <= 0)

  003ad	66 83 be 6c a5
	06 00 00	 cmp	 WORD PTR [esi+435564], 0
  003b5	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  003b8	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  003be	50		 push	 eax
  003bf	77 31		 ja	 SHORT $LN56@WE_GetHeig

; 270  : 				{
; 271  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 3, &pTerrain))

  003c1	80 c2 03	 add	 dl, 3
  003c4	0f b6 c2	 movzx	 eax, dl
  003c7	50		 push	 eax
  003c8	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  003cd	85 c0		 test	 eax, eax
  003cf	0f 84 22 ff ff
	ff		 je	 $LN175@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  003d5	0f bf c3	 movsx	 eax, bx
  003d8	69 c8 06 01 00
	00		 imul	 ecx, eax, 262
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 274  : 						return pTerrain->GetHeightMapValue(-1, sY - YSIZE);

  003de	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
  003e1	5f		 pop	 edi

; 339  : }

  003e2	5e		 pop	 esi
  003e3	5b		 pop	 ebx
  003e4	66 8b 84 01 0a
	82 ff ff	 mov	 ax, WORD PTR [ecx+eax-32246]
  003ec	8b e5		 mov	 esp, ebp
  003ee	5d		 pop	 ebp
  003ef	c2 08 00	 ret	 8
$LN56@WE_GetHeig:

; 275  : 				}
; 276  : 				else
; 277  : 				{
; 278  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 2, &pTerrain))

  003f2	80 c2 02	 add	 dl, 2
  003f5	0f b6 c2	 movzx	 eax, dl
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  003fe	85 c0		 test	 eax, eax
  00400	0f 84 f1 fe ff
	ff		 je	 $LN175@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00406	0f bf c3	 movsx	 eax, bx
  00409	69 d0 83 00 00
	00		 imul	 edx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 281  : 						return pTerrain->GetHeightMapValue(sX + XSIZE, sY - YSIZE);

  0040f	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00412	0f bf cf	 movsx	 ecx, di
  00415	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00416	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00417	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00419	5b		 pop	 ebx
  0041a	66 8b 84 50 0c
	83 ff ff	 mov	 ax, WORD PTR [eax+edx*2-31988]
  00422	8b e5		 mov	 esp, ebp
  00424	5d		 pop	 ebp
  00425	c2 08 00	 ret	 8
$LN54@WE_GetHeig:

; 282  : 				}
; 283  : 			}
; 284  : 			else if (sX >= HEIGHTMAP_RAW_XSIZE - 1)

  00428	b8 82 00 00 00	 mov	 eax, 130		; 00000082H
  0042d	66 3b f8	 cmp	 di, ax
  00430	0f 8c 83 00 00
	00		 jl	 $LN62@WE_GetHeig

; 285  : 			{
; 286  : 				if (m_wX >= sTerrainCouuntX - 1)

  00436	8b 45 fc	 mov	 eax, DWORD PTR _sTerrainCouuntX$1$[ebp]
  00439	0f bf c8	 movsx	 ecx, ax
  0043c	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  00443	49		 dec	 ecx
  00444	3b c1		 cmp	 eax, ecx
  00446	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  0044c	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  0044f	50		 push	 eax
  00450	7c 31		 jl	 SHORT $LN64@WE_GetHeig

; 287  : 				{
; 288  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 3, &pTerrain))

  00452	80 c2 03	 add	 dl, 3
  00455	0f b6 c2	 movzx	 eax, dl
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  0045e	85 c0		 test	 eax, eax
  00460	0f 84 ed fe ff
	ff		 je	 $LN176@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00466	0f bf c3	 movsx	 eax, bx
  00469	69 c8 06 01 00
	00		 imul	 ecx, eax, 262
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 291  : 						return pTerrain->GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, sY - YSIZE);

  0046f	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
  00472	5f		 pop	 edi

; 339  : }

  00473	5e		 pop	 esi
  00474	5b		 pop	 ebx
  00475	66 8b 84 01 10
	83 ff ff	 mov	 ax, WORD PTR [ecx+eax-31984]
  0047d	8b e5		 mov	 esp, ebp
  0047f	5d		 pop	 ebp
  00480	c2 08 00	 ret	 8
$LN64@WE_GetHeig:

; 292  : 				}
; 293  : 				else
; 294  : 				{
; 295  : 					if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 4, &pTerrain))

  00483	80 c2 04	 add	 dl, 4
  00486	0f b6 c2	 movzx	 eax, dl
  00489	50		 push	 eax
  0048a	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  0048f	85 c0		 test	 eax, eax
  00491	0f 84 bc fe ff
	ff		 je	 $LN176@WE_GetHeig
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00497	0f bf c3	 movsx	 eax, bx
  0049a	69 d0 83 00 00
	00		 imul	 edx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 298  : 						return pTerrain->GetHeightMapValue(sX - XSIZE, sY - YSIZE);

  004a0	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  004a3	0f bf cf	 movsx	 ecx, di
  004a6	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  004a7	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  004a8	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  004aa	5b		 pop	 ebx
  004ab	66 8b 84 50 0c
	81 ff ff	 mov	 ax, WORD PTR [eax+edx*2-32500]
  004b3	8b e5		 mov	 esp, ebp
  004b5	5d		 pop	 ebp
  004b6	c2 08 00	 ret	 8
$LN62@WE_GetHeig:

; 299  : 				}
; 300  : 			}
; 301  : 			else
; 302  : 			{
; 303  : 				if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 3, &pTerrain))

  004b9	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  004bc	0f bf ff	 movsx	 edi, di
  004bf	80 c2 03	 add	 dl, 3
  004c2	0f b6 ca	 movzx	 ecx, dl
  004c5	50		 push	 eax
  004c6	51		 push	 ecx
  004c7	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  004cd	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  004d2	85 c0		 test	 eax, eax
  004d4	75 11		 jne	 SHORT $LN70@WE_GetHeig

; 304  : 					return GetHeightMapValue(sX, HEIGHTMAP_RAW_YSIZE - 1);

  004d6	66 8b 84 7e 18
	8a 00 00	 mov	 ax, WORD PTR [esi+edi*2+35352]
  004de	5f		 pop	 edi

; 339  : }

  004df	5e		 pop	 esi
  004e0	5b		 pop	 ebx
  004e1	8b e5		 mov	 esp, ebp
  004e3	5d		 pop	 ebp
  004e4	c2 08 00	 ret	 8
$LN70@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  004e7	0f bf c3	 movsx	 eax, bx
  004ea	69 c8 83 00 00
	00		 imul	 ecx, eax, 131
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 306  : 					return pTerrain->GetHeightMapValue(sX, sY - YSIZE);

  004f0	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  004f3	03 cf		 add	 ecx, edi
  004f5	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  004f6	5e		 pop	 esi
  004f7	5b		 pop	 ebx
  004f8	66 8b 84 48 0c
	82 ff ff	 mov	 ax, WORD PTR [eax+ecx*2-32244]
  00500	8b e5		 mov	 esp, ebp
  00502	5d		 pop	 ebp
  00503	c2 08 00	 ret	 8
$LN38@WE_GetHeig:

; 307  : 			}
; 308  : 		}
; 309  : 	}
; 310  : 	else
; 311  : 	{
; 312  : 		if (sX < -1)

  00506	0f bf db	 movsx	 ebx, bx
  00509	66 83 ff ff	 cmp	 di, -1
  0050d	7d 53		 jge	 SHORT $LN72@WE_GetHeig

; 313  : 		{
; 314  : 			if (m_wX <= 0)

  0050f	66 83 be 6c a5
	06 00 00	 cmp	 WORD PTR [esi+435564], 0
  00517	77 17		 ja	 SHORT $LN74@WE_GetHeig
$LN177@WE_GetHeig:

; 339  : }

  00519	69 c3 06 01 00
	00		 imul	 eax, ebx, 262
  0051f	5f		 pop	 edi
  00520	66 8b 84 30 0a
	05 00 00	 mov	 ax, WORD PTR [eax+esi+1290]
  00528	5e		 pop	 esi
  00529	5b		 pop	 ebx
  0052a	8b e5		 mov	 esp, ebp
  0052c	5d		 pop	 ebp
  0052d	c2 08 00	 ret	 8
$LN74@WE_GetHeig:

; 315  : 				return GetHeightMapValue(-1, sY);
; 316  : 			else
; 317  : 			{
; 318  : 				if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum - 1, &pTerrain))

  00530	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  00533	fe ca		 dec	 dl
  00535	50		 push	 eax
  00536	0f b6 c2	 movzx	 eax, dl
  00539	50		 push	 eax
  0053a	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  0053f	85 c0		 test	 eax, eax
  00541	74 d6		 je	 SHORT $LN177@WE_GetHeig

; 321  : 					return pTerrain->GetHeightMapValue(sX + XSIZE, sY);

  00543	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00546	69 d3 83 00 00
	00		 imul	 edx, ebx, 131
  0054c	0f bf cf	 movsx	 ecx, di
  0054f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  00550	5e		 pop	 esi
  00551	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  00552	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 321  : 					return pTerrain->GetHeightMapValue(sX + XSIZE, sY);

  00554	66 8b 84 50 0c
	06 00 00	 mov	 ax, WORD PTR [eax+edx*2+1548]

; 339  : }

  0055c	8b e5		 mov	 esp, ebp
  0055e	5d		 pop	 ebp
  0055f	c2 08 00	 ret	 8
$LN72@WE_GetHeig:

; 322  : 			}
; 323  : 		}
; 324  : 		else if (sX >= HEIGHTMAP_RAW_XSIZE - 1)

  00562	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00567	66 3b f9	 cmp	 di, cx
  0056a	7c 5e		 jl	 SHORT $LN78@WE_GetHeig

; 325  : 		{
; 326  : 			if (m_wX >= sTerrainCouuntX - 1)

  0056c	0f bf c8	 movsx	 ecx, ax
  0056f	0f b7 86 6c a5
	06 00		 movzx	 eax, WORD PTR [esi+435564]
  00576	49		 dec	 ecx
  00577	3b c1		 cmp	 eax, ecx
  00579	7c 17		 jl	 SHORT $LN80@WE_GetHeig
$LN178@WE_GetHeig:

; 339  : }

  0057b	69 c3 06 01 00
	00		 imul	 eax, ebx, 262
  00581	5f		 pop	 edi
  00582	66 8b 84 30 10
	06 00 00	 mov	 ax, WORD PTR [eax+esi+1552]
  0058a	5e		 pop	 esi
  0058b	5b		 pop	 ebx
  0058c	8b e5		 mov	 esp, ebp
  0058e	5d		 pop	 ebp
  0058f	c2 08 00	 ret	 8
$LN80@WE_GetHeig:

; 327  : 				return GetHeightMapValue(HEIGHTMAP_RAW_XSIZE - 1, sY);
; 328  : 			else
; 329  : 			{
; 330  : 				if (!m_pOwnerOutdoorMap->GetTerrainPointer(byTerrainNum + 1, &pTerrain))

  00592	8b 8e b8 a5 06
	00		 mov	 ecx, DWORD PTR [esi+435640]
  00598	8d 45 0c	 lea	 eax, DWORD PTR _pTerrain$[ebp]
  0059b	50		 push	 eax
  0059c	fe c2		 inc	 dl
  0059e	0f b6 c2	 movzx	 eax, dl
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  005a7	85 c0		 test	 eax, eax
  005a9	74 d0		 je	 SHORT $LN178@WE_GetHeig

; 333  : 					return pTerrain->GetHeightMapValue(sX - XSIZE, sY);

  005ab	8b 45 0c	 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  005ae	69 d3 83 00 00
	00		 imul	 edx, ebx, 131
  005b4	0f bf cf	 movsx	 ecx, di
  005b7	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  005b8	5e		 pop	 esi
  005b9	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  005ba	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 333  : 					return pTerrain->GetHeightMapValue(sX - XSIZE, sY);

  005bc	66 8b 84 50 0c
	04 00 00	 mov	 ax, WORD PTR [eax+edx*2+1036]

; 339  : }

  005c4	8b e5		 mov	 esp, ebp
  005c6	5d		 pop	 ebp
  005c7	c2 08 00	 ret	 8
$LN78@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\PRTerrainLib\Terrain.h

; 152  : 	return m_awRawHeightMap[(sy+1) * HEIGHTMAP_RAW_XSIZE + sx+1];

  005ca	69 c3 83 00 00
	00		 imul	 eax, ebx, 131
$LN172@WE_GetHeig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 339  : }

  005d0	0f bf cf	 movsx	 ecx, di
  005d3	03 c1		 add	 eax, ecx
  005d5	5f		 pop	 edi
  005d6	66 8b 84 46 0c
	05 00 00	 mov	 ax, WORD PTR [esi+eax*2+1292]
  005de	5e		 pop	 esi
  005df	5b		 pop	 ebx
  005e0	8b e5		 mov	 esp, ebp
  005e2	5d		 pop	 ebp
  005e3	c2 08 00	 ret	 8
?WE_GetHeightMapValue@CTerrain@@QAEGFF@Z ENDP		; CTerrain::WE_GetHeightMapValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?CopySettingFromGlobalSetting@CTerrain@@QAEXXZ
_TEXT	SEGMENT
?CopySettingFromGlobalSetting@CTerrain@@QAEXXZ PROC	; CTerrain::CopySettingFromGlobalSetting, COMDAT
; _this$ = ecx

; 137  : 	m_lViewRadius	= m_pOwnerOutdoorMap->GetViewRadius();

  00000	8b 91 b8 a5 06
	00		 mov	 edx, DWORD PTR [ecx+435640]
  00006	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00009	89 81 34 91 03
	00		 mov	 DWORD PTR [ecx+233780], eax

; 138  : 	m_fHeightScale	= m_pOwnerOutdoorMap->GetHeightScale();

  0000f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00012	89 81 38 91 03
	00		 mov	 DWORD PTR [ecx+233784], eax

; 139  : }

  00018	c3		 ret	 0
?CopySettingFromGlobalSetting@CTerrain@@QAEXXZ ENDP	; CTerrain::CopySettingFromGlobalSetting
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?CalculateTerrainPatch@CTerrain@@QAEXXZ
_TEXT	SEGMENT
_byPatchNumY$1 = -8					; size = 1
_byPatchNumX$2 = -4					; size = 1
?CalculateTerrainPatch@CTerrain@@QAEXXZ PROC		; CTerrain::CalculateTerrainPatch, COMDAT
; _this$ = ecx

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 912  : 	for (BYTE byPatchNumY = 0; byPatchNumY < PATCH_YCOUNT; ++byPatchNumY)

  00008	32 ff		 xor	 bh, bh
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	88 7d f8	 mov	 BYTE PTR _byPatchNumY$1[ebp], bh
$LL4@CalculateT:

; 913  : 		for (BYTE byPatchNumX = 0; byPatchNumX < PATCH_XCOUNT; ++byPatchNumX)

  00010	8b 75 f8	 mov	 esi, DWORD PTR _byPatchNumY$1[ebp]
  00013	32 db		 xor	 bl, bl
  00015	88 5d fc	 mov	 BYTE PTR _byPatchNumX$2[ebp], bl
$LL7@CalculateT:

; 914  : 			_CalculateTerrainPatch(byPatchNumX, byPatchNumY);

  00018	56		 push	 esi
  00019	ff 75 fc	 push	 DWORD PTR _byPatchNumX$2[ebp]
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_CalculateTerrainPatch@CTerrain@@IAEXEE@Z ; CTerrain::_CalculateTerrainPatch
  00023	fe c3		 inc	 bl
  00025	88 5d fc	 mov	 BYTE PTR _byPatchNumX$2[ebp], bl
  00028	80 fb 08	 cmp	 bl, 8
  0002b	72 eb		 jb	 SHORT $LL7@CalculateT

; 912  : 	for (BYTE byPatchNumY = 0; byPatchNumY < PATCH_YCOUNT; ++byPatchNumY)

  0002d	fe c7		 inc	 bh
  0002f	88 7d f8	 mov	 BYTE PTR _byPatchNumY$1[ebp], bh
  00032	80 ff 08	 cmp	 bh, 8
  00035	72 d9		 jb	 SHORT $LL4@CalculateT

; 915  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?CalculateTerrainPatch@CTerrain@@QAEXXZ ENDP		; CTerrain::CalculateTerrainPatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?LoadHeightMap@CTerrain@@QAE_NPBD@Z
_TEXT	SEGMENT
_dwStart$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
tv176 = 8						; size = 4
_c_pszFileName$ = 8					; size = 4
?LoadHeightMap@CTerrain@@QAE_NPBD@Z PROC		; CTerrain::LoadHeightMap, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 471  : 	CTerrainImpl::LoadHeightMap(c_pszFileName);

  00009	ff 75 08	 push	 DWORD PTR _c_pszFileName$[ebp]
  0000c	8b c1		 mov	 eax, ecx
  0000e	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00011	e8 00 00 00 00	 call	 ?LoadHeightMap@CTerrainImpl@@IAE_NPBD@Z ; CTerrainImpl::LoadHeightMap

; 472  : 	DWORD dwStart = ELTimer_GetMSec();

  00016	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0001b	89 45 f8	 mov	 DWORD PTR _dwStart$1$[ebp], eax
  0001e	33 db		 xor	 ebx, ebx
  00020	c7 45 08 81 00
	00 00		 mov	 DWORD PTR tv176[ebp], 129 ; 00000081H
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@LoadHeight:

; 474  : 		for (WORD x = 0; x < NORMALMAP_XSIZE; ++x)

  00030	33 f6		 xor	 esi, esi
  00032	bf 81 00 00 00	 mov	 edi, 129		; 00000081H
$LL7@LoadHeight:

; 475  : 			CalculateNormal(x, y);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0003a	53		 push	 ebx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?CalculateNormal@CTerrain@@IAEXJJ@Z ; CTerrain::CalculateNormal
  00041	46		 inc	 esi
  00042	83 ef 01	 sub	 edi, 1
  00045	75 f0		 jne	 SHORT $LL7@LoadHeight

; 473  : 	for (WORD y = 0; y < NORMALMAP_YSIZE; ++y)

  00047	43		 inc	 ebx
  00048	83 6d 08 01	 sub	 DWORD PTR tv176[ebp], 1
  0004c	75 e2		 jne	 SHORT $LL4@LoadHeight

; 476  : 
; 477  : 	Tracef("LoadHeightMap::CalculateNormal %d ms\n", ELTimer_GetMSec() - dwStart);

  0004e	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00053	2b 45 f8	 sub	 eax, DWORD PTR _dwStart$1$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@DNKMEFFO@LoadHeightMap?3?3CalculateNormal?5@
  0005c	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00061	83 c4 08	 add	 esp, 8

; 478  : 	return true;

  00064	b0 01		 mov	 al, 1
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 479  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?LoadHeightMap@CTerrain@@QAE_NPBD@Z ENDP		; CTerrain::LoadHeightMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?RAW_LoadTileMap@CTerrain@@QAE_NPBD_N@Z
_TEXT	SEGMENT
_c_pszFileName$ = 8					; size = 4
_bBGLoading$ = 12					; size = 1
?RAW_LoadTileMap@CTerrain@@QAE_NPBD_N@Z PROC		; CTerrain::RAW_LoadTileMap, COMDAT
; _this$ = ecx

; 461  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 462  : 	CTerrainImpl::RAW_LoadTileMap(c_pszFileName);

  00005	ff 75 08	 push	 DWORD PTR _c_pszFileName$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	e8 00 00 00 00	 call	 ?RAW_LoadTileMap@CTerrainImpl@@IAE_NPBD@Z ; CTerrainImpl::RAW_LoadTileMap

; 463  : 	DWORD dwStart = ELTimer_GetMSec();

  0000f	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 464  : 	RAW_AllocateSplats(bBGLoading);

  00014	ff 75 0c	 push	 DWORD PTR _bBGLoading$[ebp]
  00017	8b cf		 mov	 ecx, edi
  00019	8b f0		 mov	 esi, eax
  0001b	e8 00 00 00 00	 call	 ?RAW_AllocateSplats@CTerrain@@IAEX_N@Z ; CTerrain::RAW_AllocateSplats

; 465  : 	Tracef("CTerrain::RAW_AllocateSplats %d\n", ELTimer_GetMSec() - dwStart);

  00020	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00025	2b c6		 sub	 eax, esi
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BJJCGNIJ@CTerrain?3?3RAW_AllocateSplats?5?$CFd@
  0002d	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00032	83 c4 08	 add	 esp, 8

; 466  : 	return true;

  00035	b0 01		 mov	 al, 1
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 467  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?RAW_LoadTileMap@CTerrain@@QAE_NPBD_N@Z ENDP		; CTerrain::RAW_LoadTileMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?SetMapOutDoor@CTerrain@@QAEXPAVCMapOutdoor@@@Z
_TEXT	SEGMENT
_pOwnerOutdoorMap$ = 8					; size = 4
?SetMapOutDoor@CTerrain@@QAEXPAVCMapOutdoor@@@Z PROC	; CTerrain::SetMapOutDoor, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	m_pOwnerOutdoorMap=pOwnerOutdoorMap;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwnerOutdoorMap$[ebp]
  00006	89 81 b8 a5 06
	00		 mov	 DWORD PTR [ecx+435640], eax

; 46   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetMapOutDoor@CTerrain@@QAEXPAVCMapOutdoor@@@Z ENDP	; CTerrain::SetMapOutDoor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ?Clear@CTerrain@@UAEXXZ
_TEXT	SEGMENT
?Clear@CTerrain@@UAEXXZ PROC				; CTerrain::Clear, COMDAT
; _this$ = ecx

; 49   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 50   : 	DeallocateMarkedSplats();

  00003	e8 00 00 00 00	 call	 ?DeallocateMarkedSplats@CTerrain@@QAEXXZ ; CTerrain::DeallocateMarkedSplats

; 51   : 	CTerrainImpl::Clear();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?Clear@CTerrainImpl@@MAEXXZ ; CTerrainImpl::Clear

; 52   :   	Initialize();

  0000f	8b ce		 mov	 ecx, esi
  00011	5e		 pop	 esi
  00012	e9 00 00 00 00	 jmp	 ?Initialize@CTerrain@@IAE_NXZ ; CTerrain::Initialize
?Clear@CTerrain@@UAEXXZ ENDP				; CTerrain::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ??1CTerrain@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTerrain@@UAE@XZ PROC				; CTerrain::~CTerrain, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTerrain@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTerrain@@6BCTerrainImpl@@@
  0002c	c7 86 50 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435536], OFFSET ??_7CTerrain@@6BCGraphicBase@@@

; 38   : 	DeallocateMarkedSplats();

  00036	e8 00 00 00 00	 call	 ?DeallocateMarkedSplats@CTerrain@@QAEXXZ ; CTerrain::DeallocateMarkedSplats

; 39   : 	RAW_DeallocateSplats();

  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?RAW_DeallocateSplats@CTerrain@@IAEX_N@Z ; CTerrain::RAW_DeallocateSplats

; 40   : 	Clear();

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?Clear@CTerrain@@UAEXXZ	; CTerrain::Clear

; 41   : }

  0004b	68 00 00 00 00	 push	 OFFSET ??1CTerrainPatch@@QAE@XZ ; CTerrainPatch::~CTerrainPatch
  00050	6a 40		 push	 64			; 00000040H
  00052	6a 70		 push	 112			; 00000070H
  00054	8d 86 d8 a5 06
	00		 lea	 eax, DWORD PTR [esi+435672]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00060	8b 8e cc a5 06
	00		 mov	 ecx, DWORD PTR [esi+435660]
  00066	85 c9		 test	 ecx, ecx
  00068	74 33		 je	 SHORT $LN6@CTerrain

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006a	8b 86 d4 a5 06
	00		 mov	 eax, DWORD PTR [esi+435668]
  00070	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00072	83 e0 fc	 and	 eax, -4			; fffffffcH
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0007c	c7 86 cc a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435660], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00086	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00089	c7 86 d0 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435664], 0

; 1699 :             _Myend   = pointer();

  00093	c7 86 d4 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435668], 0
$LN6@CTerrain:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 41   : }

  0009d	8d 8e 94 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435604]
  000a3	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  000a8	8d 8e 74 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435572]
  000ae	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000b3	8b 86 68 a5 06
	00		 mov	 eax, DWORD PTR [esi+435560]
  000b9	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000bc	72 10		 jb	 SHORT $LN14@CTerrain

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000be	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	50		 push	 eax
  000c0	ff b6 54 a5 06
	00		 push	 DWORD PTR [esi+435540]
  000c6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cb	83 c4 08	 add	 esp, 8
$LN14@CTerrain:
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 41   : }

  000ce	8d 8e 50 a5 06
	00		 lea	 ecx, DWORD PTR [esi+435536]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000d4	c7 86 64 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [esi+435556], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000de	c7 86 68 a5 06
	00 0f 00 00 00	 mov	 DWORD PTR [esi+435560], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000e8	c6 86 54 a5 06
	00 00		 mov	 BYTE PTR [esi+435540], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 41   : }

  000ef	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  000f4	8b ce		 mov	 ecx, esi
  000f6	e8 00 00 00 00	 call	 ??1CTerrainImpl@@UAE@XZ	; CTerrainImpl::~CTerrainImpl
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
  0010c	cc		 int	 3
  0010d	cc		 int	 3
  0010e	cc		 int	 3
  0010f	cc		 int	 3
  00110	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTerrain@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTerrain@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTerrain@@UAE@XZ ENDP				; CTerrain::~CTerrain
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp
;	COMDAT ??0CTerrain@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTerrain@@QAE@XZ PROC				; CTerrain::CTerrain, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTerrain@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CTerrainImpl@@QAE@XZ	; CTerrainImpl::CTerrainImpl
  0002f	8d 8f 50 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435536]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00041	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CTerrain@@6BCTerrainImpl@@@
  00047	c7 87 50 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [edi+435536], OFFSET ??_7CTerrain@@6BCGraphicBase@@@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00051	c7 87 64 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [edi+435556], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005b	c7 87 68 a5 06
	00 0f 00 00 00	 mov	 DWORD PTR [edi+435560], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00065	c6 87 54 a5 06
	00 00		 mov	 BYTE PTR [edi+435540], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 30   : {

  0006c	8d 8f 74 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435572]
  00072	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00076	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0007b	8d 8f 94 a5 06
	00		 lea	 ecx, DWORD PTR [edi+435604]
  00081	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00085	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008a	c7 87 cc a5 06
	00 00 00 00 00	 mov	 DWORD PTR [edi+435660], 0
  00094	c7 87 d0 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [edi+435664], 0
  0009e	c7 87 d4 a5 06
	00 00 00 00 00	 mov	 DWORD PTR [edi+435668], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\AreaTerrain.cpp

; 30   : {

  000a8	68 00 00 00 00	 push	 OFFSET ??1CTerrainPatch@@QAE@XZ ; CTerrainPatch::~CTerrainPatch
  000ad	68 00 00 00 00	 push	 OFFSET ??0CTerrainPatch@@QAE@XZ ; CTerrainPatch::CTerrainPatch
  000b2	6a 40		 push	 64			; 00000040H
  000b4	6a 70		 push	 112			; 00000070H
  000b6	8d 87 d8 a5 06
	00		 lea	 eax, DWORD PTR [edi+435672]
  000bc	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 31   : 	memset(&m_lpAlphaTexture, 0, sizeof(m_lpAlphaTexture));

  000c6	68 00 04 00 00	 push	 1024			; 00000400H
  000cb	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ce	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000d2	6a 00		 push	 0
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _memset
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 	memset(&m_lpMarkedTexture, 0, sizeof(m_lpMarkedTexture));

  000dd	c7 87 e0 d1 07
	00 00 00 00 00	 mov	 DWORD PTR [edi+512480], 0

; 33   : 	Initialize();

  000e7	8b cf		 mov	 ecx, edi
  000e9	e8 00 00 00 00	 call	 ?Initialize@CTerrain@@IAE_NXZ ; CTerrain::Initialize

; 34   : }

  000ee	8b c7		 mov	 eax, edi
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTerrain@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTerrainImpl@@UAE@XZ	; CTerrainImpl::~CTerrainImpl
__unwindfunclet$??0CTerrain@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 50 a5 06
	00		 add	 ecx, 435536		; 0006a550H
  00011	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CTerrain@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 54 a5 06
	00		 add	 ecx, 435540		; 0006a554H
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CTerrain@@QAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 74 a5 06
	00		 add	 ecx, 435572		; 0006a574H
  0002d	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CTerrain@@QAE@XZ$4:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 94 a5 06
	00		 add	 ecx, 435604		; 0006a594H
  0003b	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CTerrain@@QAE@XZ$5:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 cc a5 06
	00		 add	 ecx, 435660		; 0006a5ccH
  00049	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$??0CTerrain@@QAE@XZ$6:
  0004e	68 00 00 00 00	 push	 OFFSET ??1CTerrainPatch@@QAE@XZ ; CTerrainPatch::~CTerrainPatch
  00053	6a 40		 push	 64			; 00000040H
  00055	6a 70		 push	 112			; 00000070H
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	05 d8 a5 06 00	 add	 eax, 435672		; 0006a5d8H
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
__ehhandler$??0CTerrain@@QAE@XZ:
  0006b	90		 npad	 1
  0006c	90		 npad	 1
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTerrain@@QAE@XZ
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTerrain@@QAE@XZ ENDP				; CTerrain::CTerrain
; Function compile flags: /Ogtp
;	COMDAT ??1SHardwareTransformPatch@CTerrainPatch@@QAE@XZ
_TEXT	SEGMENT
??1SHardwareTransformPatch@CTerrainPatch@@QAE@XZ PROC	; CTerrainPatch::SHardwareTransformPatch::~SHardwareTransformPatch, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
??1SHardwareTransformPatch@CTerrainPatch@@QAE@XZ ENDP	; CTerrainPatch::SHardwareTransformPatch::~SHardwareTransformPatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h
;	COMDAT ??1CTerrainPatch@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTerrainPatch@@QAE@XZ PROC				; CTerrainPatch::~CTerrainPatch, COMDAT
; _this$ = ecx

; 57   : 	~CTerrainPatch()									{ Clear(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTerrainPatch@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	e8 00 00 00 00	 call	 ?Clear@CTerrainPatch@@QAEXXZ ; CTerrainPatch::Clear
  0002a	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0002d	e8 00 00 00 00	 call	 ??1SSoftwareTransformPatch@CTerrainPatch@@QAE@XZ ; CTerrainPatch::SSoftwareTransformPatch::~SSoftwareTransformPatch
  00032	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00035	e8 00 00 00 00	 call	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
  0003a	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0003d	e8 00 00 00 00	 call	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	5e		 pop	 esi
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTerrainPatch@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTerrainPatch@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTerrainPatch@@QAE@XZ ENDP				; CTerrainPatch::~CTerrainPatch
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\TerrainPatch.h
;	COMDAT ??0CTerrainPatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTerrainPatch@@QAE@XZ PROC				; CTerrainPatch::CTerrainPatch, COMDAT
; _this$ = ecx

; 56   : 	CTerrainPatch()									{ Clear(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTerrainPatch@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0002e	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer
  00033	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00040	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer
  00045	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00048	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004c	e8 00 00 00 00	 call	 ??0SSoftwareTransformPatch@CTerrainPatch@@QAE@XZ ; CTerrainPatch::SSoftwareTransformPatch::SSoftwareTransformPatch
  00051	8b ce		 mov	 ecx, esi
  00053	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00057	e8 00 00 00 00	 call	 ?Clear@CTerrainPatch@@QAEXXZ ; CTerrainPatch::Clear
  0005c	8b c6		 mov	 eax, esi
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTerrainPatch@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 24	 add	 ecx, 36			; 00000024H
  00006	e9 00 00 00 00	 jmp	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
__unwindfunclet$??0CTerrainPatch@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00011	e9 00 00 00 00	 jmp	 ??1SHardwareTransformPatch@CTerrainPatch@@QAE@XZ
__unwindfunclet$??0CTerrainPatch@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0001c	e9 00 00 00 00	 jmp	 ??1SSoftwareTransformPatch@CTerrainPatch@@QAE@XZ ; CTerrainPatch::SSoftwareTransformPatch::~SSoftwareTransformPatch
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??0CTerrainPatch@@QAE@XZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTerrainPatch@@QAE@XZ
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTerrainPatch@@QAE@XZ ENDP				; CTerrainPatch::CTerrainPatch
; Function compile flags: /Ogtp
;	COMDAT ??0HardwareTransformPatch_SSourceVertex@@QAE@XZ
_TEXT	SEGMENT
??0HardwareTransformPatch_SSourceVertex@@QAE@XZ PROC	; HardwareTransformPatch_SSourceVertex::HardwareTransformPatch_SSourceVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0HardwareTransformPatch_SSourceVertex@@QAE@XZ ENDP	; HardwareTransformPatch_SSourceVertex::HardwareTransformPatch_SSourceVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
