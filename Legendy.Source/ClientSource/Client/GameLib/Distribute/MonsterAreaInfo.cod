; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CMonsterAreaInfo@@QAE@XZ			; CMonsterAreaInfo::CMonsterAreaInfo
PUBLIC	??1CMonsterAreaInfo@@UAE@XZ			; CMonsterAreaInfo::~CMonsterAreaInfo
PUBLIC	?Clear@CMonsterAreaInfo@@QAEXXZ			; CMonsterAreaInfo::Clear
PUBLIC	?SetOrigin@CMonsterAreaInfo@@QAEXJJ@Z		; CMonsterAreaInfo::SetOrigin
PUBLIC	?GetOrigin@CMonsterAreaInfo@@QAEXPAJ0@Z		; CMonsterAreaInfo::GetOrigin
PUBLIC	?SetSize@CMonsterAreaInfo@@QAEXJJ@Z		; CMonsterAreaInfo::SetSize
PUBLIC	?GetSize@CMonsterAreaInfo@@QAEXPAJ0@Z		; CMonsterAreaInfo::GetSize
PUBLIC	?SetMonsterCount@CMonsterAreaInfo@@QAEXK@Z	; CMonsterAreaInfo::SetMonsterCount
PUBLIC	?SetMonsterDirection@CMonsterAreaInfo@@QAEXW4EMonsterDir@1@@Z ; CMonsterAreaInfo::SetMonsterDirection
PUBLIC	?RemoveAllMonsters@CMonsterAreaInfo@@QAEXXZ	; CMonsterAreaInfo::RemoveAllMonsters
PUBLIC	?GetTempMonsterPos@CMonsterAreaInfo@@QAE?AUD3DXVECTOR2@@K@Z ; CMonsterAreaInfo::GetTempMonsterPos
PUBLIC	?SetLRTB@CMonsterAreaInfo@@IAEXXZ		; CMonsterAreaInfo::SetLRTB
PUBLIC	??1?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::~vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Xlength
PUBLIC	??_GCMonsterAreaInfo@@UAEPAXI@Z			; CMonsterAreaInfo::`scalar deleting destructor'
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAXPAUD3DXVECTOR2@@QAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR2> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@PAU1@IAAV?$allocator@UD3DXVECTOR2@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR2> >
PUBLIC	??$_Uninitialized_move@PAUD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR2 *,std::allocator<D3DXVECTOR2> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CMonsterAreaInfo@@6B@			; CMonsterAreaInfo::`vftable'
PUBLIC	??_C@_06HCBIANPB@Noname@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CMonsterAreaInfo@@6B@			; CMonsterAreaInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterAreaInfo@@@8			; CMonsterAreaInfo `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterAreaInfo@@8			; CMonsterAreaInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterAreaInfo@@8			; CMonsterAreaInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterAreaInfo@@8		; CMonsterAreaInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c8efa35
PUBLIC	__real@42340000
PUBLIC	__real@42b40000
PUBLIC	__real@43070000
PUBLIC	__real@43340000
PUBLIC	__real@43610000
PUBLIC	__real@43870000
PUBLIC	__real@439d8000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	_D3DXVec2Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	??_ECMonsterAreaInfo@@UAEPAXI@Z:PROC		; CMonsterAreaInfo::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@439d8000
CONST	SEGMENT
__real@439d8000 DD 0439d8000r			; 315
CONST	ENDS
;	COMDAT __real@43870000
CONST	SEGMENT
__real@43870000 DD 043870000r			; 270
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43070000
CONST	SEGMENT
__real@43070000 DD 043070000r			; 135
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CMonsterAreaInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterAreaInfo@@8 DD FLAT:??_R0?AVCMonsterAreaInfo@@@8 ; CMonsterAreaInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterAreaInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterAreaInfo@@8
rdata$r	SEGMENT
??_R2CMonsterAreaInfo@@8 DD FLAT:??_R1A@?0A@EA@CMonsterAreaInfo@@8 ; CMonsterAreaInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterAreaInfo@@8
rdata$r	SEGMENT
??_R3CMonsterAreaInfo@@8 DD 00H				; CMonsterAreaInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterAreaInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterAreaInfo@@@8
data$r	SEGMENT
??_R0?AVCMonsterAreaInfo@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterAreaInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterAreaInfo@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMonsterAreaInfo@@6B@
rdata$r	SEGMENT
??_R4CMonsterAreaInfo@@6B@ DD 00H			; CMonsterAreaInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterAreaInfo@@@8
	DD	FLAT:??_R3CMonsterAreaInfo@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCBIANPB@Noname@
CONST	SEGMENT
??_C@_06HCBIANPB@Noname@ DB 'Noname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CMonsterAreaInfo@@6B@
CONST	SEGMENT
??_7CMonsterAreaInfo@@6B@ DD FLAT:??_R4CMonsterAreaInfo@@6B@ ; CMonsterAreaInfo::`vftable'
	DD	FLAT:??_ECMonsterAreaInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CMonsterAreaInfo@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMonsterAreaInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$3
__ehfuncinfo$??0CMonsterAreaInfo@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CMonsterAreaInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z PROC ; std::_Uninitialized_move<D3DXVECTOR2 *,std::allocator<D3DXVECTOR2> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00009	56		 push	 esi

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 1509 :         ++_Last;

  00018	83 c1 08	 add	 ecx, 8

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1509 :         ++_Last;

  0001e	83 c0 08	 add	 eax, 8

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:
  00025	5e		 pop	 esi

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAUD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z ENDP ; std::_Uninitialized_move<D3DXVECTOR2 *,std::allocator<D3DXVECTOR2> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@PAU1@IAAV?$allocator@UD3DXVECTOR2@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@PAU1@IAAV?$allocator@UD3DXVECTOR2@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR2> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00009	85 c9		 test	 ecx, ecx
  0000b	74 03		 je	 SHORT $LN4@Uninitiali
  0000d	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
$LN4@Uninitiali:

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();
; 1838 :     }
; 1839 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@PAU1@IAAV?$allocator@UD3DXVECTOR2@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR2> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv353 = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1183 :         if (_Newsize > max_size()) {

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00011	77 75		 ja	 SHORT $LN36@Resize_rea

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00016	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001d	c1 f9 03	 sar	 ecx, 3

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00020	8b d1		 mov	 edx, ecx
  00022	d1 ea		 shr	 edx, 1
  00024	2b c2		 sub	 eax, edx
  00026	3b c8		 cmp	 ecx, eax
  00028	77 10		 ja	 SHORT $LN34@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0002a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0002d	3b c7		 cmp	 eax, edi
  0002f	72 09		 jb	 SHORT $LN34@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00031	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00036	77 55		 ja	 SHORT $LN37@Resize_rea
  00038	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN34@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0003a	8b c7		 mov	 eax, edi
$LN18@Resize_rea:
  0003c	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00040	89 45 08	 mov	 DWORD PTR tv353[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00043	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00048	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00049	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0004b	53		 push	 ebx
  0004c	ff 76 04	 push	 DWORD PTR [esi+4]
  0004f	ff 36		 push	 DWORD PTR [esi]
  00051	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR2 *,std::allocator<D3DXVECTOR2> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00058	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0005b	85 c9		 test	 ecx, ecx
  0005d	74 12		 je	 SHORT $LN29@Resize_rea

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00062	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00064	83 e0 f8	 and	 eax, -8			; fffffff8H
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0006e	83 c4 08	 add	 esp, 8
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00071	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
  00074	89 1e		 mov	 DWORD PTR [esi], ebx
  00076	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00079	8b 45 08	 mov	 eax, DWORD PTR tv353[ebp]
  0007c	03 c3		 add	 eax, ebx
  0007e	5f		 pop	 edi
  0007f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx

; 1208 :     }

  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Resize_rea:

; 1184 :             _Xlength();

  00088	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Xlength
$LN37@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0008d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN33@Resize_rea:
  00092	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAXPAUD3DXVECTOR2@@QAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAXPAUD3DXVECTOR2@@QAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR2> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAXPAUD3DXVECTOR2@@QAU1@AAV?$allocator@UD3DXVECTOR2@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR2> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterAreaInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterAreaInfo@@UAEPAXI@Z PROC			; CMonsterAreaInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterAreaInfo@@UAE@XZ ; CMonsterAreaInfo::~CMonsterAreaInfo
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 9c 00 00 00	 push	 156			; 0000009cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMonsterAreaInfo@@UAEPAXI@Z ENDP			; CMonsterAreaInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::~vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::~vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?SetLRTB@CMonsterAreaInfo@@IAEXXZ
_TEXT	SEGMENT
?SetLRTB@CMonsterAreaInfo@@IAEXXZ PROC			; CMonsterAreaInfo::SetLRTB, COMDAT
; _this$ = ecx

; 56   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 57   : 	m_lLeft = m_lOriginX - m_lSizeX;

  00005	8b 4b 70	 mov	 ecx, DWORD PTR [ebx+112]
  00008	8b c1		 mov	 eax, ecx
  0000a	8b 7b 78	 mov	 edi, DWORD PTR [ebx+120]
  0000d	2b c7		 sub	 eax, edi

; 58   : 	m_lTop = m_lOriginY - m_lSizeY;

  0000f	8b 73 74	 mov	 esi, DWORD PTR [ebx+116]
  00012	8b 53 7c	 mov	 edx, DWORD PTR [ebx+124]
  00015	89 83 80 00 00
	00		 mov	 DWORD PTR [ebx+128], eax
  0001b	8b c6		 mov	 eax, esi
  0001d	2b c2		 sub	 eax, edx
  0001f	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax

; 59   : 	m_lRight = m_lOriginX + m_lSizeX;

  00025	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00028	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax

; 60   : 	m_lBottom = m_lOriginY + m_lSizeY;

  0002e	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	89 83 8c 00 00
	00		 mov	 DWORD PTR [ebx+140], eax
  00039	5b		 pop	 ebx

; 61   : }

  0003a	c3		 ret	 0
?SetLRTB@CMonsterAreaInfo@@IAEXXZ ENDP			; CMonsterAreaInfo::SetLRTB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?GetTempMonsterPos@CMonsterAreaInfo@@QAE?AUD3DXVECTOR2@@K@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_dwIndex$ = 12						; size = 4
?GetTempMonsterPos@CMonsterAreaInfo@@QAE?AUD3DXVECTOR2@@K@Z PROC ; CMonsterAreaInfo::GetTempMonsterPos, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  00009	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0000f	2b c2		 sub	 eax, edx
  00011	c1 f8 03	 sar	 eax, 3
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 143  : {

  00014	56		 push	 esi

; 144  : 	if (dwIndex >= m_TempMonsterPosVector.size())

  00015	8b 75 0c	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00018	3b f0		 cmp	 esi, eax
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	72 12		 jb	 SHORT $LN2@GetTempMon
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 41   :     x = fx;

  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 42   :     y = fy;

  00025	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002c	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 147  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN2@GetTempMon:

; 145  : 		return D3DXVECTOR2(0.0f, 0.0f);
; 146  : 	return m_TempMonsterPosVector[dwIndex];

  00031	8b 0c f2	 mov	 ecx, DWORD PTR [edx+esi*8]
  00034	89 08		 mov	 DWORD PTR [eax], ecx
  00036	8b 4c f2 04	 mov	 ecx, DWORD PTR [edx+esi*8+4]
  0003a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003d	5e		 pop	 esi

; 147  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?GetTempMonsterPos@CMonsterAreaInfo@@QAE?AUD3DXVECTOR2@@K@Z ENDP ; CMonsterAreaInfo::GetTempMonsterPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?RemoveAllMonsters@CMonsterAreaInfo@@QAEXXZ
_TEXT	SEGMENT
?RemoveAllMonsters@CMonsterAreaInfo@@QAEXXZ PROC	; CMonsterAreaInfo::RemoveAllMonsters, COMDAT
; _this$ = ecx

; 124  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00003	6a 06		 push	 6
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_06HCBIANPB@Noname@
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 129  : 	m_strGroupName.assign("Noname");

  0000a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	6a 06		 push	 6
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_06HCBIANPB@Noname@
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 130  : 	m_strLeaderName.assign("Noname");

  00027	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002f	6a 06		 push	 6
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_06HCBIANPB@Noname@
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 134  : 	m_strMonsterName.assign("Noname");

  00036	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00039	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00040	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 136  : 	SetMonsterCount(0);

  0004c	6a 00		 push	 0
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?SetMonsterCount@CMonsterAreaInfo@@QAEXK@Z ; CMonsterAreaInfo::SetMonsterCount

; 137  : 	SetMonsterDirection(DIR_NORTH);

  00055	6a 01		 push	 1
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?SetMonsterDirection@CMonsterAreaInfo@@QAEXW4EMonsterDir@1@@Z ; CMonsterAreaInfo::SetMonsterDirection

; 138  : 
; 139  : 	m_TempMonsterPosVector.clear();

  0005e	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00064	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  0006a	5e		 pop	 esi

; 140  : }

  0006b	c3		 ret	 0
?RemoveAllMonsters@CMonsterAreaInfo@@QAEXXZ ENDP	; CMonsterAreaInfo::RemoveAllMonsters
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?SetMonsterDirection@CMonsterAreaInfo@@QAEXW4EMonsterDir@1@@Z
_TEXT	SEGMENT
_matRotation$ = -80					; size = 64
_v3Direction$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_eMonsterDir$ = 8					; size = 4
?SetMonsterDirection@CMonsterAreaInfo@@QAEXW4EMonsterDir@1@@Z PROC ; CMonsterAreaInfo::SetMonsterDirection, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 82   : 	m_eMonsterDir = eMonsterDir;

  00010	8b 45 08	 mov	 eax, DWORD PTR _eMonsterDir$[ebp]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _v3Direction$[ebp], 0

; 181  :     y = fy;

  0001d	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _v3Direction$[ebp+4], 1065353216 ; 3f800000H

; 182  :     z = fz;

  00024	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _v3Direction$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 81   : {

  0002b	56		 push	 esi
  0002c	8b f1		 mov	 esi, ecx

; 82   : 	m_eMonsterDir = eMonsterDir;

  0002e	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 83   : 	D3DXMATRIX matRotation;
; 84   : 	D3DXVECTOR3 v3Direction(0.0f, 1.0f, 0.0f);
; 85   : 	float fDegree = 0.0f;
; 86   : 	switch(m_eMonsterDir)

  00031	83 f8 08	 cmp	 eax, 8
  00034	77 68		 ja	 SHORT $LN2@SetMonster
  00036	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@SetMonster[eax*4]
$LN4@SetMonster:

; 87   : 	{
; 88   : 	case DIR_RANDOM:
; 89   : 		fDegree = (float) random_range(0, 7) * 45.0f;

  0003d	6a 07		 push	 7
  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  00046	83 c4 08	 add	 esp, 8
  00049	66 0f 6e c0	 movd	 xmm0, eax
  0004d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00050	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42340000

; 90   : 		break;

  00058	eb 44		 jmp	 SHORT $LN2@SetMonster
$LN6@SetMonster:

; 91   : 	case DIR_NORTH:
; 92   : 		fDegree = 0.0f;
; 93   : 		break;
; 94   : 	case DIR_NORTHEAST:
; 95   : 		fDegree = 45.0f;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42340000

; 96   : 		break;

  00062	eb 3a		 jmp	 SHORT $LN2@SetMonster
$LN7@SetMonster:

; 97   : 	case DIR_EAST:
; 98   : 		fDegree = 90.0f;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42b40000

; 99   : 		break;

  0006c	eb 30		 jmp	 SHORT $LN2@SetMonster
$LN8@SetMonster:

; 100  : 	case DIR_SOUTHEAST:
; 101  : 		fDegree = 135.0f;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43070000

; 102  : 		break;

  00076	eb 26		 jmp	 SHORT $LN2@SetMonster
$LN9@SetMonster:

; 103  : 	case DIR_SOUTH:
; 104  : 		fDegree = 180.0f;

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43340000

; 105  : 		break;

  00080	eb 1c		 jmp	 SHORT $LN2@SetMonster
$LN10@SetMonster:

; 106  : 	case DIR_SOUTHWEST:
; 107  : 		fDegree = 225.0f;

  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43610000

; 108  : 		break;

  0008a	eb 12		 jmp	 SHORT $LN2@SetMonster
$LN11@SetMonster:

; 109  : 	case DIR_WEST:
; 110  : 		fDegree = 270.0f;

  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43870000

; 111  : 		break;

  00094	eb 08		 jmp	 SHORT $LN2@SetMonster
$LN12@SetMonster:

; 112  : 	case DIR_NORTHWEST:
; 113  : 		fDegree = 315.0f;

  00096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@439d8000
$LN2@SetMonster:

; 114  : 		break;
; 115  : 	}
; 116  : 	D3DXMatrixRotationZ(&matRotation, -D3DXToRadian(fDegree));

  0009e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000a6	8d 45 b0	 lea	 eax, DWORD PTR _matRotation$[ebp]
  000a9	51		 push	 ecx
  000aa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 117  : 	D3DXVec3TransformCoord(&v3Direction, &v3Direction, &matRotation);

  000bc	8d 45 b0	 lea	 eax, DWORD PTR _matRotation$[ebp]
  000bf	50		 push	 eax
  000c0	8d 45 f0	 lea	 eax, DWORD PTR _v3Direction$[ebp]
  000c3	50		 push	 eax
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 118  : 	m_v2Monsterdirection.x = v3Direction.x;

  000ca	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _v3Direction$[ebp]
  000cf	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  000d2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 119  : 	m_v2Monsterdirection.y = v3Direction.y;

  000d6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v3Direction$[ebp+4]

; 120  : 	D3DXVec2Normalize(&m_v2Monsterdirection, &m_v2Monsterdirection);

  000db	50		 push	 eax
  000dc	50		 push	 eax
  000dd	f3 0f 11 46 68	 movss	 DWORD PTR [esi+104], xmm0
  000e2	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8

; 121  : }

  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	5e		 pop	 esi
  000ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN16@SetMonster:
  000f8	00 00 00 00	 DD	 $LN4@SetMonster
  000fc	00 00 00 00	 DD	 $LN2@SetMonster
  00100	00 00 00 00	 DD	 $LN6@SetMonster
  00104	00 00 00 00	 DD	 $LN7@SetMonster
  00108	00 00 00 00	 DD	 $LN8@SetMonster
  0010c	00 00 00 00	 DD	 $LN9@SetMonster
  00110	00 00 00 00	 DD	 $LN10@SetMonster
  00114	00 00 00 00	 DD	 $LN11@SetMonster
  00118	00 00 00 00	 DD	 $LN12@SetMonster
?SetMonsterDirection@CMonsterAreaInfo@@QAEXW4EMonsterDir@1@@Z ENDP ; CMonsterAreaInfo::SetMonsterDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?SetMonsterCount@CMonsterAreaInfo@@QAEXK@Z
_TEXT	SEGMENT
_dwI$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
$T1 = -1						; size = 1
_dwCount$ = 8						; size = 4
?SetMonsterCount@CMonsterAreaInfo@@QAEXK@Z PROC		; CMonsterAreaInfo::SetMonsterCount, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b d1		 mov	 edx, ecx

; 65   : 	m_dwMonsterCount = dwCount;

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  0000b	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0000c	8d 9a 90 00 00
	00		 lea	 ebx, DWORD PTR [edx+144]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 64   : {

  00012	89 55 f8	 mov	 DWORD PTR _this$1$[ebp], edx
  00015	56		 push	 esi

; 65   : 	m_dwMonsterCount = dwCount;

  00016	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001c	8b 33		 mov	 esi, DWORD PTR [ebx]
  0001e	2b c6		 sub	 eax, esi
  00020	c1 f8 03	 sar	 eax, 3
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 67   : 	if (m_TempMonsterPosVector.size() == dwCount)

  00023	3b c1		 cmp	 eax, ecx
  00025	0f 84 a1 00 00
	00		 je	 $LN3@SetMonster

; 68   : 		return;
; 69   : 
; 70   : 	m_TempMonsterPosVector.clear();

  0002b	89 b2 94 00 00
	00		 mov	 DWORD PTR [edx+148], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1224 :         if (_Newsize > _Oldsize) { // append

  00031	85 c9		 test	 ecx, ecx
  00033	0f 84 93 00 00
	00		 je	 $LN3@SetMonster

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00039	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003c	2b c6		 sub	 eax, esi
  0003e	c1 f8 03	 sar	 eax, 3

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  00041	3b c8		 cmp	 ecx, eax
  00043	76 0e		 jbe	 SHORT $LN14@SetMonster

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  00045	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	8b cb		 mov	 ecx, ebx
  0004c	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  00051	eb 10		 jmp	 SHORT $LN26@SetMonster
$LN14@SetMonster:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00053	53		 push	 ebx
  00054	51		 push	 ecx
  00055	ff 73 04	 push	 DWORD PTR [ebx+4]
  00058	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR2@@@std@@@std@@YAPAUD3DXVECTOR2@@PAU1@IAAV?$allocator@UD3DXVECTOR2@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR2> >
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00060	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN26@SetMonster:
  00063	33 c0		 xor	 eax, eax
  00065	89 45 f4	 mov	 DWORD PTR _dwI$1$[ebp], eax
  00068	57		 push	 edi
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SetMonster:

; 1504 :         return _My_data._Myfirst[_Pos];

  00070	8b 33		 mov	 esi, DWORD PTR [ebx]
  00072	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 75   : 		m_TempMonsterPosVector[dwI].x = (float)random_range(m_lLeft, m_lRight);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007c	ff b0 84 00 00
	00		 push	 DWORD PTR [eax+132]
  00082	ff b0 80 00 00
	00		 push	 DWORD PTR [eax+128]
  00088	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  0008d	66 0f 6e c0	 movd	 xmm0, eax

; 76   : 		m_TempMonsterPosVector[dwI].y = (float)random_range(m_lTop, m_lBottom);

  00091	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00094	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00097	f3 0f 11 04 3e	 movss	 DWORD PTR [esi+edi], xmm0
  0009c	ff b0 8c 00 00
	00		 push	 DWORD PTR [eax+140]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  000a2	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 76   : 		m_TempMonsterPosVector[dwI].y = (float)random_range(m_lTop, m_lBottom);

  000a4	ff b0 88 00 00
	00		 push	 DWORD PTR [eax+136]
  000aa	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  000af	83 c4 10	 add	 esp, 16			; 00000010H
  000b2	66 0f 6e c0	 movd	 xmm0, eax
  000b6	8b 45 f4	 mov	 eax, DWORD PTR _dwI$1$[ebp]
  000b9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000bc	40		 inc	 eax
  000bd	89 45 f4	 mov	 DWORD PTR _dwI$1$[ebp], eax
  000c0	f3 0f 11 44 3e
	04		 movss	 DWORD PTR [esi+edi+4], xmm0
  000c6	3b 45 08	 cmp	 eax, DWORD PTR _dwCount$[ebp]
  000c9	72 a5		 jb	 SHORT $LL4@SetMonster
  000cb	5f		 pop	 edi
$LN3@SetMonster:
  000cc	5e		 pop	 esi

; 77   : 	}
; 78   : }

  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?SetMonsterCount@CMonsterAreaInfo@@QAEXK@Z ENDP		; CMonsterAreaInfo::SetMonsterCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?GetSize@CMonsterAreaInfo@@QAEXPAJ0@Z
_TEXT	SEGMENT
_plSizeX$ = 8						; size = 4
_plSizeY$ = 12						; size = 4
?GetSize@CMonsterAreaInfo@@QAEXPAJ0@Z PROC		; CMonsterAreaInfo::GetSize, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	*plSizeX = m_lSizeX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _plSizeX$[ebp]
  00006	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 52   : 	*plSizeY = m_lSizeY;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _plSizeY$[ebp]
  0000e	8b 49 7c	 mov	 ecx, DWORD PTR [ecx+124]
  00011	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetSize@CMonsterAreaInfo@@QAEXPAJ0@Z ENDP		; CMonsterAreaInfo::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?SetSize@CMonsterAreaInfo@@QAEXJJ@Z
_TEXT	SEGMENT
_lSizeX$ = 8						; size = 4
_lSizeY$ = 12						; size = 4
?SetSize@CMonsterAreaInfo@@QAEXJJ@Z PROC		; CMonsterAreaInfo::SetSize, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	m_lSizeX = lSizeX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lSizeX$[ebp]
  00006	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 39   : 	m_lSizeY = lSizeY;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lSizeY$[ebp]
  0000c	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 40   : 	SetLRTB();

  0000f	e8 00 00 00 00	 call	 ?SetLRTB@CMonsterAreaInfo@@IAEXXZ ; CMonsterAreaInfo::SetLRTB

; 41   : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?SetSize@CMonsterAreaInfo@@QAEXJJ@Z ENDP		; CMonsterAreaInfo::SetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?GetOrigin@CMonsterAreaInfo@@QAEXPAJ0@Z
_TEXT	SEGMENT
_plOriginX$ = 8						; size = 4
_plOriginY$ = 12					; size = 4
?GetOrigin@CMonsterAreaInfo@@QAEXPAJ0@Z PROC		; CMonsterAreaInfo::GetOrigin, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	*plOriginX = m_lOriginX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _plOriginX$[ebp]
  00006	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 46   : 	*plOriginY = m_lOriginY;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _plOriginY$[ebp]
  0000e	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  00011	89 08		 mov	 DWORD PTR [eax], ecx

; 47   : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetOrigin@CMonsterAreaInfo@@QAEXPAJ0@Z ENDP		; CMonsterAreaInfo::GetOrigin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?SetOrigin@CMonsterAreaInfo@@QAEXJJ@Z
_TEXT	SEGMENT
_lOriginX$ = 8						; size = 4
_lOriginY$ = 12						; size = 4
?SetOrigin@CMonsterAreaInfo@@QAEXJJ@Z PROC		; CMonsterAreaInfo::SetOrigin, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	m_lOriginX = lOriginX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lOriginX$[ebp]
  00006	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 32   : 	m_lOriginY = lOriginY;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lOriginY$[ebp]
  0000c	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 33   : 	SetLRTB();

  0000f	e8 00 00 00 00	 call	 ?SetLRTB@CMonsterAreaInfo@@IAEXXZ ; CMonsterAreaInfo::SetLRTB

; 34   : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?SetOrigin@CMonsterAreaInfo@@QAEXJJ@Z ENDP		; CMonsterAreaInfo::SetOrigin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ?Clear@CMonsterAreaInfo@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMonsterAreaInfo@@QAEXXZ PROC			; CMonsterAreaInfo::Clear, COMDAT
; _this$ = ecx

; 23   : {

  00000	56		 push	 esi

; 24   : 	SetOrigin(-1, -1);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	e8 00 00 00 00	 call	 ?SetOrigin@CMonsterAreaInfo@@QAEXJJ@Z ; CMonsterAreaInfo::SetOrigin

; 25   : 	SetSize(-1, -1);

  0000c	6a ff		 push	 -1
  0000e	6a ff		 push	 -1
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?SetSize@CMonsterAreaInfo@@QAEXJJ@Z ; CMonsterAreaInfo::SetSize

; 26   : 	RemoveAllMonsters();

  00017	8b ce		 mov	 ecx, esi
  00019	5e		 pop	 esi
  0001a	e9 00 00 00 00	 jmp	 ?RemoveAllMonsters@CMonsterAreaInfo@@QAEXXZ ; CMonsterAreaInfo::RemoveAllMonsters
?Clear@CMonsterAreaInfo@@QAEXXZ ENDP			; CMonsterAreaInfo::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ??1CMonsterAreaInfo@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CMonsterAreaInfo@@UAE@XZ PROC			; CMonsterAreaInfo::~CMonsterAreaInfo, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMonsterAreaInfo@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMonsterAreaInfo@@6B@

; 19   : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CMonsterAreaInfo@@QAEXXZ ; CMonsterAreaInfo::Clear
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00036	85 c9		 test	 ecx, ecx
  00038	74 33		 je	 SHORT $LN6@CMonsterAr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003a	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  00040	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 e0 f8	 and	 eax, -8			; fffffff8H
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004c	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00059	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0

; 1699 :             _Myend   = pointer();

  00063	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
$LN6@CMonsterAr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0006d	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00070	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00073	72 0d		 jb	 SHORT $LN14@CMonsterAr

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00075	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	50		 push	 eax
  00077	ff 76 44	 push	 DWORD PTR [esi+68]
  0007a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0007f	83 c4 08	 add	 esp, 8
$LN14@CMonsterAr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00082	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00089	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00090	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00094	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00097	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0009a	72 0d		 jb	 SHORT $LN24@CMonsterAr

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0009c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009d	50		 push	 eax
  0009e	ff 76 24	 push	 DWORD PTR [esi+36]
  000a1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a6	83 c4 08	 add	 esp, 8
$LN24@CMonsterAr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000a9	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b0	c7 46 38 0f 00
	00 00		 mov	 DWORD PTR [esi+56], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b7	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  000bb	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000be	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000c1	72 0d		 jb	 SHORT $LN34@CMonsterAr

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000c3	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c4	50		 push	 eax
  000c5	ff 76 0c	 push	 DWORD PTR [esi+12]
  000c8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cd	83 c4 08	 add	 esp, 8
$LN34@CMonsterAr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000d0	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000d7	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000de	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 20   : }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5e		 pop	 esi
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
  000f2	cc		 int	 3
  000f3	cc		 int	 3
  000f4	cc		 int	 3
  000f5	cc		 int	 3
  000f6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CMonsterAreaInfo@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CMonsterAreaInfo@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CMonsterAreaInfo@@UAE@XZ ENDP			; CMonsterAreaInfo::~CMonsterAreaInfo
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp
;	COMDAT ??0CMonsterAreaInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMonsterAreaInfo@@QAE@XZ PROC			; CMonsterAreaInfo::CMonsterAreaInfo, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CMonsterAreaInfo@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMonsterAreaInfo@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0002f	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00036	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 13   : {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00048	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004f	c7 46 38 0f 00
	00 00		 mov	 DWORD PTR [esi+56], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00056	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0005a	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00061	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00068	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006c	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  00076	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  00080	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\GameLib\MonsterAreaInfo.cpp

; 13   : {

  0008a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 14   : 	Clear();

  0008e	e8 00 00 00 00	 call	 ?Clear@CMonsterAreaInfo@@QAEXXZ ; CMonsterAreaInfo::Clear

; 15   : }

  00093	8b c6		 mov	 eax, esi
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 44	 add	 ecx, 68			; 00000044H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CMonsterAreaInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0002a	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR2@@V?$allocator@UD3DXVECTOR2@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >::~vector<D3DXVECTOR2,std::allocator<D3DXVECTOR2> >
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
__ehhandler$??0CMonsterAreaInfo@@QAE@XZ:
  00034	90		 npad	 1
  00035	90		 npad	 1
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CMonsterAreaInfo@@QAE@XZ
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CMonsterAreaInfo@@QAE@XZ ENDP			; CMonsterAreaInfo::CMonsterAreaInfo
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
