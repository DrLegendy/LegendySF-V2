; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IsInStaticRange@Vector3d@@QBE_NXZ		; Vector3d::IsInStaticRange
PUBLIC	?Set@Sphere@@QAEXABVVector3d@@M@Z		; Sphere::Set
PUBLIC	?Compute@Sphere@@QAEXABVSphereInterface@@@Z	; Sphere::Compute
PUBLIC	?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ; Sphere::RayIntersection
PUBLIC	?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersection
PUBLIC	?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront
PUBLIC	?Report@Sphere@@QAEXXZ				; Sphere::Report
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@4a47fe70
PUBLIC	__real@4cbebc20
PUBLIC	__real@bf800000
PUBLIC	__real@ca47fe70
PUBLIC	__real@ccbebc20
EXTRN	_sqrt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@ccbebc20
CONST	SEGMENT
__real@ccbebc20 DD 0ccbebc20r			; -1e+08
CONST	ENDS
;	COMDAT __real@ca47fe70
CONST	SEGMENT
__real@ca47fe70 DD 0ca47fe70r			; -3.2767e+06
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@4a47fe70
CONST	SEGMENT
__real@4a47fe70 DD 04a47fe70r			; 3.2767e+06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?Report@Sphere@@QAEXXZ
_TEXT	SEGMENT
?Report@Sphere@@QAEXXZ PROC				; Sphere::Report, COMDAT
; _this$ = ecx

; 128  : }

  00000	c2 00 00	 ret	 0
?Report@Sphere@@QAEXXZ ENDP				; Sphere::Report
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z
_TEXT	SEGMENT
_sect$ = -12						; size = 12
_rayOrigin$ = 8						; size = 4
_V$ = 12						; size = 4
_intersect$ = 16					; size = 4
?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z PROC ; Sphere::RayIntersectionInFront, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 107  :   Vector3d sect;
; 108  :   bool hit = RayIntersection(rayOrigin,V,&sect);

  00006	8d 45 f4	 lea	 eax, DWORD PTR _sect$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _V$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _rayOrigin$[ebp]
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 ?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersection

; 109  : 
; 110  :   if ( hit )

  00019	84 c0		 test	 al, al
  0001b	74 70		 je	 SHORT $LN3@RayInterse
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  0001d	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _sect$[ebp+4]
  00022	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _sect$[ebp]
  00027	0f 28 c5	 movaps	 xmm0, xmm5
  0002a	f3 0f 5c 47 04	 subss	 xmm0, DWORD PTR [edi+4]

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  0002f	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00034	0f 28 dc	 movaps	 xmm3, xmm4
  00037	f3 0f 5c 1f	 subss	 xmm3, DWORD PTR [edi]
  0003b	f3 0f 10 75 fc	 movss	 xmm6, DWORD PTR _sect$[ebp+8]
  00040	0f 28 ce	 movaps	 xmm1, xmm6
  00043	f3 0f 5c 4f 08	 subss	 xmm1, DWORD PTR [edi+8]

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  00048	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0004c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00050	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00054	f3 0f 58 d0	 addss	 xmm2, xmm0
  00058	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0005d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00061	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 117  :     if ( dot >= 0  ) // then it's in front!

  00065	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@00000000
  0006c	72 1f		 jb	 SHORT $LN3@RayInterse

; 118  :     {
; 119  :       if ( intersect ) *intersect = sect;

  0006e	8b 45 10	 mov	 eax, DWORD PTR _intersect$[ebp]
  00071	85 c0		 test	 eax, eax
  00073	74 0e		 je	 SHORT $LN4@RayInterse
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00075	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00079	f3 0f 11 68 04	 movss	 DWORD PTR [eax+4], xmm5
  0007e	f3 0f 11 70 08	 movss	 DWORD PTR [eax+8], xmm6
$LN4@RayInterse:
  00083	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 120  :       return true;

  00084	b0 01		 mov	 al, 1

; 124  : }

  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@RayInterse:
  0008d	5f		 pop	 edi

; 121  :     }
; 122  :   }
; 123  :   return false;

  0008e	32 c0		 xor	 al, al

; 124  : }

  00090	5e		 pop	 esi
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ENDP ; Sphere::RayIntersectionInFront
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z
_TEXT	SEGMENT
_s$1$ = -8						; size = 4
_c$1$ = -4						; size = 4
_a$1$ = 8						; size = 4
_rayOrigin$ = 8						; size = 4
_b$1$ = 12						; size = 4
_dir$ = 12						; size = 4
_d$3 = 16						; size = 4
_intersect$ = 16					; size = 4
?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z PROC ; Sphere::RayIntersection, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00006	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  0000b	f3 0f 10 71 08	 movss	 xmm6, DWORD PTR [ecx+8]
  00010	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]

; 30   : 		x = a.x;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _dir$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 48   : {

  00018	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00019	8b 7d 08	 mov	 edi, DWORD PTR _rayOrigin$[ebp]

; 30   : 		x = a.x;

  0001c	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]

; 31   : 		y = a.y;

  00020	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00025	f3 0f 5c 17	 subss	 xmm2, DWORD PTR [edi]
  00029	f3 0f 5c 77 04	 subss	 xmm6, DWORD PTR [edi+4]
  0002e	f3 0f 5c 7f 08	 subss	 xmm7, DWORD PTR [edi+8]

; 32   : 		z = a.z;

  00033	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  00038	f3 0f 11 5d 08	 movss	 DWORD PTR _a$1$[ebp], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  0003d	0f 28 ca	 movaps	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 31   : 		y = a.y;

  00040	f3 0f 11 65 0c	 movss	 DWORD PTR _b$1$[ebp], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  00045	0f 28 c6	 movaps	 xmm0, xmm6
  00048	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0004c	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 32   : 		z = a.z;

  00050	f3 0f 11 6d fc	 movss	 DWORD PTR _c$1$[ebp], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  00055	f3 0f 58 c8	 addss	 xmm1, xmm0
  00059	0f 28 c7	 movaps	 xmm0, xmm7
  0005c	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00060	f3 0f 58 c8	 addss	 xmm1, xmm0

; 56   :   // Bug Fix For Gem, if origin is *inside* the sphere, invert the
; 57   :   // direction vector so that we get a valid intersection location.
; 58   :   if ( dist2 < mRadius2 ) V*=-1;

  00064	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00069	0f 2f c1	 comiss	 xmm0, xmm1
  0006c	76 23		 jbe	 SHORT $LN2@RayInterse
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 84   : 	{x*=s; y*=s; z*=s;}

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 59 d8	 mulss	 xmm3, xmm0
  0007a	f3 0f 59 e0	 mulss	 xmm4, xmm0
  0007e	f3 0f 59 e8	 mulss	 xmm5, xmm0
  00082	f3 0f 11 5d 08	 movss	 DWORD PTR _a$1$[ebp], xmm3
  00087	f3 0f 11 65 0c	 movss	 DWORD PTR _b$1$[ebp], xmm4
  0008c	f3 0f 11 6d fc	 movss	 DWORD PTR _c$1$[ebp], xmm5
$LN2@RayInterse:

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  00091	0f 28 cb	 movaps	 xmm1, xmm3
  00094	0f 28 c4	 movaps	 xmm0, xmm4
  00097	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0009b	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 146  : 		float l2 = x*x+y*y+z*z;

  0009f	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000a3	f3 0f 58 c8	 addss	 xmm1, xmm0

; 146  : 		float l2 = x*x+y*y+z*z;

  000a7	f3 0f 59 f6	 mulss	 xmm6, xmm6

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000ab	0f 28 c5	 movaps	 xmm0, xmm5
  000ae	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 146  : 		float l2 = x*x+y*y+z*z;

  000b2	f3 0f 58 d6	 addss	 xmm2, xmm6
  000b6	f3 0f 59 ff	 mulss	 xmm7, xmm7

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000ba	f3 0f 58 c8	 addss	 xmm1, xmm0

; 146  : 		float l2 = x*x+y*y+z*z;

  000be	f3 0f 58 d7	 addss	 xmm2, xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 62   : 	float disc = mRadius2 - (EO.Length2() - v*v);

  000c2	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000c5	f3 0f 11 4d f8	 movss	 DWORD PTR _s$1$[ebp], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 62   : 	float disc = mRadius2 - (EO.Length2() - v*v);

  000ca	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000ce	f3 0f 5c d0	 subss	 xmm2, xmm0
  000d2	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000d7	f3 0f 5c c2	 subss	 xmm0, xmm2

; 63   : 
; 64   : 	if (disc > 0.0f)

  000db	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000e2	76 75		 jbe	 SHORT $LN3@RayInterse

; 65   : 	{
; 66   : 
; 67   : 		if ( intersect )

  000e4	56		 push	 esi
  000e5	8b 75 10	 mov	 esi, DWORD PTR _intersect$[ebp]
  000e8	85 f6		 test	 esi, esi
  000ea	74 63		 je	 SHORT $LN4@RayInterse
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000ec	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ef	83 ec 08	 sub	 esp, 8
  000f2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f7	e8 00 00 00 00	 call	 _sqrt
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 74   :       *intersect = rayOrigin + V*(v-d);

  000fc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _s$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00101	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  00104	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _a$1$[ebp]

; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);

  00109	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  0010d	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _b$1$[ebp]
  00112	f3 0f 10 65 fc	 movss	 xmm4, DWORD PTR _c$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 70   : 		  float d = sqrtf(disc);

  00117	d9 5d 10	 fstp	 DWORD PTR _d$3[ebp]

; 74   :       *intersect = rayOrigin + V*(v-d);

  0011a	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _d$3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  0011f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00123	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00127	f3 0f 59 e0	 mulss	 xmm4, xmm0

; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);

  0012b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0012f	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  00134	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00139	f3 0f 58 cb	 addss	 xmm1, xmm3
  0013d	f3 0f 58 c4	 addss	 xmm0, xmm4

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00141	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
  00145	f3 0f 11 4e 04	 movss	 DWORD PTR [esi+4], xmm1
  0014a	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
$LN4@RayInterse:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 78   : 		return true;

  0014f	5e		 pop	 esi
  00150	b0 01		 mov	 al, 1
  00152	5f		 pop	 edi

; 81   : }

  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 0c 00	 ret	 12			; 0000000cH
$LN3@RayInterse:

; 79   : 	}
; 80   : 	return false;

  00159	32 c0		 xor	 al, al
  0015b	5f		 pop	 edi

; 81   : }

  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 0c 00	 ret	 12			; 0000000cH
?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ENDP ; Sphere::RayIntersection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z
_TEXT	SEGMENT
_sect$ = -12						; size = 12
_rayOrigin$ = 8						; size = 4
_V$ = 12						; size = 4
_distance$ = 16						; size = 4
_intersect$ = 20					; size = 4
?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z PROC ; Sphere::RayIntersection, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 89   :   Vector3d sect;
; 90   :   bool hit = RayIntersectionInFront(rayOrigin,V,&sect);

  00006	8d 45 f4	 lea	 eax, DWORD PTR _sect$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _rayOrigin$[ebp]
  0000d	50		 push	 eax
  0000e	ff 75 0c	 push	 DWORD PTR _V$[ebp]
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront

; 91   : 
; 92   :   if ( hit )

  00017	84 c0		 test	 al, al
  00019	74 66		 je	 SHORT $LN2@RayInterse
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  0001b	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _sect$[ebp]

; 171  : 		float dy = a.y - y;

  00020	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _sect$[ebp+4]
  00025	0f 28 cb	 movaps	 xmm1, xmm3
  00028	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]

; 172  : 		float dz = a.z - z;

  0002c	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _sect$[ebp+8]
  00031	0f 28 d4	 movaps	 xmm2, xmm4
  00034	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  00039	0f 28 c5	 movaps	 xmm0, xmm5
  0003c	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00041	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00045	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00049	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0004d	f3 0f 58 d1	 addss	 xmm2, xmm1
  00051	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 95   :     if ( d > (distance*distance) ) return false;

  00055	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  0005a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0005e	0f 2f d0	 comiss	 xmm2, xmm0
  00061	77 1e		 ja	 SHORT $LN2@RayInterse

; 96   :     if ( intersect ) *intersect = sect;

  00063	8b 45 14	 mov	 eax, DWORD PTR _intersect$[ebp]
  00066	85 c0		 test	 eax, eax
  00068	74 0e		 je	 SHORT $LN4@RayInterse
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0006a	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0006e	f3 0f 11 60 04	 movss	 DWORD PTR [eax+4], xmm4
  00073	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5
$LN4@RayInterse:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 97   :     return true;

  00078	b0 01		 mov	 al, 1
  0007a	5e		 pop	 esi

; 100  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
$LN2@RayInterse:

; 98   :   }
; 99   :   return false;

  00081	32 c0		 xor	 al, al
  00083	5e		 pop	 esi

; 100  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ENDP ; Sphere::RayIntersection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?Compute@Sphere@@QAEXABVSphereInterface@@@Z
_TEXT	SEGMENT
_dy$4$ = -96						; size = 4
_count$1$ = -92						; size = 4
_zmax$$sroa$915$1$ = -88				; size = 4
_zmax$$sroa$913$1$ = -84				; size = 4
_zmin$$sroa$911$1$ = -80				; size = 4
_zmin$$sroa$910$1$ = -76				; size = 4
_dia1$$sroa$923$1$ = -72				; size = 4
_ymax$$sroa$909$1$ = -68				; size = 4
_ymax$$sroa$901$1$ = -64				; size = 4
_ymin$$sroa$900$1$ = -60				; size = 4
_ymin$$sroa$897$1$ = -56				; size = 4
_zmin$$sroa$912$1$ = -52				; size = 4
_yspan$1$ = -48						; size = 4
_dz$4$ = -48						; size = 4
_zmax$$sroa$920$1$ = -44				; size = 4
_ymax$$sroa$907$1$ = -40				; size = 4
_ymin$$sroa$899$1$ = -36				; size = 4
_dx$4$ = -32						; size = 4
_maxspan$1$ = -28					; size = 4
_this$GSCopy$1$ = -28					; size = 4
_old_to_p$1 = -28					; size = 4
_dia1$$sroa$925$1$ = -24				; size = 4
_dia1$$sroa$921$1$ = -20				; size = 4
_zspan$1$ = -20						; size = 4
_caller_p$2 = -16					; size = 12
_caller_p$3 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
?Compute@Sphere@@QAEXABVSphereInterface@@@Z PROC	; Sphere::Compute, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 107  : 		x = a;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ccbebc20
  00018	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4cbebc20

; 108  : 		y = b;

  00020	0f 28 d8	 movaps	 xmm3, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 146  : {

  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _source$[ebp]
  00027	56		 push	 esi
  00028	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 107  : 		x = a;

  0002a	f3 0f 11 4d ec	 movss	 DWORD PTR _dia1$$sroa$921$1$[ebp], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 146  : {

  0002f	57		 push	 edi

; 158  :   int count = source.GetVertexCount();

  00030	8b 03		 mov	 eax, DWORD PTR [ebx]
  00032	8b cb		 mov	 ecx, ebx
  00034	89 75 e4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 108  : 		y = b;

  00037	f3 0f 11 4d b8	 movss	 DWORD PTR _dia1$$sroa$923$1$[ebp], xmm1

; 109  : 		z = c;

  0003c	f3 0f 11 4d e8	 movss	 DWORD PTR _dia1$$sroa$925$1$[ebp], xmm1

; 107  : 		x = a;

  00041	f3 0f 11 45 e0	 movss	 DWORD PTR _dx$4$[ebp], xmm0

; 108  : 		y = b;

  00046	f3 0f 11 5d a0	 movss	 DWORD PTR _dy$4$[ebp], xmm3

; 109  : 		z = c;

  0004b	f3 0f 11 5d d0	 movss	 DWORD PTR _dz$4$[ebp], xmm3

; 107  : 		x = a;

  00050	f3 0f 11 4d c8	 movss	 DWORD PTR _ymin$$sroa$897$1$[ebp], xmm1

; 108  : 		y = b;

  00055	f3 0f 11 4d dc	 movss	 DWORD PTR _ymin$$sroa$899$1$[ebp], xmm1

; 109  : 		z = c;

  0005a	f3 0f 11 4d c4	 movss	 DWORD PTR _ymin$$sroa$900$1$[ebp], xmm1

; 107  : 		x = a;

  0005f	f3 0f 11 45 c0	 movss	 DWORD PTR _ymax$$sroa$901$1$[ebp], xmm0

; 108  : 		y = b;

  00064	f3 0f 11 45 d8	 movss	 DWORD PTR _ymax$$sroa$907$1$[ebp], xmm0

; 109  : 		z = c;

  00069	f3 0f 11 45 bc	 movss	 DWORD PTR _ymax$$sroa$909$1$[ebp], xmm0

; 107  : 		x = a;

  0006e	f3 0f 11 4d b4	 movss	 DWORD PTR _zmin$$sroa$910$1$[ebp], xmm1

; 108  : 		y = b;

  00073	f3 0f 11 4d b0	 movss	 DWORD PTR _zmin$$sroa$911$1$[ebp], xmm1

; 109  : 		z = c;

  00078	f3 0f 11 4d cc	 movss	 DWORD PTR _zmin$$sroa$912$1$[ebp], xmm1

; 107  : 		x = a;

  0007d	f3 0f 11 45 ac	 movss	 DWORD PTR _zmax$$sroa$913$1$[ebp], xmm0

; 108  : 		y = b;

  00082	f3 0f 11 45 a8	 movss	 DWORD PTR _zmax$$sroa$915$1$[ebp], xmm0

; 109  : 		z = c;

  00087	f3 0f 11 45 d4	 movss	 DWORD PTR _zmax$$sroa$920$1$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 158  :   int count = source.GetVertexCount();

  0008c	ff 50 04	 call	 DWORD PTR [eax+4]
  0008f	33 ff		 xor	 edi, edi
  00091	89 45 a4	 mov	 DWORD PTR _count$1$[ebp], eax

; 160  :   for (int i=0; i<count; i++)

  00094	85 c0		 test	 eax, eax
  00096	0f 8e c7 00 00
	00		 jle	 $LN102@Compute
  0009c	8b f0		 mov	 esi, eax
  0009e	66 90		 npad	 2
$LL4@Compute:

; 161  : 	{
; 162  :     Vector3d caller_p;
; 163  :     source.GetVertex(i,caller_p);

  000a0	8b 13		 mov	 edx, DWORD PTR [ebx]
  000a2	8d 45 f0	 lea	 eax, DWORD PTR _caller_p$3[ebp]
  000a5	50		 push	 eax
  000a6	57		 push	 edi
  000a7	8b cb		 mov	 ecx, ebx
  000a9	ff 52 08	 call	 DWORD PTR [edx+8]

; 165  :   	if (caller_p.GetX()<xmin.GetX()) 	xmin = caller_p; /* New xminimum point */

  000ac	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _caller_p$3[ebp]
  000b1	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _dia1$$sroa$921$1$[ebp]
  000b6	0f 2f da	 comiss	 xmm3, xmm2
  000b9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$3[ebp+8]
  000be	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _caller_p$3[ebp+4]
  000c3	76 14		 jbe	 SHORT $LN103@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  000c5	0f 28 e2	 movaps	 xmm4, xmm2
  000c8	f3 0f 11 4d b8	 movss	 DWORD PTR _dia1$$sroa$923$1$[ebp], xmm1
  000cd	f3 0f 11 65 ec	 movss	 DWORD PTR _dia1$$sroa$921$1$[ebp], xmm4
  000d2	f3 0f 11 45 e8	 movss	 DWORD PTR _dia1$$sroa$925$1$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 165  :   	if (caller_p.GetX()<xmin.GetX()) 	xmin = caller_p; /* New xminimum point */

  000d7	eb 05		 jmp	 SHORT $LN8@Compute
$LN103@Compute:
  000d9	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _dia1$$sroa$921$1$[ebp]
$LN8@Compute:

; 166  :   	if (caller_p.GetX()>xmax.GetX())	xmax = caller_p;

  000de	0f 2f 55 e0	 comiss	 xmm2, DWORD PTR _dx$4$[ebp]
  000e2	76 15		 jbe	 SHORT $LN9@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  000e4	0f 28 d9	 movaps	 xmm3, xmm1
  000e7	f3 0f 11 55 e0	 movss	 DWORD PTR _dx$4$[ebp], xmm2
  000ec	f3 0f 11 5d a0	 movss	 DWORD PTR _dy$4$[ebp], xmm3
  000f1	0f 28 d8	 movaps	 xmm3, xmm0
  000f4	f3 0f 11 5d d0	 movss	 DWORD PTR _dz$4$[ebp], xmm3
$LN9@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 167  :   	if (caller_p.GetY()<ymin.GetY())	ymin = caller_p;

  000f9	f3 0f 10 5d dc	 movss	 xmm3, DWORD PTR _ymin$$sroa$899$1$[ebp]
  000fe	0f 2f d9	 comiss	 xmm3, xmm1
  00101	76 0f		 jbe	 SHORT $LN10@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00103	f3 0f 11 55 c8	 movss	 DWORD PTR _ymin$$sroa$897$1$[ebp], xmm2
  00108	f3 0f 11 4d dc	 movss	 DWORD PTR _ymin$$sroa$899$1$[ebp], xmm1
  0010d	f3 0f 11 45 c4	 movss	 DWORD PTR _ymin$$sroa$900$1$[ebp], xmm0
$LN10@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 168  :   	if (caller_p.GetY()>ymax.GetY())	ymax = caller_p;

  00112	0f 2f 4d d8	 comiss	 xmm1, DWORD PTR _ymax$$sroa$907$1$[ebp]
  00116	76 0f		 jbe	 SHORT $LN11@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00118	f3 0f 11 55 c0	 movss	 DWORD PTR _ymax$$sroa$901$1$[ebp], xmm2
  0011d	f3 0f 11 4d d8	 movss	 DWORD PTR _ymax$$sroa$907$1$[ebp], xmm1
  00122	f3 0f 11 45 bc	 movss	 DWORD PTR _ymax$$sroa$909$1$[ebp], xmm0
$LN11@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 169  :   	if (caller_p.GetZ()<zmin.GetZ())	zmin = caller_p;

  00127	f3 0f 10 5d cc	 movss	 xmm3, DWORD PTR _zmin$$sroa$912$1$[ebp]
  0012c	0f 2f d8	 comiss	 xmm3, xmm0
  0012f	76 0f		 jbe	 SHORT $LN12@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00131	f3 0f 11 55 b4	 movss	 DWORD PTR _zmin$$sroa$910$1$[ebp], xmm2
  00136	f3 0f 11 4d b0	 movss	 DWORD PTR _zmin$$sroa$911$1$[ebp], xmm1
  0013b	f3 0f 11 45 cc	 movss	 DWORD PTR _zmin$$sroa$912$1$[ebp], xmm0
$LN12@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 170  :   	if (caller_p.GetZ()>zmax.GetZ()) zmax = caller_p;

  00140	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR _zmax$$sroa$920$1$[ebp]
  00144	76 0f		 jbe	 SHORT $LN2@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00146	f3 0f 11 55 ac	 movss	 DWORD PTR _zmax$$sroa$913$1$[ebp], xmm2
  0014b	f3 0f 11 4d a8	 movss	 DWORD PTR _zmax$$sroa$915$1$[ebp], xmm1
  00150	f3 0f 11 45 d4	 movss	 DWORD PTR _zmax$$sroa$920$1$[ebp], xmm0
$LN2@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 160  :   for (int i=0; i<count; i++)

  00155	47		 inc	 edi
  00156	3b fe		 cmp	 edi, esi
  00158	0f 8c 42 ff ff
	ff		 jl	 $LL4@Compute
  0015e	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00161	eb 08		 jmp	 SHORT $LN3@Compute
$LN102@Compute:
  00163	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@4cbebc20
$LN3@Compute:

; 171  : 	}
; 172  : 
; 173  :   /* Set xspan = distance between the 2 points xmin & xmax (squared) */
; 174  :   float dx = xmax.GetX() - xmin.GetX();
; 175  :   float dy = xmax.GetY() - xmin.GetY();

  0016b	f3 0f 10 6d a0	 movss	 xmm5, DWORD PTR _dy$4$[ebp]
  00170	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _dx$4$[ebp]
  00175	0f 28 d5	 movaps	 xmm2, xmm5
  00178	f3 0f 5c 55 b8	 subss	 xmm2, DWORD PTR _dia1$$sroa$923$1$[ebp]

; 176  :   float dz = xmax.GetZ() - xmin.GetZ();

  0017d	f3 0f 10 75 d0	 movss	 xmm6, DWORD PTR _dz$4$[ebp]
  00182	f3 0f 5c cc	 subss	 xmm1, xmm4
  00186	0f 28 c6	 movaps	 xmm0, xmm6
  00189	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _dia1$$sroa$925$1$[ebp]

; 177  :   float xspan = dx*dx + dy*dy + dz*dz;

  0018e	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00192	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00196	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0019a	f3 0f 58 d1	 addss	 xmm2, xmm1

; 178  : 
; 179  :   /* Same for y & z spans */
; 180  :   dx = ymax.GetX() - ymin.GetX();

  0019e	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _ymax$$sroa$901$1$[ebp]
  001a3	f3 0f 5c 4d c8	 subss	 xmm1, DWORD PTR _ymin$$sroa$897$1$[ebp]
  001a8	f3 0f 58 d0	 addss	 xmm2, xmm0

; 181  :   dy = ymax.GetY() - ymin.GetY();
; 182  :   dz = ymax.GetZ() - ymin.GetZ();

  001ac	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ymax$$sroa$909$1$[ebp]
  001b1	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _ymin$$sroa$900$1$[ebp]

; 183  :   float yspan = dx*dx + dy*dy + dz*dz;

  001b6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001ba	f3 0f 11 55 e4	 movss	 DWORD PTR _maxspan$1$[ebp], xmm2
  001bf	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _ymax$$sroa$907$1$[ebp]
  001c4	f3 0f 5c 55 dc	 subss	 xmm2, DWORD PTR _ymin$$sroa$899$1$[ebp]
  001c9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001cd	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001d1	f3 0f 58 d1	 addss	 xmm2, xmm1

; 184  : 
; 185  :   dx = zmax.GetX() - zmin.GetX();

  001d5	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _zmax$$sroa$913$1$[ebp]
  001da	f3 0f 5c 4d b4	 subss	 xmm1, DWORD PTR _zmin$$sroa$910$1$[ebp]
  001df	f3 0f 58 d0	 addss	 xmm2, xmm0

; 186  :   dy = zmax.GetY() - zmin.GetY();

  001e3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _zmax$$sroa$915$1$[ebp]
  001e8	f3 0f 5c 45 b0	 subss	 xmm0, DWORD PTR _zmin$$sroa$911$1$[ebp]

; 187  :   dz = zmax.GetZ() - zmin.GetZ();
; 188  :   float zspan = dx*dx + dy*dy + dz*dz;

  001ed	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001f1	f3 0f 11 55 d0	 movss	 DWORD PTR _yspan$1$[ebp], xmm2
  001f6	f3 0f 10 55 cc	 movss	 xmm2, DWORD PTR _zmin$$sroa$912$1$[ebp]
  001fb	f3 0f 11 45 ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm0
  00200	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _zspan$1$[ebp]
  00205	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _zmax$$sroa$920$1$[ebp]
  0020a	f3 0f 59 db	 mulss	 xmm3, xmm3
  0020e	f3 0f 5c c2	 subss	 xmm0, xmm2
  00212	f3 0f 58 d9	 addss	 xmm3, xmm1
  00216	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0021a	0f 28 cb	 movaps	 xmm1, xmm3
  0021d	f3 0f 11 5d ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm3

; 195  :   if (yspan>maxspan)

  00222	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR _dx$4$[ebp]
  00227	f3 0f 58 c8	 addss	 xmm1, xmm0
  0022b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _yspan$1$[ebp]
  00230	f3 0f 11 4d ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm1
  00235	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _maxspan$1$[ebp]
  0023a	0f 2f c1	 comiss	 xmm0, xmm1
  0023d	76 28		 jbe	 SHORT $LN104@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0023f	f3 0f 10 5d c4	 movss	 xmm3, DWORD PTR _ymin$$sroa$900$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 197  : 	  maxspan = yspan;

  00244	0f 28 c8	 movaps	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00247	f3 0f 10 65 c8	 movss	 xmm4, DWORD PTR _ymin$$sroa$897$1$[ebp]
  0024c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _ymin$$sroa$899$1$[ebp]
  00251	f3 0f 10 6d d8	 movss	 xmm5, DWORD PTR _ymax$$sroa$907$1$[ebp]
  00256	f3 0f 10 75 bc	 movss	 xmm6, DWORD PTR _ymax$$sroa$909$1$[ebp]
  0025b	f3 0f 11 5d e8	 movss	 DWORD PTR _dia1$$sroa$925$1$[ebp], xmm3
  00260	f3 0f 10 5d c0	 movss	 xmm3, DWORD PTR _ymax$$sroa$901$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 195  :   if (yspan>maxspan)

  00265	eb 05		 jmp	 SHORT $LN14@Compute
$LN104@Compute:
  00267	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dia1$$sroa$923$1$[ebp]
$LN14@Compute:

; 198  :   	dia1 = ymin;
; 199  :   	dia2 = ymax;
; 200  : 	}
; 201  : 
; 202  :   if (zspan>maxspan)

  0026c	f3 0f 10 7d ec	 movss	 xmm7, DWORD PTR _zspan$1$[ebp]
  00271	0f 2f f9	 comiss	 xmm7, xmm1
  00274	f3 0f 10 7d d4	 movss	 xmm7, DWORD PTR _zmax$$sroa$920$1$[ebp]
  00279	76 1c		 jbe	 SHORT $LN15@Compute
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0027b	f3 0f 10 65 b4	 movss	 xmm4, DWORD PTR _zmin$$sroa$910$1$[ebp]
  00280	0f 28 f7	 movaps	 xmm6, xmm7
  00283	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _zmin$$sroa$911$1$[ebp]
  00288	f3 0f 10 5d ac	 movss	 xmm3, DWORD PTR _zmax$$sroa$913$1$[ebp]
  0028d	f3 0f 10 6d a8	 movss	 xmm5, DWORD PTR _zmax$$sroa$915$1$[ebp]
  00292	f3 0f 11 55 e8	 movss	 DWORD PTR _dia1$$sroa$925$1$[ebp], xmm2
$LN15@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 212  :   mCenter.SetY( (dia1.GetY()+dia2.GetY())*0.5f );

  00297	0f 28 cd	 movaps	 xmm1, xmm5
  0029a	0f 28 d3	 movaps	 xmm2, xmm3
  0029d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 219  :   mRadius = float(sqrt(mRadius2));

  002a1	83 ec 08	 sub	 esp, 8
  002a4	f3 0f 58 d4	 addss	 xmm2, xmm4
  002a8	0f 28 c6	 movaps	 xmm0, xmm6
  002ab	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  002b3	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _dia1$$sroa$925$1$[ebp]
  002b8	f3 0f 59 cc	 mulss	 xmm1, xmm4
  002bc	f3 0f 59 d4	 mulss	 xmm2, xmm4
  002c0	f3 0f 5c e9	 subss	 xmm5, xmm1
  002c4	f3 0f 59 c4	 mulss	 xmm0, xmm4
  002c8	f3 0f 5c da	 subss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 101  : 	void SetX(float t)   { x   = t; };

  002cc	f3 0f 11 56 04	 movss	 DWORD PTR [esi+4], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 212  :   mCenter.SetY( (dia1.GetY()+dia2.GetY())*0.5f );

  002d1	f3 0f 11 4e 08	 movss	 DWORD PTR [esi+8], xmm1

; 213  :   mCenter.SetZ( (dia1.GetZ()+dia2.GetZ())*0.5f );
; 214  :   /* calculate initial radius**2 and radius */
; 215  :   dx = dia2.GetX()-mCenter.GetX(); /* x component of radius vector */
; 216  :   dy = dia2.GetY()-mCenter.GetY(); /* y component of radius vector */
; 217  :   dz = dia2.GetZ()-mCenter.GetZ(); /* z component of radius vector */

  002d6	f3 0f 5c f0	 subss	 xmm6, xmm0
  002da	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0

; 218  :   mRadius2 = dx*dx + dy*dy + dz*dz;

  002df	f3 0f 59 ed	 mulss	 xmm5, xmm5
  002e3	f3 0f 59 db	 mulss	 xmm3, xmm3
  002e7	f3 0f 59 f6	 mulss	 xmm6, xmm6
  002eb	f3 0f 58 eb	 addss	 xmm5, xmm3
  002ef	f3 0f 58 ee	 addss	 xmm5, xmm6

; 219  :   mRadius = float(sqrt(mRadius2));

  002f3	0f 5a c5	 cvtps2pd xmm0, xmm5
  002f6	f3 0f 11 6e 14	 movss	 DWORD PTR [esi+20], xmm5
  002fb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00300	e8 00 00 00 00	 call	 _sqrt
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 97   : 	float GetX(void) const { return x; };

  00305	33 ff		 xor	 edi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 219  :   mRadius = float(sqrt(mRadius2));

  00307	83 c4 08	 add	 esp, 8
  0030a	d9 5e 10	 fstp	 DWORD PTR [esi+16]

; 223  :   for (int j=0; j<count; j++)

  0030d	39 7d a4	 cmp	 DWORD PTR _count$1$[ebp], edi
  00310	0f 8e fe 00 00
	00		 jle	 $LN6@Compute
$LL7@Compute:

; 224  : 	{
; 225  :     Vector3d caller_p;
; 226  :     source.GetVertex(j,caller_p);

  00316	8b 03		 mov	 eax, DWORD PTR [ebx]
  00318	8d 4d f0	 lea	 ecx, DWORD PTR _caller_p$2[ebp]
  0031b	51		 push	 ecx
  0031c	57		 push	 edi
  0031d	8b cb		 mov	 ecx, ebx
  0031f	ff 50 08	 call	 DWORD PTR [eax+8]

; 227  :   	dx = caller_p.GetX()-mCenter.GetX();

  00322	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _caller_p$2[ebp]

; 228  : 	  dy = caller_p.GetY()-mCenter.GetY();

  00327	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _caller_p$2[ebp+4]
  0032c	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00331	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 229  :   	dz = caller_p.GetZ()-mCenter.GetZ();

  00336	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$2[ebp+8]
  0033b	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 230  : 	  float old_to_p_sq = dx*dx + dy*dy + dz*dz;

  00340	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00344	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00348	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0034c	f3 0f 58 d1	 addss	 xmm2, xmm1
  00350	f3 0f 58 d0	 addss	 xmm2, xmm0

; 231  :   	if (old_to_p_sq > mRadius2) 	/* do r**2 test first */

  00354	0f 2f 56 14	 comiss	 xmm2, DWORD PTR [esi+20]
  00358	0f 86 ac 00 00
	00		 jbe	 $LN5@Compute

; 233  : 	  	float old_to_p = float(sqrt(old_to_p_sq));

  0035e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00361	83 ec 08	 sub	 esp, 8
  00364	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00369	e8 00 00 00 00	 call	 _sqrt

; 236  : 	  	mRadius2 = mRadius*mRadius; 	/* for next r**2 compare */
; 237  :   		float old_to_new = old_to_p - mRadius;
; 238  : 	  	/* calc center of new sphere */
; 239  :       float recip = 1.0f /old_to_p;

  0036e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00376	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 97   : 	float GetX(void) const { return x; };

  00379	f3 0f 10 6e 04	 movss	 xmm5, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 233  : 	  	float old_to_p = float(sqrt(old_to_p_sq));

  0037e	d9 5d e4	 fstp	 DWORD PTR _old_to_p$1[ebp]

; 234  : 		  /* calc radius of new sphere */
; 235  :   		mRadius = (mRadius + old_to_p) * 0.5f;

  00381	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _old_to_p$1[ebp]
  00386	0f 28 f1	 movaps	 xmm6, xmm1

; 240  : 
; 241  :   		float cx = (mRadius*mCenter.GetX() + old_to_new*caller_p.GetX()) * recip;
; 242  : 	  	float cy = (mRadius*mCenter.GetY() + old_to_new*caller_p.GetY()) * recip;

  00389	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  0038e	f3 0f 58 76 10	 addss	 xmm6, DWORD PTR [esi+16]
  00393	f3 0f 5e d9	 divss	 xmm3, xmm1
  00397	f3 0f 59 35 00
	00 00 00	 mulss	 xmm6, DWORD PTR __real@3f000000
  0039f	0f 28 e1	 movaps	 xmm4, xmm1

; 243  : 		  float cz = (mRadius*mCenter.GetZ() + old_to_new*caller_p.GetZ()) * recip;

  003a2	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  003a7	0f 28 c6	 movaps	 xmm0, xmm6
  003aa	f3 0f 59 ee	 mulss	 xmm5, xmm6
  003ae	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003b2	f3 0f 5c e6	 subss	 xmm4, xmm6
  003b6	f3 0f 59 d6	 mulss	 xmm2, xmm6
  003ba	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  003bf	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _caller_p$2[ebp]
  003c4	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003c8	f3 0f 59 ce	 mulss	 xmm1, xmm6
  003cc	f3 0f 58 e8	 addss	 xmm5, xmm0
  003d0	f3 0f 11 76 10	 movss	 DWORD PTR [esi+16], xmm6
  003d5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _caller_p$2[ebp+4]
  003da	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003de	f3 0f 59 eb	 mulss	 xmm5, xmm3
  003e2	f3 0f 58 d0	 addss	 xmm2, xmm0
  003e6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$2[ebp+8]
  003eb	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 107  : 		x = a;

  003ef	f3 0f 11 6e 04	 movss	 DWORD PTR [esi+4], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 243  : 		  float cz = (mRadius*mCenter.GetZ() + old_to_new*caller_p.GetZ()) * recip;

  003f4	f3 0f 58 c8	 addss	 xmm1, xmm0
  003f8	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 108  : 		y = b;

  003fc	f3 0f 11 56 08	 movss	 DWORD PTR [esi+8], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 243  : 		  float cz = (mRadius*mCenter.GetZ() + old_to_new*caller_p.GetZ()) * recip;

  00401	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 109  : 		z = c;

  00405	f3 0f 11 4e 0c	 movss	 DWORD PTR [esi+12], xmm1
$LN5@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 223  :   for (int j=0; j<count; j++)

  0040a	47		 inc	 edi
  0040b	3b 7d a4	 cmp	 edi, DWORD PTR _count$1$[ebp]
  0040e	0f 8c 02 ff ff
	ff		 jl	 $LL7@Compute
$LN6@Compute:

; 244  : 
; 245  :       mCenter.Set(cx,cy,cz);
; 246  : 		}
; 247  : 	}
; 248  : }

  00414	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00417	5f		 pop	 edi
  00418	5e		 pop	 esi
  00419	33 cd		 xor	 ecx, ebp
  0041b	5b		 pop	 ebx
  0041c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c2 04 00	 ret	 4
?Compute@Sphere@@QAEXABVSphereInterface@@@Z ENDP	; Sphere::Compute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?Set@Sphere@@QAEXABVVector3d@@M@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_radius$ = 12						; size = 4
?Set@Sphere@@QAEXABVVector3d@@M@Z PROC			; Sphere::Set, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _center$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 36   : 	mRadius = radius;

  00006	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 36   : 	mRadius = radius;

  00019	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 37   : 	mRadius2 = radius*radius;

  0001e	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00022	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp

; 37   : 	mRadius2 = radius*radius;

  00025	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 38   : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?Set@Sphere@@QAEXABVVector3d@@M@Z ENDP			; Sphere::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SphereLib\sphere.cpp
;	COMDAT ?IsInStaticRange@Vector3d@@QBE_NXZ
_TEXT	SEGMENT
?IsInStaticRange@Vector3d@@QBE_NXZ PROC			; Vector3d::IsInStaticRange, COMDAT
; _this$ = ecx

; 21   : 	const float LIMIT = 3276700.0f;
; 22   : 	if (x<LIMIT && x>-LIMIT)

  00000	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@4a47fe70
  00008	0f 2f 11	 comiss	 xmm2, DWORD PTR [ecx]
  0000b	76 34		 jbe	 SHORT $LN4@IsInStatic
  0000d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00011	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@ca47fe70
  00019	0f 2f c1	 comiss	 xmm0, xmm1
  0001c	76 23		 jbe	 SHORT $LN4@IsInStatic

; 23   : 		if (y<LIMIT && y>-LIMIT)

  0001e	0f 2f 51 04	 comiss	 xmm2, DWORD PTR [ecx+4]
  00022	76 1d		 jbe	 SHORT $LN4@IsInStatic
  00024	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 13		 jbe	 SHORT $LN4@IsInStatic

; 24   : 			if (z<LIMIT && z>-LIMIT)

  0002e	0f 2f 51 08	 comiss	 xmm2, DWORD PTR [ecx+8]
  00032	76 0d		 jbe	 SHORT $LN4@IsInStatic
  00034	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00039	0f 2f c1	 comiss	 xmm0, xmm1
  0003c	76 03		 jbe	 SHORT $LN4@IsInStatic

; 25   : 				return true;

  0003e	b0 01		 mov	 al, 1

; 28   : }

  00040	c3		 ret	 0
$LN4@IsInStatic:

; 26   : 
; 27   : 	return false;

  00041	32 c0		 xor	 al, al

; 28   : }

  00043	c3		 ret	 0
?IsInStaticRange@Vector3d@@QBE_NXZ ENDP			; Vector3d::IsInStaticRange
_TEXT	ENDS
END
