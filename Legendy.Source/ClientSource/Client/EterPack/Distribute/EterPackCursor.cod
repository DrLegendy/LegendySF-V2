; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0CEterPackCursor@@QAE@PAVCEterPack@@@Z	; CEterPackCursor::CEterPackCursor
PUBLIC	??1CEterPackCursor@@QAE@XZ			; CEterPackCursor::~CEterPackCursor
PUBLIC	?Open@CEterPackCursor@@QAE_NPBD@Z		; CEterPackCursor::Open
PUBLIC	?Close@CEterPackCursor@@QAEXXZ			; CEterPackCursor::Close
PUBLIC	?Seek@CEterPackCursor@@QAEXJ@Z			; CEterPackCursor::Seek
PUBLIC	?Read@CEterPackCursor@@QAE_NPAXJ@Z		; CEterPackCursor::Read
PUBLIC	?Size@CEterPackCursor@@QAEJXZ			; CEterPackCursor::Size
EXTRN	_tolower:PROC
EXTRN	_strncpy:PROC
EXTRN	?IsNull@CFileBase@@QAEHXZ:PROC			; CFileBase::IsNull
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Destroy@CMappedFile@@QAEXXZ:PROC		; CMappedFile::Destroy
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPack::Get
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CEterPackCursor@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ?Size@CEterPackCursor@@QAEJXZ
_TEXT	SEGMENT
?Size@CEterPackCursor@@QAEJXZ PROC			; CEterPackCursor::Size, COMDAT
; _this$ = ecx

; 54   : {

  00000	56		 push	 esi

; 55   : 	if (m_file.IsNull())

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ?IsNull@CFileBase@@QAEHXZ ; CFileBase::IsNull
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $LN2@Size

; 56   : 		return 0;

  0000f	33 c0		 xor	 eax, eax
  00011	5e		 pop	 esi

; 59   : }

  00012	c3		 ret	 0
$LN2@Size:

; 57   : 
; 58   : 	return m_file.Size();

  00013	8b ce		 mov	 ecx, esi
  00015	5e		 pop	 esi
  00016	e9 00 00 00 00	 jmp	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
?Size@CEterPackCursor@@QAEJXZ ENDP			; CEterPackCursor::Size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ?Read@CEterPackCursor@@QAE_NPAXJ@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?Read@CEterPackCursor@@QAE_NPAXJ@Z PROC			; CEterPackCursor::Read, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 42   : 	if (m_file.IsNull())

  00008	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000b	e8 00 00 00 00	 call	 ?IsNull@CFileBase@@QAEHXZ ; CFileBase::IsNull
  00010	85 c0		 test	 eax, eax
  00012	75 3b		 jne	 SHORT $LN5@Read

; 43   : 		return false;
; 44   : 
; 45   : 	if (m_ReadPoint + size > Size())

  00014	8b 9e 4c 01 00
	00		 mov	 ebx, DWORD PTR [esi+332]
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?Size@CEterPackCursor@@QAEJXZ ; CEterPackCursor::Size
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  00024	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]
  00027	3b c8		 cmp	 ecx, eax
  00029	7f 24		 jg	 SHORT $LN5@Read

; 46   : 		return false;
; 47   : 
; 48   : 	memcpy(data, (char*) m_pData + m_ReadPoint, size);

  0002b	8b 86 48 01 00
	00		 mov	 eax, DWORD PTR [esi+328]
  00031	57		 push	 edi
  00032	03 c3		 add	 eax, ebx
  00034	50		 push	 eax
  00035	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00038	e8 00 00 00 00	 call	 _memcpy
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 	m_ReadPoint += size;
; 50   : 	return true;

  00040	b0 01		 mov	 al, 1
  00042	01 be 4c 01 00
	00		 add	 DWORD PTR [esi+332], edi
  00048	5f		 pop	 edi

; 51   : }

  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN5@Read:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	32 c0		 xor	 al, al
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?Read@CEterPackCursor@@QAE_NPAXJ@Z ENDP			; CEterPackCursor::Read
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ?Seek@CEterPackCursor@@QAEXJ@Z
_TEXT	SEGMENT
_offset$ = 8						; size = 4
?Seek@CEterPackCursor@@QAEXJ@Z PROC			; CEterPackCursor::Seek, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 37   : 	m_ReadPoint = max(0, min(Size(), offset));

  00007	e8 00 00 00 00	 call	 ?Size@CEterPackCursor@@QAEJXZ ; CEterPackCursor::Size
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  0000f	3b c7		 cmp	 eax, edi
  00011	7d 09		 jge	 SHORT $LN3@Seek
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?Size@CEterPackCursor@@QAEJXZ ; CEterPackCursor::Size
  0001a	eb 02		 jmp	 SHORT $LN4@Seek
$LN3@Seek:
  0001c	8b c7		 mov	 eax, edi
$LN4@Seek:
  0001e	85 c0		 test	 eax, eax
  00020	79 10		 jns	 SHORT $LN7@Seek
  00022	5f		 pop	 edi
  00023	c7 86 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+332], 0

; 38   : }

  0002d	5e		 pop	 esi
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN7@Seek:

; 37   : 	m_ReadPoint = max(0, min(Size(), offset));

  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?Size@CEterPackCursor@@QAEJXZ ; CEterPackCursor::Size
  00039	3b c7		 cmp	 eax, edi
  0003b	7d 13		 jge	 SHORT $LN5@Seek
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?Size@CEterPackCursor@@QAEJXZ ; CEterPackCursor::Size
  00044	5f		 pop	 edi
  00045	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax

; 38   : }

  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN5@Seek:

; 37   : 	m_ReadPoint = max(0, min(Size(), offset));

  00050	89 be 4c 01 00
	00		 mov	 DWORD PTR [esi+332], edi
  00056	5f		 pop	 edi

; 38   : }

  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?Seek@CEterPackCursor@@QAEXJ@Z ENDP			; CEterPackCursor::Seek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ?Close@CEterPackCursor@@QAEXXZ
_TEXT	SEGMENT
?Close@CEterPackCursor@@QAEXXZ PROC			; CEterPackCursor::Close, COMDAT
; _this$ = ecx

; 29   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 30   : 	m_file.Destroy();

  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ?Destroy@CMappedFile@@QAEXXZ ; CMappedFile::Destroy

; 31   : 	m_pData = NULL;

  0000b	c7 86 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+328], 0

; 32   : 	m_ReadPoint = 0;

  00015	c7 86 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+332], 0
  0001f	5e		 pop	 esi

; 33   : }

  00020	c3		 ret	 0
?Close@CEterPackCursor@@QAEXXZ ENDP			; CEterPackCursor::Close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ?Open@CEterPackCursor@@QAE_NPBD@Z
_TEXT	SEGMENT
_tmpFilename$ = -268					; size = 261
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Open@CEterPackCursor@@QAE_NPBD@Z PROC			; CEterPackCursor::Open, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi

; 19   : 	strncpy(tmpFilename, filename, MAX_PATH);

  00018	68 04 01 00 00	 push	 260			; 00000104H
  0001d	50		 push	 eax
  0001e	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpFilename$[ebp]
  00024	8b f9		 mov	 edi, ecx
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _strncpy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 24   : 	while (*p)

  0002c	8a 85 f4 fe ff
	ff		 mov	 al, BYTE PTR _tmpFilename$[ebp]
  00032	8d b5 f4 fe ff
	ff		 lea	 esi, DWORD PTR _tmpFilename$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp

; 19   : 	strncpy(tmpFilename, filename, MAX_PATH);

  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 24   : 	while (*p)

  0003b	84 c0		 test	 al, al
  0003d	74 1e		 je	 SHORT $LN6@Open
  0003f	90		 npad	 1
$LL5@Open:

; 25   : 	{
; 26   : 		if (*p == '\\')

  00040	3c 5c		 cmp	 al, 92			; 0000005cH
  00042	75 04		 jne	 SHORT $LN7@Open

; 27   : 			*p = '/';

  00044	b0 2f		 mov	 al, 47			; 0000002fH
  00046	eb 0c		 jmp	 SHORT $LN8@Open
$LN7@Open:

; 28   : 		else
; 29   : 			*p = (int) tolower(*p);

  00048	0f be c0	 movsx	 eax, al
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _tolower
  00051	83 c4 04	 add	 esp, 4
$LN8@Open:

; 30   : 		p++;

  00054	88 06		 mov	 BYTE PTR [esi], al
  00056	46		 inc	 esi
  00057	8a 06		 mov	 al, BYTE PTR [esi]
  00059	84 c0		 test	 al, al
  0005b	75 e3		 jne	 SHORT $LL5@Open
$LN6@Open:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp

; 22   : 	if (!m_pPack->Get(m_file, tmpFilename, &m_pData))

  0005d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0005f	8d 87 48 01 00
	00		 lea	 eax, DWORD PTR [edi+328]
  00065	50		 push	 eax
  00066	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _tmpFilename$[ebp]
  0006c	50		 push	 eax
  0006d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPack::Get

; 23   : 		return false;
; 24   : 
; 25   : 	return true;
; 26   : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	84 c0		 test	 al, al
  0007b	5f		 pop	 edi
  0007c	0f 95 c0	 setne	 al
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?Open@CEterPackCursor@@QAE_NPBD@Z ENDP			; CEterPackCursor::Open
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ??1CEterPackCursor@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CEterPackCursor@@QAE@XZ PROC				; CEterPackCursor::~CEterPackCursor, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CEterPackCursor@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 11   : 	Close();

  00025	e8 00 00 00 00	 call	 ?Close@CEterPackCursor@@QAEXXZ ; CEterPackCursor::Close

; 12   : }

  0002a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002d	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00032	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00035	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003c	59		 pop	 ecx
  0003d	5e		 pop	 esi
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CEterPackCursor@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CEterPackCursor@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CEterPackCursor@@QAE@XZ ENDP				; CEterPackCursor::~CEterPackCursor
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackCursor.cpp
;	COMDAT ??0CEterPackCursor@@QAE@PAVCEterPack@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pack$ = 8						; size = 4
??0CEterPackCursor@@QAE@PAVCEterPack@@@Z PROC		; CEterPackCursor::CEterPackCursor, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5    : CEterPackCursor::CEterPackCursor(CEterPack* pack) : m_pPack(pack), m_pData(NULL), m_ReadPoint(0)

  00004	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 6    : {

  0000d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00010	89 06		 mov	 DWORD PTR [esi], eax
  00012	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 5    : CEterPackCursor::CEterPackCursor(CEterPack* pack) : m_pPack(pack), m_pData(NULL), m_ReadPoint(0)

  00017	c7 86 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+328], 0

; 7    : }

  00021	8b c6		 mov	 eax, esi
  00023	c7 86 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+332], 0
  0002d	5e		 pop	 esi
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0CEterPackCursor@@QAE@PAVCEterPack@@@Z ENDP		; CEterPackCursor::CEterPackCursor
_TEXT	ENDS
END
