; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoPath
PUBLIC	??$hash_value@K@boost@@YAIK@Z			; boost::hash_value<unsigned long>
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1CEterFileDict@@QAE@XZ			; CEterFileDict::~CEterFileDict
PUBLIC	??1?$CSingleton@VCEterPackManager@@@@UAE@XZ	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
PUBLIC	??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z	; CSingleton<CEterPackManager>::`scalar deleting destructor'
PUBLIC	??0CEterPackManager@@QAE@XZ			; CEterPackManager::CEterPackManager
PUBLIC	??1CEterPackManager@@UAE@XZ			; CEterPackManager::~CEterPackManager
PUBLIC	?SetCacheMode@CEterPackManager@@QAEXXZ		; CEterPackManager::SetCacheMode
PUBLIC	?SetRelativePathMode@CEterPackManager@@QAEXXZ	; CEterPackManager::SetRelativePathMode
PUBLIC	?LoadStaticCache@CEterPackManager@@QAEXPBD@Z	; CEterPackManager::LoadStaticCache
PUBLIC	?SetSearchMode@CEterPackManager@@QAEX_N@Z	; CEterPackManager::SetSearchMode
PUBLIC	?GetSearchMode@CEterPackManager@@QAEHXZ		; CEterPackManager::GetSearchMode
PUBLIC	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
PUBLIC	?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
PUBLIC	?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
PUBLIC	?isExist@CEterPackManager@@QAE_NPBD@Z		; CEterPackManager::isExist
PUBLIC	?isExistInPack@CEterPackManager@@QAE_NPBD@Z	; CEterPackManager::isExistInPack
PUBLIC	?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z	; CEterPackManager::RegisterPack
PUBLIC	?RegisterRootPack@CEterPackManager@@QAEXPBD@Z	; CEterPackManager::RegisterRootPack
PUBLIC	?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z ; CEterPackManager::RegisterPackWhenPackMaking
PUBLIC	?DecryptPackIV@CEterPackManager@@QAE_NK@Z	; CEterPackManager::DecryptPackIV
PUBLIC	?GetRootPackFileName@CEterPackManager@@QAEPBDXZ	; CEterPackManager::GetRootPackFileName
PUBLIC	?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z ; CEterPackManager::WriteHybridCryptPackInfo
PUBLIC	?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z ; CEterPackManager::RetrieveHybridCryptPackKeys
PUBLIC	?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z ; CEterPackManager::RetrieveHybridCryptPackSDB
PUBLIC	?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ ; CEterPackManager::ArrangeMemoryMappedPack
PUBLIC	?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
PUBLIC	?CompareName@CEterPackManager@@IAE_NPBDK0@Z	; CEterPackManager::CompareName
PUBLIC	?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z ; CEterPackManager::FindPack
PUBLIC	?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ; CEterPackManager::__FindCache
PUBLIC	?__ClearCacheMap@CEterPackManager@@IAEXXZ	; CEterPackManager::__ClearCacheMap
PUBLIC	?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
PUBLIC	??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
PUBLIC	??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
PUBLIC	?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
PUBLIC	??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
PUBLIC	?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
PUBLIC	??_GCEterPackManager@@UAEPAXI@Z			; CEterPackManager::`scalar deleting destructor'
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>
PUBLIC	??1FinderLock@@QAE@XZ				; FinderLock::~FinderLock
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * &>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
PUBLIC	??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<CEterPack *,void *> *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * const &>
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
PUBLIC	??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCEterPackManager@@@@6B@	; CSingleton<CEterPackManager>::`vftable'
PUBLIC	??_7CEterPackManager@@6B@			; CEterPackManager::`vftable'
PUBLIC	??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@ ; `string'
PUBLIC	??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@ ; `string'
PUBLIC	??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CEterPackManager@@6B@			; CEterPackManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEterPackManager@@@8			; CEterPackManager `RTTI Type Descriptor'
PUBLIC	??_R3CEterPackManager@@8			; CEterPackManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEterPackManager@@8			; CEterPackManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEterPackManager@@8		; CEterPackManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCEterPackManager@@@@@8	; CSingleton<CEterPackManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCEterPackManager@@@@8	; CSingleton<CEterPackManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCEterPackManager@@@@8	; CSingleton<CEterPackManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCEterPackManager@@@@6B@	; CSingleton<CEterPackManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41efffffffe00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__access:PROC
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	??0CFileBase@@QAE@XZ:PROC			; CFileBase::CFileBase
EXTRN	??1CFileBase@@UAE@XZ:PROC			; CFileBase::~CFileBase
EXTRN	?Close@CFileBase@@QAEXXZ:PROC			; CFileBase::Close
EXTRN	?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z:PROC	; CFileBase::Create
EXTRN	?SeekCur@CFileBase@@QAEXK@Z:PROC		; CFileBase::SeekCur
EXTRN	?Seek@CFileBase@@QAEXK@Z:PROC			; CFileBase::Seek
EXTRN	?GetPosition@CFileBase@@QAEKXZ:PROC		; CFileBase::GetPosition
EXTRN	?Write@CFileBase@@UAEHPBXH@Z:PROC		; CFileBase::Write
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Link@CMappedFile@@QAEXKPBX@Z:PROC		; CMappedFile::Link
EXTRN	?Create@CMappedFile@@QAEHPBDPAPBXHH@Z:PROC	; CMappedFile::Create
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z:PROC ; CEterFileDict::GetItem
EXTRN	??0CEterPack@@QAE@XZ:PROC			; CEterPack::CEterPack
EXTRN	??1CEterPack@@UAE@XZ:PROC			; CEterPack::~CEterPack
EXTRN	?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z:PROC ; CEterPack::Create
EXTRN	?DecryptIV@CEterPack@@QAE_NK@Z:PROC		; CEterPack::DecryptIV
EXTRN	?GetDBName@CEterPack@@QAEPBDXZ:PROC		; CEterPack::GetDBName
EXTRN	?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPack::Get
EXTRN	?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z:PROC ; CEterPack::Get2
EXTRN	?IsExist@CEterPack@@QAE_NPBD@Z:PROC		; CEterPack::IsExist
EXTRN	?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ:PROC ; CEterPack::GetPackPolicy_HybridCrypt
EXTRN	?GetSingleton@CMakePackLog@@SAAAV1@XZ:PROC	; CMakePackLog::GetSingleton
EXTRN	?Writef@CMakePackLog@@QAAXPBDZZ:PROC		; CMakePackLog::Writef
EXTRN	??_E?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z:PROC ; CSingleton<CEterPackManager>::`vector deleting destructor'
EXTRN	??_ECEterPackManager@@UAEPAXI@Z:PROC		; CEterPackManager::`vector deleting destructor'
EXTRN	?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ:PROC ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
EXTRN	?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ:PROC ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
EXTRN	?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
EXTRN	?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:PROC ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
EXTRN	?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
EXTRN	?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:PROC ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dtoui3:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA DD 01H DUP (?) ; `CEterPackManager::GetFromPack'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCEterPackManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCEterPackManager@@@@6B@ DD 00H	; CSingleton<CEterPackManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCEterPackManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCEterPackManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCEterPackManager@@@@8 DD 00H		; CSingleton<CEterPackManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCEterPackManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCEterPackManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CEterPackManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCEterPackManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCEterPackManager@@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEterPackManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEterPackManager@@8 DD FLAT:??_R0?AVCEterPackManager@@@8 ; CEterPackManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CEterPackManager@@8
rdata$r	SEGMENT
??_R2CEterPackManager@@8 DD FLAT:??_R1A@?0A@EA@CEterPackManager@@8 ; CEterPackManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CEterPackManager@@8
rdata$r	SEGMENT
??_R3CEterPackManager@@8 DD 00H				; CEterPackManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEterPackManager@@@8
data$r	SEGMENT
??_R0?AVCEterPackManager@@@8 DD FLAT:??_7type_info@@6B@	; CEterPackManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEterPackManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEterPackManager@@6B@
rdata$r	SEGMENT
??_R4CEterPackManager@@6B@ DD 00H			; CEterPackManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEterPackManager@@@8
	DD	FLAT:??_R3CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@
CONST	SEGMENT
??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@ DB 'CEterPackManage'
	DB	'r::WriteHybridCryptPackInfo PackName : %s, Hash : %x', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@
CONST	SEGMENT
??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@ DB 'CEterPackManage'
	DB	'r::RetrieveHybridCryptPackKeys', 09H, 'cryptokey length of fi'
	DB	'le(%s) is not matched. received(%d) != haved(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@
CONST	SEGMENT
??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@ DB '%s: Pack fi'
	DB	'le does not exist', 00H			; `string'
CONST	ENDS
;	COMDAT ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `CEterPackManager::GetFromPack'::`2'::strFileName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_7CEterPackManager@@6B@
CONST	SEGMENT
??_7CEterPackManager@@6B@ DD FLAT:??_R4CEterPackManager@@6B@ ; CEterPackManager::`vftable'
	DD	FLAT:??_ECEterPackManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCEterPackManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCEterPackManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCEterPackManager@@@@6B@ ; CSingleton<CEterPackManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z$0
__ehfuncinfo$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$2
__ehfuncinfo$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$1
__ehfuncinfo$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z$1
__ehfuncinfo$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z$0
__ehfuncinfo$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$1
__ehfuncinfo$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$1
__ehfuncinfo$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$1
__ehfuncinfo$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$4
__ehfuncinfo$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?isExistInPack@CEterPackManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?isExistInPack@CEterPackManager@@QAE_NPBD@Z$0
__ehfuncinfo$?isExistInPack@CEterPackManager@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0
__ehfuncinfo$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$1
__ehfuncinfo$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEterPackManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$2
__ehfuncinfo$??0CEterPackManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CEterPackManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00001	6a 24		 push	 36			; 00000024H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	0f 11 40 08	 movups	 XMMWORD PTR [eax+8], xmm0
  00024	5e		 pop	 esi
  00025	66 0f d6 40 18	 movq	 QWORD PTR [eax+24], xmm0
  0002a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  00031	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_const
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 24		 push	 36			; 00000024H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_const:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00001	6a 14		 push	 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002c	5e		 pop	 esi

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  0002d	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_const
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_const:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >, COMDAT
; _this$ = ecx

; 2013 :       {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2014 :         if (node_) {

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 34		 je	 SHORT $LN2@node_tmp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00011	72 0d		 jb	 SHORT $LN16@node_tmp

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00013	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	50		 push	 eax
  00015	ff 76 08	 push	 DWORD PTR [esi+8]
  00018	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001d	83 c4 08	 add	 esp, 8
$LN16@node_tmp:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00020	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00027	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 24		 push	 36			; 00000024H
  00034	ff 77 04	 push	 DWORD PTR [edi+4]
  00037	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003c	83 c4 08	 add	 esp, 8
$LN2@node_tmp:
  0003f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00040	5e		 pop	 esi
  00041	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_tmp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_tmp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00012	8b fa		 mov	 edi, edx

; 3046 :           if (!size_)

  00014	74 62		 je	 SHORT $LN17@find_node_

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001c	85 f6		 test	 esi, esi
  0001e	74 58		 je	 SHORT $LN17@find_node_
  00020	8b 36		 mov	 esi, DWORD PTR [esi]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00022	85 f6		 test	 esi, esi
  00024	74 54		 je	 SHORT $LN40@find_node_
  00026	8b 5d 0c	 mov	 ebx, DWORD PTR _k$[ebp]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@find_node_:

; 3595 :             if (eq(k, this->get_key(n))) {

  00030	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 91   :         return _Left == _Right;

  00033	50		 push	 eax
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0003a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  0003d	84 c0		 test	 al, al
  0003f	75 39		 jne	 SHORT $LN40@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00041	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00044	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00049	3b c7		 cmp	 eax, edi
  0004b	75 22		 jne	 SHORT $LN42@find_node_
  0004d	0f 1f 00	 npad	 3
$LL32@find_node_:

; 2971 :             n2 = next_node(n2);

  00050	8b 36		 mov	 esi, DWORD PTR [esi]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00052	85 f6		 test	 esi, esi
  00054	74 24		 je	 SHORT $LN40@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00056	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	f7 d0		 not	 eax
  0005e	a8 01		 test	 al, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00060	74 ee		 je	 SHORT $LL32@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00062	85 f6		 test	 esi, esi
  00064	75 ca		 jne	 SHORT $LL2@find_node_

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  00066	5f		 pop	 edi
  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	5d		 pop	 ebp
  0006c	c2 0c 00	 ret	 12			; 0000000cH
$LN42@find_node_:
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	33 c0		 xor	 eax, eax
  00073	5b		 pop	 ebx
  00074	5d		 pop	 ebp
  00075	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:

; 3593 :               return n;

  00078	33 f6		 xor	 esi, esi
$LN40@find_node_:
  0007a	5f		 pop	 edi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	5d		 pop	 ebp
  00080	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z PROC ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count, COMDAT

; 2608 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5682 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _min$[ebp]
  00008	be 00 00 00 00	 mov	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
  0000d	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
$LL9@new_bucket:

; 5685 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00012	8b d0		 mov	 edx, eax
  00014	d1 ea		 shr	 edx, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00016	39 3c 96	 cmp	 DWORD PTR [esi+edx*4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  00019	8d 0c 96	 lea	 ecx, DWORD PTR [esi+edx*4]

; 5687 :         if (_Pred(*_UMid, _Val)) { // try top half

  0001c	73 0c		 jae	 SHORT $LN11@new_bucket

; 5688 :             _UFirst = _Next_iter(_UMid);

  0001e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]

; 5689 :             _Count -= _Count2 + 1;

  00021	83 c9 ff	 or	 ecx, -1
  00024	2b ca		 sub	 ecx, edx
  00026	03 c1		 add	 eax, ecx

; 5690 :         } else {

  00028	eb 02		 jmp	 SHORT $LN12@new_bucket
$LN11@new_bucket:

; 5691 :             _Count = _Count2;

  0002a	8b c2		 mov	 eax, edx
$LN12@new_bucket:

; 5683 : 
; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0002c	85 c0		 test	 eax, eax
  0002e	7f e2		 jg	 SHORT $LL9@new_bucket
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2609 :           return boost::unordered::detail::next_prime(min);

  00030	81 fe 98 00 00
	00		 cmp	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB+152
  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	5f		 pop	 edi
  0003a	0f 45 c6	 cmovne	 eax, esi
  0003d	5e		 pop	 esi
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]

; 2610 :         }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ENDP ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 91   :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL32@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL32@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL2@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<CEterPack *,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<CEterPack *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
_TEXT	SEGMENT
_b$2 = -28						; size = 8
_a$3 = -28						; size = 8
_this$1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_h$1$ = 12						; size = 4
_k$ = 12						; size = 4
_<args_0>$ = 16						; size = 4
??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >, COMDAT
; _this$ = ecx

; 3735 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _k$[ebp]
  00030	8b d7		 mov	 edx, edi

; 2145 :         if (_Large_string_engaged()) {

  00032	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00036	72 02		 jb	 SHORT $LN22@emplace_un

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00038	8b 17		 mov	 edx, DWORD PTR [edi]
$LN22@emplace_un:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0003a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 479  :        size_t h = 0;

  0003d	33 db		 xor	 ebx, ebx
  0003f	03 ca		 add	 ecx, edx
  00041	89 5d 0c	 mov	 DWORD PTR _h$1$[ebp], ebx

; 480  : 
; 481  :        while (s < end)

  00044	3b d1		 cmp	 edx, ecx
  00046	73 1b		 jae	 SHORT $LN17@emplace_un
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL112@emplace_un:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00050	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00053	42		 inc	 edx
  00054	69 db 93 01 00
	01		 imul	 ebx, ebx, 16777619
  0005a	33 d8		 xor	 ebx, eax
  0005c	3b d1		 cmp	 edx, ecx
  0005e	72 f0		 jb	 SHORT $LL112@emplace_un
  00060	89 5d 0c	 mov	 DWORD PTR _h$1$[ebp], ebx
$LN17@emplace_un:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00063	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	83 e0 01	 and	 eax, 1
  0006c	03 c8		 add	 ecx, eax

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  0006e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00071	f7 d9		 neg	 ecx
  00073	1b c9		 sbb	 ecx, ecx
  00075	23 c8		 and	 ecx, eax
  00077	51		 push	 ecx
  00078	57		 push	 edi
  00079	53		 push	 ebx
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 3736 :           std::size_t key_hash = this->hash(k);
; 3737 :           node_pointer pos = this->find_node(key_hash, k);

  00081	8b c8		 mov	 ecx, eax

; 3738 :           if (pos) {

  00083	85 c9		 test	 ecx, ecx
  00085	74 1d		 je	 SHORT $LN2@emplace_un
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00087	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0008a	89 08		 mov	 DWORD PTR [eax], ecx
  0008c	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace_un:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  000a4	8d 5e 03	 lea	 ebx, DWORD PTR [esi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  000a7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0
  000ae	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000b1	f7 db		 neg	 ebx
  000b3	1b db		 sbb	 ebx, ebx
  000b5	23 d8		 and	 ebx, eax
  000b7	89 5d e4	 mov	 DWORD PTR _a$3[ebp], ebx

; 2039 :           a.create_node();

  000ba	8d 4d e4	 lea	 ecx, DWORD PTR _a$3[ebp]
  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c4	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node

; 2040 :           construct_from_args(

  000c9	8b 7d e8	 mov	 edi, DWORD PTR _a$3[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

  000cc	8b 75 10	 mov	 esi, DWORD PTR _<args_0>$[ebp]
  000cf	56		 push	 esi
  000d0	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d8	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000db	8d 4d e4	 lea	 ecx, DWORD PTR _a$3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

  000de	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1957 :           node_ = node_pointer();

  000e1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0

; 2042 :           return a.release();

  000e8	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000ed	8b f7		 mov	 esi, edi
  000ef	89 5d e4	 mov	 DWORD PTR _b$2[ebp], ebx
  000f2	89 75 e8	 mov	 DWORD PTR _b$2[ebp+4], esi

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000f5	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000f8	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 4542 :         if (!buckets_) {

  000ff	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  00103	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00106	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  00109	75 1a		 jne	 SHORT $LN72@emplace_un

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  0010b	57		 push	 edi
  0010c	8b cb		 mov	 ecx, ebx
  0010e	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00113	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00116	3b c8		 cmp	 ecx, eax
  00118	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  0011b	51		 push	 ecx
  0011c	8b cb		 mov	 ecx, ebx
  0011e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
  00123	eb 2d		 jmp	 SHORT $LN75@emplace_un
$LN72@emplace_un:

; 4544 :         } else if (size > max_load_) {

  00125	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  00128	76 28		 jbe	 SHORT $LN75@emplace_un

; 4545 :           std::size_t num_buckets =

  0012a	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0012c	ba 01 00 00 00	 mov	 edx, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  00131	d1 e9		 shr	 ecx, 1
  00133	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00135	3b f8		 cmp	 edi, eax
  00137	0f 42 d1	 cmovb	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0013a	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0013c	03 53 08	 add	 edx, DWORD PTR [ebx+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00145	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
  00148	74 08		 je	 SHORT $LN75@emplace_un

; 4549 :             this->rehash_impl(num_buckets);

  0014a	50		 push	 eax
  0014b	8b cb		 mov	 ecx, ebx
  0014d	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
$LN75@emplace_un:

; 2604 :           return hash % bucket_count;

  00152	8b 45 0c	 mov	 eax, DWORD PTR _h$1$[ebp]
  00155	33 d2		 xor	 edx, edx
  00157	f7 73 04	 div	 DWORD PTR [ebx+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0015a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 2007 :           node_ = node_pointer();

  0015d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _b$2[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00164	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00167	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0016d	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 3693 :           if (!b->next_) {

  00170	8b 07		 mov	 eax, DWORD PTR [edi]
  00172	85 c0		 test	 eax, eax
  00174	75 24		 jne	 SHORT $LN84@emplace_un

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00176	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00179	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0017c	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  0017f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00181	85 c0		 test	 eax, eax
  00183	74 0b		 je	 SHORT $LN86@emplace_un

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00185	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00188	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0018d	89 34 82	 mov	 DWORD PTR [edx+eax*4], esi
$LN86@emplace_un:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  00190	89 0f		 mov	 DWORD PTR [edi], ecx

; 3702 :             n->next_ = start_node->next_;

  00192	8b 01		 mov	 eax, DWORD PTR [ecx]
  00194	89 06		 mov	 DWORD PTR [esi], eax

; 3703 :             start_node->next_ = n;

  00196	89 31		 mov	 DWORD PTR [ecx], esi

; 3704 :           } else {

  00198	eb 08		 jmp	 SHORT $LN85@emplace_un
$LN84@emplace_un:

; 3705 :             n->next_ = b->next_->next_;

  0019a	8b 00		 mov	 eax, DWORD PTR [eax]
  0019c	89 06		 mov	 DWORD PTR [esi], eax

; 3706 :             b->next_->next_ = n;

  0019e	8b 07		 mov	 eax, DWORD PTR [edi]
  001a0	89 30		 mov	 DWORD PTR [eax], esi
$LN85@emplace_un:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  001a2	ff 43 08	 inc	 DWORD PTR [ebx+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  001a5	8d 4d e4	 lea	 ecx, DWORD PTR _b$2[ebp]
  001a8	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001ad	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001b0	89 30		 mov	 DWORD PTR [eax], esi
  001b2	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  001b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c0	59		 pop	 ecx
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _a$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$2:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _b$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
_TEXT	SEGMENT
_b$2 = -20						; size = 8
_a$3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_key_hash$1$ = 12					; size = 4
_k$ = 12						; size = 4
_<args_0>$ = 16						; size = 4
??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >, COMDAT
; _this$ = ecx

; 3735 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0002a	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
  0002d	ff 36		 push	 DWORD PTR [esi]
  0002f	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00034	0f b6 17	 movzx	 edx, BYTE PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00037	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  0003a	83 e2 01	 and	 edx, 1

; 3736 :           std::size_t key_hash = this->hash(k);

  0003d	89 45 0c	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  00040	42		 inc	 edx
  00041	03 d7		 add	 edx, edi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00043	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00046	f7 da		 neg	 edx
  00048	1b d2		 sbb	 edx, edx
  0004a	23 d1		 and	 edx, ecx
  0004c	8b cf		 mov	 ecx, edi
  0004e	52		 push	 edx
  0004f	56		 push	 esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3737 :           node_pointer pos = this->find_node(key_hash, k);

  00056	8b c8		 mov	 ecx, eax

; 3738 :           if (pos) {

  00058	85 c9		 test	 ecx, ecx
  0005a	74 1d		 je	 SHORT $LN2@emplace_un
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0005c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx
  00061	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace_un:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00079	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0007c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0
  00083	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00086	f7 de		 neg	 esi
  00088	1b f6		 sbb	 esi, esi
  0008a	23 f0		 and	 esi, eax
  0008c	89 75 ec	 mov	 DWORD PTR _a$3[ebp], esi

; 2039 :           a.create_node();

  0008f	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0009e	8b 45 10	 mov	 eax, DWORD PTR _<args_0>$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000a1	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  000a4	8b 5d f0	 mov	 ebx, DWORD PTR _a$3[ebp+4]

; 1957 :           node_ = node_pointer();

  000a7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000ae	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000b2	66 0f d6 43 08	 movq	 QWORD PTR [ebx+8], xmm0
  000b7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ba	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000bd	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000c2	89 75 ec	 mov	 DWORD PTR _b$2[ebp], esi
  000c5	89 5d f0	 mov	 DWORD PTR _b$2[ebp+4], ebx

; 4542 :         if (!buckets_) {

  000c8	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000cc	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000cf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000d6	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  000d9	75 1a		 jne	 SHORT $LN58@emplace_un

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000db	56		 push	 esi
  000dc	8b cf		 mov	 ecx, edi
  000de	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000e3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e6	3b c8		 cmp	 ecx, eax
  000e8	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000eb	51		 push	 ecx
  000ec	8b cf		 mov	 ecx, edi
  000ee	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  000f3	eb 2d		 jmp	 SHORT $LN61@emplace_un
$LN58@emplace_un:

; 4544 :         } else if (size > max_load_) {

  000f5	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  000f8	76 28		 jbe	 SHORT $LN61@emplace_un

; 4545 :           std::size_t num_buckets =

  000fa	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000fc	ba 01 00 00 00	 mov	 edx, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  00101	d1 e9		 shr	 ecx, 1
  00103	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00105	3b f0		 cmp	 esi, eax
  00107	0f 42 d1	 cmovb	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0010a	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0010c	03 57 08	 add	 edx, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00115	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00118	74 08		 je	 SHORT $LN61@emplace_un

; 4549 :             this->rehash_impl(num_buckets);

  0011a	50		 push	 eax
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN61@emplace_un:

; 2604 :           return hash % bucket_count;

  00122	8b 45 0c	 mov	 eax, DWORD PTR _key_hash$1$[ebp]
  00125	33 d2		 xor	 edx, edx
  00127	f7 77 04	 div	 DWORD PTR [edi+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0012a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  0012d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$2[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00134	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00137	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0013d	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 3693 :           if (!b->next_) {

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	85 c0		 test	 eax, eax
  00144	75 24		 jne	 SHORT $LN70@emplace_un

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00146	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00149	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0014c	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  0014f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00151	85 c0		 test	 eax, eax
  00153	74 0b		 je	 SHORT $LN72@emplace_un

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00155	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00158	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0015d	89 1c 82	 mov	 DWORD PTR [edx+eax*4], ebx
$LN72@emplace_un:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  00160	89 0e		 mov	 DWORD PTR [esi], ecx

; 3702 :             n->next_ = start_node->next_;

  00162	8b 01		 mov	 eax, DWORD PTR [ecx]
  00164	89 03		 mov	 DWORD PTR [ebx], eax

; 3703 :             start_node->next_ = n;

  00166	89 19		 mov	 DWORD PTR [ecx], ebx

; 3704 :           } else {

  00168	eb 08		 jmp	 SHORT $LN71@emplace_un
$LN70@emplace_un:

; 3705 :             n->next_ = b->next_->next_;

  0016a	8b 00		 mov	 eax, DWORD PTR [eax]
  0016c	89 03		 mov	 DWORD PTR [ebx], eax

; 3706 :             b->next_->next_ = n;

  0016e	8b 06		 mov	 eax, DWORD PTR [esi]
  00170	89 18		 mov	 DWORD PTR [eax], ebx
$LN71@emplace_un:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  00172	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  00175	8d 4d ec	 lea	 ecx, DWORD PTR _b$2[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0017d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00180	89 18		 mov	 DWORD PTR [eax], ebx
  00182	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00186	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00189	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00190	59		 pop	 ecx
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR _b$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ
text$yd	SEGMENT
??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ PROC ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName'', COMDAT

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00007	72 22		 jb	 SHORT $LN7@dynamic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00010	68 00 00 00 00	 push	 OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00015	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>

; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  0001f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	5e		 pop	 esi
$LN7@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0002b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00035	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00046	c3		 ret	 0
??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ ENDP ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ??1FinderLock@@QAE@XZ
_TEXT	SEGMENT
??1FinderLock@@QAE@XZ PROC				; FinderLock::~FinderLock, COMDAT
; _this$ = ecx

; 188  : 		LeaveCriticalSection(p_cs);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 189  : 	}

  00008	c3		 ret	 0
??1FinderLock@@QAE@XZ ENDP				; FinderLock::~FinderLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>, COMDAT
; _this$ = ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN7@pair

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN7@pair:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEterPackManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEterPackManager@@UAEPAXI@Z PROC			; CEterPackManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEterPackManager@@UAE@XZ ; CEterPackManager::~CEterPackManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 78 14 00 00	 push	 5240			; 00001478H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCEterPackManager@@UAEPAXI@Z ENDP			; CEterPackManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 1805 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 90	 lea	 ebx, DWORD PTR [eax+edx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL4@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00007	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	74 65		 je	 SHORT $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00013	8b da		 mov	 ebx, edx
  00015	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN52@table
  0001c	0f 1f 40 00	 npad	 4
$LL4@table:

; 3357 :               node_pointer next = next_node(n);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00022	6a 14		 push	 20			; 00000014H
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002d	8b c6		 mov	 eax, esi
  0002f	85 f6		 test	 esi, esi
  00031	75 ed		 jne	 SHORT $LL4@table
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b da		 mov	 ebx, edx
  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN52@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003b	8b c6		 mov	 eax, esi
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00040	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00043	3b d9		 cmp	 ebx, ecx
  00045	0f 44 f0	 cmove	 esi, eax
  00048	0f 44 d3	 cmove	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004b	8d 04 b5 04 00
	00 00		 lea	 eax, DWORD PTR [esi*4+4]
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00059	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00063	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  0006a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
$LN6@table:
  00073	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
tv459 = -8						; size = 8
_f$ = -8						; size = 8
_dummy_node$1$ = 8					; size = 4
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 3c		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 d2 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003a	8b f0		 mov	 esi, eax

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00046	50		 push	 eax
  00047	ff 77 14	 push	 DWORD PTR [edi+20]
  0004a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  00052	eb 25		 jmp	 SHORT $LN8@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  00054	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00061	0f 87 98 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00067	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00077	8b f0		 mov	 esi, eax
$LN8@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00079	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0007c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0007f	85 f6		 test	 esi, esi
  00081	74 55		 je	 SHORT $LN51@create_buc
  00083	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  0008f	8b c3		 mov	 eax, ebx
  00091	83 ec 08	 sub	 esp, 8
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000a7	f2 0f 11 4d f8	 movsd	 QWORD PTR tv459[ebp], xmm1
  000ac	dd 45 f8	 fld	 QWORD PTR tv459[ebp]
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _ceil
  000b7	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  000ba	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000bf	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  000c2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  000ca	72 05		 jb	 SHORT $LN55@create_buc
  000cc	83 c8 ff	 or	 eax, -1
  000cf	eb 09		 jmp	 SHORT $LN52@create_buc
$LN55@create_buc:
  000d1	e8 00 00 00 00	 call	 __dtoui3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000d6	eb 02		 jmp	 SHORT $LN52@create_buc
$LN51@create_buc:
  000d8	33 c0		 xor	 eax, eax
$LN52@create_buc:
  000da	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  000dd	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000e0	3b f0		 cmp	 esi, eax
  000e2	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  000e4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000ea	83 c6 04	 add	 esi, 4
  000ed	3b f0		 cmp	 esi, eax
  000ef	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 08		 mov	 DWORD PTR [eax], ecx
  000f8	5b		 pop	 ebx

; 3212 :         }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN69@create_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN70@create_buc:
  00104	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
tv75 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv75[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtoui3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00004	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  00007	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00008	8b 5d 0c	 mov	 ebx, DWORD PTR _k$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  0000b	83 e0 01	 and	 eax, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00010	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  00013	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00016	03 f8		 add	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00018	8b cb		 mov	 ecx, ebx

; 3668 :         return _Mypair._Myval2._Myptr();

  0001a	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0001d	f7 df		 neg	 edi
  0001f	1b ff		 sbb	 edi, edi
  00021	23 f8		 and	 edi, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00023	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00027	72 02		 jb	 SHORT $LN30@find

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN30@find:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0002b	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 479  :        size_t h = 0;

  0002e	33 d2		 xor	 edx, edx
  00030	03 f1		 add	 esi, ecx

; 480  : 
; 481  :        while (s < end)

  00032	3b ce		 cmp	 ecx, esi
  00034	73 10		 jae	 SHORT $LN25@find
$LL38@find:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00036	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00039	41		 inc	 ecx
  0003a	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  00040	33 d0		 xor	 edx, eax
  00042	3b ce		 cmp	 ecx, esi
  00044	72 f0		 jb	 SHORT $LL38@find
$LN25@find:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00049	57		 push	 edi
  0004a	53		 push	 ebx
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00051	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00057	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00059	8b c1		 mov	 eax, ecx

; 1805 :     }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_prev$1$ = 8						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00016	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00019	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]
  0001c	89 7d 08	 mov	 DWORD PTR _prev$1$[ebp], edi

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00021	85 ff		 test	 edi, edi
  00023	0f 84 a6 00 00
	00		 je	 $LN3@rehash_imp
  00029	53		 push	 ebx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL2@rehash_imp:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00030	83 7f 1c 10	 cmp	 DWORD PTR [edi+28], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00034	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00037	8b f7		 mov	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00039	72 03		 jb	 SHORT $LN40@rehash_imp

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
$LN40@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0003e	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]

; 479  :        size_t h = 0;

  00041	33 d2		 xor	 edx, edx
  00043	03 d8		 add	 ebx, eax

; 480  : 
; 481  :        while (s < end)

  00045	3b c3		 cmp	 eax, ebx
  00047	73 17		 jae	 SHORT $LN35@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL62@rehash_imp:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00050	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00053	40		 inc	 eax
  00054	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0005a	33 d1		 xor	 edx, ecx
  0005c	3b c3		 cmp	 eax, ebx
  0005e	72 f0		 jb	 SHORT $LL62@rehash_imp
$LN35@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00060	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00063	8b c2		 mov	 eax, edx
  00065	33 d2		 xor	 edx, edx
  00067	f7 73 04	 div	 DWORD PTR [ebx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0006a	8b c2		 mov	 eax, edx
  0006c	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00071	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00074	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00076	85 c0		 test	 eax, eax
  00078	74 26		 je	 SHORT $LN70@rehash_imp
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL4@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00086	f7 d1		 not	 ecx
  00088	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0008b	75 13		 jne	 SHORT $LN70@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0008d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0008f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00091	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00097	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0009a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0009c	85 c0		 test	 eax, eax
  0009e	75 e0		 jne	 SHORT $LL4@rehash_imp
$LN70@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  000a0	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000a3	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  000a6	8b 55 08	 mov	 edx, DWORD PTR _prev$1$[ebp]
  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	85 c0		 test	 eax, eax
  000ad	75 09		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  000af	89 11		 mov	 DWORD PTR [ecx], edx

; 4608 :               prev = n;

  000b1	8b 3e		 mov	 edi, DWORD PTR [esi]
  000b3	89 75 08	 mov	 DWORD PTR _prev$1$[ebp], esi

; 4609 :             } else {

  000b6	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	8b 3e		 mov	 edi, DWORD PTR [esi]
  000bc	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  000be	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c0	8b 02		 mov	 eax, DWORD PTR [edx]
  000c2	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  000c4	89 3a		 mov	 DWORD PTR [edx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  000c6	85 ff		 test	 edi, edi
  000c8	0f 85 62 ff ff
	ff		 jne	 $LL2@rehash_imp
  000ce	5b		 pop	 ebx
$LN3@rehash_imp:
  000cf	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 3345 :           if (buckets_) {

  00007	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0000a	85 d2		 test	 edx, edx
  0000c	0f 84 91 00 00
	00		 je	 $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00012	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00015	8b c8		 mov	 ecx, eax

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00017	56		 push	 esi
  00018	57		 push	 edi

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00019	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0001c	8b fa		 mov	 edi, edx
  0001e	8b 34 82	 mov	 esi, DWORD PTR [edx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00021	85 f6		 test	 esi, esi
  00023	74 47		 je	 SHORT $LN5@table
$LL4@table:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00025	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3357 :               node_pointer next = next_node(n);

  00028	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002d	72 0d		 jb	 SHORT $LN39@table

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00030	50		 push	 eax
  00031	ff 76 08	 push	 DWORD PTR [esi+8]
  00034	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00039	83 c4 08	 add	 esp, 8
$LN39@table:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	6a 24		 push	 36			; 00000024H
  0003e	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00051	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00056	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00059	8b f7		 mov	 esi, edi
  0005b	85 ff		 test	 edi, edi
  0005d	75 c6		 jne	 SHORT $LL4@table
  0005f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00062	8b c8		 mov	 ecx, eax
  00064	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00067	8b fa		 mov	 edi, edx
  00069	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN5@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0006c	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0006f	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00072	3b f9		 cmp	 edi, ecx
  00074	0f 44 45 fc	 cmove	 eax, DWORD PTR $T1[ebp]
  00078	0f 44 d7	 cmove	 edx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0007b	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00082	50		 push	 eax
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00089	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0008c	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 3364 :             max_load_ = 0;

  00093	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 3365 :             size_ = 0;

  0009a	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
$LN6@table:
  000a3	5b		 pop	 ebx

; 3333 :         ~table() { delete_buckets(); }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
tv459 = -8						; size = 8
_f$ = -8						; size = 8
_dummy_node$1$ = 8					; size = 4
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 3c		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 d2 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003a	8b f0		 mov	 esi, eax

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00046	50		 push	 eax
  00047	ff 77 14	 push	 DWORD PTR [edi+20]
  0004a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  00052	eb 25		 jmp	 SHORT $LN8@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  00054	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00061	0f 87 98 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00067	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00077	8b f0		 mov	 esi, eax
$LN8@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00079	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0007c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0007f	85 f6		 test	 esi, esi
  00081	74 55		 je	 SHORT $LN51@create_buc
  00083	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  0008f	8b c3		 mov	 eax, ebx
  00091	83 ec 08	 sub	 esp, 8
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000a7	f2 0f 11 4d f8	 movsd	 QWORD PTR tv459[ebp], xmm1
  000ac	dd 45 f8	 fld	 QWORD PTR tv459[ebp]
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _ceil
  000b7	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  000ba	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000bf	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  000c2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  000ca	72 05		 jb	 SHORT $LN55@create_buc
  000cc	83 c8 ff	 or	 eax, -1
  000cf	eb 09		 jmp	 SHORT $LN52@create_buc
$LN55@create_buc:
  000d1	e8 00 00 00 00	 call	 __dtoui3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000d6	eb 02		 jmp	 SHORT $LN52@create_buc
$LN51@create_buc:
  000d8	33 c0		 xor	 eax, eax
$LN52@create_buc:
  000da	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  000dd	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000e0	3b f0		 cmp	 esi, eax
  000e2	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  000e4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000ea	83 c6 04	 add	 esi, 4
  000ed	3b f0		 cmp	 esi, eax
  000ef	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 08		 mov	 DWORD PTR [eax], ecx
  000f8	5b		 pop	 ebx

; 3212 :         }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN69@create_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN70@create_buc:
  00104	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
tv75 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv75[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtoui3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__Insert_after$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Insert_before$ = 8					; size = 4
__Val$ = 8						; size = 4
?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z PROC ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front, COMDAT
; _this$ = ecx

; 1239 :     void push_front(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 1014 :         if (_Mysize == max_size()) {

  0002a	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1240 :         _Emplace(_Mypair._Myval2._Myhead->_Next, _Val);

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 18		 mov	 ebx, DWORD PTR [eax]

; 1014 :         if (_Mysize == max_size()) {

  00035	74 61		 je	 SHORT $LN38@push_front
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00037	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003a	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0004a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  00052	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00054	8d 45 08	 lea	 eax, DWORD PTR __Insert_before$[ebp]

; 1020 :         return _Op._Transfer_before(_Where);

  00057	89 5d 08	 mov	 DWORD PTR __Insert_before$[ebp], ebx

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0005a	50		 push	 eax
  0005b	57		 push	 edi

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0005c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005e	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1019 :         ++_Mysize;

  00061	ff 46 04	 inc	 DWORD PTR [esi+4]

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  00064	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00067	89 75 f0	 mov	 DWORD PTR __Insert_after$3[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0006a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0006f	8d 45 f0	 lea	 eax, DWORD PTR __Insert_after$3[ebp]
  00072	50		 push	 eax
  00073	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  0007c	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  0007f	83 c4 14	 add	 esp, 20			; 00000014H

; 606  :         _Insert_after->_Next  = _Result;

  00082	89 3e		 mov	 DWORD PTR [esi], edi

; 1241 :     }

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
$LN38@push_front:

; 1015 :             _Xlength_error("list too long");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0009d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN36@push_front:
  000a2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ENDP ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?__ClearCacheMap@CEterPackManager@@IAEXXZ
_TEXT	SEGMENT
?__ClearCacheMap@CEterPackManager@@IAEXXZ PROC		; CEterPackManager::__ClearCacheMap, COMDAT
; _this$ = ecx

; 133  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00003	83 bf 50 14 00
	00 00		 cmp	 DWORD PTR [edi+5200], 0
  0000a	74 7b		 je	 SHORT $LN37@ClearCache

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000c	8b 87 4c 14 00
	00		 mov	 eax, DWORD PTR [edi+5196]
  00012	56		 push	 esi

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00013	8b b7 5c 14 00
	00		 mov	 esi, DWORD PTR [edi+5212]
  00019	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  0001c	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 136  : 	for (i = m_kMap_dwNameKey_kCache.begin(); i != m_kMap_dwNameKey_kCache.end(); ++i)

  0001e	74 19		 je	 SHORT $LN70@ClearCache
$LL4@ClearCache:

; 137  : 		delete [] i->second.m_abBufData;

  00020	ff 76 0c	 push	 DWORD PTR [esi+12]
  00023	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  00028	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 137  : 		delete [] i->second.m_abBufData;

  0002a	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2399 :           return node_ != x.node_;

  0002d	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 136  : 	for (i = m_kMap_dwNameKey_kCache.begin(); i != m_kMap_dwNameKey_kCache.end(); ++i)

  0002f	75 ef		 jne	 SHORT $LL4@ClearCache
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  00031	39 b7 50 14 00
	00		 cmp	 DWORD PTR [edi+5200], esi
  00037	74 4d		 je	 SHORT $LN71@ClearCache
$LN70@ClearCache:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00039	8b 8f 5c 14 00
	00		 mov	 ecx, DWORD PTR [edi+5212]
  0003f	8b 87 4c 14 00
	00		 mov	 eax, DWORD PTR [edi+5196]
  00045	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  00048	3b ca		 cmp	 ecx, edx
  0004a	74 11		 je	 SHORT $LN34@ClearCache
  0004c	0f 1f 40 00	 npad	 4
$LL35@ClearCache:

; 4519 :             it->next_ = node_pointer();

  00050	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00056	83 c1 04	 add	 ecx, 4
  00059	3b ca		 cmp	 ecx, edx
  0005b	75 f3		 jne	 SHORT $LL35@ClearCache
$LN34@ClearCache:

; 4520 :           }
; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();
; 4523 :           node_pointer n = next_node(prev);

  0005d	8b 02		 mov	 eax, DWORD PTR [edx]

; 4524 :           prev->next_ = node_pointer();

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 4525 :           size_ = 0;

  00065	c7 87 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5200], 0

; 4526 : 
; 4527 :           while (n) {

  0006f	85 c0		 test	 eax, eax
  00071	74 13		 je	 SHORT $LN71@ClearCache
$LL36@ClearCache:

; 4528 :             node_pointer next = next_node(n);

  00073	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00075	6a 14		 push	 20			; 00000014H
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0007d	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4530 :             n = next;

  00080	8b c6		 mov	 eax, esi
  00082	85 f6		 test	 esi, esi
  00084	75 ed		 jne	 SHORT $LL36@ClearCache
$LN71@ClearCache:
  00086	5e		 pop	 esi
$LN37@ClearCache:
  00087	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 140  : }

  00088	c3		 ret	 0
?__ClearCacheMap@CEterPackManager@@IAEXXZ ENDP		; CEterPackManager::__ClearCacheMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z
_TEXT	SEGMENT
_f$ = -4						; size = 4
_dwFileNameHash$ = 8					; size = 4
?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z PROC	; CEterPackManager::__FindCache, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 125  : 	boost::unordered_map<DWORD, SCache>::iterator f=m_kMap_dwNameKey_kCache.find(dwFileNameHash);

  00004	8d 45 08	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00007	81 c1 48 14 00
	00		 add	 ecx, 5192		; 00001448H
  0000d	50		 push	 eax
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _f$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  0001a	85 c0		 test	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 126  : 	if (m_kMap_dwNameKey_kCache.end()==f)

  0001c	75 06		 jne	 SHORT $LN2@FindCache

; 130  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN2@FindCache:

; 127  : 		return NULL;
; 128  : 
; 129  : 	return &f->second;

  00024	83 c0 0c	 add	 eax, 12			; 0000000cH

; 130  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ENDP	; CEterPackManager::__FindCache
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
_TEXT	SEGMENT
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z PROC	; CEterPackManager::FindPack, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_szPathName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00030	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00037	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003e	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 24   : 	if (0 == ConvertFileName(c_szPathName, strFileName))

  00042	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	8b cf		 mov	 ecx, edi
  00050	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  00055	85 c0		 test	 eax, eax
  00057	75 05		 jne	 SHORT $LN5@FindPack

; 25   : 	{
; 26   : 		return &m_RootPack;

  00059	8d 5f 24	 lea	 ebx, DWORD PTR [edi+36]
  0005c	eb 54		 jmp	 SHORT $LN11@FindPack
$LN5@FindPack:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0005e	83 bf 38 14 00
	00 00		 cmp	 DWORD PTR [edi+5176], 0
  00065	74 49		 je	 SHORT $LN3@FindPack

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00067	8b 87 34 14 00
	00		 mov	 eax, DWORD PTR [edi+5172]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0006d	8b b7 44 14 00
	00		 mov	 esi, DWORD PTR [edi+5188]
  00073	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00076	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 30   : 		for (TEterPackMap::iterator itor = m_DirPackMap.begin(); itor != m_DirPackMap.end(); ++itor)

  00078	74 36		 je	 SHORT $LN3@FindPack
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL4@FindPack:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00080	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00084	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 33   : 			CEterPack * pEterPack = itor->second;

  00087	8b 5e 20	 mov	 ebx, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  0008a	8d 56 08	 lea	 edx, DWORD PTR [esi+8]

; 2145 :         if (_Large_string_engaged()) {

  0008d	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strFileName$[ebp]

; 2153 :         return _BUF_SIZE <= _Myres;

  00091	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00095	72 03		 jb	 SHORT $LN65@FindPack

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00097	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
$LN65@FindPack:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 35   : 			if (CompareName(c_rstrName.c_str(), c_rstrName.length(), strFileName.c_str()))

  0009a	51		 push	 ecx
  0009b	ff 76 18	 push	 DWORD PTR [esi+24]
  0009e	8b cf		 mov	 ecx, edi
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ?CompareName@CEterPackManager@@IAE_NPBDK0@Z ; CEterPackManager::CompareName
  000a6	84 c0		 test	 al, al
  000a8	75 08		 jne	 SHORT $LN11@FindPack
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  000aa	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  000ac	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 30   : 		for (TEterPackMap::iterator itor = m_DirPackMap.begin(); itor != m_DirPackMap.end(); ++itor)

  000ae	75 d0		 jne	 SHORT $LL4@FindPack
$LN3@FindPack:

; 36   : 			{
; 37   : 				return pEterPack;
; 38   : 			}
; 39   : 		}
; 40   : 	}
; 41   : 
; 42   : 	return NULL;

  000b0	33 db		 xor	 ebx, ebx
$LN11@FindPack:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _strFileName$[ebp+20]
  000b5	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000b8	72 0f		 jb	 SHORT $LN94@FindPack

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ba	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bd	51		 push	 ecx
  000be	ff 75 d8	 push	 DWORD PTR _strFileName$[ebp]
  000c1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c6	83 c4 08	 add	 esp, 8
$LN94@FindPack:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 43   : }

  000c9	8b c3		 mov	 eax, ebx
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dc	33 cd		 xor	 ecx, ebp
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z ENDP	; CEterPackManager::FindPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?CompareName@CEterPackManager@@IAE_NPBDK0@Z
_TEXT	SEGMENT
_c_szDirectoryName$ = 8					; size = 4
___formal$ = 12						; size = 4
_c_szFileName$ = 16					; size = 4
?CompareName@CEterPackManager@@IAE_NPBDK0@Z PROC	; CEterPackManager::CompareName, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	const char * c_pszSrc = c_szDirectoryName;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_szDirectoryName$[ebp]
  00006	56		 push	 esi

; 80   : 	const char * c_pszCmp = c_szFileName;
; 81   : 
; 82   : 	while (*c_pszSrc)

  00007	8a 10		 mov	 dl, BYTE PTR [eax]
  00009	84 d2		 test	 dl, dl
  0000b	74 19		 je	 SHORT $LN3@CompareNam
  0000d	8b 75 10	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00010	8a 0e		 mov	 cl, BYTE PTR [esi]
  00012	2b f0		 sub	 esi, eax
$LL2@CompareNam:

; 83   : 	{
; 84   : 		if (*(c_pszSrc++) != *(c_pszCmp++))

  00014	40		 inc	 eax
  00015	3a d1		 cmp	 dl, cl
  00017	75 14		 jne	 SHORT $LN9@CompareNam

; 85   : 			return false;
; 86   : 
; 87   : 		if (!*c_pszCmp)

  00019	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  0001c	84 c9		 test	 cl, cl
  0001e	74 0d		 je	 SHORT $LN9@CompareNam

; 80   : 	const char * c_pszCmp = c_szFileName;
; 81   : 
; 82   : 	while (*c_pszSrc)

  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	84 d2		 test	 dl, dl
  00024	75 ee		 jne	 SHORT $LL2@CompareNam
$LN3@CompareNam:

; 89   : 	}
; 90   : 
; 91   : 	return true;

  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi

; 92   : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN9@CompareNam:

; 88   : 			return false;

  0002d	32 c0		 xor	 al, al
  0002f	5e		 pop	 esi

; 92   : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?CompareName@CEterPackManager@@IAE_NPBDK0@Z ENDP	; CEterPackManager::CompareName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_rstrFileName$ = 12					; size = 4
?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CEterPackManager::ConvertFileName, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  00006	8b ca		 mov	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 57   : {

  00008	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0000c	0f 1f 40 00	 npad	 4
$LL44@ConvertFil:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL44@ConvertFil
  00017	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b 75 0c	 mov	 esi, DWORD PTR _rstrFileName$[ebp]
  0001c	51		 push	 ecx
  0001d	52		 push	 edx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 59   : 	stl_lowers(rstrFileName);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers

; 60   : 
; 61   : 	int iCount = 0;
; 62   : 
; 63   : 	for (DWORD i = 0; i < rstrFileName.length(); ++i)

  0002b	33 c0		 xor	 eax, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	33 c9		 xor	 ecx, ecx
  00032	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  00035	76 39		 jbe	 SHORT $LN3@ConvertFil
  00037	57		 push	 edi
$LL4@ConvertFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00038	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 2135 :         value_type* _Result = _Bx._Buf;

  0003b	8b fe		 mov	 edi, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  0003d	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00040	72 02		 jb	 SHORT $LN43@ConvertFil

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN43@ConvertFil:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 65   : 		if (rstrFileName[i] == '/')

  00044	80 3c 07 2f	 cmp	 BYTE PTR [edi+eax], 47	; 0000002fH
  00048	74 1c		 je	 SHORT $LN46@ConvertFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  0004a	8b fe		 mov	 edi, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  0004c	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0004f	72 02		 jb	 SHORT $LN42@ConvertFil

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00051	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN42@ConvertFil:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 67   : 		else if (rstrFileName[i] == '\\')

  00053	80 3c 07 5c	 cmp	 BYTE PTR [edi+eax], 92	; 0000005cH
  00057	75 0e		 jne	 SHORT $LN2@ConvertFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00059	8b fe		 mov	 edi, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  0005b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0005e	72 02		 jb	 SHORT $LN32@ConvertFil

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00060	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN32@ConvertFil:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 69   : 			rstrFileName[i] = '/';

  00062	c6 04 07 2f	 mov	 BYTE PTR [edi+eax], 47	; 0000002fH
$LN46@ConvertFil:

; 60   : 
; 61   : 	int iCount = 0;
; 62   : 
; 63   : 	for (DWORD i = 0; i < rstrFileName.length(); ++i)

  00066	41		 inc	 ecx
$LN2@ConvertFil:
  00067	40		 inc	 eax
  00068	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0006b	72 cb		 jb	 SHORT $LL4@ConvertFil

; 70   : 			++iCount;
; 71   : 		}
; 72   : 	}
; 73   : 
; 74   : 	return iCount;

  0006d	8b c1		 mov	 eax, ecx
  0006f	5f		 pop	 edi
$LN3@ConvertFil:
  00070	5e		 pop	 esi

; 75   : }

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CEterPackManager::ConvertFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ PROC	; CEterPackManager::ArrangeMemoryMappedPack, COMDAT
; _this$ = ecx

; 235  : 	//time_t curTime = time(NULL);
; 236  : 	//CEterFileDict::TDict dict = m_FileDict.GetDict();
; 237  : 	//for (CEterFileDict::TDict::iterator it = dict.begin(); it != dict.end(); ++it)
; 238  : 	//{
; 239  : 	//	CEterFileDict::Item &rFileItem = it->second;
; 240  : 	//	CEterPack* pkPack = rFileItem.pkPack;
; 241  : 	//	if (pkPack)
; 242  : 	//	{
; 243  : 	//		if (curTime - pkPack->GetLastAccessTime() > g_tCachingInterval)
; 244  : 	//		{
; 245  : 	//			pkPack->ClearDataMemoryMap();
; 246  : 	//		}
; 247  : 	//	}
; 248  : 	//}
; 249  : }

  00000	c2 00 00	 ret	 0
?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ ENDP	; CEterPackManager::ArrangeMemoryMappedPack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
_TEXT	SEGMENT
_dwPackgeIdentifier$1$ = -1136				; size = 4
_pStream$GSCopy$1$ = -1132				; size = 4
_i$1$ = -1128						; size = 4
$T2 = -1124						; size = 4
__Result$1$ = -1120					; size = 4
_k$1$ = -1116						; size = 4
__New_array$3 = -1116					; size = 4
_this$1$ = -1112					; size = 4
_iReadOffset$1$ = -1108					; size = 4
_iSDBInfoCount$1$ = -1104				; size = 4
_cit$1$ = -1100						; size = 4
$T4 = -1096						; size = 4
tv1120 = -1096						; size = 4
tv1118 = -1096						; size = 4
__Right_size$1$ = -1092					; size = 4
_noPathName$5 = -1088					; size = 24
$T6 = -1064						; size = 24
_szPath$7 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z PROC ; CEterPackManager::RetrieveHybridCryptPackSDB, COMDAT
; _this$ = ecx

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 04 00
	00		 sub	 esp, 1124		; 00000464H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00036	89 85 94 fb ff
	ff		 mov	 DWORD PTR _pStream$GSCopy$1$[ebp], eax
  0003c	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 488  : 	for( int i = 0; i < iSDBInfoCount; ++i )

  00046	c7 85 98 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00050	8b 30		 mov	 esi, DWORD PTR [eax]
  00052	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _iSDBInfoCount$1$[ebp], esi
  00058	be 04 00 00 00	 mov	 esi, 4
  0005d	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _iSDBInfoCount$1$[ebp]
  00063	85 d2		 test	 edx, edx
  00065	0f 8e 45 03 00
	00		 jle	 $LN195@RetrieveHy
  0006b	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
$LL4@RetrieveHy:

; 491  : 		memcpy( &dwPackgeIdentifier, pStream+iReadOffset, sizeof(DWORD) );

  00070	8b 04 30	 mov	 eax, DWORD PTR [eax+esi]

; 492  : 		iReadOffset += sizeof(DWORD);

  00073	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00076	83 b9 20 14 00
	00 00		 cmp	 DWORD PTR [ecx+5152], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 491  : 		memcpy( &dwPackgeIdentifier, pStream+iReadOffset, sizeof(DWORD) );

  0007d	89 85 90 fb ff
	ff		 mov	 DWORD PTR _dwPackgeIdentifier$1$[ebp], eax

; 492  : 		iReadOffset += sizeof(DWORD);

  00083	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _iReadOffset$1$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00089	74 11		 je	 SHORT $LN18@RetrieveHy

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0008b	8b 81 1c 14 00
	00		 mov	 eax, DWORD PTR [ecx+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00091	8b b1 2c 14 00
	00		 mov	 esi, DWORD PTR [ecx+5164]
  00097	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  0009a	eb 02		 jmp	 SHORT $LN205@RetrieveHy
$LN18@RetrieveHy:
  0009c	33 f6		 xor	 esi, esi
$LN205@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 495  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  0009e	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi
  000a4	85 f6		 test	 esi, esi
  000a6	0f 84 fc 02 00
	00		 je	 $LN201@RetrieveHy
  000ac	0f 1f 40 00	 npad	 4
$LL7@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000b0	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000b4	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  000b7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000ba	89 85 a0 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000c0	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0
  000ca	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+20], 0

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  000d4	89 8d bc fb ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2145 :         if (_Large_string_engaged()) {

  000da	72 08		 jb	 SHORT $LN50@RetrieveHy

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000dc	8b 00		 mov	 eax, DWORD PTR [eax]
  000de	89 85 a0 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN50@RetrieveHy:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  000e4	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000e7	73 11		 jae	 SHORT $LN47@RetrieveHy

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000e9	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  000ec	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000f1	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR $T6[ebp], xmm0

; 2663 :             return;

  000f8	eb 58		 jmp	 SHORT $LN206@RetrieveHy
$LN47@RetrieveHy:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000fa	8b c1		 mov	 eax, ecx
  000fc	83 c8 0f	 or	 eax, 15			; 0000000fH
  000ff	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00104	0f 47 c7	 cmova	 eax, edi
  00107	89 85 b8 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0010d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00114	8b f8		 mov	 edi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00116	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR __New_array$3[ebp]
  0011c	50		 push	 eax
  0011d	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00123	89 bd a4 fb ff
	ff		 mov	 DWORD PTR __New_array$3[ebp], edi
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0012f	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00135	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00136	51		 push	 ecx
  00137	ff b5 a0 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  0013d	57		 push	 edi
  0013e	e8 00 00 00 00	 call	 _memcpy

; 2671 :         _My_data._Mysize = _Right_size;

  00143	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00149	83 c4 18	 add	 esp, 24			; 00000018H

; 2672 :         _My_data._Myres  = _New_capacity;

  0014c	8b bd b8 fb ff
	ff		 mov	 edi, DWORD PTR $T4[ebp]
$LN206@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 497  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  00152	89 bd ec fb ff
	ff		 mov	 DWORD PTR $T6[ebp+20], edi
  00158	89 8d e8 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+16], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 352  : 	if (nLength > 0)

  0015e	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR $T6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 497  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  00164	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 348  : 	szPath[0] = '\0';

  0016b	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$7[ebp], 0

; 352  : 	if (nLength > 0)

  00172	85 c9		 test	 ecx, ecx
  00174	0f 84 da 00 00
	00		 je	 $LN64@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0017a	83 ff 10	 cmp	 edi, 16			; 00000010H
  0017d	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]

; 2147 :         }
; 2148 : 
; 2149 :         return _Result;

  00183	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$7[ebp]
  00189	0f 43 ca	 cmovae	 ecx, edx
  0018c	2b c1		 sub	 eax, ecx
  0018e	89 85 b8 fb ff
	ff		 mov	 DWORD PTR tv1118[ebp], eax
  00194	8b f0		 mov	 esi, eax
$LL76@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 354  : 		strcpy(szPath, str.c_str());

  00196	8a 01		 mov	 al, BYTE PTR [ecx]
  00198	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0019b	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  0019f	84 c0		 test	 al, al
  001a1	75 f3		 jne	 SHORT $LL76@RetrieveHy

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  001a3	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  001a9	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
  001af	83 c0 ff	 add	 eax, -1
  001b2	0f 84 9c 00 00
	00		 je	 $LN64@RetrieveHy
  001b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL65@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001c0	83 ff 10	 cmp	 edi, 16			; 00000010H
  001c3	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001c9	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  001cc	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  001d0	74 19		 je	 SHORT $LN71@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001d2	83 ff 10	 cmp	 edi, 16			; 00000010H
  001d5	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001db	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  001de	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  001e2	74 07		 je	 SHORT $LN71@RetrieveHy

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  001e4	83 e8 01	 sub	 eax, 1
  001e7	75 d7		 jne	 SHORT $LL65@RetrieveHy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 498  : 			if( dwPackgeIdentifier == stringhash().GetHash(noPathName) )

  001e9	eb 69		 jmp	 SHORT $LN64@RetrieveHy
$LN71@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  001eb	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  001ee	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  001f4	3b c8		 cmp	 ecx, eax
  001f6	73 52		 jae	 SHORT $LN200@RetrieveHy
  001f8	8d b5 f0 fb ff
	ff		 lea	 esi, DWORD PTR _szPath$7[ebp]
  001fe	2b f1		 sub	 esi, ecx
  00200	2b c1		 sub	 eax, ecx
  00202	89 b5 b8 fb ff
	ff		 mov	 DWORD PTR tv1120[ebp], esi
  00208	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _k$1$[ebp], eax
  0020e	66 90		 npad	 2
$LL68@RetrieveHy:

; 362  : 					szPath[k] = str[j];

  00210	8b b5 b8 fb ff
	ff		 mov	 esi, DWORD PTR tv1120[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00216	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]

; 2136 :         if (_Large_string_engaged()) {

  0021c	83 ff 10	 cmp	 edi, 16			; 00000010H
  0021f	0f 43 c2	 cmovae	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 362  : 					szPath[k] = str[j];

  00222	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00225	88 04 0e	 mov	 BYTE PTR [esi+ecx], al
  00228	41		 inc	 ecx
  00229	3b 8d bc fb ff
	ff		 cmp	 ecx, DWORD PTR __Right_size$1$[ebp]
  0022f	72 df		 jb	 SHORT $LL68@RetrieveHy

; 363  : 				szPath[k] = '\0';

  00231	8b 85 a4 fb ff
	ff		 mov	 eax, DWORD PTR _k$1$[ebp]
  00237	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
  0023d	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00242	0f 83 85 01 00
	00		 jae	 $LN77@RetrieveHy
  00248	eb 02		 jmp	 SHORT $LN193@RetrieveHy
$LN200@RetrieveHy:

; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  0024a	33 c0		 xor	 eax, eax
$LN193@RetrieveHy:

; 363  : 				szPath[k] = '\0';

  0024c	c6 84 05 f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$7[ebp+eax], 0
$LN64@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00254	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$7[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0025a	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00264	c7 85 d4 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+20], 15 ; 0000000fH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0026e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00271	c6 85 c0 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$5[ebp], 0
$LL197@RetrieveHy:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00278	8a 01		 mov	 al, BYTE PTR [ecx]
  0027a	41		 inc	 ecx
  0027b	84 c0		 test	 al, al
  0027d	75 f9		 jne	 SHORT $LL197@RetrieveHy
  0027f	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00281	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$7[ebp]
  00287	51		 push	 ecx
  00288	50		 push	 eax
  00289	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
  0028f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 372  : 	return szPath;

  00294	83 8d 9c fb ff
	ff 01		 or	 DWORD PTR $T2[ebp], 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 497  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  0029b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0029f	83 ff 10	 cmp	 edi, 16			; 00000010H
  002a2	72 12		 jb	 SHORT $LN126@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002a4	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a7	50		 push	 eax
  002a8	ff b5 d8 fb ff
	ff		 push	 DWORD PTR $T6[ebp]
  002ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002b3	83 c4 08	 add	 esp, 8
$LN126@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002b6	83 bd d4 fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$5[ebp+20], 16 ; 00000010H
  002bd	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  002c3	8b bd d0 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$5[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002c9	0f 43 8d c0 fb
	ff ff		 cmovae	 ecx, DWORD PTR _noPathName$5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 479  :        size_t h = 0;

  002d0	33 d2		 xor	 edx, edx
  002d2	03 f9		 add	 edi, ecx

; 480  : 
; 481  :        while (s < end)

  002d4	3b cf		 cmp	 ecx, edi
  002d6	73 18		 jae	 SHORT $LN134@RetrieveHy
  002d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL179@RetrieveHy:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  002e0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  002e3	41		 inc	 ecx
  002e4	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  002ea	33 d0		 xor	 edx, eax
  002ec	3b cf		 cmp	 ecx, edi
  002ee	72 f0		 jb	 SHORT $LL179@RetrieveHy
$LN134@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 498  : 			if( dwPackgeIdentifier == stringhash().GetHash(noPathName) )

  002f0	39 95 90 fb ff
	ff		 cmp	 DWORD PTR _dwPackgeIdentifier$1$[ebp], edx
  002f6	74 40		 je	 SHORT $LN173@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  002f8	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 504  : 		}

  002fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00305	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00308	72 11		 jb	 SHORT $LN159@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0030a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0030b	50		 push	 eax
  0030c	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00318	83 c4 08	 add	 esp, 8
$LN159@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  0031b	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 495  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  0031d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  00322	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi

; 2459 :           return x.node_ != y.node_;

  00328	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 495  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  0032a	0f 85 80 fd ff
	ff		 jne	 $LL7@RetrieveHy

; 498  : 			if( dwPackgeIdentifier == stringhash().GetHash(noPathName) )

  00330	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
  00336	eb 48		 jmp	 SHORT $LN207@RetrieveHy
$LN173@RetrieveHy:

; 499  : 			{
; 500  : 				EterPackPolicy_CSHybridCrypt* pCryptPolicy = cit->second->GetPackPolicy_HybridCrypt();

  00338	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0033b	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt

; 501  : 				iReadOffset += pCryptPolicy->ReadSupplementatyDataBlockFromStream( pStream+iReadOffset );

  00340	8b 8d 94 fb ff
	ff		 mov	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  00346	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
  0034c	03 ce		 add	 ecx, esi
  0034e	51		 push	 ecx
  0034f	8b c8		 mov	 ecx, eax
  00351	e8 00 00 00 00	 call	 ?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
  00356	03 f0		 add	 esi, eax

; 502  : 				break;

  00358	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0035f	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp+20]
  00365	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00368	72 11		 jb	 SHORT $LN202@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0036a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0036b	50		 push	 eax
  0036c	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00378	83 c4 08	 add	 esp, 8
$LN202@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 488  : 	for( int i = 0; i < iSDBInfoCount; ++i )

  0037b	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
$LN207@RetrieveHy:
  00380	8b 8d a8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00386	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _iSDBInfoCount$1$[ebp]
$LN2@RetrieveHy:
  0038c	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00392	40		 inc	 eax
  00393	89 85 98 fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00399	3b c2		 cmp	 eax, edx
  0039b	7d 13		 jge	 SHORT $LN195@RetrieveHy
  0039d	8b 85 94 fb ff
	ff		 mov	 eax, DWORD PTR _pStream$GSCopy$1$[ebp]
  003a3	e9 c8 fc ff ff	 jmp	 $LL4@RetrieveHy
$LN201@RetrieveHy:

; 495  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  003a8	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
  003ae	eb dc		 jmp	 SHORT $LN2@RetrieveHy
$LN195@RetrieveHy:

; 506  : }

  003b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ba	59		 pop	 ecx
  003bb	5f		 pop	 edi
  003bc	5e		 pop	 esi
  003bd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c0	33 cd		 xor	 ecx, ebp
  003c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c7	8b e5		 mov	 esp, ebp
  003c9	5d		 pop	 ebp
  003ca	c2 04 00	 ret	 4
$LN77@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 363  : 				szPath[k] = '\0';

  003cd	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN204@RetrieveHy:
  003d2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$0:
  00000	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$1:
  0000b	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 90 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1136]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z ENDP ; CEterPackManager::RetrieveHybridCryptPackSDB
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
_TEXT	SEGMENT
_iPackageCnt$1$ = -1140					; size = 4
_dwPackageNameHash$1$ = -1136				; size = 4
_pStream$GSCopy$1$ = -1132				; size = 4
_i$1$ = -1128						; size = 4
$T2 = -1124						; size = 4
__Result$1$ = -1120					; size = 4
_k$1$ = -1116						; size = 4
__New_array$3 = -1116					; size = 4
_iRecvedCryptKeySize$1$ = -1112				; size = 4
_this$1$ = -1108					; size = 4
_cit$1$ = -1104						; size = 4
$T4 = -1100						; size = 4
tv1184 = -1100						; size = 4
tv1182 = -1100						; size = 4
_iMemOffset$1$ = -1096					; size = 4
__Right_size$1$ = -1092					; size = 4
$T5 = -1088						; size = 24
_noPathName$6 = -1064					; size = 24
_szPath$7 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z PROC ; CEterPackManager::RetrieveHybridCryptPackKeys, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 68 04 00
	00		 sub	 esp, 1128		; 00000468H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b d1		 mov	 edx, ecx
  0002f	89 95 ac fb ff
	ff		 mov	 DWORD PTR _this$1$[ebp], edx
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]

; 429  : 	////dump file format
; 430  : 	//total packagecnt (4byte)
; 431  : 	//	for	packagecntpackage
; 432  : 	//		db name hash ( stl.h stringhash )
; 433  : 	//		extension cnt( 4byte)
; 434  : 	//		for	extension cnt
; 435  : 	//			ext hash ( stl.h stringhash )
; 436  : 	//			key-16byte
; 437  : 	//			iv-16byte
; 438  : 	int iMemOffset = 0;
; 439  : 
; 440  : 	int		iPackageCnt;
; 441  : 	DWORD	dwPackageNameHash;
; 442  : 
; 443  : 	memcpy( &iPackageCnt, pStream + iMemOffset, sizeof(int) );
; 444  : 	iMemOffset += sizeof(iPackageCnt);

  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	89 8d 94 fb ff
	ff		 mov	 DWORD PTR _pStream$GSCopy$1$[ebp], ecx
  00043	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 445  : 
; 446  : 	for( int i = 0; i < iPackageCnt; ++i )

  0004d	c7 85 98 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00057	8b 31		 mov	 esi, DWORD PTR [ecx]
  00059	89 b5 8c fb ff
	ff		 mov	 DWORD PTR _iPackageCnt$1$[ebp], esi
  0005f	85 f6		 test	 esi, esi
  00061	0f 8e 92 03 00
	00		 jle	 $LN203@RetrieveHy
  00067	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0006c	0f 1f 40 00	 npad	 4
$LL4@RetrieveHy:

; 447  : 	{
; 448  : 		int iRecvedCryptKeySize = 0;
; 449  : 		memcpy( &iRecvedCryptKeySize, pStream + iMemOffset, sizeof(iRecvedCryptKeySize) );
; 450  : 		iRecvedCryptKeySize -= sizeof(dwPackageNameHash);

  00070	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 453  : 		memcpy( &dwPackageNameHash, pStream + iMemOffset, sizeof(dwPackageNameHash) );

  00073	8b 4c 01 04	 mov	 ecx, DWORD PTR [ecx+eax+4]
  00077	83 ee 04	 sub	 esi, 4

; 454  : 		iMemOffset += sizeof(dwPackageNameHash);

  0007a	83 c0 08	 add	 eax, 8
  0007d	89 b5 a8 fb ff
	ff		 mov	 DWORD PTR _iRecvedCryptKeySize$1$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00083	83 ba 20 14 00
	00 00		 cmp	 DWORD PTR [edx+5152], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 453  : 		memcpy( &dwPackageNameHash, pStream + iMemOffset, sizeof(dwPackageNameHash) );

  0008a	89 8d 90 fb ff
	ff		 mov	 DWORD PTR _dwPackageNameHash$1$[ebp], ecx

; 454  : 		iMemOffset += sizeof(dwPackageNameHash);

  00090	89 85 b8 fb ff
	ff		 mov	 DWORD PTR _iMemOffset$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00096	74 17		 je	 SHORT $LN19@RetrieveHy

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00098	8b 82 1c 14 00
	00		 mov	 eax, DWORD PTR [edx+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0009e	8b b2 2c 14 00
	00		 mov	 esi, DWORD PTR [edx+5164]
  000a4	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  000a7	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  000ad	eb 02		 jmp	 SHORT $LN213@RetrieveHy
$LN19@RetrieveHy:
  000af	33 f6		 xor	 esi, esi
$LN213@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 457  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  000b1	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi
  000b7	85 f6		 test	 esi, esi
  000b9	0f 84 8c 02 00
	00		 je	 $LN210@RetrieveHy
  000bf	90		 npad	 1
$LL7@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000c0	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000c4	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  000c7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000ca	89 85 a0 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000d0	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0
  000da	c7 85 d4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 0

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  000e4	89 8d bc fb ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2145 :         if (_Large_string_engaged()) {

  000ea	72 08		 jb	 SHORT $LN51@RetrieveHy

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000ec	8b 00		 mov	 eax, DWORD PTR [eax]
  000ee	89 85 a0 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN51@RetrieveHy:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  000f4	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000f7	73 11		 jae	 SHORT $LN48@RetrieveHy

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000f9	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  000fc	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00101	0f 11 85 c0 fb
	ff ff		 movups	 XMMWORD PTR $T5[ebp], xmm0

; 2663 :             return;

  00108	eb 58		 jmp	 SHORT $LN214@RetrieveHy
$LN48@RetrieveHy:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0010a	8b c1		 mov	 eax, ecx
  0010c	83 c8 0f	 or	 eax, 15			; 0000000fH
  0010f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00114	0f 47 c7	 cmova	 eax, edi
  00117	89 85 b4 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0011d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00124	8b f8		 mov	 edi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00126	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR __New_array$3[ebp]
  0012c	50		 push	 eax
  0012d	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00133	89 bd a4 fb ff
	ff		 mov	 DWORD PTR __New_array$3[ebp], edi
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0013f	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00145	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00146	51		 push	 ecx
  00147	ff b5 a0 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  0014d	57		 push	 edi
  0014e	e8 00 00 00 00	 call	 _memcpy

; 2671 :         _My_data._Mysize = _Right_size;

  00153	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00159	83 c4 18	 add	 esp, 24			; 00000018H

; 2672 :         _My_data._Myres  = _New_capacity;

  0015c	8b bd b4 fb ff
	ff		 mov	 edi, DWORD PTR $T4[ebp]
$LN214@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 459  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  00162	89 bd d4 fb ff
	ff		 mov	 DWORD PTR $T5[ebp+20], edi
  00168	89 8d d0 fb ff
	ff		 mov	 DWORD PTR $T5[ebp+16], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 352  : 	if (nLength > 0)

  0016e	8b 95 c0 fb ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 459  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  00174	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 348  : 	szPath[0] = '\0';

  0017b	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$7[ebp], 0

; 352  : 	if (nLength > 0)

  00182	85 c9		 test	 ecx, ecx
  00184	0f 84 da 00 00
	00		 je	 $LN65@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0018a	83 ff 10	 cmp	 edi, 16			; 00000010H
  0018d	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]

; 2147 :         }
; 2148 : 
; 2149 :         return _Result;

  00193	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$7[ebp]
  00199	0f 43 ca	 cmovae	 ecx, edx
  0019c	2b c1		 sub	 eax, ecx
  0019e	89 85 b4 fb ff
	ff		 mov	 DWORD PTR tv1182[ebp], eax
  001a4	8b f0		 mov	 esi, eax
$LL77@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 354  : 		strcpy(szPath, str.c_str());

  001a6	8a 01		 mov	 al, BYTE PTR [ecx]
  001a8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  001ab	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  001af	84 c0		 test	 al, al
  001b1	75 f3		 jne	 SHORT $LL77@RetrieveHy

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  001b3	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  001b9	8b b5 b0 fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
  001bf	83 c0 ff	 add	 eax, -1
  001c2	0f 84 9c 00 00
	00		 je	 $LN65@RetrieveHy
  001c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL66@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001d0	83 ff 10	 cmp	 edi, 16			; 00000010H
  001d3	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001d9	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  001dc	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  001e0	74 19		 je	 SHORT $LN72@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001e2	83 ff 10	 cmp	 edi, 16			; 00000010H
  001e5	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001eb	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  001ee	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  001f2	74 07		 je	 SHORT $LN72@RetrieveHy

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  001f4	83 e8 01	 sub	 eax, 1
  001f7	75 d7		 jne	 SHORT $LL66@RetrieveHy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 460  : 			if( dwPackageNameHash == stringhash().GetHash(noPathName) )

  001f9	eb 69		 jmp	 SHORT $LN65@RetrieveHy
$LN72@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  001fb	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  001fe	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00204	3b c8		 cmp	 ecx, eax
  00206	73 52		 jae	 SHORT $LN208@RetrieveHy
  00208	8d b5 f0 fb ff
	ff		 lea	 esi, DWORD PTR _szPath$7[ebp]
  0020e	2b f1		 sub	 esi, ecx
  00210	2b c1		 sub	 eax, ecx
  00212	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR tv1184[ebp], esi
  00218	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _k$1$[ebp], eax
  0021e	66 90		 npad	 2
$LL69@RetrieveHy:

; 362  : 					szPath[k] = str[j];

  00220	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR tv1184[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00226	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]

; 2136 :         if (_Large_string_engaged()) {

  0022c	83 ff 10	 cmp	 edi, 16			; 00000010H
  0022f	0f 43 c2	 cmovae	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 362  : 					szPath[k] = str[j];

  00232	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00235	88 04 0e	 mov	 BYTE PTR [esi+ecx], al
  00238	41		 inc	 ecx
  00239	3b 8d bc fb ff
	ff		 cmp	 ecx, DWORD PTR __Right_size$1$[ebp]
  0023f	72 df		 jb	 SHORT $LL69@RetrieveHy

; 363  : 				szPath[k] = '\0';

  00241	8b 85 a4 fb ff
	ff		 mov	 eax, DWORD PTR _k$1$[ebp]
  00247	8b b5 b0 fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
  0024d	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00252	0f 83 be 01 00
	00		 jae	 $LN78@RetrieveHy
  00258	eb 02		 jmp	 SHORT $LN201@RetrieveHy
$LN208@RetrieveHy:

; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  0025a	33 c0		 xor	 eax, eax
$LN201@RetrieveHy:

; 363  : 				szPath[k] = '\0';

  0025c	c6 84 05 f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$7[ebp+eax], 0
$LN65@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00264	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$7[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0026a	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00274	c7 85 ec fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$6[ebp+20], 15 ; 0000000fH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0027e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00281	c6 85 d8 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$6[ebp], 0
$LL205@RetrieveHy:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00288	8a 01		 mov	 al, BYTE PTR [ecx]
  0028a	41		 inc	 ecx
  0028b	84 c0		 test	 al, al
  0028d	75 f9		 jne	 SHORT $LL205@RetrieveHy
  0028f	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00291	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$7[ebp]
  00297	51		 push	 ecx
  00298	50		 push	 eax
  00299	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$6[ebp]
  0029f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 372  : 	return szPath;

  002a4	83 8d 9c fb ff
	ff 01		 or	 DWORD PTR $T2[ebp], 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 459  : 			std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  002ab	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002af	83 ff 10	 cmp	 edi, 16			; 00000010H
  002b2	72 12		 jb	 SHORT $LN127@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002b4	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b7	50		 push	 eax
  002b8	ff b5 c0 fb ff
	ff		 push	 DWORD PTR $T5[ebp]
  002be	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002c3	83 c4 08	 add	 esp, 8
$LN127@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002c6	83 bd ec fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$6[ebp+20], 16 ; 00000010H
  002cd	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  002d3	8b bd e8 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$6[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002d9	0f 43 8d d8 fb
	ff ff		 cmovae	 ecx, DWORD PTR _noPathName$6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 479  :        size_t h = 0;

  002e0	33 d2		 xor	 edx, edx
  002e2	03 f9		 add	 edi, ecx

; 480  : 
; 481  :        while (s < end)

  002e4	3b cf		 cmp	 ecx, edi
  002e6	73 18		 jae	 SHORT $LN135@RetrieveHy
  002e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL187@RetrieveHy:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  002f0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  002f3	41		 inc	 ecx
  002f4	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  002fa	33 d0		 xor	 edx, eax
  002fc	3b cf		 cmp	 ecx, edi
  002fe	72 f0		 jb	 SHORT $LL187@RetrieveHy
$LN135@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 460  : 			if( dwPackageNameHash == stringhash().GetHash(noPathName) )

  00300	39 95 90 fb ff
	ff		 cmp	 DWORD PTR _dwPackageNameHash$1$[ebp], edx
  00306	74 6f		 je	 SHORT $LN181@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00308	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 470  : 		}

  0030e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00315	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00318	72 10		 jb	 SHORT $LN167@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0031a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031b	50		 push	 eax
  0031c	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _noPathName$6[ebp]
  00322	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00327	83 c4 08	 add	 esp, 8
$LN167@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  0032a	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 457  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  0032c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  00331	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi

; 2459 :           return x.node_ != y.node_;

  00337	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 457  : 		for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00339	0f 85 81 fd ff
	ff		 jne	 $LL7@RetrieveHy

; 460  : 			if( dwPackageNameHash == stringhash().GetHash(noPathName) )

  0033f	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  00345	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
$LN210@RetrieveHy:

; 471  : 		iMemOffset += iRecvedCryptKeySize;

  0034b	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR _iRecvedCryptKeySize$1$[ebp]
$LN157@RetrieveHy:

; 445  : 
; 446  : 	for( int i = 0; i < iPackageCnt; ++i )

  00351	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]

; 471  : 		iMemOffset += iRecvedCryptKeySize;

  00357	03 c6		 add	 eax, esi
  00359	41		 inc	 ecx
  0035a	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  00360	3b 8d 8c fb ff
	ff		 cmp	 ecx, DWORD PTR _iPackageCnt$1$[ebp]
  00366	0f 8d 8d 00 00
	00		 jge	 $LN203@RetrieveHy

; 445  : 
; 446  : 	for( int i = 0; i < iPackageCnt; ++i )

  0036c	8b 8d 94 fb ff
	ff		 mov	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  00372	e9 f9 fc ff ff	 jmp	 $LL4@RetrieveHy
$LN181@RetrieveHy:

; 461  : 			{
; 462  : 				EterPackPolicy_CSHybridCrypt* pCryptPolicy = cit->second->GetPackPolicy_HybridCrypt();

  00377	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0037a	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt

; 463  : 				int iHavedCryptKeySize = pCryptPolicy->ReadCryptKeyInfoFromStream( pStream + iMemOffset );

  0037f	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR _iMemOffset$1$[ebp]
  00385	03 8d 94 fb ff
	ff		 add	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  0038b	51		 push	 ecx
  0038c	8b c8		 mov	 ecx, eax
  0038e	e8 00 00 00 00	 call	 ?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream

; 464  : 				if (iRecvedCryptKeySize != iHavedCryptKeySize)

  00393	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR _iRecvedCryptKeySize$1$[ebp]
  00399	3b f0		 cmp	 esi, eax
  0039b	74 24		 je	 SHORT $LN9@RetrieveHy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0039d	83 bd ec fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$6[ebp+20], 16 ; 00000010H
  003a4	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 466  : 					TraceError("CEterPackManager::RetrieveHybridCryptPackKeys	cryptokey length of file(%s) is not matched. received(%d) != haved(%d)", noPathName.c_str(), iRecvedCryptKeySize, iHavedCryptKeySize);

  003aa	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  003ab	0f 43 8d d8 fb
	ff ff		 cmovae	 ecx, DWORD PTR _noPathName$6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 466  : 					TraceError("CEterPackManager::RetrieveHybridCryptPackKeys	cryptokey length of file(%s) is not matched. received(%d) != haved(%d)", noPathName.c_str(), iRecvedCryptKeySize, iHavedCryptKeySize);

  003b2	56		 push	 esi
  003b3	51		 push	 ecx
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@
  003b9	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  003be	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@RetrieveHy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  003c1	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 468  : 				break;

  003c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  003ce	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003d1	72 10		 jb	 SHORT $LN209@RetrieveHy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003d3	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003d4	50		 push	 eax
  003d5	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _noPathName$6[ebp]
  003db	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003e0	83 c4 08	 add	 esp, 8
$LN209@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 471  : 		iMemOffset += iRecvedCryptKeySize;

  003e3	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  003e9	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  003ee	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
  003f4	e9 58 ff ff ff	 jmp	 $LN157@RetrieveHy
$LN203@RetrieveHy:

; 473  : }

  003f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00403	59		 pop	 ecx
  00404	5f		 pop	 edi
  00405	5e		 pop	 esi
  00406	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00409	33 cd		 xor	 ecx, ebp
  0040b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00410	8b e5		 mov	 esp, ebp
  00412	5d		 pop	 ebp
  00413	c2 04 00	 ret	 4
$LN78@RetrieveHy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 363  : 				szPath[k] = '\0';

  00416	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN212@RetrieveHy:
  0041b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$0:
  00000	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$1:
  0000b	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$6[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 8c fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1140]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z ENDP ; CEterPackManager::RetrieveHybridCryptPackKeys
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
_iSDBSize$2 = -1412					; size = 4
_pPolicy$1$ = -1408					; size = 4
_dwPackNamehash$3 = -1404				; size = 4
_iSDBDataOffset$ = -1400				; size = 4
_k$1$ = -1396						; size = 4
__New_array$4 = -1396					; size = 4
_iSDBPackageCnt$ = -1392				; size = 4
_iKeyPackageCount$ = -1388				; size = 4
$T5 = -1384						; size = 4
tv1433 = -1384						; size = 4
tv1431 = -1384						; size = 4
_pPolicy$1$ = -1380					; size = 4
_cit$2$ = -1380						; size = 4
__Result$1$ = -1376					; size = 4
_iSDBSizeWriteOffset$1$ = -1376				; size = 4
_dwPackNamehash$6 = -1376				; size = 4
__Right_size$1$ = -1372					; size = 4
_this$1$ = -1372					; size = 4
_keyFile$ = -1368					; size = 280
_noPathName$7 = -1088					; size = 24
$T8 = -1088						; size = 24
$T9 = -1064						; size = 24
_noPathName$10 = -1064					; size = 24
_szPath$11 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pFileName$ = 8						; size = 4
?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z PROC ; CEterPackManager::WriteHybridCryptPackInfo, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 78 05 00
	00		 sub	 esp, 1400		; 00000578H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 bd a4 fa ff
	ff		 mov	 DWORD PTR _this$1$[ebp], edi
  00035	8b 75 08	 mov	 esi, DWORD PTR _pFileName$[ebp]

; 511  : 	//NOTE : this file format contains a little bit of redundant data.
; 512  : 	//however it`s better for seperating cryptkey & supplementary data block.
; 513  : 
; 514  : 	//dump file format
; 515  : 
; 516  : 	//SDB data offset(4)
; 517  : 
; 518  : 	// about cryptkey
; 519  : 	//total packagecnt (4byte)
; 520  : 	//	for	packagecnt
; 521  : 	//		db name hash 4byte( stl.h stringhash )
; 522  : 	//		extension cnt( 4byte)
; 523  : 	//		for	extension cnt
; 524  : 	//			ext hash ( stl.h stringhash )
; 525  : 	//			key-16byte
; 526  : 	//			iv-16byte
; 527  : 
; 528  : 	//about SDB data
; 529  : 	//total packagecnt (4byte)
; 530  : 	//	for	packagecnt
; 531  : 	//		db name hash 4byte( stl.h stringhash ) +child node size(4byte)
; 532  : 	//		sdb file cnt( 4byte )
; 533  : 	//		for	sdb file cnt
; 534  : 	//			filename hash ( stl.h stringhash )
; 535  : 	//			related map name size(4), relate map name
; 536  : 	//			sdb block size( 1byte )
; 537  : 	//			sdb blocks
; 538  : 
; 539  : 	CFileBase keyFile;

  00038	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase

; 540  : 
; 541  : 	if( !keyFile.Create( pFileName, CFileBase::FILEMODE_WRITE) )

  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 63 05 00
	00		 je	 $LN19@WriteHybri

; 542  : 	{
; 543  : 		//TODO : write log
; 544  : 		return;
; 545  : 	}
; 546  : 
; 547  : 	int iKeyPackageCount = 0;
; 548  : 
; 549  : 	//write later ( SDB Offset & PackageCnt for Key )
; 550  : 	keyFile.SeekCur(2*sizeof(int));

  00060	6a 08		 push	 8
  00062	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00068	c7 85 94 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _iKeyPackageCount$[ebp], 0
  00072	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00077	83 bf 20 14 00
	00 00		 cmp	 DWORD PTR [edi+5152], 0
  0007e	0f 84 62 01 00
	00		 je	 $LN3@WriteHybri

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00084	8b 87 1c 14 00
	00		 mov	 eax, DWORD PTR [edi+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0008a	8b b7 2c 14 00
	00		 mov	 esi, DWORD PTR [edi+5164]
  00090	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 553  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00093	85 f6		 test	 esi, esi
  00095	0f 84 4b 01 00
	00		 je	 $LN3@WriteHybri
  0009b	0f 1f 44 00 00	 npad	 5
$LL4@WriteHybri:

; 554  : 	{
; 555  : 		EterPackPolicy_CSHybridCrypt* pPolicy = cit->second->GetPackPolicy_HybridCrypt();

  000a0	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000a3	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt
  000a8	89 85 9c fa ff
	ff		 mov	 DWORD PTR _pPolicy$1$[ebp], eax

; 556  : 		if( !pPolicy || !pPolicy->IsContainingCryptKey() )

  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 1e 01 00
	00		 je	 $LN2@WriteHybri
  000b6	8b c8		 mov	 ecx, eax
  000b8	e8 00 00 00 00	 call	 ?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
  000bd	84 c0		 test	 al, al
  000bf	0f 84 0f 01 00
	00		 je	 $LN2@WriteHybri

; 557  : 			continue;
; 558  : 
; 559  : 		iKeyPackageCount++;

  000c5	ff 85 94 fa ff
	ff		 inc	 DWORD PTR _iKeyPackageCount$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000cb	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 561  : 		std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  000ce	50		 push	 eax
  000cf	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  000d5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000da	50		 push	 eax
  000db	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR _noPathName$10[ebp]
  000e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoPath
  000eb	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ee	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 561  : 		std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  000f4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000f8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000fb	72 10		 jb	 SHORT $LN54@WriteHybri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000fd	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	50		 push	 eax
  000ff	ff b5 c0 fb ff
	ff		 push	 DWORD PTR $T8[ebp]
  00105	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0010a	83 c4 08	 add	 esp, 8
$LN54@WriteHybri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0010d	83 bd ec fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$10[ebp+20], 16 ; 00000010H
  00114	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$10[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0011a	8b bd e8 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$10[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00120	0f 43 8d d8 fb
	ff ff		 cmovae	 ecx, DWORD PTR _noPathName$10[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 479  :        size_t h = 0;

  00127	33 d2		 xor	 edx, edx
  00129	03 f9		 add	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0012b	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00135	c7 85 d4 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0013f	c6 85 c0 fb ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 481  :        while (s < end)

  00146	3b cf		 cmp	 ecx, edi
  00148	73 16		 jae	 SHORT $LN62@WriteHybri
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL244@WriteHybri:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00150	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00153	41		 inc	 ecx
  00154	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0015a	33 d0		 xor	 edx, eax
  0015c	3b cf		 cmp	 ecx, edi
  0015e	72 f0		 jb	 SHORT $LL244@WriteHybri
$LN62@WriteHybri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00160	83 bd ec fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$10[ebp+20], 16 ; 00000010H
  00167	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR _noPathName$10[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 565  : 		CMakePackLog::GetSingleton().Writef("CEterPackManager::WriteHybridCryptPackInfo PackName : %s, Hash : %x", noPathName.c_str(), dwPackNamehash);

  0016d	52		 push	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0016e	0f 43 85 d8 fb
	ff ff		 cmovae	 eax, DWORD PTR _noPathName$10[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 565  : 		CMakePackLog::GetSingleton().Writef("CEterPackManager::WriteHybridCryptPackInfo PackName : %s, Hash : %x", noPathName.c_str(), dwPackNamehash);

  00175	50		 push	 eax
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@
  0017b	89 95 a0 fa ff
	ff		 mov	 DWORD PTR _dwPackNamehash$6[ebp], edx
  00181	e8 00 00 00 00	 call	 ?GetSingleton@CMakePackLog@@SAAAV1@XZ ; CMakePackLog::GetSingleton
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?Writef@CMakePackLog@@QAAXPBDZZ ; CMakePackLog::Writef
  0018c	83 c4 10	 add	 esp, 16			; 00000010H

; 566  : 		keyFile.Write( &dwPackNamehash, sizeof(DWORD) );

  0018f	8d 85 a0 fa ff
	ff		 lea	 eax, DWORD PTR _dwPackNamehash$6[ebp]
  00195	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0019b	6a 04		 push	 4
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 567  : 
; 568  : 		pPolicy->WriteCryptKeyToFile( keyFile );

  001a3	8b 8d 9c fa ff
	ff		 mov	 ecx, DWORD PTR _pPolicy$1$[ebp]
  001a9	8d 85 a8 fa ff
	ff		 lea	 eax, DWORD PTR _keyFile$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001b5	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$10[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 569  : 	}

  001bb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001bf	83 f8 10	 cmp	 eax, 16			; 00000010H
  001c2	72 10		 jb	 SHORT $LN2@WriteHybri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001c4	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c5	50		 push	 eax
  001c6	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _noPathName$10[ebp]
  001cc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001d1	83 c4 08	 add	 esp, 8
$LN2@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  001d4	8b 06		 mov	 eax, DWORD PTR [esi]
  001d6	8b f0		 mov	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 553  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  001d8	85 c0		 test	 eax, eax
  001da	0f 85 c0 fe ff
	ff		 jne	 $LL4@WriteHybri
  001e0	8b bd a4 fa ff
	ff		 mov	 edi, DWORD PTR _this$1$[ebp]
$LN3@WriteHybri:

; 570  : 
; 571  : 	//Write SDB Data
; 572  : 	int iSDBDataOffset = keyFile.GetPosition();

  001e6	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  001ec	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 573  : 	int iSDBPackageCnt = 0;
; 574  : 
; 575  : 	//Write SDB PackageCnt Later
; 576  : 	keyFile.SeekCur(sizeof(int));

  001f1	6a 04		 push	 4
  001f3	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  001f9	89 85 88 fa ff
	ff		 mov	 DWORD PTR _iSDBDataOffset$[ebp], eax
  001ff	c7 85 90 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _iSDBPackageCnt$[ebp], 0
  00209	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0020e	83 bf 20 14 00
	00 00		 cmp	 DWORD PTR [edi+5152], 0
  00215	0f 84 43 03 00
	00		 je	 $LN263@WriteHybri

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0021b	8b 87 1c 14 00
	00		 mov	 eax, DWORD PTR [edi+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00221	8b b7 2c 14 00
	00		 mov	 esi, DWORD PTR [edi+5164]
  00227	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  0022a	89 b5 9c fa ff
	ff		 mov	 DWORD PTR _cit$2$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 577  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00230	85 f6		 test	 esi, esi
  00232	0f 84 26 03 00
	00		 je	 $LN263@WriteHybri
  00238	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0023d	0f 1f 00	 npad	 3
$LL7@WriteHybri:

; 578  : 	{
; 579  : 		EterPackPolicy_CSHybridCrypt* pPolicy = cit->second->GetPackPolicy_HybridCrypt();

  00240	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00243	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt
  00248	89 85 80 fa ff
	ff		 mov	 DWORD PTR _pPolicy$1$[ebp], eax

; 580  : 		if( !pPolicy || !pPolicy->IsContainingSDBFile() )

  0024e	85 c0		 test	 eax, eax
  00250	0f 84 f8 02 00
	00		 je	 $LN5@WriteHybri
  00256	8b c8		 mov	 ecx, eax
  00258	e8 00 00 00 00	 call	 ?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
  0025d	84 c0		 test	 al, al
  0025f	0f 84 e9 02 00
	00		 je	 $LN5@WriteHybri

; 581  : 			continue;
; 582  : 
; 583  : 		iSDBPackageCnt++;

  00265	ff 85 90 fa ff
	ff		 inc	 DWORD PTR _iSDBPackageCnt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  0026b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0026e	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00272	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  00275	89 8d a0 fa ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0027b	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 0
  00285	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 0

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0028f	89 85 a4 fa ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00295	72 08		 jb	 SHORT $LN126@WriteHybri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00297	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00299	89 8d a0 fa ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN126@WriteHybri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0029f	83 f8 10	 cmp	 eax, 16			; 00000010H
  002a2	73 11		 jae	 SHORT $LN123@WriteHybri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002a4	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  002a7	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002ac	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR $T9[ebp], xmm0

; 2663 :             return;

  002b3	eb 56		 jmp	 SHORT $LN269@WriteHybri
$LN123@WriteHybri:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  002b5	83 c8 0f	 or	 eax, 15			; 0000000fH
  002b8	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  002bd	0f 47 c7	 cmova	 eax, edi
  002c0	89 85 98 fa ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  002c6	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  002cd	8b f8		 mov	 edi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  002cf	8d 85 8c fa ff
	ff		 lea	 eax, DWORD PTR __New_array$4[ebp]
  002d5	50		 push	 eax
  002d6	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  002dc	89 bd 8c fa ff
	ff		 mov	 DWORD PTR __New_array$4[ebp], edi
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  002e8	8b 8d a4 fa ff
	ff		 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  002ee	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002ef	51		 push	 ecx
  002f0	ff b5 a0 fa ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  002f6	57		 push	 edi
  002f7	e8 00 00 00 00	 call	 _memcpy

; 2671 :         _My_data._Mysize = _Right_size;

  002fc	8b 85 a4 fa ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00302	83 c4 18	 add	 esp, 24			; 00000018H

; 2672 :         _My_data._Myres  = _New_capacity;

  00305	8b bd 98 fa ff
	ff		 mov	 edi, DWORD PTR $T5[ebp]
$LN269@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 585  : 		std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  0030b	89 bd ec fb ff
	ff		 mov	 DWORD PTR $T9[ebp+20], edi
  00311	89 85 e8 fb ff
	ff		 mov	 DWORD PTR $T9[ebp+16], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 352  : 	if (nLength > 0)

  00317	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 585  : 		std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  0031d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 348  : 	szPath[0] = '\0';

  00321	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$11[ebp], 0

; 352  : 	if (nLength > 0)

  00328	85 c0		 test	 eax, eax
  0032a	0f 84 d4 00 00
	00		 je	 $LN140@WriteHybri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00330	83 ff 10	 cmp	 edi, 16			; 00000010H
  00333	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]

; 2147 :         }
; 2148 : 
; 2149 :         return _Result;

  00339	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$11[ebp]
  0033f	0f 43 ca	 cmovae	 ecx, edx
  00342	2b c1		 sub	 eax, ecx
  00344	89 85 98 fa ff
	ff		 mov	 DWORD PTR tv1431[ebp], eax
  0034a	8b f0		 mov	 esi, eax
  0034c	0f 1f 40 00	 npad	 4
$LL152@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 354  : 		strcpy(szPath, str.c_str());

  00350	8a 01		 mov	 al, BYTE PTR [ecx]
  00352	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00355	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  00359	84 c0		 test	 al, al
  0035b	75 f3		 jne	 SHORT $LL152@WriteHybri

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  0035d	8b 85 a4 fa ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00363	8b b5 9c fa ff
	ff		 mov	 esi, DWORD PTR _cit$2$[ebp]
  00369	83 c0 ff	 add	 eax, -1
  0036c	0f 84 92 00 00
	00		 je	 $LN140@WriteHybri
$LL141@WriteHybri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  00372	83 ff 10	 cmp	 edi, 16			; 00000010H
  00375	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0037b	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  0037e	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  00382	74 19		 je	 SHORT $LN147@WriteHybri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  00384	83 ff 10	 cmp	 edi, 16			; 00000010H
  00387	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0038d	0f 43 ca	 cmovae	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  00390	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  00394	74 07		 je	 SHORT $LN147@WriteHybri

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  00396	83 e8 01	 sub	 eax, 1
  00399	75 d7		 jne	 SHORT $LL141@WriteHybri

; 364  : 				break;
; 365  : 			}
; 366  : 
; 367  : 			if (0 == i)

  0039b	eb 67		 jmp	 SHORT $LN140@WriteHybri
$LN147@WriteHybri:

; 359  : 			{
; 360  : 				int k = 0;
; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  0039d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  003a0	8b 85 a4 fa ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  003a6	3b c8		 cmp	 ecx, eax
  003a8	73 50		 jae	 SHORT $LN265@WriteHybri
  003aa	8d b5 f0 fb ff
	ff		 lea	 esi, DWORD PTR _szPath$11[ebp]
  003b0	2b f1		 sub	 esi, ecx
  003b2	2b c1		 sub	 eax, ecx
  003b4	89 b5 98 fa ff
	ff		 mov	 DWORD PTR tv1433[ebp], esi
  003ba	89 85 8c fa ff
	ff		 mov	 DWORD PTR _k$1$[ebp], eax
$LL144@WriteHybri:

; 362  : 					szPath[k] = str[j];

  003c0	8b b5 98 fa ff
	ff		 mov	 esi, DWORD PTR tv1433[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  003c6	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]

; 2136 :         if (_Large_string_engaged()) {

  003cc	83 ff 10	 cmp	 edi, 16			; 00000010H
  003cf	0f 43 c2	 cmovae	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 362  : 					szPath[k] = str[j];

  003d2	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  003d5	88 04 0e	 mov	 BYTE PTR [esi+ecx], al
  003d8	41		 inc	 ecx
  003d9	3b 8d a4 fa ff
	ff		 cmp	 ecx, DWORD PTR __Right_size$1$[ebp]
  003df	72 df		 jb	 SHORT $LL144@WriteHybri

; 363  : 				szPath[k] = '\0';

  003e1	8b 85 8c fa ff
	ff		 mov	 eax, DWORD PTR _k$1$[ebp]
  003e7	8b b5 9c fa ff
	ff		 mov	 esi, DWORD PTR _cit$2$[ebp]
  003ed	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  003f2	0f 83 f3 01 00
	00		 jae	 $LN153@WriteHybri
  003f8	eb 02		 jmp	 SHORT $LN262@WriteHybri
$LN265@WriteHybri:

; 359  : 			{
; 360  : 				int k = 0;
; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  003fa	33 c0		 xor	 eax, eax
$LN262@WriteHybri:

; 363  : 				szPath[k] = '\0';

  003fc	c6 84 05 f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$11[ebp+eax], 0
$LN140@WriteHybri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00404	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$11[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0040a	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$7[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00414	c7 85 d4 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$7[ebp+20], 15 ; 0000000fH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0041e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00421	c6 85 c0 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$7[ebp], 0
$LL264@WriteHybri:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00428	8a 01		 mov	 al, BYTE PTR [ecx]
  0042a	41		 inc	 ecx
  0042b	84 c0		 test	 al, al
  0042d	75 f9		 jne	 SHORT $LL264@WriteHybri
  0042f	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00431	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$11[ebp]
  00437	51		 push	 ecx
  00438	50		 push	 eax
  00439	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$7[ebp]
  0043f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 585  : 		std::string noPathName = CFileNameHelper::NoPath(string(cit->first));

  00444	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00448	83 ff 10	 cmp	 edi, 16			; 00000010H
  0044b	72 12		 jb	 SHORT $LN202@WriteHybri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0044d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00450	50		 push	 eax
  00451	ff b5 d8 fb ff
	ff		 push	 DWORD PTR $T9[ebp]
  00457	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0045c	83 c4 08	 add	 esp, 8
$LN202@WriteHybri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0045f	83 bd d4 fb ff
	ff 10		 cmp	 DWORD PTR _noPathName$7[ebp+20], 16 ; 00000010H
  00466	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0046c	8b bd d0 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$7[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00472	0f 43 8d c0 fb
	ff ff		 cmovae	 ecx, DWORD PTR _noPathName$7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 479  :        size_t h = 0;

  00479	33 d2		 xor	 edx, edx
  0047b	03 f9		 add	 edi, ecx

; 481  :        while (s < end)

  0047d	3b cf		 cmp	 ecx, edi
  0047f	73 10		 jae	 SHORT $LN210@WriteHybri
$LL246@WriteHybri:

; 482  :        {
; 483  :            h *= 16777619;
; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00481	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00484	41		 inc	 ecx
  00485	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0048b	33 d0		 xor	 edx, eax
  0048d	3b cf		 cmp	 ecx, edi
  0048f	72 f0		 jb	 SHORT $LL246@WriteHybri
$LN210@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 588  : 		keyFile.Write( &dwPackNamehash, sizeof(DWORD) );

  00491	6a 04		 push	 4
  00493	8d 85 84 fa ff
	ff		 lea	 eax, DWORD PTR _dwPackNamehash$3[ebp]
  00499	89 95 84 fa ff
	ff		 mov	 DWORD PTR _dwPackNamehash$3[ebp], edx
  0049f	50		 push	 eax
  004a0	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  004a6	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 589  : 
; 590  : 		int iSDBSizeWriteOffset = keyFile.GetPosition();

  004ab	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  004b1	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 591  : 		keyFile.SeekCur(sizeof(int));

  004b6	6a 04		 push	 4
  004b8	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  004be	89 85 a0 fa ff
	ff		 mov	 DWORD PTR _iSDBSizeWriteOffset$1$[ebp], eax
  004c4	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur

; 592  : 
; 593  : 		pPolicy->WriteSupplementaryDataBlockToFile( keyFile );

  004c9	8b 8d 80 fa ff
	ff		 mov	 ecx, DWORD PTR _pPolicy$1$[ebp]
  004cf	8d 85 a8 fa ff
	ff		 lea	 eax, DWORD PTR _keyFile$[ebp]
  004d5	50		 push	 eax
  004d6	e8 00 00 00 00	 call	 ?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile

; 594  : 		int iSDBSizeAfterWrite = keyFile.GetPosition();

  004db	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  004e1	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 595  : 
; 596  : 		keyFile.Seek(iSDBSizeWriteOffset);

  004e6	ff b5 a0 fa ff
	ff		 push	 DWORD PTR _iSDBSizeWriteOffset$1$[ebp]
  004ec	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  004f2	8b f8		 mov	 edi, eax
  004f4	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 597  : 
; 598  : 		int iSDBSize = iSDBSizeAfterWrite-(iSDBSizeWriteOffset+4);

  004f9	8b cf		 mov	 ecx, edi

; 599  : 		keyFile.Write( &iSDBSize, sizeof(int) );

  004fb	8d 85 7c fa ff
	ff		 lea	 eax, DWORD PTR _iSDBSize$2[ebp]
  00501	2b 8d a0 fa ff
	ff		 sub	 ecx, DWORD PTR _iSDBSizeWriteOffset$1$[ebp]
  00507	83 e9 04	 sub	 ecx, 4
  0050a	6a 04		 push	 4
  0050c	89 8d 7c fa ff
	ff		 mov	 DWORD PTR _iSDBSize$2[ebp], ecx
  00512	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 600  : 
; 601  : 		keyFile.Seek(iSDBSizeAfterWrite);

  0051e	57		 push	 edi
  0051f	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00525	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0052a	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$7[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 602  : 	}

  00530	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00534	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00537	72 10		 jb	 SHORT $LN266@WriteHybri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00539	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0053a	50		 push	 eax
  0053b	ff b5 c0 fb ff
	ff		 push	 DWORD PTR _noPathName$7[ebp]
  00541	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00546	83 c4 08	 add	 esp, 8
$LN266@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  00549	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
$LN5@WriteHybri:
  0054e	8b 36		 mov	 esi, DWORD PTR [esi]
  00550	89 b5 9c fa ff
	ff		 mov	 DWORD PTR _cit$2$[ebp], esi

; 2459 :           return x.node_ != y.node_;

  00556	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 577  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00558	0f 85 e2 fc ff
	ff		 jne	 $LL7@WriteHybri
$LN263@WriteHybri:

; 603  : 
; 604  : 	//write sdb data start offset & package cnt
; 605  : 	keyFile.Seek(0);

  0055e	6a 00		 push	 0
  00560	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00566	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 606  : 	keyFile.Write( &iSDBDataOffset, sizeof(int));

  0056b	6a 04		 push	 4
  0056d	8d 85 88 fa ff
	ff		 lea	 eax, DWORD PTR _iSDBDataOffset$[ebp]
  00573	50		 push	 eax
  00574	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0057a	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 607  : 	keyFile.Write( &iKeyPackageCount, sizeof(int));

  0057f	6a 04		 push	 4
  00581	8d 85 94 fa ff
	ff		 lea	 eax, DWORD PTR _iKeyPackageCount$[ebp]
  00587	50		 push	 eax
  00588	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0058e	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 608  : 
; 609  : 	keyFile.Seek(iSDBDataOffset);

  00593	ff b5 88 fa ff
	ff		 push	 DWORD PTR _iSDBDataOffset$[ebp]
  00599	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0059f	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 610  : 	keyFile.Write( &iSDBPackageCnt, sizeof(int));

  005a4	6a 04		 push	 4
  005a6	8d 85 90 fa ff
	ff		 lea	 eax, DWORD PTR _iSDBPackageCnt$[ebp]
  005ac	50		 push	 eax
  005ad	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005b3	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 611  : 
; 612  : 	keyFile.Close();

  005b8	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005be	e8 00 00 00 00	 call	 ?Close@CFileBase@@QAEXXZ ; CFileBase::Close
$LN19@WriteHybri:

; 613  : }

  005c3	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005c9	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  005ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005d8	59		 pop	 ecx
  005d9	5f		 pop	 edi
  005da	5e		 pop	 esi
  005db	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005de	33 cd		 xor	 ecx, ebp
  005e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005e5	8b e5		 mov	 esp, ebp
  005e7	5d		 pop	 ebp
  005e8	c2 04 00	 ret	 4
$LN153@WriteHybri:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 363  : 				szPath[k] = '\0';

  005eb	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN268@WriteHybri:
  005f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$0:
  00000	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$1:
  0000b	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$2:
  00016	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$10[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$3:
  00021	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$4:
  0002c	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$7[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 7c fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1412]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z ENDP ; CEterPackManager::WriteHybridCryptPackInfo
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetRootPackFileName@CEterPackManager@@QAEPBDXZ
_TEXT	SEGMENT
?GetRootPackFileName@CEterPackManager@@QAEPBDXZ PROC	; CEterPackManager::GetRootPackFileName, COMDAT
; _this$ = ecx

; 330  : 	return m_RootPack.GetDBName();

  00000	83 c1 24	 add	 ecx, 36			; 00000024H
  00003	e9 00 00 00 00	 jmp	 ?GetDBName@CEterPack@@QAEPBDXZ ; CEterPack::GetDBName
?GetRootPackFileName@CEterPackManager@@QAEPBDXZ ENDP	; CEterPackManager::GetRootPackFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?DecryptPackIV@CEterPackManager@@QAE_NK@Z
_TEXT	SEGMENT
_dwPanamaKey$ = 8					; size = 4
?DecryptPackIV@CEterPackManager@@QAE_NK@Z PROC		; CEterPackManager::DecryptPackIV, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00003	83 b9 20 14 00
	00 00		 cmp	 DWORD PTR [ecx+5152], 0
  0000a	74 36		 je	 SHORT $LN34@DecryptPac

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000c	8b 81 1c 14 00
	00		 mov	 eax, DWORD PTR [ecx+5148]
  00012	56		 push	 esi

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00013	8b b1 2c 14 00
	00		 mov	 esi, DWORD PTR [ecx+5164]
  00019	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  0001c	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 336  : 	while (itor != m_PackMap.end())

  0001e	74 1b		 je	 SHORT $LN33@DecryptPac
  00020	57		 push	 edi
  00021	8b 7d 08	 mov	 edi, DWORD PTR _dwPanamaKey$[ebp]
$LL2@DecryptPac:

; 337  : 	{
; 338  : 		itor->second->DecryptIV(dwPanamaKey);

  00024	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?DecryptIV@CEterPack@@QAE_NK@Z ; CEterPack::DecryptIV
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2388 :           node_ = static_cast<node_pointer>(node_->next_);

  0002d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  0002f	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 336  : 	while (itor != m_PackMap.end())

  00031	75 f1		 jne	 SHORT $LL2@DecryptPac

; 339  : 		itor++;
; 340  : 	}
; 341  : 	return true;

  00033	5f		 pop	 edi
  00034	b0 01		 mov	 al, 1
  00036	5e		 pop	 esi

; 342  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN33@DecryptPac:

; 339  : 		itor++;
; 340  : 	}
; 341  : 	return true;

  0003b	b0 01		 mov	 al, 1
  0003d	5e		 pop	 esi

; 342  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN34@DecryptPac:

; 339  : 		itor++;
; 340  : 	}
; 341  : 	return true;

  00042	b0 01		 mov	 al, 1

; 342  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?DecryptPackIV@CEterPackManager@@QAE_NK@Z ENDP		; CEterPackManager::DecryptPackIV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -52						; size = 8
$T4 = -44						; size = 28
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szName$ = 8						; size = 4
_c_szDirectory$ = 12					; size = 4
_pPack$ = 16						; size = 4
?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z PROC ; CEterPackManager::RegisterPackWhenPackMaking, COMDAT
; _this$ = ecx

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _c_szName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00030	8b d6		 mov	 edx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 345  : {

  00032	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szDirectory$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00035	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003c	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00043	c6 45 d4 00	 mov	 BYTE PTR $T5[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL69@RegisterPa:
  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	42		 inc	 edx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL69@RegisterPa
  00057	2b d1		 sub	 edx, ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  0005c	52		 push	 edx
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00063	8b 45 10	 mov	 eax, DWORD PTR _pPack$[ebp]
  00066	89 45 ec	 mov	 DWORD PTR $T5[ebp+24], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00069	8d 45 d4	 lea	 eax, DWORD PTR $T5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 346  : 	m_PackMap.insert(TEterPackMap::value_type(c_szName, pPack));

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00073	50		 push	 eax
  00074	50		 push	 eax
  00075	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  00078	50		 push	 eax
  00079	8d 8f 18 14 00
	00		 lea	 ecx, DWORD PTR [edi+5144]
  0007f	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00084	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 346  : 	m_PackMap.insert(TEterPackMap::value_type(c_szName, pPack));

  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0008e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00091	72 0d		 jb	 SHORT $LN31@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00093	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00094	50		 push	 eax
  00095	ff 75 d4	 push	 DWORD PTR $T5[ebp]
  00098	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0009d	83 c4 08	 add	 esp, 8
$LN31@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 347  : 	m_PackList.push_front(pPack);

  000a0	8d 45 10	 lea	 eax, DWORD PTR _pPack$[ebp]
  000a3	50		 push	 eax
  000a4	8d 8f 10 14 00
	00		 lea	 ecx, DWORD PTR [edi+5136]
  000aa	e8 00 00 00 00	 call	 ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000af	8b cb		 mov	 ecx, ebx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b1	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b8	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bf	c6 45 d4 00	 mov	 BYTE PTR $T4[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL70@RegisterPa:
  000c6	8a 01		 mov	 al, BYTE PTR [ecx]
  000c8	41		 inc	 ecx
  000c9	84 c0		 test	 al, al
  000cb	75 f9		 jne	 SHORT $LL70@RegisterPa
  000cd	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000cf	51		 push	 ecx
  000d0	53		 push	 ebx
  000d1	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  000d4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000d9	8b 45 10	 mov	 eax, DWORD PTR _pPack$[ebp]
  000dc	89 45 ec	 mov	 DWORD PTR $T4[ebp+24], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  000df	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 349  : 	m_DirPackMap.insert(TEterPackMap::value_type(c_szDirectory, pPack));

  000e2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  000e9	50		 push	 eax
  000ea	50		 push	 eax
  000eb	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000ee	50		 push	 eax
  000ef	8d 8f 30 14 00
	00		 lea	 ecx, DWORD PTR [edi+5168]
  000f5	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000fa	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp+20]
  000fd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00100	72 0d		 jb	 SHORT $LN71@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00102	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00103	50		 push	 eax
  00104	ff 75 d4	 push	 DWORD PTR $T4[ebp]
  00107	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0010c	83 c4 08	 add	 esp, 8
$LN71@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 351  : }

  0010f	b0 01		 mov	 al, 1
  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z ENDP ; CEterPackManager::RegisterPackWhenPackMaking
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterRootPack@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
?RegisterRootPack@CEterPackManager@@QAEXPBD@Z PROC	; CEterPackManager::RegisterRootPack, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  : 	if (!m_RootPack.Create(m_FileDict, c_szName, ""))

  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000c	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  0000f	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00012	83 c1 24	 add	 ecx, 36			; 00000024H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  0001b	84 c0		 test	 al, al
  0001d	75 10		 jne	 SHORT $LN2@RegisterRo

; 323  : 	{
; 324  : 		TraceError("%s: Pack file does not exist", c_szName);

  0001f	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@
  00027	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0002c	83 c4 08	 add	 esp, 8
$LN2@RegisterRo:

; 325  : 	}
; 326  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?RegisterRootPack@CEterPackManager@@QAEXPBD@Z ENDP	; CEterPackManager::RegisterRootPack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
_TEXT	SEGMENT
$T2 = -68						; size = 8
_c_pbIV$GSCopy$1$ = -64					; size = 4
$T3 = -60						; size = 8
tv812 = -56						; size = 4
_itor$4 = -56						; size = 4
_this$GSCopy$1$ = -52					; size = 4
$T5 = -48						; size = 4
_itor$6 = -48						; size = 4
_pEterPack$ = -48					; size = 4
$T7 = -44						; size = 28
$T8 = -44						; size = 28
$T9 = -40						; size = 24
$T10 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szName$ = 8						; size = 4
_c_szDirectory$ = 12					; size = 4
_c_pbIV$ = 16						; size = 4
?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z PROC	; CEterPackManager::RegisterPack, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	8b 5d 08	 mov	 ebx, DWORD PTR _c_szName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00033	8b cb		 mov	 ecx, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 355  : {

  00035	8b 45 10	 mov	 eax, DWORD PTR _c_pbIV$[ebp]
  00038	8b 7d 0c	 mov	 edi, DWORD PTR _c_szDirectory$[ebp]
  0003b	89 45 c0	 mov	 DWORD PTR _c_pbIV$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00045	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00048	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004f	c6 45 d8 00	 mov	 BYTE PTR $T10[ebp], 0
$LL140@RegisterPa:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00053	8a 01		 mov	 al, BYTE PTR [ecx]
  00055	41		 inc	 ecx
  00056	84 c0		 test	 al, al
  00058	75 f9		 jne	 SHORT $LL140@RegisterPa
  0005a	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005c	51		 push	 ecx
  0005d	53		 push	 ebx
  0005e	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 358  : 		TEterPackMap::iterator itor = m_PackMap.find(c_szName);

  00066	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00069	51		 push	 ecx
  0006a	8d 86 18 14 00
	00		 lea	 eax, DWORD PTR [esi+5144]
  00070	8d 4d d0	 lea	 ecx, DWORD PTR _itor$6[ebp]
  00073	89 45 c8	 mov	 DWORD PTR tv812[ebp], eax
  00076	51		 push	 ecx
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0007e	8b 45 ec	 mov	 eax, DWORD PTR $T10[ebp+20]
  00081	83 f8 10	 cmp	 eax, 16			; 00000010H
  00084	72 0d		 jb	 SHORT $LN34@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00086	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00087	50		 push	 eax
  00088	ff 75 d8	 push	 DWORD PTR $T10[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	83 c4 08	 add	 esp, 8
$LN34@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 360  : 		if (m_PackMap.end() == itor)

  00093	8b 45 d0	 mov	 eax, DWORD PTR _itor$6[ebp]
  00096	85 c0		 test	 eax, eax
  00098	0f 85 cb 01 00
	00		 jne	 $LN2@RegisterPa

; 361  : 		{
; 362  : 			bool bReadOnly = true;
; 363  : 
; 364  : 			pEterPack = new CEterPack;

  0009e	68 ec 13 00 00	 push	 5100			; 000013ecH
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a8	83 c4 04	 add	 esp, 4
  000ab	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
  000ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b5	85 c0		 test	 eax, eax
  000b7	74 0b		 je	 SHORT $LN9@RegisterPa
  000b9	8b c8		 mov	 ecx, eax
  000bb	e8 00 00 00 00	 call	 ??0CEterPack@@QAE@XZ	; CEterPack::CEterPack
  000c0	8b f0		 mov	 esi, eax
  000c2	eb 02		 jmp	 SHORT $LN10@RegisterPa
$LN9@RegisterPa:
  000c4	33 f6		 xor	 esi, esi
$LN10@RegisterPa:

; 365  : 			if (pEterPack->Create(m_FileDict, c_szName, c_szDirectory, bReadOnly, c_pbIV))

  000c6	ff 75 c0	 push	 DWORD PTR _c_pbIV$GSCopy$1$[ebp]
  000c9	8b 45 cc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000cc	8b ce		 mov	 ecx, esi
  000ce	6a 01		 push	 1
  000d0	57		 push	 edi
  000d1	53		 push	 ebx
  000d2	83 c0 0c	 add	 eax, 12			; 0000000cH
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	50		 push	 eax
  000dd	89 75 d0	 mov	 DWORD PTR _pEterPack$[ebp], esi
  000e0	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  000e5	84 c0		 test	 al, al
  000e7	0f 84 6c 01 00
	00		 je	 $LN4@RegisterPa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000ed	8b cb		 mov	 ecx, ebx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000ef	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000f6	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000fd	c6 45 d4 00	 mov	 BYTE PTR $T8[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00101	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL141@RegisterPa:
  00104	8a 01		 mov	 al, BYTE PTR [ecx]
  00106	41		 inc	 ecx
  00107	84 c0		 test	 al, al
  00109	75 f9		 jne	 SHORT $LL141@RegisterPa
  0010b	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0010d	51		 push	 ecx
  0010e	53		 push	 ebx
  0010f	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  00112	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00117	89 75 ec	 mov	 DWORD PTR $T8[ebp+24], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0011a	8b 4d c8	 mov	 ecx, DWORD PTR tv812[ebp]
  0011d	8d 45 d4	 lea	 eax, DWORD PTR $T8[ebp]
  00120	50		 push	 eax
  00121	50		 push	 eax
  00122	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 367  : 				m_PackMap.insert(TEterPackMap::value_type(c_szName, pEterPack));

  00125	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00132	8b 45 e8	 mov	 eax, DWORD PTR $T8[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 367  : 				m_PackMap.insert(TEterPackMap::value_type(c_szName, pEterPack));

  00135	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0013c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0013f	72 0d		 jb	 SHORT $LN144@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00141	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00142	50		 push	 eax
  00143	ff 75 d4	 push	 DWORD PTR $T8[ebp]
  00146	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0014b	83 c4 08	 add	 esp, 8
$LN144@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 385  : 	if (c_szDirectory && c_szDirectory[0] != '*')

  0014e	8b 75 cc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@RegisterPa:
  00151	85 ff		 test	 edi, edi
  00153	0f 84 e0 00 00
	00		 je	 $LN134@RegisterPa
  00159	80 3f 2a	 cmp	 BYTE PTR [edi], 42	; 0000002aH
  0015c	0f 84 d7 00 00
	00		 je	 $LN134@RegisterPa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00162	8b cf		 mov	 ecx, edi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00164	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0016b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00172	c6 45 d8 00	 mov	 BYTE PTR $T9[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00176	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00179	0f 1f 80 00 00
	00 00		 npad	 7
$LL142@RegisterPa:
  00180	8a 01		 mov	 al, BYTE PTR [ecx]
  00182	41		 inc	 ecx
  00183	84 c0		 test	 al, al
  00185	75 f9		 jne	 SHORT $LL142@RegisterPa
  00187	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00189	51		 push	 ecx
  0018a	57		 push	 edi
  0018b	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  0018e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 387  : 		TEterPackMap::iterator itor = m_DirPackMap.find(c_szDirectory);

  00193	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  00196	50		 push	 eax
  00197	8d 45 c8	 lea	 eax, DWORD PTR _itor$4[ebp]
  0019a	50		 push	 eax
  0019b	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  001a1	e8 00 00 00 00	 call	 ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001a6	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp+20]
  001a9	83 f8 10	 cmp	 eax, 16			; 00000010H
  001ac	72 0d		 jb	 SHORT $LN96@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001ae	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001af	50		 push	 eax
  001b0	ff 75 d8	 push	 DWORD PTR $T9[ebp]
  001b3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001b8	83 c4 08	 add	 esp, 8
$LN96@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 388  : 		if (m_DirPackMap.end() == itor)

  001bb	83 7d c8 00	 cmp	 DWORD PTR _itor$4[ebp], 0
  001bf	75 78		 jne	 SHORT $LN134@RegisterPa

; 389  : 		{
; 390  : 			m_PackList.push_front(pEterPack);

  001c1	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001c4	8d 45 d0	 lea	 eax, DWORD PTR _pEterPack$[ebp]
  001c7	50		 push	 eax
  001c8	81 c1 10 14 00
	00		 add	 ecx, 5136		; 00001410H
  001ce	e8 00 00 00 00	 call	 ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  001d3	8b cf		 mov	 ecx, edi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  001d5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001dc	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001e3	c6 45 d4 00	 mov	 BYTE PTR $T7[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  001e7	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001ea	66 0f 1f 44 00
	00		 npad	 6
$LL143@RegisterPa:
  001f0	8a 01		 mov	 al, BYTE PTR [ecx]
  001f2	41		 inc	 ecx
  001f3	84 c0		 test	 al, al
  001f5	75 f9		 jne	 SHORT $LL143@RegisterPa
  001f7	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001f9	51		 push	 ecx
  001fa	57		 push	 edi
  001fb	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  001fe	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00203	8b 45 d0	 mov	 eax, DWORD PTR _pEterPack$[ebp]
  00206	89 45 ec	 mov	 DWORD PTR $T7[ebp+24], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00209	8d 45 d4	 lea	 eax, DWORD PTR $T7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 391  : 			m_DirPackMap.insert(TEterPackMap::value_type(c_szDirectory, pEterPack));

  0020c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00213	50		 push	 eax
  00214	50		 push	 eax
  00215	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  00218	50		 push	 eax
  00219	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  0021f	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00224	8b 45 e8	 mov	 eax, DWORD PTR $T7[ebp+20]
  00227	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0022a	72 0d		 jb	 SHORT $LN134@RegisterPa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0022c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022d	50		 push	 eax
  0022e	ff 75 d4	 push	 DWORD PTR $T7[ebp]
  00231	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00236	83 c4 08	 add	 esp, 8
$LN134@RegisterPa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 395  : 	return true;

  00239	b0 01		 mov	 al, 1
$LN1@RegisterPa:

; 396  : }

  0023b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00245	59		 pop	 ecx
  00246	5f		 pop	 edi
  00247	5e		 pop	 esi
  00248	5b		 pop	 ebx
  00249	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	33 cd		 xor	 ecx, ebp
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c2 0c 00	 ret	 12			; 0000000cH
$LN4@RegisterPa:

; 368  : 			}
; 369  : 			else
; 370  : 			{
; 371  : #ifdef _DEBUG
; 372  : 				Tracef("The eterpack doesn't exist [%s]\n", c_szName);
; 373  : #endif
; 374  : 				delete pEterPack;

  00259	85 f6		 test	 esi, esi
  0025b	74 08		 je	 SHORT $LN11@RegisterPa
  0025d	8b 06		 mov	 eax, DWORD PTR [esi]
  0025f	8b ce		 mov	 ecx, esi
  00261	6a 01		 push	 1
  00263	ff 10		 call	 DWORD PTR [eax]
$LN11@RegisterPa:

; 375  : 				pEterPack = NULL;
; 376  : 				return false;

  00265	32 c0		 xor	 al, al
  00267	eb d2		 jmp	 SHORT $LN1@RegisterPa
$LN2@RegisterPa:

; 377  : 			}
; 378  : 		}
; 379  : 		else
; 380  : 		{
; 381  : 			pEterPack = itor->second;

  00269	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0026c	89 45 d0	 mov	 DWORD PTR _pEterPack$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0026f	e9 dd fe ff ff	 jmp	 $LN3@RegisterPa
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$1:
  00000	68 ec 13 00 00	 push	 5100			; 000013ecH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$2:
  00012	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$4:
  0001a	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
__ehhandler$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z:
  00027	90		 npad	 1
  00028	90		 npad	 1
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z ENDP	; CEterPackManager::RegisterPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?isExistInPack@CEterPackManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?isExistInPack@CEterPackManager@@QAE_NPBD@Z PROC	; CEterPackManager::isExistInPack, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00036	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003d	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 279  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  00041	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  00054	85 c0		 test	 eax, eax
  00056	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  00059	75 05		 jne	 SHORT $LN2@isExistInP

; 280  : 	{
; 281  : 		return m_RootPack.IsExist(strFileName.c_str());

  0005b	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0005e	eb 36		 jmp	 SHORT $LN79@isExistInP
$LN2@isExistInP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00060	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 285  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  00064	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00067	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 285  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00074	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]

; 2153 :         return _BUF_SIZE <= _Myres;

  00077	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0007b	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 286  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  0007f	51		 push	 ecx
  00080	50		 push	 eax
  00081	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00084	e8 00 00 00 00	 call	 ?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z ; CEterFileDict::GetItem

; 287  : 
; 288  : 		if (pkFileItem)

  00089	85 c0		 test	 eax, eax
  0008b	74 1b		 je	 SHORT $LN5@isExistInP

; 289  : 			if (pkFileItem->pkPack)

  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	85 c9		 test	 ecx, ecx
  00091	74 15		 je	 SHORT $LN5@isExistInP
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00093	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
$LN79@isExistInP:

; 2153 :         return _BUF_SIZE <= _Myres;

  00096	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0009a	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFileName$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?IsExist@CEterPack@@QAE_NPBD@Z ; CEterPack::IsExist
  000a4	8a d8		 mov	 bl, al
  000a6	eb 02		 jmp	 SHORT $LN9@isExistInP
$LN5@isExistInP:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 293  : 	return false;

  000a8	32 db		 xor	 bl, bl
$LN9@isExistInP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _strFileName$[ebp+20]
  000ad	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000b0	72 0d		 jb	 SHORT $LN77@isExistInP

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000b2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b3	50		 push	 eax
  000b4	ff 75 d8	 push	 DWORD PTR _strFileName$[ebp]
  000b7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000bc	83 c4 08	 add	 esp, 8
$LN77@isExistInP:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 294  : }

  000bf	8a c3		 mov	 al, bl
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?isExistInPack@CEterPackManager@@QAE_NPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?isExistInPack@CEterPackManager@@QAE_NPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?isExistInPack@CEterPackManager@@QAE_NPBD@Z ENDP	; CEterPackManager::isExistInPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?isExist@CEterPackManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?isExist@CEterPackManager@@QAE_NPBD@Z PROC		; CEterPackManager::isExist, COMDAT
; _this$ = ecx

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 298  : 	if (m_iSearchMode == SEARCH_PACK_FIRST)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  0000a	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  0000e	75 20		 jne	 SHORT $LN2@isExist

; 299  : 	{
; 300  : 		if (isExistInPack(c_szFileName))

  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?isExistInPack@CEterPackManager@@QAE_NPBD@Z ; CEterPackManager::isExistInPack
  00016	84 c0		 test	 al, al
  00018	75 25		 jne	 SHORT $LN6@isExist

; 301  : 			return true;
; 302  : 
; 303  : 		return _access(c_szFileName, 0) == 0 ? true : false;

  0001a	6a 00		 push	 0
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 __access
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	0f 94 c0	 sete	 al
  0002a	5f		 pop	 edi

; 317  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN2@isExist:

; 304  : 	}
; 305  : 
; 306  : 	//if(m_bTryRelativePath) {
; 307  : 	//	if (strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK1, strlen(PATH_ABSOLUTE_YMIRWORK1)) == 0 || strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK2, strlen(PATH_ABSOLUTE_YMIRWORK2)) == 0) {
; 308  : 	//		if(access(c_szFileName+strlen(PATH_ABSOLUTE_YMIRWORK1), 0) == 0)
; 309  : 	//			return true;
; 310  : 	//	}
; 311  : 	//}
; 312  : 
; 313  : 	if (_access(c_szFileName, 0) == 0)

  00030	6a 00		 push	 0
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 __access
  00038	83 c4 08	 add	 esp, 8
  0003b	85 c0		 test	 eax, eax
  0003d	75 08		 jne	 SHORT $LN4@isExist
$LN6@isExist:
  0003f	5f		 pop	 edi

; 314  : 		return true;

  00040	b0 01		 mov	 al, 1

; 317  : }

  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@isExist:

; 315  : 
; 316  : 	return isExistInPack(c_szFileName);

  00047	57		 push	 edi
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?isExistInPack@CEterPackManager@@QAE_NPBD@Z ; CEterPackManager::isExistInPack
  0004f	5f		 pop	 edi

; 317  : }

  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?isExist@CEterPackManager@@QAE_NPBD@Z ENDP		; CEterPackManager::isExist
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
_pData$ = 16						; size = 4
?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::GetFromFile, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : #ifndef _DEBUG
; 254  : 	//const char *pcExt = strchr(c_szFileName, '.');
; 255  : 	//if (pcExt &&
; 256  : 	//	strnicmp(c_szFileName, "locale", 6) != 0
; 257  : 	//	)
; 258  : 	//{
; 259  : 	//	return false;
; 260  : 	//}
; 261  : #endif
; 262  : 
; 263  : 	//if(m_bTryRelativePath) {
; 264  : 	//	if (strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK1, strlen(PATH_ABSOLUTE_YMIRWORK1)) == 0 || strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK2, strlen(PATH_ABSOLUTE_YMIRWORK2)) == 0) {
; 265  : 	//		if(rMappedFile.Create(c_szFileName+strlen(PATH_ABSOLUTE_YMIRWORK1), pData, 0, 0))
; 266  : 	//		{
; 267  : 	//			return true;
; 268  : 	//		}
; 269  : 	//	}
; 270  : 	//}
; 271  : 
; 272  : 	return rMappedFile.Create(c_szFileName, pData, 0, 0) ? true : false;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _rMappedFile$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	ff 75 10	 push	 DWORD PTR _pData$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _c_szFileName$[ebp]
  00010	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00015	85 c0		 test	 eax, eax
  00017	0f 95 c0	 setne	 al

; 273  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::GetFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_lock$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
_pData$ = 16						; size = 4
?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::GetFromPack, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 196  : 	FinderLock lock(m_csFinder);

  00028	8d b7 60 14 00
	00		 lea	 esi, DWORD PTR [edi+5216]

; 183  : 		EnterCriticalSection(p_cs);

  0002e	56		 push	 esi
  0002f	89 75 f0	 mov	 DWORD PTR _lock$[ebp], esi
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 197  : 
; 198  : 	static std::string strFileName;

  00038	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  00053	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00059	0f 8f e4 00 00
	00		 jg	 $LN62@GetFromPac
$LN2@GetFromPac:

; 199  : 
; 200  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  0005f	68 00 00 00 00	 push	 OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00064	ff 75 0c	 push	 DWORD PTR _c_szFileName$[ebp]
  00067	8b cf		 mov	 ecx, edi
  00069	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  0006e	85 c0		 test	 eax, eax
  00070	b8 00 00 00 00	 mov	 eax, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00075	75 24		 jne	 SHORT $LN3@GetFromPac
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00077	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 202  : 		return m_RootPack.Get(rMappedFile, strFileName.c_str(), pData);

  0007e	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00081	ff 75 10	 push	 DWORD PTR _pData$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00084	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 202  : 		return m_RootPack.Get(rMappedFile, strFileName.c_str(), pData);

  0008b	50		 push	 eax
  0008c	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPack::Get
  00094	8a d8		 mov	 bl, al
  00096	e9 8b 00 00 00	 jmp	 $LN12@GetFromPac
$LN3@GetFromPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0009b	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 206  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  000a2	ff 35 10 00 00
	00		 push	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000a8	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 206  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  000b5	83 c4 08	 add	 esp, 8
  000b8	8b d8		 mov	 ebx, eax

; 207  : 		SCache* pkCache = __FindCache(dwFileNameHash);

  000ba	8b cf		 mov	 ecx, edi
  000bc	53		 push	 ebx
  000bd	e8 00 00 00 00	 call	 ?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ; CEterPackManager::__FindCache

; 208  : 
; 209  : 		if (pkCache)

  000c2	85 c0		 test	 eax, eax
  000c4	74 11		 je	 SHORT $LN5@GetFromPac

; 210  : 		{
; 211  : 			rMappedFile.Link(pkCache->m_dwBufSize, pkCache->m_abBufData);

  000c6	ff 30		 push	 DWORD PTR [eax]
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _rMappedFile$[ebp]
  000cb	ff 70 04	 push	 DWORD PTR [eax+4]
  000ce	e8 00 00 00 00	 call	 ?Link@CMappedFile@@QAEXKPBX@Z ; CMappedFile::Link

; 212  : 			return true;

  000d3	b3 01		 mov	 bl, 1
  000d5	eb 4f		 jmp	 SHORT $LN12@GetFromPac
$LN5@GetFromPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000d7	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 215  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  000de	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2145 :         if (_Large_string_engaged()) {

  000e6	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 215  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  000ed	50		 push	 eax
  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 ?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z ; CEterFileDict::GetItem

; 216  : 
; 217  : 		if (pkFileItem)

  000f4	85 c0		 test	 eax, eax
  000f6	74 2c		 je	 SHORT $LN7@GetFromPac

; 218  : 			if (pkFileItem->pkPack)

  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	85 c9		 test	 ecx, ecx
  000fc	74 26		 je	 SHORT $LN7@GetFromPac

; 220  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  000fe	ff 75 10	 push	 DWORD PTR _pData$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00101	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00108	ba 00 00 00 00	 mov	 edx, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 220  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  0010d	ff 70 04	 push	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00110	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 220  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  00117	52		 push	 edx
  00118	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0011b	e8 00 00 00 00	 call	 ?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z ; CEterPack::Get2

; 221  : 				//pkFileItem->pkPack->ClearDataMemoryMap();
; 222  : 				return r;

  00120	8a d8		 mov	 bl, al
  00122	eb 02		 jmp	 SHORT $LN12@GetFromPac
$LN7@GetFromPac:

; 223  : 			}
; 224  : 	}
; 225  : #ifdef _DEBUG
; 226  : 	TraceError("CANNOT_FIND_PACK_FILE [%s]", strFileName.c_str());
; 227  : #endif
; 228  : 
; 229  : 	return false;

  00124	32 db		 xor	 bl, bl
$LN12@GetFromPac:

; 188  : 		LeaveCriticalSection(p_cs);

  00126	56		 push	 esi
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 223  : 			}
; 224  : 	}
; 225  : #ifdef _DEBUG
; 226  : 	TraceError("CANNOT_FIND_PACK_FILE [%s]", strFileName.c_str());
; 227  : #endif
; 228  : 
; 229  : 	return false;

  0012d	8a c3		 mov	 al, bl

; 230  : }

  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 0c 00	 ret	 12			; 0000000cH
$LN62@GetFromPac:

; 197  : 
; 198  : 	static std::string strFileName;

  00143	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  00148	e8 00 00 00 00	 call	 __Init_thread_header
  0014d	83 c4 04	 add	 esp, 4
  00150	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA, -1
  00157	0f 85 02 ff ff
	ff		 jne	 $LN2@GetFromPac
  0015d	68 00 00 00 00	 push	 OFFSET ??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName''
  00162	e8 00 00 00 00	 call	 _atexit
  00167	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  0016c	e8 00 00 00 00	 call	 __Init_thread_footer
  00171	83 c4 08	 add	 esp, 8
  00174	e9 e6 fe ff ff	 jmp	 $LN2@GetFromPac
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _lock$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FinderLock@@QAE@XZ	; FinderLock::~FinderLock
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::GetFromPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
_pData$ = 16						; size = 4
?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::Get, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 159  : 	//TimeChecker timeChecker(c_szFileName);
; 160  : 	//Logf(1, "Load %s\n", c_szFileName);
; 161  : 	if (m_iSearchMode == SEARCH_FILE_FIRST)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 10	 mov	 edi, DWORD PTR _pData$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  00013	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00017	75 1c		 jne	 SHORT $LN2@Get

; 162  : 	{
; 163  : 		if (GetFromFile(rMappedFile, c_szFileName, pData))

  00019	e8 00 00 00 00	 call	 ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
  0001e	84 c0		 test	 al, al
  00020	75 1c		 jne	 SHORT $LN6@Get

; 164  : 		{
; 165  : 			return true;
; 166  : 		}
; 167  : 
; 168  : 		return GetFromPack(rMappedFile, c_szFileName, pData);

  00022	57		 push	 edi
  00023	53		 push	 ebx
  00024	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
  0002e	5f		 pop	 edi

; 177  : }

  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Get:

; 169  : 	}
; 170  : 
; 171  : 	if (GetFromPack(rMappedFile, c_szFileName, pData))

  00035	e8 00 00 00 00	 call	 ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
  0003a	84 c0		 test	 al, al
  0003c	74 09		 je	 SHORT $LN4@Get
$LN6@Get:
  0003e	5f		 pop	 edi

; 177  : }

  0003f	5e		 pop	 esi
  00040	b0 01		 mov	 al, 1
  00042	5b		 pop	 ebx
  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Get:

; 172  : 	{
; 173  : 		return true;
; 174  : 	}
; 175  : 
; 176  : 	return GetFromFile(rMappedFile, c_szFileName, pData);

  00047	57		 push	 edi
  00048	53		 push	 ebx
  00049	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
  00053	5f		 pop	 edi

; 177  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetSearchMode@CEterPackManager@@QAEHXZ
_TEXT	SEGMENT
?GetSearchMode@CEterPackManager@@QAEHXZ PROC		; CEterPackManager::GetSearchMode, COMDAT
; _this$ = ecx

; 405  : 	return m_iSearchMode;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 406  : }

  00003	c3		 ret	 0
?GetSearchMode@CEterPackManager@@QAEHXZ ENDP		; CEterPackManager::GetSearchMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetSearchMode@CEterPackManager@@QAEX_N@Z
_TEXT	SEGMENT
_bPackFirst$ = 8					; size = 1
?SetSearchMode@CEterPackManager@@QAEX_N@Z PROC		; CEterPackManager::SetSearchMode, COMDAT
; _this$ = ecx

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 400  : 	m_iSearchMode = bPackFirst ? SEARCH_PACK_FIRST : SEARCH_FILE_FIRST;

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _bPackFirst$[ebp]
  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 401  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?SetSearchMode@CEterPackManager@@QAEX_N@Z ENDP		; CEterPackManager::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
$T2 = -396						; size = 8
_f$ = -392						; size = 4
$T3 = -388						; size = 12
tv488 = -376						; size = 4
_c_pvData$ = -372					; size = 4
_dwFileNameHash$ = -368					; size = 4
_kMapFile$ = -364					; size = 324
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadStaticCache@CEterPackManager@@QAEXPBD@Z PROC	; CEterPackManager::LoadStaticCache, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx

; 96   : 	if (!m_isCacheMode)

  00030	80 7e 05 00	 cmp	 BYTE PTR [esi+5], 0
  00034	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00037	0f 84 12 01 00
	00		 je	 $LN74@LoadStatic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004b	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 100  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  0004f	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	50		 push	 eax
  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  00060	85 c0		 test	 eax, eax
  00062	0f 84 d2 00 00
	00		 je	 $LN10@LoadStatic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00068	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H
  0006c	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 105  : 	DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  0006f	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00072	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 105  : 	DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007c	83 c4 08	 add	 esp, 8

; 106  : 
; 107  : 	boost::unordered_map<DWORD, SCache>::iterator f = m_kMap_dwNameKey_kCache.find(dwFileNameHash);

  0007f	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _dwFileNameHash$[ebp]
  00085	8b d8		 mov	 ebx, eax
  00087	8d 86 48 14 00
	00		 lea	 eax, DWORD PTR [esi+5192]
  0008d	89 9d 90 fe ff
	ff		 mov	 DWORD PTR _dwFileNameHash$[ebp], ebx
  00093	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv488[ebp], eax
  00099	51		 push	 ecx
  0009a	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _f$[ebp]
  000a0	51		 push	 ecx
  000a1	8b c8		 mov	 ecx, eax
  000a3	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find

; 108  : 	if (m_kMap_dwNameKey_kCache.end() != f)

  000a8	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _f$[ebp], 0
  000af	0f 85 85 00 00
	00		 jne	 $LN10@LoadStatic

; 109  : 		return;
; 110  : 
; 111  : 	CMappedFile kMapFile;

  000b5	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  000bb	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 112  : 	const void* c_pvData;
; 113  : 	if (!Get(kMapFile, c_szFileName, &c_pvData))

  000c0	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$[ebp]
  000c6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ca	50		 push	 eax
  000cb	57		 push	 edi
  000cc	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _kMapFile$[ebp]
  000d2	8b ce		 mov	 ecx, esi
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  000da	84 c0		 test	 al, al
  000dc	74 51		 je	 SHORT $LN11@LoadStatic

; 114  : 		return;
; 115  : 
; 116  : 	SCache kNewCache;
; 117  : 	kNewCache.m_dwBufSize = kMapFile.Size();

  000de	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  000e4	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000e9	8b f8		 mov	 edi, eax

; 118  : 	kNewCache.m_abBufData = new BYTE[kNewCache.m_dwBufSize];

  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 119  : 	memcpy(kNewCache.m_abBufData, c_pvData, kNewCache.m_dwBufSize);

  000f1	57		 push	 edi
  000f2	ff b5 8c fe ff
	ff		 push	 DWORD PTR _c_pvData$[ebp]
  000f8	8b f0		 mov	 esi, eax
  000fa	56		 push	 esi
  000fb	e8 00 00 00 00	 call	 _memcpy
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00100	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv488[ebp]
  00106	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 119  : 	memcpy(kNewCache.m_abBufData, c_pvData, kNewCache.m_dwBufSize);

  0010c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0010f	89 9d 7c fe ff
	ff		 mov	 DWORD PTR $T3[ebp], ebx
  00115	89 b5 80 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+4], esi
  0011b	89 bd 84 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+8], edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00121	50		 push	 eax
  00122	50		 push	 eax
  00123	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
$LN11@LoadStatic:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 121  : }

  0012f	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  00135	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
$LN10@LoadStatic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0013a	8b 45 ec	 mov	 eax, DWORD PTR _strFileName$[ebp+20]
  0013d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00140	72 0d		 jb	 SHORT $LN74@LoadStatic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00142	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00143	50		 push	 eax
  00144	ff 75 d8	 push	 DWORD PTR _strFileName$[ebp]
  00147	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0014c	83 c4 08	 add	 esp, 8
$LN74@LoadStatic:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 121  : }

  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$1:
  00008	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a 70 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-400]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadStaticCache@CEterPackManager@@QAEXPBD@Z ENDP	; CEterPackManager::LoadStaticCache
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetRelativePathMode@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?SetRelativePathMode@CEterPackManager@@QAEXXZ PROC	; CEterPackManager::SetRelativePathMode, COMDAT
; _this$ = ecx

; 52   : 	m_bTryRelativePath = true;

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1

; 53   : }

  00004	c3		 ret	 0
?SetRelativePathMode@CEterPackManager@@QAEXXZ ENDP	; CEterPackManager::SetRelativePathMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetCacheMode@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?SetCacheMode@CEterPackManager@@QAEXXZ PROC		; CEterPackManager::SetCacheMode, COMDAT
; _this$ = ecx

; 47   : 	m_isCacheMode=true;

  00000	c6 41 05 01	 mov	 BYTE PTR [ecx+5], 1

; 48   : }

  00004	c3		 ret	 0
?SetCacheMode@CEterPackManager@@QAEXXZ ENDP		; CEterPackManager::SetCacheMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ??1CEterPackManager@@UAE@XZ
_TEXT	SEGMENT
??1CEterPackManager@@UAE@XZ PROC			; CEterPackManager::~CEterPackManager, COMDAT
; _this$ = ecx

; 414  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CEterPackManager@@6B@

; 415  : 	__ClearCacheMap();

  0000b	e8 00 00 00 00	 call	 ?__ClearCacheMap@CEterPackManager@@IAEXXZ ; CEterPackManager::__ClearCacheMap
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00010	83 bf 20 14 00
	00 00		 cmp	 DWORD PTR [edi+5152], 0
  00017	74 2a		 je	 SHORT $LN3@CEterPackM

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00019	8b 87 1c 14 00
	00		 mov	 eax, DWORD PTR [edi+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0001f	8b b7 2c 14 00
	00		 mov	 esi, DWORD PTR [edi+5164]
  00025	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2399 :           return node_ != x.node_;

  00028	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 419  : 	while (i != e)

  0002a	74 17		 je	 SHORT $LN3@CEterPackM
  0002c	0f 1f 40 00	 npad	 4
$LL2@CEterPackM:

; 420  : 	{
; 421  : 		delete i->second;

  00030	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00033	85 c9		 test	 ecx, ecx
  00035	74 06		 je	 SHORT $LN5@CEterPackM
  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	6a 01		 push	 1
  0003b	ff 10		 call	 DWORD PTR [eax]
$LN5@CEterPackM:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2388 :           node_ = static_cast<node_pointer>(node_->next_);

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  0003f	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 419  : 	while (i != e)

  00041	75 ed		 jne	 SHORT $LL2@CEterPackM
$LN3@CEterPackM:

; 422  : 		i++;
; 423  : 	}
; 424  : 	DeleteCriticalSection(&m_csFinder);

  00043	8d 87 60 14 00
	00		 lea	 eax, DWORD PTR [edi+5216]
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 425  : }

  00050	8d 8f 48 14 00
	00		 lea	 ecx, DWORD PTR [edi+5192]
  00056	e8 00 00 00 00	 call	 ??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
  0005b	8d 8f 30 14 00
	00		 lea	 ecx, DWORD PTR [edi+5168]
  00061	e8 00 00 00 00	 call	 ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  00066	8d 8f 18 14 00
	00		 lea	 ecx, DWORD PTR [edi+5144]
  0006c	e8 00 00 00 00	 call	 ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00071	8b 8f 10 14 00
	00		 mov	 ecx, DWORD PTR [edi+5136]

; 324  :         _Head->_Prev->_Next = nullptr;

  00077	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00082	85 c0		 test	 eax, eax
  00084	74 13		 je	 SHORT $LN37@CEterPackM
$LL38@CEterPackM:

; 328  :             _Pnext = _Pnode->_Next;

  00086	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00088	6a 0c		 push	 12			; 0000000cH
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00093	8b c6		 mov	 eax, esi
  00095	85 f6		 test	 esi, esi
  00097	75 ed		 jne	 SHORT $LL38@CEterPackM
$LN37@CEterPackM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00099	6a 0c		 push	 12			; 0000000cH
  0009b	ff b7 10 14 00
	00		 push	 DWORD PTR [edi+5136]
  000a1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a6	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 425  : }

  000a9	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000ac	e8 00 00 00 00	 call	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  000b1	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000b4	e8 00 00 00 00	 call	 ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 19   : 	{

  000b9	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton
  000cb	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 425  : }

  000cc	c3		 ret	 0
??1CEterPackManager@@UAE@XZ ENDP			; CEterPackManager::~CEterPackManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp
;	COMDAT ??0CEterPackManager@@QAE@XZ
_TEXT	SEGMENT
__Newhead$2 = -16					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEterPackManager@@QAE@XZ PROC			; CEterPackManager::CEterPackManager, COMDAT
; _this$ = ecx

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEterPackManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, edi ; CSingleton<CEterPackManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 409  : {

  00030	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CEterPackManager@@6B@
  00040	66 c7 47 04 00
	00		 mov	 WORD PTR [edi+4], 0
  00046	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004d	e8 00 00 00 00	 call	 ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
  00052	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00059	e8 00 00 00 00	 call	 ??0CEterPack@@QAE@XZ	; CEterPack::CEterPack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	6a 0c		 push	 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 409  : {

  00060	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00064	c7 87 10 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5136], 0
  0006e	c7 87 14 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5140], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00078	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  0007d	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0007f	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  00082	50		 push	 eax
  00083	56		 push	 esi
  00084	89 75 f0	 mov	 DWORD PTR __Newhead$2[ebp], esi
  00087	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0008c	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  0008f	50		 push	 eax
  00090	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAVCEterPack@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAVCEterPack@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<CEterPack *,void *> *,std::_List_node<CEterPack *,void *> * &>
  00099	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  0009c	89 b7 10 14 00
	00		 mov	 DWORD PTR [edi+5136], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPackManager.cpp

; 409  : {

  000a2	8d 8f 18 14 00
	00		 lea	 ecx, DWORD PTR [edi+5144]
  000a8	e8 00 00 00 00	 call	 ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  000ad	8d 8f 30 14 00
	00		 lea	 ecx, DWORD PTR [edi+5168]
  000b3	e8 00 00 00 00	 call	 ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  000b8	8d 8f 48 14 00
	00		 lea	 ecx, DWORD PTR [edi+5192]
  000be	e8 00 00 00 00	 call	 ??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >

; 410  : 	InitializeCriticalSection(&m_csFinder);

  000c3	8d 87 60 14 00
	00		 lea	 eax, DWORD PTR [edi+5216]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 411  : }

  000d0	8b c7		 mov	 eax, edi
  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEterPackManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCEterPackManager@@@@UAE@XZ ; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
__unwindfunclet$??0CEterPackManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1CEterFileDict@@QAE@XZ
__unwindfunclet$??0CEterPackManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 24	 add	 ecx, 36			; 00000024H
  00019	e9 00 00 00 00	 jmp	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CEterPackManager@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEterPackManager@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEterPackManager@@QAE@XZ ENDP			; CEterPackManager::CEterPackManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z PROC	; CSingleton<CEterPackManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z ENDP	; CSingleton<CEterPackManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCEterPackManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCEterPackManager@@@@UAE@XZ PROC	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCEterPackManager@@@@UAE@XZ ENDP	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CEterFileDict@@QAE@XZ
_TEXT	SEGMENT
??1CEterFileDict@@QAE@XZ PROC				; CEterFileDict::~CEterFileDict, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
??1CEterFileDict@@QAE@XZ ENDP				; CEterFileDict::~CEterFileDict
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 2124 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 1986 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1986 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00007	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	74 65		 je	 SHORT $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00013	8b da		 mov	 ebx, edx
  00015	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN52@table
  0001c	0f 1f 40 00	 npad	 4
$LL4@table:

; 3357 :               node_pointer next = next_node(n);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00022	6a 14		 push	 20			; 00000014H
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002d	8b c6		 mov	 eax, esi
  0002f	85 f6		 test	 esi, esi
  00031	75 ed		 jne	 SHORT $LL4@table
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b da		 mov	 ebx, edx
  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN52@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003b	8b c6		 mov	 eax, esi
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00040	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00043	3b d9		 cmp	 ebx, ecx
  00045	0f 44 f0	 cmove	 esi, eax
  00048	0f 44 d3	 cmove	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004b	8d 04 b5 04 00
	00 00		 lea	 eax, DWORD PTR [esi*4+4]
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00059	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00063	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  0006a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
$LN6@table:
  00073	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
;	COMDAT ??$hash_value@K@boost@@YAIK@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$hash_value@K@boost@@YAIK@Z PROC			; boost::hash_value<unsigned long>, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         return static_cast<std::size_t>(v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 361  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$hash_value@K@boost@@YAIK@Z ENDP			; boost::hash_value<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h
;	COMDAT ?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1036				; size = 4
___$ReturnUdt$GSCopy$1$ = -1032				; size = 4
_szPath$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoPath, COMDAT

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 347  : 	char szPath[1024];
; 348  : 	szPath[0] = '\0';
; 349  : 
; 350  : 	size_t nLength = str.length();

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	53		 push	 ebx
  0001a	89 85 f8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00020	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00023	89 85 f4 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00029	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0

; 351  : 
; 352  : 	if (nLength > 0)

  00030	85 db		 test	 ebx, ebx
  00032	0f 84 8f 00 00
	00		 je	 $LN3@NoPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00038	56		 push	 esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00039	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 2144 :         const value_type* _Result = _Bx._Buf;

  0003c	8b d1		 mov	 edx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0003e	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN77@NoPath

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN77@NoPath:
  00045	57		 push	 edi

; 2147 :         }
; 2148 : 
; 2149 :         return _Result;

  00046	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _szPath$[ebp]
  0004c	2b fa		 sub	 edi, edx
  0004e	66 90		 npad	 2
$LL15@NoPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 354  : 		strcpy(szPath, str.c_str());

  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00055	88 44 17 ff	 mov	 BYTE PTR [edi+edx-1], al
  00059	84 c0		 test	 al, al
  0005b	75 f3		 jne	 SHORT $LL15@NoPath

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  0005d	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00060	85 c0		 test	 eax, eax
  00062	74 61		 je	 SHORT $LN82@NoPath
$LL4@NoPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00064	8b d1		 mov	 edx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00066	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN79@NoPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN79@NoPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  0006d	80 3c 02 2f	 cmp	 BYTE PTR [edx+eax], 47	; 0000002fH
  00071	74 16		 je	 SHORT $LN10@NoPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00073	8b d1		 mov	 edx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00075	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00078	72 02		 jb	 SHORT $LN78@NoPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0007a	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN78@NoPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 358  : 			if (str[i] == '/' || str[i] == '\\')

  0007c	80 3c 02 5c	 cmp	 BYTE PTR [edx+eax], 92	; 0000005cH
  00080	74 07		 je	 SHORT $LN10@NoPath

; 355  : 
; 356  : 		for (size_t i = nLength - 1; i > 0; i--)

  00082	83 e8 01	 sub	 eax, 1
  00085	75 dd		 jne	 SHORT $LL4@NoPath

; 364  : 				break;
; 365  : 			}
; 366  : 
; 367  : 			if (0 == i)

  00087	eb 3c		 jmp	 SHORT $LN82@NoPath
$LN10@NoPath:

; 359  : 			{
; 360  : 				int k = 0;
; 361  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  00089	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008c	33 ff		 xor	 edi, edi
  0008e	3b d3		 cmp	 edx, ebx
  00090	73 2b		 jae	 SHORT $LN76@NoPath
  00092	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  00095	8d 9d fc fb ff
	ff		 lea	 ebx, DWORD PTR _szPath$[ebp]
  0009b	2b da		 sub	 ebx, edx
  0009d	2b fa		 sub	 edi, edx
  0009f	90		 npad	 1
$LL7@NoPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  000a0	8b c1		 mov	 eax, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  000a2	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000a5	72 02		 jb	 SHORT $LN44@NoPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN44@NoPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 362  : 					szPath[k] = str[j];

  000a9	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000ac	88 04 13	 mov	 BYTE PTR [ebx+edx], al
  000af	42		 inc	 edx
  000b0	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000b3	72 eb		 jb	 SHORT $LL7@NoPath

; 363  : 				szPath[k] = '\0';

  000b5	81 ff 00 04 00
	00		 cmp	 edi, 1024		; 00000400H
  000bb	73 53		 jae	 SHORT $LN85@NoPath
$LN76@NoPath:
  000bd	c6 84 3d fc fb
	ff ff 00	 mov	 BYTE PTR _szPath$[ebp+edi], 0
$LN82@NoPath:
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
$LN3@NoPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000c7	8b 9d f8 fb ff
	ff		 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000cd	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]
  000d3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000d6	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000dd	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000e4	c6 03 00	 mov	 BYTE PTR [ebx], 0
$LL80@NoPath:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000e7	8a 01		 mov	 al, BYTE PTR [ecx]
  000e9	41		 inc	 ecx
  000ea	84 c0		 test	 al, al
  000ec	75 f9		 jne	 SHORT $LL80@NoPath
  000ee	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000f0	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  000f6	51		 push	 ecx
  000f7	50		 push	 eax
  000f8	8b cb		 mov	 ecx, ebx
  000fa	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\filename.h

; 373  : }

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	8b c3		 mov	 eax, ebx
  00104	33 cd		 xor	 ecx, ebp
  00106	5b		 pop	 ebx
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN85@NoPath:

; 363  : 				szPath[k] = '\0';

  00110	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN83@NoPath:
  00115	cc		 int	 3
?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4470 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:
  00010	56		 push	 esi

; 2144 :         const value_type* _Result = _Bx._Buf;

  00011	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00014	8b d6		 mov	 edx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 16		 mov	 edx, DWORD PTR [esi]
$LN11@operator:

; 4091 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001e	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00021	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00024	75 5f		 jne	 SHORT $LN17@operator

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00026	83 ee 04	 sub	 esi, 4
  00029	72 16		 jb	 SHORT $LN23@operator
  0002b	0f 1f 44 00 00	 npad	 5
$LL24@operator:
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00034	75 10		 jne	 SHORT $LN22@operator
  00036	83 c2 04	 add	 edx, 4
  00039	83 c1 04	 add	 ecx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL24@operator
$LN23@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN21@operator
$LN22@operator:
  00046	8a 02		 mov	 al, BYTE PTR [edx]
  00048	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004a	75 27		 jne	 SHORT $LN25@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN21@operator
  00051	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00054	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00057	75 1a		 jne	 SHORT $LN25@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN21@operator
  0005e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00061	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00064	75 0d		 jne	 SHORT $LN25@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN21@operator
  0006b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0006e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00071	74 07		 je	 SHORT $LN21@operator
$LN25@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN26@operator
$LN21@operator:
  0007a	33 c0		 xor	 eax, eax
$LN26@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007c	85 c0		 test	 eax, eax
  0007e	75 05		 jne	 SHORT $LN17@operator
  00080	b0 01		 mov	 al, 1
  00082	5e		 pop	 esi

; 4471 :     return _Left._Equal(_Right);
; 4472 : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN17@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00085	32 c0		 xor	 al, al
  00087	5e		 pop	 esi

; 4471 :     return _Left._Equal(_Right);
; 4472 : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	5e		 pop	 esi

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
