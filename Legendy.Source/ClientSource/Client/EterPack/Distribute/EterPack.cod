; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_IndexCC@eterpack@@3KB DD 0444b5045H			; eterpack::c_IndexCC
?c_Version@eterpack@@3KB DD 02H				; eterpack::c_Version
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_printf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category2@std@@UBEPBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??_G_Iostream_error_category2@std@@UAEPAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??$hash_value@K@boost@@YAIK@Z			; boost::hash_value<unsigned long>
PUBLIC	?InsertItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ; CEterFileDict::InsertItem
PUBLIC	?UpdateItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ; CEterFileDict::UpdateItem
PUBLIC	?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z	; CEterFileDict::GetItem
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_equiv
PUBLIC	?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::insert
PUBLIC	?find@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::find
PUBLIC	?equal_range@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@U1234@@std@@ABK@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::equal_range
PUBLIC	??0CEterPack@@QAE@XZ				; CEterPack::CEterPack
PUBLIC	??1CEterPack@@UAE@XZ				; CEterPack::~CEterPack
PUBLIC	?Destroy@CEterPack@@QAEXXZ			; CEterPack::Destroy
PUBLIC	?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
PUBLIC	?DecryptIV@CEterPack@@QAE_NK@Z			; CEterPack::DecryptIV
PUBLIC	?GetPathName@CEterPack@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CEterPack::GetPathName
PUBLIC	?GetDBName@CEterPack@@QAEPBDXZ			; CEterPack::GetDBName
PUBLIC	?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z	; CEterPack::Get
PUBLIC	?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z ; CEterPack::Get2
PUBLIC	?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPack::Put
PUBLIC	?Put@CEterPack@@QAE_NPBDPBXJE@Z			; CEterPack::Put
PUBLIC	?Delete@CEterPack@@QAE_NPBD@Z			; CEterPack::Delete
PUBLIC	?Extract@CEterPack@@QAE_NXZ			; CEterPack::Extract
PUBLIC	?GetFragmentSize@CEterPack@@QAEJXZ		; CEterPack::GetFragmentSize
PUBLIC	?IsExist@CEterPack@@QAE_NPBD@Z			; CEterPack::IsExist
PUBLIC	?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ ; CEterPack::GetIndexMap
PUBLIC	?EncryptIndexFile@CEterPack@@QAE_NXZ		; CEterPack::EncryptIndexFile
PUBLIC	?DecryptIndexFile@CEterPack@@QAE_NXZ		; CEterPack::DecryptIndexFile
PUBLIC	?DeleteUnreferencedData@CEterPack@@QAEKXZ	; CEterPack::DeleteUnreferencedData
PUBLIC	?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CEterPack::GetNames
PUBLIC	?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt
PUBLIC	?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z ; CEterPack::__BuildIndex
PUBLIC	?CreateIndexFile@CEterPack@@AAE_NXZ		; CEterPack::CreateIndexFile
PUBLIC	?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ; CEterPack::FindIndex
PUBLIC	?GetNewIndexPosition@CEterPack@@AAEJAAVCFileBase@@@Z ; CEterPack::GetNewIndexPosition
PUBLIC	?NewIndex@CEterPack@@AAEPAUSEterPackIndex@@AAVCFileBase@@PBDJ@Z ; CEterPack::NewIndex
PUBLIC	?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ; CEterPack::WriteIndex
PUBLIC	?GetFreeBlockIndex@CEterPack@@AAEHJ@Z		; CEterPack::GetFreeBlockIndex
PUBLIC	?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z ; CEterPack::PushFreeIndex
PUBLIC	?CreateDataFile@CEterPack@@AAE_NXZ		; CEterPack::CreateDataFile
PUBLIC	?GetNewDataPosition@CEterPack@@AAEJAAVCFileBase@@@Z ; CEterPack::GetNewDataPosition
PUBLIC	?ReadData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PAXJ@Z ; CEterPack::ReadData
PUBLIC	?WriteData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ; CEterPack::WriteData
PUBLIC	?WriteNewData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ; CEterPack::WriteNewData
PUBLIC	?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z	; CEterPack::Delete
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??0?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
PUBLIC	??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
PUBLIC	??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[]
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??0?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
PUBLIC	??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::~unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
PUBLIC	?erase@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@U4523@@Z ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::erase
PUBLIC	?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::find
PUBLIC	??0?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
PUBLIC	??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
PUBLIC	?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z ; CEterPack::__CreateFileNameKey_Panama
PUBLIC	?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Decrypt_Panama
PUBLIC	?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Encrypt_Panama
PUBLIC	??_GCEterPack@@UAEPAXI@Z			; CEterPack::`scalar deleting destructor'
PUBLIC	?GetSingleton@CMakePackLog@@SAAAV1@XZ		; CMakePackLog::GetSingleton
PUBLIC	??0CMakePackLog@@QAE@XZ				; CMakePackLog::CMakePackLog
PUBLIC	??1CMakePackLog@@QAE@XZ				; CMakePackLog::~CMakePackLog
PUBLIC	?SetFileName@CMakePackLog@@QAEXPBD@Z		; CMakePackLog::SetFileName
PUBLIC	?Writef@CMakePackLog@@QAAXPBDZZ			; CMakePackLog::Writef
PUBLIC	?Writenf@CMakePackLog@@QAAXPBDZZ		; CMakePackLog::Writenf
PUBLIC	?Write@CMakePackLog@@QAEXPBD@Z			; CMakePackLog::Write
PUBLIC	?WriteErrorf@CMakePackLog@@QAAXPBDZZ		; CMakePackLog::WriteErrorf
PUBLIC	?WriteErrornf@CMakePackLog@@QAAXPBDZZ		; CMakePackLog::WriteErrornf
PUBLIC	?WriteError@CMakePackLog@@QAEXPBD@Z		; CMakePackLog::WriteError
PUBLIC	?FlushError@CMakePackLog@@QAEXXZ		; CMakePackLog::FlushError
PUBLIC	?__Write@CMakePackLog@@AAEXPBDH@Z		; CMakePackLog::__Write
PUBLIC	?__WriteError@CMakePackLog@@AAEXPBDH@Z		; CMakePackLog::__WriteError
PUBLIC	?__IsLogMode@CMakePackLog@@AAE_NXZ		; CMakePackLog::__IsLogMode
PUBLIC	??1Exception@CryptoPP@@UAE@XZ			; CryptoPP::Exception::~Exception
PUBLIC	?what@Exception@CryptoPP@@UBEPBDXZ		; CryptoPP::Exception::what
PUBLIC	??0Exception@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Exception::Exception
PUBLIC	??_GException@CryptoPP@@UAEPAXI@Z		; CryptoPP::Exception::`scalar deleting destructor'
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??1InvalidArgument@CryptoPP@@UAE@XZ		; CryptoPP::InvalidArgument::~InvalidArgument
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??_GInvalidArgument@CryptoPP@@UAEPAXI@Z		; CryptoPP::InvalidArgument::`scalar deleting destructor'
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??1NotImplemented@CryptoPP@@UAE@XZ		; CryptoPP::NotImplemented::~NotImplemented
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??_GNotImplemented@CryptoPP@@UAEPAXI@Z		; CryptoPP::NotImplemented::`scalar deleting destructor'
PUBLIC	??1NameValuePairs@CryptoPP@@UAE@XZ		; CryptoPP::NameValuePairs::~NameValuePairs
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
PUBLIC	?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
PUBLIC	??_GNameValuePairs@CryptoPP@@UAEPAXI@Z		; CryptoPP::NameValuePairs::`scalar deleting destructor'
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1Clonable@CryptoPP@@UAE@XZ			; CryptoPP::Clonable::~Clonable
PUBLIC	?Clone@Clonable@CryptoPP@@UBEPAV12@XZ		; CryptoPP::Clonable::Clone
PUBLIC	??1Algorithm@CryptoPP@@UAE@XZ			; CryptoPP::Algorithm::~Algorithm
PUBLIC	?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::Algorithm::AlgorithmName
PUBLIC	?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::Algorithm::AlgorithmProvider
PUBLIC	??1SimpleKeyingInterface@CryptoPP@@UAE@XZ	; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
PUBLIC	?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
PUBLIC	?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ	; CryptoPP::SimpleKeyingInterface::IVSize
PUBLIC	?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MinIVLength
PUBLIC	?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MaxIVLength
PUBLIC	??1StreamTransformation@CryptoPP@@UAE@XZ	; CryptoPP::StreamTransformation::~StreamTransformation
PUBLIC	?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MandatoryBlockSize
PUBLIC	?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
PUBLIC	?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MinLastBlockSize
PUBLIC	?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::StreamTransformation::IsLastBlockSpecial
PUBLIC	??1HashTransformation@CryptoPP@@UAE@XZ		; CryptoPP::HashTransformation::~HashTransformation
PUBLIC	?Final@HashTransformation@CryptoPP@@UAEXPAE@Z	; CryptoPP::HashTransformation::Final
PUBLIC	?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z ; CryptoPP::HashTransformation::CalculateDigest
PUBLIC	?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z	; CryptoPP::HashTransformation::Verify
PUBLIC	?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z ; CryptoPP::HashTransformation::VerifyDigest
PUBLIC	?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z ; CryptoPP::HashTransformation::CalculateTruncatedDigest
PUBLIC	?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z ; CryptoPP::HashTransformation::VerifyTruncatedDigest
PUBLIC	?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::SymmetricCipher::GetAlgorithm
PUBLIC	??1RandomNumberGenerator@CryptoPP@@UAE@XZ	; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
PUBLIC	?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
PUBLIC	?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
PUBLIC	??1Waitable@CryptoPP@@UAE@XZ			; CryptoPP::Waitable::~Waitable
PUBLIC	??1BufferedTransformation@CryptoPP@@UAE@XZ	; CryptoPP::BufferedTransformation::~BufferedTransformation
PUBLIC	?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ; CryptoPP::BufferedTransformation::CreatePutSpace
PUBLIC	?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BufferedTransformation::CanModifyInput
PUBLIC	?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ; CryptoPP::BufferedTransformation::PutModifiable2
PUBLIC	?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
PUBLIC	?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::GetNextMessageSeries
PUBLIC	?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
PUBLIC	?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
PUBLIC	?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::Attachable
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ; CryptoPP::BufferedTransformation::Detach
PUBLIC	?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
PUBLIC	?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::Store::IsolatedInitialize
PUBLIC	?NumberOfMessages@Store@CryptoPP@@UBEIXZ	; CryptoPP::Store::NumberOfMessages
PUBLIC	?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::TransferTo2
PUBLIC	?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::CopyRangeTo2
PUBLIC	?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	??0?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
PUBLIC	??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	??0?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
PUBLIC	??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??1ConstByteArrayParameter@CryptoPP@@QAE@XZ	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
PUBLIC	??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
PUBLIC	??1AlgorithmParametersBase@CryptoPP@@UAE@XZ	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
PUBLIC	??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
PUBLIC	?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
PUBLIC	??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
PUBLIC	?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
PUBLIC	?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
PUBLIC	??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
PUBLIC	??1AlgorithmParameters@CryptoPP@@UAE@XZ		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
PUBLIC	??1Filter@CryptoPP@@UAE@XZ			; CryptoPP::Filter::~Filter
PUBLIC	?Attachable@Filter@CryptoPP@@UAE_NXZ		; CryptoPP::Filter::Attachable
PUBLIC	?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageEnd
PUBLIC	?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
PUBLIC	??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
PUBLIC	??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
PUBLIC	?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
PUBLIC	??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
PUBLIC	??1ArraySink@CryptoPP@@UAE@XZ			; CryptoPP::ArraySink::~ArraySink
PUBLIC	??_GArraySink@CryptoPP@@UAEPAXI@Z		; CryptoPP::ArraySink::`scalar deleting destructor'
PUBLIC	??_GStringStore@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringStore::`scalar deleting destructor'
PUBLIC	??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
PUBLIC	?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
PUBLIC	??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
PUBLIC	??1Source@CryptoPP@@UAE@XZ			; CryptoPP::Source::~Source
PUBLIC	??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
PUBLIC	??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
PUBLIC	?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
PUBLIC	?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
PUBLIC	?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
PUBLIC	?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
PUBLIC	?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
PUBLIC	?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
PUBLIC	??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
PUBLIC	??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
PUBLIC	??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
PUBLIC	??_GStringSource@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringSource::`scalar deleting destructor'
PUBLIC	??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy
PUBLIC	?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
PUBLIC	?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z ; CryptoPP::AdditiveCipherAbstractPolicy::WriteKeystream
PUBLIC	?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z ; CryptoPP::AdditiveCipherAbstractPolicy::SeekToIteration
PUBLIC	??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>
PUBLIC	??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >
PUBLIC	?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalBlockSize
PUBLIC	?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalDataAlignment
PUBLIC	?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsSelfInverting
PUBLIC	?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsForwardTransformation
PUBLIC	?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsRandomAccess
PUBLIC	?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider
PUBLIC	??1?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>
PUBLIC	?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalBlockSize
PUBLIC	?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalDataAlignment
PUBLIC	??1?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned int,CryptoPP::HashTransformation>
PUBLIC	?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalBlockSize
PUBLIC	?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalDataAlignment
PUBLIC	?AlgorithmProvider@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::AlgorithmProvider
PUBLIC	??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>
PUBLIC	?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize
PUBLIC	?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder
PUBLIC	?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf
PUBLIC	??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::AlgorithmName
PUBLIC	?Clone@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::Clone
PUBLIC	??1?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::~ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >
PUBLIC	??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>
PUBLIC	?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::DigestSize
PUBLIC	?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::HashEndianCorrectedBlock
PUBLIC	?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::Init
PUBLIC	?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::StateBuf
PUBLIC	??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeAlignedSecBlock<unsigned __int64,8,0>::~FixedSizeAlignedSecBlock<unsigned __int64,8,0>
PUBLIC	??_GTiger@CryptoPP@@UAEPAXI@Z			; CryptoPP::Tiger::`scalar deleting destructor'
PUBLIC	??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>
PUBLIC	?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize
PUBLIC	?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder
PUBLIC	?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf
PUBLIC	??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::AlgorithmName
PUBLIC	?Clone@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::Clone
PUBLIC	??1?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::~ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >
PUBLIC	??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>
PUBLIC	?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::DigestSize
PUBLIC	?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::HashEndianCorrectedBlock
PUBLIC	?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::Init
PUBLIC	?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEPAIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::StateBuf
PUBLIC	??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeAlignedSecBlock<unsigned int,16,0>::~FixedSizeAlignedSecBlock<unsigned int,16,0>
PUBLIC	??_GSHA1@CryptoPP@@UAEPAXI@Z			; CryptoPP::SHA1::`scalar deleting destructor'
PUBLIC	??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>
PUBLIC	?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize
PUBLIC	?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder
PUBLIC	?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::AlgorithmName
PUBLIC	?Clone@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::Clone
PUBLIC	??1?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::~ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >
PUBLIC	??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>
PUBLIC	?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::DigestSize
PUBLIC	?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::HashEndianCorrectedBlock
PUBLIC	?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::Init
PUBLIC	?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEPAIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::StateBuf
PUBLIC	??_GRIPEMD128@CryptoPP@@UAEPAXI@Z		; CryptoPP::RIPEMD128::`scalar deleting destructor'
PUBLIC	??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>
PUBLIC	?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize
PUBLIC	?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder
PUBLIC	?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::AlgorithmName
PUBLIC	?Clone@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::Clone
PUBLIC	??1?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::~ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >
PUBLIC	??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UAE@XZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>
PUBLIC	?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UBEIXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::DigestSize
PUBLIC	?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::HashEndianCorrectedBlock
PUBLIC	?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::Init
PUBLIC	?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::StateBuf
PUBLIC	??_GWhirlpool@CryptoPP@@UAEPAXI@Z		; CryptoPP::Whirlpool::`scalar deleting destructor'
PUBLIC	??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??1?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::~AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetBytesPerIteration
PUBLIC	?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetIterationsToBuffer
PUBLIC	?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::CanOperateKeystream
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?do_always_noconv@codecvt_base@std@@MBE_NXZ	; std::codecvt_base::do_always_noconv
PUBLIC	?do_max_length@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_max_length
PUBLIC	?do_encoding@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_encoding
PUBLIC	??_Gcodecvt_base@std@@UAEPAXI@Z			; std::codecvt_base::`scalar deleting destructor'
PUBLIC	??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ	; std::codecvt<wchar_t,char,_Mbstatet>::~codecvt<wchar_t,char,_Mbstatet>
PUBLIC	?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z ; std::codecvt<wchar_t,char,_Mbstatet>::do_in
PUBLIC	?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z ; std::codecvt<wchar_t,char,_Mbstatet>::do_out
PUBLIC	?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<wchar_t,char,_Mbstatet>::do_unshift
PUBLIC	?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ; std::codecvt<wchar_t,char,_Mbstatet>::do_length
PUBLIC	?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ ; std::codecvt<wchar_t,char,_Mbstatet>::do_always_noconv
PUBLIC	?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ ; std::codecvt<wchar_t,char,_Mbstatet>::do_max_length
PUBLIC	?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ ; std::codecvt<wchar_t,char,_Mbstatet>::do_encoding
PUBLIC	??_G?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z	; std::codecvt<wchar_t,char,_Mbstatet>::`scalar deleting destructor'
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	??_G?$ctype@_W@std@@MAEPAXI@Z			; std::ctype<wchar_t>::`scalar deleting destructor'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??$_Fputc@_W@std@@YA_N_WPAU_iobuf@@@Z		; std::_Fputc<wchar_t>
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
PUBLIC	??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Ipfx
PUBLIC	??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::basic_ifstream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::~basic_ifstream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::snextc
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
PUBLIC	??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Lock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?xsputn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@PA_W_J@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::imbue
PUBLIC	?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@AAEXXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Reset_back
PUBLIC	??_G?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
PUBLIC	??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ ; std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>::~istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
PUBLIC	?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy
PUBLIC	?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
PUBLIC	??$back_inserter@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@0@@Z ; std::back_inserter<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
PUBLIC	??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z ; std::copy<std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>,std::back_insert_iterator<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??1?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
PUBLIC	??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
PUBLIC	?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::CipherIsRandomAccess
PUBLIC	??_G?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`scalar deleting destructor'
PUBLIC	??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
PUBLIC	?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
PUBLIC	??0?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	??_G?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName
PUBLIC	??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::~SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
PUBLIC	??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
PUBLIC	?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone
PUBLIC	??_G?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<wchar_t,char,_Mbstatet> >
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
PUBLIC	??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * &>
PUBLIC	??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Refancy@PAD$0A@@std@@YAPADPAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >
PUBLIC	??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,SEterPackIndex *> >
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<SEterPackIndex *,void *> *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * const &>
PUBLIC	??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
PUBLIC	??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z	; std::_Atomic_reinterpret_as<int,unsigned int>
PUBLIC	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z	; std::_Atomic_reinterpret_as<long,unsigned int>
PUBLIC	??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
PUBLIC	??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ; std::operator!=<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
PUBLIC	??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::create_node
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::create_node
PUBLIC	??$?8V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ; std::operator==<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
PUBLIC	??$_Insertion_sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@QAV10@U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
PUBLIC	??$_Partition_by_median_guess_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::create_node
PUBLIC	??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$?0ABK$$Z$$V@?$pair@$$CBKK@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><unsigned long const &>
PUBLIC	??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<void> >
PUBLIC	??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ; std::_Pocma<std::allocator<wchar_t> >
PUBLIC	??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKK@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><std::tuple<unsigned long const &>,std::tuple<>,0>
PUBLIC	??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
PUBLIC	??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Pocs@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ; std::_Pocs<std::allocator<wchar_t> >
PUBLIC	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
PUBLIC	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
PUBLIC	??_EArraySink@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::ArraySink::`vector deleting destructor'
PUBLIC	??_EStringStore@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
PUBLIC	??_EStringSource@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
PUBLIC	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
PUBLIC	?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider`adjustor{4}'
PUBLIC	??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@O7AEPAXI@Z ; [thunk]:CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W7AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCA@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
PUBLIC	??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W7AEPAXI@Z ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
PUBLIC	?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BEPAVClonable@2@XZ ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone`adjustor{4}'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName`adjustor{4}'
PUBLIC	??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCA@AEPAXI@Z ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
PUBLIC	??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A	; CSingleton<CLZO>::ms_singleton
PUBLIC	??_7CEterPack@@6B@				; CEterPack::`vftable'
PUBLIC	??_7Exception@CryptoPP@@6B@			; CryptoPP::Exception::`vftable'
PUBLIC	??_7InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`vftable'
PUBLIC	??_7NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`vftable'
PUBLIC	??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
PUBLIC	??_7NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`vftable'
PUBLIC	??_C@_01GEODFPGF@?8@				; `string'
PUBLIC	??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ ; `string'
PUBLIC	??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@		; `string'
PUBLIC	??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ ; `string'
PUBLIC	__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
PUBLIC	??_R0?AVInvalidArgument@CryptoPP@@@8		; CryptoPP::InvalidArgument `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVException@CryptoPP@@@8			; CryptoPP::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	__TI3?AVInvalidArgument@CryptoPP@@
PUBLIC	__CTA3?AVInvalidArgument@CryptoPP@@
PUBLIC	__TI3?AVNotImplemented@CryptoPP@@
PUBLIC	__CTA3?AVNotImplemented@CryptoPP@@
PUBLIC	??_R0?AVNotImplemented@CryptoPP@@@8		; CryptoPP::NotImplemented `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ ; `string'
PUBLIC	??_C@_07CIFAGBMG@unknown@			; `string'
PUBLIC	??_C@_03BFHCIDFI@C?$CL?$CL@			; `string'
PUBLIC	??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ ; `string'
PUBLIC	??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5obje@ ; `string'
PUBLIC	??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ ; `string'
PUBLIC	??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
PUBLIC	??_7AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`vftable'
PUBLIC	??_C@_0L@IAABKFFP@?$CC?5not?5used@		; `string'
PUBLIC	??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ ; `string'
PUBLIC	__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
PUBLIC	??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7ArraySink@CryptoPP@@6BAlgorithm@1@@		; CryptoPP::ArraySink::`vftable'
PUBLIC	??_7ArraySink@CryptoPP@@6BWaitable@1@@		; CryptoPP::ArraySink::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_C@_0M@JMHEFFAI@InputBuffer@			; `string'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7Tiger@CryptoPP@@6B@				; CryptoPP::Tiger::`vftable'
PUBLIC	??_C@_05LIOENMIE@Tiger@				; `string'
PUBLIC	??_7SHA1@CryptoPP@@6B@				; CryptoPP::SHA1::`vftable'
PUBLIC	??_C@_05HJMENKNE@SHA?91@			; `string'
PUBLIC	??_7RIPEMD128@CryptoPP@@6B@			; CryptoPP::RIPEMD128::`vftable'
PUBLIC	??_C@_0L@DFIJCONE@RIPEMD?9128@			; `string'
PUBLIC	??_7Whirlpool@CryptoPP@@6B@			; CryptoPP::Whirlpool::`vftable'
PUBLIC	??_C@_09HLDHDDJL@Whirlpool@			; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_7codecvt_base@std@@6B@			; std::codecvt_base::`vftable'
PUBLIC	??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@		; std::codecvt<wchar_t,char,_Mbstatet>::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_C@_04FPOLKAEB@?4log@				; `string'
PUBLIC	??_C@_04BKIDJPM@?4err@				; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_09BOOFBHDC@Error?3?5?$CFs@		; `string'
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_C@_04OLDEJNOH@?4eix@				; `string'
PUBLIC	??_C@_04JJCMEEIK@?4epk@				; `string'
PUBLIC	??_C@_0CO@LCLPMBOA@EncryptIndex?3?5Cannot?5open?5pack?5@ ; `string'
PUBLIC	??_C@_0CB@BKLKOCID@EncryptIndex?3?5Cannot?5encrypt?$CB?5?$CF@ ; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0CP@NIHCOGLD@EncryptIndex?3?5Cannot?5open?5file?5@ ; `string'
PUBLIC	??_C@_0CH@FFDEAKBO@Encryptindex?3?5Cannot?5write?5to?5f@ ; `string'
PUBLIC	??_C@_0CA@IACKDODI@Cannot?5open?5pack?5index?5file?$CB?5?$CFs@ ; `string'
PUBLIC	??_C@_0CB@KNLDPAAC@Pack?5index?5file?5header?5error?$CB?5?$CF@ ; `string'
PUBLIC	??_C@_0CB@HPBCEBAA@Pack?5index?5file?5fourcc?5error?$CB?5?$CF@ ; `string'
PUBLIC	??_C@_0CC@KGHAJIDH@Pack?5index?5file?5version?5error?$CB?5@ ; `string'
PUBLIC	??_C@_0CO@JMMFBMPC@Pack?5index?5file?5size?5error?$CB?5?$CFs?0@ ; `string'
PUBLIC	??_C@_0BK@CFBHFFAK@Failed?5to?5decompress?5?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BH@CFAPLGOA@Failed?5to?5encrypt?5?3?5?$CFs@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_0BC@OILLCEPM@cannot?5decompress@		; `string'
PUBLIC	??_C@_0EE@JIDJMBKL@EterPack?3?3Put?5?3?5Cannot?5put?5to?5e@ ; `string'
PUBLIC	??_C@_0BH@IGHIDEHN@Overwrite?$FLtype?3?$CFu?$FN?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BD@JEPAOIH@Write?$FLtype?3?$CFu?$FN?5?$CFs?6@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0EC@IGPMDEEF@SYSERR?3?5WriteNewData?$CI?$CJ?3?5CRITICA@ ; `string'
PUBLIC	??_C@_0P@MDGHMGJK@Unref?5File?5?$CFs?6@		; `string'
PUBLIC	??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vftable'
PUBLIC	??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
PUBLIC	??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
PUBLIC	??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
PUBLIC	??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
PUBLIC	??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
PUBLIC	??_C@_0CA@GEOIKNCG@NAME_COLLISION?3?5OLD?3?5?$CFs?5NEW?3?5?$CFs@ ; `string'
PUBLIC	??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0BE@NDOICOBI@OutputStringPointer@		; `string'
PUBLIC	??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ ; `string'
PUBLIC	??_R0?AVConstByteArrayParameter@CryptoPP@@@8	; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_C@_09LKKJKGIK@Panama?9BE@			; `string'
PUBLIC	??_C@_09LADHILIA@Panama?9LE@			; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<wchar_t,char,_Mbstatet> >::_Psave
PUBLIC	??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CEterPack@@6B@				; CEterPack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEterPack@@@8				; CEterPack `RTTI Type Descriptor'
PUBLIC	??_R3CEterPack@@8				; CEterPack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEterPack@@8				; CEterPack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEterPack@@8			; CEterPack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRandomNumberGenerator@CryptoPP@@@8	; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
PUBLIC	??_R3RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8	; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAlgorithm@CryptoPP@@@8			; CryptoPP::Algorithm `RTTI Type Descriptor'
PUBLIC	??_R3Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVClonable@CryptoPP@@@8			; CryptoPP::Clonable `RTTI Type Descriptor'
PUBLIC	??_R3Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Base Class Array'
PUBLIC	??_R0?AVBufferedTransformation@CryptoPP@@@8	; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVWaitable@CryptoPP@@@8			; CryptoPP::Waitable `RTTI Type Descriptor'
PUBLIC	??_R3Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@CryptoPP@@6B@			; CryptoPP::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CryptoPP@@8		; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8	; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
PUBLIC	??_R3NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotImplemented@CryptoPP@@8	; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNameValuePairs@CryptoPP@@@8		; CryptoPP::NameValuePairs `RTTI Type Descriptor'
PUBLIC	??_R3NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8	; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimpleKeyingInterface@CryptoPP@@@8	; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
PUBLIC	??_R3SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8	; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVStreamTransformation@CryptoPP@@@8	; CryptoPP::StreamTransformation `RTTI Type Descriptor'
PUBLIC	??_R3StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVHashTransformation@CryptoPP@@@8		; CryptoPP::HashTransformation `RTTI Type Descriptor'
PUBLIC	??_R3HashTransformation@CryptoPP@@8		; CryptoPP::HashTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2HashTransformation@CryptoPP@@8		; CryptoPP::HashTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@HashTransformation@CryptoPP@@8	; CryptoPP::HashTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSymmetricCipher@CryptoPP@@@8		; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
PUBLIC	??_R3SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8	; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R13?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R17?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R0?AVStore@CryptoPP@@@8			; CryptoPP::Store `RTTI Type Descriptor'
PUBLIC	??_R3Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Store@CryptoPP@@8			; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSink@CryptoPP@@@8			; CryptoPP::Sink `RTTI Type Descriptor'
PUBLIC	??_R3Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sink@CryptoPP@@8			; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
PUBLIC	??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAlgorithmParametersBase@CryptoPP@@@8	; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
PUBLIC	??_R3AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
PUBLIC	??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFilter@CryptoPP@@@8			; CryptoPP::Filter `RTTI Type Descriptor'
PUBLIC	??_R3Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Filter@CryptoPP@@8		; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AVNotCopyable@CryptoPP@@@8		; CryptoPP::NotCopyable `RTTI Type Descriptor'
PUBLIC	??_R3NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4ArraySink@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::ArraySink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArraySink@CryptoPP@@@8			; CryptoPP::ArraySink `RTTI Type Descriptor'
PUBLIC	??_R3ArraySink@CryptoPP@@8			; CryptoPP::ArraySink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArraySink@CryptoPP@@8			; CryptoPP::ArraySink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArraySink@CryptoPP@@8		; CryptoPP::ArraySink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArraySink@CryptoPP@@6BWaitable@1@@		; CryptoPP::ArraySink::`RTTI Complete Object Locator'
PUBLIC	??_R4StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringStore@CryptoPP@@@8		; CryptoPP::StringStore `RTTI Type Descriptor'
PUBLIC	??_R3StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringStore@CryptoPP@@8		; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSource@CryptoPP@@@8			; CryptoPP::Source `RTTI Type Descriptor'
PUBLIC	??_R3Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Source@CryptoPP@@8		; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringSource@CryptoPP@@@8		; CryptoPP::StringSource `RTTI Type Descriptor'
PUBLIC	??_R3StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringSource@CryptoPP@@8		; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
PUBLIC	??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
PUBLIC	??_R4StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
PUBLIC	??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8	; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Tiger@CryptoPP@@6B@			; CryptoPP::Tiger::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiger@CryptoPP@@@8			; CryptoPP::Tiger `RTTI Type Descriptor'
PUBLIC	??_R3Tiger@CryptoPP@@8				; CryptoPP::Tiger::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Tiger@CryptoPP@@8				; CryptoPP::Tiger::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Tiger@CryptoPP@@8			; CryptoPP::Tiger::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R4SHA1@CryptoPP@@6B@				; CryptoPP::SHA1::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSHA1@CryptoPP@@@8			; CryptoPP::SHA1 `RTTI Type Descriptor'
PUBLIC	??_R3SHA1@CryptoPP@@8				; CryptoPP::SHA1::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SHA1@CryptoPP@@8				; CryptoPP::SHA1::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SHA1@CryptoPP@@8			; CryptoPP::SHA1::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R4RIPEMD128@CryptoPP@@6B@			; CryptoPP::RIPEMD128::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRIPEMD128@CryptoPP@@@8			; CryptoPP::RIPEMD128 `RTTI Type Descriptor'
PUBLIC	??_R3RIPEMD128@CryptoPP@@8			; CryptoPP::RIPEMD128::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RIPEMD128@CryptoPP@@8			; CryptoPP::RIPEMD128::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RIPEMD128@CryptoPP@@8		; CryptoPP::RIPEMD128::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Base Class Array'
PUBLIC	??_R4Whirlpool@CryptoPP@@6B@			; CryptoPP::Whirlpool::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWhirlpool@CryptoPP@@@8			; CryptoPP::Whirlpool `RTTI Type Descriptor'
PUBLIC	??_R3Whirlpool@CryptoPP@@8			; CryptoPP::Whirlpool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Whirlpool@CryptoPP@@8			; CryptoPP::Whirlpool::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Whirlpool@CryptoPP@@8		; CryptoPP::Whirlpool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
PUBLIC	??_R0?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4codecvt_base@std@@6B@			; std::codecvt_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcodecvt_base@std@@@8			; std::codecvt_base `RTTI Type Descriptor'
PUBLIC	??_R3codecvt_base@std@@8			; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2codecvt_base@std@@8			; std::codecvt_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@codecvt_base@std@@8		; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$codecvt@_WDU_Mbstatet@@@std@@6B@		; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$codecvt@_WDU_Mbstatet@@@std@@@8	; std::codecvt<wchar_t,char,_Mbstatet> `RTTI Type Descriptor'
PUBLIC	??_R3?$codecvt@_WDU_Mbstatet@@@std@@8		; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$codecvt@_WDU_Mbstatet@@@std@@8		; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$codecvt@_WDU_Mbstatet@@@std@@8	; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
PUBLIC	??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EIB@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (1153,-1,0,64)'
PUBLIC	??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
PUBLIC	??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<32,0,32> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Array'
PUBLIC	??_R1EIB@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (1153,-1,0,64)'
PUBLIC	??_R17?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (8,-1,0,77)'
PUBLIC	??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
PUBLIC	??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (32,-1,0,77)'
PUBLIC	??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (32,-1,0,73)'
PUBLIC	??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (32,-1,0,73)'
PUBLIC	??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (1185,-1,0,73)'
PUBLIC	??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (1185,-1,0,73)'
PUBLIC	??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
PUBLIC	??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41efffffffe00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_tolower:PROC
EXTRN	__errno:PROC
EXTRN	_strchr:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	_fgetwc:PROC
EXTRN	_fputwc:PROC
EXTRN	_ungetwc:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fgetc:PROC
EXTRN	_fgetpos:PROC
EXTRN	_fopen:PROC
EXTRN	_fsetpos:PROC
EXTRN	__fseeki64:PROC
EXTRN	_fwrite:PROC
EXTRN	_setvbuf:PROC
EXTRN	_ungetc:PROC
EXTRN	__lock_file:PROC
EXTRN	__unlock_file:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_exit:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	___std_type_info_compare:PROC
EXTRN	___std_type_info_name:PROC
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??0CLZObject@@QAE@XZ:PROC			; CLZObject::CLZObject
EXTRN	??1CLZObject@@QAE@XZ:PROC			; CLZObject::~CLZObject
EXTRN	?Clear@CLZObject@@QAEXXZ:PROC			; CLZObject::Clear
EXTRN	?GetSize@CLZObject@@QAEKXZ:PROC			; CLZObject::GetSize
EXTRN	?AllocBuffer@CLZObject@@QAEXK@Z:PROC		; CLZObject::AllocBuffer
EXTRN	?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z:PROC ; CLZO::CompressMemory
EXTRN	?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z:PROC ; CLZO::CompressEncryptedMemory
EXTRN	?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z:PROC ; CLZO::Decompress
EXTRN	??0CFileBase@@QAE@XZ:PROC			; CFileBase::CFileBase
EXTRN	??1CFileBase@@UAE@XZ:PROC			; CFileBase::~CFileBase
EXTRN	?Destroy@CFileBase@@QAEXXZ:PROC			; CFileBase::Destroy
EXTRN	?Close@CFileBase@@QAEXXZ:PROC			; CFileBase::Close
EXTRN	?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z:PROC	; CFileBase::Create
EXTRN	?Size@CFileBase@@QAEKXZ:PROC			; CFileBase::Size
EXTRN	?Seek@CFileBase@@QAEXK@Z:PROC			; CFileBase::Seek
EXTRN	?Write@CFileBase@@UAEHPBXH@Z:PROC		; CFileBase::Write
EXTRN	?Read@CFileBase@@QAEHPAXH@Z:PROC		; CFileBase::Read
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Create@CMappedFile@@QAEHPBDPAPBXHH@Z:PROC	; CMappedFile::Create
EXTRN	?Destroy@CMappedFile@@QAEXXZ:PROC		; CMappedFile::Destroy
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?BindLZObject@CMappedFile@@QAEXPAVCLZObject@@@Z:PROC ; CMappedFile::BindLZObject
EXTRN	?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z:PROC ; CMappedFile::BindLZObjectWithBufferedSize
EXTRN	?AppendDataBlock@CMappedFile@@QAEPAEPBXK@Z:PROC	; CMappedFile::AppendDataBlock
EXTRN	??_ECEterPack@@UAEPAXI@Z:PROC			; CEterPack::`vector deleting destructor'
EXTRN	??_EException@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Exception::`vector deleting destructor'
EXTRN	??_EInvalidArgument@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::InvalidArgument::`vector deleting destructor'
EXTRN	??_ENotImplemented@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NotImplemented::`vector deleting destructor'
EXTRN	??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vector deleting destructor'
EXTRN	??_ENameValuePairs@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NameValuePairs::`vector deleting destructor'
EXTRN	??0Algorithm@CryptoPP@@QAE@_N@Z:PROC		; CryptoPP::Algorithm::Algorithm
EXTRN	?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKey
EXTRN	?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV
EXTRN	?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z:PROC ; CryptoPP::SimpleKeyingInterface::GetNextIV
EXTRN	?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z:PROC ; CryptoPP::StreamTransformation::ProcessLastBlock
EXTRN	?TruncatedVerify@HashTransformation@CryptoPP@@UAE_NPBEI@Z:PROC ; CryptoPP::HashTransformation::TruncatedVerify
EXTRN	?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateByte
EXTRN	?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateBit
EXTRN	?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateWord32
EXTRN	?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateIntoBufferedTransformation
EXTRN	?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z:PROC ; CryptoPP::RandomNumberGenerator::DiscardBytes
EXTRN	?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::GetMaxWaitObjectCount
EXTRN	?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z:PROC ; CryptoPP::BufferedTransformation::GetWaitObjects
EXTRN	?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::BufferedTransformation::Initialize
EXTRN	?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z:PROC ; CryptoPP::BufferedTransformation::Flush
EXTRN	?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::BufferedTransformation::MessageSeriesEnd
EXTRN	?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::MaxRetrievable
EXTRN	?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyRetrievable
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z:PROC ; CryptoPP::BufferedTransformation::Skip
EXTRN	?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::TotalBytesRetrievable
EXTRN	?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::NumberOfMessages
EXTRN	?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyMessages
EXTRN	?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ:PROC ; CryptoPP::BufferedTransformation::GetNextMessage
EXTRN	?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z:PROC ; CryptoPP::BufferedTransformation::SkipMessages
EXTRN	?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ:PROC ; CryptoPP::BufferedTransformation::SkipAll
EXTRN	?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferMessagesTo2
EXTRN	?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferAllTo2
EXTRN	?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z:PROC ; CryptoPP::BufferedTransformation::ChannelCreatePutSpace
EXTRN	?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPut2
EXTRN	?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPutModifiable2
EXTRN	?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z:PROC ; CryptoPP::BufferedTransformation::ChannelFlush
EXTRN	?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelMessageSeriesEnd
EXTRN	?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CryptoPP::BufferedTransformation::SetRetrievalChannel
EXTRN	?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:PROC ; CryptoPP::BufferedTransformation::Attach
EXTRN	?AlignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::AlignedAllocate
EXTRN	?AlignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::AlignedDeallocate
EXTRN	?UnalignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::UnalignedAllocate
EXTRN	?UnalignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::UnalignedDeallocate
EXTRN	?GetNextMessage@Store@CryptoPP@@UAE_NXZ:PROC	; CryptoPP::Store::GetNextMessage
EXTRN	??1EterPackPolicy_CSHybridCrypt@@QAE@XZ:PROC	; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
EXTRN	?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
EXTRN	?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::EncryptMemory
EXTRN	?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::DecryptMemory
EXTRN	?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z:PROC ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
EXTRN	?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z:PROC ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
EXTRN	?AssignIntToInteger@CryptoPP@@YA_NABVtype_info@@PAXPBX@Z:PROC ; CryptoPP::AssignIntToInteger
EXTRN	??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vector deleting destructor'
EXTRN	??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::`vector deleting destructor'
EXTRN	??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vector deleting destructor'
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@XZ:PROC	; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z:PROC ; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z:PROC ; CryptoPP::Filter::Filter
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z:PROC ; CryptoPP::Filter::Detach
EXTRN	?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::TransferTo2
EXTRN	?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::CopyRangeTo2
EXTRN	?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::Filter::Initialize
EXTRN	?Flush@Filter@CryptoPP@@UAE_N_NH0@Z:PROC	; CryptoPP::Filter::Flush
EXTRN	?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::Filter::MessageSeriesEnd
EXTRN	?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::NewDefaultAttachment
EXTRN	??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z:PROC ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
EXTRN	??0HashFilter@CryptoPP@@QAE@AAVHashTransformation@1@PAVBufferedTransformation@1@_NHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z:PROC ; CryptoPP::HashFilter::HashFilter
EXTRN	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
EXTRN	?IsolatedInitialize@ArraySink@CryptoPP@@UAEXABVNameValuePairs@2@@Z:PROC ; CryptoPP::ArraySink::IsolatedInitialize
EXTRN	?CreatePutSpace@ArraySink@CryptoPP@@UAEPAEAAI@Z:PROC ; CryptoPP::ArraySink::CreatePutSpace
EXTRN	?Put2@ArraySink@CryptoPP@@UAEIPBEIH_N@Z:PROC	; CryptoPP::ArraySink::Put2
EXTRN	??_EArraySink@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::ArraySink::`vector deleting destructor'
EXTRN	?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::TransferTo2
EXTRN	?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::CopyRangeTo2
EXTRN	?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z:PROC ; CryptoPP::StringStore::StoreInitialize
EXTRN	??_EStringStore@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringStore::`vector deleting destructor'
EXTRN	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
EXTRN	??_EStringSource@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringSource::`vector deleting destructor'
EXTRN	?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::GenerateBlock
EXTRN	?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::ProcessData
EXTRN	?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::Resynchronize
EXTRN	?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::Seek
EXTRN	?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::UncheckedSetKey
EXTRN	?Update@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::Update
EXTRN	?CreateUpdateSpace@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::CreateUpdateSpace
EXTRN	?Restart@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ:PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::Restart
EXTRN	?HashMultipleBlocks@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@MAEIPB_KI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::HashMultipleBlocks
EXTRN	?Update@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::Update
EXTRN	?CreateUpdateSpace@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::CreateUpdateSpace
EXTRN	?Restart@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ:PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::Restart
EXTRN	?TruncatedFinal@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::TruncatedFinal
EXTRN	?HashMultipleBlocks@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@MAEIPBII@Z:PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::HashMultipleBlocks
EXTRN	?AlgorithmProvider@Tiger@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CryptoPP::Tiger::AlgorithmProvider
EXTRN	?InitState@Tiger@CryptoPP@@SAXPA_K@Z:PROC	; CryptoPP::Tiger::InitState
EXTRN	?Transform@Tiger@CryptoPP@@SAXPA_KPB_K@Z:PROC	; CryptoPP::Tiger::Transform
EXTRN	?TruncatedFinal@Tiger@CryptoPP@@UAEXPAEI@Z:PROC	; CryptoPP::Tiger::TruncatedFinal
EXTRN	??_ETiger@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Tiger::`vector deleting destructor'
EXTRN	?InitState@SHA1@CryptoPP@@SAXPAI@Z:PROC		; CryptoPP::SHA1::InitState
EXTRN	?Transform@SHA1@CryptoPP@@SAXPAIPBI@Z:PROC	; CryptoPP::SHA1::Transform
EXTRN	?AlgorithmProvider@SHA1@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CryptoPP::SHA1::AlgorithmProvider
EXTRN	?HashMultipleBlocks@SHA1@CryptoPP@@MAEIPBII@Z:PROC ; CryptoPP::SHA1::HashMultipleBlocks
EXTRN	??_ESHA1@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::SHA1::`vector deleting destructor'
EXTRN	?InitState@RIPEMD128@CryptoPP@@SAXPAI@Z:PROC	; CryptoPP::RIPEMD128::InitState
EXTRN	?Transform@RIPEMD128@CryptoPP@@SAXPAIPBI@Z:PROC	; CryptoPP::RIPEMD128::Transform
EXTRN	??_ERIPEMD128@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::RIPEMD128::`vector deleting destructor'
EXTRN	?AlgorithmProvider@Whirlpool@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CryptoPP::Whirlpool::AlgorithmProvider
EXTRN	?InitState@Whirlpool@CryptoPP@@SAXPA_K@Z:PROC	; CryptoPP::Whirlpool::InitState
EXTRN	?Transform@Whirlpool@CryptoPP@@SAXPA_KPB_K@Z:PROC ; CryptoPP::Whirlpool::Transform
EXTRN	?TruncatedFinal@Whirlpool@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::Whirlpool::TruncatedFinal
EXTRN	??_EWhirlpool@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Whirlpool::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Getctype:PROC
EXTRN	__Getcvt:PROC
EXTRN	__Mbrtowc:PROC
EXTRN	__Wcrtomb:PROC
EXTRN	__Getwctype:PROC
EXTRN	__Getwctypes:PROC
EXTRN	__Towlower:PROC
EXTRN	__Towupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ecodecvt_base@std@@UAEPAXI@Z:PROC		; std::codecvt_base::`vector deleting destructor'
EXTRN	??_E?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z:PROC ; std::codecvt<wchar_t,char,_Mbstatet>::`vector deleting destructor'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	?AlgorithmProvider@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::AlgorithmProvider
EXTRN	?CipherSetKey@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXABVNameValuePairs@2@PBEI@Z:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::CipherSetKey
EXTRN	?OperateKeystream@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::OperateKeystream
EXTRN	?CipherResynchronize@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXPAEPBEI@Z:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::CipherResynchronize
EXTRN	?GetAlignment@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBEIXZ:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::GetAlignment
EXTRN	??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z:PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vector deleting destructor'
EXTRN	??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
EXTRN	??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dtoui3:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:BYTE ; __type_info_root_node
EXTRN	?ms_dwFourCC@CLZObject@@2KA:DWORD		; CLZObject::ms_dwFourCC
EXTRN	?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B:BYTE ; CryptoPP::DEFAULT_CHANNEL
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$codecvt@_WDU_Mbstatet@@@std@@2V0locale@2@A:DWORD ; std::codecvt<wchar_t,char,_Mbstatet>::id
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
EXTRN	?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE ; std::wcout
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A DD 01H DUP (?) ; CSingleton<CLZO>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT
?s_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4V2@A DB 038H DUP (?) ; `CMakePackLog::GetSingleton'::`2'::s_kMakePackLog
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA DD 01H DUP (?) ; `CMakePackLog::GetSingleton'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA
_BSS	SEGMENT
?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA DB 0105H DUP (?) ; `CEterPack::FindIndex'::`2'::tmpFilename
_BSS	ENDS
;	COMDAT ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A
_BSS	SEGMENT
?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A DB 0c8H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::tiger
_BSS	ENDS
;	COMDAT ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA DD 01H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A
_BSS	SEGMENT
?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A DB 0c0H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::sha1
_BSS	ENDS
;	COMDAT ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
_BSS	SEGMENT
?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA DD 01H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::$TSS1
_BSS	ENDS
;	COMDAT ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A
_BSS	SEGMENT
?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A DB 0c0H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::ripemd128
_BSS	ENDS
;	COMDAT ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
_BSS	SEGMENT
?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA DD 01H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::$TSS2
_BSS	ENDS
;	COMDAT ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A
_BSS	SEGMENT
?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A DB 0c8H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::whirlpool
_BSS	ENDS
;	COMDAT ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
_BSS	SEGMENT
?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA DD 01H DUP (?) ; `CEterPack::__CreateFileNameKey_Panama'::`2'::$TSS3
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A DD 02H DUP (?) ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<wchar_t,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
	DD	020H
	DD	00H
	DD	FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@ DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	012H
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@'
	DB	'V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A'
	DB	'@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractP'
	DB	'olicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetri'
	DB	'cCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@Cryp'
	DB	'toPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@'
	DB	'@$0A@@CryptoPP@@@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	011H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$Conc'
	DB	'retePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOr'
	DB	'der@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemp'
	DB	'late@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@Cr'
	DB	'yptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstr'
	DB	'actPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4By'
	DB	'teOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCiphe'
	DB	'rInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@'
	DB	'CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	013H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8 DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	014H
	DD	FLAT:??_R2?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$Pa'
	DB	'namaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@Cry'
	DB	'ptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicy'
	DB	'Holder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCiph'
	DB	'er@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@'
	DB	'@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@'
	DB	'@CryptoPP@@@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	020H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
	DD	00H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (1185,-1,0,73)'
	DD	00H
	DD	04a1H
	DD	0ffffffffH
	DD	00H
	DD	049H
	DD	FLAT:??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (1185,-1,0,73)'
	DD	01H
	DD	04a1H
	DD	0ffffffffH
	DD	00H
	DD	049H
	DD	FLAT:??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (32,-1,0,73)'
	DD	00H
	DD	020H
	DD	0ffffffffH
	DD	00H
	DD	049H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (32,-1,0,73)'
	DD	01H
	DD	020H
	DD	0ffffffffH
	DD	00H
	DD	049H
	DD	FLAT:??_R3?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (32,-1,0,77)'
	DD	05H
	DD	020H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EN@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1CA@?0A@EJ@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1EKB@?0A@EJ@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$Enum'
	DB	'ToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$Add'
	DB	'itiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAb'
	DB	'stractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAddi'
	DB	'tiveCipherAbstractPolicy@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD 00H ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@Cr'
	DB	'yptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (8,-1,0,77)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1EIB@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EIB@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (1153,-1,0,64)'
	DD	00H
	DD	0481H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 DD 00H	; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedKeyLength<32,0,32> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<32,0,32>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoP'
	DB	'P@@$0A@@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1EIB@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EIB@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AU?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (1153,-1,0,64)'
	DD	01H
	DD	0481H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1EIB@?0A@EA@?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1EIB@?0A@EA@?$FixedKeyLength@$0CA@$0A@$0CA@@CryptoPP@@8
	DD	FLAT:??_R17?0A@EN@?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@Crypt'
	DB	'oPP@@$0A@@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
rdata$r	SEGMENT
??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD 00H ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$codecvt@_WDU_Mbstatet@@@std@@8 DD FLAT:??_R0?AV?$codecvt@_WDU_Mbstatet@@@std@@@8 ; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R2?$codecvt@_WDU_Mbstatet@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$codecvt@_WDU_Mbstatet@@@std@@8 ; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@codecvt_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R3?$codecvt@_WDU_Mbstatet@@@std@@8 DD 00H		; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@_WDU_Mbstatet@@@std@@@8
data$r	SEGMENT
??_R0?AV?$codecvt@_WDU_Mbstatet@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::codecvt<wchar_t,char,_Mbstatet> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$codecvt@_WDU_Mbstatet@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$codecvt@_WDU_Mbstatet@@@std@@6B@
rdata$r	SEGMENT
??_R4?$codecvt@_WDU_Mbstatet@@@std@@6B@ DD 00H		; std::codecvt<wchar_t,char,_Mbstatet>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$codecvt@_WDU_Mbstatet@@@std@@@8
	DD	FLAT:??_R3?$codecvt@_WDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@codecvt_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@codecvt_base@std@@8 DD FLAT:??_R0?AVcodecvt_base@std@@@8 ; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2codecvt_base@std@@8
rdata$r	SEGMENT
??_R2codecvt_base@std@@8 DD FLAT:??_R1A@?0A@EA@codecvt_base@std@@8 ; std::codecvt_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3codecvt_base@std@@8
rdata$r	SEGMENT
??_R3codecvt_base@std@@8 DD 00H				; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
data$r	SEGMENT
??_R0?AVcodecvt_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::codecvt_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcodecvt_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4codecvt_base@std@@6B@
rdata$r	SEGMENT
??_R4codecvt_base@std@@6B@ DD 00H			; std::codecvt_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcodecvt_base@std@@@8
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCiphe'
	DB	'rAbstractPolicy@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@'
	DB	'@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4By'
	DB	'teOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@C'
	DB	'ryptoPP@@VWhirlpool@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl'
	DB	'@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@Cr'
	DB	'yptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2'
	DB	'@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	08H
	DD	FLAT:??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4'
	DB	'ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@'
	DB	'$0A@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Whirlpool@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Whirlpool@CryptoPP@@8 DD FLAT:??_R0?AVWhirlpool@CryptoPP@@@8 ; CryptoPP::Whirlpool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Whirlpool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Whirlpool@CryptoPP@@8
rdata$r	SEGMENT
??_R2Whirlpool@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Whirlpool@CryptoPP@@8 ; CryptoPP::Whirlpool::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Whirlpool@CryptoPP@@8
rdata$r	SEGMENT
??_R3Whirlpool@CryptoPP@@8 DD 00H			; CryptoPP::Whirlpool::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	09H
	DD	FLAT:??_R2Whirlpool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWhirlpool@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVWhirlpool@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Whirlpool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWhirlpool@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4Whirlpool@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Whirlpool@CryptoPP@@6B@ DD 00H			; CryptoPP::Whirlpool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWhirlpool@CryptoPP@@@8
	DD	FLAT:??_R3Whirlpool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4Byt'
	DB	'eOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@C'
	DB	'ryptoPP@@VRIPEMD128@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl'
	DB	'@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@Cr'
	DB	'yptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2'
	DB	'@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	08H
	DD	FLAT:??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4B'
	DB	'yteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@'
	DB	'$0A@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RIPEMD128@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RIPEMD128@CryptoPP@@8 DD FLAT:??_R0?AVRIPEMD128@CryptoPP@@@8 ; CryptoPP::RIPEMD128::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RIPEMD128@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RIPEMD128@CryptoPP@@8
rdata$r	SEGMENT
??_R2RIPEMD128@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RIPEMD128@CryptoPP@@8 ; CryptoPP::RIPEMD128::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RIPEMD128@CryptoPP@@8
rdata$r	SEGMENT
??_R3RIPEMD128@CryptoPP@@8 DD 00H			; CryptoPP::RIPEMD128::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	09H
	DD	FLAT:??_R2RIPEMD128@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRIPEMD128@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVRIPEMD128@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RIPEMD128 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRIPEMD128@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4RIPEMD128@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4RIPEMD128@CryptoPP@@6B@ DD 00H			; CryptoPP::RIPEMD128::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRIPEMD128@CryptoPP@@@8
	DD	FLAT:??_R3RIPEMD128@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@'
	DB	'$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@'
	DB	'$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4Byt'
	DB	'eOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@Cr'
	DB	'yptoPP@@VSHA1@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$I'
	DB	'teratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP'
	DB	'@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@'
	DB	'@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	08H
	DD	FLAT:??_R2?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4B'
	DB	'yteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@C'
	DB	'ryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SHA1@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SHA1@CryptoPP@@8 DD FLAT:??_R0?AVSHA1@CryptoPP@@@8 ; CryptoPP::SHA1::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SHA1@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SHA1@CryptoPP@@8
rdata$r	SEGMENT
??_R2SHA1@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SHA1@CryptoPP@@8 ; CryptoPP::SHA1::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3SHA1@CryptoPP@@8
rdata$r	SEGMENT
??_R3SHA1@CryptoPP@@8 DD 00H				; CryptoPP::SHA1::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	09H
	DD	FLAT:??_R2SHA1@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSHA1@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVSHA1@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::SHA1 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSHA1@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4SHA1@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4SHA1@CryptoPP@@6B@ DD 00H				; CryptoPP::SHA1::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSHA1@CryptoPP@@@8
	DD	FLAT:??_R3SHA1@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@'
	DB	'@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@@8 ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4By'
	DB	'teOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@'
	DB	'CryptoPP@@VTiger@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$'
	DB	'IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@Crypt'
	DB	'oPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@Crypt'
	DB	'oPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	08H
	DD	FLAT:??_R2?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4'
	DB	'ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A'
	DB	'@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@@8 ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Tiger@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Tiger@CryptoPP@@8 DD FLAT:??_R0?AVTiger@CryptoPP@@@8 ; CryptoPP::Tiger::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Tiger@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Tiger@CryptoPP@@8
rdata$r	SEGMENT
??_R2Tiger@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Tiger@CryptoPP@@8 ; CryptoPP::Tiger::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Tiger@CryptoPP@@8
rdata$r	SEGMENT
??_R3Tiger@CryptoPP@@8 DD 00H				; CryptoPP::Tiger::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	09H
	DD	FLAT:??_R2Tiger@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiger@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVTiger@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Tiger `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiger@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4Tiger@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Tiger@CryptoPP@@6B@ DD 00H				; CryptoPP::Tiger::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiger@CryptoPP@@@8
	DD	FLAT:??_R3Tiger@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashBase@IVHashTransformation@CryptoPP@@@C'
	DB	'ryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@'
	DB	'CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	02H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R17?0A@EC@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAd'
	DB	'ditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@Cryp'
	DB	'toPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy'
	DB	'@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8 DD 00H	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUAdditiveCipherAbstractPolicy@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringSource@CryptoPP@@8 DD FLAT:??_R0?AVStringSource@CryptoPP@@@8 ; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringSource@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringSource@CryptoPP@@8 ; CryptoPP::StringSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringSource@CryptoPP@@8 DD 00H			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringSource@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVStringSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringSource@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Source@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Source@CryptoPP@@8 DD FLAT:??_R0?AVSource@CryptoPP@@@8 ; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Source@CryptoPP@@8
rdata$r	SEGMENT
??_R2Source@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8 ; CryptoPP::Source::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Source@CryptoPP@@8
rdata$r	SEGMENT
??_R3Source@CryptoPP@@8 DD 00H				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSource@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Source `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSource@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringStore@CryptoPP@@8 DD FLAT:??_R0?AVStringStore@CryptoPP@@@8 ; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringStore@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringStore@CryptoPP@@8 ; CryptoPP::StringStore::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringStore@CryptoPP@@8 DD 00H			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringStore@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVStringStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringStore `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringStore@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ArraySink@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4ArraySink@CryptoPP@@6BWaitable@1@@ DD 00H		; CryptoPP::ArraySink::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVArraySink@CryptoPP@@@8
	DD	FLAT:??_R3ArraySink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArraySink@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArraySink@CryptoPP@@8 DD FLAT:??_R0?AVArraySink@CryptoPP@@@8 ; CryptoPP::ArraySink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArraySink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ArraySink@CryptoPP@@8
rdata$r	SEGMENT
??_R2ArraySink@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ArraySink@CryptoPP@@8 ; CryptoPP::ArraySink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3ArraySink@CryptoPP@@8
rdata$r	SEGMENT
??_R3ArraySink@CryptoPP@@8 DD 00H			; CryptoPP::ArraySink::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2ArraySink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArraySink@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVArraySink@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ArraySink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArraySink@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4ArraySink@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4ArraySink@CryptoPP@@6BAlgorithm@1@@ DD 00H		; CryptoPP::ArraySink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArraySink@CryptoPP@@@8
	DD	FLAT:??_R3ArraySink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits'
	DB	'@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotCopyable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotCopyable@CryptoPP@@8 DD 00H			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNotCopyable@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNotCopyable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotCopyable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotCopyable@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Filter@CryptoPP@@8 DD FLAT:??_R0?AVFilter@CryptoPP@@@8 ; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R2Filter@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8 ; CryptoPP::Filter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R3Filter@CryptoPP@@8 DD 00H				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFilter@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVFilter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Filter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFilter@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmParametersTemplate@VConstByteArrayParamet'
	DB	'er@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3AlgorithmParametersBase@CryptoPP@@8 DD 00H		; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithmParametersBase@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4AlgorithmParametersBase@CryptoPP@@6B@ DD 00H	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD 00H	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sink@CryptoPP@@8 DD FLAT:??_R0?AVSink@CryptoPP@@@8 ; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R2Sink@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8 ; CryptoPP::Sink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R3Sink@CryptoPP@@8 DD 00H				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSink@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVSink@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Sink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSink@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@'
	DB	'CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransform'
	DB	'ation@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Store@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Store@CryptoPP@@8 DD FLAT:??_R0?AVStore@CryptoPP@@@8 ; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Store@CryptoPP@@8
rdata$r	SEGMENT
??_R2Store@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8 ; CryptoPP::Store::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Store@CryptoPP@@8
rdata$r	SEGMENT
??_R3Store@CryptoPP@@8 DD 00H				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStore@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Store `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStore@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 DD FLAT:??_R0?AVSymmetricCipher@CryptoPP@@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2SymmetricCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3SymmetricCipher@CryptoPP@@8 DD 00H			; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSymmetricCipher@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVSymmetricCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSymmetricCipher@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@HashTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@HashTransformation@CryptoPP@@8 DD FLAT:??_R0?AVHashTransformation@CryptoPP@@@8 ; CryptoPP::HashTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3HashTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2HashTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2HashTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@HashTransformation@CryptoPP@@8 ; CryptoPP::HashTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3HashTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3HashTransformation@CryptoPP@@8 DD 00H		; CryptoPP::HashTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2HashTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVHashTransformation@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVHashTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::HashTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVHashTransformation@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2StreamTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3StreamTransformation@CryptoPP@@8 DD 00H		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStreamTransformation@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVStreamTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StreamTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStreamTransformation@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R2SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R3SimpleKeyingInterface@CryptoPP@@8 DD 00H		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleKeyingInterface@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleKeyingInterface@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3NameValuePairs@CryptoPP@@8 DD 00H			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NameValuePairs@CryptoPP@@6B@ DD 00H		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 DD FLAT:??_R0?AVNotImplemented@CryptoPP@@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotImplemented@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotImplemented@CryptoPP@@8 DD 00H			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4NotImplemented@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NotImplemented@CryptoPP@@6B@ DD 00H		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 DD FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R2InvalidArgument@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R3InvalidArgument@CryptoPP@@8 DD 00H			; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidArgument@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InvalidArgument@CryptoPP@@6B@ DD 00H		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CryptoPP@@8 DD FLAT:??_R0?AVException@CryptoPP@@@8 ; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R2Exception@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8 ; CryptoPP::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R3Exception@CryptoPP@@8 DD 00H			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Exception@CryptoPP@@6B@ DD 00H			; CryptoPP::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Waitable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Waitable@CryptoPP@@8 ; CryptoPP::Waitable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Waitable@CryptoPP@@8 DD 00H			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWaitable@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVWaitable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Waitable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWaitable@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBufferedTransformation@CryptoPP@@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BufferedTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BufferedTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferedTransformation@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVBufferedTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferedTransformation@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R2Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Clonable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8 ; CryptoPP::Clonable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Clonable@CryptoPP@@8 DD 00H			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVClonable@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVClonable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Clonable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClonable@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R2Algorithm@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8 ; CryptoPP::Algorithm::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R3Algorithm@CryptoPP@@8 DD 00H			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithm@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVAlgorithm@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Algorithm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithm@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R2RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R3RandomNumberGenerator@CryptoPP@@8 DD 00H		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandomNumberGenerator@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVRandomNumberGenerator@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandomNumberGenerator@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEterPack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEterPack@@8 DD FLAT:??_R0?AVCEterPack@@@8 ; CEterPack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEterPack@@8
rdata$r	ENDS
;	COMDAT ??_R2CEterPack@@8
rdata$r	SEGMENT
??_R2CEterPack@@8 DD FLAT:??_R1A@?0A@EA@CEterPack@@8	; CEterPack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEterPack@@8
rdata$r	SEGMENT
??_R3CEterPack@@8 DD 00H				; CEterPack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEterPack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEterPack@@@8
data$r	SEGMENT
??_R0?AVCEterPack@@@8 DD FLAT:??_7type_info@@6B@	; CEterPack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEterPack@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEterPack@@6B@
rdata$r	SEGMENT
??_R4CEterPack@@6B@ DD 00H				; CEterPack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEterPack@@@8
	DD	FLAT:??_R3CEterPack@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD FLAT:??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 00H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category2@std@@@8
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D'
	DB	'@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LADHILIA@Panama?9LE@
CONST	SEGMENT
??_C@_09LADHILIA@Panama?9LE@ DB 'Panama-LE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKKJKGIK@Panama?9BE@
CONST	SEGMENT
??_C@_09LKKJKGIK@Panama?9BE@ DB 'Panama-BE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object doesn''t allow input', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VBufferedTransformati'
	DB	'on@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVConstByteArrayParameter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVConstByteArrayParameter@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
CONST	SEGMENT
??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ DB 'StringSink: Out'
	DB	'putStringPointer not specified', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NDOICOBI@OutputStringPointer@
CONST	SEGMENT
??_C@_0BE@NDOICOBI@OutputStringPointer@ DB 'OutputStringPointer', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@Cr'
	DB	'yptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0CA@GEOIKNCG@NAME_COLLISION?3?5OLD?3?5?$CFs?5NEW?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@GEOIKNCG@NAME_COLLISION?3?5OLD?3?5?$CFs?5NEW?3?5?$CFs@ DB 'NAME'
	DB	'_COLLISION: OLD: %s NEW: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD FLAT:??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
	DD	FLAT:??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD FLAT:??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
	DD	FLAT:??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCA@AEPAXI@Z
	DD	FLAT:?GetAlignment@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OperateKeystream@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ
	DD	FLAT:?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
CONST	SEGMENT
??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@ DD FLAT:??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
	DD	FLAT:??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W7AEPAXI@Z
	DD	FLAT:?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
	DD	FLAT:??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vftable'
	DD	FLAT:??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCA@AEPAXI@Z
	DD	FLAT:?GetAlignment@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OperateKeystream@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ
	DD	FLAT:?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@ DD FLAT:??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W7AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:__purecall
	DD	FLAT:?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ DD FLAT:??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vftable'
	DD	FLAT:??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@O7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
CONST	SEGMENT
??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ DD FLAT:??_R4?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vftable'
	DD	FLAT:??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z
	DD	FLAT:?GetAlignment@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OperateKeystream@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ
	DD	FLAT:?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_C@_0P@MDGHMGJK@Unref?5File?5?$CFs?6@
CONST	SEGMENT
??_C@_0P@MDGHMGJK@Unref?5File?5?$CFs?6@ DB 'Unref File %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@IGPMDEEF@SYSERR?3?5WriteNewData?$CI?$CJ?3?5CRITICA@
CONST	SEGMENT
??_C@_0EC@IGPMDEEF@SYSERR?3?5WriteNewData?$CI?$CJ?3?5CRITICA@ DB 'SYSERR:'
	DB	' WriteNewData(): CRITICAL ERROR: empty_size lower than 0!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JEPAOIH@Write?$FLtype?3?$CFu?$FN?5?$CFs?6@
CONST	SEGMENT
??_C@_0BD@JEPAOIH@Write?$FLtype?3?$CFu?$FN?5?$CFs?6@ DB 'Write[type:%u] %'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IGHIDEHN@Overwrite?$FLtype?3?$CFu?$FN?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@IGHIDEHN@Overwrite?$FLtype?3?$CFu?$FN?5?$CFs?6@ DB 'Overwrite[t'
	DB	'ype:%u] %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JIDJMBKL@EterPack?3?3Put?5?3?5Cannot?5put?5to?5e@
CONST	SEGMENT
??_C@_0EE@JIDJMBKL@EterPack?3?3Put?5?3?5Cannot?5put?5to?5e@ DB 'EterPack:'
	DB	':Put : Cannot put to encrypted pack (filename: %s, DB: %s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OILLCEPM@cannot?5decompress@
CONST	SEGMENT
??_C@_0BC@OILLCEPM@cannot?5decompress@ DB 'cannot decompress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFAPLGOA@Failed?5to?5encrypt?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0BH@CFAPLGOA@Failed?5to?5encrypt?5?3?5?$CFs@ DB 'Failed to encrypt '
	DB	': %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFBHFFAK@Failed?5to?5decompress?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0BK@CFBHFFAK@Failed?5to?5decompress?5?3?5?$CFs@ DB 'Failed to decom'
	DB	'press : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JMMFBMPC@Pack?5index?5file?5size?5error?$CB?5?$CFs?0@
CONST	SEGMENT
??_C@_0CO@JMMFBMPC@Pack?5index?5file?5size?5error?$CB?5?$CFs?0@ DB 'Pack '
	DB	'index file size error! %s, indexCount %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KGHAJIDH@Pack?5index?5file?5version?5error?$CB?5@
CONST	SEGMENT
??_C@_0CC@KGHAJIDH@Pack?5index?5file?5version?5error?$CB?5@ DB 'Pack inde'
	DB	'x file version error! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HPBCEBAA@Pack?5index?5file?5fourcc?5error?$CB?5?$CF@
CONST	SEGMENT
??_C@_0CB@HPBCEBAA@Pack?5index?5file?5fourcc?5error?$CB?5?$CF@ DB 'Pack i'
	DB	'ndex file fourcc error! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KNLDPAAC@Pack?5index?5file?5header?5error?$CB?5?$CF@
CONST	SEGMENT
??_C@_0CB@KNLDPAAC@Pack?5index?5file?5header?5error?$CB?5?$CF@ DB 'Pack i'
	DB	'ndex file header error! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IACKDODI@Cannot?5open?5pack?5index?5file?$CB?5?$CFs@
CONST	SEGMENT
??_C@_0CA@IACKDODI@Cannot?5open?5pack?5index?5file?$CB?5?$CFs@ DB 'Cannot'
	DB	' open pack index file! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FFDEAKBO@Encryptindex?3?5Cannot?5write?5to?5f@
CONST	SEGMENT
??_C@_0CH@FFDEAKBO@Encryptindex?3?5Cannot?5write?5to?5f@ DB 'Encryptindex'
	DB	': Cannot write to file! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NIHCOGLD@EncryptIndex?3?5Cannot?5open?5file?5@
CONST	SEGMENT
??_C@_0CP@NIHCOGLD@EncryptIndex?3?5Cannot?5open?5file?5@ DB 'EncryptIndex'
	DB	': Cannot open file for writing! %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BKLKOCID@EncryptIndex?3?5Cannot?5encrypt?$CB?5?$CF@
CONST	SEGMENT
??_C@_0CB@BKLKOCID@EncryptIndex?3?5Cannot?5encrypt?$CB?5?$CF@ DB 'Encrypt'
	DB	'Index: Cannot encrypt! %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LCLPMBOA@EncryptIndex?3?5Cannot?5open?5pack?5@
CONST	SEGMENT
??_C@_0CO@LCLPMBOA@EncryptIndex?3?5Cannot?5open?5pack?5@ DB 'EncryptIndex'
	DB	': Cannot open pack index file! %s', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?s_adwEterPackKey@@3PAKA DD 02b09eb9H			; s_adwEterPackKey
	DD	0581696fH
	DD	0289b9863H
	DD	01a1879H
?s_adwEterPackSecurityKey@@3PAKA DD 04b4b822H		; s_adwEterPackSecurityKey
	DD	01f6eb264H
	DD	018eaaeH
	DD	01cfbf6a6H
_DATA	ENDS
;	COMDAT ??_C@_04JJCMEEIK@?4epk@
CONST	SEGMENT
??_C@_04JJCMEEIK@?4epk@ DB '.epk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OLDEJNOH@?4eix@
CONST	SEGMENT
??_C@_04OLDEJNOH@?4eix@ DB '.eix', 00H			; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
	DD	FLAT:?xsputn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@PA_W_J@Z
	DD	FLAT:?sync@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_09BOOFBHDC@Error?3?5?$CFs@
CONST	SEGMENT
??_C@_09BOOFBHDC@Error?3?5?$CFs@ DB 'Error: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKIDJPM@?4err@
CONST	SEGMENT
??_C@_04BKIDJPM@?4err@ DB '.err', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPOLKAEB@?4log@
CONST	SEGMENT
??_C@_04FPOLKAEB@?4log@ DB '.log', 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@
CONST	SEGMENT
??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@ DD FLAT:??_R4?$codecvt@_WDU_Mbstatet@@@std@@6B@ ; std::codecvt<wchar_t,char,_Mbstatet>::`vftable'
	DD	FLAT:??_E?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ
	DD	FLAT:?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
	DD	FLAT:?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
	DD	FLAT:?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
	DD	FLAT:?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
	DD	FLAT:?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
	DD	FLAT:?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
CONST	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT
??_7codecvt_base@std@@6B@ DD FLAT:??_R4codecvt_base@std@@6B@ ; std::codecvt_base::`vftable'
	DD	FLAT:??_Ecodecvt_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_09HLDHDDJL@Whirlpool@
CONST	SEGMENT
??_C@_09HLDHDDJL@Whirlpool@ DB 'Whirlpool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7Whirlpool@CryptoPP@@6B@
CONST	SEGMENT
??_7Whirlpool@CryptoPP@@6B@ DD FLAT:??_R4Whirlpool@CryptoPP@@6B@ ; CryptoPP::Whirlpool::`vftable'
	DD	FLAT:??_EWhirlpool@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Whirlpool@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?Update@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CreateUpdateSpace@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?Final@HashTransformation@CryptoPP@@UAEXPAE@Z
	DD	FLAT:?Restart@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ
	DD	FLAT:?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UBEIXZ
	DD	FLAT:?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z
	DD	FLAT:?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z
	DD	FLAT:?TruncatedFinal@Whirlpool@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z
	DD	FLAT:?TruncatedVerify@HashTransformation@CryptoPP@@UAE_NPBEI@Z
	DD	FLAT:?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z
	DD	FLAT:?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXXZ
	DD	FLAT:?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
	DD	FLAT:?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z
	DD	FLAT:?HashMultipleBlocks@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@MAEIPB_KI@Z
	DD	FLAT:?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ
	DD	FLAT:?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ
CONST	ENDS
;	COMDAT ??_C@_0L@DFIJCONE@RIPEMD?9128@
CONST	SEGMENT
??_C@_0L@DFIJCONE@RIPEMD?9128@ DB 'RIPEMD-128', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7RIPEMD128@CryptoPP@@6B@
CONST	SEGMENT
??_7RIPEMD128@CryptoPP@@6B@ DD FLAT:??_R4RIPEMD128@CryptoPP@@6B@ ; CryptoPP::RIPEMD128::`vftable'
	DD	FLAT:??_ERIPEMD128@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?Update@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CreateUpdateSpace@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?Final@HashTransformation@CryptoPP@@UAEXPAE@Z
	DD	FLAT:?Restart@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ
	DD	FLAT:?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UBEIXZ
	DD	FLAT:?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z
	DD	FLAT:?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z
	DD	FLAT:?TruncatedFinal@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z
	DD	FLAT:?TruncatedVerify@HashTransformation@CryptoPP@@UAE_NPBEI@Z
	DD	FLAT:?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z
	DD	FLAT:?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXXZ
	DD	FLAT:?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
	DD	FLAT:?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z
	DD	FLAT:?HashMultipleBlocks@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@MAEIPBII@Z
	DD	FLAT:?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ
	DD	FLAT:?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEPAIXZ
CONST	ENDS
;	COMDAT ??_C@_05HJMENKNE@SHA?91@
CONST	SEGMENT
??_C@_05HJMENKNE@SHA?91@ DB 'SHA-1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7SHA1@CryptoPP@@6B@
CONST	SEGMENT
??_7SHA1@CryptoPP@@6B@ DD FLAT:??_R4SHA1@CryptoPP@@6B@	; CryptoPP::SHA1::`vftable'
	DD	FLAT:??_ESHA1@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@SHA1@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?Update@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CreateUpdateSpace@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?Final@HashTransformation@CryptoPP@@UAEXPAE@Z
	DD	FLAT:?Restart@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ
	DD	FLAT:?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UBEIXZ
	DD	FLAT:?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z
	DD	FLAT:?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z
	DD	FLAT:?TruncatedFinal@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z
	DD	FLAT:?TruncatedVerify@HashTransformation@CryptoPP@@UAE_NPBEI@Z
	DD	FLAT:?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z
	DD	FLAT:?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXXZ
	DD	FLAT:?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
	DD	FLAT:?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z
	DD	FLAT:?HashMultipleBlocks@SHA1@CryptoPP@@MAEIPBII@Z
	DD	FLAT:?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ
	DD	FLAT:?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEPAIXZ
CONST	ENDS
;	COMDAT ??_C@_05LIOENMIE@Tiger@
CONST	SEGMENT
??_C@_05LIOENMIE@Tiger@ DB 'Tiger', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7Tiger@CryptoPP@@6B@
CONST	SEGMENT
??_7Tiger@CryptoPP@@6B@ DD FLAT:??_R4Tiger@CryptoPP@@6B@ ; CryptoPP::Tiger::`vftable'
	DD	FLAT:??_ETiger@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Tiger@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?Update@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CreateUpdateSpace@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?Final@HashTransformation@CryptoPP@@UAEXPAE@Z
	DD	FLAT:?Restart@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAEXXZ
	DD	FLAT:?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UBEIXZ
	DD	FLAT:?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z
	DD	FLAT:?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z
	DD	FLAT:?TruncatedFinal@Tiger@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z
	DD	FLAT:?TruncatedVerify@HashTransformation@CryptoPP@@UAE_NPBEI@Z
	DD	FLAT:?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z
	DD	FLAT:?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXXZ
	DD	FLAT:?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
	DD	FLAT:?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z
	DD	FLAT:?HashMultipleBlocks@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@MAEIPB_KI@Z
	DD	FLAT:?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ
	DD	FLAT:?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_0M@JMHEFFAI@InputBuffer@
CONST	SEGMENT
??_C@_0M@JMHEFFAI@InputBuffer@ DB 'InputBuffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@Store@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@Store@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z
CONST	ENDS
;	COMDAT ??_7ArraySink@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7ArraySink@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4ArraySink@CryptoPP@@6BWaitable@1@@ ; CryptoPP::ArraySink::`vftable'
	DD	FLAT:??_EArraySink@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7ArraySink@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7ArraySink@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4ArraySink@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::ArraySink::`vftable'
	DD	FLAT:??_EArraySink@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@ArraySink@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@ArraySink@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@ArraySink@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
CONST	ENDS
;	COMDAT ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
	DD	FLAT:??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
	DD	FLAT:?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 00H
	DD	FLAT:??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@
CONST	SEGMENT
??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ DB 'AlgorithmParame'
	DB	'tersBase: parameter "', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAABKFFP@?$CC?5not?5used@
CONST	SEGMENT
??_C@_0L@IAABKFFP@?$CC?5not?5used@ DB '" not used', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::`vftable'
	DD	FLAT:??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
	DD	FLAT:??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object is not attachable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
CONST	SEGMENT
??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ DB 'RandomNumberGen'
	DB	'erator: IncorporateEntropy not implemented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5obje@
CONST	SEGMENT
??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5obje@ DB 'StreamTransfor'
	DB	'mation: this object doesn''t support random access', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
CONST	SEGMENT
??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ DB ': this obj'
	DB	'ect doesn''t support resynchronization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BFHCIDFI@C?$CL?$CL@
CONST	SEGMENT
??_C@_03BFHCIDFI@C?$CL?$CL@ DB 'C++', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIFAGBMG@unknown@
CONST	SEGMENT
??_C@_07CIFAGBMG@unknown@ DB 'unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
CONST	SEGMENT
??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ DB 'Clone('
	DB	') is not implemented yet.', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVNotImplemented@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNotImplemented@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotImplemented `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotImplemented@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVNotImplemented@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVNotImplemented@CryptoPP@@ DD 00H
	DD	FLAT:??1NotImplemented@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVNotImplemented@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVInvalidArgument@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVInvalidArgument@CryptoPP@@ DD 00H
	DD	FLAT:??1InvalidArgument@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0Exception@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVException@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidArgument@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVInvalidArgument@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InvalidArgument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidArgument@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
xdata$x	SEGMENT
__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48 DD 00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	FLAT:??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueTypeMismatch@NameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 00H
	DD	FLAT:??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
CONST	SEGMENT
??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ DB 'NameValuePair'
	DB	's: type mismatch for ''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
CONST	SEGMENT
??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@ DB ''', stored ''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
CONST	SEGMENT
??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ DB ''', trying to retr'
	DB	'ieve ''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8@
CONST	SEGMENT
??_C@_01GEODFPGF@?8@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::`vftable'
	DD	FLAT:??_ENameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
	DD	FLAT:??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7NotImplemented@CryptoPP@@6B@
CONST	SEGMENT
??_7NotImplemented@CryptoPP@@6B@ DD FLAT:??_R4NotImplemented@CryptoPP@@6B@ ; CryptoPP::NotImplemented::`vftable'
	DD	FLAT:??_ENotImplemented@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InvalidArgument@CryptoPP@@6B@
CONST	SEGMENT
??_7InvalidArgument@CryptoPP@@6B@ DD FLAT:??_R4InvalidArgument@CryptoPP@@6B@ ; CryptoPP::InvalidArgument::`vftable'
	DD	FLAT:??_EInvalidArgument@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@CryptoPP@@6B@
CONST	SEGMENT
??_7Exception@CryptoPP@@6B@ DD FLAT:??_R4Exception@CryptoPP@@6B@ ; CryptoPP::Exception::`vftable'
	DD	FLAT:??_EException@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7CEterPack@@6B@
CONST	SEGMENT
??_7CEterPack@@6B@ DD FLAT:??_R4CEterPack@@6B@		; CEterPack::`vftable'
	DD	FLAT:??_ECEterPack@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DD FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DD	FLAT:??_E_Iostream_error_category2@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category2@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$0
__tryblocktable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$5
__ehfuncinfo$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$5
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKPAUSEterPackIndex@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKPAUSEterPackIndex@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKPAUSEterPackIndex@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKPAUSEterPackIndex@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKPAUSEterPackIndex@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKPAUSEterPackIndex@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKPAUSEterPackIndex@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKPAUSEterPackIndex@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKK@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKK@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@Z$0
__ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKK@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKK@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUItem@CEterFileDict@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUItem@CEterFileDict@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUItem@CEterFileDict@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUItem@CEterFileDict@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z$1
__ehfuncinfo$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAUSEterPackIndex@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@1@ABQAUSEterPackIndex@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAUSEterPackIndex@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@1@ABQAUSEterPackIndex@@@Z$0
__ehfuncinfo$??$?0ABQAUSEterPackIndex@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@1@ABQAUSEterPackIndex@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAUSEterPackIndex@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@1@ABQAUSEterPackIndex@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Copy_unchecked@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_unchecked@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Copy_unchecked@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$1
__ehfuncinfo$??$_Copy_unchecked@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Copy_unchecked@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$1
__ehfuncinfo$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$1
__ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0
__tryblocktable$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$7
__ehfuncinfo$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$3
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@12@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@12@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z$0
__ehfuncinfo$??$emplace@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@12@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@12@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAUSEterPackIndex@@@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEPAU?$_List_node@PAUSEterPackIndex@@PAX@1@QAU21@ABQAUSEterPackIndex@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAUSEterPackIndex@@@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEPAU?$_List_node@PAUSEterPackIndex@@PAX@1@QAU21@ABQAUSEterPackIndex@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAUSEterPackIndex@@@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEPAU?$_List_node@PAUSEterPackIndex@@PAX@1@QAU21@ABQAUSEterPackIndex@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAUSEterPackIndex@@@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEPAU?$_List_node@PAUSEterPackIndex@@PAX@1@QAU21@ABQAUSEterPackIndex@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2
__ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$3
__ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2
__ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$3
__ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$10
	DD	05H
	DD	FLAT:__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@AAV?$basic_istream@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@AAV?$basic_istream@_WU?$char_traits@_W@std@@@1@@Z$0
__ehfuncinfo$??0?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@AAV?$basic_istream@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@AAV?$basic_istream@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0
__tryblocktable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$3
__unwindtable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$2
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z$1
__ehfuncinfo$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gios_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gios_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@ios_base@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Init@ios_base@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@ios_base@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Whirlpool@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Whirlpool@CryptoPP@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0Whirlpool@CryptoPP@@QAE@XZ$2
__ehfuncinfo$??0Whirlpool@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Whirlpool@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@IAE@XZ$1
__ehfuncinfo$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RIPEMD128@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RIPEMD128@CryptoPP@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0RIPEMD128@CryptoPP@@QAE@XZ$2
__ehfuncinfo$??0RIPEMD128@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0RIPEMD128@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@IAE@XZ$1
__ehfuncinfo$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SHA1@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SHA1@CryptoPP@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0SHA1@CryptoPP@@QAE@XZ$2
__ehfuncinfo$??0SHA1@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SHA1@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@IAE@XZ$1
__ehfuncinfo$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Tiger@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Tiger@CryptoPP@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0Tiger@CryptoPP@@QAE@XZ$2
__ehfuncinfo$??0Tiger@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Tiger@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@IAE@XZ$1
__ehfuncinfo$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z$0
__ehfuncinfo$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ConstByteArrayParameter@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ConstByteArrayParameter@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0
__ehfuncinfo$??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ConstByteArrayParameter@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ConstByteArrayParameter@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$2
	DD	00H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2
	DD	00H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$4
	DD	01H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0
__ehfuncinfo$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$3
__ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0StringStore@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0
__ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$0
__ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z$0
__ehfuncinfo$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ$0
__ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z$1
__ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$4
__ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z$0
__ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z$0
__ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0
__ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0
__ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ$1
__ehfuncinfo$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0
__ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0
__ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z$2
__ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?FlushError@CMakePackLog@@QAEXXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?FlushError@CMakePackLog@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?FlushError@CMakePackLog@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$6
	DD	00H
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$3
__ehfuncinfo$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$3
__ehfuncinfo$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$12
	DD	02H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$18
	DD	05H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$19
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$3
	DD	07H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$24
	DD	08H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$25
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$4
	DD	0aH
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$30
	DD	0bH
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$31
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$5
	DD	0dH
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$8
	DD	0fH
	DD	FLAT:__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEXABQAUSEterPackIndex@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEXABQAUSEterPackIndex@@@Z$1
__ehfuncinfo$?push_back@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEXABQAUSEterPackIndex@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAEXABQAUSEterPackIndex@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKK@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKK@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKK@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKK@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z$0
__ehfuncinfo$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z$1
__ehfuncinfo$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z$1
__ehfuncinfo$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$2
__ehfuncinfo$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DecryptIndexFile@CEterPack@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DecryptIndexFile@CEterPack@@QAE_NXZ$0
__ehfuncinfo$?DecryptIndexFile@CEterPack@@QAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DecryptIndexFile@CEterPack@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EncryptIndexFile@CEterPack@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncryptIndexFile@CEterPack@@QAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptIndexFile@CEterPack@@QAE_NXZ$1
__ehfuncinfo$?EncryptIndexFile@CEterPack@@QAE_NXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncryptIndexFile@CEterPack@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Extract@CEterPack@@QAE_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Extract@CEterPack@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CEterPack@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Put@CEterPack@@QAE_NPBDPBXJE@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Put@CEterPack@@QAE_NPBDPBXJE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Put@CEterPack@@QAE_NPBDPBXJE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CEterPack@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CEterPack@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CEterPack@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CEterPack@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CEterPack@@QAE@XZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z$0
__ehfuncinfo$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z$0
__ehfuncinfo$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCA@AEPAXI@Z PROC ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor', COMDAT
  00000	83 e9 20	 sub	 ecx, 32			; 00000020H
  00003	e9 00 00 00 00	 jmp	 ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@WCA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BEPAVClonable@2@XZ
_TEXT	SEGMENT
?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BEPAVClonable@2@XZ PROC ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone
?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3BEPAVClonable@2@XZ ENDP ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W7AEPAXI@Z
_TEXT	SEGMENT
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W7AEPAXI@Z PROC ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W7AEPAXI@Z ENDP ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
??_E?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCA@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 20	 sub	 ecx, 32			; 00000020H
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W7AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W7AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W7AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@O7AEPAXI@Z
_TEXT	SEGMENT
??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@O7AEPAXI@Z PROC ; [thunk]:CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z
??_E?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@O7AEPAXI@Z ENDP ; [thunk]:CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@W3BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_EStringSource@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringSource@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringSource::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringSource@CryptoPP@@UAEPAXI@Z
??_EStringSource@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_EStringStore@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringStore@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringStore::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringStore@CryptoPP@@UAEPAXI@Z
??_EStringStore@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_EArraySink@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EArraySink@CryptoPP@@W3AEPAXI@Z PROC			; [thunk]:CryptoPP::ArraySink::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EArraySink@CryptoPP@@UAEPAXI@Z
??_EArraySink@CryptoPP@@W3AEPAXI@Z ENDP			; [thunk]:CryptoPP::ArraySink::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocs@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z PROC ; std::_Pocs<std::allocator<wchar_t> >, COMDAT

; 926  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_swap::value) {
; 927  :         _Swap_adl(_Left, _Right);
; 928  :     } else {
; 929  :         _STL_ASSERT(_Left == _Right, "containers incompatible for swap");
; 930  :     }
; 931  : }

  00000	c2 00 00	 ret	 0
??$_Pocs@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ENDP ; std::_Pocs<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z PROC ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4354 : /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3792 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0000c	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  0000f	f3 0f 7e 51 10	 movq	 xmm2, QWORD PTR [ecx+16]
  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3793 :         _CSTD memcpy(_Right_data_mem, _Temp_mem, _Memcpy_val_size);

  00021	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
  00024	66 0f d6 50 10	 movq	 QWORD PTR [eax+16], xmm2

; 4355 :     _Left.swap(_Right);
; 4356 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ENDP ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >, COMDAT

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00012	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00015	84 c0		 test	 al, al
  00017	74 0a		 je	 SHORT $LN2@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00020	83 c4 08	 add	 esp, 8
$LN2@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00023	56		 push	 esi
  00024	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00027	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0002c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0002f	84 c0		 test	 al, al
  00031	74 21		 je	 SHORT $LN4@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  00033	56		 push	 esi
  00034	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00037	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00043	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00046	84 c0		 test	 al, al
  00048	74 0a		 je	 SHORT $LN4@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  0004a	57		 push	 edi
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00051	83 c4 08	 add	 esp, 8
$LN4@Med3_unche:
  00054	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4016 : }

  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKK@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKK@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><std::tuple<unsigned long const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 975  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	89 01		 mov	 DWORD PTR [ecx], eax
  0000c	8b c1		 mov	 eax, ecx
  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKK@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><std::tuple<unsigned long const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z PROC ; std::_Pocma<std::allocator<wchar_t> >, COMDAT

; 902  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 903  :         _Left = _STD move(_Right);
; 904  :     }
; 905  : }

  00000	c2 00 00	 ret	 0
??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ENDP ; std::_Pocma<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z
_TEXT	SEGMENT
tv608 = -12						; size = 4
__Max_sequence_non_leaf$1$ = -8				; size = 4
__Idx$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Idx$1$ = 16						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<void> >, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;
; 3359 :     _Diff _Idx       = _Hole;
; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00006	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0000f	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00012	89 45 f4	 mov	 DWORD PTR tv608[ebp], eax
  00015	8b df		 mov	 ebx, edi
  00017	d1 f8		 sar	 eax, 1
  00019	8b cf		 mov	 ecx, edi
  0001b	89 5d 0c	 mov	 DWORD PTR __Top$1$[ebp], ebx
  0001e	89 45 f8	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00021	3b f8		 cmp	 edi, eax
  00023	0f 8d a4 00 00
	00		 jge	 $LN3@Pop_heap_h
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	0f 1f 40 00	 npad	 4
$LL2@Pop_heap_h:

; 3365 :         _Idx = 2 * _Idx + 2;

  00030	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00033	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00036	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00039	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  0003c	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00046	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00049	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0004c	0f b6 c0	 movzx	 eax, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0004f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00052	83 f0 01	 xor	 eax, 1
  00055	03 c8		 add	 ecx, eax
  00057	89 4d fc	 mov	 DWORD PTR __Idx$1$[ebp], ecx
  0005a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0005d	8d 1c c2	 lea	 ebx, DWORD PTR [edx+eax*8]
  00060	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00063	8d 34 c2	 lea	 esi, DWORD PTR [edx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  00066	3b f3		 cmp	 esi, ebx
  00068	74 50		 je	 SHORT $LN26@Pop_heap_h

; 2153 :         return _BUF_SIZE <= _Myres;

  0006a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006d	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00070	72 18		 jb	 SHORT $LN15@Pop_heap_h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00072	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00079	50		 push	 eax
  0007a	ff 36		 push	 DWORD PTR [esi]
  0007c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00081	8b 4d fc	 mov	 ecx, DWORD PTR __Idx$1$[ebp]
  00084	83 c4 08	 add	 esp, 8
  00087	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
$LN15@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0008a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;
; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00091	33 c0		 xor	 eax, eax
  00093	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0009a	66 89 06	 mov	 WORD PTR [esi], ax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009d	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  000a0	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000a3	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000a8	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000ad	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b0	c7 43 14 07 00
	00 00		 mov	 DWORD PTR [ebx+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b7	66 89 03	 mov	 WORD PTR [ebx], ax
$LN26@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  000ba	8b 45 f8	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 3370 :         _Hole             = _Idx;

  000bd	8b f9		 mov	 edi, ecx
  000bf	3b c8		 cmp	 ecx, eax
  000c1	0f 8c 69 ff ff
	ff		 jl	 $LL2@Pop_heap_h
  000c7	8b 5d 0c	 mov	 ebx, DWORD PTR __Top$1$[ebp]
  000ca	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 3371 :     }
; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000cd	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  000d0	3b c8		 cmp	 ecx, eax
  000d2	75 1b		 jne	 SHORT $LN5@Pop_heap_h
  000d4	f6 c2 01	 test	 dl, 1
  000d7	75 16		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000d9	4a		 dec	 edx
  000da	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  000dd	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  000e0	50		 push	 eax
  000e1	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000e4	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  000e7	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=

; 3375 :         _Hole             = _Bottom - 1;

  000ec	8b 7d f4	 mov	 edi, DWORD PTR tv608[ebp]
$LN5@Pop_heap_h:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000ef	3b df		 cmp	 ebx, edi
  000f1	0f 8d 7f 00 00
	00		 jge	 $LN78@Pop_heap_h
$LL30@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000f7	ff 75 14	 push	 DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  000fa	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000fd	d1 f8		 sar	 eax, 1
  000ff	89 45 10	 mov	 DWORD PTR __Idx$1$[ebp], eax

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00102	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00105	8d 1c c6	 lea	 ebx, DWORD PTR [esi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00108	53		 push	 ebx
  00109	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0010e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00111	84 c0		 test	 al, al
  00113	74 61		 je	 SHORT $LN78@Pop_heap_h

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00115	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00118	8d 34 c6	 lea	 esi, DWORD PTR [esi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  0011b	3b f3		 cmp	 esi, ebx
  0011d	74 4a		 je	 SHORT $LN51@Pop_heap_h

; 2153 :         return _BUF_SIZE <= _Myres;

  0011f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00122	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00125	72 12		 jb	 SHORT $LN40@Pop_heap_h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00127	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0012e	50		 push	 eax
  0012f	ff 36		 push	 DWORD PTR [esi]
  00131	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00136	83 c4 08	 add	 esp, 8
$LN40@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00139	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;
; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00140	33 c0		 xor	 eax, eax
  00142	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00149	66 89 06	 mov	 WORD PTR [esi], ax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0014c	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  0014f	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00152	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  00157	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0015c	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0015f	c7 43 14 07 00
	00 00		 mov	 DWORD PTR [ebx+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00166	66 89 03	 mov	 WORD PTR [ebx], ax
$LN51@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3325 :         _Hole             = _Idx;

  00169	8b 45 10	 mov	 eax, DWORD PTR __Idx$1$[ebp]
  0016c	8b f8		 mov	 edi, eax
  0016e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00171	39 45 0c	 cmp	 DWORD PTR __Top$1$[ebp], eax
  00174	7c 81		 jl	 SHORT $LL30@Pop_heap_h
$LN78@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  00176	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  00179	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0017c	8d 34 c6	 lea	 esi, DWORD PTR [esi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  0017f	3b f3		 cmp	 esi, ebx
  00181	74 4a		 je	 SHORT $LN69@Pop_heap_h

; 2153 :         return _BUF_SIZE <= _Myres;

  00183	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00186	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00189	72 12		 jb	 SHORT $LN58@Pop_heap_h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00192	50		 push	 eax
  00193	ff 36		 push	 DWORD PTR [esi]
  00195	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0019a	83 c4 08	 add	 esp, 8
$LN58@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0019d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;
; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001a4	33 c0		 xor	 eax, eax
  001a6	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  001ad	66 89 06	 mov	 WORD PTR [esi], ax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001b0	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  001b3	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  001b6	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  001bb	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  001c0	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001c3	c7 43 14 07 00
	00 00		 mov	 DWORD PTR [ebx+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001ca	66 89 03	 mov	 WORD PTR [ebx], ax
$LN69@Pop_heap_h:
  001cd	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3379 : }

  001ce	5e		 pop	 esi
  001cf	5b		 pop	 ebx
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$1$ = 12					; size = 4
__Right$ = 12						; size = 4
??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z PROC ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4502 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b c1		 mov	 eax, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN6@operator:

; 2144 :         const value_type* _Result = _Bx._Buf;

  00010	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 7a 14 08	 cmp	 DWORD PTR [edx+20], 8

; 2144 :         const value_type* _Result = _Bx._Buf;

  0001a	8b fa		 mov	 edi, edx

; 2145 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 3a		 mov	 edi, DWORD PTR [edx]
$LN11@operator:

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00023	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00026	3b da		 cmp	 ebx, edx
  00028	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0002a	89 55 0c	 mov	 DWORD PTR __Left_size$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0002d	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 215  :         for (; 0 < _N; ++_S1, ++_S2, --_N)

  00030	85 c9		 test	 ecx, ecx
  00032	74 19		 je	 SHORT $LN16@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00034	2b f8		 sub	 edi, eax
$LL27@operator:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 216  :             if (*_S1 != *_S2)

  00036	0f b7 14 07	 movzx	 edx, WORD PTR [edi+eax]
  0003a	0f b7 30	 movzx	 esi, WORD PTR [eax]
  0003d	66 3b d6	 cmp	 dx, si
  00040	75 1a		 jne	 SHORT $LN31@operator

; 215  :         for (; 0 < _N; ++_S1, ++_S2, --_N)

  00042	83 c0 02	 add	 eax, 2
  00045	83 e9 01	 sub	 ecx, 1
  00048	75 ec		 jne	 SHORT $LL27@operator

; 216  :             if (*_S1 != *_S2)

  0004a	8b 55 0c	 mov	 edx, DWORD PTR __Left_size$1$[ebp]
$LN16@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 517  :     if (_Left_size < _Right_size) {

  0004d	3b da		 cmp	 ebx, edx
  0004f	76 19		 jbe	 SHORT $LN36@operator

; 4503 :     return _Left.compare(_Right) < 0;

  00051	5f		 pop	 edi

; 518  :         return -1;

  00052	83 c8 ff	 or	 eax, -1

; 4503 :     return _Left.compare(_Right) < 0;

  00055	5e		 pop	 esi
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	5b		 pop	 ebx

; 4504 : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN31@operator:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 217  :                 return *_S1 < *_S2 ? -1 : 1;

  0005c	1b c0		 sbb	 eax, eax
  0005e	83 e0 fe	 and	 eax, -2			; fffffffeH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4503 :     return _Left.compare(_Right) < 0;

  00061	5f		 pop	 edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 217  :                 return *_S1 < *_S2 ? -1 : 1;

  00062	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4503 :     return _Left.compare(_Right) < 0;

  00063	5e		 pop	 esi
  00064	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00067	5b		 pop	 ebx

; 4504 : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN36@operator:

; 521  :     if (_Left_size > _Right_size) {

  0006a	1b c0		 sbb	 eax, eax

; 4503 :     return _Left.compare(_Right) < 0;

  0006c	5f		 pop	 edi

; 521  :     if (_Left_size > _Right_size) {

  0006d	f7 d8		 neg	 eax

; 4503 :     return _Left.compare(_Right) < 0;

  0006f	5e		 pop	 esi
  00070	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00073	5b		 pop	 ebx

; 4504 : }

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ENDP ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0ABK$$Z$$V@?$pair@$$CBKK@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -4						; size = 1
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABK$$Z$$V@?$pair@$$CBKK@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z PROC ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><unsigned long const &>, COMDAT
; _this$ = ecx

; 981  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000b	8d 45 10	 lea	 eax, DWORD PTR __Val2$[ebp]
  0000e	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00011	c6 45 f8 00	 mov	 BYTE PTR $T1[ebp], 0
  00015	8b f1		 mov	 esi, ecx
  00017	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKK@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><std::tuple<unsigned long const &>,std::tuple<>,0>
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABK$$Z$$V@?$pair@$$CBKK@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 42		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	57		 push	 edi
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00016	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	33 ff		 xor	 edi, edi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0001f	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00027	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002a	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0002d	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00032	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00037	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00041	c7 40 14 07 00
	00 00		 mov	 DWORD PTR [eax+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00048	66 89 38	 mov	 WORD PTR [eax], di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0004b	83 c0 18	 add	 eax, 24			; 00000018H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0004e	3b c2		 cmp	 eax, edx
  00050	75 c4		 jne	 SHORT $LL4@Uninitiali
  00052	5f		 pop	 edi
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00053	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00056	56		 push	 esi
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00060	8b c6		 mov	 eax, esi
  00062	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
__Ok$ = -40						; size = 8
$T3 = -32						; size = 8
tv772 = -28						; size = 4
__Ch$1$ = -28						; size = 4
tv777 = -24						; size = 4
__Ch$1$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z PROC ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>, COMDAT

; 423  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]

; 424  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 425  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 426  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  0002e	33 ff		 xor	 edi, edi
  00030	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi

; 427  : 
; 428  :     _SizeT _Pad;
; 429  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00033	8b 03		 mov	 eax, DWORD PTR [ebx]
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
  0003c	39 7c 18 24	 cmp	 DWORD PTR [eax+ebx+36], edi
  00040	7c 11		 jl	 SHORT $LN10@Insert_str
  00042	7f 04		 jg	 SHORT $LN90@Insert_str
  00044	85 f6		 test	 esi, esi
  00046	74 0b		 je	 SHORT $LN10@Insert_str
$LN90@Insert_str:
  00048	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0004b	3b f0		 cmp	 esi, eax
  0004d	76 04		 jbe	 SHORT $LN10@Insert_str

; 431  :     } else {
; 432  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  0004f	2b f0		 sub	 esi, eax
  00051	eb 02		 jmp	 SHORT $LN9@Insert_str
$LN10@Insert_str:

; 430  :         _Pad = 0;

  00053	33 f6		 xor	 esi, esi
$LN9@Insert_str:

; 433  :     }
; 434  : 
; 435  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  00055	53		 push	 ebx
  00056	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00059	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 436  : 
; 437  :     if (!_Ok) {

  0005e	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00069	75 0a		 jne	 SHORT $LN11@Insert_str

; 438  :         _State |= _Ostr_t::badbit;

  0006b	bf 04 00 00 00	 mov	 edi, 4

; 439  :     } else { // state okay, insert characters

  00070	e9 36 01 00 00	 jmp	 $LN23@Insert_str
$LN11@Insert_str:

; 440  :         _TRY_IO_BEGIN
; 441  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00075	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0007b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007e	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
  00082	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00087	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008a	74 64		 je	 SHORT $LN85@Insert_str
  0008c	0f 1f 40 00	 npad	 4
$LL4@Insert_str:

; 442  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00090	85 f6		 test	 esi, esi
  00092	74 5a		 je	 SHORT $LN87@Insert_str

; 443  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00094	8b 03		 mov	 eax, DWORD PTR [ebx]
  00096	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00099	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0009d	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  000a2	89 55 e4	 mov	 DWORD PTR __Ch$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 258  :         return *_IPnext ? *_IPcount : 0;

  000a5	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000a8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ab	74 21		 je	 SHORT $LN27@Insert_str
  000ad	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000b2	85 c0		 test	 eax, eax
  000b4	7e 18		 jle	 SHORT $LN27@Insert_str

; 253  :         --*_IPcount;

  000b6	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000b9	48		 dec	 eax
  000ba	89 02		 mov	 DWORD PTR [edx], eax

; 254  :         return (*_IPnext)++;

  000bc	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  000bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c1	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000c6	8b 45 e4	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  000c9	66 89 02	 mov	 WORD PTR [edx], ax
  000cc	eb 06		 jmp	 SHORT $LN98@Insert_str
$LN27@Insert_str:
  000ce	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d0	52		 push	 edx
  000d1	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN98@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 443  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000d4	0f b7 c0	 movzx	 eax, ax
  000d7	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000dc	66 3b c8	 cmp	 cx, ax
  000df	75 0a		 jne	 SHORT $LN2@Insert_str

; 444  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  000e1	bf 04 00 00 00	 mov	 edi, 4
  000e6	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi

; 445  :                     break;

  000e9	eb 25		 jmp	 SHORT $LL92@Insert_str
$LN2@Insert_str:

; 442  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000eb	4e		 dec	 esi
  000ec	eb a2		 jmp	 SHORT $LL4@Insert_str
$LN87@Insert_str:

; 451  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  000ee	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN85@Insert_str:
  000f0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 172  :         return xsputn(_Ptr, _Count);

  000f3	6a 00		 push	 0
  000f5	ff 75 10	 push	 DWORD PTR __Size$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 451  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  000f8	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 172  :         return xsputn(_Ptr, _Count);

  000fc	ff 75 0c	 push	 DWORD PTR __Data$[ebp]
  000ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00101	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00104	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 451  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00106	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  00109	75 5e		 jne	 SHORT $LN91@Insert_str
  0010b	85 d2		 test	 edx, edx
  0010d	75 5a		 jne	 SHORT $LN91@Insert_str
  0010f	90		 npad	 1
$LL92@Insert_str:

; 453  :         } else {
; 454  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00110	85 f6		 test	 esi, esi
  00112	74 5a		 je	 SHORT $LN6@Insert_str

; 455  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00119	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0011d	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  00122	89 55 e8	 mov	 DWORD PTR __Ch$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 258  :         return *_IPnext ? *_IPcount : 0;

  00125	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00128	83 38 00	 cmp	 DWORD PTR [eax], 0
  0012b	74 21		 je	 SHORT $LN41@Insert_str
  0012d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00130	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00132	85 c0		 test	 eax, eax
  00134	7e 18		 jle	 SHORT $LN41@Insert_str

; 253  :         --*_IPcount;

  00136	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00139	48		 dec	 eax
  0013a	89 02		 mov	 DWORD PTR [edx], eax

; 254  :         return (*_IPnext)++;

  0013c	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0013f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00141	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00144	89 01		 mov	 DWORD PTR [ecx], eax

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00146	8b 45 e8	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  00149	66 89 02	 mov	 WORD PTR [edx], ax
  0014c	eb 06		 jmp	 SHORT $LN99@Insert_str
$LN41@Insert_str:
  0014e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00150	52		 push	 edx
  00151	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN99@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 455  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00154	0f b7 c0	 movzx	 eax, ax
  00157	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0015c	66 3b c8	 cmp	 cx, ax
  0015f	75 05		 jne	 SHORT $LN5@Insert_str

; 456  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  00161	83 cf 04	 or	 edi, 4

; 457  :                     break;

  00164	eb 08		 jmp	 SHORT $LN6@Insert_str
$LN5@Insert_str:

; 453  :         } else {
; 454  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00166	4e		 dec	 esi
  00167	eb a7		 jmp	 SHORT $LL92@Insert_str
$LN91@Insert_str:

; 452  :             _State |= _Ostr_t::badbit;

  00169	bf 04 00 00 00	 mov	 edi, 4
$LN6@Insert_str:

; 458  :                 }
; 459  :             }
; 460  :         }
; 461  : 
; 462  :         _Ostr.width(0);

  0016e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00170	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  00173	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  0017b	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
  00183	eb 1f		 jmp	 SHORT $LN100@Insert_str
__catch$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$0:

; 463  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00185	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00188	6a 01		 push	 1
  0018a	6a 04		 push	 4
  0018c	8b 02		 mov	 eax, DWORD PTR [edx]
  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	03 ca		 add	 ecx, edx
  00193	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  00198	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  0019d	c3		 ret	 0
$LN24@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
  0019e	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001a1	8b 7d ec	 mov	 edi, DWORD PTR __State$[ebp]
$LN100@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 466  :     _Ostr.setstate(_State);

  001a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN23@Insert_str:
  001ab	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001ad	33 f6		 xor	 esi, esi
  001af	b9 04 00 00 00	 mov	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 466  :     _Ostr.setstate(_State);

  001b4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  001b7	8b 44 1a 0c	 mov	 eax, DWORD PTR [edx+ebx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 466  :     _Ostr.setstate(_State);

  001bb	03 d3		 add	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  001bd	0b c7		 or	 eax, edi

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001bf	39 72 38	 cmp	 DWORD PTR [edx+56], esi
  001c2	0f 45 ce	 cmovne	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  001c5	0b c8		 or	 ecx, eax

; 245  :         _Mystate             = _State;
; 246  :         const auto _Filtered = _State & _Except;

  001c7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ca	83 e1 17	 and	 ecx, 23			; 00000017H
  001cd	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  001d0	23 c1		 and	 eax, ecx

; 247  :         if (_Filtered) {

  001d2	75 45		 jne	 SHORT $LN102@Insert_str
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  001d4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001db	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  001e0	84 c0		 test	 al, al
  001e2	75 08		 jne	 SHORT $LN69@Insert_str

; 120  :                 this->_Myostr._Osfx();

  001e4	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN69@Insert_str:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  001ec	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001ef	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  001f3	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001f8	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  001fc	85 c9		 test	 ecx, ecx
  001fe	74 05		 je	 SHORT $LN73@Insert_str

; 81   :                 _Rdbuf->_Unlock();

  00200	8b 11		 mov	 edx, DWORD PTR [ecx]
  00202	ff 52 08	 call	 DWORD PTR [edx+8]
$LN73@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 467  :     return _Ostr;

  00205	8b c3		 mov	 eax, ebx

; 468  : }

  00207	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0020a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00211	59		 pop	 ecx
  00212	5f		 pop	 edi
  00213	5e		 pop	 esi
  00214	5b		 pop	 ebx
  00215	8b e5		 mov	 esp, ebp
  00217	5d		 pop	 ebp
  00218	c3		 ret	 0
$LN102@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  00219	a8 04		 test	 al, 4
  0021b	74 07		 je	 SHORT $LN60@Insert_str

; 254  :                 _Msg = "ios_base::badbit set";

  0021d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00222	eb 0f		 jmp	 SHORT $LN62@Insert_str
$LN60@Insert_str:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00224	a8 02		 test	 al, 2
  00226	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0022b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00230	0f 44 f0	 cmove	 esi, eax
$LN62@Insert_str:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  00233	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00236	6a 01		 push	 1
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0023e	83 c4 08	 add	 esp, 8
  00241	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00244	50		 push	 eax
  00245	56		 push	 esi
  00246	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0024b	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00250	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN97@Insert_str:
  00259	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ENDP ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00001	6a 10		 push	 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0000a	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00010	0f 57 c0	 xorps	 xmm0, xmm0

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00025	5e		 pop	 esi

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  00026	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_const
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 10		 push	 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_const:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
tv497 = -12						; size = 4
$T2 = -12						; size = 4
__Last$1$ = -12						; size = 4
tv494 = -8						; size = 4
__Gfirst$1$ = -8					; size = 4
tv493 = -4						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
tv498 = 20						; size = 4
__Glast$1$ = 20						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00014	8b cf		 mov	 ecx, edi
  00016	2b cb		 sub	 ecx, ebx
  00018	f7 e9		 imul	 ecx

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  0001a	8d 47 e8	 lea	 eax, DWORD PTR [edi-24]
  0001d	c1 fa 02	 sar	 edx, 2
  00020	8b ca		 mov	 ecx, edx
  00022	89 45 f4	 mov	 DWORD PTR __Last$1$[ebp], eax
  00025	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00028	03 ca		 add	 ecx, edx
  0002a	d1 f9		 sar	 ecx, 1
  0002c	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002f	8d 34 cb	 lea	 esi, DWORD PTR [ebx+ecx*8]

; 4022 :     const _Diff _Count = _Last - _First;

  00032	8b c8		 mov	 ecx, eax
  00034	2b cb		 sub	 ecx, ebx
  00036	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003b	f7 e9		 imul	 ecx
  0003d	c1 fa 02	 sar	 edx, 2
  00040	8b c2		 mov	 eax, edx
  00042	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00045	03 c2		 add	 eax, edx

; 4023 :     if (40 < _Count) { // Tukey's ninther

  00047	83 f8 28	 cmp	 eax, 40			; 00000028H
  0004a	7e 65		 jle	 SHORT $LN35@Partition_

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0004c	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0004f	40		 inc	 eax
  00050	c1 f8 03	 sar	 eax, 3
  00053	57		 push	 edi
  00054	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  00057	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0005a	c1 e3 03	 shl	 ebx, 3
  0005d	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00060	c1 e1 04	 shl	 ecx, 4
  00063	89 4d f8	 mov	 DWORD PTR tv494[ebp], ecx
  00066	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
  00069	03 c1		 add	 eax, ecx
  0006b	50		 push	 eax
  0006c	52		 push	 edx
  0006d	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00070	89 55 fc	 mov	 DWORD PTR tv493[ebp], edx
  00073	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00078	57		 push	 edi
  00079	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0007c	50		 push	 eax
  0007d	8b c6		 mov	 eax, esi
  0007f	2b c3		 sub	 eax, ebx
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00088	8b 45 f4	 mov	 eax, DWORD PTR __Last$1$[ebp]
  0008b	8b f8		 mov	 edi, eax
  0008d	2b fb		 sub	 edi, ebx
  0008f	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	2b 45 f8	 sub	 eax, DWORD PTR tv494[ebp]
  00097	57		 push	 edi
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4029 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0009e	53		 push	 ebx
  0009f	57		 push	 edi
  000a0	56		 push	 esi
  000a1	ff 75 fc	 push	 DWORD PTR tv493[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4030 :     } else {

  000a9	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000ac	83 c4 40	 add	 esp, 64			; 00000040H
  000af	eb 11		 jmp	 SHORT $LN36@Partition_
$LN35@Partition_:

; 4031 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000b1	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b4	8d 47 e8	 lea	 eax, DWORD PTR [edi-24]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
  000bf	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@Partition_:

; 4040 :     _RanIt _Pfirst = _Mid;
; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  000c2	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  000c5	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000c8	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  000cb	73 31		 jae	 SHORT $LN72@Partition_
  000cd	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
$LL2@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000d0	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  000d3	56		 push	 esi
  000d4	50		 push	 eax
  000d5	89 45 14	 mov	 DWORD PTR tv498[ebp], eax
  000d8	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000dd	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000e0	84 c0		 test	 al, al
  000e2	75 17		 jne	 SHORT $LN96@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000e4	ff 75 14	 push	 DWORD PTR tv498[ebp]
  000e7	56		 push	 esi
  000e8	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ed	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000f0	84 c0		 test	 al, al
  000f2	75 07		 jne	 SHORT $LN96@Partition_

; 4045 :         --_Pfirst;

  000f4	8b 75 14	 mov	 esi, DWORD PTR tv498[ebp]
  000f7	3b fe		 cmp	 edi, esi
  000f9	72 d5		 jb	 SHORT $LL2@Partition_
$LN96@Partition_:
  000fb	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN72@Partition_:

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000fe	3b df		 cmp	 ebx, edi
  00100	73 26		 jae	 SHORT $LN5@Partition_
$LL4@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00102	56		 push	 esi
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00109	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0010c	84 c0		 test	 al, al
  0010e	75 15		 jne	 SHORT $LN97@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00110	53		 push	 ebx
  00111	56		 push	 esi
  00112	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00117	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0011a	84 c0		 test	 al, al
  0011c	75 07		 jne	 SHORT $LN97@Partition_

; 4049 :         ++_Plast;

  0011e	83 c3 18	 add	 ebx, 24			; 00000018H
  00121	3b df		 cmp	 ebx, edi
  00123	72 dd		 jb	 SHORT $LL4@Partition_
$LN97@Partition_:
  00125	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 4050 :     }
; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  00128	8b fb		 mov	 edi, ebx

; 4053 :     _RanIt _Glast  = _Pfirst;

  0012a	8b c6		 mov	 eax, esi
  0012c	89 7d f8	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
  0012f	89 45 14	 mov	 DWORD PTR __Glast$1$[ebp], eax
$LL6@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00132	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00135	73 48		 jae	 SHORT $LN76@Partition_
$LL11@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00137	57		 push	 edi
  00138	56		 push	 esi
  00139	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0013e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00141	84 c0		 test	 al, al
  00143	75 29		 jne	 SHORT $LN9@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00145	56		 push	 esi
  00146	57		 push	 edi
  00147	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0014c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  0014f	84 c0		 test	 al, al
  00151	75 23		 jne	 SHORT $LN98@Partition_

; 4059 :                 break;
; 4060 :             } else if (_Plast != _Gfirst) {

  00153	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00156	89 45 f4	 mov	 DWORD PTR tv497[ebp], eax
  00159	3b df		 cmp	 ebx, edi
  0015b	74 0f		 je	 SHORT $LN19@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  0015d	57		 push	 edi
  0015e	53		 push	 ebx
  0015f	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4062 :                 ++_Plast;

  00164	8b 5d f4	 mov	 ebx, DWORD PTR tv497[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  00167	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4063 :             } else {

  0016a	eb 02		 jmp	 SHORT $LN9@Partition_
$LN19@Partition_:

; 4064 :                 ++_Plast;

  0016c	8b d8		 mov	 ebx, eax
$LN9@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  0016e	83 c7 18	 add	 edi, 24			; 00000018H
  00171	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00174	72 c1		 jb	 SHORT $LL11@Partition_
$LN98@Partition_:
  00176	8b 45 14	 mov	 eax, DWORD PTR __Glast$1$[ebp]
  00179	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  0017c	89 7d f8	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LN76@Partition_:

; 4068 :         for (; _First < _Glast; --_Glast) {

  0017f	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00182	8b d7		 mov	 edx, edi
  00184	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  00187	3b c8		 cmp	 ecx, eax
  00189	73 50		 jae	 SHORT $LN77@Partition_
  0018b	8b 5d 14	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  0018e	8d 7b e8	 lea	 edi, DWORD PTR [ebx-24]
$LL14@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00191	56		 push	 esi
  00192	57		 push	 edi
  00193	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00198	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  0019b	84 c0		 test	 al, al
  0019d	75 1f		 jne	 SHORT $LN12@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0019f	57		 push	 edi
  001a0	56		 push	 esi
  001a1	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001a6	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  001a9	84 c0		 test	 al, al
  001ab	75 1c		 jne	 SHORT $LN99@Partition_

; 4071 :                 break;
; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001ad	83 ee 18	 sub	 esi, 24			; 00000018H
  001b0	3b f7		 cmp	 esi, edi
  001b2	74 0a		 je	 SHORT $LN12@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  001b4	57		 push	 edi
  001b5	56		 push	 esi
  001b6	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001bb	83 c4 08	 add	 esp, 8
$LN12@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4068 :         for (; _First < _Glast; --_Glast) {

  001be	83 eb 18	 sub	 ebx, 24			; 00000018H
  001c1	83 ef 18	 sub	 edi, 24			; 00000018H
  001c4	39 5d 0c	 cmp	 DWORD PTR __First$[ebp], ebx
  001c7	72 c8		 jb	 SHORT $LL14@Partition_
$LN99@Partition_:
  001c9	8b 7d f8	 mov	 edi, DWORD PTR __Gfirst$1$[ebp]
  001cc	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  001cf	8b 55 f4	 mov	 edx, DWORD PTR $T2[ebp]
  001d2	89 5d 14	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  001d5	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  001d8	8b 45 14	 mov	 eax, DWORD PTR __Glast$1$[ebp]
$LN77@Partition_:

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 4074 :             }
; 4075 :         }
; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  001db	89 75 f0	 mov	 DWORD PTR $T1[ebp], esi
  001de	3b c1		 cmp	 eax, ecx
  001e0	75 24		 jne	 SHORT $LN27@Partition_
  001e2	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  001e5	74 76		 je	 SHORT $LN78@Partition_

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 4082 :             if (_Plast != _Gfirst) {

  001e7	3b df		 cmp	 ebx, edi
  001e9	74 0a		 je	 SHORT $LN29@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  001eb	53		 push	 ebx
  001ec	56		 push	 esi
  001ed	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001f2	83 c4 08	 add	 esp, 8
$LN29@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4089 :             ++_Gfirst;

  001f5	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  001f8	83 c3 18	 add	 ebx, 24			; 00000018H
  001fb	8b 55 f4	 mov	 edx, DWORD PTR $T2[ebp]
  001fe	83 c6 18	 add	 esi, 24			; 00000018H
  00201	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  00204	eb 3f		 jmp	 SHORT $LN100@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00206	83 c0 e8	 add	 eax, -24		; ffffffe8H
  00209	89 45 14	 mov	 DWORD PTR __Glast$1$[ebp], eax
  0020c	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0020f	75 2d		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  00211	83 ee 18	 sub	 esi, 24			; 00000018H
  00214	3b c6		 cmp	 eax, esi
  00216	74 0a		 je	 SHORT $LN32@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  00218	56		 push	 esi
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0021f	83 c4 08	 add	 esp, 8
$LN32@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  00222	83 eb 18	 sub	 ebx, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 83   :     swap(*_Left, *_Right);

  00225	8b ce		 mov	 ecx, esi
  00227	8b d3		 mov	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  00229	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 4099 :         }
; 4100 :     }

  0022c	52		 push	 edx
  0022d	51		 push	 ecx
  0022e	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00233	8b 45 14	 mov	 eax, DWORD PTR __Glast$1$[ebp]
  00236	83 c4 08	 add	 esp, 8
  00239	e9 f4 fe ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:

; 4096 :         } else {
; 4097 :             _STD iter_swap(_Gfirst, --_Glast);
; 4098 :             ++_Gfirst;

  0023e	8b ca		 mov	 ecx, edx
  00240	89 45 14	 mov	 DWORD PTR __Glast$1$[ebp], eax
  00243	8b d0		 mov	 edx, eax
$LN100@Partition_:

; 4099 :         }
; 4100 :     }

  00245	52		 push	 edx
  00246	83 c7 18	 add	 edi, 24			; 00000018H
  00249	51		 push	 ecx
  0024a	89 7d f8	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
  0024d	e8 00 00 00 00	 call	 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00252	8b 45 14	 mov	 eax, DWORD PTR __Glast$1$[ebp]
  00255	83 c4 08	 add	 esp, 8
  00258	e9 d5 fe ff ff	 jmp	 $LL6@Partition_
$LN78@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0025d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00260	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00261	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00263	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00264	89 58 04	 mov	 DWORD PTR [eax+4], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00267	5b		 pop	 ebx

; 4101 : }

  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@QAV10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$2$ = -60						; size = 16
__Val$3$ = -44						; size = 8
__Next$1$ = -36						; size = 4
__First$GSCopy$1$ = -32					; size = 4
__Val$1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@QAV10@U?$less@X@0@@Z PROC ; std::_Insertion_sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >, COMDAT

; 3979 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3980 :     // insertion sort [_First, _Last), using _Pred
; 3981 :     if (_First != _Last) {

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00017	89 5d e0	 mov	 DWORD PTR __First$GSCopy$1$[ebp], ebx
  0001a	3b d9		 cmp	 ebx, ecx
  0001c	0f 84 dd 01 00
	00		 je	 $LN128@Insertion_

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  00022	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00025	89 45 dc	 mov	 DWORD PTR __Next$1$[ebp], eax
  00028	3b c1		 cmp	 eax, ecx
  0002a	0f 84 cf 01 00
	00		 je	 $LN128@Insertion_
  00030	56		 push	 esi
  00031	57		 push	 edi
$LL2@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00032	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00035	33 c9		 xor	 ecx, ecx
  00037	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3983 :             _BidIt _Next1              = _Next;

  0003a	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0003c	0f 11 45 c4	 movups	 XMMWORD PTR __Val$2$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00040	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00041	0f 11 45 e4	 movups	 XMMWORD PTR __Val$1[ebp], xmm0
  00045	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0004a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00051	66 89 08	 mov	 WORD PTR [eax], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00054	8d 45 e4	 lea	 eax, DWORD PTR __Val$1[ebp]
  00057	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00058	66 0f d6 45 d4	 movq	 QWORD PTR __Val$3$[ebp], xmm0
  0005d	66 0f d6 45 f4	 movq	 QWORD PTR __Val$1[ebp+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00062	c7 06 07 00 00
	00		 mov	 DWORD PTR [esi], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00068	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0006d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00070	84 c0		 test	 al, al
  00072	0f 84 ad 00 00
	00		 je	 $LN9@Insertion_

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  00078	8b 45 dc	 mov	 eax, DWORD PTR __Next$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4444 :     while (_First != _Last) {

  0007b	8b 4d e0	 mov	 ecx, DWORD PTR __First$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  0007e	8d 78 18	 lea	 edi, DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4444 :     while (_First != _Last) {

  00081	3b c1		 cmp	 eax, ecx
  00083	74 5f		 je	 SHORT $LN30@Insertion_
$LL121@Insertion_:

; 4445 :         *--_Dest = _STD move(*--_Last);

  00085	8d 76 e8	 lea	 esi, DWORD PTR [esi-24]
  00088	83 ef 18	 sub	 edi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  0008b	8d 5e ec	 lea	 ebx, DWORD PTR [esi-20]
  0008e	3b fb		 cmp	 edi, ebx
  00090	74 4e		 je	 SHORT $LN49@Insertion_

; 2153 :         return _BUF_SIZE <= _Myres;

  00092	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00095	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00098	72 15		 jb	 SHORT $LN38@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009a	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000a1	50		 push	 eax
  000a2	ff 37		 push	 DWORD PTR [edi]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	8b 4d e0	 mov	 ecx, DWORD PTR __First$GSCopy$1$[ebp]
  000ac	83 c4 08	 add	 esp, 8
$LN38@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000af	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;
; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b6	33 c0		 xor	 eax, eax
  000b8	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  000bf	66 89 07	 mov	 WORD PTR [edi], ax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000c2	0f 10 46 ec	 movups	 xmm0, XMMWORD PTR [esi-20]
  000c6	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  000c9	f3 0f 7e 46 fc	 movq	 xmm0, QWORD PTR [esi-4]
  000ce	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000d3	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000d6	c7 06 07 00 00
	00		 mov	 DWORD PTR [esi], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000dc	66 89 46 ec	 mov	 WORD PTR [esi-20], ax
$LN49@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4444 :     while (_First != _Last) {

  000e0	3b d9		 cmp	 ebx, ecx
  000e2	75 a1		 jne	 SHORT $LL121@Insertion_
$LN30@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  000e4	8d 45 e4	 lea	 eax, DWORD PTR __Val$1[ebp]
  000e7	3b c8		 cmp	 ecx, eax
  000e9	0f 84 dc 00 00
	00		 je	 $LN130@Insertion_

; 2153 :         return _BUF_SIZE <= _Myres;

  000ef	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000f2	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000f5	72 15		 jb	 SHORT $LN56@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f7	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000fe	50		 push	 eax
  000ff	ff 31		 push	 DWORD PTR [ecx]
  00101	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00106	8b 4d e0	 mov	 ecx, DWORD PTR __First$GSCopy$1$[ebp]
  00109	83 c4 08	 add	 esp, 8
$LN56@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0010c	0f 10 45 c4	 movups	 xmm0, XMMWORD PTR __Val$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3989 :             } else { // look for insertion point after first

  00110	8b 5d e0	 mov	 ebx, DWORD PTR __First$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00113	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00116	f3 0f 7e 45 d4	 movq	 xmm0, QWORD PTR __Val$3$[ebp]
  0011b	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3989 :             } else { // look for insertion point after first

  00120	e9 c4 00 00 00	 jmp	 $LN110@Insertion_
$LN9@Insertion_:

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00125	8b 75 dc	 mov	 esi, DWORD PTR __Next$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00128	8d 45 e4	 lea	 eax, DWORD PTR __Val$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  0012b	83 c6 e8	 add	 esi, -24		; ffffffe8H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0012e	56		 push	 esi
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00135	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00138	84 c0		 test	 al, al
  0013a	74 5b		 je	 SHORT $LN6@Insertion_
  0013c	0f 1f 40 00	 npad	 4
$LL7@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  00140	3b fe		 cmp	 edi, esi
  00142	74 3d		 je	 SHORT $LN5@Insertion_

; 2153 :         return _BUF_SIZE <= _Myres;

  00144	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00147	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0014a	72 12		 jb	 SHORT $LN76@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014c	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00153	50		 push	 eax
  00154	ff 37		 push	 DWORD PTR [edi]
  00156	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0015b	83 c4 08	 add	 esp, 8
$LN76@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0015e	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00161	33 c0		 xor	 eax, eax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00163	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00166	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0016b	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00170	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00177	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0017e	66 89 06	 mov	 WORD PTR [esi], ax
$LN5@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00181	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00183	8d 45 e4	 lea	 eax, DWORD PTR __Val$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00186	83 ee 18	 sub	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00189	56		 push	 esi
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00190	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00193	84 c0		 test	 al, al
  00195	75 a9		 jne	 SHORT $LL7@Insertion_
$LN6@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  00197	8d 45 e4	 lea	 eax, DWORD PTR __Val$1[ebp]
  0019a	3b f8		 cmp	 edi, eax
  0019c	74 30		 je	 SHORT $LN105@Insertion_

; 2153 :         return _BUF_SIZE <= _Myres;

  0019e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  001a1	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001a4	72 12		 jb	 SHORT $LN94@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a6	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  001ad	50		 push	 eax
  001ae	ff 37		 push	 DWORD PTR [edi]
  001b0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001b5	83 c4 08	 add	 esp, 8
$LN94@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001b8	0f 10 45 c4	 movups	 xmm0, XMMWORD PTR __Val$2$[ebp]
  001bc	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  001bf	f3 0f 7e 45 d4	 movq	 xmm0, QWORD PTR __Val$3$[ebp]
  001c4	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 2153 :         return _BUF_SIZE <= _Myres;

  001c9	eb 1e		 jmp	 SHORT $LN110@Insertion_
$LN130@Insertion_:

; 2587 :         if (this != _STD addressof(_Right)) {

  001cb	8b 5d e0	 mov	 ebx, DWORD PTR __First$GSCopy$1$[ebp]
$LN105@Insertion_:

; 2153 :         return _BUF_SIZE <= _Myres;

  001ce	8b 45 f8	 mov	 eax, DWORD PTR __Val$1[ebp+20]
  001d1	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001d4	72 13		 jb	 SHORT $LN110@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d6	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  001dd	50		 push	 eax
  001de	ff 75 e4	 push	 DWORD PTR __Val$1[ebp]
  001e1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001e6	83 c4 08	 add	 esp, 8
$LN110@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  001e9	8b 45 dc	 mov	 eax, DWORD PTR __Next$1$[ebp]
  001ec	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  001ef	83 c0 18	 add	 eax, 24			; 00000018H
  001f2	89 45 dc	 mov	 DWORD PTR __Next$1$[ebp], eax
  001f5	3b c1		 cmp	 eax, ecx
  001f7	0f 85 35 fe ff
	ff		 jne	 $LL2@Insertion_

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down
; 3992 :                 }
; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole
; 3995 :             }
; 3996 :         }
; 3997 :     }
; 3998 : 
; 3999 :     return _Last;

  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
$LN128@Insertion_:

; 4000 : }

  001ff	8b c1		 mov	 eax, ecx
  00201	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00204	33 cd		 xor	 ecx, ebp
  00206	5b		 pop	 ebx
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c3		 ret	 0
??$_Insertion_sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@QAV10@U?$less@X@0@@Z ENDP ; std::_Insertion_sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
;	COMDAT ??$?8V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z PROC ; std::operator==<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>, COMDAT

; 291  :     const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :         return _Myistr == _Right._Myistr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 292  :     return _Left._Equal(_Right);
; 293  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$?8V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ENDP ; std::operator==<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00001	6a 10		 push	 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0000a	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00010	0f 57 c0	 xorps	 xmm0, xmm0

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00025	5e		 pop	 esi

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  00026	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_const
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 10		 push	 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_const:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 120  :                 this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN2@sentry:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN5@sentry

; 81   :                 _Rdbuf->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 121  :             }
; 122  :         }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002d	89 3e		 mov	 DWORD PTR [esi], edi

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 17		 mov	 edx, DWORD PTR [edi]
  00031	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00034	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]

; 73   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 07		 je	 SHORT $LN8@sentry

; 74   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
  00041	8b 17		 mov	 edx, DWORD PTR [edi]
$LN8@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  0004b	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 95   :                 return;

  00059	eb 21		 jmp	 SHORT $LN15@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 18		 je	 SHORT $LN4@sentry
  00062	3b cf		 cmp	 ecx, edi
  00064	74 14		 je	 SHORT $LN4@sentry

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  00066	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0006b	8b 07		 mov	 eax, DWORD PTR [edi]
  0006d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00070	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  00075	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00078	eb 02		 jmp	 SHORT $LN15@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  0007a	b0 01		 mov	 al, 1
$LN15@sentry:

; 107  :         }

  0007c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0007f	8b c6		 mov	 eax, esi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Newvec$ = -44						; size = 4
_this$ = -40						; size = 4
tv383 = -36						; size = 4
tv384 = -32						; size = 4
__Newsize$1$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
__Constructed_last$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d3		 sub	 edx, ebx
  0003f	f7 ea		 imul	 edx
  00041	2b cb		 sub	 ecx, ebx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b f2		 mov	 esi, edx
  0005c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005f	03 f2		 add	 esi, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00061	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00067	0f 84 38 01 00
	00		 je	 $LN44@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00070	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00075	2b cb		 sub	 ecx, ebx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00077	46		 inc	 esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00078	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0007a	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0007f	89 75 e4	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00082	c1 fa 02	 sar	 edx, 2
  00085	8b ca		 mov	 ecx, edx
  00087	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008a	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0008c	8b d1		 mov	 edx, ecx
  0008e	d1 ea		 shr	 edx, 1
  00090	2b c2		 sub	 eax, edx
  00092	3b c8		 cmp	 ecx, eax
  00094	76 07		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00096	8b c6		 mov	 eax, esi
  00098	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  0009b	eb 0b		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009d	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000a0	3b c6		 cmp	 eax, esi
  000a2	0f 42 c6	 cmovb	 eax, esi
  000a5	89 45 e8	 mov	 DWORD PTR __Newcapacity$[ebp], eax
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a8	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  000ad	0f 87 f7 00 00
	00		 ja	 $LN45@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000b6	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b9	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  000ba	89 45 e0	 mov	 DWORD PTR tv384[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000bd	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000c2	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 748  :         _TRY_BEGIN

  000c4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000cb	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ce	83 c4 04	 add	 esp, 4
  000d1	89 5d d4	 mov	 DWORD PTR __Newvec$[ebp], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d4	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000d7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000da	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]
  000dd	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  000e0	89 4d dc	 mov	 DWORD PTR tv383[ebp], ecx
  000e3	89 45 ec	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e6	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000eb	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ee	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000f1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f3	3b d0		 cmp	 edx, eax
  000f5	75 04		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f7	8b d3		 mov	 edx, ebx

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  000f9	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000fb	57		 push	 edi
  000fc	53		 push	 ebx
  000fd	52		 push	 edx
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00104	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010d	8b 55 ec	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00110	57		 push	 edi
  00111	52		 push	 edx
  00112	50		 push	 eax
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00119	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0011b	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0011e	85 c9		 test	 ecx, ecx
  00120	74 35		 je	 SHORT $LN35@Emplace_re

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00122	57		 push	 edi
  00123	ff 77 04	 push	 DWORD PTR [edi+4]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0012c	8b 37		 mov	 esi, DWORD PTR [edi]
  0012e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00133	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00136	2b ce		 sub	 ecx, esi
  00138	f7 e9		 imul	 ecx
  0013a	c1 fa 02	 sar	 edx, 2
  0013d	8b c2		 mov	 eax, edx
  0013f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00142	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00144	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00147	c1 e0 03	 shl	 eax, 3
  0014a	50		 push	 eax
  0014b	56		 push	 esi
  0014c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00151	8b 75 e4	 mov	 esi, DWORD PTR __Newsize$1$[ebp]
  00154	83 c4 14	 add	 esp, 20			; 00000014H
$LN35@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 766  :         return _Newvec + _Whereoff;

  00157	8b 45 dc	 mov	 eax, DWORD PTR tv383[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0015a	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  0015d	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  00160	89 1f		 mov	 DWORD PTR [edi], ebx
  00162	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00165	8b 4d e0	 mov	 ecx, DWORD PTR tv384[ebp]
  00168	03 cb		 add	 ecx, ebx
  0016a	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 767  :     }

  0016d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00170	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00177	59		 pop	 ecx
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	5b		 pop	 ebx
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00181	8b 45 ec	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00184	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	50		 push	 eax
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0018e	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  00191	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	ff 75 d4	 push	 DWORD PTR __Newvec$[ebp]
  00197	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate

; 762  :         _RERAISE;

  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Emplace_re:

; 738  :             _Xlength();

  001a5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
$LN45@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001aa	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN42@Emplace_re:
  001af	cc		 int	 3
  001b0	cc		 int	 3
  001b1	cc		 int	 3
  001b2	cc		 int	 3
  001b3	cc		 int	 3
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_tmp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 10		 push	 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_tmp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_tmp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 10		 push	 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_tmp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
_TEXT	SEGMENT
$T2 = -64						; size = 20
__Ok$ = -44						; size = 8
__Pad$ = -44						; size = 8
$T3 = -36						; size = 8
__State$ = -32						; size = 4
__Ch$1$ = -28						; size = 4
tv738 = -28						; size = 4
__Ch$1$ = -24						; size = 4
tv743 = -24						; size = 4
__Count$2$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 817  : basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* _Val) { // insert NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 168  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 817  : basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* _Val) { // insert NTCS

  0002e	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]

; 818  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 819  : 
; 820  :     ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 168  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  00038	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  0003b	0f 1f 44 00 00	 npad	 5
$LL88@operator:
  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	83 c1 02	 add	 ecx, 2
  00046	66 85 c0	 test	 ax, ax
  00049	75 f5		 jne	 SHORT $LL88@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 822  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 168  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0004d	2b ca		 sub	 ecx, edx
  0004f	d1 f9		 sar	 ecx, 1
  00051	89 4d ec	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 822  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00057	8b 7c 18 24	 mov	 edi, DWORD PTR [eax+ebx+36]
  0005b	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
  0005f	85 ff		 test	 edi, edi
  00061	7c 17		 jl	 SHORT $LN17@operator
  00063	7f 0e		 jg	 SHORT $LN90@operator
  00065	85 f6		 test	 esi, esi
  00067	74 11		 je	 SHORT $LN17@operator
  00069	85 ff		 test	 edi, edi
  0006b	7c 0d		 jl	 SHORT $LN17@operator
  0006d	7f 04		 jg	 SHORT $LN90@operator
  0006f	3b f1		 cmp	 esi, ecx
  00071	76 07		 jbe	 SHORT $LN17@operator
$LN90@operator:
  00073	2b f1		 sub	 esi, ecx
  00075	83 df 00	 sbb	 edi, 0
  00078	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  0007a	0f 57 c0	 xorps	 xmm0, xmm0
  0007d	66 0f 13 45 d4	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00082	8b 7d d8	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  00085	8b 75 d4	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 823  :     const typename _Myos::sentry _Ok(_Ostr);

  00088	53		 push	 ebx
  00089	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0008c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 824  : 
; 825  :     if (!_Ok) {

  00091	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0009c	75 0a		 jne	 SHORT $LN8@operator

; 826  :         _State |= ios_base::badbit;

  0009e	b9 04 00 00 00	 mov	 ecx, 4

; 827  :     } else { // state okay, insert

  000a3	e9 4d 01 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 828  :         _TRY_IO_BEGIN
; 829  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000a8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000aa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ae	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b1	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
  000b5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000ba	83 f8 40	 cmp	 eax, 64			; 00000040H
  000bd	74 6c		 je	 SHORT $LN83@operator
  000bf	90		 npad	 1
$LL4@operator:

; 830  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000c0	85 ff		 test	 edi, edi
  000c2	7c 65		 jl	 SHORT $LN85@operator
  000c4	7f 04		 jg	 SHORT $LN91@operator
  000c6	85 f6		 test	 esi, esi
  000c8	74 5f		 je	 SHORT $LN85@operator
$LN91@operator:

; 831  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000ca	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  000d3	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  000d8	89 55 e4	 mov	 DWORD PTR __Ch$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 258  :         return *_IPnext ? *_IPcount : 0;

  000db	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000de	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e1	74 21		 je	 SHORT $LN28@operator
  000e3	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000e6	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000e8	85 c0		 test	 eax, eax
  000ea	7e 18		 jle	 SHORT $LN28@operator

; 253  :         --*_IPcount;

  000ec	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000ef	48		 dec	 eax
  000f0	89 02		 mov	 DWORD PTR [edx], eax

; 254  :         return (*_IPnext)++;

  000f2	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  000f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f7	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000fa	89 01		 mov	 DWORD PTR [ecx], eax

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000fc	8b 45 e4	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  000ff	66 89 02	 mov	 WORD PTR [edx], ax
  00102	eb 06		 jmp	 SHORT $LN103@operator
$LN28@operator:
  00104	8b 01		 mov	 eax, DWORD PTR [ecx]
  00106	52		 push	 edx
  00107	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN103@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 831  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0010a	0f b7 c0	 movzx	 eax, ax
  0010d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00112	66 3b c8	 cmp	 cx, ax
  00115	75 0a		 jne	 SHORT $LN2@operator

; 832  :                     _State |= ios_base::badbit; // insertion failed, quit

  00117	b9 04 00 00 00	 mov	 ecx, 4

; 833  :                     break;

  0011c	e9 97 00 00 00	 jmp	 $LN6@operator
$LN2@operator:

; 830  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00121	83 c6 ff	 add	 esi, -1
  00124	83 d7 ff	 adc	 edi, -1
  00127	eb 97		 jmp	 SHORT $LL4@operator
$LN85@operator:

; 838  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00129	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN83@operator:
  0012b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 172  :         return xsputn(_Ptr, _Count);

  0012e	6a 00		 push	 0
  00130	ff 75 ec	 push	 DWORD PTR __Count$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 838  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00133	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 172  :         return xsputn(_Ptr, _Count);

  00137	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0013a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013c	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0013f	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 838  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00141	3b 45 ec	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00144	75 61		 jne	 SHORT $LN92@operator
  00146	85 d2		 test	 edx, edx
  00148	75 5d		 jne	 SHORT $LN92@operator
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL94@operator:

; 839  :             _State |= ios_base::badbit;
; 840  :         }
; 841  : 
; 842  :         if (_State == ios_base::goodbit) {
; 843  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00150	85 ff		 test	 edi, edi
  00152	7c 62		 jl	 SHORT $LN98@operator
  00154	7f 04		 jg	 SHORT $LN93@operator
  00156	85 f6		 test	 esi, esi
  00158	74 5c		 je	 SHORT $LN98@operator
$LN93@operator:

; 844  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0015c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0015f	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00163	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  00168	89 55 e8	 mov	 DWORD PTR __Ch$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 258  :         return *_IPnext ? *_IPcount : 0;

  0016b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 21		 je	 SHORT $LN42@operator
  00173	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00176	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00178	85 c0		 test	 eax, eax
  0017a	7e 18		 jle	 SHORT $LN42@operator

; 253  :         --*_IPcount;

  0017c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0017f	48		 dec	 eax
  00180	89 02		 mov	 DWORD PTR [edx], eax

; 254  :         return (*_IPnext)++;

  00182	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00185	8b 11		 mov	 edx, DWORD PTR [ecx]
  00187	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0018a	89 01		 mov	 DWORD PTR [ecx], eax

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0018c	8b 45 e8	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  0018f	66 89 02	 mov	 WORD PTR [edx], ax
  00192	eb 06		 jmp	 SHORT $LN104@operator
$LN42@operator:
  00194	8b 01		 mov	 eax, DWORD PTR [ecx]
  00196	52		 push	 edx
  00197	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN104@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 844  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0019a	0f b7 c0	 movzx	 eax, ax
  0019d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001a2	66 3b c8	 cmp	 cx, ax
  001a5	75 07		 jne	 SHORT $LN5@operator
$LN92@operator:

; 845  :                     _State |= ios_base::badbit; // insertion failed, quit
; 846  :                     break;
; 847  :                 }
; 848  :             }
; 849  :         }
; 850  : 
; 851  :         _Ostr.width(0);

  001a7	b9 04 00 00 00	 mov	 ecx, 4
  001ac	eb 0a		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 839  :             _State |= ios_base::badbit;
; 840  :         }
; 841  : 
; 842  :         if (_State == ios_base::goodbit) {
; 843  :             for (; 0 < _Pad; --_Pad) { // pad on right

  001ae	83 c6 ff	 add	 esi, -1
  001b1	83 d7 ff	 adc	 edi, -1
  001b4	eb 9a		 jmp	 SHORT $LL94@operator
$LN98@operator:

; 845  :                     _State |= ios_base::badbit; // insertion failed, quit
; 846  :                     break;
; 847  :                 }
; 848  :             }
; 849  :         }
; 850  : 
; 851  :         _Ostr.width(0);

  001b6	33 c9		 xor	 ecx, ecx
$LN6@operator:
  001b8	8b 03		 mov	 eax, DWORD PTR [ebx]
  001ba	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  001bd	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  001c5	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
  001cd	eb 1f		 jmp	 SHORT $LN105@operator
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0:

; 852  :         _CATCH_IO_(ios_base, _Ostr)

  001cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001d2	6a 01		 push	 1
  001d4	6a 04		 push	 4
  001d6	8b 02		 mov	 eax, DWORD PTR [edx]
  001d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001db	03 ca		 add	 ecx, edx
  001dd	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  001e2	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001e7	c3		 ret	 0
$LN23@operator:
  001e8	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001eb	8b 4d e0	 mov	 ecx, DWORD PTR __State$[ebp]
$LN105@operator:

; 855  :     _Ostr.setstate(_State);

  001ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN22@operator:
  001f5	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001f7	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 855  :     _Ostr.setstate(_State);

  001f9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  001fc	8b 44 1a 0c	 mov	 eax, DWORD PTR [edx+ebx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 855  :     _Ostr.setstate(_State);

  00200	03 d3		 add	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  00202	0b c1		 or	 eax, ecx

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00204	b9 04 00 00 00	 mov	 ecx, 4
  00209	39 72 38	 cmp	 DWORD PTR [edx+56], esi
  0020c	0f 45 ce	 cmovne	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0020f	0b c8		 or	 ecx, eax

; 245  :         _Mystate             = _State;
; 246  :         const auto _Filtered = _State & _Except;

  00211	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00214	83 e1 17	 and	 ecx, 23			; 00000017H
  00217	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0021a	23 c1		 and	 eax, ecx

; 247  :         if (_Filtered) {

  0021c	75 45		 jne	 SHORT $LN107@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  0021e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00225	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  0022a	84 c0		 test	 al, al
  0022c	75 08		 jne	 SHORT $LN70@operator

; 120  :                 this->_Myostr._Osfx();

  0022e	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00231	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN70@operator:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00236	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00239	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0023d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0023f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00242	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  00246	85 c9		 test	 ecx, ecx
  00248	74 05		 je	 SHORT $LN74@operator

; 81   :                 _Rdbuf->_Unlock();

  0024a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024c	ff 52 08	 call	 DWORD PTR [edx+8]
$LN74@operator:

; 856  :     return _Ostr;

  0024f	8b c3		 mov	 eax, ebx

; 857  : }

  00251	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00254	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025b	59		 pop	 ecx
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
$LN107@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  00263	a8 04		 test	 al, 4
  00265	74 07		 je	 SHORT $LN61@operator

; 254  :                 _Msg = "ios_base::badbit set";

  00267	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0026c	eb 0f		 jmp	 SHORT $LN63@operator
$LN61@operator:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  0026e	a8 02		 test	 al, 2
  00270	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00275	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0027a	0f 44 f0	 cmove	 esi, eax
$LN63@operator:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0027d	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
  00280	6a 01		 push	 1
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00288	83 c4 08	 add	 esp, 8
  0028b	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0028e	50		 push	 eax
  0028f	56		 push	 esi
  00290	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00295	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0029a	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN100@operator:
  002a3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4641 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:

; 4642 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00010	ff 70 10	 push	 DWORD PTR [eax+16]
  00013	51		 push	 ecx
  00014	ff 75 08	 push	 DWORD PTR __Ostr$[ebp]
  00017	e8 00 00 00 00	 call	 ??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4643 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00001	6a 14		 push	 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002c	5e		 pop	 esi

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  0002d	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_const
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_const:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Bottom$1$ = -44					; size = 4
__Last$GSCopy$1$ = -40					; size = 4
__Mid$1 = -36						; size = 8
__Hole$1$ = -32						; size = 4
__Val$2 = -28						; size = 24
__Val$3 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00014	8b c3		 mov	 eax, ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0001a	2b c6		 sub	 eax, esi
  0001c	3d 18 03 00 00	 cmp	 eax, 792		; 00000318H
  00021	89 5d d8	 mov	 DWORD PTR __Last$GSCopy$1$[ebp], ebx
  00024	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00027	57		 push	 edi
  00028	0f 8c 92 00 00
	00		 jl	 $LN93@Sort_unche
  0002e	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 4109 :             return;
; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00031	85 ff		 test	 edi, edi
  00033	0f 8e a3 00 00
	00		 jle	 $LN94@Sort_unche

; 4115 :             return;
; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00039	50		 push	 eax
  0003a	53		 push	 ebx
  0003b	8d 45 dc	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0003e	56		 push	 esi
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00045	8b c7		 mov	 eax, edi

; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00047	8b cb		 mov	 ecx, ebx
  00049	2b 4d e0	 sub	 ecx, DWORD PTR __Mid$1[ebp+4]
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	c1 f8 02	 sar	 eax, 2
  00052	d1 ff		 sar	 edi, 1
  00054	03 f8		 add	 edi, eax
  00056	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005b	f7 e9		 imul	 ecx
  0005d	8b 4d dc	 mov	 ecx, DWORD PTR __Mid$1[ebp]
  00060	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00065	c1 fa 02	 sar	 edx, 2
  00068	2b ce		 sub	 ecx, esi
  0006a	89 7d 10	 mov	 DWORD PTR __Ideal$[ebp], edi
  0006d	8b fa		 mov	 edi, edx
  0006f	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00072	03 fa		 add	 edi, edx
  00074	f7 e9		 imul	 ecx
  00076	c1 fa 02	 sar	 edx, 2
  00079	8b c2		 mov	 eax, edx
  0007b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007e	03 c2		 add	 eax, edx
  00080	3b c7		 cmp	 eax, edi
  00082	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00085	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
  00088	50		 push	 eax
  00089	57		 push	 edi
  0008a	7d 0f		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0008c	8b 45 dc	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0008f	50		 push	 eax
  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4125 :             _First = _Mid.second;

  00096	8b 75 e0	 mov	 esi, DWORD PTR __Mid$1[ebp+4]

; 4126 :         } else { // loop on first half

  00099	eb 10		 jmp	 SHORT $LN104@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  0009b	8b 45 e0	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  0009e	53		 push	 ebx
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >

; 4128 :             _Last = _Mid.first;

  000a5	8b 5d dc	 mov	 ebx, DWORD PTR __Mid$1[ebp]
  000a8	89 5d d8	 mov	 DWORD PTR __Last$GSCopy$1$[ebp], ebx
$LN104@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  000ab	8b c3		 mov	 eax, ebx
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	2b c6		 sub	 eax, esi
  000b2	3d 18 03 00 00	 cmp	 eax, 792		; 00000318H
  000b7	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000ba	0f 8d 71 ff ff
	ff		 jge	 $LL2@Sort_unche
$LN93@Sort_unche:

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  000c0	50		 push	 eax
  000c1	53		 push	 ebx
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@QAV10@U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN40@Sort_unche:

; 4129 :         }
; 4130 :     }
; 4131 : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN94@Sort_unche:

; 3419 :     _Diff _Bottom = _Last - _First;

  000dc	8b cb		 mov	 ecx, ebx
  000de	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000e3	2b ce		 sub	 ecx, esi
  000e5	f7 e9		 imul	 ecx
  000e7	c1 fa 02	 sar	 edx, 2
  000ea	8b ca		 mov	 ecx, edx
  000ec	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000ef	03 ca		 add	 ecx, edx

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  000f1	8b c1		 mov	 eax, ecx
  000f3	89 4d d4	 mov	 DWORD PTR __Bottom$1$[ebp], ecx
  000f6	d1 f8		 sar	 eax, 1
  000f8	89 45 e0	 mov	 DWORD PTR __Hole$1$[ebp], eax
  000fb	85 c0		 test	 eax, eax
  000fd	7e 70		 jle	 SHORT $LN12@Sort_unche

; 3395 :         --_Last;
; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);
; 3397 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 3398 :     }
; 3399 : }
; 3400 : 
; 3401 : template <class _RanIt, class _Pr>
; 3402 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 3403 :     // pop *_First to *(_Last - 1) and reheap, using _Pred
; 3404 :     _Adl_verify_range(_First, _Last);
; 3405 :     _Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
; 3406 : }
; 3407 : 
; 3408 : template <class _RanIt>
; 3409 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last) {
; 3410 :     // pop *_First to *(_Last - 1) and reheap, using operator<
; 3411 :     _STD pop_heap(_First, _Last, less<>());
; 3412 : }
; 3413 : 
; 3414 : // FUNCTION TEMPLATE make_heap
; 3415 : template <class _RanIt, class _Pr>
; 3416 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 3417 :     // make nontrivial [_First, _Last) into a heap, using _Pred
; 3418 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 3419 :     _Diff _Bottom = _Last - _First;

  000ff	8b d8		 mov	 ebx, eax
  00101	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  00104	8d 3c 7f	 lea	 edi, DWORD PTR [edi+edi*2]
  00107	8d 3c fe	 lea	 edi, DWORD PTR [esi+edi*8]
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL11@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00110	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00113	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00115	4b		 dec	 ebx
  00116	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00119	0f 11 45 e4	 movups	 XMMWORD PTR __Val$3[ebp], xmm0
  0011d	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00122	66 89 07	 mov	 WORD PTR [edi], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00125	8d 45 e4	 lea	 eax, DWORD PTR __Val$3[ebp]
  00128	50		 push	 eax
  00129	51		 push	 ecx
  0012a	53		 push	 ebx
  0012b	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0012c	66 0f d6 45 f4	 movq	 QWORD PTR __Val$3[ebp+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00131	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00138	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0013f	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<void> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00144	8b 45 f8	 mov	 eax, DWORD PTR __Val$3[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00147	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0014a	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0014d	72 13		 jb	 SHORT $LN32@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014f	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00156	50		 push	 eax
  00157	ff 75 e4	 push	 DWORD PTR __Val$3[ebp]
  0015a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0015f	83 c4 08	 add	 esp, 8
$LN32@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  00162	8b 4d d4	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;

  00165	83 ef 18	 sub	 edi, 24			; 00000018H
  00168	85 db		 test	 ebx, ebx
  0016a	7f a4		 jg	 SHORT $LL11@Sort_unche
  0016c	8b 5d d8	 mov	 ebx, DWORD PTR __Last$GSCopy$1$[ebp]
$LN12@Sort_unche:

; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  0016f	83 f9 02	 cmp	 ecx, 2
  00172	0f 8c 53 ff ff
	ff		 jl	 $LN40@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00178	8d 7b e8	 lea	 edi, DWORD PTR [ebx-24]
  0017b	0f 1f 44 00 00	 npad	 5
$LL41@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00180	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00183	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3394 :     if (2 <= _Last - _First) {

  00185	8b df		 mov	 ebx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00187	0f 11 45 e4	 movups	 XMMWORD PTR __Val$2[ebp], xmm0
  0018b	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00190	66 0f d6 45 f4	 movq	 QWORD PTR __Val$2[ebp+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00195	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0019c	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001a3	66 89 07	 mov	 WORD PTR [edi], ax

; 2587 :         if (this != _STD addressof(_Right)) {

  001a6	3b fe		 cmp	 edi, esi
  001a8	74 1d		 je	 SHORT $LN78@Sort_unche

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001aa	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  001ad	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  001b0	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  001b5	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  001ba	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001bd	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001c4	66 89 06	 mov	 WORD PTR [esi], ax
$LN78@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  001c7	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  001ca	8d 45 e4	 lea	 eax, DWORD PTR __Val$2[ebp]
  001cd	8b cf		 mov	 ecx, edi
  001cf	50		 push	 eax
  001d0	2b ce		 sub	 ecx, esi
  001d2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d7	f7 e9		 imul	 ecx
  001d9	c1 fa 02	 sar	 edx, 2
  001dc	8b c2		 mov	 eax, edx
  001de	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001e1	03 c2		 add	 eax, edx
  001e3	50		 push	 eax
  001e4	6a 00		 push	 0
  001e6	56		 push	 esi
  001e7	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<void> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001ec	8b 45 f8	 mov	 eax, DWORD PTR __Val$2[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  001ef	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001f2	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001f5	72 13		 jb	 SHORT $LN39@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f7	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  001fe	50		 push	 eax
  001ff	ff 75 e4	 push	 DWORD PTR __Val$2[ebp]
  00202	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00207	83 c4 08	 add	 esp, 8
$LN39@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  0020a	2b de		 sub	 ebx, esi
  0020c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00211	f7 eb		 imul	 ebx
  00213	83 ef 18	 sub	 edi, 24			; 00000018H
  00216	c1 fa 02	 sar	 edx, 2
  00219	8b c2		 mov	 eax, edx
  0021b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0021e	03 c2		 add	 eax, edx
  00220	83 f8 02	 cmp	 eax, 2
  00223	0f 8d 57 ff ff
	ff		 jge	 $LL41@Sort_unche

; 4129 :         }
; 4130 :     }
; 4131 : }

  00229	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022c	5f		 pop	 edi
  0022d	5e		 pop	 esi
  0022e	33 cd		 xor	 ecx, ebp
  00230	5b		 pop	 ebx
  00231	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
;	COMDAT ??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z PROC ; std::operator!=<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>, COMDAT

; 297  :     const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 298  :     return !(_Left == _Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ??$?8V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ; std::operator==<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
  0000e	83 c4 08	 add	 esp, 8
  00011	34 01		 xor	 al, 1

; 299  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ENDP ; std::operator!=<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 89   :             const auto _Rdbuf = _Myistr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00030	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 90   :             if (_Rdbuf) {

  00034	85 c9		 test	 ecx, ecx
  00036	74 05		 je	 SHORT $LN4@sentry

; 91   :                 _Rdbuf->_Unlock();

  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@sentry:
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 88   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 89   :             const auto _Rdbuf = _Myistr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 90   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 91   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 92   :             }
; 93   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z PROC		; std::_Atomic_reinterpret_as<long,unsigned int>, COMDAT

; 219  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  :     // interprets _Source as the supplied integral type
; 221  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 222  : #if _HAS_IF_CONSTEXPR
; 223  :     if constexpr (is_integral_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 224  :         return static_cast<_Integral>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 225  :     } else if constexpr (is_pointer_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 226  :         return reinterpret_cast<_Integral>(_Source);
; 227  :     } else
; 228  : #endif // _HAS_IF_CONSTEXPR
; 229  :     {
; 230  :         _Integral _Result{}; // zero padding bits
; 231  :         _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));
; 232  :         return _Result;
; 233  :     }
; 234  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z ENDP		; std::_Atomic_reinterpret_as<long,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 91   :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL32@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL32@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL2@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@node_tmp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@node_tmp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 91   :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL32@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL32@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL2@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z PROC ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count, COMDAT

; 2608 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5682 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _min$[ebp]
  00008	be 00 00 00 00	 mov	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
  0000d	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
$LL9@new_bucket:

; 5685 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00012	8b d0		 mov	 edx, eax
  00014	d1 ea		 shr	 edx, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00016	39 3c 96	 cmp	 DWORD PTR [esi+edx*4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  00019	8d 0c 96	 lea	 ecx, DWORD PTR [esi+edx*4]

; 5687 :         if (_Pred(*_UMid, _Val)) { // try top half

  0001c	73 0c		 jae	 SHORT $LN11@new_bucket

; 5688 :             _UFirst = _Next_iter(_UMid);

  0001e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]

; 5689 :             _Count -= _Count2 + 1;

  00021	83 c9 ff	 or	 ecx, -1
  00024	2b ca		 sub	 ecx, edx
  00026	03 c1		 add	 eax, ecx

; 5690 :         } else {

  00028	eb 02		 jmp	 SHORT $LN12@new_bucket
$LN11@new_bucket:

; 5691 :             _Count = _Count2;

  0002a	8b c2		 mov	 eax, edx
$LN12@new_bucket:

; 5683 : 
; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0002c	85 c0		 test	 eax, eax
  0002e	7f e2		 jg	 SHORT $LL9@new_bucket
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2609 :           return boost::unordered::detail::next_prime(min);

  00030	81 fe 98 00 00
	00		 cmp	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB+152
  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	5f		 pop	 edi
  0003a	0f 45 c6	 cmovne	 eax, esi
  0003d	5e		 pop	 esi
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]

; 2610 :         }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ENDP ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 49		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00027	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0002f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00032	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00035	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0003a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003f	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00042	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00049	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00050	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00053	83 c0 18	 add	 eax, 24			; 00000018H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	3b c2		 cmp	 eax, edx
  00058	75 c6		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0005a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0005d	56		 push	 esi
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 2d		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 0c		 jb	 SHORT $LN15@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00021	83 c4 08	 add	 esp, 8
$LN15@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	3b f7		 cmp	 esi, edi
  0003a	75 d4		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0003c	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >, COMDAT

; 101  : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 103  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 104  :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 105  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z PROC		; std::_Atomic_reinterpret_as<int,unsigned int>, COMDAT

; 219  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  :     // interprets _Source as the supplied integral type
; 221  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 222  : #if _HAS_IF_CONSTEXPR
; 223  :     if constexpr (is_integral_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 224  :         return static_cast<_Integral>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 225  :     } else if constexpr (is_pointer_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 226  :         return reinterpret_cast<_Integral>(_Source);
; 227  :     } else
; 228  : #endif // _HAS_IF_CONSTEXPR
; 229  :     {
; 230  :         _Integral _Result{}; // zero padding bits
; 231  :         _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));
; 232  :         return _Result;
; 233  :     }
; 234  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z ENDP		; std::_Atomic_reinterpret_as<int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >, COMDAT

; 101  : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 103  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 104  :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 105  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<SEterPackIndex *,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<SEterPackIndex *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z
_TEXT	SEGMENT
_b$2 = -20						; size = 8
_a$3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_key_hash$1$ = 12					; size = 4
_k$ = 12						; size = 4
_<args_0>$ = 16						; size = 4
??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,SEterPackIndex *> >, COMDAT
; _this$ = ecx

; 3735 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0002a	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
  0002d	ff 36		 push	 DWORD PTR [esi]
  0002f	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00034	0f b6 17	 movzx	 edx, BYTE PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00037	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  0003a	83 e2 01	 and	 edx, 1

; 3736 :           std::size_t key_hash = this->hash(k);

  0003d	89 45 0c	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  00040	42		 inc	 edx
  00041	03 d7		 add	 edx, edi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00043	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00046	f7 da		 neg	 edx
  00048	1b d2		 sbb	 edx, edx
  0004a	23 d1		 and	 edx, ecx
  0004c	8b cf		 mov	 ecx, edi
  0004e	52		 push	 edx
  0004f	56		 push	 esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3737 :           node_pointer pos = this->find_node(key_hash, k);

  00056	8b c8		 mov	 ecx, eax

; 3738 :           if (pos) {

  00058	85 c9		 test	 ecx, ecx
  0005a	74 1d		 je	 SHORT $LN2@emplace_un
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0005c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx
  00061	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace_un:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00079	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0007c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0
  00083	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00086	f7 de		 neg	 esi
  00088	1b f6		 sbb	 esi, esi
  0008a	23 f0		 and	 esi, eax
  0008c	89 75 ec	 mov	 DWORD PTR _a$3[ebp], esi

; 2039 :           a.create_node();

  0008f	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::create_node

; 2040 :           construct_from_args(

  0009e	8b 4d 10	 mov	 ecx, DWORD PTR _<args_0>$[ebp]
  000a1	8b 5d f0	 mov	 ebx, DWORD PTR _a$3[ebp+4]

; 1957 :           node_ = node_pointer();

  000a4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0

; 2040 :           construct_from_args(

  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2041 :             alloc, a.node_->value_ptr(), BOOST_UNORDERED_EMPLACE_FORWARD);
; 2042 :           return a.release();

  000b3	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  000b6	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000b9	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000be	89 75 ec	 mov	 DWORD PTR _b$2[ebp], esi
  000c1	89 5d f0	 mov	 DWORD PTR _b$2[ebp+4], ebx

; 4542 :         if (!buckets_) {

  000c4	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000c8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000cb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000d2	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  000d5	75 1a		 jne	 SHORT $LN54@emplace_un

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000d7	56		 push	 esi
  000d8	8b cf		 mov	 ecx, edi
  000da	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000df	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e2	3b c8		 cmp	 ecx, eax
  000e4	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000e7	51		 push	 ecx
  000e8	8b cf		 mov	 ecx, edi
  000ea	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  000ef	eb 2d		 jmp	 SHORT $LN57@emplace_un
$LN54@emplace_un:

; 4544 :         } else if (size > max_load_) {

  000f1	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  000f4	76 28		 jbe	 SHORT $LN57@emplace_un

; 4545 :           std::size_t num_buckets =

  000f6	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000f8	ba 01 00 00 00	 mov	 edx, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  000fd	d1 e9		 shr	 ecx, 1
  000ff	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00101	3b f0		 cmp	 esi, eax
  00103	0f 42 d1	 cmovb	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  00106	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00108	03 57 08	 add	 edx, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0010b	52		 push	 edx
  0010c	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00111	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00114	74 08		 je	 SHORT $LN57@emplace_un

; 4549 :             this->rehash_impl(num_buckets);

  00116	50		 push	 eax
  00117	8b cf		 mov	 ecx, edi
  00119	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN57@emplace_un:

; 2604 :           return hash % bucket_count;

  0011e	8b 45 0c	 mov	 eax, DWORD PTR _key_hash$1$[ebp]
  00121	33 d2		 xor	 edx, edx
  00123	f7 77 04	 div	 DWORD PTR [edi+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00126	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  00129	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$2[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00130	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00133	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00139	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 3693 :           if (!b->next_) {

  0013c	8b 06		 mov	 eax, DWORD PTR [esi]
  0013e	85 c0		 test	 eax, eax
  00140	75 24		 jne	 SHORT $LN66@emplace_un

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00142	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00145	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00148	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  0014b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014d	85 c0		 test	 eax, eax
  0014f	74 0b		 je	 SHORT $LN68@emplace_un

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00151	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00154	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  00159	89 1c 82	 mov	 DWORD PTR [edx+eax*4], ebx
$LN68@emplace_un:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  0015c	89 0e		 mov	 DWORD PTR [esi], ecx

; 3702 :             n->next_ = start_node->next_;

  0015e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00160	89 03		 mov	 DWORD PTR [ebx], eax

; 3703 :             start_node->next_ = n;

  00162	89 19		 mov	 DWORD PTR [ecx], ebx

; 3704 :           } else {

  00164	eb 08		 jmp	 SHORT $LN67@emplace_un
$LN66@emplace_un:

; 3705 :             n->next_ = b->next_->next_;

  00166	8b 00		 mov	 eax, DWORD PTR [eax]
  00168	89 03		 mov	 DWORD PTR [ebx], eax

; 3706 :             b->next_->next_ = n;

  0016a	8b 06		 mov	 eax, DWORD PTR [esi]
  0016c	89 18		 mov	 DWORD PTR [eax], ebx
$LN67@emplace_un:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  0016e	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  00171	8d 4d ec	 lea	 ecx, DWORD PTR _b$2[ebp]
  00174	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00179	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017c	89 18		 mov	 DWORD PTR [eax], ebx
  0017e	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00182	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00185	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018c	59		 pop	 ecx
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _a$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR _b$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,SEterPackIndex *> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,SEterPackIndex *> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2511 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN6@unique_ptr

; 2402 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN6@unique_ptr:

; 2512 :             _Mypair._Get_first()(_Mypair._Myval2);
; 2513 :         }
; 2514 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
_TEXT	SEGMENT
_b$2 = -24						; size = 8
_a$3 = -24						; size = 8
_key_hash$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>, COMDAT
; _this$ = ecx

; 3791 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0002d	8b 30		 mov	 esi, DWORD PTR [eax]
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00035	33 d2		 xor	 edx, edx

; 3792 :           std::size_t key_hash = this->hash(k);

  00037	89 45 f0	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2604 :           return hash % bucket_count;

  0003a	f7 77 04	 div	 DWORD PTR [edi+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0003d	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3046 :           if (!size_)

  00040	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00044	74 40		 je	 SHORT $LN2@try_emplac

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00046	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00049	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0004c	85 c9		 test	 ecx, ecx
  0004e	74 36		 je	 SHORT $LN2@try_emplac
  00050	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 3592 :             if (!n)

  00052	85 c9		 test	 ecx, ecx
  00054	74 30		 je	 SHORT $LN2@try_emplac
$LL26@try_emplac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 91   :         return _Left == _Right;

  00056	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00059	0f 84 ab 00 00
	00		 je	 $LN151@try_emplac

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00067	3b c2		 cmp	 eax, edx
  00069	75 1b		 jne	 SHORT $LN2@try_emplac
  0006b	0f 1f 44 00 00	 npad	 5
$LL56@try_emplac:

; 2971 :             n2 = next_node(n2);

  00070	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00072	85 c9		 test	 ecx, ecx
  00074	74 10		 je	 SHORT $LN2@try_emplac

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007c	f7 d0		 not	 eax
  0007e	a8 01		 test	 al, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00080	74 ee		 je	 SHORT $LL56@try_emplac

; 3592 :             if (!n)

  00082	85 c9		 test	 ecx, ecx
  00084	75 d0		 jne	 SHORT $LL26@try_emplac
$LN2@try_emplac:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00086	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  00089	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0
  00090	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00093	f7 de		 neg	 esi
  00095	1b f6		 sbb	 esi, esi
  00097	23 f0		 and	 esi, eax
  00099	89 75 e8	 mov	 DWORD PTR _a$3[ebp], esi

; 2066 :           a.create_node();

  0009c	8d 4d e8	 lea	 ecx, DWORD PTR _a$3[ebp]
  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a6	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::create_node

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  000ab	8b 5d ec	 mov	 ebx, DWORD PTR _a$3[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000ae	83 ec 08	 sub	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

  000b1	8b 55 0c	 mov	 edx, DWORD PTR _k$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000b4	8b c4		 mov	 eax, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  000b6	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

  000b9	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000bb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$?0ABK$$Z$$V@?$pair@$$CBKK@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,unsigned long>::pair<unsigned long const ,unsigned long><unsigned long const &>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2071 :           return a.release();

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR _a$3[ebp]

; 1957 :           node_ = node_pointer();

  000cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$3[ebp+4], 0

; 2071 :           return a.release();

  000d2	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000d7	89 75 e8	 mov	 DWORD PTR _b$2[ebp], esi
  000da	89 5d ec	 mov	 DWORD PTR _b$2[ebp+4], ebx

; 4542 :         if (!buckets_) {

  000dd	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000e1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000eb	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  000ee	75 37		 jne	 SHORT $LN102@try_emplac

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000f0	56		 push	 esi
  000f1	8b cf		 mov	 ecx, edi
  000f3	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000f8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000fb	3b c8		 cmp	 ecx, eax
  000fd	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00100	51		 push	 ecx
  00101	8b cf		 mov	 ecx, edi
  00103	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  00108	eb 4a		 jmp	 SHORT $LN105@try_emplac
$LN151@try_emplac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0010a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0010d	89 08		 mov	 DWORD PTR [eax], ecx
  0010f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
$LN102@try_emplac:

; 4544 :         } else if (size > max_load_) {

  00127	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  0012a	76 28		 jbe	 SHORT $LN105@try_emplac

; 4545 :           std::size_t num_buckets =

  0012c	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0012e	ba 01 00 00 00	 mov	 edx, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  00133	d1 e9		 shr	 ecx, 1
  00135	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00137	3b f0		 cmp	 esi, eax
  00139	0f 42 d1	 cmovb	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0013c	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0013e	03 57 08	 add	 edx, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  00141	52		 push	 edx
  00142	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00147	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0014a	74 08		 je	 SHORT $LN105@try_emplac

; 4549 :             this->rehash_impl(num_buckets);

  0014c	50		 push	 eax
  0014d	8b cf		 mov	 ecx, edi
  0014f	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN105@try_emplac:

; 2604 :           return hash % bucket_count;

  00154	8b 45 f0	 mov	 eax, DWORD PTR _key_hash$1$[ebp]
  00157	33 d2		 xor	 edx, edx
  00159	f7 77 04	 div	 DWORD PTR [edi+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0015c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  0015f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _b$2[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00166	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00169	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0016f	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 3693 :           if (!b->next_) {

  00172	8b 06		 mov	 eax, DWORD PTR [esi]
  00174	85 c0		 test	 eax, eax
  00176	75 24		 jne	 SHORT $LN114@try_emplac

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00178	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0017b	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0017e	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	85 c0		 test	 eax, eax
  00185	74 0b		 je	 SHORT $LN116@try_emplac

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00187	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018a	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0018f	89 1c 82	 mov	 DWORD PTR [edx+eax*4], ebx
$LN116@try_emplac:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  00192	89 0e		 mov	 DWORD PTR [esi], ecx

; 3702 :             n->next_ = start_node->next_;

  00194	8b 01		 mov	 eax, DWORD PTR [ecx]
  00196	89 03		 mov	 DWORD PTR [ebx], eax

; 3703 :             start_node->next_ = n;

  00198	89 19		 mov	 DWORD PTR [ecx], ebx

; 3704 :           } else {

  0019a	eb 08		 jmp	 SHORT $LN115@try_emplac
$LN114@try_emplac:

; 3705 :             n->next_ = b->next_->next_;

  0019c	8b 00		 mov	 eax, DWORD PTR [eax]
  0019e	89 03		 mov	 DWORD PTR [ebx], eax

; 3706 :             b->next_->next_ = n;

  001a0	8b 06		 mov	 eax, DWORD PTR [esi]
  001a2	89 18		 mov	 DWORD PTR [eax], ebx
$LN115@try_emplac:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  001a4	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  001a7	8d 4d e8	 lea	 ecx, DWORD PTR _b$2[ebp]
  001aa	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001af	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001b2	89 18		 mov	 DWORD PTR [eax], ebx
  001b4	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  001b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c2	59		 pop	 ecx
  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi
  001c5	5b		 pop	 ebx
  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _a$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _b$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,unsigned long> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -140						; size = 52
$T3 = -88						; size = 44
$T4 = -44						; size = 16
__Lock$5 = -28						; size = 4
__Psave$1$ = -24					; size = 4
$T6 = -24						; size = 4
__Lock$7 = -20						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$9 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 426  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 427  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002a	6a 00		 push	 0
  0002c	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
  00036	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  0003b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id

; 428  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  00050	85 ff		 test	 edi, edi
  00052	75 2f		 jne	 SHORT $LN11@use_facet

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00054	57		 push	 edi
  00055	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00058	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  0005d	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, edi ; std::ctype<wchar_t>::id
  00063	75 10		 jne	 SHORT $LN12@use_facet

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0006a	40		 inc	 eax
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00070	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN12@use_facet:

; 109  :                 }
; 110  :                 _END_LOCK()

  00075	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00078	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
$LN11@use_facet:

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00083	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00086	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00089	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  0008c	73 10		 jae	 SHORT $LN19@use_facet
  0008e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00091	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  00094	85 f6		 test	 esi, esi
  00096	0f 85 ef 00 00
	00		 jne	 $LN65@use_facet
  0009c	eb 02		 jmp	 SHORT $LN68@use_facet
$LN19@use_facet:

; 371  :     }
; 372  : 
; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009e	33 f6		 xor	 esi, esi
$LN68@use_facet:

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  000a0	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a4	74 10		 je	 SHORT $LN14@use_facet

; 376  :             return _Facptr; // found facet or not transparent
; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a6	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  000ab	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000ae	73 0e		 jae	 SHORT $LN69@use_facet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b3	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN14@use_facet:

; 429  : 
; 430  :     const size_t _Id         = _Facet::id;
; 431  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 432  : 
; 433  :     if (!_Pf) {

  000b6	85 f6		 test	 esi, esi
  000b8	0f 85 cd 00 00
	00		 jne	 $LN65@use_facet
$LN69@use_facet:

; 434  :         if (_Psave) {

  000be	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000c1	85 c0		 test	 eax, eax
  000c3	74 07		 je	 SHORT $LN3@use_facet

; 435  :             _Pf = _Psave; // lazy facet already allocated

  000c5	8b f0		 mov	 esi, eax

; 436  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c7	e9 bf 00 00 00	 jmp	 $LN65@use_facet
$LN3@use_facet:

; 2917 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  000cc	6a 44		 push	 68			; 00000044H
  000ce	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d3	8b f0		 mov	 esi, eax
  000d5	83 c4 04	 add	 esp, 4
  000d8	89 75 e8	 mov	 DWORD PTR $T6[ebp], esi
  000db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000df	85 f6		 test	 esi, esi
  000e1	74 78		 je	 SHORT $LN24@use_facet

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000e3	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e9	85 c9		 test	 ecx, ecx
  000eb	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 109  :         return _Myptr ? _Myptr : &_Nul;

  000ed	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f0	85 c0		 test	 eax, eax
  000f2	75 0a		 jne	 SHORT $LN33@use_facet
  000f4	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f7	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  000f9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2917 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  000fe	50		 push	 eax
  000ff	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00105	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 199  :         return ::_Getctype();

  0010a	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2917 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  0010d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T8[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 199  :         return ::_Getctype();

  00114	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00115	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2911 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  0011c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 199  :         return ::_Getctype();

  00122	e8 00 00 00 00	 call	 __Getctype
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2933 :         _Ctype = _Lobj._Getctype();

  00127	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 203  :         return ::_Getcvt();

  0012a	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  0012d	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2933 :         _Ctype = _Lobj._Getctype();

  0012e	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 203  :         return ::_Getcvt();

  00132	e8 00 00 00 00	 call	 __Getcvt
  00137	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2934 :         _Cvt   = _Lobj._Getcvt();

  0013a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0013d	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  00141	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00145	0f 11 46 28	 movups	 XMMWORD PTR [esi+40], xmm0
  00149	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  0014e	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0
  00153	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00156	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 2917 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  00159	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  0015b	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0015d	f6 45 f0 01	 test	 BYTE PTR $T8[ebp], 1
  00161	74 0b		 je	 SHORT $LN29@use_facet
  00163	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00169	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0016e	89 75 08	 mov	 DWORD PTR __Psave_guard$9[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 449  :             _Facet_Register(_Pfmod);

  00171	56		 push	 esi
  00172	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00176	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 450  : #endif // defined(_M_CEE)
; 451  : 
; 452  :             _Pfmod->_Incref();

  0017b	8b 16		 mov	 edx, DWORD PTR [esi]
  0017d	83 c4 04	 add	 esp, 4
  00180	8b ce		 mov	 ecx, esi
  00182	ff 52 04	 call	 DWORD PTR [edx+4]

; 453  :             _Facetptr<_Facet>::_Psave = _Psave;

  00185	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
$LN65@use_facet:

; 454  :             _Pf                       = _Psave;
; 455  : 
; 456  :             (void) _Psave_guard.release();
; 457  :         }
; 458  :     }
; 459  : 
; 460  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0018b	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0018e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00193	8b c6		 mov	 eax, esi

; 461  :     _END_LOCK()
; 462  : } // end of use_facet body

  00195	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00198	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019f	59		 pop	 ecx
  001a0	5f		 pop	 edi
  001a1	5e		 pop	 esi
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$2:
  00008	6a 44		 push	 68			; 00000044H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T6[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$9[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 35		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 12		 jb	 SHORT $LN15@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0001f	50		 push	 eax
  00020	ff 36		 push	 DWORD PTR [esi]
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
$LN15@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002a	33 c0		 xor	 eax, eax
  0002c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00033	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0003a	66 89 06	 mov	 WORD PTR [esi], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  0003d	83 c6 18	 add	 esi, 24			; 00000018H
  00040	3b f7		 cmp	 esi, edi
  00042	75 cc		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00044	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z PROC		; std::_Destroy_in_place<wchar_t *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ENDP		; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z
_TEXT	SEGMENT
_alloc$ = 8						; size = 4
_oldPtr$ = 12						; size = 4
_newPointer$1$ = 16					; size = 4
_oldSize$ = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 150  : 	CRYPTOPP_ASSERT((oldPtr && oldSize) || !(oldPtr || oldSize));
; 151  : 	if (oldSize == newSize)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _oldSize$[ebp]
  00007	56		 push	 esi
  00008	8b 75 14	 mov	 esi, DWORD PTR _newSize$[ebp]
  0000b	3b de		 cmp	 ebx, esi
  0000d	75 07		 jne	 SHORT $LN2@StandardRe

; 152  : 		return oldPtr;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _oldPtr$[ebp]
  00012	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00013	5b		 pop	 ebx
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@StandardRe:

; 153  : 
; 154  : 	if (preserve)

  00016	80 7d 18 00	 cmp	 BYTE PTR _preserve$[ebp], 0
  0001a	57		 push	 edi
  0001b	74 4e		 je	 SHORT $LN3@StandardRe

; 203  : 		if (size == 0)

  0001d	85 f6		 test	 esi, esi
  0001f	75 04		 jne	 SHORT $LN8@StandardRe

; 204  : 			return NULLPTR;

  00021	33 c0		 xor	 eax, eax
  00023	eb 09		 jmp	 SHORT $LN69@StandardRe
$LN8@StandardRe:

; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));
; 210  : #endif
; 211  : 
; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0002b	83 c4 04	 add	 esp, 4
$LN69@StandardRe:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0002e	3b f3		 cmp	 esi, ebx
  00030	89 45 10	 mov	 DWORD PTR _newPointer$1$[ebp], eax
  00033	8b cb		 mov	 ecx, ebx
  00035	0f 42 ce	 cmovb	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 159  : 		if (oldPtr && newPointer) {memcpy_s(newPointer, copySize, oldPtr, copySize);}

  00038	8b 75 0c	 mov	 esi, DWORD PTR _oldPtr$[ebp]
  0003b	85 f6		 test	 esi, esi
  0003d	74 13		 je	 SHORT $LN19@StandardRe
  0003f	85 c0		 test	 eax, eax
  00041	74 0f		 je	 SHORT $LN19@StandardRe
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00043	85 c9		 test	 ecx, ecx
  00045	74 0b		 je	 SHORT $LN19@StandardRe

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);
; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)
; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);
; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);
; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memcpy
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@StandardRe:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00052	32 c0		 xor	 al, al
  00054	8b fe		 mov	 edi, esi
  00056	8b cb		 mov	 ecx, ebx
  00058	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate

; 160  : 		alloc.deallocate(oldPtr, oldSize);
; 161  : 		return newPointer;

  00060	8b 45 10	 mov	 eax, DWORD PTR _newPointer$1$[ebp]

; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00063	83 c4 04	 add	 esp, 4
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00068	5b		 pop	 ebx
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN3@StandardRe:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0006b	8b 55 0c	 mov	 edx, DWORD PTR _oldPtr$[ebp]
  0006e	32 c0		 xor	 al, al
  00070	8b fa		 mov	 edi, edx
  00072	8b cb		 mov	 ecx, ebx
  00074	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0007c	83 c4 04	 add	 esp, 4

; 203  : 		if (size == 0)

  0007f	85 f6		 test	 esi, esi
  00081	75 07		 jne	 SHORT $LN64@StandardRe
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi

; 204  : 			return NULLPTR;

  00085	33 c0		 xor	 eax, eax

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00087	5b		 pop	 ebx
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN64@StandardRe:

; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00090	83 c4 04	 add	 esp, 4
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00095	5b		 pop	 ebx
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 20
__Ok$ = -68						; size = 8
$T3 = -60						; size = 8
__State$ = -56						; size = 4
$T4 = -52						; size = 8
__New_ptr$5 = -48					; size = 4
__New_ptr$1$ = -44					; size = 4
tv1067 = -40						; size = 4
__Old$1$ = -36						; size = 4
__Ctype_fac$1$ = -32					; size = 4
__Meta$1$ = -28						; size = 4
__Size$1$ = -24						; size = 4
__Changed$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4586 :     basic_istream<_Elem, _Traits>&& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 81   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  0002b	8b 5d 08	 mov	 ebx, DWORD PTR __Istr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4592 :     typename _Myis::iostate _State = _Myis::goodbit;

  0002e	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 81   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00030	8b fb		 mov	 edi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4592 :     typename _Myis::iostate _State = _Myis::goodbit;

  00032	89 75 c8	 mov	 DWORD PTR __State$[ebp], esi

; 4593 :     bool _Changed                  = false;

  00035	c6 45 ef 00	 mov	 BYTE PTR __Changed$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 81   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00039	89 7d bc	 mov	 DWORD PTR __Ok$[ebp], edi

; 82   :             const auto _Rdbuf = _Myistr.rdbuf();

  0003c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]

; 83   :             if (_Rdbuf) {

  00045	85 c9		 test	 ecx, ecx
  00047	74 05		 je	 SHORT $LN25@operator

; 84   :                 _Rdbuf->_Lock();

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	ff 50 04	 call	 DWORD PTR [eax+4]
$LN25@operator:

; 103  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  0004e	6a 00		 push	 0
  00050	8b cb		 mov	 ecx, ebx
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00059	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Ipfx
  0005e	88 45 c0	 mov	 BYTE PTR __Ok$[ebp+4], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4594 :     const typename _Myis::sentry _Ok(_Istr);

  00061	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 4595 : 
; 4596 :     if (_Ok) { // state okay, extract characters

  00068	84 c0		 test	 al, al
  0006a	0f 84 1c 02 00
	00		 je	 $LN19@operator

; 4597 :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00070	8b 03		 mov	 eax, DWORD PTR [ebx]
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 373  :         return *_Ploc;

  00075	8b 44 18 30	 mov	 eax, DWORD PTR [eax+ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00079	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 268  :         _Ptr->_Incref();

  0007c	8b ce		 mov	 ecx, esi
  0007e	89 75 d0	 mov	 DWORD PTR $T4[ebp+4], esi
  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4597 :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00086	8d 45 cc	 lea	 eax, DWORD PTR $T4[ebp]
  00089	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  00093	83 c4 04	 add	 esp, 4
  00096	89 45 e0	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  00099	85 f6		 test	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  0009b	74 13		 je	 SHORT $LN34@operator

; 352  :             delete _Ptr->_Decref();

  0009d	8b 06		 mov	 eax, DWORD PTR [esi]
  0009f	8b ce		 mov	 ecx, esi
  000a1	ff 50 08	 call	 DWORD PTR [eax+8]
  000a4	8b c8		 mov	 ecx, eax
  000a6	85 c9		 test	 ecx, ecx
  000a8	74 06		 je	 SHORT $LN34@operator
  000aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ac	6a 01		 push	 1
  000ae	ff 10		 call	 DWORD PTR [eax]
$LN34@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  000b0	8b 7d 0c	 mov	 edi, DWORD PTR __Str$[ebp]

; 2135 :         value_type* _Result = _Bx._Buf;

  000b3	8b c7		 mov	 eax, edi

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  000b5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2136 :         if (_Large_string_engaged()) {

  000bc	83 7f 14 08	 cmp	 DWORD PTR [edi+20], 8
  000c0	72 02		 jb	 SHORT $LN45@operator

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000c2	8b 07		 mov	 eax, DWORD PTR [edi]
$LN45@operator:

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  000c4	33 c9		 xor	 ecx, ecx

; 4598 :         _Str.erase();
; 4599 : 
; 4600 :         _TRY_IO_BEGIN

  000c6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  000ca	66 89 08	 mov	 WORD PTR [eax], cx

; 4601 :         _Mysizt _Size;
; 4602 :         if (0 < _Istr.width() && static_cast<_Mysizt>(_Istr.width()) < _Str.max_size()) {

  000cd	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d2	8b 54 18 20	 mov	 edx, DWORD PTR [eax+ebx+32]
  000d6	89 55 e8	 mov	 DWORD PTR __Size$1$[ebp], edx
  000d9	39 4c 18 24	 cmp	 DWORD PTR [eax+ebx+36], ecx
  000dd	7c 0e		 jl	 SHORT $LN7@operator
  000df	7f 04		 jg	 SHORT $LN138@operator
  000e1	85 d2		 test	 edx, edx
  000e3	74 08		 je	 SHORT $LN7@operator
$LN138@operator:
  000e5	81 fa fe ff ff
	7f		 cmp	 edx, 2147483646		; 7ffffffeH
  000eb	72 07		 jb	 SHORT $LN8@operator
$LN7@operator:

; 4603 :             _Size = static_cast<_Mysizt>(_Istr.width());
; 4604 :         } else {
; 4605 :             _Size = _Str.max_size();

  000ed	c7 45 e8 fe ff
	ff 7f		 mov	 DWORD PTR __Size$1$[ebp], 2147483646 ; 7ffffffeH
$LN8@operator:

; 4606 :         }
; 4607 : 
; 4608 :         typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000f4	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 231  :         return *_IGnext ? *_IGcount : 0;

  000f8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  000fb	8b 10		 mov	 edx, DWORD PTR [eax]
  000fd	85 d2		 test	 edx, edx
  000ff	74 0d		 je	 SHORT $LN52@operator
  00101	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 131  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();

  00104	83 38 00	 cmp	 DWORD PTR [eax], 0
  00107	7e 05		 jle	 SHORT $LN52@operator
  00109	0f b7 32	 movzx	 esi, WORD PTR [edx]
  0010c	eb 0a		 jmp	 SHORT $LN144@operator
$LN52@operator:
  0010e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00110	ff 50 18	 call	 DWORD PTR [eax+24]
$LN147@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4610 :         for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc()) {

  00113	0f b7 c0	 movzx	 eax, ax
  00116	8b f0		 mov	 esi, eax
$LN144@operator:
  00118	83 7d e8 00	 cmp	 DWORD PTR __Size$1$[ebp], 0
  0011c	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00121	89 75 e4	 mov	 DWORD PTR __Meta$1$[ebp], esi
  00124	0f 86 35 01 00
	00		 jbe	 $LN141@operator

; 4611 :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  0012a	66 3b c6	 cmp	 ax, si
  0012d	75 0a		 jne	 SHORT $LN9@operator

; 4612 :                 _State |= _Myis::eofbit;

  0012f	be 01 00 00 00	 mov	 esi, 1

; 4613 :                 break;

  00134	e9 49 01 00 00	 jmp	 $LN3@operator
$LN9@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2849 :         return do_is(_Maskval, _Ch);

  00139	8b 4d e0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  0013c	56		 push	 esi
  0013d	6a 48		 push	 72			; 00000048H
  0013f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00141	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00144	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4614 :             } else if (_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {

  00146	84 c0		 test	 al, al
  00148	0f 85 11 01 00
	00		 jne	 $LN141@operator

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0014e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00151	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00154	89 4d dc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00157	3b d9		 cmp	 ebx, ecx
  00159	73 1f		 jae	 SHORT $LN65@operator

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  0015b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0015e	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00161	8b c7		 mov	 eax, edi

; 2136 :         if (_Large_string_engaged()) {

  00163	83 f9 08	 cmp	 ecx, 8
  00166	72 02		 jb	 SHORT $LN68@operator

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00168	8b 07		 mov	 eax, DWORD PTR [edi]
$LN68@operator:

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0016a	33 c9		 xor	 ecx, ecx
  0016c	66 89 34 58	 mov	 WORD PTR [eax+ebx*2], si
  00170	66 89 4c 58 02	 mov	 WORD PTR [eax+ebx*2+2], cx

; 3614 :             return;

  00175	e9 c8 00 00 00	 jmp	 $LN75@operator
$LN65@operator:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0017a	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0017f	2b c3		 sub	 eax, ebx
  00181	83 f8 01	 cmp	 eax, 1
  00184	0f 82 76 01 00
	00		 jb	 $LN149@operator

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0018a	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0018d	83 ce 07	 or	 esi, 7
  00190	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00196	77 27		 ja	 SHORT $LN145@operator

; 4203 :             return _Max;
; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00198	8b d1		 mov	 edx, ecx
  0019a	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0019f	d1 ea		 shr	 edx, 1
  001a1	2b c2		 sub	 eax, edx
  001a3	3b c8		 cmp	 ecx, eax
  001a5	77 18		 ja	 SHORT $LN145@operator

; 4207 :             return _Max;
; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001a7	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  001aa	3b f0		 cmp	 esi, eax
  001ac	0f 42 f0	 cmovb	 esi, eax

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001af	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  001b2	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  001b7	0f 87 48 01 00
	00		 ja	 $LN150@operator
  001bd	eb 0a		 jmp	 SHORT $LN88@operator
$LN145@operator:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  001bf	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  001c4	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN88@operator:
  001c9	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  001d1	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 4260 :         _My_data._Myres       = _New_capacity;

  001d4	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001d7	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  001da	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  001dd	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001e0	89 45 d4	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  001e3	8b 5d dc	 mov	 ebx, DWORD PTR __Old$1$[ebp]
  001e6	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  001e9	89 45 d0	 mov	 DWORD PTR __New_ptr$5[ebp], eax
  001ec	89 75 d8	 mov	 DWORD PTR tv1067[ebp], esi
  001ef	51		 push	 ecx
  001f0	83 fb 08	 cmp	 ebx, 8
  001f3	72 2d		 jb	 SHORT $LN74@operator

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  001f5	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  001f7	56		 push	 esi
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001fe	8b 4d d8	 mov	 ecx, DWORD PTR tv1067[ebp]
  00201	8b 45 e4	 mov	 eax, DWORD PTR __Meta$1$[ebp]
  00204	66 89 01	 mov	 WORD PTR [ecx], ax

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00207	33 c0		 xor	 eax, eax
  00209	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0020d	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  00214	50		 push	 eax
  00215	56		 push	 esi
  00216	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  0021b	8b 45 d4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  0021e	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  00220	eb 1d		 jmp	 SHORT $LN146@operator
$LN74@operator:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00222	57		 push	 edi
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00229	8b 45 e4	 mov	 eax, DWORD PTR __Meta$1$[ebp]
  0022c	66 89 06	 mov	 WORD PTR [esi], ax

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0022f	33 c0		 xor	 eax, eax
  00231	66 89 46 02	 mov	 WORD PTR [esi+2], ax

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00235	8d 45 d0	 lea	 eax, DWORD PTR __New_ptr$5[ebp]
  00238	50		 push	 eax
  00239	57		 push	 edi
  0023a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN146@operator:

; 4615 :                 break; // whitespace, quit
; 4616 :             } else { // add character to string
; 4617 :                 _Str.push_back(_Traits::to_char_type(_Meta));
; 4618 :                 _Changed = true;

  0023f	83 c4 14	 add	 esp, 20			; 00000014H
$LN75@operator:

; 4610 :         for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc()) {

  00242	8b 5d 08	 mov	 ebx, DWORD PTR __Istr$[ebp]
  00245	ff 4d e8	 dec	 DWORD PTR __Size$1$[ebp]

; 4615 :                 break; // whitespace, quit
; 4616 :             } else { // add character to string
; 4617 :                 _Str.push_back(_Traits::to_char_type(_Meta));
; 4618 :                 _Changed = true;

  00248	c6 45 ef 01	 mov	 BYTE PTR __Changed$[ebp], 1
  0024c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0024e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00251	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
  00255	e8 00 00 00 00	 call	 ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::snextc
  0025a	e9 b4 fe ff ff	 jmp	 $LN147@operator
$LN141@operator:
  0025f	33 f6		 xor	 esi, esi
  00261	eb 1f		 jmp	 SHORT $LN3@operator
__catch$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0:

; 4619 :             }
; 4620 :         }
; 4621 :         _CATCH_IO_(_Myis, _Istr)

  00263	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00266	6a 01		 push	 1
  00268	6a 04		 push	 4
  0026a	8b 02		 mov	 eax, DWORD PTR [edx]
  0026c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0026f	03 ca		 add	 ecx, edx
  00271	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  00276	b8 00 00 00 00	 mov	 eax, $LN20@operator
  0027b	c3		 ret	 0
$LN20@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
  0027c	8b 75 c8	 mov	 esi, DWORD PTR __State$[ebp]
  0027f	8b 5d 08	 mov	 ebx, DWORD PTR __Istr$[ebp]
$LN3@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4622 :     }
; 4623 : 
; 4624 :     _Istr.width(0);

  00282	8b 7d bc	 mov	 edi, DWORD PTR __Ok$[ebp]
  00285	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN19@operator:

; 4625 :     if (!_Changed) {

  0028c	80 7d ef 00	 cmp	 BYTE PTR __Changed$[ebp], 0
  00290	8b 03		 mov	 eax, DWORD PTR [ebx]
  00292	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  00295	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  0029d	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4625 :     if (!_Changed) {

  002a5	75 03		 jne	 SHORT $LN13@operator

; 4626 :         _State |= _Myis::failbit;

  002a7	83 ce 02	 or	 esi, 2
$LN13@operator:

; 4629 :     _Istr.setstate(_State);

  002aa	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  002ac	b9 04 00 00 00	 mov	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4629 :     _Istr.setstate(_State);

  002b1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  002b4	8b 44 1a 0c	 mov	 eax, DWORD PTR [edx+ebx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4629 :     _Istr.setstate(_State);

  002b8	03 d3		 add	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  002ba	0b c6		 or	 eax, esi

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  002bc	33 f6		 xor	 esi, esi
  002be	39 72 38	 cmp	 DWORD PTR [edx+56], esi
  002c1	0f 45 ce	 cmovne	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  002c4	0b c8		 or	 ecx, eax

; 245  :         _Mystate             = _State;
; 246  :         const auto _Filtered = _State & _Except;

  002c6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002c9	83 e1 17	 and	 ecx, 23			; 00000017H
  002cc	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  002cf	23 c1		 and	 eax, ecx

; 247  :         if (_Filtered) {

  002d1	75 37		 jne	 SHORT $LN151@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 89   :             const auto _Rdbuf = _Myistr.rdbuf();

  002d3	8b 07		 mov	 eax, DWORD PTR [edi]
  002d5	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  002dc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002df	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]

; 90   :             if (_Rdbuf) {

  002e3	85 c9		 test	 ecx, ecx
  002e5	74 05		 je	 SHORT $LN127@operator

; 91   :                 _Rdbuf->_Unlock();

  002e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e9	ff 52 08	 call	 DWORD PTR [edx+8]
$LN127@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4630 :     return _Istr;

  002ec	8b c3		 mov	 eax, ebx

; 4631 : }

  002ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f8	59		 pop	 ecx
  002f9	5f		 pop	 edi
  002fa	5e		 pop	 esi
  002fb	5b		 pop	 ebx
  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c3		 ret	 0
$LN149@operator:

; 4250 :             _Xlen_string(); // result too long

  00300	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN150@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00305	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN151@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  0030a	a8 04		 test	 al, 4
  0030c	74 07		 je	 SHORT $LN116@operator

; 254  :                 _Msg = "ios_base::badbit set";

  0030e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00313	eb 0f		 jmp	 SHORT $LN118@operator
$LN116@operator:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00315	a8 02		 test	 al, 2
  00317	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0031c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00321	0f 44 f0	 cmove	 esi, eax
$LN118@operator:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  00324	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  00327	6a 01		 push	 1
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0032f	83 c4 08	 add	 esp, 8
  00332	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00335	50		 push	 eax
  00336	56		 push	 esi
  00337	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0033c	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00341	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  00344	50		 push	 eax
  00345	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN143@operator:
  0034a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$4:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
__unwindfunclet$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$3:
  00010	8d 4d cc	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4635 :     basic_istream<_Elem, _Traits>& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4637 : }

  00003	5d		 pop	 ebp

; 4636 :     return _STD move(_Istr) >> _Str;

  00004	e9 00 00 00 00	 jmp	 ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@$$QAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN16@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN16@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN24@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN24@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN12@InputRejec

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN12@InputRejec:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
__New_ptr$2 = -44					; size = 4
_this$ = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	89 75 d0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00031	6a 40		 push	 64			; 00000040H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00033	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0003c	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00043	8b c8		 mov	 ecx, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00045	c7 45 e8 37 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 55 ; 00000037H
  0004c	89 4d d4	 mov	 DWORD PTR __New_ptr$2[ebp], ecx

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0004f	c7 45 ec 3f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 63 ; 0000003fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00056	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00059	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+16
  00060	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00064	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+32
  0006b	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  0006f	a1 30 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+48
  00074	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00077	66 a1 34 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+52
  0007d	66 89 41 34	 mov	 WORD PTR [ecx+52], ax
  00081	a0 36 00 00 00	 mov	 al, BYTE PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+54
  00086	88 41 36	 mov	 BYTE PTR [ecx+54], al

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00089	8d 45 d4	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  0008c	50		 push	 eax
  0008d	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00090	c6 41 37 00	 mov	 BYTE PTR [ecx+55], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  000a7	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000ac	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000af	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b3	50		 push	 eax
  000b4	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000b7	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  000bd	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000c4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000c9	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  000cc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000d2	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000d5	72 0d		 jb	 SHORT $LN71@InputRejec

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000d7	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d8	51		 push	 ecx
  000d9	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  000dc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000e1	83 c4 08	 add	 esp, 8
$LN71@InputRejec:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  000e4	8b c6		 mov	 eax, esi
  000e6	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  000ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5e		 pop	 esi
  000f8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$3:
  00008	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN16@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN16@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN24@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN24@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN12@InputRejec

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN12@InputRejec:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
__New_ptr$2 = -44					; size = 4
_this$ = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	89 75 d0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00031	6a 40		 push	 64			; 00000040H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00033	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0003c	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00043	8b c8		 mov	 ecx, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00045	c7 45 e8 37 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 55 ; 00000037H
  0004c	89 4d d4	 mov	 DWORD PTR __New_ptr$2[ebp], ecx

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0004f	c7 45 ec 3f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 63 ; 0000003fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00056	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00059	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+16
  00060	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00064	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+32
  0006b	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  0006f	a1 30 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+48
  00074	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00077	66 a1 34 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+52
  0007d	66 89 41 34	 mov	 WORD PTR [ecx+52], ax
  00081	a0 36 00 00 00	 mov	 al, BYTE PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+54
  00086	88 41 36	 mov	 BYTE PTR [ecx+54], al

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00089	8d 45 d4	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  0008c	50		 push	 eax
  0008d	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00090	c6 41 37 00	 mov	 BYTE PTR [ecx+55], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  000a7	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000ac	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000af	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b3	50		 push	 eax
  000b4	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000b7	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  000bd	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000c4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000c9	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  000cc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000d2	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000d5	72 0d		 jb	 SHORT $LN71@InputRejec

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000d7	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d8	51		 push	 ecx
  000d9	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  000dc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000e1	83 c4 08	 add	 esp, 8
$LN71@InputRejec:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  000e4	8b c6		 mov	 eax, esi
  000e6	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  000ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5e		 pop	 esi
  000f8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$3:
  00008	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -124						; size = 52
$T3 = -72						; size = 44
__Lock$4 = -28						; size = 4
__Psave$1$ = -24					; size = 4
$T5 = -24						; size = 4
__Lock$6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$8 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<wchar_t,char,_Mbstatet> >, COMDAT

; 426  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 427  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$codecvt@_WDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<wchar_t,char,_Mbstatet>::id

; 428  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<wchar_t,char,_Mbstatet> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$codecvt@_WDU_Mbstatet@@@std@@2V0locale@2@A, edi ; std::codecvt<wchar_t,char,_Mbstatet>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$codecvt@_WDU_Mbstatet@@@std@@2V0locale@2@A, eax ; std::codecvt<wchar_t,char,_Mbstatet>::id
$LN12@use_facet:

; 109  :                 }
; 110  :                 _END_LOCK()

  00072	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$codecvt@_WDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<wchar_t,char,_Mbstatet>::id
$LN11@use_facet:

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00083	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00086	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00089	73 10		 jae	 SHORT $LN19@use_facet
  0008b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008e	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  00091	85 f6		 test	 esi, esi
  00093	0f 85 d9 00 00
	00		 jne	 $LN63@use_facet
  00099	eb 02		 jmp	 SHORT $LN66@use_facet
$LN19@use_facet:

; 371  :     }
; 372  : 
; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009b	33 f6		 xor	 esi, esi
$LN66@use_facet:

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  0009d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a1	74 10		 je	 SHORT $LN14@use_facet

; 376  :             return _Facptr; // found facet or not transparent
; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a3	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  000a8	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000ab	73 0e		 jae	 SHORT $LN67@use_facet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ad	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b0	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN14@use_facet:

; 429  : 
; 430  :     const size_t _Id         = _Facet::id;
; 431  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 432  : 
; 433  :     if (!_Pf) {

  000b3	85 f6		 test	 esi, esi
  000b5	0f 85 b7 00 00
	00		 jne	 $LN63@use_facet
$LN67@use_facet:

; 434  :         if (_Psave) {

  000bb	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	74 07		 je	 SHORT $LN3@use_facet

; 435  :             _Pf = _Psave; // lazy facet already allocated

  000c2	8b f0		 mov	 esi, eax

; 436  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c4	e9 a9 00 00 00	 jmp	 $LN63@use_facet
$LN3@use_facet:

; 2014 :             *_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));

  000c9	6a 34		 push	 52			; 00000034H
  000cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d0	8b f0		 mov	 esi, eax
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000dc	85 f6		 test	 esi, esi
  000de	74 65		 je	 SHORT $LN24@use_facet

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000e0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 109  :         return _Myptr ? _Myptr : &_Nul;

  000ea	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000ed	85 c0		 test	 eax, eax
  000ef	75 0a		 jne	 SHORT $LN33@use_facet
  000f1	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f4	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  000f6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2014 :             *_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));

  000fb	50		 push	 eax
  000fc	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  000ff	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 203  :         return ::_Getcvt();

  00104	8d 45 b8	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2014 :             *_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));

  00107	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 203  :         return ::_Getcvt();

  0010e	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0010f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2007 :     explicit __CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0) : codecvt_base(_Refs) {

  00116	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo

; 203  :         return ::_Getcvt();

  0011c	e8 00 00 00 00	 call	 __Getcvt
  00121	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2024 :         _Cvt = _Lobj._Getcvt();

  00124	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00127	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0012b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0012f	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  00133	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00138	66 0f d6 46 28	 movq	 QWORD PTR [esi+40], xmm0
  0013d	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00140	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 2014 :             *_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));

  00143	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00145	33 f6		 xor	 esi, esi
$LN25@use_facet:
  00147	f6 45 f0 01	 test	 BYTE PTR $T7[ebp], 1
  0014b	74 08		 je	 SHORT $LN29@use_facet
  0014d	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00150	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00155	89 75 08	 mov	 DWORD PTR __Psave_guard$8[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 449  :             _Facet_Register(_Pfmod);

  00158	56		 push	 esi
  00159	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015d	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 450  : #endif // defined(_M_CEE)
; 451  : 
; 452  :             _Pfmod->_Incref();

  00162	8b 16		 mov	 edx, DWORD PTR [esi]
  00164	83 c4 04	 add	 esp, 4
  00167	8b ce		 mov	 ecx, esi
  00169	ff 52 04	 call	 DWORD PTR [edx+4]

; 453  :             _Facetptr<_Facet>::_Psave = _Psave;

  0016c	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::codecvt<wchar_t,char,_Mbstatet> >::_Psave
$LN63@use_facet:

; 454  :             _Pf                       = _Psave;
; 455  : 
; 456  :             (void) _Psave_guard.release();
; 457  :         }
; 458  :     }
; 459  : 
; 460  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00172	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00175	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0017a	8b c6		 mov	 eax, esi

; 461  :     _END_LOCK()
; 462  : } // end of use_facet body

  0017c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00186	59		 pop	 ecx
  00187	5f		 pop	 edi
  00188	5e		 pop	 esi
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$2:
  00008	6a 34		 push	 52			; 00000034H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<wchar_t,char,_Mbstatet> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
tv460 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00015	2b d3		 sub	 edx, ebx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cb		 sub	 ecx, ebx
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b f2		 mov	 esi, edx
  00037	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0003a	03 f2		 add	 esi, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0003c	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00042	0f 84 20 01 00
	00		 je	 $LN56@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	2b cb		 sub	 ecx, ebx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00052	46		 inc	 esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00055	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0005a	89 75 f8	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005d	c1 fa 02	 sar	 edx, 2
  00060	8b ca		 mov	 ecx, edx
  00062	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00065	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00067	8b d1		 mov	 edx, ecx
  00069	d1 ea		 shr	 edx, 1
  0006b	2b c2		 sub	 eax, edx
  0006d	3b c8		 cmp	 ecx, eax
  0006f	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00071	8b c6		 mov	 eax, esi
  00073	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00075	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00078	3b c6		 cmp	 eax, esi
  0007a	0f 42 c6	 cmovb	 eax, esi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007d	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00082	0f 87 e5 00 00
	00		 ja	 $LN57@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00088	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0008b	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008e	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  0008f	89 45 f4	 mov	 DWORD PTR tv460[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00092	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00097	8b d8		 mov	 ebx, eax
  00099	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009c	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000a2	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000a8	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  000af	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000b6	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000b9	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000bc	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000bf	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000c4	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000c9	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000d0	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d7	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000da	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000dd	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000e0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e2	3b c2		 cmp	 eax, edx
  000e4	75 04		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000e6	8b c3		 mov	 eax, ebx

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  000e8	eb 18		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ea	57		 push	 edi
  000eb	53		 push	 ebx
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f6	83 c4 10	 add	 esp, 16			; 00000010H
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fc	83 c0 18	 add	 eax, 24			; 00000018H

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ff	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00102	57		 push	 edi
  00103	50		 push	 eax
  00104	52		 push	 edx
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0010b	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0010d	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00110	85 c9		 test	 ecx, ecx
  00112	74 35		 je	 SHORT $LN48@Emplace_re

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00114	57		 push	 edi
  00115	ff 77 04	 push	 DWORD PTR [edi+4]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011e	8b 37		 mov	 esi, DWORD PTR [edi]
  00120	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00125	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00128	2b ce		 sub	 ecx, esi
  0012a	f7 e9		 imul	 ecx
  0012c	c1 fa 02	 sar	 edx, 2
  0012f	8b c2		 mov	 eax, edx
  00131	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00134	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00136	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00139	c1 e0 03	 shl	 eax, 3
  0013c	50		 push	 eax
  0013d	56		 push	 esi
  0013e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00143	8b 75 f8	 mov	 esi, DWORD PTR __Newsize$1$[ebp]
  00146	83 c4 14	 add	 esp, 20			; 00000014H
$LN48@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 766  :         return _Newvec + _Whereoff;

  00149	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0014c	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  0014f	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  00152	89 1f		 mov	 DWORD PTR [edi], ebx
  00154	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00157	8b 4d f4	 mov	 ecx, DWORD PTR tv460[ebp]
  0015a	03 cb		 add	 ecx, ebx
  0015c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 766  :         return _Newvec + _Whereoff;

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx

; 767  :     }

  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 08 00	 ret	 8
$LN56@Emplace_re:

; 738  :             _Xlength();

  00168	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN57@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0016d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN54@Emplace_re:
  00172	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??_G?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 676  : 	virtual ~SymmetricCipherFinal() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  0001a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00021	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  00028	e8 00 00 00 00	 call	 ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
  0002d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00031	74 0e		 je	 SHORT $LN13@scalar
  00033	68 18 05 00 00	 push	 1304			; 00000518H
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??_G?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone, COMDAT
; _this$ = ecx

; 702  : 	Clonable * Clone() const {return static_cast<SymmetricCipher *>(new SymmetricCipherFinal<BASE, INFO>(*this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	68 18 05 00 00	 push	 1304			; 00000518H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	8b f0		 mov	 esi, eax
  00033	83 c4 04	 add	 esp, 4
  00036	89 75 f0	 mov	 DWORD PTR $T2[ebp], esi
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	85 f6		 test	 esi, esi
  00042	74 2f		 je	 SHORT $LN3@Clone
  00044	8d 4f fc	 lea	 ecx, DWORD PTR [edi-4]
  00047	51		 push	 ecx
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@ABV01@@Z
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00055	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  0005c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  00063	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  0006a	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  00071	eb 02		 jmp	 SHORT $LN4@Clone
$LN3@Clone:
  00073	33 f6		 xor	 esi, esi
$LN4@Clone:
  00075	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00078	f7 de		 neg	 esi
  0007a	1b f6		 sbb	 esi, esi
  0007c	23 c6		 and	 eax, esi
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	68 18 05 00 00	 push	 1304			; 00000518H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::Clone
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >, COMDAT
; _this$ = ecx

; 679  :  	SymmetricCipherFinal() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	6a 01		 push	 1
  0000b	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0000e	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
  00011	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00016	6a 01		 push	 1
  00018	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0001b	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00020	c7 43 10 ff ff
	ff ff		 mov	 DWORD PTR [ebx+16], -1
  00027	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  0002a	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  00031	8b c1		 mov	 eax, ecx

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00033	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0003a	f7 d8		 neg	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 303  : 	AdditiveCipherTemplate() : m_leftOver(0) {}

  0003c	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  00043	83 e0 0f	 and	 eax, 15			; 0000000fH

; 398  : 			m_allocated = true;

  00046	c6 81 59 04 00
	00 01		 mov	 BYTE PTR [ecx+1113], 1

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0004d	03 c1		 add	 eax, ecx

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0004f	89 81 68 04 00
	00		 mov	 DWORD PTR [ecx+1128], eax
  00055	8d 83 a8 04 00
	00		 lea	 eax, DWORD PTR [ebx+1192]
  0005b	c7 81 60 04 00
	00 ff ff ff 3f	 mov	 DWORD PTR [ecx+1120], 1073741823 ; 3fffffffH
  00065	c7 81 64 04 00
	00 14 01 00 00	 mov	 DWORD PTR [ecx+1124], 276 ; 00000114H
  0006f	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@

; 597  : 			m_allocated = true;

  00076	c6 40 21 01	 mov	 BYTE PTR [eax+33], 1
  0007a	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00081	c7 40 28 ff ff
	ff 3f		 mov	 DWORD PTR [eax+40], 1073741823 ; 3fffffffH
  00088	c7 40 2c 08 00
	00 00		 mov	 DWORD PTR [eax+44], 8
  0008f	89 40 30	 mov	 DWORD PTR [eax+48], eax
  00092	8d 83 e0 04 00
	00		 lea	 eax, DWORD PTR [ebx+1248]

; 597  : 			m_allocated = true;

  00098	c6 40 21 01	 mov	 BYTE PTR [eax+33], 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0009c	c7 40 28 ff ff
	ff 3f		 mov	 DWORD PTR [eax+40], 1073741823 ; 3fffffffH
  000a3	c7 40 2c 08 00
	00 00		 mov	 DWORD PTR [eax+44], 8
  000aa	89 40 30	 mov	 DWORD PTR [eax+48], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 679  :  	SymmetricCipherFinal() {}

  000ad	8b c3		 mov	 eax, ebx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000b7	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  000be	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  000c5	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  000cc	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::~SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >, COMDAT
; _this$ = ecx

; 676  : 	virtual ~SymmetricCipherFinal() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  00014	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  0001b	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  00022	e9 00 00 00 00	 jmp	 ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::~SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 09		 push	 9
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_09LADHILIA@Panama?9LE@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 09 00
	00 00		 mov	 DWORD PTR [esi+16], 9

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 09 00	 mov	 BYTE PTR [esi+9], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVSize, COMDAT
; _this$ = ecx

; 295  : 		{return INFO::IV_LENGTH;}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVRequirement, COMDAT
; _this$ = ecx

; 289  : 		{return static_cast<SimpleKeyingInterface::IV_Requirement>(INFO::IV_REQUIREMENT);}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 273  : 		{return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MaxKeyLength, COMDAT
; _this$ = ecx

; 268  : 		{return static_cast<size_t>(INFO::MAX_KEYLENGTH);}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MinKeyLength, COMDAT
; _this$ = ecx

; 263  : 		{return INFO::MIN_KEYLENGTH;}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 18 05 00 00	 push	 1304			; 00000518H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00012	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00015	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00018	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 203  : 		if (size == 0)

  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $LN11@ConcretePo
$LN12@ConcretePo:

; 204  : 			return NULLPTR;
; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00028	83 c4 04	 add	 esp, 4
$LN11@ConcretePo:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0002b	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  0002e	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00031	85 db		 test	 ebx, ebx
  00033	74 48		 je	 SHORT $LN21@ConcretePo
  00035	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00038	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  0003b	85 c9		 test	 ecx, ecx
  0003d	74 3e		 je	 SHORT $LN21@ConcretePo

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0003f	85 c0		 test	 eax, eax
  00041	75 0d		 jne	 SHORT $LN17@ConcretePo
  00043	e8 00 00 00 00	 call	 __errno
  00048	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0004e	eb 28		 jmp	 SHORT $LN50@ConcretePo
$LN17@ConcretePo:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00050	3b d1		 cmp	 edx, ecx
  00052	72 0d		 jb	 SHORT $LN19@ConcretePo

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00054	51		 push	 ecx
  00055	53		 push	 ebx
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memcpy
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	eb 1c		 jmp	 SHORT $LN21@ConcretePo
$LN19@ConcretePo:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00061	52		 push	 edx
  00062	6a 00		 push	 0
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0006d	e8 00 00 00 00	 call	 __errno
  00072	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
$LN50@ConcretePo:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 354  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00078	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN21@ConcretePo:
  0007d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00080	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00083	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00086	c6 81 59 04 00
	00 00		 mov	 BYTE PTR [ecx+1113], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0008d	8b 87 90 04 00
	00		 mov	 eax, DWORD PTR [edi+1168]
  00093	89 81 60 04 00
	00		 mov	 DWORD PTR [ecx+1120], eax
  00099	8b 97 94 04 00
	00		 mov	 edx, DWORD PTR [edi+1172]
  0009f	89 91 64 04 00
	00		 mov	 DWORD PTR [ecx+1124], edx

; 396  : 		if (size <= S && !m_allocated)

  000a5	81 bf 94 04 00
	00 14 01 00 00	 cmp	 DWORD PTR [edi+1172], 276 ; 00000114H
  000af	77 12		 ja	 SHORT $LN37@ConcretePo

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  000b1	8b c1		 mov	 eax, ecx

; 398  : 			m_allocated = true;

  000b3	c6 81 59 04 00
	00 01		 mov	 BYTE PTR [ecx+1113], 1

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  000ba	f7 d8		 neg	 eax
  000bc	83 e0 0f	 and	 eax, 15			; 0000000fH
  000bf	03 c1		 add	 eax, ecx

; 399  : 			return GetAlignedArray();

  000c1	eb 02		 jmp	 SHORT $LN38@ConcretePo
$LN37@ConcretePo:

; 400  : 		}
; 401  : 		else
; 402  : 			return m_fallbackAllocator.allocate(size, hint);

  000c3	33 c0		 xor	 eax, eax
$LN38@ConcretePo:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  000c5	89 81 68 04 00
	00		 mov	 DWORD PTR [ecx+1128], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  000cb	8b 9f 98 04 00
	00		 mov	 ebx, DWORD PTR [edi+1176]
  000d1	85 db		 test	 ebx, ebx
  000d3	74 4e		 je	 SHORT $LN48@ConcretePo
  000d5	8b 8f 94 04 00
	00		 mov	 ecx, DWORD PTR [edi+1172]
  000db	c1 e1 02	 shl	 ecx, 2
  000de	c1 e2 02	 shl	 edx, 2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  000e1	85 c9		 test	 ecx, ecx
  000e3	74 3e		 je	 SHORT $LN48@ConcretePo

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  000e5	85 c0		 test	 eax, eax
  000e7	75 0d		 jne	 SHORT $LN44@ConcretePo
  000e9	e8 00 00 00 00	 call	 __errno
  000ee	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000f4	eb 28		 jmp	 SHORT $LN51@ConcretePo
$LN44@ConcretePo:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  000f6	3b d1		 cmp	 edx, ecx
  000f8	72 0d		 jb	 SHORT $LN46@ConcretePo

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  000fa	51		 push	 ecx
  000fb	53		 push	 ebx
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _memcpy
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	eb 1c		 jmp	 SHORT $LN48@ConcretePo
$LN46@ConcretePo:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00107	52		 push	 edx
  00108	6a 00		 push	 0
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _memset
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00113	e8 00 00 00 00	 call	 __errno
  00118	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
$LN51@ConcretePo:
  0011e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN48@ConcretePo:
  00123	8d 87 a8 04 00
	00		 lea	 eax, DWORD PTR [edi+1192]
  00129	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00130	50		 push	 eax
  00131	8d 8e a8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1192]
  00137	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  0013e	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00143	8d 87 e0 04 00
	00		 lea	 eax, DWORD PTR [edi+1248]
  00149	50		 push	 eax
  0014a	8d 8e e0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1248]
  00150	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00155	5f		 pop	 edi
  00156	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0015c	8b c6		 mov	 eax, esi
  0015e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00165	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@
  0016c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00173	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 04 00	 ret	 4
??0?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy, COMDAT
; _this$ = ecx

; 70   : 	POLICY_INTERFACE & AccessPolicy() {return *this;}

  00000	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00003	c3		 ret	 0
?AccessPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy, COMDAT
; _this$ = ecx

; 69   : 	const POLICY_INTERFACE & GetPolicy() const {return *this;}

  00000	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00003	c3		 ret	 0
?GetPolicy@?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00036	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B@
  0003d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00043	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], OFFSET ??_7?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  0004a	e8 00 00 00 00	 call	 ??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0004f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00052	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00055	3b c2		 cmp	 eax, edx
  00057	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0005a	8b fe		 mov	 edi, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0005c	0f 42 d0	 cmovb	 edx, eax
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00066	32 c0		 xor	 al, al
  00068	8b ca		 mov	 ecx, edx
  0006a	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 231  : 		if (T_Align16 && size)

  0006c	56		 push	 esi
  0006d	85 d2		 test	 edx, edx
  0006f	74 19		 je	 SHORT $LN12@ConcretePo

; 232  : 			return AlignedDeallocate(ptr);

  00071	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN12@ConcretePo:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0008a	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  0008f	83 c4 04	 add	 esp, 4
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
  000a3	cc		 int	 3
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 f8 04 00 00	 push	 1272			; 000004f8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAEPAXI@Z ENDP ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
;	COMDAT ?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::CipherIsRandomAccess, COMDAT
; _this$ = ecx

; 150  : 	bool CipherIsRandomAccess() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CipherIsRandomAccess@?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::CipherIsRandomAccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
;	COMDAT ??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ
_TEXT	SEGMENT
??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ PROC ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >, COMDAT
; _this$ = ecx

; 146  : 	virtual ~PanamaCipherPolicy() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 96 c0 04 00
	00		 lea	 edx, DWORD PTR [esi+1216]
  00009	57		 push	 edi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00010	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00017	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0001a	39 4a 28	 cmp	 DWORD PTR [edx+40], ecx
  0001d	8b 7a 30	 mov	 edi, DWORD PTR [edx+48]
  00020	0f 42 4a 28	 cmovb	 ecx, DWORD PTR [edx+40]

; 614  : 		if (ptr == GetAlignedArray())

  00024	3b fa		 cmp	 edi, edx
  00026	75 08		 jne	 SHORT $LN20@PanamaCiph
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00028	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0002a	c6 42 21 00	 mov	 BYTE PTR [edx+33], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	f3 ab		 rep stosd
$LN20@PanamaCiph:

; 569  : 	return b < a ? b : a;

  00030	8b 8e b4 04 00
	00		 mov	 ecx, DWORD PTR [esi+1204]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h

; 146  : 	virtual ~PanamaCipherPolicy() {}

  00036	8d 96 88 04 00
	00		 lea	 edx, DWORD PTR [esi+1160]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0003c	39 4a 28	 cmp	 DWORD PTR [edx+40], ecx
  0003f	8b 7a 30	 mov	 edi, DWORD PTR [edx+48]
  00042	0f 42 4a 28	 cmovb	 ecx, DWORD PTR [edx+40]

; 614  : 		if (ptr == GetAlignedArray())

  00046	3b fa		 cmp	 edi, edx
  00048	75 08		 jne	 SHORT $LN49@PanamaCiph
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004a	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0004c	c6 42 21 00	 mov	 BYTE PTR [edx+33], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00050	f3 ab		 rep stosd
$LN49@PanamaCiph:

; 569  : 	return b < a ? b : a;

  00052	8b 86 70 04 00
	00		 mov	 eax, DWORD PTR [esi+1136]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h

; 28   : 	virtual ~Panama() {}

  00058	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0005b	8b 8a 64 04 00
	00		 mov	 ecx, DWORD PTR [edx+1124]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00061	3b c1		 cmp	 eax, ecx
  00063	8b ba 68 04 00
	00		 mov	 edi, DWORD PTR [edx+1128]
  00069	0f 42 c8	 cmovb	 ecx, eax

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0006c	8b c2		 mov	 eax, edx
  0006e	f7 d8		 neg	 eax
  00070	83 e0 0f	 and	 eax, 15			; 0000000fH
  00073	03 c2		 add	 eax, edx

; 415  : 		if (ptr == GetAlignedArray())

  00075	3b f8		 cmp	 edi, eax
  00077	75 0b		 jne	 SHORT $LN86@PanamaCiph
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00079	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 423  : 			m_allocated = false;

  0007b	c6 82 59 04 00
	00 00		 mov	 BYTE PTR [edx+1113], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00082	f3 ab		 rep stosd
$LN86@PanamaCiph:
  00084	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h

; 146  : 	virtual ~PanamaCipherPolicy() {}

  00085	5e		 pop	 esi
  00086	c3		 ret	 0
??1?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@MAE@XZ ENDP ; CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h
;	COMDAT ??1?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00000	8b 81 68 04 00
	00		 mov	 eax, DWORD PTR [ecx+1128]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h

; 28   : 	virtual ~Panama() {}

  00006	83 c1 08	 add	 ecx, 8
  00009	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0000a	8b 91 64 04 00
	00		 mov	 edx, DWORD PTR [ecx+1124]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00010	3b c2		 cmp	 eax, edx
  00012	8b b9 68 04 00
	00		 mov	 edi, DWORD PTR [ecx+1128]
  00018	0f 42 d0	 cmovb	 edx, eax

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0001b	8b c1		 mov	 eax, ecx
  0001d	f7 d8		 neg	 eax
  0001f	83 e0 0f	 and	 eax, 15			; 0000000fH
  00022	03 c1		 add	 eax, ecx

; 415  : 		if (ptr == GetAlignedArray())

  00024	3b f8		 cmp	 edi, eax
  00026	75 0d		 jne	 SHORT $LN25@Panama

; 416  : 		{
; 417  : 			// If the m_allocated assert fires then the bit twiddling for
; 418  : 			// GetAlignedArray() is probably incorrect for the platform.
; 419  : 			// Be sure to check CRYPTOPP_ALIGN_DATA(8). The platform may
; 420  : 			// not have a way to declaritively align data to 8.
; 421  : 			CRYPTOPP_ASSERT(size <= S);
; 422  : 			CRYPTOPP_ASSERT(m_allocated);
; 423  : 			m_allocated = false;

  00028	c6 81 59 04 00
	00 00		 mov	 BYTE PTR [ecx+1113], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002f	33 c0		 xor	 eax, eax
  00031	8b ca		 mov	 ecx, edx
  00033	f3 ab		 rep stosd
$LN25@Panama:
  00035	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\panama.h

; 28   : 	virtual ~Panama() {}

  00036	c3		 ret	 0
??1?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >::~Panama<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??__Fwhirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ
text$yd	SEGMENT
??__Fwhirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ PROC ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'whirlpool'', COMDAT
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	8b 0d bc 00 00
	00		 mov	 ecx, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+188
  00006	39 0d b8 00 00
	00		 cmp	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+184, ecx
  0000c	57		 push	 edi
  0000d	0f 42 0d b8 00
	00 00		 cmovb	 ecx, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+184

; 614  : 		if (ptr == GetAlignedArray())

  00014	8b 3d c0 00 00
	00		 mov	 edi, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+192
  0001a	81 ff 70 00 00
	00		 cmp	 edi, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+112
  00020	75 0d		 jne	 SHORT $LN29@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00022	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00024	c6 05 b1 00 00
	00 00		 mov	 BYTE PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+177, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002b	33 c0		 xor	 eax, eax
  0002d	f3 ab		 rep stosd
$LN29@dynamic:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	8b 0d 64 00 00
	00		 mov	 ecx, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+100
  00035	39 0d 60 00 00
	00		 cmp	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+96, ecx

; 614  : 		if (ptr == GetAlignedArray())

  0003b	8b 3d 68 00 00
	00		 mov	 edi, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+104

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00041	0f 42 0d 60 00
	00 00		 cmovb	 ecx, DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+96

; 614  : 		if (ptr == GetAlignedArray())

  00048	81 ff 18 00 00
	00		 cmp	 edi, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+24
  0004e	75 0d		 jne	 SHORT $LN67@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00050	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00052	c6 05 59 00 00
	00 00		 mov	 BYTE PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+89, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00059	33 c0		 xor	 eax, eax
  0005b	f3 ab		 rep stosd
$LN67@dynamic:
  0005d	5f		 pop	 edi
  0005e	c3		 ret	 0
??__Fwhirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ENDP ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'whirlpool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??__Fripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ
text$yd	SEGMENT
??__Fripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ PROC ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'ripemd128'', COMDAT
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	8b 0d b4 00 00
	00		 mov	 ecx, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+180
  00006	39 0d b0 00 00
	00		 cmp	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+176, ecx
  0000c	57		 push	 edi
  0000d	0f 42 0d b0 00
	00 00		 cmovb	 ecx, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+176

; 614  : 		if (ptr == GetAlignedArray())

  00014	8b 3d b8 00 00
	00		 mov	 edi, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+184
  0001a	81 ff 68 00 00
	00		 cmp	 edi, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+104
  00020	75 0b		 jne	 SHORT $LN29@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00022	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00024	c6 05 a9 00 00
	00 00		 mov	 BYTE PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+169, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002b	f3 ab		 rep stosd
$LN29@dynamic:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002d	8b 0d 5c 00 00
	00		 mov	 ecx, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+92
  00033	39 0d 58 00 00
	00		 cmp	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+88, ecx

; 614  : 		if (ptr == GetAlignedArray())

  00039	8b 3d 60 00 00
	00		 mov	 edi, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+96

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0003f	0f 42 0d 58 00
	00 00		 cmovb	 ecx, DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+88

; 614  : 		if (ptr == GetAlignedArray())

  00046	81 ff 10 00 00
	00		 cmp	 edi, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+16
  0004c	75 0b		 jne	 SHORT $LN67@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004e	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00050	c6 05 51 00 00
	00 00		 mov	 BYTE PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+81, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00057	f3 ab		 rep stosd
$LN67@dynamic:
  00059	5f		 pop	 edi
  0005a	c3		 ret	 0
??__Fripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ENDP ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'ripemd128''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??__Fsha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ
text$yd	SEGMENT
??__Fsha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ PROC ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'sha1'', COMDAT
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	8b 0d b4 00 00
	00		 mov	 ecx, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+180
  00006	39 0d b0 00 00
	00		 cmp	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+176, ecx
  0000c	57		 push	 edi
  0000d	0f 42 0d b0 00
	00 00		 cmovb	 ecx, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+176

; 614  : 		if (ptr == GetAlignedArray())

  00014	8b 3d b8 00 00
	00		 mov	 edi, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+184
  0001a	81 ff 68 00 00
	00		 cmp	 edi, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+104
  00020	75 0b		 jne	 SHORT $LN29@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00022	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00024	c6 05 a9 00 00
	00 00		 mov	 BYTE PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+169, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002b	f3 ab		 rep stosd
$LN29@dynamic:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002d	8b 0d 5c 00 00
	00		 mov	 ecx, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+92
  00033	39 0d 58 00 00
	00		 cmp	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+88, ecx

; 614  : 		if (ptr == GetAlignedArray())

  00039	8b 3d 60 00 00
	00		 mov	 edi, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+96

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0003f	0f 42 0d 58 00
	00 00		 cmovb	 ecx, DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+88

; 614  : 		if (ptr == GetAlignedArray())

  00046	81 ff 10 00 00
	00		 cmp	 edi, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+16
  0004c	75 0b		 jne	 SHORT $LN67@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004e	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00050	c6 05 51 00 00
	00 00		 mov	 BYTE PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+81, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00057	f3 ab		 rep stosd
$LN67@dynamic:
  00059	5f		 pop	 edi
  0005a	c3		 ret	 0
??__Fsha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ENDP ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'sha1''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??__Ftiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ
text$yd	SEGMENT
??__Ftiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ PROC ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'tiger'', COMDAT
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	8b 0d bc 00 00
	00		 mov	 ecx, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+188
  00006	39 0d b8 00 00
	00		 cmp	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+184, ecx
  0000c	57		 push	 edi
  0000d	0f 42 0d b8 00
	00 00		 cmovb	 ecx, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+184

; 614  : 		if (ptr == GetAlignedArray())

  00014	8b 3d c0 00 00
	00		 mov	 edi, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+192
  0001a	81 ff 70 00 00
	00		 cmp	 edi, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+112
  00020	75 0d		 jne	 SHORT $LN29@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00022	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00024	c6 05 b1 00 00
	00 00		 mov	 BYTE PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+177, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002b	33 c0		 xor	 eax, eax
  0002d	f3 ab		 rep stosd
$LN29@dynamic:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	8b 0d 64 00 00
	00		 mov	 ecx, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+100
  00035	39 0d 60 00 00
	00		 cmp	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+96, ecx

; 614  : 		if (ptr == GetAlignedArray())

  0003b	8b 3d 68 00 00
	00		 mov	 edi, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+104

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00041	0f 42 0d 60 00
	00 00		 cmovb	 ecx, DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+96

; 614  : 		if (ptr == GetAlignedArray())

  00048	81 ff 18 00 00
	00		 cmp	 edi, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+24
  0004e	75 0d		 jne	 SHORT $LN67@dynamic
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00050	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00052	c6 05 59 00 00
	00 00		 mov	 BYTE PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+89, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00059	33 c0		 xor	 eax, eax
  0005b	f3 ab		 rep stosd
$LN67@dynamic:
  0005d	5f		 pop	 edi
  0005e	c3		 ret	 0
??__Ftiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ENDP ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'tiger''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -48						; size = 20
$T3 = -28						; size = 8
__Ok$4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 546  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 547  :         const auto _Rdbuf = _Myios::rdbuf();

  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	8b 7c 30 38	 mov	 edi, DWORD PTR [eax+esi+56]

; 548  :         if (_Rdbuf) { // buffer exists, flush it

  00032	85 ff		 test	 edi, edi
  00034	74 6e		 je	 SHORT $LN47@flush

; 549  :             const sentry _Ok(*this);

  00036	56		 push	 esi
  00037	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  0003a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 551  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  0003f	80 7d f0 00	 cmp	 BYTE PTR __Ok$4[ebp+4], 0
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	74 27		 je	 SHORT $LN32@flush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 123  :         return sync();

  0004c	8b 07		 mov	 eax, DWORD PTR [edi]
  0004e	8b cf		 mov	 ecx, edi
  00050	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 551  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  00053	83 f8 ff	 cmp	 eax, -1
  00056	75 1b		 jne	 SHORT $LN32@flush

; 552  :                 _Myios::setstate(ios_base::badbit); // sync failed

  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0005d	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  00061	83 e0 13	 and	 eax, 19			; 00000013H
  00064	83 c8 04	 or	 eax, 4

; 245  :         _Mystate             = _State;

  00067	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  0006b	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006f	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  00071	75 44		 jne	 SHORT $LN53@flush
$LN32@flush:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00073	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0007a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  0007f	84 c0		 test	 al, al
  00081	75 08		 jne	 SHORT $LN43@flush

; 120  :                 this->_Myostr._Osfx();

  00083	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  00086	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN43@flush:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0008b	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  0008e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00092	8b 01		 mov	 eax, DWORD PTR [ecx]
  00094	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00097	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  0009b	85 c9		 test	 ecx, ecx
  0009d	74 05		 je	 SHORT $LN47@flush

; 81   :                 _Rdbuf->_Unlock();

  0009f	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a1	ff 50 08	 call	 DWORD PTR [eax+8]
$LN47@flush:

; 553  :             }
; 554  :         }
; 555  :         return *this;

  000a4	8b c6		 mov	 eax, esi

; 556  :     }

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN53@flush:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  000b7	f6 c1 04	 test	 cl, 4
  000ba	74 07		 je	 SHORT $LN34@flush

; 254  :                 _Msg = "ios_base::badbit set";

  000bc	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  000c1	eb 10		 jmp	 SHORT $LN36@flush
$LN34@flush:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  000c3	f6 c1 02	 test	 cl, 2
  000c6	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  000cb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000d0	0f 44 f0	 cmove	 esi, eax
$LN36@flush:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  000d3	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  000d6	6a 01		 push	 1
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000de	83 c4 08	 add	 esp, 8
  000e1	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  000e4	50		 push	 eax
  000e5	56		 push	 esi
  000e6	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000eb	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000f0	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN51@flush:
  000f9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 156  :     void __CLR_OR_THIS_CALL _Osfx() { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 157  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 158  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  0003e	75 38		 jne	 SHORT $LN19@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN19@Osfx

; 159  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 123  :         return sync();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 159  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN19@Osfx

; 160  :                 _Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 245  :         _Mystate             = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0006e	75 1a		 jne	 SHORT $LN32@Osfx
  00070	eb 06		 jmp	 SHORT $LN19@Osfx
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream

; 164  :         _CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN19@Osfx
  00077	c3		 ret	 0
$LN19@Osfx:

; 165  :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN32@Osfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN21@Osfx

; 254  :                 _Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN23@Osfx
$LN21@Osfx:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN23@Osfx:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@Osfx:
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z
_TEXT	SEGMENT
$T2 = -132						; size = 28
$T3 = -104						; size = 28
__UFirst$ = -72						; size = 28
__ULast$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 28
__Last$ = 40						; size = 28
__Dest$ = 68						; size = 4
??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z PROC ; std::copy<std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>,std::back_insert_iterator<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT

; 4173 : _CONSTEXPR20 _OutIt copy(_InIt _First, _InIt _Last, _OutIt _Dest) { // copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00030	8d 4d bc	 lea	 ecx, DWORD PTR __UFirst$[ebp+4]
  00033	89 45 b8	 mov	 DWORD PTR __UFirst$[ebp], eax
  00036	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp+4]
  00039	50		 push	 eax
  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4174 :     _Adl_verify_range(_First, _Last);
; 4175 :     const auto _UFirst = _Get_unwrapped(_First);

  00046	8b 45 28	 mov	 eax, DWORD PTR __Last$[ebp]
  00049	8d 4d d8	 lea	 ecx, DWORD PTR __ULast$[ebp+4]
  0004c	89 45 d4	 mov	 DWORD PTR __ULast$[ebp], eax
  0004f	8d 45 2c	 lea	 eax, DWORD PTR __Last$[ebp+4]
  00052	50		 push	 eax
  00053	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4176 :     const auto _ULast  = _Get_unwrapped(_Last);

  0005c	8b 45 d4	 mov	 eax, DWORD PTR __ULast$[ebp]
  0005f	8d 4d 80	 lea	 ecx, DWORD PTR $T2[ebp+4]

; 4177 :     const auto _UDest  = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00062	8b 75 44	 mov	 esi, DWORD PTR __Dest$[ebp]
  00065	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006b	8d 45 d8	 lea	 eax, DWORD PTR __ULast$[ebp+4]
  0006e	50		 push	 eax
  0006f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00073	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4178 :     _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));

  00078	8b 45 b8	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0007b	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp+4]
  0007e	89 45 98	 mov	 DWORD PTR $T3[ebp], eax
  00081	8d 45 bc	 lea	 eax, DWORD PTR __UFirst$[ebp+4]
  00084	50		 push	 eax
  00085	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00089	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4141 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0008e	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00094	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00098	50		 push	 eax
  00099	8d 45 98	 lea	 eax, DWORD PTR $T3[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ; std::operator!=<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
  000a2	83 c4 08	 add	 esp, 8
  000a5	84 c0		 test	 al, al
  000a7	74 65		 je	 SHORT $LN25@copy
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL33@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000b0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b3	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000b6	51		 push	 ecx
  000b7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000ba	74 0d		 je	 SHORT $LN44@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000bc	8b c8		 mov	 ecx, eax
  000be	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  000c3	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000c7	eb 08		 jmp	 SHORT $LN24@copy
$LN44@copy:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c9	50		 push	 eax
  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
$LN24@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 280  :         if (!(*_Myistr >> _Myval)) {

  000d1	8d 45 9c	 lea	 eax, DWORD PTR $T3[ebp+4]
  000d4	50		 push	 eax
  000d5	ff 75 98	 push	 DWORD PTR $T3[ebp]
  000d8	e8 00 00 00 00	 call	 ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000dd	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 303  :         return rdstate() & (ios_base::badbit | ios_base::failbit);

  000df	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	f6 44 08 0c 06	 test	 BYTE PTR [eax+ecx+12], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 280  :         if (!(*_Myistr >> _Myval)) {

  000e9	b9 00 00 00 00	 mov	 ecx, 0
  000ee	8b 45 98	 mov	 eax, DWORD PTR $T3[ebp]
  000f1	0f 45 c1	 cmovne	 eax, ecx
  000f4	89 45 98	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4141 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  000f7	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000fd	50		 push	 eax
  000fe	8d 45 98	 lea	 eax, DWORD PTR $T3[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??$?9V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@1@H@std@@YA_NABV?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0@Z ; std::operator!=<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	84 c0		 test	 al, al
  0010c	75 a2		 jne	 SHORT $LL33@copy
$LN25@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0010e	8b 45 b0	 mov	 eax, DWORD PTR $T3[ebp+24]
  00111	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00114	72 13		 jb	 SHORT $LN57@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0011d	50		 push	 eax
  0011e	ff 75 9c	 push	 DWORD PTR $T3[ebp+4]
  00121	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00126	83 c4 08	 add	 esp, 8
$LN57@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00129	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp+24]
  0012c	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0012f	72 13		 jb	 SHORT $LN70@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00131	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00138	50		 push	 eax
  00139	ff 75 80	 push	 DWORD PTR $T2[ebp+4]
  0013c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00141	83 c4 08	 add	 esp, 8
$LN70@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00144	8b 45 ec	 mov	 eax, DWORD PTR __ULast$[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4179 :     return _Dest;

  00147	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00149	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0014c	72 13		 jb	 SHORT $LN83@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014e	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00155	50		 push	 eax
  00156	ff 75 d8	 push	 DWORD PTR __ULast$[ebp+4]
  00159	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0015e	83 c4 08	 add	 esp, 8
$LN83@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00161	8b 45 d0	 mov	 eax, DWORD PTR __UFirst$[ebp+24]
  00164	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00167	72 13		 jb	 SHORT $LN96@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00169	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00170	50		 push	 eax
  00171	ff 75 bc	 push	 DWORD PTR __UFirst$[ebp+4]
  00174	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00179	83 c4 08	 add	 esp, 8
$LN96@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0017c	8b 45 24	 mov	 eax, DWORD PTR __First$[ebp+24]
  0017f	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00182	72 13		 jb	 SHORT $LN109@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00184	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0018b	50		 push	 eax
  0018c	ff 75 10	 push	 DWORD PTR __First$[ebp+4]
  0018f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00194	83 c4 08	 add	 esp, 8
$LN109@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00197	8b 4d 40	 mov	 ecx, DWORD PTR __Last$[ebp+24]

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0019a	33 c0		 xor	 eax, eax
  0019c	c7 45 20 00 00
	00 00		 mov	 DWORD PTR __First$[ebp+20], 0
  001a3	c7 45 24 07 00
	00 00		 mov	 DWORD PTR __First$[ebp+24], 7
  001aa	66 89 45 10	 mov	 WORD PTR __First$[ebp+4], ax

; 2153 :         return _BUF_SIZE <= _Myres;

  001ae	83 f9 08	 cmp	 ecx, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001b1	72 13		 jb	 SHORT $LN132@copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b3	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  001ba	51		 push	 ecx
  001bb	ff 75 2c	 push	 DWORD PTR __Last$[ebp+4]
  001be	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001c3	83 c4 08	 add	 esp, 8
$LN132@copy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4180 : }

  001c6	8b c7		 mov	 eax, edi
  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d2	59		 pop	 ecx
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d8	33 cd		 xor	 ecx, ebp
  001da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$0:
  00000	8d 4d 28	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$3:
  00018	8d 4d d4	 lea	 ecx, DWORD PTR __ULast$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$4:
  00020	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$10:
  0002b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z$11:
  00036	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
  00042	cc		 int	 3
__ehhandler$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z:
  00043	90		 npad	 1
  00044	90		 npad	 1
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z
  00068	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z ENDP ; std::copy<std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>,std::back_insert_iterator<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
;	COMDAT ??$back_inserter@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cont$ = 12						; size = 4
??$back_inserter@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@0@@Z PROC ; std::back_inserter<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >, COMDAT

; 71   : _NODISCARD back_insert_iterator<_Container> back_inserter(_Container& _Cont) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   :     explicit back_insert_iterator(_Container& _Cont) noexcept /* strengthened */ : container(_STD addressof(_Cont)) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Cont$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :     // return a back_insert_iterator
; 73   :     return back_insert_iterator<_Container>(_Cont);
; 74   : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$back_inserter@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@0@@Z ENDP ; std::back_inserter<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	85 c0		 test	 eax, eax
  00007	74 45		 je	 SHORT $LN4@vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	ff 77 04	 push	 DWORD PTR [edi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 02	 sar	 edx, 2
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 03	 shl	 eax, 3
  0002f	50		 push	 eax
  00030	ff 37		 push	 DWORD PTR [edi]
  00032	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003d	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00040	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1699 :             _Myend   = pointer();

  00047	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0004e	5f		 pop	 edi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0004f	c3		 ret	 0
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	c1 e0 03	 shl	 eax, 3
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8

; 804  :     }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
_TEXT	SEGMENT
??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ PROC ; std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>::~istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>, COMDAT
; _this$ = ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 13		 jb	 SHORT $LN7@istream_it
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00012	50		 push	 eax
  00013	ff 76 04	 push	 DWORD PTR [esi+4]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN7@istream_it:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001e	33 c0		 xor	 eax, eax
  00020	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00027	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0002e	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ ENDP ; std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>::~istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 944  :     virtual __CLR_OR_THIS_CALL ~basic_ifstream() noexcept {}

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8d 71 70	 lea	 esi, DWORD PTR [ecx+112]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@
  00033	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  0003c	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
  00040	8d 4e a0	 lea	 ecx, DWORD PTR [esi-96]
  00043	e8 00 00 00 00	 call	 ??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 72   :     virtual __CLR_OR_THIS_CALL ~basic_istream() noexcept {}

  00048	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00056	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005c	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0005f	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00063	56		 push	 esi
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00071	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 90	 lea	 esi, DWORD PTR [ecx-112]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0e		 je	 SHORT $LN4@scalar
  00014	68 b8 00 00 00	 push	 184			; 000000b8H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 58		 push	 88			; 00000058H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Reset_back@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Reset_back, COMDAT
; _this$ = ecx

; 773  :     void _Reset_back() { // restore buffer after putback

  00000	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  00001	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 774  :         if (_Mysb::eback() == &_Mychar) {

  00004	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]
  00007	39 07		 cmp	 DWORD PTR [edi], eax
  00009	75 18		 jne	 SHORT $LN2@Reset_back

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  0000b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0000e	56		 push	 esi
  0000f	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 206  :         *_IGfirst = _First;

  00012	89 17		 mov	 DWORD PTR [edi], edx

; 207  :         *_IGnext  = _Next;
; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  00014	2b f2		 sub	 esi, edx
  00016	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00019	d1 fe		 sar	 esi, 1
  0001b	89 10		 mov	 DWORD PTR [eax], edx
  0001d	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00020	89 30		 mov	 DWORD PTR [eax], esi
  00022	5e		 pop	 esi
$LN2@Reset_back:
  00023	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 777  :     }

  00024	c3		 ret	 0
?_Reset_back@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv94 = 8						; size = 4
__Newcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Initcvt, COMDAT
; _this$ = ecx

; 756  :     void _Initcvt(const _Cvt& _Newcvt) { // initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 675  :         return do_always_noconv();

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newcvt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 756  :     void _Initcvt(const _Cvt& _Newcvt) { // initialize codecvt pointer

  00009	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 675  :         return do_always_noconv();

  0000b	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 756  :     void _Initcvt(const _Cvt& _Newcvt) { // initialize codecvt pointer

  0000d	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 675  :         return do_always_noconv();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00015	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 757  :         if (_Newcvt.always_noconv()) {

  00017	84 c0		 test	 al, al
  00019	74 0f		 je	 SHORT $LN2@Initcvt

; 758  :             _Pcvt = nullptr; // nothing to do

  0001b	5e		 pop	 esi
  0001c	c7 43 38 00 00
	00 00		 mov	 DWORD PTR [ebx+56], 0

; 763  :     }

  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Initcvt:

; 760  :             _Pcvt = _STD addressof(_Newcvt);

  0002a	8b c3		 mov	 eax, ebx
  0002c	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 264  :         _IGnext  = &_Gnext;

  0002d	8d 78 14	 lea	 edi, DWORD PTR [eax+20]

; 265  :         _IPnext  = &_Pnext;

  00030	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 760  :             _Pcvt = _STD addressof(_Newcvt);

  00033	89 70 38	 mov	 DWORD PTR [eax+56], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 262  :         _IGfirst = &_Gfirst;

  00036	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00039	89 58 0c	 mov	 DWORD PTR [eax+12], ebx

; 263  :         _IPfirst = &_Pfirst;

  0003c	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  0003f	89 70 10	 mov	 DWORD PTR [eax+16], esi

; 266  :         _IGcount = &_Gcount;

  00042	8d 50 24	 lea	 edx, DWORD PTR [eax+36]
  00045	89 78 1c	 mov	 DWORD PTR [eax+28], edi
  00048	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0004b	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 267  :         _IPcount = &_Pcount;

  0004e	83 c0 28	 add	 eax, 40			; 00000028H
  00051	89 5d 08	 mov	 DWORD PTR tv94[ebp], ebx
  00054	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00057	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 206  :         *_IGfirst = _First;

  0005a	8b 5d 08	 mov	 ebx, DWORD PTR tv94[ebp]

; 240  :         *_IPfirst = _First;

  0005d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 241  :         *_IPnext  = _First;

  00063	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 242  :         *_IPcount = static_cast<int>(_Last - _First);

  00069	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 206  :         *_IGfirst = _First;

  0006f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 207  :         *_IGnext  = _Next;

  00075	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 763  :     }

  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
__Dest$ = -40						; size = 4
__Str$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite, COMDAT
; _this$ = ecx

; 720  :     bool _Endwrite() { // put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 721  :         if (!_Pcvt || !_Wrotesome) {

  00013	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00017	0f 84 a5 00 00
	00		 je	 $LN5@Endwrite
  0001d	80 7e 3e 00	 cmp	 BYTE PTR [esi+62], 0
  00021	0f 84 9b 00 00
	00		 je	 $LN5@Endwrite

; 726  :         if (_Traits::eq_int_type(_Traits::eof(), overflow())) {

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	57		 push	 edi
  0002a	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0002f	ff 50 0c	 call	 DWORD PTR [eax+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00032	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00037	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 726  :         if (_Traits::eq_int_type(_Traits::eof(), overflow())) {

  0003a	74 74		 je	 SHORT $LN17@Endwrite

; 733  :         switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest)) { // test result of homing conversion

  0003c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1990 :         return do_unshift(_State, _First2, _Last2, _Mid2);

  0003f	8d 45 d8	 lea	 eax, DWORD PTR __Dest$[ebp]
  00042	50		 push	 eax
  00043	8d 45 fc	 lea	 eax, DWORD PTR __Str$[ebp+32]
  00046	50		 push	 eax
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	8d 45 dc	 lea	 eax, DWORD PTR __Str$[ebp]
  0004c	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 733  :         switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest)) { // test result of homing conversion

  0004d	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1990 :         return do_unshift(_State, _First2, _Last2, _Mid2);

  00050	50		 push	 eax
  00051	ff 52 20	 call	 DWORD PTR [edx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 733  :         switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest)) { // test result of homing conversion

  00054	83 e8 00	 sub	 eax, 0
  00057	74 1f		 je	 SHORT $LN7@Endwrite
  00059	83 e8 01	 sub	 eax, 1
  0005c	74 1e		 je	 SHORT $LN8@Endwrite
  0005e	83 e8 02	 sub	 eax, 2
  00061	75 4d		 jne	 SHORT $LN17@Endwrite

; 745  :         }
; 746  : 
; 747  :         case codecvt_base::noconv:
; 748  :             _Wrotesome = false; // homed successfully

  00063	88 46 3e	 mov	 BYTE PTR [esi+62], al

; 749  :             return true; // nothing else to do

  00066	b0 01		 mov	 al, 1
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 750  : 
; 751  :         default:
; 752  :             return false; // conversion failed
; 753  :         }
; 754  :     }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN7@Endwrite:

; 734  :         case codecvt_base::ok:
; 735  :             _Wrotesome = false; // homed successfully

  00078	c6 46 3e 00	 mov	 BYTE PTR [esi+62], 0
$LN8@Endwrite:

; 736  : 
; 737  :         case codecvt_base::partial: // fall through
; 738  :         { // put any generated bytes
; 739  :             const auto _Count = static_cast<size_t>(_Dest - _Str);

  0007c	8b 7d d8	 mov	 edi, DWORD PTR __Dest$[ebp]
  0007f	8d 45 dc	 lea	 eax, DWORD PTR __Str$[ebp]
  00082	2b f8		 sub	 edi, eax

; 740  :             if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

  00084	74 13		 je	 SHORT $LN9@Endwrite
  00086	ff 76 4c	 push	 DWORD PTR [esi+76]
  00089	57		 push	 edi
  0008a	6a 01		 push	 1
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _fwrite
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	3b f8		 cmp	 edi, eax
  00097	75 17		 jne	 SHORT $LN17@Endwrite
$LN9@Endwrite:

; 742  :             }
; 743  : 
; 744  :             return !_Wrotesome;

  00099	80 7e 3e 00	 cmp	 BYTE PTR [esi+62], 0
  0009d	5f		 pop	 edi
  0009e	0f 94 c0	 sete	 al
  000a1	5e		 pop	 esi

; 750  : 
; 751  :         default:
; 752  :             return false; // conversion failed
; 753  :         }
; 754  :     }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN17@Endwrite:
  000b0	5f		 pop	 edi

; 741  :                 return false; // write failed

  000b1	32 c0		 xor	 al, al
  000b3	5e		 pop	 esi

; 750  : 
; 751  :         default:
; 752  :             return false; // conversion failed
; 753  :         }
; 754  :     }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
$LN5@Endwrite:
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c5	b0 01		 mov	 al, 1
  000c7	33 cd		 xor	 ecx, ebp
  000c9	5e		 pop	 esi
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__File$ = 8						; size = 4
tv136 = 12						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 693  :     void _Init(FILE* _File, _Initfl _Which) { // initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 694  :         using _State_type = typename _Traits::state_type;
; 695  : 
; 696  :         __PURE_APPDOMAIN_GLOBAL static _State_type _Stinit; // initial state
; 697  : 
; 698  :         _Closef    = _Which == _Openfl;

  00004	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00008	8b d1		 mov	 edx, ecx
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	0f 94 c0	 sete	 al
  0000f	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00012	88 42 48	 mov	 BYTE PTR [edx+72], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 262  :         _IGfirst = &_Gfirst;

  00015	8d 5a 04	 lea	 ebx, DWORD PTR [edx+4]

; 265  :         _IPnext  = &_Pnext;
; 266  :         _IGcount = &_Gcount;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0001b	8d 72 08	 lea	 esi, DWORD PTR [edx+8]
  0001e	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx
  00021	8d 4a 18	 lea	 ecx, DWORD PTR [edx+24]
  00024	89 72 10	 mov	 DWORD PTR [edx+16], esi
  00027	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 699  :         _Wrotesome = false;

  0002a	c6 42 3e 00	 mov	 BYTE PTR [edx+62], 0
  0002e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 264  :         _IGnext  = &_Gnext;

  0002f	8d 7a 14	 lea	 edi, DWORD PTR [edx+20]
  00032	89 5d 0c	 mov	 DWORD PTR tv136[ebp], ebx

; 267  :         _IPcount = &_Pcount;

  00035	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00038	89 7a 1c	 mov	 DWORD PTR [edx+28], edi
  0003b	83 c2 24	 add	 edx, 36			; 00000024H
  0003e	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00041	83 c0 28	 add	 eax, 40			; 00000028H
  00044	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 206  :         *_IGfirst = _First;

  00047	8b 5d 0c	 mov	 ebx, DWORD PTR tv136[ebp]

; 240  :         *_IPfirst = _First;

  0004a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 241  :         *_IPnext  = _First;

  00050	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 242  :         *_IPcount = static_cast<int>(_Last - _First);

  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  0005f	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 206  :         *_IGfirst = _First;

  00062	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 207  :         *_IGnext  = _Next;

  00068	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  0006e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  00074	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 716  :         _State  = _Stinit;

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A

; 717  :         _Pcvt   = nullptr; // pointer to codecvt facet

  0007c	5f		 pop	 edi
  0007d	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  00080	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  00085	5e		 pop	 esi
  00086	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00089	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  00090	5b		 pop	 ebx

; 718  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 688  :     virtual void __CLR_OR_THIS_CALL imbue(const locale& _Loc) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 689  :         // set locale to argument (capture nontrivial codecvt facet)
; 690  :         _Initcvt(_STD use_facet<_Cvt>(_Loc));

  00004	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<wchar_t,char,_Mbstatet> >
  0000e	83 c4 04	 add	 esp, 4
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Initcvt
  00019	5e		 pop	 esi

; 691  :     }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?sync@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 680  :     virtual int __CLR_OR_THIS_CALL sync() override { // synchronize C stream with external file

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 681  :         if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), overflow()) || 0 <= _CSTD fflush(_Myfile)) {

  00003	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00007	74 28		 je	 SHORT $LN3@sync
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00013	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00018	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 681  :         if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), overflow()) || 0 <= _CSTD fflush(_Myfile)) {

  0001b	74 14		 je	 SHORT $LN3@sync
  0001d	ff 76 4c	 push	 DWORD PTR [esi+76]
  00020	e8 00 00 00 00	 call	 _fflush
  00025	83 c4 04	 add	 esp, 4
  00028	85 c0		 test	 eax, eax
  0002a	79 05		 jns	 SHORT $LN3@sync

; 683  :         }
; 684  : 
; 685  :         return -1;

  0002c	83 c8 ff	 or	 eax, -1
  0002f	5e		 pop	 esi

; 686  :     }

  00030	c3		 ret	 0
$LN3@sync:

; 682  :             return 0;

  00031	33 c0		 xor	 eax, eax
  00033	5e		 pop	 esi

; 686  :     }

  00034	c3		 ret	 0
?sync@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@PA_W_J@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@PA_W_J@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 661  :     virtual _Mysb* __CLR_OR_THIS_CALL setbuf(_Elem* _Buffer, streamsize _Count) override { // offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 662  :         int _Mode;
; 663  :         if (!_Buffer && _Count == 0) {

  00003	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00007	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	75 0c		 jne	 SHORT $LN2@setbuf
  0000f	8b c2		 mov	 eax, edx
  00011	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  00014	75 05		 jne	 SHORT $LN2@setbuf

; 664  :             _Mode = _IONBF;

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]

; 665  :         } else {

  00019	eb 02		 jmp	 SHORT $LN3@setbuf
$LN2@setbuf:

; 666  :             _Mode = _IOFBF;

  0001b	33 c9		 xor	 ecx, ecx
$LN3@setbuf:

; 667  :         }
; 668  : 
; 669  :         const size_t _Size = static_cast<size_t>(_Count) * sizeof(_Elem);
; 670  : 
; 671  :         if (!_Myfile || _CSTD setvbuf(_Myfile, reinterpret_cast<char*>(_Buffer), _Mode, _Size) != 0) {

  0001d	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00021	74 2a		 je	 SHORT $LN5@setbuf
  00023	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00026	50		 push	 eax
  00027	51		 push	 ecx
  00028	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  0002b	ff 76 4c	 push	 DWORD PTR [esi+76]
  0002e	e8 00 00 00 00	 call	 _setvbuf
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	85 c0		 test	 eax, eax
  00038	75 13		 jne	 SHORT $LN5@setbuf

; 673  :         }
; 674  : 
; 675  :         // new buffer, reinitialize pointers
; 676  :         _Init(_Myfile, _Openfl);

  0003a	6a 01		 push	 1
  0003c	ff 76 4c	 push	 DWORD PTR [esi+76]
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 677  :         return this;

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 678  :     }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN5@setbuf:

; 672  :             return nullptr; // failed

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 678  :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@PA_W_J@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 648  :         pos_type _Pos, ios_base::openmode = ios_base::in | ios_base::out) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 70   :         return _Myoff + _Fpos;

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Pos$[ebp]
  00009	03 55 14	 add	 edx, DWORD PTR __Pos$[ebp+8]
  0000c	8b 45 10	 mov	 eax, DWORD PTR __Pos$[ebp+4]
  0000f	13 45 18	 adc	 eax, DWORD PTR __Pos$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 648  :         pos_type _Pos, ios_base::openmode = ios_base::in | ios_base::out) override {

  00012	56		 push	 esi
  00013	8b f1		 mov	 esi, ecx

; 649  :         // change position to _Pos
; 650  :         off_type _Off = static_cast<off_type>(_Pos);

  00015	89 55 f8	 mov	 DWORD PTR __Off$[ebp], edx
  00018	89 45 fc	 mov	 DWORD PTR __Off$[ebp+4], eax

; 651  : 
; 652  :         if (!_Myfile || !_Endwrite() || _CSTD fsetpos(_Myfile, &_Off) != 0) {

  0001b	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  0001f	74 79		 je	 SHORT $LN3@seekpos
  00021	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite
  00026	84 c0		 test	 al, al
  00028	74 70		 je	 SHORT $LN3@seekpos
  0002a	8d 45 f8	 lea	 eax, DWORD PTR __Off$[ebp]
  0002d	50		 push	 eax
  0002e	ff 76 4c	 push	 DWORD PTR [esi+76]
  00031	e8 00 00 00 00	 call	 _fsetpos
  00036	83 c4 08	 add	 esp, 8
  00039	85 c0		 test	 eax, eax
  0003b	75 5d		 jne	 SHORT $LN3@seekpos

; 656  :         _State = _Pos.state();

  0003d	8b 45 1c	 mov	 eax, DWORD PTR __Pos$[ebp+16]
  00040	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00043	8b 45 20	 mov	 eax, DWORD PTR __Pos$[ebp+20]
  00046	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  00047	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 656  :         _State = _Pos.state();

  0004a	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 774  :         if (_Mysb::eback() == &_Mychar) {

  0004d	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  00050	39 07		 cmp	 DWORD PTR [edi], eax
  00052	75 16		 jne	 SHORT $LN12@seekpos

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00054	8b 56 54	 mov	 edx, DWORD PTR [esi+84]
  00057	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  0005a	2b d1		 sub	 edx, ecx
  0005c	89 0f		 mov	 DWORD PTR [edi], ecx
  0005e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00061	d1 fa		 sar	 edx, 1
  00063	89 08		 mov	 DWORD PTR [eax], ecx
  00065	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00068	89 10		 mov	 DWORD PTR [eax], edx
$LN12@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  0006a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 658  :         return pos_type(_State, _Off); // return new position

  0006d	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00070	8b 76 44	 mov	 esi, DWORD PTR [esi+68]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  00073	8b 4d f8	 mov	 ecx, DWORD PTR __Off$[ebp]
  00076	89 08		 mov	 DWORD PTR [eax], ecx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR __Off$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 658  :         return pos_type(_State, _Off); // return new position

  0007b	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  0007c	89 70 14	 mov	 DWORD PTR [eax+20], esi
  0007f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00082	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00089	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00090	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00093	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 659  :     }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 20 00	 ret	 32			; 00000020H
$LN3@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  0009a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	5e		 pop	 esi
  000a1	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000a7	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  000ae	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000b5	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000bc	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 659  :     }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Fileposition$ = 12					; size = 8
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 628  :         ios_base::openmode = ios_base::in | ios_base::out) override { // change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  00008	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 633  :             && !_Pcvt) { // not converting

  0000b	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  0000e	39 02		 cmp	 DWORD PTR [edx], eax
  00010	75 1a		 jne	 SHORT $LN14@seekoff
  00012	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00016	75 14		 jne	 SHORT $LN14@seekoff
  00018	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  0001c	75 0e		 jne	 SHORT $LN14@seekoff

; 634  :             _Off -= static_cast<off_type>(sizeof(_Elem)); // back up over _Elem bytes

  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
  00021	8b 5d 10	 mov	 ebx, DWORD PTR __Off$[ebp+4]
  00024	83 c7 fe	 add	 edi, -2			; fffffffeH
  00027	83 d3 ff	 adc	 ebx, -1
  0002a	eb 06		 jmp	 SHORT $LN2@seekoff
$LN14@seekoff:

; 633  :             && !_Pcvt) { // not converting

  0002c	8b 5d 10	 mov	 ebx, DWORD PTR __Off$[ebp+4]
  0002f	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
$LN2@seekoff:

; 635  :         }
; 636  : 
; 637  :         if (!_Myfile || !_Endwrite()
; 638  :             || ((_Off != 0 || _Way != ios_base::cur) && _CSTD _fseeki64(_Myfile, _Off, _Way) != 0)
; 639  :             || _CSTD fgetpos(_Myfile, &_Fileposition) != 0) {

  00032	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00036	74 72		 je	 SHORT $LN4@seekoff
  00038	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite
  0003d	84 c0		 test	 al, al
  0003f	74 69		 je	 SHORT $LN4@seekoff
  00041	8b c7		 mov	 eax, edi
  00043	0b c3		 or	 eax, ebx
  00045	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00048	75 05		 jne	 SHORT $LN6@seekoff
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	74 12		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	57		 push	 edi
  00052	ff 76 4c	 push	 DWORD PTR [esi+76]
  00055	e8 00 00 00 00	 call	 __fseeki64
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	85 c0		 test	 eax, eax
  0005f	75 49		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  00061	8d 45 0c	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00064	50		 push	 eax
  00065	ff 76 4c	 push	 DWORD PTR [esi+76]
  00068	e8 00 00 00 00	 call	 _fgetpos
  0006d	83 c4 08	 add	 esp, 8
  00070	85 c0		 test	 eax, eax
  00072	75 36		 jne	 SHORT $LN4@seekoff

; 640  :             return pos_type(-1); // report failure
; 641  :         }
; 642  : 
; 643  :         _Reset_back(); // revert from _Mychar buffer, discarding any putback

  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@AAEXXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Reset_back
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  0007b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 644  :         return pos_type(_State, _Fileposition); // return new position

  0007e	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00081	8b 76 44	 mov	 esi, DWORD PTR [esi+68]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00087	5f		 pop	 edi
  00088	89 70 14	 mov	 DWORD PTR [eax+20], esi
  0008b	89 08		 mov	 DWORD PTR [eax], ecx
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 645  :     }

  00090	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00094	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0009b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000a2	89 50 10	 mov	 DWORD PTR [eax+16], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 645  :     }

  000a5	5b		 pop	 ebx
  000a6	5d		 pop	 ebp
  000a7	c2 14 00	 ret	 20			; 00000014H
$LN4@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  000aa	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 645  :     }

  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  000b3	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000b9	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  000c0	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000c7	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000ce	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 645  :     }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?xsputn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
_TEXT	SEGMENT
__Size$2$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 596  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 622  :             return _Mysb::xsputn(_Ptr, _Count);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  0000e	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00011	56		 push	 esi
  00012	8b f0		 mov	 esi, eax
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 335  :         while (0 < _Count) {

  00017	85 c9		 test	 ecx, ecx
  00019	0f 8c aa 00 00
	00		 jl	 $LN29@xsputn
  0001f	7f 08		 jg	 SHORT $LN33@xsputn
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a0 00 00
	00		 je	 $LN29@xsputn
$LN33@xsputn:
  00029	53		 push	 ebx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@xsputn:

; 336  :             streamsize _Size = _Pnavail();

  00030	8b ca		 mov	 ecx, edx
  00032	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00037	8b d8		 mov	 ebx, eax
  00039	8b c2		 mov	 eax, edx
  0003b	89 45 f8	 mov	 DWORD PTR __Size$2$[ebp], eax

; 337  :             if (0 < _Size) { // copy to write buffer

  0003e	85 c0		 test	 eax, eax
  00040	7c 44		 jl	 SHORT $LN6@xsputn
  00042	7f 04		 jg	 SHORT $LN27@xsputn
  00044	85 db		 test	 ebx, ebx
  00046	74 3e		 je	 SHORT $LN6@xsputn
$LN27@xsputn:

; 338  :                 if (_Count < _Size) {

  00048	3b f8		 cmp	 edi, eax
  0004a	7f 0b		 jg	 SHORT $LN8@xsputn
  0004c	7c 04		 jl	 SHORT $LN28@xsputn
  0004e	3b f3		 cmp	 esi, ebx
  00050	73 05		 jae	 SHORT $LN8@xsputn
$LN28@xsputn:

; 339  :                     _Size = _Count;

  00052	8b de		 mov	 ebx, esi
  00054	89 7d f8	 mov	 DWORD PTR __Size$2$[ebp], edi
$LN8@xsputn:

; 193  :         return *_IPnext;

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0005a	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0005d	50		 push	 eax
  0005e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00061	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 193  :         return *_IPnext;

  00062	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00065	ff 30		 push	 DWORD PTR [eax]
  00067	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 235  :         *_IPcount -= _Off;

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 236  :         *_IPnext += _Off;

  0006f	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 344  :                 _Count -= _Size;

  00075	2b f3		 sub	 esi, ebx
  00077	1b 7d f8	 sbb	 edi, DWORD PTR __Size$2$[ebp]

; 235  :         *_IPcount -= _Off;

  0007a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0007d	29 18		 sub	 DWORD PTR [eax], ebx

; 236  :         *_IPnext += _Off;

  0007f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00082	01 08		 add	 DWORD PTR [eax], ecx

; 346  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00084	eb 27		 jmp	 SHORT $LN10@xsputn
$LN6@xsputn:
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00091	50		 push	 eax
  00092	ff 52 0c	 call	 DWORD PTR [edx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00095	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0009a	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 346  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  0009d	74 23		 je	 SHORT $LN32@xsputn
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 347  :                 break; // single character put failed, quit
; 348  :             } else { // count character successfully put
; 349  :                 ++_Ptr;
; 350  :                 --_Count;

  000a2	83 c6 ff	 add	 esi, -1
  000a5	b9 02 00 00 00	 mov	 ecx, 2
  000aa	83 d7 ff	 adc	 edi, -1
$LN10@xsputn:

; 335  :         while (0 < _Count) {

  000ad	01 4d 08	 add	 DWORD PTR __Ptr$[ebp], ecx
  000b0	85 ff		 test	 edi, edi
  000b2	0f 8f 78 ff ff
	ff		 jg	 $LL4@xsputn
  000b8	7c 08		 jl	 SHORT $LN32@xsputn
  000ba	85 f6		 test	 esi, esi
  000bc	0f 85 6e ff ff
	ff		 jne	 $LL4@xsputn
$LN32@xsputn:
  000c2	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000c5	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  000c8	5b		 pop	 ebx
$LN29@xsputn:

; 351  :             }
; 352  :         }
; 353  : 
; 354  :         return _Start_count - _Count;

  000c9	2b c6		 sub	 eax, esi
  000cb	1b cf		 sbb	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 622  :             return _Mysb::xsputn(_Ptr, _Count);

  000cd	5f		 pop	 edi
  000ce	8b d1		 mov	 edx, ecx
  000d0	5e		 pop	 esi

; 623  :         }
; 624  :     }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?xsgetn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
_TEXT	SEGMENT
__Size$2$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 548  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 592  :             return _Mysb::xsgetn(_Ptr, _Count);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  0000e	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00011	56		 push	 esi
  00012	8b f0		 mov	 esi, eax
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 306  :         while (0 < _Count) {

  00017	85 c9		 test	 ecx, ecx
  00019	0f 8c b0 00 00
	00		 jl	 $LN28@xsgetn
  0001f	7f 08		 jg	 SHORT $LN32@xsgetn
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a6 00 00
	00		 je	 $LN28@xsgetn
$LN32@xsgetn:
  00029	53		 push	 ebx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@xsgetn:

; 307  :             streamsize _Size = _Gnavail();

  00030	8b ca		 mov	 ecx, edx
  00032	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00037	8b d8		 mov	 ebx, eax
  00039	8b c2		 mov	 eax, edx
  0003b	89 45 f8	 mov	 DWORD PTR __Size$2$[ebp], eax

; 308  :             if (0 < _Size) { // copy from read buffer

  0003e	85 c0		 test	 eax, eax
  00040	7c 46		 jl	 SHORT $LN6@xsgetn
  00042	7f 04		 jg	 SHORT $LN26@xsgetn
  00044	85 db		 test	 ebx, ebx
  00046	74 40		 je	 SHORT $LN6@xsgetn
$LN26@xsgetn:

; 309  :                 if (_Count < _Size) {

  00048	3b f8		 cmp	 edi, eax
  0004a	7f 0b		 jg	 SHORT $LN8@xsgetn
  0004c	7c 04		 jl	 SHORT $LN27@xsgetn
  0004e	3b f3		 cmp	 esi, ebx
  00050	73 05		 jae	 SHORT $LN8@xsgetn
$LN27@xsgetn:

; 310  :                     _Size = _Count;

  00052	8b de		 mov	 ebx, esi
  00054	89 7d f8	 mov	 DWORD PTR __Size$2$[ebp], edi
$LN8@xsgetn:

; 185  :         return *_IGnext;

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0005a	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0005d	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  0005e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00061	ff 30		 push	 DWORD PTR [eax]
  00063	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00066	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 201  :         *_IGcount -= _Off;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 202  :         *_IGnext += _Off;

  0006e	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 315  :                 _Count -= _Size;

  00074	2b f3		 sub	 esi, ebx
  00076	1b 7d f8	 sbb	 edi, DWORD PTR __Size$2$[ebp]

; 201  :         *_IGcount -= _Off;

  00079	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0007c	29 18		 sub	 DWORD PTR [eax], ebx

; 202  :         *_IGnext += _Off;

  0007e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00081	01 08		 add	 DWORD PTR [eax], ecx

; 317  :             } else {

  00083	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00086	eb 29		 jmp	 SHORT $LN7@xsgetn
$LN6@xsgetn:

; 318  :                 const int_type _Meta = uflow();

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0008b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008d	ff 50 1c	 call	 DWORD PTR [eax+28]
  00090	0f b7 c8	 movzx	 ecx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00093	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00098	66 3b c1	 cmp	 ax, cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 319  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0009b	74 2b		 je	 SHORT $LN31@xsgetn

; 320  :                     break; // end of file, quit
; 321  :                 }
; 322  : 
; 323  :                 // get a single character
; 324  :                 *_Ptr++ = _Traits::to_char_type(_Meta);

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 325  :                 --_Count;

  000a0	83 c6 ff	 add	 esi, -1
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  000a6	83 d7 ff	 adc	 edi, -1
  000a9	66 89 08	 mov	 WORD PTR [eax], cx
  000ac	b9 02 00 00 00	 mov	 ecx, 2
$LN7@xsgetn:

; 306  :         while (0 < _Count) {

  000b1	03 c1		 add	 eax, ecx
  000b3	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  000b6	85 ff		 test	 edi, edi
  000b8	0f 8f 72 ff ff
	ff		 jg	 $LL4@xsgetn
  000be	7c 08		 jl	 SHORT $LN31@xsgetn
  000c0	85 f6		 test	 esi, esi
  000c2	0f 85 68 ff ff
	ff		 jne	 $LL4@xsgetn
$LN31@xsgetn:
  000c8	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  000ce	5b		 pop	 ebx
$LN28@xsgetn:

; 326  :             }
; 327  :         }
; 328  : 
; 329  :         return _Start_count - _Count;

  000cf	2b c6		 sub	 eax, esi
  000d1	1b cf		 sbb	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 592  :             return _Mysb::xsgetn(_Ptr, _Count);

  000d3	5f		 pop	 edi
  000d4	8b d1		 mov	 edx, ecx
  000d6	5e		 pop	 esi

; 593  :         }
; 594  :     }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
__Dest$2 = -68						; size = 4
_this$GSCopy$1$ = -64					; size = 4
__New_ptr$3 = -60					; size = 4
__Old_capacity$1$ = -56					; size = 4
__Src$4 = -52						; size = 4
__Meta$1$ = -48						; size = 4
__Ch$5 = -44						; size = 2
__Str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 490  :     virtual int_type __CLR_OR_THIS_CALL uflow() override { // get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  00030	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 491  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  00035	85 c9		 test	 ecx, ecx
  00037	74 23		 je	 SHORT $LN206@uflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 197  :         return *_IGnext + *_IGcount;

  00039	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  0003c	8b 32		 mov	 esi, DWORD PTR [edx]
  0003e	8d 04 71	 lea	 eax, DWORD PTR [ecx+esi*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 491  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  00041	3b c8		 cmp	 ecx, eax
  00043	73 17		 jae	 SHORT $LN206@uflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 221  :         --*_IGcount;

  00045	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00048	89 02		 mov	 DWORD PTR [edx], eax

; 222  :         return (*_IGnext)++;

  0004a	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  00052	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 492  :             return _Traits::to_int_type(*_Mysb::_Gninc()); // return buffered

  00054	66 8b 00	 mov	 ax, WORD PTR [eax]
  00057	e9 2b 02 00 00	 jmp	 $LN186@uflow
$LN206@uflow:

; 493  :         }
; 494  : 
; 495  :         if (!_Myfile) {

  0005c	83 7b 4c 00	 cmp	 DWORD PTR [ebx+76], 0
  00060	75 0a		 jne	 SHORT $LN10@uflow

; 496  :             return _Traits::eof(); // no open C stream, fail

  00062	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00067	e9 1b 02 00 00	 jmp	 $LN186@uflow
$LN10@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  0006c	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 774  :         if (_Mysb::eback() == &_Mychar) {

  0006f	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]
  00072	39 06		 cmp	 DWORD PTR [esi], eax
  00074	75 16		 jne	 SHORT $LN33@uflow

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00076	8b 53 54	 mov	 edx, DWORD PTR [ebx+84]
  00079	8b 4b 50	 mov	 ecx, DWORD PTR [ebx+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  0007c	2b d1		 sub	 edx, ecx
  0007e	89 0e		 mov	 DWORD PTR [esi], ecx
  00080	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00083	d1 fa		 sar	 edx, 1
  00085	89 08		 mov	 DWORD PTR [eax], ecx
  00087	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0008a	89 10		 mov	 DWORD PTR [eax], edx
$LN33@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 500  :         if (!_Pcvt) { // no codecvt facet, just get it

  0008c	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  00090	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  00093	75 21		 jne	 SHORT $LN11@uflow

; 78   :     if ((_Meta = _CSTD fgetwc(_File)) == WEOF) {

  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _fgetwc
  0009b	0f b7 c0	 movzx	 eax, ax
  0009e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000a3	83 c4 04	 add	 esp, 4
  000a6	66 3b c1	 cmp	 ax, cx
  000a9	0f 85 d8 01 00
	00		 jne	 $LN186@uflow

; 501  :             _Elem _Ch;
; 502  :             return _Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch) : _Traits::eof();

  000af	8b c1		 mov	 eax, ecx
  000b1	e9 d1 01 00 00	 jmp	 $LN186@uflow
$LN11@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000bd	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000c4	c6 45 d8 00	 mov	 BYTE PTR __Str$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 510  :             int _Meta = _CSTD fgetc(_Myfile);

  000c8	50		 push	 eax
  000c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d0	e8 00 00 00 00	 call	 _fgetc
  000d5	8b d0		 mov	 edx, eax
  000d7	83 c4 04	 add	 esp, 4
  000da	89 55 d0	 mov	 DWORD PTR __Meta$1$[ebp], edx

; 511  : 
; 512  :             if (_Meta == EOF) {

  000dd	83 fa ff	 cmp	 edx, -1
  000e0	0f 84 7e 01 00
	00		 je	 $LN193@uflow
$LL2@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  000e6	8b 4d ec	 mov	 ecx, DWORD PTR __Str$[ebp+20]
  000e9	8b 7d e8	 mov	 edi, DWORD PTR __Str$[ebp+16]
  000ec	89 4d c8	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  000ef	3b f9		 cmp	 edi, ecx

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  000f1	73 1d		 jae	 SHORT $LN63@uflow

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  000f3	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 2153 :         return _BUF_SIZE <= _Myres;

  000f6	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  000f9	89 45 e8	 mov	 DWORD PTR __Str$[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  000fc	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  000ff	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$[ebp]

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00103	88 14 38	 mov	 BYTE PTR [eax+edi], dl

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00106	c6 44 38 01 00	 mov	 BYTE PTR [eax+edi+1], 0

; 3614 :             return;

  0010b	e9 b1 00 00 00	 jmp	 $LN213@uflow
$LN63@uflow:

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00110	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00115	2b c7		 sub	 eax, edi

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00117	83 f8 01	 cmp	 eax, 1
  0011a	0f 82 e4 01 00
	00		 jb	 $LN194@uflow

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00120	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00123	83 ce 0f	 or	 esi, 15			; 0000000fH
  00126	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0012c	76 07		 jbe	 SHORT $LN78@uflow

; 4203 :             return _Max;

  0012e	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00133	eb 1e		 jmp	 SHORT $LN77@uflow
$LN78@uflow:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00135	8b d1		 mov	 edx, ecx
  00137	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0013c	d1 ea		 shr	 edx, 1
  0013e	2b c2		 sub	 eax, edx
  00140	3b c8		 cmp	 ecx, eax
  00142	76 07		 jbe	 SHORT $LN79@uflow

; 4207 :             return _Max;

  00144	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00149	eb 08		 jmp	 SHORT $LN77@uflow
$LN79@uflow:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0014b	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0014e	3b f0		 cmp	 esi, eax
  00150	0f 42 f0	 cmovb	 esi, eax
$LN77@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00153	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0015c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  0015f	89 75 ec	 mov	 DWORD PTR __Str$[ebp+20], esi

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00162	83 7d c8 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  00166	8b d8		 mov	 ebx, eax
  00168	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0016b	89 5d c4	 mov	 DWORD PTR __New_ptr$3[ebp], ebx
  0016e	89 45 e8	 mov	 DWORD PTR __Str$[ebp+16], eax
  00171	57		 push	 edi
  00172	72 28		 jb	 SHORT $LN72@uflow

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00174	8b 75 d8	 mov	 esi, DWORD PTR __Str$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00177	56		 push	 esi
  00178	53		 push	 ebx
  00179	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0017e	8b 45 d0	 mov	 eax, DWORD PTR __Meta$1$[ebp]
  00181	88 04 1f	 mov	 BYTE PTR [edi+ebx], al

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00184	8b 45 c8	 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  00187	40		 inc	 eax

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00188	c6 44 1f 01 00	 mov	 BYTE PTR [edi+ebx+1], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	50		 push	 eax
  0018e	56		 push	 esi
  0018f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00194	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00197	89 5d d8	 mov	 DWORD PTR __Str$[ebp], ebx

; 4267 :         } else {

  0019a	eb 28		 jmp	 SHORT $LN73@uflow
$LN72@uflow:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0019c	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  0019f	50		 push	 eax
  001a0	53		 push	 ebx
  001a1	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001a6	8b 45 d0	 mov	 eax, DWORD PTR __Meta$1$[ebp]
  001a9	88 04 1f	 mov	 BYTE PTR [edi+ebx], al

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001ac	8d 45 c4	 lea	 eax, DWORD PTR __New_ptr$3[ebp]
  001af	50		 push	 eax
  001b0	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001b3	c6 44 1f 01 00	 mov	 BYTE PTR [edi+ebx+1], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  001be	83 c4 14	 add	 esp, 20			; 00000014H
$LN213@uflow:

; 2144 :         const value_type* _Result = _Bx._Buf;

  001c1	8b 5d d8	 mov	 ebx, DWORD PTR __Str$[ebp]
$LN73@uflow:

; 2153 :         return _BUF_SIZE <= _Myres;

  001c4	83 7d ec 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001c8	8d 7d bc	 lea	 edi, DWORD PTR __Dest$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  001cb	8b 45 e8	 mov	 eax, DWORD PTR __Str$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  001ce	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001d1	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  001d2	0f 43 cb	 cmovae	 ecx, ebx

; 2144 :         const value_type* _Result = _Bx._Buf;

  001d5	8d 75 d8	 lea	 esi, DWORD PTR __Str$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  001d8	0f 43 f3	 cmovae	 esi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001db	8d 7d d6	 lea	 edi, DWORD PTR __Ch$5[ebp+2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  001de	8b 5d c0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  001e1	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001e3	57		 push	 edi
  001e4	8d 7d d4	 lea	 edi, DWORD PTR __Ch$5[ebp]
  001e7	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  001e8	8b 4b 38	 mov	 ecx, DWORD PTR [ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001eb	8d 7d cc	 lea	 edi, DWORD PTR __Src$4[ebp]
  001ee	57		 push	 edi
  001ef	50		 push	 eax
  001f0	56		 push	 esi
  001f1	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  001f3	8d 43 40	 lea	 eax, DWORD PTR [ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1979 :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  001f6	50		 push	 eax
  001f7	ff 52 18	 call	 DWORD PTR [edx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  001fa	85 c0		 test	 eax, eax
  001fc	0f 88 f8 00 00
	00		 js	 $LN16@uflow
  00202	83 f8 01	 cmp	 eax, 1
  00205	0f 8f d6 00 00
	00		 jg	 $LN195@uflow

; 521  :                 _Dest)) { // test result of converting one element
; 522  :             case codecvt_base::partial:
; 523  :             case codecvt_base::ok:
; 524  :                 if (_Dest != &_Ch) { // got an element, put back excess and deliver it

  0020b	8d 45 d4	 lea	 eax, DWORD PTR __Ch$5[ebp]
  0020e	39 45 bc	 cmp	 DWORD PTR __Dest$2[ebp], eax
  00211	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  00214	0f 85 89 00 00
	00		 jne	 $LN196@uflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0021a	83 7d ec 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  0021e	8d 55 d8	 lea	 edx, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 533  :                 _Str.erase(0, static_cast<size_t>(_Src - _Str.data())); // partial, discard used input

  00221	8b 7d cc	 mov	 edi, DWORD PTR __Src$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00224	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 533  :                 _Str.erase(0, static_cast<size_t>(_Src - _Str.data())); // partial, discard used input

  00228	2b f8		 sub	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0022a	8b 45 e8	 mov	 eax, DWORD PTR __Str$[ebp+16]
  0022d	3b c7		 cmp	 eax, edi
  0022f	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00232	83 7d ec 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00236	0f 43 55 d8	 cmovae	 edx, DWORD PTR __Str$[ebp]

; 3221 :         const size_type _New_size = _Old_size - _Count;

  0023a	2b c7		 sub	 eax, edi

; 3222 :         _Mypair._Myval2._Mysize   = _New_size;

  0023c	89 45 e8	 mov	 DWORD PTR __Str$[ebp+16], eax

; 3223 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  0023f	40		 inc	 eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00240	50		 push	 eax

; 3223 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  00241	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00244	50		 push	 eax
  00245	52		 push	 edx
  00246	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 510  :             int _Meta = _CSTD fgetc(_Myfile);

  0024b	ff 73 4c	 push	 DWORD PTR [ebx+76]
  0024e	e8 00 00 00 00	 call	 _fgetc
  00253	8b d0		 mov	 edx, eax
  00255	83 c4 10	 add	 esp, 16			; 00000010H
  00258	89 55 d0	 mov	 DWORD PTR __Meta$1$[ebp], edx

; 511  : 
; 512  :             if (_Meta == EOF) {

  0025b	83 fa ff	 cmp	 edx, -1
  0025e	0f 85 82 fe ff
	ff		 jne	 $LL2@uflow
$LN193@uflow:
  00264	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN21@uflow:
  00269	0f b7 c0	 movzx	 eax, ax
  0026c	0f b7 f0	 movzx	 esi, ax
$LN23@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0026f	8b 4d ec	 mov	 ecx, DWORD PTR __Str$[ebp+20]
  00272	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00275	72 0d		 jb	 SHORT $LN175@uflow

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00277	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00278	51		 push	 ecx
  00279	ff 75 d8	 push	 DWORD PTR __Str$[ebp]
  0027c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00281	83 c4 08	 add	 esp, 8
$LN175@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 541  :                 return _Traits::eof(); // conversion failed

  00284	66 8b c6	 mov	 ax, si
$LN186@uflow:

; 544  :     }

  00287	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00291	59		 pop	 ecx
  00292	5f		 pop	 edi
  00293	5e		 pop	 esi
  00294	5b		 pop	 ebx
  00295	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00298	33 cd		 xor	 ecx, ebp
  0029a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c3		 ret	 0
$LN196@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  002a3	83 7d ec 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 525  :                     auto _Nleft = _Str.data() + _Str.size() - _Src;

  002a7	8b 75 e8	 mov	 esi, DWORD PTR __Str$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002aa	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 525  :                     auto _Nleft = _Str.data() + _Str.size() - _Src;

  002ae	8b 4d cc	 mov	 ecx, DWORD PTR __Src$4[ebp]
  002b1	2b f1		 sub	 esi, ecx
  002b3	03 f0		 add	 esi, eax

; 526  :                     while (0 < _Nleft) {

  002b5	85 f6		 test	 esi, esi
  002b7	7e 22		 jle	 SHORT $LN209@uflow
  002b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL199@uflow:

; 527  :                         _CSTD ungetc(_Src[--_Nleft], _Myfile);

  002c0	ff 73 4c	 push	 DWORD PTR [ebx+76]
  002c3	0f be 44 0e ff	 movsx	 eax, BYTE PTR [esi+ecx-1]
  002c8	4e		 dec	 esi
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 _ungetc
  002cf	83 c4 08	 add	 esp, 8
  002d2	85 f6		 test	 esi, esi
  002d4	7e 05		 jle	 SHORT $LN209@uflow

; 526  :                     while (0 < _Nleft) {

  002d6	8b 4d cc	 mov	 ecx, DWORD PTR __Src$4[ebp]
  002d9	eb e5		 jmp	 SHORT $LL199@uflow
$LN209@uflow:

; 528  :                     }
; 529  : 
; 530  :                     return _Traits::to_int_type(_Ch);

  002db	0f b7 45 d4	 movzx	 eax, WORD PTR __Ch$5[ebp]
  002df	eb 88		 jmp	 SHORT $LN21@uflow
$LN195@uflow:

; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  002e1	83 f8 03	 cmp	 eax, 3
  002e4	75 14		 jne	 SHORT $LN16@uflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  002e6	83 7d ec 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  002ea	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  002ed	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 538  :                 return static_cast<int_type>(_Str.front());

  002f1	66 0f be 00	 movsx	 ax, BYTE PTR [eax]
  002f5	e9 6f ff ff ff	 jmp	 $LN21@uflow
$LN16@uflow:

; 541  :                 return _Traits::eof(); // conversion failed

  002fa	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  002ff	e9 6b ff ff ff	 jmp	 $LN23@uflow
$LN194@uflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  00304	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN212@uflow:
  00309	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::uflow
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 478  :     virtual int_type __CLR_OR_THIS_CALL underflow() override { // get an element from stream, but don't point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 480  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	74 11		 je	 SHORT $LN2@underflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 197  :         return *_IGnext + *_IGcount;

  0000c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0000f	8b 12		 mov	 edx, DWORD PTR [edx]
  00011	8d 14 50	 lea	 edx, DWORD PTR [eax+edx*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 480  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  00014	3b c2		 cmp	 eax, edx
  00016	73 05		 jae	 SHORT $LN2@underflow

; 481  :             return _Traits::to_int_type(*_Mysb::gptr()); // return buffered

  00018	66 8b 00	 mov	 ax, WORD PTR [eax]
  0001b	5e		 pop	 esi

; 487  :         }
; 488  :     }

  0001c	c3		 ret	 0
$LN2@underflow:

; 482  :         } else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow())) {

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	57		 push	 edi
  00020	ff 50 1c	 call	 DWORD PTR [eax+28]
  00023	0f b7 f8	 movzx	 edi, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00026	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002b	66 3b c7	 cmp	 ax, di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 482  :         } else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow())) {

  0002e	74 0b		 je	 SHORT $LN17@underflow

; 483  :             return _Meta; // uflow failed, return EOF
; 484  :         } else { // get a char, don't point past it
; 485  :             pbackfail(_Meta);

  00030	8b 16		 mov	 edx, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	57		 push	 edi
  00035	ff 52 10	 call	 DWORD PTR [edx+16]

; 486  :             return _Meta;

  00038	66 8b c7	 mov	 ax, di
$LN17@underflow:

; 487  :         }
; 488  :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	c3		 ret	 0
?underflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 457  :     virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type _Meta = _Traits::eof()) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00007	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  0000c	57		 push	 edi
  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Meta$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  00010	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	85 c9		 test	 ecx, ecx
  00017	74 2f		 je	 SHORT $LN2@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  00019	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001c	39 08		 cmp	 DWORD PTR [eax], ecx
  0001e	73 28		 jae	 SHORT $LN2@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00020	66 3b df	 cmp	 bx, di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00023	74 06		 je	 SHORT $LN4@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00025	66 39 79 fe	 cmp	 WORD PTR [ecx-2], di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00029	75 1d		 jne	 SHORT $LN2@pbackfail
$LN4@pbackfail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 216  :         ++*_IGcount;

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 464  :             return _Traits::not_eof(_Meta);

  0002e	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 216  :         ++*_IGcount;

  00030	ff 00		 inc	 DWORD PTR [eax]

; 217  :         return --*_IGnext;

  00032	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 464  :             return _Traits::not_eof(_Meta);

  00038	66 3b fb	 cmp	 di, bx
  0003b	0f b7 c7	 movzx	 eax, di
  0003e	5f		 pop	 edi

; 476  :     }

  0003f	5e		 pop	 esi
  00040	0f 44 c1	 cmove	 eax, ecx
  00043	5b		 pop	 ebx
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN2@pbackfail:

; 465  :         } else if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00048	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0004b	85 c0		 test	 eax, eax
  0004d	74 5d		 je	 SHORT $LN7@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  0004f	66 3b df	 cmp	 bx, di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 465  :         } else if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00052	74 58		 je	 SHORT $LN7@pbackfail

; 466  :             return _Traits::eof(); // no open C stream or EOF, fail
; 467  :         } else if (!_Pcvt && _Ungetc(_Traits::to_char_type(_Meta), _Myfile)) {

  00054	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00058	75 0f		 jne	 SHORT $LN50@pbackfail

; 145  :     return _CSTD ungetwc(_Wchar, _File) != WEOF;

  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	e8 00 00 00 00	 call	 _ungetwc
  00061	83 c4 08	 add	 esp, 8
  00064	66 3b c3	 cmp	 ax, bx

; 466  :             return _Traits::eof(); // no open C stream or EOF, fail
; 467  :         } else if (!_Pcvt && _Ungetc(_Traits::to_char_type(_Meta), _Myfile)) {

  00067	75 39		 jne	 SHORT $LN52@pbackfail
$LN50@pbackfail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  00069	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 469  :         } else if (_Mysb::gptr() != &_Mychar) { // putback to _Mychar

  0006c	8d 56 3c	 lea	 edx, DWORD PTR [esi+60]
  0006f	39 10		 cmp	 DWORD PTR [eax], edx
  00071	74 39		 je	 SHORT $LN7@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  00073	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 470  :             _Mychar = _Traits::to_char_type(_Meta);

  00076	66 89 3a	 mov	 WORD PTR [edx], di

; 780  :         if (_Mysb::eback() != &_Mychar) { // save current get buffer

  00079	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007b	3b c2		 cmp	 eax, edx
  0007d	74 13		 je	 SHORT $LN51@pbackfail

; 781  :             _Set_eback = _Mysb::eback();

  0007f	89 46 50	 mov	 DWORD PTR [esi+80], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 197  :         return *_IGnext + *_IGcount;

  00082	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0008a	8b 00		 mov	 eax, DWORD PTR [eax]
  0008c	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 782  :             _Set_egptr = _Mysb::egptr();

  0008f	89 46 54	 mov	 DWORD PTR [esi+84], eax
$LN51@pbackfail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 206  :         *_IGfirst = _First;

  00092	89 13		 mov	 DWORD PTR [ebx], edx

; 207  :         *_IGnext  = _Next;

  00094	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00097	89 10		 mov	 DWORD PTR [eax], edx

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  00099	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0009c	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN52@pbackfail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 476  :     }

  000a2	66 8b c7	 mov	 ax, di
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
$LN7@pbackfail:
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	66 8b c3	 mov	 ax, bx
  000b1	5b		 pop	 ebx
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
__Src$ = -48						; size = 4
__Dest$ = -44						; size = 4
__Ch$ = -40						; size = 2
__Str$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 406  :     virtual int_type __CLR_OR_THIS_CALL overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00012	8b 7d 08	 mov	 edi, DWORD PTR __Meta$[ebp]
  00015	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 406  :     virtual int_type __CLR_OR_THIS_CALL overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

  0001a	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  0001c	66 3b c7	 cmp	 ax, di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 407  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0001f	75 14		 jne	 SHORT $LN4@overflow

; 408  :             return _Traits::not_eof(_Meta); // EOF, return success code

  00021	5f		 pop	 edi
  00022	33 c0		 xor	 eax, eax

; 454  :         }
; 455  :     }

  00024	5e		 pop	 esi
  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 193  :         return *_IPnext;

  00035	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00038	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 411  :         if (_Mysb::pptr() && _Mysb::pptr() < _Mysb::epptr()) { // room in buffer, store it

  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 34		 je	 SHORT $LN5@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 212  :         return *_IPnext + *_IPcount;

  0003f	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00042	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00044	8d 04 59	 lea	 eax, DWORD PTR [ecx+ebx*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 411  :         if (_Mysb::pptr() && _Mysb::pptr() < _Mysb::epptr()) { // room in buffer, store it

  00047	3b c8		 cmp	 ecx, eax
  00049	73 28		 jae	 SHORT $LN5@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 253  :         --*_IPcount;

  0004b	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  0004e	89 0a		 mov	 DWORD PTR [edx], ecx

; 254  :         return (*_IPnext)++;

  00050	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00053	8b 32		 mov	 esi, DWORD PTR [edx]
  00055	8d 4e 02	 lea	 ecx, DWORD PTR [esi+2]
  00058	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 412  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005a	66 89 3e	 mov	 WORD PTR [esi], di
$LN44@overflow:

; 413  :             return _Meta;

  0005d	5b		 pop	 ebx
  0005e	66 8b c7	 mov	 ax, di
  00061	5f		 pop	 edi

; 454  :         }
; 455  :     }

  00062	5e		 pop	 esi
  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN5@overflow:

; 414  :         }
; 415  : 
; 416  :         if (!_Myfile) {

  00073	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00077	0f 84 d2 00 00
	00		 je	 $LN12@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  0007d	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 774  :         if (_Mysb::eback() == &_Mychar) {

  00080	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  00083	39 03		 cmp	 DWORD PTR [ebx], eax
  00085	75 16		 jne	 SHORT $LN33@overflow

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00087	8b 56 54	 mov	 edx, DWORD PTR [esi+84]
  0008a	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  0008d	2b d1		 sub	 edx, ecx
  0008f	89 0b		 mov	 DWORD PTR [ebx], ecx
  00091	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00094	d1 fa		 sar	 edx, 1
  00096	89 08		 mov	 DWORD PTR [eax], ecx
  00098	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0009b	89 10		 mov	 DWORD PTR [eax], edx
$LN33@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 421  :         if (!_Pcvt) { // no codecvt facet, put as is

  0009d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000a0	85 c9		 test	 ecx, ecx
  000a2	75 32		 jne	 SHORT $LN7@overflow

; 112  :     return _CSTD fputwc(_Wchar, _File) != WEOF;

  000a4	ff 76 4c	 push	 DWORD PTR [esi+76]
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 _fputwc
  000ad	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000b2	83 c4 08	 add	 esp, 8
  000b5	66 3b c1	 cmp	 ax, cx

; 422  :             return _Fputc(_Traits::to_char_type(_Meta), _Myfile) ? _Meta : _Traits::eof();

  000b8	0f b7 c7	 movzx	 eax, di
  000bb	0f 85 93 00 00
	00		 jne	 $LN43@overflow
  000c1	5b		 pop	 ebx
  000c2	5f		 pop	 edi
  000c3	8b c1		 mov	 eax, ecx

; 454  :         }
; 455  :     }

  000c5	5e		 pop	 esi
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c9	33 cd		 xor	 ecx, ebp
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN7@overflow:

; 423  :         }
; 424  : 
; 425  :         // put using codecvt facet
; 426  :         constexpr size_t _Codecvt_temp_buf = 32;
; 427  :         char _Str[_Codecvt_temp_buf];
; 428  :         const _Elem _Ch = _Traits::to_char_type(_Meta);

  000d6	0f b7 c7	 movzx	 eax, di
  000d9	89 45 d8	 mov	 DWORD PTR __Ch$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1985 :         return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  000dc	8d 45 d4	 lea	 eax, DWORD PTR __Dest$[ebp]
  000df	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e1	50		 push	 eax
  000e2	8d 45 fc	 lea	 eax, DWORD PTR __Str$[ebp+32]
  000e5	50		 push	 eax
  000e6	8d 45 dc	 lea	 eax, DWORD PTR __Str$[ebp]
  000e9	50		 push	 eax
  000ea	8d 45 d0	 lea	 eax, DWORD PTR __Src$[ebp]
  000ed	50		 push	 eax
  000ee	8d 45 da	 lea	 eax, DWORD PTR __Ch$[ebp+2]
  000f1	50		 push	 eax
  000f2	8d 45 d8	 lea	 eax, DWORD PTR __Ch$[ebp]
  000f5	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 431  :         switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf,

  000f6	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 1985 :         return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  000f9	50		 push	 eax
  000fa	ff 52 1c	 call	 DWORD PTR [edx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 431  :         switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf,

  000fd	85 c0		 test	 eax, eax
  000ff	78 4e		 js	 SHORT $LN12@overflow
  00101	83 f8 01	 cmp	 eax, 1
  00104	7e 1c		 jle	 SHORT $LN8@overflow
  00106	83 f8 03	 cmp	 eax, 3
  00109	75 44		 jne	 SHORT $LN12@overflow

; 442  :                 return _Meta; // converted whole element
; 443  :             }
; 444  : 
; 445  :             return _Traits::eof(); // conversion failed
; 446  :         }
; 447  : 
; 448  :         case codecvt_base::noconv:
; 449  :             // no conversion, put as is
; 450  :             return _Fputc(_Ch, _Myfile) ? _Meta : _Traits::eof();

  0010b	ff 76 4c	 push	 DWORD PTR [esi+76]
  0010e	ff 75 d8	 push	 DWORD PTR __Ch$[ebp]
  00111	e8 00 00 00 00	 call	 ??$_Fputc@_W@std@@YA_N_WPAU_iobuf@@@Z ; std::_Fputc<wchar_t>
  00116	83 c4 08	 add	 esp, 8
  00119	84 c0		 test	 al, al
  0011b	0f b7 c7	 movzx	 eax, di
  0011e	75 34		 jne	 SHORT $LN43@overflow
  00120	eb 2d		 jmp	 SHORT $LN12@overflow
$LN8@overflow:

; 432  :             _Dest)) { // test result of converting one element
; 433  :         case codecvt_base::partial:
; 434  :         case codecvt_base::ok: { // converted something, try to put it out
; 435  :             const auto _Count = static_cast<size_t>(_Dest - _Str);

  00122	8b 5d d4	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00125	8d 45 dc	 lea	 eax, DWORD PTR __Str$[ebp]
  00128	2b d8		 sub	 ebx, eax

; 436  :             if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

  0012a	74 13		 je	 SHORT $LN9@overflow
  0012c	ff 76 4c	 push	 DWORD PTR [esi+76]
  0012f	53		 push	 ebx
  00130	6a 01		 push	 1
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _fwrite
  00138	83 c4 10	 add	 esp, 16			; 00000010H
  0013b	3b d8		 cmp	 ebx, eax
  0013d	75 10		 jne	 SHORT $LN12@overflow
$LN9@overflow:

; 437  :                 return _Traits::eof(); // write failed
; 438  :             }
; 439  : 
; 440  :             _Wrotesome = true; // write succeeded
; 441  :             if (_Src != &_Ch) {

  0013f	8d 45 d8	 lea	 eax, DWORD PTR __Ch$[ebp]
  00142	c6 46 3e 01	 mov	 BYTE PTR [esi+62], 1
  00146	39 45 d0	 cmp	 DWORD PTR __Src$[ebp], eax
  00149	0f 85 0e ff ff
	ff		 jne	 $LN44@overflow
$LN12@overflow:

; 451  : 
; 452  :         default:
; 453  :             return _Traits::eof(); // conversion failed

  0014f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN43@overflow:

; 454  :         }
; 455  :     }

  00154	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00157	5b		 pop	 ebx
  00158	5f		 pop	 edi
  00159	33 cd		 xor	 ecx, ebp
  0015b	5e		 pop	 esi
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c2 04 00	 ret	 4
?overflow@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 400  :         if (_Myfile) {

  00000	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN2@Unlock

; 401  :             _CSTD _unlock_file(_Myfile);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 __unlock_file
  0000d	59		 pop	 ecx
$LN2@Unlock:

; 402  :         }
; 403  :     }

  0000e	c3		 ret	 0
?_Unlock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 394  :         if (_Myfile) {

  00000	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN2@Lock

; 395  :             _CSTD _lock_file(_Myfile);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 __lock_file
  0000d	59		 pop	 ecx
$LN2@Lock:

; 396  :         }
; 397  :     }

  0000e	c3		 ret	 0
?_Lock@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
tv384 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 170  :     virtual __CLR_OR_THIS_CALL ~basic_filebuf() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi

; 171  :         if (_Myfile) {

  0002d	83 7f 4c 00	 cmp	 DWORD PTR [edi+76], 0
  00031	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@
  00037	74 20		 je	 SHORT $LN6@basic_file
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 181  :         return *_IGfirst;

  00039	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 774  :         if (_Mysb::eback() == &_Mychar) {

  0003c	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  0003f	39 06		 cmp	 DWORD PTR [esi], eax
  00041	75 16		 jne	 SHORT $LN6@basic_file

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00043	8b 57 54	 mov	 edx, DWORD PTR [edi+84]
  00046	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  00049	2b d1		 sub	 edx, ecx
  0004b	89 0e		 mov	 DWORD PTR [esi], ecx
  0004d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00050	d1 fa		 sar	 edx, 1
  00052	89 08		 mov	 DWORD PTR [eax], ecx
  00054	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00057	89 10		 mov	 DWORD PTR [eax], edx
$LN6@basic_file:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 175  :         if (_Closef) {

  00059	80 7f 48 00	 cmp	 BYTE PTR [edi+72], 0
  0005d	0f 84 95 00 00
	00		 je	 $LN3@basic_file

; 376  :         if (_Myfile) { // put any homing sequence and close file

  00063	83 7f 4c 00	 cmp	 DWORD PTR [edi+76], 0
  00067	74 12		 je	 SHORT $LN13@basic_file

; 377  :             _Ans = this;
; 378  :             if (!_Endwrite()) {

  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAE_NXZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Endwrite

; 379  :                 _Ans = nullptr;
; 380  :             }
; 381  : 
; 382  :             if (_CSTD fclose(_Myfile) != 0) {

  00070	ff 77 4c	 push	 DWORD PTR [edi+76]
  00073	e8 00 00 00 00	 call	 _fclose
  00078	83 c4 04	 add	 esp, 4
$LN13@basic_file:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 264  :         _IGnext  = &_Gnext;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007e	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  00081	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx
  00084	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 698  :         _Closef    = _Which == _Openfl;

  00087	c6 47 48 00	 mov	 BYTE PTR [edi+72], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 265  :         _IPnext  = &_Pnext;

  0008b	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 699  :         _Wrotesome = false;

  0008e	c6 47 3e 00	 mov	 BYTE PTR [edi+62], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 266  :         _IGcount = &_Gcount;

  00092	8d 50 24	 lea	 edx, DWORD PTR [eax+36]
  00095	89 77 10	 mov	 DWORD PTR [edi+16], esi
  00098	83 c7 14	 add	 edi, 20			; 00000014H
  0009b	89 78 1c	 mov	 DWORD PTR [eax+28], edi
  0009e	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  000a1	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 267  :         _IPcount = &_Pcount;

  000a4	83 c0 28	 add	 eax, 40			; 00000028H
  000a7	89 5d ec	 mov	 DWORD PTR tv384[ebp], ebx
  000aa	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000ad	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 206  :         *_IGfirst = _First;

  000b0	8b 5d ec	 mov	 ebx, DWORD PTR tv384[ebp]

; 240  :         *_IPfirst = _First;

  000b3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 241  :         *_IPnext  = _First;

  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 242  :         *_IPcount = static_cast<int>(_Last - _First);

  000bf	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 206  :         *_IGfirst = _First;

  000c5	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 207  :         *_IGnext  = _Next;

  000cb	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  000d1	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  000d4	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  000da	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0

; 716  :         _State  = _Stinit;

  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  000e6	89 47 40	 mov	 DWORD PTR [edi+64], eax
  000e9	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  000ee	89 47 44	 mov	 DWORD PTR [edi+68], eax

; 717  :         _Pcvt   = nullptr; // pointer to codecvt facet

  000f1	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN3@basic_file:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 70   :         delete _Plocale;

  000f8	8b 77 34	 mov	 esi, DWORD PTR [edi+52]
  000fb	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00101	85 f6		 test	 esi, esi
  00103	74 23		 je	 SHORT $LN34@basic_file
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  00105	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00108	85 c9		 test	 ecx, ecx
  0010a	74 11		 je	 SHORT $LN39@basic_file

; 352  :             delete _Ptr->_Decref();

  0010c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010e	ff 50 08	 call	 DWORD PTR [eax+8]
  00111	85 c0		 test	 eax, eax
  00113	74 08		 je	 SHORT $LN39@basic_file
  00115	8b 10		 mov	 edx, DWORD PTR [eax]
  00117	8b c8		 mov	 ecx, eax
  00119	6a 01		 push	 1
  0011b	ff 12		 call	 DWORD PTR [edx]
$LN39@basic_file:
  0011d	6a 08		 push	 8
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
$LN34@basic_file:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 178  :     }

  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
  0013a	cc		 int	 3
  0013b	cc		 int	 3
  0013c	cc		 int	 3
  0013d	cc		 int	 3
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 70   :         delete _Plocale;

  00007	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00010	85 ff		 test	 edi, edi
  00012	74 23		 je	 SHORT $LN9@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  00014	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 11		 je	 SHORT $LN14@scalar

; 352  :             delete _Ptr->_Decref();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 50 08	 call	 DWORD PTR [eax+8]
  00020	85 c0		 test	 eax, eax
  00022	74 08		 je	 SHORT $LN14@scalar
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	8b c8		 mov	 ecx, eax
  00028	6a 01		 push	 1
  0002a	ff 12		 call	 DWORD PTR [edx]
$LN14@scalar:
  0002c	6a 08		 push	 8
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN16@scalar
  0003d	6a 38		 push	 56			; 00000038H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 377  :     virtual void __CLR_OR_THIS_CALL imbue(const locale&) {} // set locale to argument (do nothing)

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 374  :         return 0;

  00000	33 c0		 xor	 eax, eax

; 375  :     }

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 369  :         // offer buffer to external agent (do nothing)
; 370  :         return this;

  00000	8b c1		 mov	 eax, ecx

; 371  :     }

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 363  :     virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 366  :     }

  00029	5d		 pop	 ebp
  0002a	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 358  :         off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 361  :     }

  00029	5d		 pop	 ebp
  0002a	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -12					; size = 4
__Start_count$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 332  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 333  :         // put _Count characters to stream
; 334  :         const streamsize _Start_count = _Count;

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp+4]
  00010	8b c6		 mov	 eax, esi
  00012	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00015	8b cf		 mov	 ecx, edi
  00017	89 45 f8	 mov	 DWORD PTR __Start_count$1$[ebp], eax
  0001a	89 4d f4	 mov	 DWORD PTR __Start_count$2$[ebp], ecx

; 335  :         while (0 < _Count) {

  0001d	85 ff		 test	 edi, edi
  0001f	0f 8c a4 00 00
	00		 jl	 $LN27@xsputn
  00025	7f 08		 jg	 SHORT $LN31@xsputn
  00027	85 f6		 test	 esi, esi
  00029	0f 84 9a 00 00
	00		 je	 $LN27@xsputn
$LN31@xsputn:
  0002f	53		 push	 ebx
$LL2@xsputn:

; 336  :             streamsize _Size = _Pnavail();

  00030	8b ca		 mov	 ecx, edx
  00032	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00037	8b d8		 mov	 ebx, eax
  00039	8b c2		 mov	 eax, edx
  0003b	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 337  :             if (0 < _Size) { // copy to write buffer

  0003e	85 c0		 test	 eax, eax
  00040	7c 44		 jl	 SHORT $LN4@xsputn
  00042	7f 04		 jg	 SHORT $LN25@xsputn
  00044	85 db		 test	 ebx, ebx
  00046	74 3e		 je	 SHORT $LN4@xsputn
$LN25@xsputn:

; 338  :                 if (_Count < _Size) {

  00048	3b f8		 cmp	 edi, eax
  0004a	7f 0b		 jg	 SHORT $LN6@xsputn
  0004c	7c 04		 jl	 SHORT $LN26@xsputn
  0004e	3b f3		 cmp	 esi, ebx
  00050	73 05		 jae	 SHORT $LN6@xsputn
$LN26@xsputn:

; 339  :                     _Size = _Count;

  00052	8b de		 mov	 ebx, esi
  00054	89 7d 10	 mov	 DWORD PTR __Size$2$[ebp], edi
$LN6@xsputn:

; 193  :         return *_IPnext;

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0005a	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0005d	50		 push	 eax
  0005e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00061	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 193  :         return *_IPnext;

  00062	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00065	ff 30		 push	 DWORD PTR [eax]
  00067	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 235  :         *_IPcount -= _Off;

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 236  :         *_IPnext += _Off;

  0006f	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 344  :                 _Count -= _Size;

  00075	2b f3		 sub	 esi, ebx
  00077	1b 7d 10	 sbb	 edi, DWORD PTR __Size$2$[ebp]

; 235  :         *_IPcount -= _Off;

  0007a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0007d	29 18		 sub	 DWORD PTR [eax], ebx

; 236  :         *_IPnext += _Off;

  0007f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00082	01 08		 add	 DWORD PTR [eax], ecx

; 237  :     }

  00084	eb 27		 jmp	 SHORT $LN8@xsputn
$LN4@xsputn:

; 346  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00091	50		 push	 eax
  00092	ff 52 0c	 call	 DWORD PTR [edx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00095	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0009a	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 346  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  0009d	74 23		 je	 SHORT $LN30@xsputn

; 347  :                 break; // single character put failed, quit
; 348  :             } else { // count character successfully put
; 349  :                 ++_Ptr;
; 350  :                 --_Count;

  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  000a2	83 c6 ff	 add	 esi, -1
  000a5	b9 02 00 00 00	 mov	 ecx, 2
  000aa	83 d7 ff	 adc	 edi, -1
$LN8@xsputn:

; 335  :         while (0 < _Count) {

  000ad	01 4d 08	 add	 DWORD PTR __Ptr$[ebp], ecx
  000b0	85 ff		 test	 edi, edi
  000b2	0f 8f 78 ff ff
	ff		 jg	 $LL2@xsputn
  000b8	7c 08		 jl	 SHORT $LN30@xsputn
  000ba	85 f6		 test	 esi, esi
  000bc	0f 85 6e ff ff
	ff		 jne	 $LL2@xsputn
$LN30@xsputn:
  000c2	8b 45 f8	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __Start_count$2$[ebp]
  000c8	5b		 pop	 ebx
$LN27@xsputn:

; 351  :             }
; 352  :         }
; 353  : 
; 354  :         return _Start_count - _Count;

  000c9	2b c6		 sub	 eax, esi
  000cb	1b cf		 sbb	 ecx, edi
  000cd	5f		 pop	 edi
  000ce	8b d1		 mov	 edx, ecx
  000d0	5e		 pop	 esi

; 355  :     }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -12					; size = 4
__Start_count$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 303  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) { // get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 304  :         const streamsize _Start_count = _Count;

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp+4]
  00010	8b c6		 mov	 eax, esi
  00012	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00015	8b cf		 mov	 ecx, edi
  00017	89 45 f8	 mov	 DWORD PTR __Start_count$1$[ebp], eax
  0001a	89 4d f4	 mov	 DWORD PTR __Start_count$2$[ebp], ecx

; 305  : 
; 306  :         while (0 < _Count) {

  0001d	85 ff		 test	 edi, edi
  0001f	0f 8c aa 00 00
	00		 jl	 $LN26@xsgetn
  00025	7f 08		 jg	 SHORT $LN30@xsgetn
  00027	85 f6		 test	 esi, esi
  00029	0f 84 a0 00 00
	00		 je	 $LN26@xsgetn
$LN30@xsgetn:
  0002f	53		 push	 ebx
$LL2@xsgetn:

; 307  :             streamsize _Size = _Gnavail();

  00030	8b ca		 mov	 ecx, edx
  00032	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00037	8b d8		 mov	 ebx, eax
  00039	8b c2		 mov	 eax, edx
  0003b	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 308  :             if (0 < _Size) { // copy from read buffer

  0003e	85 c0		 test	 eax, eax
  00040	7c 46		 jl	 SHORT $LN4@xsgetn
  00042	7f 04		 jg	 SHORT $LN24@xsgetn
  00044	85 db		 test	 ebx, ebx
  00046	74 40		 je	 SHORT $LN4@xsgetn
$LN24@xsgetn:

; 309  :                 if (_Count < _Size) {

  00048	3b f8		 cmp	 edi, eax
  0004a	7f 0b		 jg	 SHORT $LN6@xsgetn
  0004c	7c 04		 jl	 SHORT $LN25@xsgetn
  0004e	3b f3		 cmp	 esi, ebx
  00050	73 05		 jae	 SHORT $LN6@xsgetn
$LN25@xsgetn:

; 310  :                     _Size = _Count;

  00052	8b de		 mov	 ebx, esi
  00054	89 7d 10	 mov	 DWORD PTR __Size$2$[ebp], edi
$LN6@xsgetn:

; 185  :         return *_IGnext;

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0005a	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0005d	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 185  :         return *_IGnext;

  0005e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00061	ff 30		 push	 DWORD PTR [eax]
  00063	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00066	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 201  :         *_IGcount -= _Off;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 202  :         *_IGnext += _Off;

  0006e	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 315  :                 _Count -= _Size;

  00074	2b f3		 sub	 esi, ebx
  00076	1b 7d 10	 sbb	 edi, DWORD PTR __Size$2$[ebp]

; 201  :         *_IGcount -= _Off;

  00079	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0007c	29 18		 sub	 DWORD PTR [eax], ebx

; 202  :         *_IGnext += _Off;

  0007e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00081	01 08		 add	 DWORD PTR [eax], ecx

; 316  :                 gbump(static_cast<int>(_Size));
; 317  :             } else {

  00083	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00086	eb 29		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 318  :                 const int_type _Meta = uflow();

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0008b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008d	ff 50 1c	 call	 DWORD PTR [eax+28]
  00090	0f b7 c8	 movzx	 ecx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00093	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00098	66 3b c1	 cmp	 ax, cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 319  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0009b	74 2b		 je	 SHORT $LN29@xsgetn

; 320  :                     break; // end of file, quit
; 321  :                 }
; 322  : 
; 323  :                 // get a single character
; 324  :                 *_Ptr++ = _Traits::to_char_type(_Meta);

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 325  :                 --_Count;

  000a0	83 c6 ff	 add	 esi, -1
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  000a6	83 d7 ff	 adc	 edi, -1
  000a9	66 89 08	 mov	 WORD PTR [eax], cx
  000ac	b9 02 00 00 00	 mov	 ecx, 2
$LN5@xsgetn:

; 305  : 
; 306  :         while (0 < _Count) {

  000b1	03 c1		 add	 eax, ecx
  000b3	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  000b6	85 ff		 test	 edi, edi
  000b8	0f 8f 72 ff ff
	ff		 jg	 $LL2@xsgetn
  000be	7c 08		 jl	 SHORT $LN29@xsgetn
  000c0	85 f6		 test	 esi, esi
  000c2	0f 85 68 ff ff
	ff		 jne	 $LL2@xsgetn
$LN29@xsgetn:
  000c8	8b 45 f8	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __Start_count$2$[ebp]
  000ce	5b		 pop	 ebx
$LN26@xsgetn:

; 326  :             }
; 327  :         }
; 328  : 
; 329  :         return _Start_count - _Count;

  000cf	2b c6		 sub	 eax, esi
  000d1	1b cf		 sbb	 ecx, edi
  000d3	5f		 pop	 edi
  000d4	8b d1		 mov	 edx, ecx
  000d6	5e		 pop	 esi

; 330  :     }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 299  :     virtual int_type __CLR_OR_THIS_CALL uflow() { // get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 300  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00008	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000d	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 300  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  00010	75 04		 jne	 SHORT $LN3@uflow
  00012	8b c1		 mov	 eax, ecx
  00014	5e		 pop	 esi

; 301  :     }

  00015	c3		 ret	 0
$LN3@uflow:

; 221  :         --*_IGcount;

  00016	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00019	ff 08		 dec	 DWORD PTR [eax]

; 222  :         return (*_IGnext)++;

  0001b	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001e	5e		 pop	 esi
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00024	89 01		 mov	 DWORD PTR [ecx], eax

; 300  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  00026	0f b7 02	 movzx	 eax, WORD PTR [edx]

; 301  :     }

  00029	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 296  :         return _Traits::eof();

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 297  :     }

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 292  :         return 0;

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 293  :     }

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 287  :         // put a character back to stream (always fail)
; 288  :         return _Traits::eof();

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 289  :     }

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 283  :         return _Traits::eof();

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 284  :     }

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 258  :         return *_IPnext ? *_IPcount : 0;

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 259  :     }

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 258  :         return *_IPnext ? *_IPcount : 0;

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 259  :     }

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 231  :         return *_IGnext ? *_IGcount : 0;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 232  :     }

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 231  :         return *_IGnext ? *_IGcount : 0;

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 232  :     }

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 177  :     virtual void __CLR_OR_THIS_CALL _Unlock() {} // clear the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 175  :     virtual void __CLR_OR_THIS_CALL _Lock() {} // set the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
_TEXT	SEGMENT
?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::snextc, COMDAT
; _this$ = ecx

; 139  :     int_type __CLR_OR_THIS_CALL snextc() { // point to next character and return it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 231  :         return *_IGnext ? *_IGcount : 0;

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 30		 je	 SHORT $LN15@snextc
  0000b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 140  :         return 1 < _Gnavail() ? _Traits::to_int_type(*_Gnpreinc())

  00010	83 f8 01	 cmp	 eax, 1
  00013	7e 10		 jle	 SHORT $LN20@snextc

; 226  :         --*_IGcount;

  00015	48		 dec	 eax
  00016	89 01		 mov	 DWORD PTR [ecx], eax

; 227  :         return ++(*_IGnext);

  00018	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001b	5e		 pop	 esi
  0001c	83 00 02	 add	 DWORD PTR [eax], 2
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]

; 140  :         return 1 < _Gnavail() ? _Traits::to_int_type(*_Gnpreinc())

  00021	0f b7 00	 movzx	 eax, WORD PTR [eax]

; 141  :                               : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
; 142  :     }

  00024	c3		 ret	 0
$LN20@snextc:

; 127  :         return 0 < _Gnavail() ? _Traits::to_int_type(*_Gninc()) : uflow();

  00025	85 c0		 test	 eax, eax
  00027	7e 12		 jle	 SHORT $LN15@snextc

; 221  :         --*_IGcount;

  00029	48		 dec	 eax
  0002a	89 01		 mov	 DWORD PTR [ecx], eax

; 222  :         return (*_IGnext)++;

  0002c	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 127  :         return 0 < _Gnavail() ? _Traits::to_int_type(*_Gninc()) : uflow();

  00036	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00039	eb 0a		 jmp	 SHORT $LN16@snextc
$LN15@snextc:
  0003b	8b 06		 mov	 eax, DWORD PTR [esi]
  0003d	8b ce		 mov	 ecx, esi
  0003f	ff 50 1c	 call	 DWORD PTR [eax+28]
  00042	0f b7 c0	 movzx	 eax, ax
$LN16@snextc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 235  :         return _Left == _Right;

  00045	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0004a	66 3b c8	 cmp	 cx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 140  :         return 1 < _Gnavail() ? _Traits::to_int_type(*_Gnpreinc())

  0004d	75 04		 jne	 SHORT $LN3@snextc
  0004f	8b c1		 mov	 eax, ecx
  00051	5e		 pop	 esi

; 141  :                               : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
; 142  :     }

  00052	c3		 ret	 0
$LN3@snextc:

; 231  :         return *_IGnext ? *_IGcount : 0;

  00053	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 0d		 je	 SHORT $LN27@snextc
  0005c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 131  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();

  0005f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00062	7e 05		 jle	 SHORT $LN27@snextc
  00064	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00067	5e		 pop	 esi

; 141  :                               : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
; 142  :     }

  00068	c3		 ret	 0
$LN27@snextc:

; 131  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 50 18	 call	 DWORD PTR [eax+24]
  00070	0f b7 c0	 movzx	 eax, ax
  00073	5e		 pop	 esi

; 141  :                               : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
; 142  :     }

  00074	c3		 ret	 0
?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::snextc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00000	56		 push	 esi

; 70   :         delete _Plocale;

  00001	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000a	85 f6		 test	 esi, esi
  0000c	74 23		 je	 SHORT $LN6@basic_stre
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  0000e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00011	85 c9		 test	 ecx, ecx
  00013	74 11		 je	 SHORT $LN11@basic_stre

; 352  :             delete _Ptr->_Decref();

  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	ff 50 08	 call	 DWORD PTR [eax+8]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN11@basic_stre
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	6a 01		 push	 1
  00024	ff 12		 call	 DWORD PTR [edx]
$LN11@basic_stre:
  00026	6a 08		 push	 8
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
$LN6@basic_stre:
  00031	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 71   :     }

  00032	c3		 ret	 0
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??1?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::~basic_ifstream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 944  :     virtual __CLR_OR_THIS_CALL ~basic_ifstream() noexcept {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00006	8d 4e a0	 lea	 ecx, DWORD PTR [esi-96]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 90	 lea	 eax, DWORD PTR [edx-112]
  0001d	89 44 32 8c	 mov	 DWORD PTR [edx+esi-116], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 72   :     virtual __CLR_OR_THIS_CALL ~basic_istream() noexcept {}

  00026	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00034	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003d	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
  00041	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 944  :     virtual __CLR_OR_THIS_CALL ~basic_ifstream() noexcept {}

  00042	c3		 ret	 0
??1?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::~basic_ifstream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -52						; size = 20
$T3 = -32						; size = 8
$T4 = -32						; size = 8
tv669 = -28						; size = 4
_this$ = -28						; size = 4
$T5 = -24						; size = 4
tv670 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_this$1$ = 20						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::basic_ifstream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 806  :     explicit basic_ifstream(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 808  :         : _Mybase(_STD addressof(_Filebuffer)) {

  0002d	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00031	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00038	74 1b		 je	 SHORT $LN2@basic_ifst
  0003a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_8?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@7B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 161  :     __CLR_OR_THIS_CALL basic_ios() {}

  00040	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [ebx+112], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 808  :         : _Mybase(_STD addressof(_Filebuffer)) {

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
$LN2@basic_ifst:
  00055	6a 00		 push	 0
  00057	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  0005a	8b cb		 mov	 ecx, ebx
  0005c	6a 00		 push	 0
  0005e	56		 push	 esi
  0005f	89 75 14	 mov	 DWORD PTR _this$1$[ebp], esi
  00062	e8 00 00 00 00	 call	 ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
  00067	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00069	6a 08		 push	 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 808  :         : _Mybase(_STD addressof(_Filebuffer)) {

  0006b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@6B@
  0007c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00081	89 75 e4	 mov	 DWORD PTR _this$[ebp], esi
  00084	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  00087	89 44 19 fc	 mov	 DWORD PTR [ecx+ebx-4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  0008b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
  0009b	85 ff		 test	 edi, edi
  0009d	74 13		 je	 SHORT $LN18@basic_ifst
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 271  :     locale() noexcept : _Ptr(_Init(true)) {}

  0009f	6a 01		 push	 1
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a5	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000aa	83 c4 04	 add	 esp, 4
  000ad	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  000b0	eb 02		 jmp	 SHORT $LN19@basic_ifst
$LN18@basic_ifst:
  000b2	33 ff		 xor	 edi, edi
$LN19@basic_ifst:

; 267  :         _IPcount = &_Pcount;

  000b4	8b 45 14	 mov	 eax, DWORD PTR _this$1$[ebp]
  000b7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000ba	89 5d ec	 mov	 DWORD PTR tv670[ebp], ebx
  000bd	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 162  :     basic_filebuf() : _Mysb() {

  000c0	8b 5d 14	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 265  :         _IPnext  = &_Pnext;

  000c3	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  000c6	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 267  :         _IPcount = &_Pcount;

  000c9	83 c0 28	 add	 eax, 40			; 00000028H
  000cc	89 55 e4	 mov	 DWORD PTR tv669[ebp], edx
  000cf	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]

; 262  :         _IGfirst = &_Gfirst;

  000d2	8b 55 14	 mov	 edx, DWORD PTR _this$1$[ebp]

; 266  :         _IGcount = &_Gcount;

  000d5	83 c6 24	 add	 esi, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 162  :     basic_filebuf() : _Mysb() {

  000d8	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@6B@

; 698  :         _Closef    = _Which == _Openfl;

  000de	c6 43 48 00	 mov	 BYTE PTR [ebx+72], 0

; 699  :         _Wrotesome = false;

  000e2	c6 43 3e 00	 mov	 BYTE PTR [ebx+62], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 262  :         _IGfirst = &_Gfirst;

  000e6	8b 5d ec	 mov	 ebx, DWORD PTR tv670[ebp]
  000e9	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx

; 263  :         _IPfirst = &_Pfirst;

  000ec	8b 5d 14	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000ef	8b 55 e4	 mov	 edx, DWORD PTR tv669[ebp]
  000f2	89 53 10	 mov	 DWORD PTR [ebx+16], edx

; 264  :         _IGnext  = &_Gnext;

  000f5	89 7b 1c	 mov	 DWORD PTR [ebx+28], edi

; 265  :         _IPnext  = &_Pnext;

  000f8	89 4b 20	 mov	 DWORD PTR [ebx+32], ecx

; 266  :         _IGcount = &_Gcount;

  000fb	89 73 2c	 mov	 DWORD PTR [ebx+44], esi

; 267  :         _IPcount = &_Pcount;

  000fe	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 206  :         *_IGfirst = _First;

  00101	8b 5d ec	 mov	 ebx, DWORD PTR tv670[ebp]

; 240  :         *_IPfirst = _First;

  00104	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 241  :         *_IPnext  = _First;

  0010a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 242  :         *_IPcount = static_cast<int>(_Last - _First);

  00110	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 206  :         *_IGfirst = _First;

  00116	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  0011c	8b 5d 14	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 207  :         *_IGnext  = _Next;

  0011f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  00125	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 715  :         _Myfile = _File;

  0012b	c7 43 4c 00 00
	00 00		 mov	 DWORD PTR [ebx+76], 0

; 716  :         _State  = _Stinit;

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  00137	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  0013a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  0013f	89 43 44	 mov	 DWORD PTR [ebx+68], eax

; 717  :         _Pcvt   = nullptr; // pointer to codecvt facet

  00142	c7 43 38 00 00
	00 00		 mov	 DWORD PTR [ebx+56], 0

; 281  :         const auto _File = _Fiopen(_Filename, _Mode, _Prot);

  00149	ff 75 10	 push	 DWORD PTR __Prot$[ebp]

; 809  :         // _Prot is an extension
; 810  :         if (!_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot)) {

  0014c	8b 45 0c	 mov	 eax, DWORD PTR __Mode$[ebp]
  0014f	83 c8 01	 or	 eax, 1
  00152	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 281  :         const auto _File = _Fiopen(_Filename, _Mode, _Prot);

  00156	50		 push	 eax
  00157	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  :         if (!_File) {

  00162	85 c0		 test	 eax, eax
  00164	74 62		 je	 SHORT $LN69@basic_ifst

; 283  :             return nullptr; // open failed
; 284  :         }
; 285  : 
; 286  :         _Init(_File, _Openfl);

  00166	6a 01		 push	 1
  00168	50		 push	 eax
  00169	8b cb		 mov	 ecx, ebx
  0016b	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Init
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 114  :         return *_Plocale;

  00170	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00173	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 268  :         _Ptr->_Incref();

  00176	8b ce		 mov	 ecx, esi
  00178	89 75 e4	 mov	 DWORD PTR $T4[ebp+4], esi
  0017b	8b 06		 mov	 eax, DWORD PTR [esi]
  0017d	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 287  :         _Initcvt(_STD use_facet<_Cvt>(_Mysb::getloc()));

  00180	8d 45 e0	 lea	 eax, DWORD PTR $T4[ebp]
  00183	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@_WDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@_WDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<wchar_t,char,_Mbstatet> >
  0018d	83 c4 04	 add	 esp, 4
  00190	8b cb		 mov	 ecx, ebx
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@IAEXABV?$codecvt@_WDU_Mbstatet@@@2@@Z ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::_Initcvt
  00198	85 f6		 test	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  0019a	74 13		 je	 SHORT $LN71@basic_ifst

; 352  :             delete _Ptr->_Decref();

  0019c	8b 06		 mov	 eax, DWORD PTR [esi]
  0019e	8b ce		 mov	 ecx, esi
  001a0	ff 50 08	 call	 DWORD PTR [eax+8]
  001a3	85 c0		 test	 eax, eax
  001a5	74 08		 je	 SHORT $LN71@basic_ifst
  001a7	8b 10		 mov	 edx, DWORD PTR [eax]
  001a9	8b c8		 mov	 ecx, eax
  001ab	6a 01		 push	 1
  001ad	ff 12		 call	 DWORD PTR [edx]
$LN71@basic_ifst:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 813  :     }

  001af	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
$LN59@basic_ifst:
  001b2	8b c2		 mov	 eax, edx
  001b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001be	59		 pop	 ecx
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 10 00	 ret	 16			; 00000010H
$LN69@basic_ifst:

; 811  :             _Myios::setstate(ios_base::failbit);

  001c8	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001cb	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 811  :             _Myios::setstate(ios_base::failbit);

  001cd	8b 02		 mov	 eax, DWORD PTR [edx]
  001cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001d2	b8 04 00 00 00	 mov	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream

; 811  :             _Myios::setstate(ios_base::failbit);

  001d7	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  001d9	39 71 38	 cmp	 DWORD PTR [ecx+56], esi
  001dc	0f 45 c6	 cmovne	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  001df	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  001e2	83 e0 15	 and	 eax, 21			; 00000015H
  001e5	83 c8 02	 or	 eax, 2

; 245  :         _Mystate             = _State;

  001e8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  001eb	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  001ee	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  001f0	74 c0		 je	 SHORT $LN59@basic_ifst

; 248  :             if (_Reraise) {
; 249  :                 _RERAISE;
; 250  :             }
; 251  : 
; 252  :             const char* _Msg;
; 253  :             if (_Filtered & ios_base::badbit) {

  001f2	f6 c1 04	 test	 cl, 4
  001f5	74 07		 je	 SHORT $LN61@basic_ifst

; 254  :                 _Msg = "ios_base::badbit set";

  001f7	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  001fc	eb 10		 jmp	 SHORT $LN63@basic_ifst
$LN61@basic_ifst:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  001fe	f6 c1 02	 test	 cl, 2
  00201	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00206	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0020b	0f 44 f0	 cmove	 esi, eax
$LN63@basic_ifst:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0020e	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00211	6a 01		 push	 1
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00219	83 c4 08	 add	 esp, 8
  0021c	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0021f	50		 push	 eax
  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00226	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0022b	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@basic_ifst:
  00234	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 e8 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN6@basic_ifst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 10	 add	 ecx, 16			; 00000010H
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_filebuf<wchar_t,std::char_traits<wchar_t> >::~basic_filebuf<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z$5:
  00032	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
__ehhandler$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z:
  0003f	90		 npad	 1
  00040	90		 npad	 1
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z
  00057	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::basic_ifstream<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 72   :     virtual __CLR_OR_THIS_CALL ~basic_istream() noexcept {}

  00023	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00026	8d 71 e8	 lea	 esi, DWORD PTR [ecx-24]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00039	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  0003c	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00040	51		 push	 ecx
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  0004e	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00053	83 c4 04	 add	 esp, 4
  00056	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005a	74 0b		 je	 SHORT $LN14@scalar
  0005c	6a 60		 push	 96			; 00000060H
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
$LN14@scalar:
  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT
$T2 = -72						; size = 20
$T3 = -52						; size = 20
$T4 = -32						; size = 8
$T5 = -32						; size = 8
$T6 = -24						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T7 = 8							; size = 4
__Noskip$ = 8						; size = 1
?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Ipfx, COMDAT
; _this$ = ecx

; 116  :     bool __CLR_OR_THIS_CALL _Ipfx(bool _Noskip = false) { // test stream state and skip whitespace as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	03 ce		 add	 ecx, esi
  00037	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0003a	85 d2		 test	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 117  :         if (!this->good()) {

  0003c	74 39		 je	 SHORT $LN5@Ipfx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  0003e	33 f6		 xor	 esi, esi
  00040	b8 04 00 00 00	 mov	 eax, 4
  00045	39 71 38	 cmp	 DWORD PTR [ecx+56], esi
  00048	0f 45 c6	 cmovne	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0004b	0b c2		 or	 eax, edx
  0004d	83 e0 15	 and	 eax, 21			; 00000015H
  00050	83 c8 02	 or	 eax, 2

; 245  :         _Mystate             = _State;

  00053	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  00056	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00059	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0005b	0f 85 4f 01 00
	00		 jne	 $LN89@Ipfx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 119  :             return false;

  00061	32 c0		 xor	 al, al

; 151  :     }

  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN5@Ipfx:

; 120  :         }
; 121  : 
; 122  :         // state okay, flush tied stream and skip whitespace
; 123  :         const auto _Tied = _Myios::tie();

  00077	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]

; 124  :         if (_Tied) {

  0007a	85 c9		 test	 ecx, ecx
  0007c	74 05		 je	 SHORT $LN6@Ipfx

; 125  :             _Tied->flush();

  0007e	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN6@Ipfx:

; 126  :         }
; 127  : 
; 128  :         bool _Eof = false;

  00083	32 db		 xor	 bl, bl

; 129  :         if (!_Noskip && this->flags() & ios_base::skipws) { // skip whitespace

  00085	38 5d 08	 cmp	 BYTE PTR __Noskip$[ebp], bl
  00088	0f 85 01 01 00
	00		 jne	 $LN18@Ipfx
  0008e	8b 06		 mov	 eax, DWORD PTR [esi]
  00090	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00093	f6 44 30 14 01	 test	 BYTE PTR [eax+esi+20], 1
  00098	0f 84 f1 00 00
	00		 je	 $LN18@Ipfx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 373  :         return *_Ploc;

  0009e	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000a2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a5	89 4d 08	 mov	 DWORD PTR $T7[ebp], ecx
  000a8	89 4d e4	 mov	 DWORD PTR $T5[ebp+4], ecx

; 268  :         _Ptr->_Incref();

  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 130  :             const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(this->getloc());

  000b0	8d 45 e0	 lea	 eax, DWORD PTR $T5[ebp]
  000b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR $T7[ebp]
  000c3	83 c4 04	 add	 esp, 4
  000c6	8b f8		 mov	 edi, eax
  000c8	85 c9		 test	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  000ca	74 11		 je	 SHORT $LN43@Ipfx

; 352  :             delete _Ptr->_Decref();

  000cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ce	ff 52 08	 call	 DWORD PTR [edx+8]
  000d1	85 c0		 test	 eax, eax
  000d3	74 08		 je	 SHORT $LN43@Ipfx
  000d5	8b 10		 mov	 edx, DWORD PTR [eax]
  000d7	8b c8		 mov	 ecx, eax
  000d9	6a 01		 push	 1
  000db	ff 12		 call	 DWORD PTR [edx]
$LN43@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 133  :             int_type _Meta = _Myios::rdbuf()->sgetc();

  000dd	8b 06		 mov	 eax, DWORD PTR [esi]
  000df	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000e6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e9	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf

; 231  :         return *_IGnext ? *_IGcount : 0;

  000ed	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  000f0	8b 10		 mov	 edx, DWORD PTR [eax]
  000f2	85 d2		 test	 edx, edx
  000f4	74 0d		 je	 SHORT $LN47@Ipfx
  000f6	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 131  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();

  000f9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000fc	7e 05		 jle	 SHORT $LN47@Ipfx
  000fe	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00101	eb 0a		 jmp	 SHORT $LN83@Ipfx
$LN47@Ipfx:
  00103	8b 01		 mov	 eax, DWORD PTR [ecx]
  00105	ff 50 18	 call	 DWORD PTR [eax+24]
$LN87@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 136  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  00108	0f b7 c0	 movzx	 eax, ax
  0010b	8b c8		 mov	 ecx, eax
$LN83@Ipfx:
  0010d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00112	66 3b c1	 cmp	 ax, cx
  00115	75 04		 jne	 SHORT $LN9@Ipfx

; 137  :                     _Eof = true;

  00117	b3 01		 mov	 bl, 1

; 138  :                     break;

  00119	eb 10		 jmp	 SHORT $LN3@Ipfx
$LN9@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2849 :         return do_is(_Maskval, _Ch);

  0011b	8b 07		 mov	 eax, DWORD PTR [edi]
  0011d	51		 push	 ecx
  0011e	6a 48		 push	 72			; 00000048H
  00120	8b cf		 mov	 ecx, edi
  00122	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00125	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 139  :                 } else if (!_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {

  00127	84 c0		 test	 al, al
  00129	75 38		 jne	 SHORT $LN2@Ipfx
$LN3@Ipfx:
  0012b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 144  :         }
; 145  : 
; 146  :         if (_Eof) {

  00132	84 db		 test	 bl, bl
  00134	74 59		 je	 SHORT $LN18@Ipfx

; 147  :             _Myios::setstate(ios_base::eofbit | ios_base::failbit);

  00136	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00138	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 147  :             _Myios::setstate(ios_base::eofbit | ios_base::failbit);

  0013a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  0013d	b8 04 00 00 00	 mov	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 147  :             _Myios::setstate(ios_base::eofbit | ios_base::failbit);

  00142	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00144	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00147	0f 45 c2	 cmovne	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0014a	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  0014d	83 e0 14	 and	 eax, 20			; 00000014H
  00150	83 c8 03	 or	 eax, 3

; 245  :         _Mystate             = _State;

  00153	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  00156	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00159	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0015b	0f 85 91 00 00
	00		 jne	 $LN90@Ipfx
  00161	eb 2c		 jmp	 SHORT $LN18@Ipfx
$LN2@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 135  :             for (;; _Meta = _Myios::rdbuf()->snextc()) {

  00163	8b 06		 mov	 eax, DWORD PTR [esi]
  00165	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00168	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0016c	e8 00 00 00 00	 call	 ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::snextc
  00171	eb 95		 jmp	 SHORT $LN87@Ipfx
__catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0:

; 140  :                     break; // not whitespace, quit
; 141  :                 }
; 142  :             }
; 143  :             _CATCH_IO_END

  00173	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00176	6a 01		 push	 1
  00178	6a 04		 push	 4
  0017a	8b 02		 mov	 eax, DWORD PTR [edx]
  0017c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0017f	03 ca		 add	 ecx, edx
  00181	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  00186	b8 00 00 00 00	 mov	 eax, $LN84@Ipfx
  0018b	c3		 ret	 0
$LN84@Ipfx:
  0018c	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LN18@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0018f	8b 06		 mov	 eax, DWORD PTR [esi]
  00191	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00194	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00199	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 151  :     }

  0019c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a6	59		 pop	 ecx
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 04 00	 ret	 4
$LN89@Ipfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  001b0	f6 c1 04	 test	 cl, 4
  001b3	74 07		 je	 SHORT $LN28@Ipfx

; 254  :                 _Msg = "ios_base::badbit set";

  001b5	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  001ba	eb 10		 jmp	 SHORT $LN30@Ipfx
$LN28@Ipfx:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  001bc	f6 c1 02	 test	 cl, 2
  001bf	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  001c4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  001c9	0f 44 f0	 cmove	 esi, eax
$LN30@Ipfx:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  001cc	8d 45 e0	 lea	 eax, DWORD PTR $T4[ebp]
  001cf	6a 01		 push	 1
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  001d7	83 c4 08	 add	 esp, 8
  001da	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  001dd	50		 push	 eax
  001de	56		 push	 esi
  001df	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  001e4	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001e9	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN90@Ipfx:

; 253  :             if (_Filtered & ios_base::badbit) {

  001f2	f6 c1 04	 test	 cl, 4
  001f5	74 07		 je	 SHORT $LN66@Ipfx

; 254  :                 _Msg = "ios_base::badbit set";

  001f7	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  001fc	eb 10		 jmp	 SHORT $LN68@Ipfx
$LN66@Ipfx:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  001fe	f6 c1 02	 test	 cl, 2
  00201	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00206	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0020b	0f 44 f0	 cmove	 esi, eax
$LN68@Ipfx:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0020e	8d 45 e8	 lea	 eax, DWORD PTR $T6[ebp]
  00211	6a 01		 push	 1
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00219	83 c4 08	 add	 esp, 8
  0021c	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  0021f	50		 push	 eax
  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00226	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0022b	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN86@Ipfx:
  00234	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Ipfx
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 72   :     virtual __CLR_OR_THIS_CALL ~basic_istream() noexcept {}

  00000	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0000e	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax
  0001b	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -48						; size = 20
$T3 = -28						; size = 8
$T4 = -28						; size = 8
_this$ = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
$T6 = 16						; size = 4
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 41   :     explicit __CLR_OR_THIS_CALL basic_istream(_Mysb* _Strbuf, bool _Isstd = false)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 43   :         : _Chcount(0) {

  0002d	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00038	74 1b		 je	 SHORT $LN2@basic_istr
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 161  :     __CLR_OR_THIS_CALL basic_ios() {}

  00040	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 43   :         : _Chcount(0) {

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
$LN2@basic_istr:
  00055	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 472  :         _Ploc = new locale;

  00057	6a 08		 push	 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 43   :         : _Chcount(0) {

  00059	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005c	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00063	8b 07		 mov	 eax, DWORD PTR [edi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0006b	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 44   :         _Myios::init(_Strbuf, _Isstd);

  0006f	8b 07		 mov	 eax, DWORD PTR [edi]
  00071	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00078	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0007f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00082	03 f7		 add	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 463  :         _Ploc   = nullptr;

  00084	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 464  :         _Stdstr = 0;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 465  :         _Except = goodbit;

  00092	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 466  :         _Fmtfl  = skipws | dec;

  00099	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H

; 467  :         _Prec   = 6;

  000a0	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  000a7	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 468  :         _Wide   = 0;

  000ae	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  000b5	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 469  :         _Arr    = nullptr;

  000bc	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 470  :         _Calls  = nullptr;

  000c3	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 245  :         _Mystate             = _State;

  000ca	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 472  :         _Ploc = new locale;

  000d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d6	8b d8		 mov	 ebx, eax
  000d8	83 c4 04	 add	 esp, 4
  000db	85 db		 test	 ebx, ebx
  000dd	74 16		 je	 SHORT $LN16@basic_istr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 271  :     locale() noexcept : _Ptr(_Init(true)) {}

  000df	6a 01		 push	 1
  000e1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000e8	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000ed	83 c4 04	 add	 esp, 4
  000f0	89 43 04	 mov	 DWORD PTR [ebx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 472  :         _Ploc = new locale;

  000f3	eb 02		 jmp	 SHORT $LN17@basic_istr
$LN16@basic_istr:
  000f5	33 db		 xor	 ebx, ebx
$LN17@basic_istr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 148  :         _Mystrbuf = _Strbuf;

  000f7	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 472  :         _Ploc = new locale;

  000fa	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 148  :         _Mystrbuf = _Strbuf;

  000fd	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 149  :         _Tiestr   = nullptr;

  00100	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00107	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 268  :         _Ptr->_Incref();

  0010a	8b cb		 mov	 ecx, ebx
  0010c	89 5d e8	 mov	 DWORD PTR $T4[ebp+4], ebx
  0010f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00111	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00114	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00117	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  00124	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 2886 :         return do_widen(_Byte);

  00127	8b c8		 mov	 ecx, eax
  00129	8b 10		 mov	 edx, DWORD PTR [eax]
  0012b	6a 20		 push	 32			; 00000020H
  0012d	ff 52 30	 call	 DWORD PTR [edx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00130	0f b7 c0	 movzx	 eax, ax
  00133	89 45 10	 mov	 DWORD PTR $T6[ebp], eax
  00136	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0013a	85 db		 test	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale

; 351  :         if (_Ptr) {

  0013c	74 16		 je	 SHORT $LN46@basic_istr

; 352  :             delete _Ptr->_Decref();

  0013e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00140	8b cb		 mov	 ecx, ebx
  00142	ff 50 08	 call	 DWORD PTR [eax+8]
  00145	85 c0		 test	 eax, eax
  00147	74 08		 je	 SHORT $LN64@basic_istr
  00149	8b 10		 mov	 edx, DWORD PTR [eax]
  0014b	8b c8		 mov	 ecx, eax
  0014d	6a 01		 push	 1
  0014f	ff 12		 call	 DWORD PTR [edx]
$LN64@basic_istr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 150  :         _Fillch   = widen(' ');

  00151	8b 45 10	 mov	 eax, DWORD PTR $T6[ebp]
$LN46@basic_istr:

; 151  : 
; 152  :         if (!_Mystrbuf) {

  00154	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00158	66 89 46 40	 mov	 WORD PTR [esi+64], ax
  0015c	75 13		 jne	 SHORT $LN53@basic_istr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 244  :         _State &= _Statmask;

  0015e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 246  :         const auto _Filtered = _State & _Except;

  00161	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00164	83 e0 13	 and	 eax, 19			; 00000013H
  00167	83 c8 04	 or	 eax, 4
  0016a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0016d	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0016f	75 25		 jne	 SHORT $LN68@basic_istr
$LN53@basic_istr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 156  :         if (_Isstd) {

  00171	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  00175	74 09		 je	 SHORT $LN12@basic_istr

; 157  :             _Addstd(this); // special handling for standard streams

  00177	56		 push	 esi
  00178	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0017d	83 c4 04	 add	 esp, 4
$LN12@basic_istr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream

; 45   :     }

  00180	8b c7		 mov	 eax, edi
  00182	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00185	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018c	59		 pop	 ecx
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 0c 00	 ret	 12			; 0000000cH
$LN68@basic_istr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  00196	f6 c1 04	 test	 cl, 4
  00199	74 07		 je	 SHORT $LN55@basic_istr

; 254  :                 _Msg = "ios_base::badbit set";

  0019b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  001a0	eb 10		 jmp	 SHORT $LN57@basic_istr
$LN55@basic_istr:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  001a2	f6 c1 02	 test	 cl, 2
  001a5	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  001aa	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  001af	0f 44 f0	 cmove	 esi, eax
$LN57@basic_istr:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  001b2	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  001b5	6a 01		 push	 1
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  001bd	83 c4 08	 add	 esp, 8
  001c0	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  001c3	50		 push	 eax
  001c4	56		 push	 esi
  001c5	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  001ca	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001cf	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN66@basic_istr:
  001d8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$2:
  0001c	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 452  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN10@scalar
  00041	6a 48		 push	 72			; 00000048H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 52   :         iostate _State, bool _Reraise = false) { // merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00003	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	b8 04 00 00 00	 mov	 eax, 4
  0000d	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00010	0f 45 c2	 cmovne	 eax, edx
  00013	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00016	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 53   :         clear(rdstate() | _State, _Reraise);
; 54   :     }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 38   :     virtual __CLR_OR_THIS_CALL ~basic_ios() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00030	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00035	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios

; 38   :     virtual __CLR_OR_THIS_CALL ~basic_ios() noexcept {}

  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??__Fs_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV1@XZ@YAXXZ
text$yd	SEGMENT
??__Fs_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV1@XZ@YAXXZ PROC ; `CMakePackLog::GetSingleton'::`2'::`dynamic atexit destructor for 's_kMakePackLog'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4V2@A
  00005	e9 00 00 00 00	 jmp	 ??1CMakePackLog@@QAE@XZ	; CMakePackLog::~CMakePackLog
??__Fs_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV1@XZ@YAXXZ ENDP ; `CMakePackLog::GetSingleton'::`2'::`dynamic atexit destructor for 's_kMakePackLog''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??$_Fputc@_W@std@@YA_N_WPAU_iobuf@@@Z
_TEXT	SEGMENT
__Wchar$ = 8						; size = 2
__File$ = 12						; size = 4
??$_Fputc@_W@std@@YA_N_WPAU_iobuf@@@Z PROC		; std::_Fputc<wchar_t>, COMDAT

; 111  : inline bool _Fputc(wchar_t _Wchar, FILE* _File) { // put a wchar_t element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  :     return _CSTD fputwc(_Wchar, _File) != WEOF;

  00003	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Wchar$[ebp]
  00009	e8 00 00 00 00	 call	 _fputwc
  0000e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00013	83 c4 08	 add	 esp, 8
  00016	66 3b c1	 cmp	 ax, cx
  00019	0f 95 c0	 setne	 al

; 113  : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Fputc@_W@std@@YA_N_WPAU_iobuf@@@Z ENDP		; std::_Fputc<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 452  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN7@scalar
  00041	6a 38		 push	 56			; 00000038H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gios_base@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 451  :     virtual __CLR_OR_THIS_CALL ~ios_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 452  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002e	83 c4 04	 add	 esp, 4

; 453  :     }

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
  00040	cc		 int	 3
  00041	cc		 int	 3
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 20
$T2 = -8						; size = 8
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 243  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :         _State &= _Statmask;

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	83 e0 17	 and	 eax, 23			; 00000017H

; 245  :         _Mystate             = _State;

  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	56		 push	 esi
  00013	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  00015	74 08		 je	 SHORT $LN2@clear

; 248  :             if (_Reraise) {

  00017	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001b	74 12		 je	 SHORT $LN3@clear
  0001d	eb 07		 jmp	 SHORT $LN11@clear
$LN2@clear:

; 262  :         }
; 263  :     }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN11@clear:

; 249  :                 _RERAISE;

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 250  :             }
; 251  : 
; 252  :             const char* _Msg;
; 253  :             if (_Filtered & ios_base::badbit) {

  0002f	f6 c1 04	 test	 cl, 4
  00032	74 07		 je	 SHORT $LN4@clear

; 254  :                 _Msg = "ios_base::badbit set";

  00034	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00039	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  0003b	f6 c1 02	 test	 cl, 2
  0003e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00043	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00048	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0004b	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0004e	6a 01		 push	 1
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00056	83 c4 08	 add	 esp, 8
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00063	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00068	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@clear:
  00071	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
tv230 = -44						; size = 4
_this$GSCopy$ = -44					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00033	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00036	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

  00038	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  00042	8b 38		 mov	 edi, DWORD PTR [eax]
  00044	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00051	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00055	89 45 d4	 mov	 DWORD PTR tv230[ebp], eax
$LL30@failure:
  00058	8a 01		 mov	 al, BYTE PTR [ecx]
  0005a	41		 inc	 ecx
  0005b	84 c0		 test	 al, al
  0005d	75 f9		 jne	 SHORT $LL30@failure
  0005f	2b 4d d4	 sub	 ecx, DWORD PTR tv230[ebp]

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00062	51		 push	 ecx
  00063	52		 push	 edx
  00064	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00067	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 410  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

  0006c	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	50		 push	 eax
  00077	53		 push	 ebx
  00078	57		 push	 edi
  00079	8b ce		 mov	 ecx, esi
  0007b	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00080	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
  00083	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00086	72 0d		 jb	 SHORT $LN31@failure

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00088	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00089	51		 push	 ecx
  0008a	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  0008d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00092	83 c4 08	 add	 esp, 8
$LN31@failure:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  00095	8b c6		 mov	 eax, esi
  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2924 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2925 :         if (_Ctype._Delfl) {

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar

; 2926 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00012	ff 76 0c	 push	 DWORD PTR [esi+12]
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN5@scalar:

; 2927 :         }
; 2928 : 
; 2929 :         _CSTD free(_Ctype._LocaleName);

  0001d	ff 76 14	 push	 DWORD PTR [esi+20]
  00020	e8 00 00 00 00	 call	 _free
  00025	83 c4 04	 add	 esp, 4

; 2930 :     }

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00032	74 0b		 je	 SHORT $LN8@scalar
  00034	6a 44		 push	 68			; 00000044H
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN8@scalar:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__Mbst$1 = -24						; size = 8
tv147 = -16						; size = 4
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 3027 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 3028 :         _Adl_verify_range(_First, _Last);
; 3029 :         for (; _First != _Last; ++_First, ++_Dest) {

  00011	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Dest$[ebp]
  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 41		 je	 SHORT $LN14@do_narrow
  00020	83 c1 18	 add	 ecx, 24			; 00000018H
  00023	89 4d f0	 mov	 DWORD PTR tv147[ebp], ecx
$LL4@do_narrow:

; 3030 :             *_Dest = _Donarrow(*_First, _Dflt);

  00026	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00029	0f 57 c0	 xorps	 xmm0, xmm0

; 3019 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  0002c	51		 push	 ecx
  0002d	8d 4d e8	 lea	 ecx, DWORD PTR __Mbst$1[ebp]
  00030	66 0f 13 45 e8	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __Wcrtomb
  00040	0f b6 4d 10	 movzx	 ecx, BYTE PTR __Dflt$[ebp]

; 3028 :         _Adl_verify_range(_First, _Last);
; 3029 :         for (; _First != _Last; ++_First, ++_Dest) {

  00044	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]

; 3019 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  00047	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	0f 45 d1	 cmovne	 edx, ecx

; 3028 :         _Adl_verify_range(_First, _Last);
; 3029 :         for (; _First != _Last; ++_First, ++_Dest) {

  00054	8b 4d f0	 mov	 ecx, DWORD PTR tv147[ebp]
  00057	83 c6 02	 add	 esi, 2

; 3030 :             *_Dest = _Donarrow(*_First, _Dflt);

  0005a	88 57 ff	 mov	 BYTE PTR [edi-1], dl
  0005d	3b f3		 cmp	 esi, ebx
  0005f	75 c5		 jne	 SHORT $LL4@do_narrow
$LN14@do_narrow:

; 3031 :         }
; 3032 : 
; 3033 :         return _First;
; 3034 :     }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	8b c6		 mov	 eax, esi
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	33 cd		 xor	 ecx, ebp
  0006a	5b		 pop	 ebx
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -20						; size = 8
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 3022 :     virtual char __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char _Dflt) const { // narrow element to char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3019 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  00010	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	50		 push	 eax
  00017	8d 45 ec	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0001a	66 0f 13 45 ec	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00023	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Wcrtomb
  0002c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Dflt$[ebp]
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	0f 45 d1	 cmovne	 edx, ecx

; 3023 :         return _Donarrow(_Ch, _Dflt);
; 3024 :     }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	8a c2		 mov	 al, dl
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__Mbst$1 = -12						; size = 8
tv140 = -4						; size = 4
__Byte$ = 8						; size = 1
__First$ = 8						; size = 4
__Wc$2 = 12						; size = 2
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 3007 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3008 :         _Adl_verify_range(_First, _Last);
; 3009 :         for (; _First != _Last; ++_First, ++_Dest) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	3b f3		 cmp	 esi, ebx
  00010	74 50		 je	 SHORT $LN12@do_widen
  00012	83 c1 18	 add	 ecx, 24			; 00000018H
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00019	89 4d fc	 mov	 DWORD PTR tv140[ebp], ecx
  0001c	0f 1f 40 00	 npad	 4
$LL4@do_widen:

; 3010 :             *_Dest = _Dowiden(*_First);

  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	0f 57 c0	 xorps	 xmm0, xmm0
  00025	88 45 08	 mov	 BYTE PTR __Byte$[ebp], al

; 2999 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  00028	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  00032	66 0f 13 45 f4	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  00037	50		 push	 eax
  00038	8d 45 0c	 lea	 eax, DWORD PTR __Wc$2[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __Mbrtowc
  00041	0f b7 4d 0c	 movzx	 ecx, WORD PTR __Wc$2[ebp]

; 3008 :         _Adl_verify_range(_First, _Last);
; 3009 :         for (; _First != _Last; ++_First, ++_Dest) {

  00045	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]

; 2999 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	85 c0		 test	 eax, eax
  0004d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00052	0f 48 c8	 cmovs	 ecx, eax

; 3008 :         _Adl_verify_range(_First, _Last);
; 3009 :         for (; _First != _Last; ++_First, ++_Dest) {

  00055	46		 inc	 esi

; 3010 :             *_Dest = _Dowiden(*_First);

  00056	66 89 4f fe	 mov	 WORD PTR [edi-2], cx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR tv140[ebp]
  0005d	3b f3		 cmp	 esi, ebx
  0005f	75 bf		 jne	 SHORT $LL4@do_widen

; 3011 :         }
; 3012 : 
; 3013 :         return _First;

  00061	5f		 pop	 edi
$LN12@do_widen:

; 3014 :     }

  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -12						; size = 8
__Wc$2 = -4						; size = 2
__Byte$ = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 3002 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3003 :         return _Dowiden(_Byte);

  00006	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	88 45 08	 mov	 BYTE PTR __Byte$[ebp], al

; 2999 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  0000f	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00012	50		 push	 eax
  00013	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  00016	66 0f 13 45 f4	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  0001b	50		 push	 eax
  0001c	6a 01		 push	 1
  0001e	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  00021	50		 push	 eax
  00022	8d 45 fc	 lea	 eax, DWORD PTR __Wc$2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __Mbrtowc
  0002b	0f b7 4d fc	 movzx	 ecx, WORD PTR __Wc$2[ebp]
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	85 c0		 test	 eax, eax
  00034	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00039	0f 48 ca	 cmovs	 ecx, edx

; 3003 :         return _Dowiden(_Byte);

  0003c	66 8b c1	 mov	 ax, cx

; 3004 :     }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2987 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2988 :         _Adl_verify_range(_First, _Last);
; 2989 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 1c		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2990 :             *_First = _Towupper(*_First, &_Ctype);

  00013	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Towupper
  0001d	66 89 06	 mov	 WORD PTR [esi], ax
  00020	83 c4 08	 add	 esp, 8
  00023	83 c6 02	 add	 esi, 2
  00026	3b f7		 cmp	 esi, edi
  00028	75 e9		 jne	 SHORT $LL4@do_toupper

; 2991 :         }
; 2992 : 
; 2993 :         return _First;

  0002a	5b		 pop	 ebx
$LN10@do_toupper:
  0002b	5f		 pop	 edi

; 2994 :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2982 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2983 :         return _Towupper(_Ch, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towupper
  0000f	83 c4 08	 add	 esp, 8

; 2984 :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2973 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2974 :         _Adl_verify_range(_First, _Last);
; 2975 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 1c		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2976 :             *_First = _Towlower(*_First, &_Ctype);

  00013	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Towlower
  0001d	66 89 06	 mov	 WORD PTR [esi], ax
  00020	83 c4 08	 add	 esp, 8
  00023	83 c6 02	 add	 esi, 2
  00026	3b f7		 cmp	 esi, edi
  00028	75 e9		 jne	 SHORT $LL4@do_tolower

; 2977 :         }
; 2978 : 
; 2979 :         return _First;

  0002a	5b		 pop	 ebx
$LN10@do_tolower:
  0002b	5f		 pop	 edi

; 2980 :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2968 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2969 :         return _Towlower(_Ch, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towlower
  0000f	83 c4 08	 add	 esp, 8

; 2970 :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2959 :         const _Elem* _Last) const { // find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2960 :         _Adl_verify_range(_First, _Last);
; 2961 :         while (_First != _Last && is(_Maskval, *_First)) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN11@do_scan_no
$LL2@do_scan_no:
  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]

; 2849 :         return do_is(_Maskval, _Ch);

  00015	8b cb		 mov	 ecx, ebx
  00017	8b 13		 mov	 edx, DWORD PTR [ebx]
  00019	50		 push	 eax
  0001a	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00020	ff d0		 call	 eax

; 2960 :         _Adl_verify_range(_First, _Last);
; 2961 :         while (_First != _Last && is(_Maskval, *_First)) {

  00022	84 c0		 test	 al, al
  00024	74 07		 je	 SHORT $LN11@do_scan_no

; 2962 :             ++_First;

  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL2@do_scan_no
$LN11@do_scan_no:
  0002d	5f		 pop	 edi

; 2963 :         }
; 2964 : 
; 2965 :         return _First;
; 2966 :     }

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2949 :         const _Elem* _Last) const { // find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2950 :         _Adl_verify_range(_First, _Last);
; 2951 :         while (_First != _Last && !is(_Maskval, *_First)) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN11@do_scan_is
$LL2@do_scan_is:
  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]

; 2849 :         return do_is(_Maskval, _Ch);

  00015	8b cb		 mov	 ecx, ebx
  00017	8b 13		 mov	 edx, DWORD PTR [ebx]
  00019	50		 push	 eax
  0001a	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00020	ff d0		 call	 eax

; 2950 :         _Adl_verify_range(_First, _Last);
; 2951 :         while (_First != _Last && !is(_Maskval, *_First)) {

  00022	84 c0		 test	 al, al
  00024	75 07		 jne	 SHORT $LN11@do_scan_is

; 2952 :             ++_First;

  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL2@do_scan_is
$LN11@do_scan_is:
  0002d	5f		 pop	 edi

; 2953 :         }
; 2954 : 
; 2955 :         return _First;
; 2956 :     }

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2943 :         mask* _Dest) const { // get mask sequence for elements in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2944 :         _Adl_verify_range(_First, _Last);
; 2945 :         return _CSTD _Getwctypes(_First, _Last, _Dest, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 __Getwctypes
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2946 :     }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2938 :         mask _Maskval, _Elem _Ch) const { // test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2939 :         return (_CSTD _Getwctype(_Ch, &_Ctype) & _Maskval) != 0;

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Getwctype
  0000f	83 c4 08	 add	 esp, 8
  00012	66 85 45 08	 test	 WORD PTR __Maskval$[ebp], ax
  00016	0f 95 c0	 setne	 al

; 2940 :     }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2924 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2925 :         if (_Ctype._Delfl) {

  00003	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0b		 je	 SHORT $LN2@ctype

; 2926 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  0000f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00012	e8 00 00 00 00	 call	 _free
  00017	83 c4 04	 add	 esp, 4
$LN2@ctype:

; 2927 :         }
; 2928 : 
; 2929 :         _CSTD free(_Ctype._LocaleName);

  0001a	ff 76 14	 push	 DWORD PTR [esi+20]
  0001d	e8 00 00 00 00	 call	 _free
  00022	83 c4 04	 add	 esp, 4

; 2930 :     }

  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z PROC	; std::codecvt<wchar_t,char,_Mbstatet>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 34		 push	 52			; 00000034H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$codecvt@_WDU_Mbstatet@@@std@@MAEPAXI@Z ENDP	; std::codecvt<wchar_t,char,_Mbstatet>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
_TEXT	SEGMENT
?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ PROC	; std::codecvt<wchar_t,char,_Mbstatet>::do_encoding, COMDAT
; _this$ = ecx

; 2158 :         // return length of code sequence (from codecvt)
; 2159 :         return _Cvt._Mbcurmax == 1; // 0 => varying length, 1 => fixed length

  00000	33 c0		 xor	 eax, eax
  00002	83 79 0c 01	 cmp	 DWORD PTR [ecx+12], 1
  00006	0f 94 c0	 sete	 al

; 2160 :     }

  00009	c3		 ret	 0
?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ ENDP	; std::codecvt<wchar_t,char,_Mbstatet>::do_encoding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
_TEXT	SEGMENT
?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_max_length, COMDAT
; _this$ = ecx

; 2153 :         // return maximum length required for a conversion (from codecvt)
; 2154 :         return static_cast<int>(_Cvt._Mbcurmax);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 2155 :     }

  00003	c3		 ret	 0
?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_max_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ
_TEXT	SEGMENT
?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_always_noconv, COMDAT
; _this$ = ecx

; 2148 :         // return true if conversions never change input
; 2149 :         return false;

  00000	32 c0		 xor	 al, al

; 2150 :     }

  00002	c3		 ret	 0
?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
_TEXT	SEGMENT
__Old_first1$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__State$ = 8						; size = 4
__Ch$1 = 12						; size = 2
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Count$ = 20						; size = 4
?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_length, COMDAT
; _this$ = ecx

; 2123 :         mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2124 :         // return p - _First1, for the largest value p in [_First1, _Last1] such that [_First1, p) successfully
; 2125 :         // converts to at most _Count wide characters
; 2126 :         _Adl_verify_range(_First1, _Last1);
; 2127 :         const auto _Old_first1 = _First1;
; 2128 : 
; 2129 :         for (; _Count > 0u && _First1 != _Last1; --_Count) {

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	8b c1		 mov	 eax, ecx
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __First1$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	89 4d f8	 mov	 DWORD PTR __Old_first1$1$[ebp], ecx
  00018	85 db		 test	 ebx, ebx
  0001a	74 3a		 je	 SHORT $LN11@do_length
  0001c	57		 push	 edi
  0001d	8b 7d 10	 mov	 edi, DWORD PTR __Last1$[ebp]
$LL4@do_length:
  00020	3b f7		 cmp	 esi, edi
  00022	74 2e		 je	 SHORT $LN15@do_length

; 2130 :             wchar_t _Ch;
; 2131 :             int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_State, &_Cvt);

  00024	83 c0 08	 add	 eax, 8
  00027	50		 push	 eax
  00028	ff 75 08	 push	 DWORD PTR __State$[ebp]
  0002b	8b c7		 mov	 eax, edi
  0002d	2b c6		 sub	 eax, esi
  0002f	50		 push	 eax
  00030	8d 45 0c	 lea	 eax, DWORD PTR __Ch$1[ebp]
  00033	56		 push	 esi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 __Mbrtowc
  0003a	83 c4 14	 add	 esp, 20			; 00000014H

; 2132 :             if (_Bytes < 0) { // partial or failed conversion

  0003d	85 c0		 test	 eax, eax
  0003f	78 11		 js	 SHORT $LN15@do_length

; 2133 :                 break;
; 2134 :             }
; 2135 : 
; 2136 :             if (_Bytes == 0) { // converted NULL character, TRANSITION, VSO-654347

  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	0f 44 c1	 cmove	 eax, ecx

; 2137 :                 _Bytes = 1;
; 2138 :             }
; 2139 : 
; 2140 :             // converted _Bytes bytes to a wide character
; 2141 :             _First1 += _Bytes;

  00049	03 f0		 add	 esi, eax
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0004e	2b d9		 sub	 ebx, ecx
  00050	75 ce		 jne	 SHORT $LL4@do_length
$LN15@do_length:
  00052	8b 4d f8	 mov	 ecx, DWORD PTR __Old_first1$1$[ebp]
  00055	5f		 pop	 edi
$LN11@do_length:

; 2142 :         }
; 2143 : 
; 2144 :         return static_cast<int>((_STD min)(_First1 - _Old_first1, ptrdiff_t{INT_MAX}));

  00056	2b f1		 sub	 esi, ecx
  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 2145 :     }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 10 00	 ret	 16			; 00000010H
?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
_TEXT	SEGMENT
__Stsave$2$ = -20					; size = 4
__Stsave$1$ = -16					; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__State$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_unshift, COMDAT
; _this$ = ecx

; 2101 :     virtual result __CLR_OR_THIS_CALL do_unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2102 :         // generate bytes to return to default shift state
; 2103 :         _Adl_verify_range(_First2, _Last2);
; 2104 :         _Mid2       = _First2;

  00010	8b 45 0c	 mov	 eax, DWORD PTR __First2$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __State$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Mid2$[ebp]
  0001c	89 07		 mov	 DWORD PTR [edi], eax

; 2105 :         result _Ans = ok;
; 2106 :         int _Bytes;
; 2107 :         char _Buf[MB_LEN_MAX];
; 2108 :         mbstate_t _Stsave = _State;

  0001e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00020	89 45 f0	 mov	 DWORD PTR __Stsave$1$[ebp], eax
  00023	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00026	89 45 ec	 mov	 DWORD PTR __Stsave$2$[ebp], eax

; 2109 : 
; 2110 :         if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0) {

  00029	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0002c	50		 push	 eax
  0002d	53		 push	 ebx
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00031	6a 00		 push	 0
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 __Wcrtomb
  00039	8b f0		 mov	 esi, eax
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	85 f6		 test	 esi, esi
  00040	7f 18		 jg	 SHORT $LN2@do_unshift

; 2120 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	b8 02 00 00 00	 mov	 eax, 2
  00049	5b		 pop	 ebx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 10 00	 ret	 16			; 00000010H
$LN2@do_unshift:

; 2111 :             _Ans = error; // locale-specific wcrtomb failed
; 2112 :         } else if (_Last2 - _Mid2 < --_Bytes) { // converted too many, roll back and return

  0005a	8b 45 10	 mov	 eax, DWORD PTR __Last2$[ebp]
  0005d	4e		 dec	 esi
  0005e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00060	2b c1		 sub	 eax, ecx
  00062	3b c6		 cmp	 eax, esi
  00064	7d 23		 jge	 SHORT $LN4@do_unshift

; 2113 :             _State = _Stsave;

  00066	8b 45 f0	 mov	 eax, DWORD PTR __Stsave$1$[ebp]
  00069	89 03		 mov	 DWORD PTR [ebx], eax
  0006b	8b 45 ec	 mov	 eax, DWORD PTR __Stsave$2$[ebp]
  0006e	5f		 pop	 edi
  0006f	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2118 :         }
; 2119 :         return _Ans;

  00072	b8 01 00 00 00	 mov	 eax, 1

; 2120 :     }

  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007c	33 cd		 xor	 ecx, ebp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 10 00	 ret	 16			; 00000010H
$LN4@do_unshift:

; 2114 :             _Ans   = partial;
; 2115 :         } else if (0 < _Bytes) { // copy converted bytes from buffer

  00089	85 f6		 test	 esi, esi
  0008b	7e 10		 jle	 SHORT $LN8@do_unshift

; 2116 :             _CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));

  0008d	56		 push	 esi
  0008e	8d 55 f4	 lea	 edx, DWORD PTR __Buf$[ebp]
  00091	52		 push	 edx
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 _memcpy
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2117 :             _Mid2 += _Bytes;

  0009b	01 37		 add	 DWORD PTR [edi], esi
$LN8@do_unshift:

; 2120 :     }

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a0	33 c0		 xor	 eax, eax
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	33 cd		 xor	 ecx, ebp
  000a6	5b		 pop	 ebx
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 10 00	 ret	 16			; 00000010H
?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_unshift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
_TEXT	SEGMENT
__Stsave$2$ = -28					; size = 4
__Stsave$1$ = -24					; size = 4
_this$1$ = -20						; size = 4
__State$GSCopy$1$ = -16					; size = 4
__Buf$1 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_out, COMDAT
; _this$ = ecx

; 2065 :         const wchar_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]

; 2066 :         // convert [_First1, _Last1) to bytes [_First2, _Last2)
; 2067 :         _Adl_verify_range(_First1, _Last1);
; 2068 :         _Adl_verify_range(_First2, _Last2);
; 2069 :         _Mid1 = _First1;
; 2070 :         _Mid2 = _First2;

  00013	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 20	 mov	 esi, DWORD PTR __Mid2$[ebp]
  0001b	8b d9		 mov	 ebx, ecx
  0001d	57		 push	 edi
  0001e	8b 7d 14	 mov	 edi, DWORD PTR __Mid1$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR __State$GSCopy$1$[ebp], eax
  00024	8b 45 0c	 mov	 eax, DWORD PTR __First1$[ebp]
  00027	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx
  0002a	89 07		 mov	 DWORD PTR [edi], eax
  0002c	89 16		 mov	 DWORD PTR [esi], edx

; 2071 :         int _Bytes;
; 2072 : 
; 2073 :         while (_Mid1 != _Last1 && _Mid2 != _Last2) {

  0002e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00030	3b 4d 10	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  00033	0f 84 90 00 00
	00		 je	 $LN3@do_out
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@do_out:
  00040	3b 55 1c	 cmp	 edx, DWORD PTR __Last2$[ebp]
  00043	0f 84 80 00 00
	00		 je	 $LN3@do_out

; 2074 :             if (MB_LEN_MAX <= _Last2 - _Mid2) {

  00049	8b 45 1c	 mov	 eax, DWORD PTR __Last2$[ebp]
  0004c	83 c3 08	 add	 ebx, 8
  0004f	2b c2		 sub	 eax, edx
  00051	53		 push	 ebx
  00052	83 f8 05	 cmp	 eax, 5
  00055	7c 1f		 jl	 SHORT $LN4@do_out

; 2075 :                 if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &_Cvt)) < 0) {

  00057	ff 75 f0	 push	 DWORD PTR __State$GSCopy$1$[ebp]
  0005a	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0005d	50		 push	 eax
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 __Wcrtomb
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	85 c0		 test	 eax, eax
  00069	0f 88 87 00 00
	00		 js	 $LN15@do_out

; 2076 :                     return error; // locale-specific wcrtomb failed
; 2077 :                 } else {
; 2078 :                     ++_Mid1;

  0006f	83 07 02	 add	 DWORD PTR [edi], 2

; 2079 :                     _Mid2 += _Bytes;

  00072	01 06		 add	 DWORD PTR [esi], eax

; 2080 :                 }
; 2081 :             } else { // destination too small, convert into buffer

  00074	eb 43		 jmp	 SHORT $LN19@do_out
$LN4@do_out:

; 2082 :                 char _Buf[MB_LEN_MAX];
; 2083 :                 mbstate_t _Stsave = _State;

  00076	8b 45 f0	 mov	 eax, DWORD PTR __State$GSCopy$1$[ebp]

; 2084 : 
; 2085 :                 if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &_Cvt)) < 0) {

  00079	50		 push	 eax
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	89 55 e8	 mov	 DWORD PTR __Stsave$1$[ebp], edx
  0007f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00082	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00085	50		 push	 eax
  00086	8d 45 f4	 lea	 eax, DWORD PTR __Buf$1[ebp]
  00089	89 55 e4	 mov	 DWORD PTR __Stsave$2$[ebp], edx
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 __Wcrtomb
  00092	8b d8		 mov	 ebx, eax
  00094	83 c4 10	 add	 esp, 16			; 00000010H
  00097	85 db		 test	 ebx, ebx
  00099	78 5b		 js	 SHORT $LN15@do_out

; 2086 :                     return error; // locale-specific wcrtomb failed
; 2087 :                 } else if (_Last2 - _Mid2 < _Bytes) { // converted too many, roll back and return previous

  0009b	8b 4d 1c	 mov	 ecx, DWORD PTR __Last2$[ebp]
  0009e	8b 06		 mov	 eax, DWORD PTR [esi]
  000a0	2b c8		 sub	 ecx, eax
  000a2	3b cb		 cmp	 ecx, ebx
  000a4	7c 3e		 jl	 SHORT $LN16@do_out

; 2089 :                     break;
; 2090 :                 } else { // copy converted bytes from buffer
; 2091 :                     _CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));

  000a6	53		 push	 ebx
  000a7	8d 4d f4	 lea	 ecx, DWORD PTR __Buf$1[ebp]
  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _memcpy

; 2092 :                     ++_Mid1;

  000b1	83 07 02	 add	 DWORD PTR [edi], 2
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2093 :                     _Mid2 += _Bytes;

  000b7	01 1e		 add	 DWORD PTR [esi], ebx
$LN19@do_out:

; 2071 :         int _Bytes;
; 2072 : 
; 2073 :         while (_Mid1 != _Last1 && _Mid2 != _Last2) {

  000b9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000bb	8b 16		 mov	 edx, DWORD PTR [esi]
  000bd	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000c0	3b 4d 10	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  000c3	0f 85 77 ff ff
	ff		 jne	 $LL2@do_out
$LN3@do_out:

; 2094 :                 }
; 2095 :             }
; 2096 :         }
; 2097 : 
; 2098 :         return _Mid1 == _Last1 ? ok : partial;

  000c9	33 c0		 xor	 eax, eax
  000cb	3b 4d 10	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  000ce	5f		 pop	 edi

; 2099 :     }

  000cf	5e		 pop	 esi
  000d0	0f 95 c0	 setne	 al
  000d3	5b		 pop	 ebx
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d7	33 cd		 xor	 ecx, ebp
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 1c 00	 ret	 28			; 0000001cH
$LN16@do_out:

; 2088 :                     _State = _Stsave;

  000e4	8b 45 f0	 mov	 eax, DWORD PTR __State$GSCopy$1$[ebp]
  000e7	8b 4d e8	 mov	 ecx, DWORD PTR __Stsave$1$[ebp]
  000ea	89 08		 mov	 DWORD PTR [eax], ecx
  000ec	8b 4d e4	 mov	 ecx, DWORD PTR __Stsave$2$[ebp]
  000ef	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000f2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f4	eb d3		 jmp	 SHORT $LN3@do_out
$LN15@do_out:

; 2099 :     }

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	b8 02 00 00 00	 mov	 eax, 2
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	33 cd		 xor	 ecx, ebp
  00102	5b		 pop	 ebx
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 1c 00	 ret	 28			; 0000001cH
?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_out
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
_TEXT	SEGMENT
__Mystate$ = -12					; size = 8
_this$1$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z PROC ; std::codecvt<wchar_t,char,_Mbstatet>::do_in, COMDAT
; _this$ = ecx

; 2028 :         wchar_t* _First2, wchar_t* _Last2, wchar_t*& _Mid2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2029 :         // convert bytes [_First1, _Last1) to [_First2, _Last2)
; 2030 :         mbstate_t _Mystate{};
; 2031 :         _Adl_verify_range(_First1, _Last1);
; 2032 :         _Adl_verify_range(_First2, _Last2);
; 2033 :         _Mid1 = _First1;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __First1$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0

; 2034 :         _Mid2 = _First2;

  0000c	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  0000f	53		 push	 ebx

; 2035 :         for (;;) {
; 2036 :             if (_Mid1 == _Last1) {

  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Last1$[ebp]
  00013	56		 push	 esi
  00014	8b 75 14	 mov	 esi, DWORD PTR __Mid1$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 20	 mov	 edi, DWORD PTR __Mid2$[ebp]
  0001b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001e	89 06		 mov	 DWORD PTR [esi], eax
  00020	66 0f 13 45 f4	 movlpd	 QWORD PTR __Mystate$[ebp], xmm0
  00025	89 17		 mov	 DWORD PTR [edi], edx
  00027	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00029	3b cb		 cmp	 ecx, ebx
  0002b	74 43		 je	 SHORT $LN15@do_in
  0002d	0f 1f 00	 npad	 3
$LL2@do_in:

; 2037 :                 return ok;
; 2038 :             }
; 2039 : 
; 2040 :             if (_Mid2 == _Last2) {

  00030	3b 55 1c	 cmp	 edx, DWORD PTR __Last2$[ebp]
  00033	74 54		 je	 SHORT $LN9@do_in

; 2041 :                 return partial;
; 2042 :             }
; 2043 : 
; 2044 :             int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00038	83 c0 08	 add	 eax, 8
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __Mystate$[ebp]
  0003f	50		 push	 eax
  00040	8b c3		 mov	 eax, ebx
  00042	2b c1		 sub	 eax, ecx
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 __Mbrtowc
  0004c	83 c4 14	 add	 esp, 20			; 00000014H

; 2045 :             switch (_Bytes) {

  0004f	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00052	74 35		 je	 SHORT $LN9@do_in
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 22		 je	 SHORT $LN10@do_in
  00059	85 c0		 test	 eax, eax
  0005b	b9 01 00 00 00	 mov	 ecx, 1
  00060	0f 44 c1	 cmove	 eax, ecx

; 2046 :             case -2: // partial conversion
; 2047 :                 return partial;
; 2048 : 
; 2049 :             case -1: // failed conversion
; 2050 :                 return error;
; 2051 : 
; 2052 :             case 0: // converted NULL character, TRANSITION, VSO-654347
; 2053 :                 _Bytes = 1;
; 2054 :                 // [[fallthrough]];
; 2055 : 
; 2056 :             default: // converted some other character
; 2057 :                 _Mid1 += _Bytes;

  00063	01 06		 add	 DWORD PTR [esi], eax

; 2058 :                 ++_Mid2;

  00065	83 07 02	 add	 DWORD PTR [edi], 2
  00068	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006a	8b 17		 mov	 edx, DWORD PTR [edi]
  0006c	3b cb		 cmp	 ecx, ebx
  0006e	75 c0		 jne	 SHORT $LL2@do_in
$LN15@do_in:
  00070	5f		 pop	 edi

; 2059 :                 break;
; 2060 :             }
; 2061 :         }
; 2062 :     }

  00071	5e		 pop	 esi
  00072	33 c0		 xor	 eax, eax
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 1c 00	 ret	 28			; 0000001cH
$LN10@do_in:
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	b8 02 00 00 00	 mov	 eax, 2
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 1c 00	 ret	 28			; 0000001cH
$LN9@do_in:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 1c 00	 ret	 28			; 0000001cH
?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z ENDP ; std::codecvt<wchar_t,char,_Mbstatet>::do_in
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ PROC		; std::codecvt<wchar_t,char,_Mbstatet>::~codecvt<wchar_t,char,_Mbstatet>, COMDAT
; _this$ = ecx

; 2021 :     virtual __CLR_OR_THIS_CALL ~codecvt() noexcept {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ ENDP		; std::codecvt<wchar_t,char,_Mbstatet>::~codecvt<wchar_t,char,_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gcodecvt_base@std@@UAEPAXI@Z PROC			; std::codecvt_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gcodecvt_base@std@@UAEPAXI@Z ENDP			; std::codecvt_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_encoding@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_encoding, COMDAT
; _this$ = ecx

; 701  :         return 1; // -1 ==> state dependent, 0 ==> varying length

  00000	b8 01 00 00 00	 mov	 eax, 1

; 702  :     }

  00005	c3		 ret	 0
?do_encoding@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_encoding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_max_length@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_max_length, COMDAT
; _this$ = ecx

; 696  :         // return maximum length required for a conversion (from codecvt)
; 697  :         return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 698  :     }

  00005	c3		 ret	 0
?do_max_length@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_max_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT
?do_always_noconv@codecvt_base@std@@MBE_NXZ PROC	; std::codecvt_base::do_always_noconv, COMDAT
; _this$ = ecx

; 691  :         // return true if conversions never change input (from codecvt)
; 692  :         return false;

  00000	32 c0		 xor	 al, al

; 693  :     }

  00002	c3		 ret	 0
?do_always_noconv@codecvt_base@std@@MBE_NXZ ENDP	; std::codecvt_base::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 351  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 352  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 353  :         }
; 354  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 155  :         virtual __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 140  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 141  :                 return this;
; 142  :             }
; 143  : 
; 144  :             return nullptr;
; 145  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 136  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 137  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 101  :         _Tidy();
; 102  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 101  :         _Tidy();
; 102  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 178  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 179  :         _Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 122  :         if (_Myptr) {

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 179  :         _Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4

; 122  :         if (_Myptr) {

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN6@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN6@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 122  :         if (_Myptr) {

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN11@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN11@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 122  :         if (_Myptr) {

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN16@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN16@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 122  :         if (_Myptr) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN21@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN21@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 122  :         if (_Myptr) {

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN26@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN26@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 122  :         if (_Myptr) {

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN31@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN31@Locinfo:

; 180  :     }

  000b1	8b ce		 mov	 ecx, esi

; 130  :         _Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 180  :     }

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 155  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 60   : 
; 61   :     __CLR_OR_THIS_CALL _Yarn(const _Yarn& _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 62   :         *this = _Right;
; 63   :     }
; 64   : 
; 65   :     __CLR_OR_THIS_CALL _Yarn(const _Elem* _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 66   :         *this = _Right;
; 67   :     }
; 68   : 
; 69   :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Yarn& _Right) noexcept {
; 70   :         return *this = _Right._Myptr;
; 71   :     }
; 72   : 
; 73   :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Elem* _Right) noexcept {
; 74   :         if (_Myptr != _Right) { // new value, discard old and copy new
; 75   :             _Tidy();
; 76   : 
; 77   :             if (_Right) { // new is not empty, copy it
; 78   :                 const _Elem* _Ptr = _Right;
; 79   :                 while (*_Ptr != _Elem{}) {
; 80   :                     ++_Ptr;
; 81   :                 }
; 82   : 
; 83   :                 const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);
; 84   : 
; 85   : #ifdef _DEBUG
; 86   :                 _Myptr = static_cast<_Elem*>(_malloc_dbg(_Count, _CRT_BLOCK, __FILE__, __LINE__));
; 87   : #else // _DEBUG
; 88   :                 _Myptr = static_cast<_Elem*>(_CSTD malloc(_Count));
; 89   : #endif // _DEBUG
; 90   : 
; 91   :                 if (_Myptr) {
; 92   :                     _CSTD memcpy(_Myptr, _Right, _Count);
; 93   :                 }
; 94   :             }
; 95   :         }
; 96   : 
; 97   :         return *this;
; 98   :     }
; 99   : 
; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {
; 101  :         _Tidy();
; 102  :     }
; 103  : 
; 104  :     _NODISCARD bool __CLR_OR_THIS_CALL empty() const noexcept {
; 105  :         return _Myptr == nullptr;
; 106  :     }
; 107  : 
; 108  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {
; 109  :         return _Myptr ? _Myptr : &_Nul;
; 110  :     }
; 111  : 
; 112  :     _NODISCARD bool __CLR_OR_THIS_CALL _Empty() const noexcept {
; 113  :         return _Myptr == nullptr;
; 114  :     }
; 115  : 
; 116  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL _C_str() const noexcept {
; 117  :         return _Myptr ? _Myptr : &_Nul;
; 118  :     }
; 119  : 
; 120  : private:
; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {
; 122  :         if (_Myptr) {
; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);
; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;
; 131  :     }
; 132  : 
; 133  :     _Elem* _Myptr; // pointer to allocated string
; 134  :     _Elem _Nul; // nul terminator for unallocated string
; 135  : };
; 136  : 
; 137  : // CLASS _Locinfo
; 138  : class _CRTIMP2_PURE_IMPORT _Locinfo { // summary of all stuff specific to a locale used by standard facets
; 139  : public:
; 140  :     using _Collvec  = ::_Collvec;
; 141  :     using _Ctypevec = ::_Ctypevec;
; 142  :     using _Cvtvec   = ::_Cvtvec;
; 143  :     using _Timevec  = _STD _Timevec;
; 144  : 
; 145  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, const char*);
; 146  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, int, const char*);
; 147  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_dtor(_Locinfo*);
; 148  :     static _Locinfo& __CLRCALL_PURE_OR_CDECL _Locinfo_Addcats(_Locinfo*, int, const char*);
; 149  : 
; 150  :     __CLR_OR_THIS_CALL _Locinfo(const char* _Pch = "C")
; 151  : #ifndef _M_CEE
; 152  :         : _Lock(_LOCK_LOCALE)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00061	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00064	88 46 28	 mov	 BYTE PTR [esi+40], al
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 156  :         if (_Pch) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	85 c0		 test	 eax, eax
  00076	74 1e		 je	 SHORT $LN2@Locinfo

; 157  :             _Locinfo_ctor(this, _Pch);

  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0007f	83 c4 08	 add	 esp, 8

; 162  :     }

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN2@Locinfo:

; 158  :             return;
; 159  :         }
; 160  : 
; 161  :         _Xruntime_error("bad locale name");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009b	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN24@Locinfo:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 28   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::CanOperateKeystream, COMDAT
; _this$ = ecx

; 237  : 	bool CanOperateKeystream() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?CanOperateKeystream@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::CanOperateKeystream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetIterationsToBuffer, COMDAT
; _this$ = ecx

; 231  : 	unsigned int GetIterationsToBuffer() const {return X;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetIterationsToBuffer@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetIterationsToBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetBytesPerIteration, COMDAT
; _this$ = ecx

; 227  : 	unsigned int GetBytesPerIteration() const {return BYTES_PER_ITERATION;}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?GetBytesPerIteration@?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::GetBytesPerIteration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::~AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx

; 213  : 	virtual ~AdditiveCipherConcretePolicy() {}

  00000	c2 00 00	 ret	 0
??1?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>::~AdditiveCipherConcretePolicy<unsigned int,8,1,CryptoPP::AdditiveCipherAbstractPolicy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000a	57		 push	 edi
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c6 46 21 00	 mov	 BYTE PTR [esi+33], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00012	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00015	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00018	8b 79 2c	 mov	 edi, DWORD PTR [ecx+44]
  0001b	89 7e 2c	 mov	 DWORD PTR [esi+44], edi

; 595  : 		if (size <= S && !m_allocated)

  0001e	83 79 2c 08	 cmp	 DWORD PTR [ecx+44], 8
  00022	77 08		 ja	 SHORT $LN10@FixedSizeS

; 596  : 		{
; 597  : 			m_allocated = true;

  00024	c6 46 21 01	 mov	 BYTE PTR [esi+33], 1

; 598  : 			return GetAlignedArray();

  00028	8b c6		 mov	 eax, esi
  0002a	eb 02		 jmp	 SHORT $LN11@FixedSizeS
$LN10@FixedSizeS:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  0002c	33 c0		 xor	 eax, eax
$LN11@FixedSizeS:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  00031	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00034	85 d2		 test	 edx, edx
  00036	74 60		 je	 SHORT $LN22@FixedSizeS
  00038	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  0003b	c1 e1 02	 shl	 ecx, 2
  0003e	c1 e7 02	 shl	 edi, 2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00041	85 c9		 test	 ecx, ecx
  00043	74 53		 je	 SHORT $LN22@FixedSizeS

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00045	85 c0		 test	 eax, eax
  00047	75 1a		 jne	 SHORT $LN15@FixedSizeS
  00049	e8 00 00 00 00	 call	 __errno
  0004e	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@FixedSizeS:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00063	3b f9		 cmp	 edi, ecx
  00065	72 15		 jb	 SHORT $LN17@FixedSizeS

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00067	51		 push	 ecx
  00068	52		 push	 edx
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	8b c6		 mov	 eax, esi
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN17@FixedSizeS:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  0007c	57		 push	 edi
  0007d	6a 00		 push	 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00088	e8 00 00 00 00	 call	 __errno
  0008d	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00093	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@FixedSizeS:
  00098	5f		 pop	 edi
  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
??0?$FixedSizeSecBlock@I$07V?$FixedSizeAllocatorWithCleanup@I$07V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,8,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??_GWhirlpool@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWhirlpool@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Whirlpool::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	8b 96 bc 00 00
	00		 mov	 edx, DWORD PTR [esi+188]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000c	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0000f	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]
  00017	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b f9		 cmp	 edi, ecx
  0001c	75 0b		 jne	 SHORT $LN30@scalar

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  0001e	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00022	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00024	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00027	f3 ab		 rep stosd
$LN30@scalar:

; 569  : 	return b < a ? b : a;

  00029	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  00032	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  00035	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00039	3b f9		 cmp	 edi, ecx
  0003b	75 0b		 jne	 SHORT $LN68@scalar

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  0003d	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00041	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00043	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00046	f3 ab		 rep stosd
$LN68@scalar:
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0e		 je	 SHORT $LN80@scalar
  0004e	68 c8 00 00 00	 push	 200			; 000000c8H
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
$LN80@scalar:
  0005c	5f		 pop	 edi
  0005d	8b c6		 mov	 eax, esi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
??_GWhirlpool@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Whirlpool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ
_TEXT	SEGMENT
?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::StateBuf, COMDAT
; _this$ = ecx

; 194  : 	T_HashWordType* StateBuf() {return this->m_state;}

  00000	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00006	c3		 ret	 0
?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::StateBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::Init, COMDAT
; _this$ = ecx

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00000	ff b1 c0 00 00
	00		 push	 DWORD PTR [ecx+192]
  00006	e8 00 00 00 00	 call	 ?InitState@Whirlpool@CryptoPP@@SAXPA_K@Z ; CryptoPP::Whirlpool::InitState
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::HashEndianCorrectedBlock, COMDAT
; _this$ = ecx

; 191  : 	void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00006	ff b1 c0 00 00
	00		 push	 DWORD PTR [ecx+192]
  0000c	e8 00 00 00 00	 call	 ?Transform@Whirlpool@CryptoPP@@SAXPA_KPB_K@Z ; CryptoPP::Whirlpool::Transform
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::HashEndianCorrectedBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::DigestSize, COMDAT
; _this$ = ecx

; 187  : 	unsigned int DigestSize() const {return DIGESTSIZE;}

  00000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00005	c3		 ret	 0
?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::DigestSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>, COMDAT
; _this$ = ecx

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00003	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00009	39 8e b8 00 00
	00		 cmp	 DWORD PTR [esi+184], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000f	8d 56 70	 lea	 edx, DWORD PTR [esi+112]
  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  00017	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b fa		 cmp	 edi, edx
  0001c	75 0a		 jne	 SHORT $LN23@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001e	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00020	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00024	33 c0		 xor	 eax, eax
  00026	f3 ab		 rep stosd
$LN23@IteratedHa:

; 569  : 	return b < a ? b : a;

  00028	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002b	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002e	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  00031	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  00034	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00038	3b f9		 cmp	 edi, ecx
  0003a	75 0b		 jne	 SHORT $LN61@IteratedHa

; 620  : 			m_allocated = false;

  0003c	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00040	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00042	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00045	f3 ab		 rep stosd
$LN61@IteratedHa:
  00047	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0EA@VWhirlpool@2@$0A@$0A@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,64,CryptoPP::Whirlpool,0,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::~ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0b		 jne	 SHORT $LN26@ClonableIm

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001b	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	f3 ab		 rep stosd
$LN26@ClonableIm:
  00020	5f		 pop	 edi
  00021	c3		 ret	 0
??1?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::~ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 c8 00 00 00	 push	 200			; 000000c8H
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	8b f0		 mov	 esi, eax
  00014	83 c4 04	 add	 esp, 4
  00017	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	74 3e		 je	 SHORT $LN3@Clone
  0001e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00021	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00024	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00027	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0002a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002d	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00030	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00036	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00039	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00042	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  00045	51		 push	 ecx
  00046	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  00049	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  0004e	5f		 pop	 edi
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Whirlpool@CryptoPP@@6B@
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@Clone:
  0005c	5f		 pop	 edi
  0005d	33 c0		 xor	 eax, eax
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?Clone@?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::Whirlpool,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 09		 push	 9
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_09HLDHDDJL@Whirlpool@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 09 00
	00 00		 mov	 DWORD PTR [esi+16], 9

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 09 00	 mov	 BYTE PTR [esi+9], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::Whirlpool>::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ
_TEXT	SEGMENT
?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf, COMDAT
; _this$ = ecx

; 162  : 	T_HashWordType* DataBuf() {return this->m_data;}

  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00003	c3		 ret	 0
?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
_TEXT	SEGMENT
?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder, COMDAT
; _this$ = ecx

; 144  : 	ByteOrder GetByteOrder() const {return T_Endianness::ToEnum();}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize, COMDAT
; _this$ = ecx

; 138  : 	unsigned int BlockSize() const {return T_BlockSize;}

  00000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00005	c3		 ret	 0
?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00000	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0b		 jne	 SHORT $LN20@IteratedHa

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001b	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	f3 ab		 rep stosd
$LN20@IteratedHa:
  00020	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00021	c3		 ret	 0
??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??_GRIPEMD128@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRIPEMD128@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::RIPEMD128::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0000c	39 8e b0 00 00
	00		 cmp	 DWORD PTR [esi+176], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00012	8d 56 68	 lea	 edx, DWORD PTR [esi+104]
  00015	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00016	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  0001a	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001d	3b fa		 cmp	 edi, edx
  0001f	75 08		 jne	 SHORT $LN30@scalar
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00021	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00023	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00027	f3 ab		 rep stosd
$LN30@scalar:

; 569  : 	return b < a ? b : a;

  00029	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002c	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	39 4a 48	 cmp	 DWORD PTR [edx+72], ecx
  00032	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]
  00035	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00039	3b fa		 cmp	 edi, edx
  0003b	75 08		 jne	 SHORT $LN68@scalar
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003f	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00043	f3 ab		 rep stosd
$LN68@scalar:
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0e		 je	 SHORT $LN80@scalar
  0004b	68 c0 00 00 00	 push	 192			; 000000c0H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN80@scalar:
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??_GRIPEMD128@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::RIPEMD128::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEPAIXZ
_TEXT	SEGMENT
?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEPAIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::StateBuf, COMDAT
; _this$ = ecx

; 194  : 	T_HashWordType* StateBuf() {return this->m_state;}

  00000	8b 81 b8 00 00
	00		 mov	 eax, DWORD PTR [ecx+184]
  00006	c3		 ret	 0
?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEPAIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::StateBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::Init, COMDAT
; _this$ = ecx

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00000	ff b1 b8 00 00
	00		 push	 DWORD PTR [ecx+184]
  00006	e8 00 00 00 00	 call	 ?InitState@RIPEMD128@CryptoPP@@SAXPAI@Z ; CryptoPP::RIPEMD128::InitState
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::HashEndianCorrectedBlock, COMDAT
; _this$ = ecx

; 191  : 	void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00006	ff b1 b8 00 00
	00		 push	 DWORD PTR [ecx+184]
  0000c	e8 00 00 00 00	 call	 ?Transform@RIPEMD128@CryptoPP@@SAXPAIPBI@Z ; CryptoPP::RIPEMD128::Transform
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::HashEndianCorrectedBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::DigestSize, COMDAT
; _this$ = ecx

; 187  : 	unsigned int DigestSize() const {return DIGESTSIZE;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::DigestSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>, COMDAT
; _this$ = ecx

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00003	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00009	39 8e b0 00 00
	00		 cmp	 DWORD PTR [esi+176], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000f	8d 56 68	 lea	 edx, DWORD PTR [esi+104]
  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  00017	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b fa		 cmp	 edi, edx
  0001c	75 08		 jne	 SHORT $LN23@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00020	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00024	f3 ab		 rep stosd
$LN23@IteratedHa:

; 569  : 	return b < a ? b : a;

  00026	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00029	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	39 4a 48	 cmp	 DWORD PTR [edx+72], ecx
  0002f	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]
  00032	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00036	3b fa		 cmp	 edi, edx
  00038	75 08		 jne	 SHORT $LN61@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003a	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003c	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00040	f3 ab		 rep stosd
$LN61@IteratedHa:
  00042	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00043	5e		 pop	 esi
  00044	c3		 ret	 0
??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BA@VRIPEMD128@2@$0A@$0A@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,16,CryptoPP::RIPEMD128,0,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::~ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0a		 jne	 SHORT $LN26@ClonableIm

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax
  0001b	8b ca		 mov	 ecx, edx
  0001d	f3 ab		 rep stosd
$LN26@ClonableIm:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::~ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 c0 00 00 00	 push	 192			; 000000c0H
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	8b f0		 mov	 esi, eax
  00014	83 c4 04	 add	 esp, 4
  00017	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	74 32		 je	 SHORT $LN3@Clone
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00024	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00027	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002d	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00036	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  00039	51		 push	 ecx
  0003a	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  0003d	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00042	5f		 pop	 edi
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7RIPEMD128@CryptoPP@@6B@
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN3@Clone:
  00050	5f		 pop	 edi
  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?Clone@?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::RIPEMD128,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 0a		 push	 10			; 0000000aH
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DFIJCONE@RIPEMD?9128@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 0a 00
	00 00		 mov	 DWORD PTR [esi+16], 10	; 0000000aH

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 0a 00	 mov	 BYTE PTR [esi+10], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::RIPEMD128>::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ
_TEXT	SEGMENT
?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf, COMDAT
; _this$ = ecx

; 162  : 	T_HashWordType* DataBuf() {return this->m_data;}

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	c3		 ret	 0
?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
_TEXT	SEGMENT
?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder, COMDAT
; _this$ = ecx

; 144  : 	ByteOrder GetByteOrder() const {return T_Endianness::ToEnum();}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize, COMDAT
; _this$ = ecx

; 138  : 	unsigned int BlockSize() const {return T_BlockSize;}

  00000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00005	c3		 ret	 0
?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00000	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0a		 jne	 SHORT $LN20@IteratedHa

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax
  0001b	8b ca		 mov	 ecx, edx
  0001d	f3 ab		 rep stosd
$LN20@IteratedHa:
  0001f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00020	c3		 ret	 0
??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??_GSHA1@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSHA1@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::SHA1::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0000c	39 8e b0 00 00
	00		 cmp	 DWORD PTR [esi+176], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00012	8d 56 68	 lea	 edx, DWORD PTR [esi+104]
  00015	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00016	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  0001a	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001d	3b fa		 cmp	 edi, edx
  0001f	75 08		 jne	 SHORT $LN30@scalar
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00021	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00023	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00027	f3 ab		 rep stosd
$LN30@scalar:

; 569  : 	return b < a ? b : a;

  00029	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002c	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	39 4a 48	 cmp	 DWORD PTR [edx+72], ecx
  00032	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]
  00035	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00039	3b fa		 cmp	 edi, edx
  0003b	75 08		 jne	 SHORT $LN68@scalar
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003f	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00043	f3 ab		 rep stosd
$LN68@scalar:
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0e		 je	 SHORT $LN80@scalar
  0004b	68 c0 00 00 00	 push	 192			; 000000c0H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN80@scalar:
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??_GSHA1@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::SHA1::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeAlignedSecBlock<unsigned int,16,0>::~FixedSizeAlignedSecBlock<unsigned int,16,0>, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00003	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]
  0000b	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0000e	3b f9		 cmp	 edi, ecx
  00010	75 0a		 jne	 SHORT $LN20@FixedSizeA

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00012	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00016	33 c0		 xor	 eax, eax
  00018	8b ca		 mov	 ecx, edx
  0001a	f3 ab		 rep stosd
$LN20@FixedSizeA:
  0001c	5f		 pop	 edi
  0001d	c3		 ret	 0
??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeAlignedSecBlock<unsigned int,16,0>::~FixedSizeAlignedSecBlock<unsigned int,16,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEPAIXZ
_TEXT	SEGMENT
?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEPAIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::StateBuf, COMDAT
; _this$ = ecx

; 194  : 	T_HashWordType* StateBuf() {return this->m_state;}

  00000	8b 81 b8 00 00
	00		 mov	 eax, DWORD PTR [ecx+184]
  00006	c3		 ret	 0
?StateBuf@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEPAIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::StateBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::Init, COMDAT
; _this$ = ecx

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00000	ff b1 b8 00 00
	00		 push	 DWORD PTR [ecx+184]
  00006	e8 00 00 00 00	 call	 ?InitState@SHA1@CryptoPP@@SAXPAI@Z ; CryptoPP::SHA1::InitState
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
?Init@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::HashEndianCorrectedBlock, COMDAT
; _this$ = ecx

; 191  : 	void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00006	ff b1 b8 00 00
	00		 push	 DWORD PTR [ecx+184]
  0000c	e8 00 00 00 00	 call	 ?Transform@SHA1@CryptoPP@@SAXPAIPBI@Z ; CryptoPP::SHA1::Transform
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@MAEXPBI@Z ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::HashEndianCorrectedBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::DigestSize, COMDAT
; _this$ = ecx

; 187  : 	unsigned int DigestSize() const {return DIGESTSIZE;}

  00000	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00005	c3		 ret	 0
?DigestSize@?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::DigestSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>, COMDAT
; _this$ = ecx

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00003	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00009	39 8e b0 00 00
	00		 cmp	 DWORD PTR [esi+176], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000f	8d 56 68	 lea	 edx, DWORD PTR [esi+104]
  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  00017	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b fa		 cmp	 edi, edx
  0001c	75 08		 jne	 SHORT $LN23@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00020	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00024	f3 ab		 rep stosd
$LN23@IteratedHa:

; 569  : 	return b < a ? b : a;

  00026	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00029	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	39 4a 48	 cmp	 DWORD PTR [edx+72], ecx
  0002f	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]
  00032	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00036	3b fa		 cmp	 edi, edx
  00038	75 08		 jne	 SHORT $LN61@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003a	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003c	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00040	f3 ab		 rep stosd
$LN61@IteratedHa:
  00042	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00043	5e		 pop	 esi
  00044	c3		 ret	 0
??1?$IteratedHashWithStaticTransform@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@$0BE@VSHA1@2@$0A@$0A@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>::~IteratedHashWithStaticTransform<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,20,CryptoPP::SHA1,0,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::~ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0a		 jne	 SHORT $LN26@ClonableIm

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax
  0001b	8b ca		 mov	 ecx, edx
  0001d	f3 ab		 rep stosd
$LN26@ClonableIm:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::~ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 c0 00 00 00	 push	 192			; 000000c0H
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	8b f0		 mov	 esi, eax
  00014	83 c4 04	 add	 esp, 4
  00017	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	74 32		 je	 SHORT $LN3@Clone
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00024	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00027	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002d	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00036	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  00039	51		 push	 ecx
  0003a	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  0003d	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00042	5f		 pop	 edi
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SHA1@CryptoPP@@6B@
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN3@Clone:
  00050	5f		 pop	 edi
  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?Clone@?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::SHA1,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 05		 push	 5
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_05HJMENKNE@SHA?91@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 05 00
	00 00		 mov	 DWORD PTR [esi+16], 5

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 05 00	 mov	 BYTE PTR [esi+5], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>,CryptoPP::SHA1>::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000a	57		 push	 edi
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c6 46 41 00	 mov	 BYTE PTR [esi+65], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00012	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00015	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00018	8b 79 4c	 mov	 edi, DWORD PTR [ecx+76]
  0001b	89 7e 4c	 mov	 DWORD PTR [esi+76], edi

; 595  : 		if (size <= S && !m_allocated)

  0001e	83 79 4c 10	 cmp	 DWORD PTR [ecx+76], 16	; 00000010H
  00022	77 08		 ja	 SHORT $LN10@FixedSizeS

; 596  : 		{
; 597  : 			m_allocated = true;

  00024	c6 46 41 01	 mov	 BYTE PTR [esi+65], 1

; 598  : 			return GetAlignedArray();

  00028	8b c6		 mov	 eax, esi
  0002a	eb 02		 jmp	 SHORT $LN11@FixedSizeS
$LN10@FixedSizeS:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  0002c	33 c0		 xor	 eax, eax
$LN11@FixedSizeS:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0002e	89 46 50	 mov	 DWORD PTR [esi+80], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  00031	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00034	85 d2		 test	 edx, edx
  00036	74 60		 je	 SHORT $LN22@FixedSizeS
  00038	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]
  0003b	c1 e1 02	 shl	 ecx, 2
  0003e	c1 e7 02	 shl	 edi, 2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00041	85 c9		 test	 ecx, ecx
  00043	74 53		 je	 SHORT $LN22@FixedSizeS

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00045	85 c0		 test	 eax, eax
  00047	75 1a		 jne	 SHORT $LN15@FixedSizeS
  00049	e8 00 00 00 00	 call	 __errno
  0004e	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@FixedSizeS:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00063	3b f9		 cmp	 edi, ecx
  00065	72 15		 jb	 SHORT $LN17@FixedSizeS

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00067	51		 push	 ecx
  00068	52		 push	 edx
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	8b c6		 mov	 eax, esi
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN17@FixedSizeS:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  0007c	57		 push	 edi
  0007d	6a 00		 push	 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00088	e8 00 00 00 00	 call	 __errno
  0008d	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00093	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@FixedSizeS:
  00098	5f		 pop	 edi
  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
??0?$FixedSizeSecBlock@I$0BA@V?$FixedSizeAllocatorWithCleanup@I$0BA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,16,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,16,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ
_TEXT	SEGMENT
?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf, COMDAT
; _this$ = ecx

; 162  : 	T_HashWordType* DataBuf() {return this->m_data;}

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	c3		 ret	 0
?DataBuf@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPAIXZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::DataBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
_TEXT	SEGMENT
?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder, COMDAT
; _this$ = ecx

; 144  : 	ByteOrder GetByteOrder() const {return T_Endianness::ToEnum();}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetByteOrder@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::GetByteOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize, COMDAT
; _this$ = ecx

; 138  : 	unsigned int BlockSize() const {return T_BlockSize;}

  00000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00005	c3		 ret	 0
?BlockSize@?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00000	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0a		 jne	 SHORT $LN20@IteratedHa

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax
  0001b	8b ca		 mov	 ecx, edx
  0001d	f3 ab		 rep stosd
$LN20@IteratedHa:
  0001f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00020	c3		 ret	 0
??1?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned int,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,1>,64,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??_GTiger@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTiger@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Tiger::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	8b 96 bc 00 00
	00		 mov	 edx, DWORD PTR [esi+188]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000c	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0000f	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]
  00017	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b f9		 cmp	 edi, ecx
  0001c	75 0b		 jne	 SHORT $LN30@scalar

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  0001e	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00022	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00024	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00027	f3 ab		 rep stosd
$LN30@scalar:

; 569  : 	return b < a ? b : a;

  00029	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002f	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  00032	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  00035	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00039	3b f9		 cmp	 edi, ecx
  0003b	75 0b		 jne	 SHORT $LN68@scalar

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  0003d	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00041	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00043	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00046	f3 ab		 rep stosd
$LN68@scalar:
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0e		 je	 SHORT $LN80@scalar
  0004e	68 c8 00 00 00	 push	 200			; 000000c8H
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
$LN80@scalar:
  0005c	5f		 pop	 edi
  0005d	8b c6		 mov	 eax, esi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
??_GTiger@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Tiger::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeAlignedSecBlock<unsigned __int64,8,0>::~FixedSizeAlignedSecBlock<unsigned __int64,8,0>, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00003	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]
  0000b	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0000e	3b f9		 cmp	 edi, ecx
  00010	75 0b		 jne	 SHORT $LN20@FixedSizeA

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00012	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00016	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00018	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001b	f3 ab		 rep stosd
$LN20@FixedSizeA:
  0001d	5f		 pop	 edi
  0001e	c3		 ret	 0
??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeAlignedSecBlock<unsigned __int64,8,0>::~FixedSizeAlignedSecBlock<unsigned __int64,8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ
_TEXT	SEGMENT
?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::StateBuf, COMDAT
; _this$ = ecx

; 194  : 	T_HashWordType* StateBuf() {return this->m_state;}

  00000	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00006	c3		 ret	 0
?StateBuf@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEPA_KXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::StateBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::Init, COMDAT
; _this$ = ecx

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00000	ff b1 c0 00 00
	00		 push	 DWORD PTR [ecx+192]
  00006	e8 00 00 00 00	 call	 ?InitState@Tiger@CryptoPP@@SAXPA_K@Z ; CryptoPP::Tiger::InitState
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
?Init@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::HashEndianCorrectedBlock, COMDAT
; _this$ = ecx

; 191  : 	void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00006	ff b1 c0 00 00
	00		 push	 DWORD PTR [ecx+192]
  0000c	e8 00 00 00 00	 call	 ?Transform@Tiger@CryptoPP@@SAXPA_KPB_K@Z ; CryptoPP::Tiger::Transform
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?HashEndianCorrectedBlock@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@MAEXPB_K@Z ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::HashEndianCorrectedBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::DigestSize, COMDAT
; _this$ = ecx

; 187  : 	unsigned int DigestSize() const {return DIGESTSIZE;}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c3		 ret	 0
?DigestSize@?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::DigestSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>, COMDAT
; _this$ = ecx

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00003	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00009	39 8e b8 00 00
	00		 cmp	 DWORD PTR [esi+184], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  0000f	8d 56 70	 lea	 edx, DWORD PTR [esi+112]
  00012	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00013	0f 42 4a 48	 cmovb	 ecx, DWORD PTR [edx+72]
  00017	8b 7a 50	 mov	 edi, DWORD PTR [edx+80]

; 614  : 		if (ptr == GetAlignedArray())

  0001a	3b fa		 cmp	 edi, edx
  0001c	75 0a		 jne	 SHORT $LN23@IteratedHa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001e	03 c9		 add	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00020	c6 42 41 00	 mov	 BYTE PTR [edx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00024	33 c0		 xor	 eax, eax
  00026	f3 ab		 rep stosd
$LN23@IteratedHa:

; 569  : 	return b < a ? b : a;

  00028	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  0002b	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002e	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  00031	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  00034	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00038	3b f9		 cmp	 edi, ecx
  0003a	75 0b		 jne	 SHORT $LN61@IteratedHa

; 620  : 			m_allocated = false;

  0003c	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00040	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  00042	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00045	f3 ab		 rep stosd
$LN61@IteratedHa:
  00047	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 182  : 	virtual ~IteratedHashWithStaticTransform() {}

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
??1?$IteratedHashWithStaticTransform@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@$0BI@VTiger@2@$0A@$0A@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>::~IteratedHashWithStaticTransform<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,24,CryptoPP::Tiger,0,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
;	COMDAT ??1?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::~ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0b		 jne	 SHORT $LN26@ClonableIm

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001b	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	f3 ab		 rep stosd
$LN26@ClonableIm:
  00020	5f		 pop	 edi
  00021	c3		 ret	 0
??1?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::~ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 c8 00 00 00	 push	 200			; 000000c8H
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	8b f0		 mov	 esi, eax
  00014	83 c4 04	 add	 esp, 4
  00017	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	74 3e		 je	 SHORT $LN3@Clone
  0001e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00021	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00024	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00027	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0002a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002d	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00030	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00036	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00039	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  00042	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  00045	51		 push	 ecx
  00046	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  00049	e8 00 00 00 00	 call	 ??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
  0004e	5f		 pop	 edi
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Tiger@CryptoPP@@6B@
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@Clone:
  0005c	5f		 pop	 edi
  0005d	33 c0		 xor	 eax, eax
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?Clone@?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::Tiger,CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 05		 push	 5
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_05LIOENMIE@Tiger@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 05 00
	00 00		 mov	 DWORD PTR [esi+16], 5

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 05 00	 mov	 BYTE PTR [esi+5], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>,CryptoPP::Tiger>::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000a	57		 push	 edi
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c6 46 41 00	 mov	 BYTE PTR [esi+65], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00012	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00015	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00018	8b 79 4c	 mov	 edi, DWORD PTR [ecx+76]
  0001b	89 7e 4c	 mov	 DWORD PTR [esi+76], edi

; 595  : 		if (size <= S && !m_allocated)

  0001e	83 79 4c 08	 cmp	 DWORD PTR [ecx+76], 8
  00022	77 08		 ja	 SHORT $LN10@FixedSizeS

; 596  : 		{
; 597  : 			m_allocated = true;

  00024	c6 46 41 01	 mov	 BYTE PTR [esi+65], 1

; 598  : 			return GetAlignedArray();

  00028	8b c6		 mov	 eax, esi
  0002a	eb 02		 jmp	 SHORT $LN11@FixedSizeS
$LN10@FixedSizeS:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  0002c	33 c0		 xor	 eax, eax
$LN11@FixedSizeS:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0002e	89 46 50	 mov	 DWORD PTR [esi+80], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  00031	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00034	85 d2		 test	 edx, edx
  00036	74 60		 je	 SHORT $LN22@FixedSizeS
  00038	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]
  0003b	c1 e1 03	 shl	 ecx, 3
  0003e	c1 e7 03	 shl	 edi, 3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00041	85 c9		 test	 ecx, ecx
  00043	74 53		 je	 SHORT $LN22@FixedSizeS

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00045	85 c0		 test	 eax, eax
  00047	75 1a		 jne	 SHORT $LN15@FixedSizeS
  00049	e8 00 00 00 00	 call	 __errno
  0004e	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@FixedSizeS:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00063	3b f9		 cmp	 edi, ecx
  00065	72 15		 jb	 SHORT $LN17@FixedSizeS

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00067	51		 push	 ecx
  00068	52		 push	 edx
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	8b c6		 mov	 eax, esi
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN17@FixedSizeS:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  0007c	57		 push	 edi
  0007d	6a 00		 push	 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00088	e8 00 00 00 00	 call	 __errno
  0008d	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00093	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@FixedSizeS:
  00098	5f		 pop	 edi
  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
??0?$FixedSizeSecBlock@_K$07V?$FixedSizeAllocatorWithCleanup@_K$07V?$NullAllocator@_K@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >::FixedSizeSecBlock<unsigned __int64,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned __int64,8,CryptoPP::NullAllocator<unsigned __int64>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ
_TEXT	SEGMENT
?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf, COMDAT
; _this$ = ecx

; 162  : 	T_HashWordType* DataBuf() {return this->m_data;}

  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00003	c3		 ret	 0
?DataBuf@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@MAEPA_KXZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::DataBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ
_TEXT	SEGMENT
?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder, COMDAT
; _this$ = ecx

; 144  : 	ByteOrder GetByteOrder() const {return T_Endianness::ToEnum();}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetByteOrder@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBE?AW4ByteOrder@2@XZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::GetByteOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize, COMDAT
; _this$ = ecx

; 138  : 	unsigned int BlockSize() const {return T_BlockSize;}

  00000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00005	c3		 ret	 0
?BlockSize@?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00000	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 48	 cmp	 DWORD PTR [ecx+72], edx
  0000a	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
  0000d	0f 42 51 48	 cmovb	 edx, DWORD PTR [ecx+72]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0b		 jne	 SHORT $LN20@IteratedHa

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 41 00	 mov	 BYTE PTR [ecx+65], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax

; 1359 : 	SecureWipeBuffer(reinterpret_cast<word32 *>(buf), 2*n);

  0001b	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001e	f3 ab		 rep stosd
$LN20@IteratedHa:
  00020	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 133  : 	virtual ~IteratedHash() {}

  00021	c3		 ret	 0
??1?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>::~IteratedHash<unsigned __int64,CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0>,64,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?AlgorithmProvider@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::AlgorithmProvider, COMDAT
; _this$ = ecx

; 91   : 	virtual std::string AlgorithmProvider() const { return "C++"; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 03		 push	 3
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_03BFHCIDFI@C?$CL?$CL@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 03 00
	00 00		 mov	 DWORD PTR [esi+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 03 00	 mov	 BYTE PTR [esi+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 91   : 	virtual std::string AlgorithmProvider() const { return "C++"; }

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmProvider@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 55   : 	unsigned int OptimalDataAlignment() const {return GetAlignmentOf<T>();}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?OptimalDataAlignment@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalDataAlignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalBlockSize, COMDAT
; _this$ = ecx

; 50   : 	unsigned int OptimalBlockSize() const {return this->BlockSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 24	 jmp	 DWORD PTR [eax+36]
?OptimalBlockSize@?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::OptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned int,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx

; 40   : 	virtual ~IteratedHashBase() {}

  00000	c2 00 00	 ret	 0
??1?$IteratedHashBase@IVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashBase<unsigned int,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned int,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 55   : 	unsigned int OptimalDataAlignment() const {return GetAlignmentOf<T>();}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?OptimalDataAlignment@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalDataAlignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalBlockSize, COMDAT
; _this$ = ecx

; 50   : 	unsigned int OptimalBlockSize() const {return this->BlockSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 24	 jmp	 DWORD PTR [eax+36]
?OptimalBlockSize@?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::OptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
;	COMDAT ??1?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>, COMDAT
; _this$ = ecx

; 40   : 	virtual ~IteratedHashBase() {}

  00000	c2 00 00	 ret	 0
??1?$IteratedHashBase@_KVHashTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>::~IteratedHashBase<unsigned __int64,CryptoPP::HashTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider, COMDAT
; _this$ = ecx

; 381  : 	std::string AlgorithmProvider() const { return this->GetPolicy().AlgorithmProvider(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00006	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00009	ff 50 3c	 call	 DWORD PTR [eax+60]
  0000c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000f	8b c8		 mov	 ecx, eax
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	ff 52 30	 call	 DWORD PTR [edx+48]
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsRandomAccess, COMDAT
; _this$ = ecx

; 360  : 	bool IsRandomAccess() const {return this->GetPolicy().CipherIsRandomAccess();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 3c	 call	 DWORD PTR [eax+60]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00010	ff e0		 jmp	 eax
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsRandomAccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsForwardTransformation, COMDAT
; _this$ = ecx

; 355  : 	bool IsForwardTransformation() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsSelfInverting, COMDAT
; _this$ = ecx

; 351  : 	bool IsSelfInverting() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::IsSelfInverting
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 347  : 	unsigned int OptimalDataAlignment() const {return this->GetPolicy().GetAlignment();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 3c	 call	 DWORD PTR [eax+60]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	ff 62 04	 jmp	 DWORD PTR [edx+4]
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalDataAlignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalBlockSize, COMDAT
; _this$ = ecx

; 336  : 	unsigned int OptimalBlockSize() const {return this->GetPolicy().GetOptimalBlockSize();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 3c	 call	 DWORD PTR [eax+60]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	ff 62 0c	 jmp	 DWORD PTR [edx+12]
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::OptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >, COMDAT
; _this$ = ecx

; 302  : 	virtual ~AdditiveCipherTemplate() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00024	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00027	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002a	3b c2		 cmp	 eax, edx
  0002c	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002f	8b fe		 mov	 edi, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00031	0f 42 d0	 cmovb	 edx, eax
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	32 c0		 xor	 al, al
  0003d	8b ca		 mov	 ecx, edx
  0003f	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 231  : 		if (T_Align16 && size)

  00041	56		 push	 esi
  00042	85 d2		 test	 edx, edx
  00044	74 19		 je	 SHORT $LN9@AdditiveCi

; 232  : 			return AlignedDeallocate(ptr);

  00046	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 302  : 	virtual ~AdditiveCipherTemplate() {}

  0004b	83 c4 04	 add	 esp, 4
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN9@AdditiveCi:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0005f	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 302  : 	virtual ~AdditiveCipherTemplate() {}

  00064	83 c4 04	 add	 esp, 4
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>, COMDAT
; _this$ = ecx

; 53   : 	virtual ~AbstractPolicyHolder() {}

  00000	c2 00 00	 ret	 0
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iterationCount$ = 8					; size = 8
?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z PROC ; CryptoPP::AdditiveCipherAbstractPolicy::SeekToIteration, COMDAT
; _this$ = ecx

; 175  : 		{CRYPTOPP_UNUSED(iterationCount); CRYPTOPP_ASSERT(!CipherIsRandomAccess());

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 176  : 		throw NotImplemented("StreamTransformation: this object doesn't support random access");}

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5obje@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@SeekToIter:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SeekToIteration@AdditiveCipherAbstractPolicy@CryptoPP@@UAEX_K@Z ENDP ; CryptoPP::AdditiveCipherAbstractPolicy::SeekToIteration
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z
_TEXT	SEGMENT
_keystream$ = 8						; size = 4
_iterationCount$ = 12					; size = 4
?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z PROC ; CryptoPP::AdditiveCipherAbstractPolicy::WriteKeystream, COMDAT
; _this$ = ecx

; 134  : 		{OperateKeystream(KeystreamOperation(INPUT_NULL | static_cast<KeystreamOperationFlags>(IsAlignedOn(keystream, GetAlignment()))), keystream, NULLPTR, iterationCount);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1146 : 	return alignment==1 || (IsPowerOf2(alignment) ? ModPowerOf2(x, alignment) == 0 : x % alignment == 0);

  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _keystream$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 134  : 		{OperateKeystream(KeystreamOperation(INPUT_NULL | static_cast<KeystreamOperationFlags>(IsAlignedOn(keystream, GetAlignment()))), keystream, NULLPTR, iterationCount);}

  00010	8b f0		 mov	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1146 : 	return alignment==1 || (IsPowerOf2(alignment) ? ModPowerOf2(x, alignment) == 0 : x % alignment == 0);

  00012	83 fe 01	 cmp	 esi, 1
  00015	74 2e		 je	 SHORT $LN7@WriteKeyst

; 923  : 	return value > 0 && (value & (value-1)) == 0;

  00017	85 f6		 test	 esi, esi
  00019	74 16		 je	 SHORT $LN5@WriteKeyst
  0001b	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0001e	85 c6		 test	 eax, esi
  00020	75 0f		 jne	 SHORT $LN5@WriteKeyst

; 1007 : 	return T1((a > b) ? (a - b) : 0);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	3b ce		 cmp	 ecx, esi
  00029	1b d2		 sbb	 edx, edx
  0002b	23 d0		 and	 edx, eax

; 1040 : 	return T2(a) & SaturatingSubtract(b,1U);

  0002d	23 d3		 and	 edx, ebx

; 1146 : 	return alignment==1 || (IsPowerOf2(alignment) ? ModPowerOf2(x, alignment) == 0 : x % alignment == 0);

  0002f	eb 06		 jmp	 SHORT $LN20@WriteKeyst
$LN5@WriteKeyst:
  00031	8b c3		 mov	 eax, ebx
  00033	33 d2		 xor	 edx, edx
  00035	f7 f6		 div	 esi
$LN20@WriteKeyst:
  00037	f7 da		 neg	 edx
  00039	b9 04 00 00 00	 mov	 ecx, 4
  0003e	1b d2		 sbb	 edx, edx
  00040	42		 inc	 edx
  00041	85 d2		 test	 edx, edx
  00043	74 05		 je	 SHORT $LN8@WriteKeyst
$LN7@WriteKeyst:
  00045	b9 05 00 00 00	 mov	 ecx, 5
$LN8@WriteKeyst:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 134  : 		{OperateKeystream(KeystreamOperation(INPUT_NULL | static_cast<KeystreamOperationFlags>(IsAlignedOn(keystream, GetAlignment()))), keystream, NULLPTR, iterationCount);}

  0004a	ff 75 0c	 push	 DWORD PTR _iterationCount$[ebp]
  0004d	8b 07		 mov	 eax, DWORD PTR [edi]
  0004f	6a 00		 push	 0
  00051	53		 push	 ebx
  00052	51		 push	 ecx
  00053	8b cf		 mov	 ecx, edi
  00055	ff 50 1c	 call	 DWORD PTR [eax+28]
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?WriteKeystream@AdditiveCipherAbstractPolicy@CryptoPP@@UAEXPAEI@Z ENDP ; CryptoPP::AdditiveCipherAbstractPolicy::WriteKeystream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize, COMDAT
; _this$ = ecx

; 123  : 	virtual unsigned int GetOptimalBlockSize() const {return GetBytesPerIteration();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 08	 jmp	 DWORD PTR [eax+8]
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
;	COMDAT ??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ PROC	; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy, COMDAT
; _this$ = ecx

; 106  : 	virtual ~AdditiveCipherAbstractPolicy() {}

  00000	c2 00 00	 ret	 0
??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ ENDP	; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??_GStringSource@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStringSource@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1365 : 	virtual ~SourceTemplate() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 38   : 	virtual ~Filter() {}

  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00016	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001f	74 0b		 je	 SHORT $LN19@scalar
  00021	6a 38		 push	 56			; 00000038H
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN19@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_GStringSource@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 28
$T3 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_string$ = 8						; size = 4
_pumpAll$ = 12						; size = 1
_attachment$ = 16					; size = 4
??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z PROC ; CryptoPP::StringSource::StringSource, COMDAT
; _this$ = ecx

; 1419 : 	StringSource(const std::string &string, bool pumpAll, BufferedTransformation *attachment = NULLPTR)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 1420 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  0002c	ff 75 10	 push	 DWORD PTR _attachment$[ebp]
  0002f	e8 00 00 00 00	 call	 ??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7StringSource@CryptoPP@@6BWaitable@1@@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00048	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR $T2[ebp+16], -1
  0004f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00060	8b c8		 mov	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  00062	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00066	72 02		 jb	 SHORT $LN18@StringSour

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN18@StringSour:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 56   : 		Assign(reinterpret_cast<const byte *>(&string[0]), string.size(), deepCopy);

  0006a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 73   : 			m_data = data;

  0006d	89 4d cc	 mov	 DWORD PTR $T2[ebp+4], ecx

; 74   : 			m_size = size;

  00070	89 45 d0	 mov	 DWORD PTR $T2[ebp+8], eax

; 75   : 		}
; 76   : 		m_deepCopy = deepCopy;

  00073	c6 45 c8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1420 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  00077	6a 01		 push	 1
  00079	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  0007c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00080	50		 push	 eax
  00081	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
  00092	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00094	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1352 : 		IsolatedInitialize(parameters);

  00098	50		 push	 eax
  00099	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0009c	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
  000a2	75 0d		 jne	 SHORT $LN45@StringSour

; 1372 : 		{m_store.IsolatedInitialize(parameters);}

  000a4	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000a7	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  000aa	8b cf		 mov	 ecx, edi
  000ac	ff 52 20	 call	 DWORD PTR [edx+32]
  000af	eb 07		 jmp	 SHORT $LN44@StringSour
$LN45@StringSour:
  000b1	8b ce		 mov	 ecx, esi

; 1352 : 		IsolatedInitialize(parameters);

  000b3	ff d2		 call	 edx
  000b5	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
$LN44@StringSour:

; 1353 : 		if (pumpAll)

  000b8	80 7d 0c 00	 cmp	 BYTE PTR _pumpAll$[ebp], 0
  000bc	74 2a		 je	 SHORT $LN50@StringSour

; 1319 : 		{PumpAll2();}

  000be	8b 16		 mov	 edx, DWORD PTR [esi]
  000c0	8b ce		 mov	 ecx, esi
  000c2	6a 01		 push	 1
  000c4	8b 82 c8 00 00
	00		 mov	 eax, DWORD PTR [edx+200]
  000ca	3d 00 00 00 00	 cmp	 eax, OFFSET ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
  000cf	75 15		 jne	 SHORT $LN51@StringSour

; 1378 : 		{return m_store.TransferAllTo2(*AttachedTransformation(), DEFAULT_CHANNEL, blocking);}

  000d1	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  000d6	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
  000dc	50		 push	 eax
  000dd	8b cf		 mov	 ecx, edi
  000df	e8 00 00 00 00	 call	 ?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferAllTo2
  000e4	eb 02		 jmp	 SHORT $LN50@StringSour
$LN51@StringSour:

; 1319 : 		{PumpAll2();}

  000e6	ff d0		 call	 eax
$LN50@StringSour:
  000e8	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000eb	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000f0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000f7	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+16]
  000fa	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp+20]
  000fd	3b c1		 cmp	 eax, ecx
  000ff	8b 55 e0	 mov	 edx, DWORD PTR $T2[ebp+24]
  00102	8b fa		 mov	 edi, edx
  00104	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00107	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0010b	32 c0		 xor	 al, al
  0010d	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00115	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1420 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  00118	8b c6		 mov	 eax, esi
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$3:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp+12]
  0000b	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$1:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z$2:
  00018	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z ENDP ; CryptoPP::StringSource::StringSource
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 28
$T3 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_pumpAll$ = 16						; size = 1
_attachment$ = 20					; size = 4
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z PROC ; CryptoPP::StringSource::StringSource, COMDAT
; _this$ = ecx

; 1412 : 	StringSource(const byte *string, size_t length, bool pumpAll, BufferedTransformation *attachment = NULLPTR)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  0002c	ff 75 14	 push	 DWORD PTR _attachment$[ebp]
  0002f	e8 00 00 00 00	 call	 ??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7StringSource@CryptoPP@@6BWaitable@1@@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00048	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR $T2[ebp+16], -1
  0004f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+24], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 73   : 			m_data = data;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00060	89 45 cc	 mov	 DWORD PTR $T2[ebp+4], eax

; 74   : 			m_size = size;

  00063	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00066	89 45 d0	 mov	 DWORD PTR $T2[ebp+8], eax

; 75   : 		}
; 76   : 		m_deepCopy = deepCopy;

  00069	c6 45 c8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  0006d	6a 01		 push	 1
  0006f	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00072	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00076	50		 push	 eax
  00077	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1352 : 		IsolatedInitialize(parameters);

  0008e	50		 push	 eax
  0008f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00092	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
  00098	75 0d		 jne	 SHORT $LN38@StringSour

; 1372 : 		{m_store.IsolatedInitialize(parameters);}

  0009a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0009d	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  000a0	8b cf		 mov	 ecx, edi
  000a2	ff 52 20	 call	 DWORD PTR [edx+32]
  000a5	eb 07		 jmp	 SHORT $LN37@StringSour
$LN38@StringSour:
  000a7	8b ce		 mov	 ecx, esi

; 1352 : 		IsolatedInitialize(parameters);

  000a9	ff d2		 call	 edx
  000ab	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
$LN37@StringSour:

; 1353 : 		if (pumpAll)

  000ae	80 7d 10 00	 cmp	 BYTE PTR _pumpAll$[ebp], 0
  000b2	74 2a		 je	 SHORT $LN43@StringSour

; 1319 : 		{PumpAll2();}

  000b4	8b 16		 mov	 edx, DWORD PTR [esi]
  000b6	8b ce		 mov	 ecx, esi
  000b8	6a 01		 push	 1
  000ba	8b 82 c8 00 00
	00		 mov	 eax, DWORD PTR [edx+200]
  000c0	3d 00 00 00 00	 cmp	 eax, OFFSET ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
  000c5	75 15		 jne	 SHORT $LN44@StringSour

; 1378 : 		{return m_store.TransferAllTo2(*AttachedTransformation(), DEFAULT_CHANNEL, blocking);}

  000c7	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  000cc	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
  000d2	50		 push	 eax
  000d3	8b cf		 mov	 ecx, edi
  000d5	e8 00 00 00 00	 call	 ?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferAllTo2
  000da	eb 02		 jmp	 SHORT $LN43@StringSour
$LN44@StringSour:

; 1319 : 		{PumpAll2();}

  000dc	ff d0		 call	 eax
$LN43@StringSour:
  000de	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000e1	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000e6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000ed	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+16]
  000f0	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp+20]
  000f3	3b c1		 cmp	 eax, ecx
  000f5	8b 55 e0	 mov	 edx, DWORD PTR $T2[ebp+24]
  000f8	8b fa		 mov	 edi, edx
  000fa	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  000fd	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00101	32 c0		 xor	 al, al
  00103	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0010b	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  0010e	8b c6		 mov	 eax, esi
  00110	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00113	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011a	59		 pop	 ecx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$3:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp+12]
  0000b	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2:
  00018	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ENDP ; CryptoPP::StringSource::StringSource
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1365 : 	virtual ~SourceTemplate() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 38   : 	virtual ~Filter() {}

  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00016	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001f	74 0b		 je	 SHORT $LN16@scalar
  00021	6a 38		 push	 56			; 00000038H
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN16@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1384 : 		{return m_store.GetAutoSignalPropagation();}

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 60 3c	 jmp	 DWORD PTR [eax+60]
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1382 : 		{m_store.SetAutoSignalPropagation(propagation);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	83 c1 18	 add	 ecx, 24			; 00000018H
  00009	5d		 pop	 ebp
  0000a	ff 60 38	 jmp	 DWORD PTR [eax+56]
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted, COMDAT
; _this$ = ecx

; 1380 : 		{return !m_store.AnyRetrievable() && !m_store.AnyMessages();}

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	56		 push	 esi
  00004	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
  00007	8b ce		 mov	 ecx, esi
  00009	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0000c	ff d0		 call	 eax
  0000e	84 c0		 test	 al, al
  00010	75 11		 jne	 SHORT $LN3@SourceExha
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8b ce		 mov	 ecx, esi
  00016	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  00019	ff d0		 call	 eax
  0001b	84 c0		 test	 al, al
  0001d	75 04		 jne	 SHORT $LN3@SourceExha
  0001f	b0 01		 mov	 al, 1
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
$LN3@SourceExha:
  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
_TEXT	SEGMENT
_blocking$ = 8						; size = 1
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2, COMDAT
; _this$ = ecx

; 1378 : 		{return m_store.TransferAllTo2(*AttachedTransformation(), DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR _blocking$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  00016	50		 push	 eax
  00017	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001a	e8 00 00 00 00	 call	 ?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferAllTo2
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
_TEXT	SEGMENT
_messageCount$ = 8					; size = 4
_blocking$ = 12						; size = 1
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2, COMDAT
; _this$ = ecx

; 1376 : 		{return m_store.TransferMessagesTo2(*AttachedTransformation(), messageCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000e	ff 75 08	 push	 DWORD PTR _messageCount$[ebp]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  00019	50		 push	 eax
  0001a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001d	e8 00 00 00 00	 call	 ?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferMessagesTo2
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
_TEXT	SEGMENT
_byteCount$ = 8						; size = 4
_blocking$ = 12						; size = 1
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2, COMDAT
; _this$ = ecx

; 1374 : 		{return m_store.TransferTo2(*AttachedTransformation(), byteCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  0000a	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0000d	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
  00010	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  00015	ff 75 08	 push	 DWORD PTR _byteCount$[ebp]
  00018	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  0001e	50		 push	 eax
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 97 80 00 00
	00		 call	 DWORD PTR [edi+128]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize, COMDAT
; _this$ = ecx

; 1372 : 		{m_store.IsolatedInitialize(parameters);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	83 c1 18	 add	 ecx, 24			; 00000018H
  00009	5d		 pop	 ebp
  0000a	ff 60 20	 jmp	 DWORD PTR [eax+32]
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 28
$T3 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_attachment$ = 8					; size = 4
??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>, COMDAT
; _this$ = ecx

; 1369 : 	SourceTemplate<T>(BufferedTransformation *attachment)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	6a 00		 push	 0
  0002f	e8 00 00 00 00	 call	 ??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::Filter::Filter

; 1289 : 		{Source::Detach(attachment);}

  00034	ff 75 08	 push	 DWORD PTR _attachment$[ebp]
  00037	8b cb		 mov	 ecx, ebx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	e8 00 00 00 00	 call	 ?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z ; CryptoPP::Filter::Detach
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00045	6a 00		 push	 0
  00047	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1370 : 		: Source(attachment) {}

  0004a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00051	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00057	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  0005e	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h

; 294  : 	AutoSignaling(int propagation=-1) : m_autoSignalPropagation(propagation) {}

  00063	c7 43 24 ff ff
	ff ff		 mov	 DWORD PTR [ebx+36], -1

; 310  : 	Store() : m_messageEnd(false) {}

  0006a	c6 43 28 00	 mov	 BYTE PTR [ebx+40], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1200 : 	StringStore(const char *string = NULLPTR)

  0006e	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], OFFSET ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
  00075	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], OFFSET ??_7StringStore@CryptoPP@@6BWaitable@1@@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0007c	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR $T2[ebp+16], -1
  00083	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
  0008a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+24], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 73   : 			m_data = data;

  00091	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 74   : 			m_size = size;

  00098	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0

; 75   : 		}
; 76   : 		m_deepCopy = deepCopy;

  0009f	c6 45 c8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1201 : 		{StoreInitialize(MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  000a3	6a 01		 push	 1
  000a5	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  000a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ac	50		 push	 eax
  000ad	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  000bb	83 c4 10	 add	 esp, 16			; 00000010H
  000be	50		 push	 eax
  000bf	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  000c2	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c6	e8 00 00 00 00	 call	 ?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z ; CryptoPP::StringStore::StoreInitialize
  000cb	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000ce	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000d3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000da	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+16]
  000dd	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp+20]
  000e0	3b c1		 cmp	 eax, ecx
  000e2	8b 55 e0	 mov	 edx, DWORD PTR $T2[ebp+24]
  000e5	8b fa		 mov	 edi, edx
  000e7	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  000ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000ee	32 c0		 xor	 al, al
  000f0	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  000f8	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1370 : 		: Source(attachment) {}

  000fb	8b c3		 mov	 eax, ebx
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Source@CryptoPP@@UAE@XZ ; CryptoPP::Source::~Source
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$5:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp+12]
  00013	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$3:
  00018	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$4:
  00020	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>, COMDAT
; _this$ = ecx

; 1365 : 	virtual ~SourceTemplate() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  0000d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00010	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1Source@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Source@CryptoPP@@UAE@XZ PROC				; CryptoPP::Source::~Source, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1Source@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Source::~Source
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_messageEnd$ = 12					; size = 4
_blocking$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 164  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelMes:
  00026	cc		 int	 3
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_inString$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2, COMDAT
; _this$ = ecx

; 162  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelPut:
  00026	cc		 int	 3
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 160  : 		{CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@IsolatedMe:
  00026	cc		 int	 3
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush, COMDAT
; _this$ = ecx

; 158  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2, COMDAT
; _this$ = ecx

; 152  : 		{CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Put2:
  00026	cc		 int	 3
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
;	COMDAT ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
_TEXT	SEGMENT
$T2 = -32						; size = 12
$T3 = -20						; size = 4
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_p$5 = 20						; size = 4
_throwIfNotUsed$ = 20					; size = 1
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z PROC ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>, COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  00028	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  0002b	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  00030	8b f0		 mov	 esi, eax
  00032	89 75 f0	 mov	 DWORD PTR $T4[ebp], esi

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  00035	6a 2c		 push	 44			; 0000002cH

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	8b f8		 mov	 edi, eax
  00045	83 c4 04	 add	 esp, 4
  00048	89 7d ec	 mov	 DWORD PTR $T3[ebp], edi
  0004b	8a 5d 14	 mov	 bl, BYTE PTR _throwIfNotUsed$[ebp]
  0004e	85 ff		 test	 edi, edi
  00050	74 2b		 je	 SHORT $LN8@MakeParame

; 344  : 		: m_name(name), m_throwIfNotUsed(throwIfNotUsed), m_used(false) {}

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]
  00055	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00058	88 5f 08	 mov	 BYTE PTR [edi+8], bl
  0005b	c6 47 09 00	 mov	 BYTE PTR [edi+9], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  0005f	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 374  : 		: AlgorithmParametersBase(name, throwIfNotUsed), m_value(value)

  00066	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00069	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0006c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 375  : 	{

  00070	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
  00076	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  0007b	eb 02		 jmp	 SHORT $LN9@MakeParame
$LN8@MakeParame:
  0007d	33 ff		 xor	 edi, edi
$LN9@MakeParame:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  0007f	89 7d 14	 mov	 DWORD PTR _p$5[ebp], edi

; 54   : 		T *old_p = m_p;

  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 463  : 		p->m_next.reset(m_next.release());

  00085	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00088	50		 push	 eax
  00089	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0008d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 463  : 		p->m_next.reset(m_next.release());

  00094	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 464  : 		m_next.reset(p.release());

  00099	57		 push	 edi
  0009a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0009d	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _p$5[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 464  : 		m_next.reset(p.release());

  000a4	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 465  : 		m_defaultThrowIfNotUsed = throwIfNotUsed;

  000a9	8b 75 f0	 mov	 esi, DWORD PTR $T4[ebp]

; 466  : 		return *this;

  000ac	8d 4d 14	 lea	 ecx, DWORD PTR _p$5[ebp]
  000af	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b3	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b6	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  000bb	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  000c4	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000c7	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 505  : }

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$2:
  00008	6a 2c		 push	 44			; 0000002cH
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$4:
  00017	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$3:
  0001f	8d 4d 14	 lea	 ecx, DWORD PTR _p$5[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  00027	cc		 int	 3
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
__ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z:
  0002c	90		 npad	 1
  0002d	90		 npad	 1
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ENDP ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
; Function compile flags: /Ogtp
;	COMDAT ??_GStringStore@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStringStore@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringStore::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN4@scalar
  0000c	6a 20		 push	 32			; 00000020H
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_GStringStore@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringStore::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??_GArraySink@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GArraySink@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::ArraySink::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1139 : 	virtual ~ArraySink() {}

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArraySink@CryptoPP@@6BAlgorithm@1@@
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7ArraySink@CryptoPP@@6BWaitable@1@@
  00017	74 0b		 je	 SHORT $LN7@scalar
  00019	6a 20		 push	 32			; 00000020H
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GArraySink@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::ArraySink::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1ArraySink@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ArraySink@CryptoPP@@UAE@XZ PROC			; CryptoPP::ArraySink::~ArraySink, COMDAT
; _this$ = ecx

; 1139 : 	virtual ~ArraySink() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArraySink@CryptoPP@@6BAlgorithm@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7ArraySink@CryptoPP@@6BWaitable@1@@
  0000d	c3		 ret	 0
??1ArraySink@CryptoPP@@UAE@XZ ENDP			; CryptoPP::ArraySink::~ArraySink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1067 : 	virtual ~StringSinkTemplate() {}

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00017	74 0b		 je	 SHORT $LN7@scalar
  00019	6a 10		 push	 16			; 00000010H
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2, COMDAT
; _this$ = ecx

; 1078 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 1079 : 		CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking);
; 1080 : 		if (length > 0)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _length$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 51		 je	 SHORT $LN42@Put2

; 1081 : 		{
; 1082 : 			typename T::size_type size = m_output->size();

  0000e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 1083 : 			if (length < size && size + length > m_output->capacity())

  00017	3b fa		 cmp	 edi, edx
  00019	73 14		 jae	 SHORT $LN3@Put2
  0001b	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  0001e	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00021	76 0c		 jbe	 SHORT $LN3@Put2

; 1084 : 				m_output->reserve(2*size);

  00023	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
  0002c	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
$LN3@Put2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]

; 2135 :         value_type* _Result = _Bx._Buf;

  00032	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00034	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00037	72 02		 jb	 SHORT $LN41@Put2

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
$LN41@Put2:

; 3494 :         return iterator(

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ; std::_Refancy<char *,0>
  00041	03 46 10	 add	 eax, DWORD PTR [esi+16]
  00044	83 c4 04	 add	 esp, 4

; 2135 :         value_type* _Result = _Bx._Buf;

  00047	8b ce		 mov	 ecx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00049	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0004c	72 02		 jb	 SHORT $LN19@Put2

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN19@Put2:

; 3175 :             insert(_Off, _UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00050	57		 push	 edi
  00051	ff 75 08	 push	 DWORD PTR _inString$[ebp]
  00054	2b c1		 sub	 eax, ecx
  00056	8b ce		 mov	 ecx, esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1087 : 		return 0;

  0005e	5e		 pop	 esi
$LN42@Put2:

; 1088 : 	}

  0005f	5f		 pop	 edi
  00060	33 c0		 xor	 eax, eax
  00062	5b		 pop	 ebx
  00063	5d		 pop	 ebp
  00064	c2 10 00	 ret	 16			; 00000010H
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize, COMDAT
; _this$ = ecx

; 1075 : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR _parameters$[ebp]
  0002c	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 352  : 		return GetVoidValue(name, typeid(T), &value);

  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NDOICOBI@OutputStringPointer@
  0003a	8b 16		 mov	 edx, DWORD PTR [esi]
  0003c	8b ce		 mov	 ecx, esi
  0003e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00041	ff d0		 call	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1075 : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00043	84 c0		 test	 al, al
  00045	74 1c		 je	 SHORT $LN10@IsolatedIn
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN10@IsolatedIn:
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
  00068	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00070	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	50		 push	 eax
  0007b	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  0007e	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  00083	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00088	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@IsolatedIn:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1067 : 	virtual ~StringSinkTemplate() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  0000d	c3		 ret	 0
??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>, COMDAT
; _this$ = ecx

; 68   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN3@member_ptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN3@member_ptr:
  0000c	c3		 ret	 0
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd, COMDAT
; _this$ = ecx

; 83   : 	virtual bool ShouldPropagateMessageSeriesEnd() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageEnd, COMDAT
; _this$ = ecx

; 82   : 	virtual bool ShouldPropagateMessageEnd() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ?Attachable@Filter@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?Attachable@Filter@CryptoPP@@UAE_NXZ PROC		; CryptoPP::Filter::Attachable, COMDAT
; _this$ = ecx

; 51   : 	bool Attachable() {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?Attachable@Filter@CryptoPP@@UAE_NXZ ENDP		; CryptoPP::Filter::Attachable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
;	COMDAT ??1Filter@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Filter@CryptoPP@@UAE@XZ PROC				; CryptoPP::Filter::~Filter, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1Filter@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Filter::~Filter
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1AlgorithmParameters@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1AlgorithmParameters@CryptoPP@@UAE@XZ PROC		; CryptoPP::AlgorithmParameters::~AlgorithmParameters, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??1AlgorithmParameters@CryptoPP@@UAE@XZ ENDP		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
;	COMDAT ??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00026	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00029	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002f	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00031	1b c9		 sbb	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0003a	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	32 c0		 xor	 al, al
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00040	8b 4c 31 24	 mov	 ecx, DWORD PTR [ecx+esi+36]
  00044	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00046	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0004b	83 c4 04	 add	 esp, 4

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  0005c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00060	74 0b		 je	 SHORT $LN37@scalar
  00062	6a 2c		 push	 44			; 0000002cH
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006a	83 c4 08	 add	 esp, 8
$LN37@scalar:
  0006d	8b c6		 mov	 eax, esi
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
  00082	cc		 int	 3
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
;	COMDAT ?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_buffer$ = 8						; size = 4
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 397  : 		AlgorithmParametersTemplate<T>* p = new(buffer) AlgorithmParametersTemplate<T>(*this);

  00026	8b 7d 08	 mov	 edi, DWORD PTR _buffer$[ebp]

; 333  : 	{

  00029	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]

; 397  : 		AlgorithmParametersTemplate<T>* p = new(buffer) AlgorithmParametersTemplate<T>(*this);

  0002c	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi

; 333  : 	{

  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003b	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  0003f	88 47 08	 mov	 BYTE PTR [edi+8], al
  00042	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  00046	88 47 09	 mov	 BYTE PTR [edi+9], al
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  00049	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 54   : 		T *old_p = m_p;

  0004f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 334  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  00052	50		 push	 eax
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0005a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 334  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  00061	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 335  : 		x.m_used = true;

  00066	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
  0006a	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00074	50		 push	 eax
  00075	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00078	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
  0007e	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z

; 398  : 		CRYPTOPP_UNUSED(p);	// silence warning
; 399  : 	}

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$2:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$0:
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
;	COMDAT ?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_valueType$ = 12					; size = 4
_pValue$ = 16						; size = 4
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue, COMDAT
; _this$ = ecx

; 379  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 83   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00006	68 04 00 00 00	 push	 OFFSET ??_R0H@8+4
  0000b	68 04 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8+4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 379  : 	{

  00010	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 83   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00012	e8 00 00 00 00	 call	 ___std_type_info_compare
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  00017	8b 7d 10	 mov	 edi, DWORD PTR _pValue$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 83   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  0001a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  0001d	8b 5d 0c	 mov	 ebx, DWORD PTR _valueType$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 83   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00020	85 c0		 test	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  00022	75 16		 jne	 SHORT $LN3@AssignValu
  00024	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00027	50		 push	 eax
  00028	57		 push	 edi
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ?AssignIntToInteger@CryptoPP@@YA_NABVtype_info@@PAXPBX@Z ; CryptoPP::AssignIntToInteger
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	84 c0		 test	 al, al
  00034	0f 85 a0 00 00
	00		 jne	 $LN2@AssignValu
$LN3@AssignValu:

; 383  : #endif
; 384  : 		{
; 385  : 			NameValuePairs::ThrowIfTypeMismatch(name, typeid(T), valueType);

  0003a	53		 push	 ebx
  0003b	68 00 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
  00040	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00043	e8 00 00 00 00	 call	 ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
  00048	8a 46 10	 mov	 al, BYTE PTR [esi+16]
  0004b	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
  0004e	88 07		 mov	 BYTE PTR [edi], al
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0005f	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 871  : 		if (this != &t)

  00062	3b f3		 cmp	 esi, ebx
  00064	74 6d		 je	 SHORT $LN25@AssignValu

; 872  : 		{
; 873  : 			New(t.m_size);

  00066	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 254  : 		return StandardReallocate(*this, oldPtr, oldSize, newSize, preserve);

  00069	6a 00		 push	 0
  0006b	57		 push	 edi
  0006c	ff 76 08	 push	 DWORD PTR [esi+8]
  0006f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00078	83 c4 14	 add	 esp, 20			; 00000014H

; 967  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  0007b	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 968  : 		m_size = newSize;

  0007e	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 969  : 		m_mark = ELEMS_MAX;

  00081	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1

; 874  : 			if (m_ptr && t.m_ptr)

  00088	85 c0		 test	 eax, eax
  0008a	74 47		 je	 SHORT $LN25@AssignValu
  0008c	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0008f	85 d2		 test	 edx, edx
  00091	74 40		 je	 SHORT $LN25@AssignValu

; 875  : 				{memcpy_s(m_ptr, m_size*sizeof(T), t, t.m_size*sizeof(T));}

  00093	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00096	85 c9		 test	 ecx, ecx
  00098	74 39		 je	 SHORT $LN25@AssignValu

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);
; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0009a	3b f9		 cmp	 edi, ecx
  0009c	72 19		 jb	 SHORT $LN23@AssignValu

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  0009e	51		 push	 ecx
  0009f	52		 push	 edx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _memcpy
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 877  : 		m_mark = ELEMS_MAX;

  000a9	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  000b0	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 388  : 	}

  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
$LN23@AssignValu:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 50   :             memset(_Destination, 0, _DestinationSize);

  000b7	57		 push	 edi
  000b8	6a 00		 push	 0
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _memset
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000c3	e8 00 00 00 00	 call	 __errno
  000c8	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  000ce	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN25@AssignValu:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 877  : 		m_mark = ELEMS_MAX;

  000d3	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
$LN2@AssignValu:
  000da	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 388  : 	}

  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
;	COMDAT ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset, COMDAT
; _this$ = ecx

; 69   : template <class T> void member_ptr<T>::reset(T *p) {delete m_p; m_p = p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 06		 je	 SHORT $LN5@reset
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	6a 01		 push	 1
  00010	ff 10		 call	 DWORD PTR [eax]
$LN5@reset:
  00012	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>, COMDAT
; _this$ = ecx

; 68   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN3@member_ptr
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 10		 call	 DWORD PTR [eax]
$LN3@member_ptr:
  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
;	COMDAT ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -64					; size = 4
_this$ = -60						; size = 4
$T2 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 c4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	89 75 c0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 311  : 
; 312  : #if defined(CRYPTOPP_CXX17_EXCEPTIONS)
; 313  : 		if (std::uncaught_exceptions() == 0)

  0003e	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00043	85 c0		 test	 eax, eax
  00045	75 0a		 jne	 SHORT $LN3@AlgorithmP

; 314  : #elif defined(CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE)
; 315  : 		if (std::uncaught_exception() == false)
; 316  : #else
; 317  : 		try
; 318  : #endif
; 319  : 		{
; 320  : 			if (m_throwIfNotUsed && !m_used)

  00047	38 46 08	 cmp	 BYTE PTR [esi+8], al
  0004a	74 05		 je	 SHORT $LN3@AlgorithmP
  0004c	38 46 09	 cmp	 BYTE PTR [esi+9], al
  0004f	74 22		 je	 SHORT $LN9@AlgorithmP
$LN3@AlgorithmP:

; 322  : 		}
; 323  : #if !defined(CRYPTOPP_CXX17_EXCEPTIONS) && !defined(CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE)
; 324  : 		catch(const Exception&)
; 325  : 		{
; 326  : 		}
; 327  : #endif
; 328  : 	}

  00051	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00054	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN9@AlgorithmP:

; 321  : 				throw ParameterNotUsed(m_name);

  00073	ff 76 04	 push	 DWORD PTR [esi+4]
  00076	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00079	e8 00 00 00 00	 call	 ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
  0007e	68 00 00 00 00	 push	 OFFSET __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
  00083	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@AlgorithmP:
  0008c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ$0:
  00000	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN13@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN13@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN21@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN21@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN9@ParameterN

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN9@ParameterN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
_TEXT	SEGMENT
_this$GSCopy$ = -96					; size = 4
__New_ptr$2 = -92					; size = 4
_this$ = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d a4	 mov	 DWORD PTR _this$[ebp], edi
  0002f	8b 75 08	 mov	 esi, DWORD PTR _name$[ebp]
  00032	89 7d a0	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00035	6a 30		 push	 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00037	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00045	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00049	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0004e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00055	8b c8		 mov	 ecx, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00057	c7 45 e8 24 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 36 ; 00000024H

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0005e	c7 45 ec 2f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 47 ; 0000002fH
  00065	89 4d a4	 mov	 DWORD PTR __New_ptr$2[ebp], ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00068	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0006b	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@+16
  00072	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00076	a1 20 00 00 00	 mov	 eax, DWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@+32
  0007b	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0007e	8d 45 a4	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  00081	50		 push	 eax
  00082	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00085	c6 41 24 00	 mov	 BYTE PTR [ecx+36], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  0008f	56		 push	 esi
  00090	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009a	50		 push	 eax
  0009b	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IAABKFFP@?$CC?5not?5used@
  000a9	50		 push	 eax
  000aa	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000b7	83 c4 24	 add	 esp, 36			; 00000024H
  000ba	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  000bd	66 0f d6 47 04	 movq	 QWORD PTR [edi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000c2	50		 push	 eax
  000c3	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  000c6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ca	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  000d0	c7 47 0c 06 00
	00 00		 mov	 DWORD PTR [edi+12], 6
  000d7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000dc	8b 45 d4	 mov	 eax, DWORD PTR $T4[ebp+20]
  000df	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000e2	72 0d		 jb	 SHORT $LN64@ParameterN

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000e4	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e5	50		 push	 eax
  000e6	ff 75 c0	 push	 DWORD PTR $T4[ebp]
  000e9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000ee	83 c4 08	 add	 esp, 8
$LN64@ParameterN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000f1	8b 45 bc	 mov	 eax, DWORD PTR $T3[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000f4	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000fb	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00102	c6 45 c0 00	 mov	 BYTE PTR $T4[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00106	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00109	72 0d		 jb	 SHORT $LN74@ParameterN

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0010b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	50		 push	 eax
  0010d	ff 75 a8	 push	 DWORD PTR $T3[ebp]
  00110	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00115	83 c4 08	 add	 esp, 8
$LN74@ParameterN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00118	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0011b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00122	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00129	c6 45 a8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0012d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00130	72 0d		 jb	 SHORT $LN90@ParameterN

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00132	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00133	51		 push	 ecx
  00134	ff 75 d8	 push	 DWORD PTR $T5[ebp]
  00137	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0013c	83 c4 08	 add	 esp, 8
$LN90@ParameterN:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  0013f	8b c7		 mov	 eax, edi
  00141	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  00147	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00151	59		 pop	 ecx
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00157	33 cd		 xor	 ecx, ebp
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2:
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$4:
  00018	8b 4d a0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	8a 07		 mov	 al, BYTE PTR [edi]
  00010	88 06		 mov	 BYTE PTR [esi], al
  00012	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00015	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00021	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00024	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00027	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0002a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 203  : 		if (size == 0)

  0002d	85 c0		 test	 eax, eax
  0002f	74 09		 je	 SHORT $LN7@ConstByteA
$LN8@ConstByteA:

; 204  : 			return NULLPTR;
; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));
; 210  : #endif
; 211  : 
; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00037	83 c4 04	 add	 esp, 4
$LN7@ConstByteA:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0003a	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  0003d	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00041	74 5f		 je	 SHORT $LN20@ConstByteA
  00043	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00046	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h

; 42   :         if (_SourceSize == 0)

  00049	85 c9		 test	 ecx, ecx
  0004b	74 55		 je	 SHORT $LN20@ConstByteA

; 43   :         {
; 44   :             return 0;
; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0004d	85 c0		 test	 eax, eax
  0004f	75 1a		 jne	 SHORT $LN13@ConstByteA
  00051	e8 00 00 00 00	 call	 __errno
  00056	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0005c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00061	5f		 pop	 edi
  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN13@ConstByteA:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0006b	3b d1		 cmp	 edx, ecx
  0006d	72 17		 jb	 SHORT $LN15@ConstByteA

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;
; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  0006f	51		 push	 ecx
  00070	ff 77 18	 push	 DWORD PTR [edi+24]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _memcpy
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	8b c6		 mov	 eax, esi
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
$LN15@ConstByteA:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00086	52		 push	 edx
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00092	e8 00 00 00 00	 call	 __errno
  00097	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  0009d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@ConstByteA:
  000a2	5f		 pop	 edi
  000a3	8b c6		 mov	 eax, esi
  000a5	5e		 pop	 esi
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
;	COMDAT ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ PROC	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00023	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	32 c0		 xor	 al, al
  0003d	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ ENDP	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
  00034	32 c0		 xor	 al, al
  00036	f3 aa		 rep stosb
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00038	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0003d	83 c4 04	 add	 esp, 4

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 3345 :           if (buckets_) {

  00007	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0000a	85 d2		 test	 edx, edx
  0000c	0f 84 bc 00 00
	00		 je	 $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00012	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00015	8b c8		 mov	 ecx, eax

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00017	56		 push	 esi
  00018	57		 push	 edi

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00019	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0001c	8b fa		 mov	 edi, edx
  0001e	8b 34 82	 mov	 esi, DWORD PTR [edx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00021	85 f6		 test	 esi, esi
  00023	74 72		 je	 SHORT $LN5@table
$LL4@table:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00025	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3357 :               node_pointer next = next_node(n);

  00028	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0002a	85 c9		 test	 ecx, ecx
  0002c	74 24		 je	 SHORT $LN41@table

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00031	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0003a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00041	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00044	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 1699 :             _Myend   = pointer();

  0004b	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
$LN41@table:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00052	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00055	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00058	72 0d		 jb	 SHORT $LN49@table

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0005a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005b	50		 push	 eax
  0005c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0005f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00064	83 c4 08	 add	 esp, 8
$LN49@table:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00067	6a 30		 push	 48			; 00000030H
  00069	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0006a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00071	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00078	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0007c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00081	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00084	8b f7		 mov	 esi, edi
  00086	85 ff		 test	 edi, edi
  00088	75 9b		 jne	 SHORT $LL4@table
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	8b c8		 mov	 ecx, eax
  0008f	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00092	8b fa		 mov	 edi, edx
  00094	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN5@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00097	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0009a	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  0009d	3b f9		 cmp	 edi, ecx
  0009f	0f 44 45 fc	 cmove	 eax, DWORD PTR $T1[ebp]
  000a3	0f 44 d7	 cmove	 edx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  000a6	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  000ad	50		 push	 eax
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000b4	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  000b7	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 3364 :             max_load_ = 0;

  000be	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 3365 :             size_ = 0;

  000c5	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
$LN6@table:
  000ce	5b		 pop	 ebx

; 3333 :         ~table() { delete_buckets(); }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00007	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	74 65		 je	 SHORT $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00013	8b da		 mov	 ebx, edx
  00015	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN52@table
  0001c	0f 1f 40 00	 npad	 4
$LL4@table:

; 3357 :               node_pointer next = next_node(n);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00022	6a 2c		 push	 44			; 0000002cH
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002d	8b c6		 mov	 eax, esi
  0002f	85 f6		 test	 esi, esi
  00031	75 ed		 jne	 SHORT $LL4@table
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b da		 mov	 ebx, edx
  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN52@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003b	8b c6		 mov	 eax, esi
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00040	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00043	3b d9		 cmp	 ebx, ecx
  00045	0f 44 f0	 cmove	 esi, eax
  00048	0f 44 d3	 cmove	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004b	8d 04 b5 04 00
	00 00		 lea	 eax, DWORD PTR [esi*4+4]
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00059	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00063	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  0006a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
$LN6@table:
  00073	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush, COMDAT
; _this$ = ecx

; 102  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
_begin$ = 12						; size = 4
_end$ = 16						; size = 8
_channel$ = 24						; size = 4
_blocking$ = 28						; size = 1
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::CopyRangeTo2, COMDAT
; _this$ = ecx

; 343  : 		{CRYPTOPP_UNUSED(target); CRYPTOPP_UNUSED(begin); CRYPTOPP_UNUSED(end); CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(blocking); return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c2 18 00	 ret	 24			; 00000018H
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::CopyRangeTo2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
_transferBytes$ = 12					; size = 4
_channel$ = 16						; size = 4
_blocking$ = 20						; size = 1
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::TransferTo2, COMDAT
; _this$ = ecx

; 341  : 		{CRYPTOPP_UNUSED(target); CRYPTOPP_UNUSED(transferBytes); CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(blocking); transferBytes = 0; return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _transferBytes$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00013	33 c0		 xor	 eax, eax
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::TransferTo2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?NumberOfMessages@Store@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessages@Store@CryptoPP@@UBEIXZ PROC		; CryptoPP::Store::NumberOfMessages, COMDAT
; _this$ = ecx

; 318  : 	unsigned int NumberOfMessages() const {return m_messageEnd ? 0 : 1;}

  00000	33 c0		 xor	 eax, eax
  00002	38 41 10	 cmp	 BYTE PTR [ecx+16], al
  00005	0f 94 c0	 sete	 al
  00008	c3		 ret	 0
?NumberOfMessages@Store@CryptoPP@@UBEIXZ ENDP		; CryptoPP::Store::NumberOfMessages
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_parameters$ = 8					; size = 4
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::Store::IsolatedInitialize, COMDAT
; _this$ = ecx

; 313  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 		m_messageEnd = false;
; 315  : 		StoreInitialize(parameters);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 316  : 	}

  00009	5d		 pop	 ebp

; 314  : 		m_messageEnd = false;
; 315  : 		StoreInitialize(parameters);

  0000a	ff a0 b4 00 00
	00		 jmp	 DWORD PTR [eax+180]
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::Store::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 299  : 		{return m_autoSignalPropagation;}

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 297  : 		{m_autoSignalPropagation = propagation;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _propagation$[ebp]
  00006	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_messageEnd$ = 12					; size = 4
_blocking$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 164  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelMes:
  00026	cc		 int	 3
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_inString$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2, COMDAT
; _this$ = ecx

; 162  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelPut:
  00026	cc		 int	 3
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 160  : 		{CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@IsolatedMe:
  00026	cc		 int	 3
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush, COMDAT
; _this$ = ecx

; 158  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2, COMDAT
; _this$ = ecx

; 152  : 		{CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Put2:
  00026	cc		 int	 3
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newAttachment$ = 8					; size = 4
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z PROC ; CryptoPP::BufferedTransformation::Detach, COMDAT
; _this$ = ecx

; 2258 : 		virtual void Detach(BufferedTransformation *newAttachment = NULLPTR) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2259 : 			CRYPTOPP_UNUSED(newAttachment); CRYPTOPP_ASSERT(!Attachable());
; 2260 : 			throw NotImplemented("BufferedTransformation: this object is not attachable");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Detach:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ENDP ; CryptoPP::BufferedTransformation::Detach
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
_TEXT	SEGMENT
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 2250 : 			{return const_cast<BufferedTransformation *>(this)->AttachedTransformation();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff a0 a8 00 00
	00		 jmp	 DWORD PTR [eax+168]
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
_TEXT	SEGMENT
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 2243 : 		virtual BufferedTransformation *AttachedTransformation() {CRYPTOPP_ASSERT(!Attachable()); return NULLPTR;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::Attachable, COMDAT
; _this$ = ecx

; 2237 : 		virtual bool Attachable() {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::Attachable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessageSeries, COMDAT
; _this$ = ecx

; 2023 : 		virtual unsigned int NumberOfMessageSeries() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries, COMDAT
; _this$ = ecx

; 2020 : 		virtual unsigned int NumberOfMessagesInThisSeries() const {return NumberOfMessages();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 60	 jmp	 DWORD PTR [eax+96]
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::GetNextMessageSeries, COMDAT
; _this$ = ecx

; 2017 : 		virtual bool GetNextMessageSeries() {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::GetNextMessageSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ PROC ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1818 : 		virtual int GetAutoSignalPropagation() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ENDP ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z PROC ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1813 : 			{CRYPTOPP_UNUSED(propagation);}

  00000	c2 04 00	 ret	 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 1770 : 			{CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
_TEXT	SEGMENT
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z PROC ; CryptoPP::BufferedTransformation::PutModifiable2, COMDAT
; _this$ = ecx

; 1718 : 			{return Put2(inString, length, messageEnd, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	5d		 pop	 ebp
  00006	ff 60 18	 jmp	 DWORD PTR [eax+24]
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ENDP ; CryptoPP::BufferedTransformation::PutModifiable2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BufferedTransformation::CanModifyInput, COMDAT
; _this$ = ecx

; 1666 : 			{return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BufferedTransformation::CanModifyInput
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z PROC ; CryptoPP::BufferedTransformation::CreatePutSpace, COMDAT
; _this$ = ecx

; 1660 : 			{size=0; return NULLPTR;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ENDP ; CryptoPP::BufferedTransformation::CreatePutSpace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1BufferedTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1BufferedTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::BufferedTransformation::~BufferedTransformation, COMDAT
; _this$ = ecx

; 1601 : 	virtual ~BufferedTransformation() {}

  00000	c2 00 00	 ret	 0
??1BufferedTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::BufferedTransformation::~BufferedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Waitable@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Waitable@CryptoPP@@UAE@XZ PROC			; CryptoPP::Waitable::~Waitable, COMDAT
; _this$ = ecx

; 1552 : 	virtual ~Waitable() {}

  00000	c2 00 00	 ret	 0
??1Waitable@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Waitable::~Waitable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ PROC ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy, COMDAT
; _this$ = ecx

; 1404 : 	virtual bool CanIncorporateEntropy() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_length$ = 12						; size = 4
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z PROC ; CryptoPP::RandomNumberGenerator::IncorporateEntropy, COMDAT
; _this$ = ecx

; 1397 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1398 : 		CRYPTOPP_UNUSED(input); CRYPTOPP_UNUSED(length);
; 1399 : 		throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Incorporat:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ENDP ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1RandomNumberGenerator@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1RandomNumberGenerator@CryptoPP@@UAE@XZ PROC		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator, COMDAT
; _this$ = ecx

; 1386 : 	virtual ~RandomNumberGenerator() {}

  00000	c2 00 00	 ret	 0
??1RandomNumberGenerator@CryptoPP@@UAE@XZ ENDP		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::SymmetricCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 1261 : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::SymmetricCipher::GetAlgorithm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
_digestLength$ = 12					; size = 4
_input$ = 16						; size = 4
_length$ = 20						; size = 4
?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z PROC ; CryptoPP::HashTransformation::VerifyTruncatedDigest, COMDAT
; _this$ = ecx

; 1238 : 		{Update(input, length); return TruncatedVerify(digest, digestLength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 14	 push	 DWORD PTR _length$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 10	 push	 DWORD PTR _input$[ebp]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	ff 50 10	 call	 DWORD PTR [eax+16]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	8b ce		 mov	 ecx, esi
  00015	ff 75 0c	 push	 DWORD PTR _digestLength$[ebp]
  00018	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  0001b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0001e	ff d0		 call	 eax
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 10 00	 ret	 16			; 00000010H
?VerifyTruncatedDigest@HashTransformation@CryptoPP@@UAE_NPBEI0I@Z ENDP ; CryptoPP::HashTransformation::VerifyTruncatedDigest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
_digestSize$ = 12					; size = 4
_input$ = 16						; size = 4
_length$ = 20						; size = 4
?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z PROC ; CryptoPP::HashTransformation::CalculateTruncatedDigest, COMDAT
; _this$ = ecx

; 1209 : 		{Update(input, length); TruncatedFinal(digest, digestSize);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 14	 push	 DWORD PTR _length$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 10	 push	 DWORD PTR _input$[ebp]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	ff 50 10	 call	 DWORD PTR [eax+16]
  00011	ff 75 0c	 push	 DWORD PTR _digestSize$[ebp]
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	8b ce		 mov	 ecx, esi
  00018	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  0001b	ff 50 3c	 call	 DWORD PTR [eax+60]
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?CalculateTruncatedDigest@HashTransformation@CryptoPP@@UAEXPAEIPBEI@Z ENDP ; CryptoPP::HashTransformation::CalculateTruncatedDigest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z PROC ; CryptoPP::HashTransformation::VerifyDigest, COMDAT
; _this$ = ecx

; 1189 : 		{Update(input, length); return Verify(digest);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 10	 push	 DWORD PTR _length$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _input$[ebp]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	ff 50 10	 call	 DWORD PTR [eax+16]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	8b ce		 mov	 ecx, esi
  00015	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  00018	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0001b	ff d0		 call	 eax
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
?VerifyDigest@HashTransformation@CryptoPP@@UAE_NPBE0I@Z ENDP ; CryptoPP::HashTransformation::VerifyDigest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z PROC	; CryptoPP::HashTransformation::Verify, COMDAT
; _this$ = ecx

; 1173 : 		{return TruncatedVerify(digest, DigestSize());}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	ff 56 20	 call	 DWORD PTR [esi+32]
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	8b cf		 mov	 ecx, edi
  00015	ff d0		 call	 eax
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?Verify@HashTransformation@CryptoPP@@UAE_NPBE@Z ENDP	; CryptoPP::HashTransformation::Verify
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z PROC ; CryptoPP::HashTransformation::CalculateDigest, COMDAT
; _this$ = ecx

; 1161 : 		{Update(input, length); Final(digest);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 10	 push	 DWORD PTR _length$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _input$[ebp]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	ff 50 10	 call	 DWORD PTR [eax+16]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	8b ce		 mov	 ecx, esi
  00015	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  00018	ff 50 18	 call	 DWORD PTR [eax+24]
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
?CalculateDigest@HashTransformation@CryptoPP@@UAEXPAEPBEI@Z ENDP ; CryptoPP::HashTransformation::CalculateDigest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Final@HashTransformation@CryptoPP@@UAEXPAE@Z
_TEXT	SEGMENT
_digest$ = 8						; size = 4
?Final@HashTransformation@CryptoPP@@UAEXPAE@Z PROC	; CryptoPP::HashTransformation::Final, COMDAT
; _this$ = ecx

; 1115 : 		{TruncatedFinal(digest, DigestSize());}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	ff 56 20	 call	 DWORD PTR [esi+32]
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR _digest$[ebp]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 56 3c	 call	 DWORD PTR [esi+60]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Final@HashTransformation@CryptoPP@@UAEXPAE@Z ENDP	; CryptoPP::HashTransformation::Final
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1HashTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1HashTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::HashTransformation::~HashTransformation, COMDAT
; _this$ = ecx

; 1087 : 	virtual ~HashTransformation() {}

  00000	c2 00 00	 ret	 0
??1HashTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::HashTransformation::~HashTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::StreamTransformation::IsLastBlockSpecial, COMDAT
; _this$ = ecx

; 1026 : 	virtual bool IsLastBlockSpecial() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::StreamTransformation::IsLastBlockSpecial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MinLastBlockSize, COMDAT
; _this$ = ecx

; 993  : 	virtual unsigned int MinLastBlockSize() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MinLastBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed, COMDAT
; _this$ = ecx

; 948  : 	virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MandatoryBlockSize, COMDAT
; _this$ = ecx

; 937  : 	virtual unsigned int MandatoryBlockSize() const {return 1;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MandatoryBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1StreamTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1StreamTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::StreamTransformation::~StreamTransformation, COMDAT
; _this$ = ecx

; 920  : 	virtual ~StreamTransformation() {}

  00000	c2 00 00	 ret	 0
??1StreamTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::StreamTransformation::~StreamTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MaxIVLength, COMDAT
; _this$ = ecx

; 748  : 	virtual unsigned int MaxIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 20	 jmp	 DWORD PTR [eax+32]
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MaxIVLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MinIVLength, COMDAT
; _this$ = ecx

; 743  : 	virtual unsigned int MinIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 20	 jmp	 DWORD PTR [eax+32]
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MinIVLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
$T2 = -104						; size = 24
$T3 = -80						; size = 24
$T4 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC	; CryptoPP::SimpleKeyingInterface::IVSize, COMDAT
; _this$ = ecx

; 734  : 		{throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	ff 50 34	 call	 DWORD PTR [eax+52]
  0002d	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	51		 push	 ecx
  00031	8b c8		 mov	 ecx, eax
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	ff 52 08	 call	 DWORD PTR [edx+8]
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
  0003d	50		 push	 eax
  0003e	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	50		 push	 eax
  00052	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00059	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  00063	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@IVSize:
  0006c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ$1:
  00008	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IVSize@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP	; CryptoPP::SimpleKeyingInterface::IVSize
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength, COMDAT
; _this$ = ecx

; 645  : 		{return keylength == GetValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 75 08	 push	 DWORD PTR _keylength$[ebp]
  00008	ff 50 10	 call	 DWORD PTR [eax+16]
  0000b	39 45 08	 cmp	 DWORD PTR _keylength$[ebp], eax
  0000e	0f 94 c0	 sete	 al
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ PROC		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface, COMDAT
; _this$ = ecx

; 616  : 	virtual ~SimpleKeyingInterface() {}

  00000	c2 00 00	 ret	 0
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::Algorithm::AlgorithmProvider, COMDAT
; _this$ = ecx

; 608  : 	virtual std::string AlgorithmProvider() const {return "C++";}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 03		 push	 3
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_03BFHCIDFI@C?$CL?$CL@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 03 00
	00 00		 mov	 DWORD PTR [esi+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 03 00	 mov	 BYTE PTR [esi+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 608  : 	virtual std::string AlgorithmProvider() const {return "C++";}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::Algorithm::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::Algorithm::AlgorithmName, COMDAT
; _this$ = ecx

; 591  : 	virtual std::string AlgorithmName() const {return "unknown";}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00004	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00007	6a 07		 push	 7
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_07CIFAGBMG@unknown@
  0000e	56		 push	 esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00020	c7 46 10 07 00
	00 00		 mov	 DWORD PTR [esi+16], 7

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 46 07 00	 mov	 BYTE PTR [esi+7], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 591  : 	virtual std::string AlgorithmName() const {return "unknown";}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::Algorithm::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Algorithm@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Algorithm@CryptoPP@@UAE@XZ PROC			; CryptoPP::Algorithm::~Algorithm, COMDAT
; _this$ = ecx

; 573  : 	virtual ~Algorithm() {}

  00000	c2 00 00	 ret	 0
??1Algorithm@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Algorithm::~Algorithm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ PROC		; CryptoPP::Clonable::Clone, COMDAT
; _this$ = ecx

; 566  : 	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	// TODO: make this =0

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Clone:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ ENDP		; CryptoPP::Clonable::Clone
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Clonable@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Clonable@CryptoPP@@UAE@XZ PROC			; CryptoPP::Clonable::~Clonable, COMDAT
; _this$ = ecx

; 559  : 	virtual ~Clonable() {}

  00000	c2 00 00	 ret	 0
??1Clonable@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Clonable::~Clonable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b c2		 mov	 eax, edx

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00008	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL22@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL22@operator

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b c6		 sub	 eax, esi

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	50		 push	 eax
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 4458 :     return _STD move(_Left.append(_Right));

  00026	5e		 pop	 esi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00027	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00045	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004c	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00053	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4458 :     return _STD move(_Left.append(_Right));

  00056	8b c1		 mov	 eax, ecx

; 4459 : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
$T1 = 16						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4372 :     _In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL15@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL15@operator
  00017	2b c2		 sub	 eax, edx

; 4373 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4374 :     const auto _Left_size  = _Convert_size<_Size_type>(_Traits::length(_Left));
; 4375 :     const auto _Right_size = _Right.size();
; 4376 :     if (_Right.max_size() - _Right_size < _Left_size) {

  00019	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0001e	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00021	2b 4a 10	 sub	 ecx, DWORD PTR [edx+16]
  00024	3b c8		 cmp	 ecx, eax
  00026	72 22		 jb	 SHORT $LN18@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  00028	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0002c	8b ca		 mov	 ecx, edx

; 2145 :         if (_Large_string_engaged()) {

  0002e	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00030	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN11@operator:

; 4378 :     }
; 4379 : 
; 4380 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

  00032	ff 72 10	 push	 DWORD PTR [edx+16]
  00035	51		 push	 ecx
  00036	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	52		 push	 edx
  0003c	ff 75 10	 push	 DWORD PTR $T1[ebp]
  0003f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00044	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00047	5e		 pop	 esi

; 4381 : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN18@operator:

; 4377 :         _Xlen_string();

  0004a	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN16@operator:
  0004f	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GNameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NameValuePairs::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NameValuePairs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
_TEXT	SEGMENT
$T2 = -88						; size = 48
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_stored$ = 12						; size = 4
_retrieving$ = 16					; size = 4
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch, COMDAT

; 426  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 10	 mov	 edi, DWORD PTR _retrieving$[ebp]
  0002e	8b 75 0c	 mov	 esi, DWORD PTR _stored$[ebp]
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _name$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 88   :         return __std_type_info_compare(&_Data, &_Other._Data) != 0;

  00034	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00037	50		 push	 eax
  00038	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ___std_type_info_compare
  00041	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 426  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00044	85 c0		 test	 eax, eax
  00046	75 1c		 jne	 SHORT $LN10@ThrowIfTyp
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN10@ThrowIfTyp:
  00064	53		 push	 ebx
  00065	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006d	57		 push	 edi
  0006e	56		 push	 esi
  0006f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	50		 push	 eax
  0007a	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  0007d	e8 00 00 00 00	 call	 ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
  00082	68 00 00 00 00	 push	 OFFSET __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
  00087	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@ThrowIfTyp:
  00090	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN16@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN16@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN24@scalar
  0004b	6a 30		 push	 48			; 00000030H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN24@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  0006f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00072	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00075	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00078	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  0007b	8b c7		 mov	 eax, edi
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN12@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN12@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
_TEXT	SEGMENT
_this$GSCopy$ = -172					; size = 4
_this$ = -168						; size = 4
_retrieving$GSCopy$1$ = -164				; size = 4
$T2 = -160						; size = 24
$T3 = -136						; size = 24
$T4 = -112						; size = 24
$T5 = -88						; size = 24
$T6 = -64						; size = 24
$T7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_stored$ = 12						; size = 4
_retrieving$ = 16					; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx

; 309  : 			, m_stored(stored), m_retrieving(retrieving) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	89 bd 58 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], edi
  00036	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _retrieving$[ebp]
  0003c	8b 5d 0c	 mov	 ebx, DWORD PTR _stored$[ebp]
  0003f	50		 push	 eax
  00040	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00046	89 bd 54 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
  00051	50		 push	 eax
  00052	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _retrieving$GSCopy$1$[ebp], ecx
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
  00062	50		 push	 eax
  00063	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00076	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  00078	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0007b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  0007f	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ___std_type_info_name
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0008a	50		 push	 eax
  0008b	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  0008e	56		 push	 esi
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
  0009a	50		 push	 eax
  0009b	8d 45 a8	 lea	 eax, DWORD PTR $T5[ebp]
  0009e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a8	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  000aa	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _retrieving$GSCopy$1$[ebp]
  000b0	83 c0 04	 add	 eax, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  000b3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  000b7	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ___std_type_info_name
  000c2	83 c4 40	 add	 esp, 64			; 00000040H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  000c5	50		 push	 eax
  000c6	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
  000c9	56		 push	 esi
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_01GEODFPGF@?8@
  000d5	50		 push	 eax
  000d6	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  000d9	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000e3	83 c4 18	 add	 esp, 24			; 00000018H
  000e6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  000e9	66 0f d6 47 04	 movq	 QWORD PTR [edi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000ee	50		 push	 eax
  000ef	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  000f2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000f6	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  000fc	c7 47 0c 01 00
	00 00		 mov	 DWORD PTR [edi+12], 1
  00103	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00108	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  0010b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00111	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00114	72 0d		 jb	 SHORT $LN27@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00116	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00117	50		 push	 eax
  00118	ff 75 d8	 push	 DWORD PTR $T7[ebp]
  0011b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00120	83 c4 08	 add	 esp, 8
$LN27@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00123	8b 45 d4	 mov	 eax, DWORD PTR $T6[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00126	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0012d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00134	c6 45 d8 00	 mov	 BYTE PTR $T7[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00138	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0013b	72 0d		 jb	 SHORT $LN37@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0013d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013e	50		 push	 eax
  0013f	ff 75 c0	 push	 DWORD PTR $T6[ebp]
  00142	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00147	83 c4 08	 add	 esp, 8
$LN37@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0014a	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0014d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00154	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0015b	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0015f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00162	72 0d		 jb	 SHORT $LN47@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00164	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00165	50		 push	 eax
  00166	ff 75 a8	 push	 DWORD PTR $T5[ebp]
  00169	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0016e	83 c4 08	 add	 esp, 8
$LN47@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00171	8b 45 a4	 mov	 eax, DWORD PTR $T4[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00174	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0017b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00182	c6 45 a8 00	 mov	 BYTE PTR $T5[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00186	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00189	72 0d		 jb	 SHORT $LN57@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0018b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018c	50		 push	 eax
  0018d	ff 75 90	 push	 DWORD PTR $T4[ebp]
  00190	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00195	83 c4 08	 add	 esp, 8
$LN57@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00198	8b 45 8c	 mov	 eax, DWORD PTR $T3[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0019b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001a2	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001a9	c6 45 90 00	 mov	 BYTE PTR $T4[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  001ad	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001b0	72 10		 jb	 SHORT $LN67@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001b2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b3	50		 push	 eax
  001b4	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  001ba	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001bf	83 c4 08	 add	 esp, 8
$LN67@ValueTypeM:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001c2	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  001c8	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001cf	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001d6	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  001dd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001e0	72 10		 jb	 SHORT $LN77@ValueTypeM

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001e2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e3	50		 push	 eax
  001e4	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T2[ebp]
  001ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001ef	83 c4 08	 add	 esp, 8
$LN77@ValueTypeM:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 309  : 			, m_stored(stored), m_retrieving(retrieving) {}

  001f2	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _retrieving$GSCopy$1$[ebp]
  001f8	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  001fb	8b c7		 mov	 eax, edi
  001fd	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  00203	89 5f 28	 mov	 DWORD PTR [edi+40], ebx
  00206	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00209	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00210	59		 pop	 ecx
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00217	33 cd		 xor	 ecx, ebp
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0:
  00000	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1:
  0000b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2:
  00016	8d 4d 90	 lea	 ecx, DWORD PTR $T4[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3:
  0001e	8d 4d a8	 lea	 ecx, DWORD PTR $T5[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4:
  00026	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5:
  0002e	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$8:
  00036	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00041	cc		 int	 3
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
__ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z:
  00046	90		 npad	 1
  00047	90		 npad	 1
  00048	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004f	8b 8a 50 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-176]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NameValuePairs@CryptoPP@@UAE@XZ PROC			; CryptoPP::NameValuePairs::~NameValuePairs, COMDAT
; _this$ = ecx

; 296  : 	virtual ~NameValuePairs() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00006	c3		 ret	 0
??1NameValuePairs@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NameValuePairs::~NameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GNotImplemented@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NotImplemented::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN13@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN13@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN21@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN21@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NotImplemented::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::NotImplemented::NotImplemented
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1NotImplemented@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NotImplemented@CryptoPP@@UAE@XZ PROC			; CryptoPP::NotImplemented::~NotImplemented, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN9@NotImpleme

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN9@NotImpleme:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1NotImplemented@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NotImplemented::~NotImplemented
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  0002c	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00031	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00034	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  00056	8b c6		 mov	 eax, esi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::NotImplemented::NotImplemented
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GInvalidArgument@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::InvalidArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN13@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN13@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN21@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN21@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::InvalidArgument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::InvalidArgument::InvalidArgument
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1InvalidArgument@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InvalidArgument@CryptoPP@@UAE@XZ PROC		; CryptoPP::InvalidArgument::~InvalidArgument, COMDAT
; _this$ = ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN9@InvalidArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN9@InvalidArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1InvalidArgument@CryptoPP@@UAE@XZ ENDP		; CryptoPP::InvalidArgument::~InvalidArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 53   :         : _Data()

  0002c	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00031	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00034	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00044	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  00056	8b c6		 mov	 eax, esi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::InvalidArgument::InvalidArgument
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_GException@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GException@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00012	72 0d		 jb	 SHORT $LN10@scalar

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 10	 push	 DWORD PTR [esi+16]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN10@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00021	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00036	50		 push	 eax
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN18@scalar
  0004b	6a 28		 push	 40			; 00000028H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??_GException@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0Exception@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Exception@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	8b c7		 mov	 eax, edi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::Exception::Exception
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ?what@Exception@CryptoPP@@UBEPBDXZ
_TEXT	SEGMENT
?what@Exception@CryptoPP@@UBEPBDXZ PROC			; CryptoPP::Exception::what, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 2145 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@what
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 186  : 	const char *what() const throw() {return (m_what.c_str());}

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@what:
  0000b	c3		 ret	 0
?what@Exception@CryptoPP@@UBEPBDXZ ENDP			; CryptoPP::Exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Exception@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Exception@CryptoPP@@UAE@XZ PROC			; CryptoPP::Exception::~Exception, COMDAT
; _this$ = ecx

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00009	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 0d		 jb	 SHORT $LN7@Exception

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	50		 push	 eax
  00013	ff 76 10	 push	 DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN7@Exception:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00028	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 90   :         __std_exception_destroy(&_Data);

  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  00043	c3		 ret	 0
??1Exception@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Exception::~Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__IsLogMode@CMakePackLog@@AAE_NXZ
_TEXT	SEGMENT
?__IsLogMode@CMakePackLog@@AAE_NXZ PROC			; CMakePackLog::__IsLogMode, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3764 :         return size() == 0;

  00000	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 75   : 	if (m_stFileName.empty())

  00004	0f 95 c0	 setne	 al

; 76   : 		return false;
; 77   : 
; 78   : 	return true;
; 79   : }

  00007	c3		 ret	 0
?__IsLogMode@CMakePackLog@@AAE_NXZ ENDP			; CMakePackLog::__IsLogMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__WriteError@CMakePackLog@@AAEXPBDH@Z
_TEXT	SEGMENT
_c_szBuf$ = 8						; size = 4
_nBufLen$ = 12						; size = 4
?__WriteError@CMakePackLog@@AAEXPBDH@Z PROC		; CMakePackLog::__WriteError, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 178  : 	if (!__IsLogMode())

  00006	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0000b	84 c0		 test	 al, al
  0000d	74 40		 je	 SHORT $LN1@WriteError

; 179  : 		return;
; 180  : 
; 181  : 	if (NULL==m_fp_err)

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	85 c0		 test	 eax, eax
  00014	75 1c		 jne	 SHORT $LN3@WriteError
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 7e 34 10	 cmp	 DWORD PTR [esi+52], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0001a	8d 46 20	 lea	 eax, DWORD PTR [esi+32]

; 2145 :         if (_Large_string_engaged()) {

  0001d	72 02		 jb	 SHORT $LN8@WriteError

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@WriteError:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 182  : 		m_fp_err=fopen(m_stErrorFileName.c_str(), "w");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _fopen
  0002c	83 c4 08	 add	 esp, 8
  0002f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@WriteError:

; 183  : 
; 184  : 	fwrite(c_szBuf, nBufLen, 1, m_fp_err);

  00032	8b 75 08	 mov	 esi, DWORD PTR _c_szBuf$[ebp]
  00035	50		 push	 eax
  00036	6a 01		 push	 1
  00038	ff 75 0c	 push	 DWORD PTR _nBufLen$[ebp]
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _fwrite

; 185  : 
; 186  : 	printf("Error: %s", c_szBuf);

  00041	56		 push	 esi
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_09BOOFBHDC@Error?3?5?$CFs@
  00047	e8 00 00 00 00	 call	 _printf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@WriteError:
  0004f	5e		 pop	 esi

; 187  : }

  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?__WriteError@CMakePackLog@@AAEXPBDH@Z ENDP		; CMakePackLog::__WriteError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__Write@CMakePackLog@@AAEXPBDH@Z
_TEXT	SEGMENT
_c_szBuf$ = 8						; size = 4
_nBufLen$ = 12						; size = 4
?__Write@CMakePackLog@@AAEXPBDH@Z PROC			; CMakePackLog::__Write, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 123  : 	if (!__IsLogMode())

  00006	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0000b	84 c0		 test	 al, al
  0000d	74 3e		 je	 SHORT $LN1@Write

; 124  : 		return;
; 125  : 
; 126  : 	if (NULL==m_fp)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	75 1b		 jne	 SHORT $LN3@Write
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00015	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  00019	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 2145 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN8@Write

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@Write:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 127  : 		m_fp=fopen(m_stFileName.c_str(), "w");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fopen
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 06		 mov	 DWORD PTR [esi], eax
$LN3@Write:

; 128  : 
; 129  : 	fwrite(c_szBuf, nBufLen, 1, m_fp);

  00030	8b 75 08	 mov	 esi, DWORD PTR _c_szBuf$[ebp]
  00033	50		 push	 eax
  00034	6a 01		 push	 1
  00036	ff 75 0c	 push	 DWORD PTR _nBufLen$[ebp]
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _fwrite

; 130  : 
; 131  : 	printf("%s", c_szBuf);

  0003f	56		 push	 esi
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00045	e8 00 00 00 00	 call	 _printf
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@Write:
  0004d	5e		 pop	 esi

; 132  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?__Write@CMakePackLog@@AAEXPBDH@Z ENDP			; CMakePackLog::__Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?FlushError@CMakePackLog@@QAEXXZ
_TEXT	SEGMENT
_iFile$ = -280						; size = 184
$T2 = -96						; size = 4
$T3 = -92						; size = 4
$T4 = -88						; size = 1
_this$ = -88						; size = 4
_this$ = -88						; size = 4
$T5 = -88						; size = 4
_vText$ = -84						; size = 12
_eos$ = -72						; size = 28
_iit$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?FlushError@CMakePackLog@@QAEXXZ PROC			; CMakePackLog::FlushError, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FlushError@CMakePackLog@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  0002d	83 c1 20	 add	 ecx, 32			; 00000020H

; 2145 :         if (_Large_string_engaged()) {

  00030	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00034	72 02		 jb	 SHORT $LN12@FlushError

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN12@FlushError:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 191  : 	std::wifstream iFile(m_stErrorFileName.c_str());

  00038	6a 01		 push	 1
  0003a	6a 40		 push	 64			; 00000040H
  0003c	6a 01		 push	 1
  0003e	51		 push	 ecx
  0003f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _iFile$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<wchar_t,std::char_traits<wchar_t> >::basic_ifstream<wchar_t,std::char_traits<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 248  :     istream_iterator(istream_type& _Istr) : _Myistr(_STD addressof(_Istr)) {

  0004a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _iFile$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 191  : 	std::wifstream iFile(m_stErrorFileName.c_str());

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 248  :     istream_iterator(istream_type& _Istr) : _Myistr(_STD addressof(_Istr)) {

  00057	89 45 d4	 mov	 DWORD PTR _iit$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0005a	33 c0		 xor	 eax, eax
  0005c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iit$[ebp+20], 0
  00063	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _iit$[ebp+24], 7
  0006a	66 89 45 d8	 mov	 WORD PTR _iit$[ebp+4], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 280  :         if (!(*_Myistr >> _Myval)) {

  0006e	8d 45 d8	 lea	 eax, DWORD PTR _iit$[ebp+4]

; 286  :     _Ty _Myval{}; // lookahead value (valid if _Myistr is not null)

  00071	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 280  :         if (!(*_Myistr >> _Myval)) {

  00075	50		 push	 eax
  00076	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _iFile$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00082	8b 75 d4	 mov	 esi, DWORD PTR _iit$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase

; 303  :         return rdstate() & (ios_base::badbit | ios_base::failbit);

  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0008a	f6 44 01 0c 06	 test	 BYTE PTR [ecx+eax+12], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 280  :         if (!(*_Myistr >> _Myval)) {

  0008f	b8 00 00 00 00	 mov	 eax, 0
  00094	0f 45 f0	 cmovne	 esi, eax
  00097	89 75 d4	 mov	 DWORD PTR _iit$[ebp], esi

; 285  :     istream_type* _Myistr{nullptr}; // pointer to input stream

  0009a	89 45 b8	 mov	 DWORD PTR _eos$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0009d	89 45 cc	 mov	 DWORD PTR _eos$[ebp+20], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000a0	c7 45 d0 07 00
	00 00		 mov	 DWORD PTR _eos$[ebp+24], 7

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000a7	66 89 45 bc	 mov	 WORD PTR _eos$[ebp+4], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000ab	89 45 ac	 mov	 DWORD PTR _vText$[ebp], eax
  000ae	89 45 b0	 mov	 DWORD PTR _vText$[ebp+4], eax
  000b1	89 45 b4	 mov	 DWORD PTR _vText$[ebp+8], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 197  :     std::copy (iit, eos, std::back_inserter(vText));

  000b4	8d 45 ac	 lea	 eax, DWORD PTR _vText$[ebp]
  000b7	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000bb	50		 push	 eax
  000bc	8d 45 a4	 lea	 eax, DWORD PTR $T3[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??$back_inserter@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@0@@Z ; std::back_inserter<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
  000c5	83 c4 10	 add	 esp, 16			; 00000010H
  000c8	ff 30		 push	 DWORD PTR [eax]
  000ca	8d 45 bc	 lea	 eax, DWORD PTR _eos$[ebp+4]
  000cd	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000d0	8b cc		 mov	 ecx, esp
  000d2	89 65 a0	 mov	 DWORD PTR $T2[ebp], esp
  000d5	89 4d a8	 mov	 DWORD PTR _this$[ebp], ecx
  000d8	50		 push	 eax
  000d9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  000df	83 c1 04	 add	 ecx, 4
  000e2	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000e7	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000ee	8b cc		 mov	 ecx, esp
  000f0	8d 45 d8	 lea	 eax, DWORD PTR _iit$[ebp+4]
  000f3	89 4d a8	 mov	 DWORD PTR _this$[ebp], ecx
  000f6	50		 push	 eax
  000f7	89 31		 mov	 DWORD PTR [ecx], esi
  000f9	83 c1 04	 add	 ecx, 4
  000fc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00101	8d 45 a8	 lea	 eax, DWORD PTR $T5[ebp]
  00104	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ??$copy@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@V?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@0@V?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@0@0V10@@Z ; std::copy<std::istream_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,wchar_t,std::char_traits<wchar_t>,int>,std::back_insert_iterator<std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  0010e	8b 7d b0	 mov	 edi, DWORD PTR _vText$[ebp+4]
  00111	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00116	8b 75 ac	 mov	 esi, DWORD PTR _vText$[ebp]
  00119	8b cf		 mov	 ecx, edi
  0011b	ff 75 a8	 push	 DWORD PTR $T4[ebp]
  0011e	2b ce		 sub	 ecx, esi
  00120	f7 e9		 imul	 ecx
  00122	c1 fa 02	 sar	 edx, 2
  00125	8b c2		 mov	 eax, edx
  00127	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012a	03 c2		 add	 eax, edx
  0012c	50		 push	 eax
  0012d	57		 push	 edi
  0012e	56		 push	 esi
  0012f	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::less<void> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4178 :     _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));

  00134	8b 7d b0	 mov	 edi, DWORD PTR _vText$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00137	83 c4 50	 add	 esp, 80			; 00000050H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 192  :     std::istream_iterator <std::wstring, wchar_t> iit(iFile);

  0013a	8b 75 ac	 mov	 esi, DWORD PTR _vText$[ebp]
  0013d	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4141 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0013f	74 1b		 je	 SHORT $LN94@FlushError
$LL95@FlushError:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 320  :         *_Myostr << _Val;

  00141	56		 push	 esi
  00142	68 00 00 00 00	 push	 OFFSET ?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A ; std::wcout
  00147	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4141 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0014c	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iterator

; 320  :         *_Myostr << _Val;

  0014f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4141 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00152	3b f7		 cmp	 esi, edi
  00154	75 eb		 jne	 SHORT $LL95@FlushError
  00156	8b 7d b0	 mov	 edi, DWORD PTR _vText$[ebp+4]
  00159	8b 75 ac	 mov	 esi, DWORD PTR _vText$[ebp]
$LN94@FlushError:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0015c	85 f6		 test	 esi, esi
  0015e	74 49		 je	 SHORT $LN103@FlushError

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00160	8d 4d ac	 lea	 ecx, DWORD PTR _vText$[ebp]
  00163	51		 push	 ecx
  00164	57		 push	 edi
  00165	56		 push	 esi
  00166	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016b	8b 4d b4	 mov	 ecx, DWORD PTR _vText$[ebp+8]
  0016e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00173	8b 75 ac	 mov	 esi, DWORD PTR _vText$[ebp]
  00176	2b ce		 sub	 ecx, esi
  00178	f7 e9		 imul	 ecx
  0017a	c1 fa 02	 sar	 edx, 2
  0017d	8b c2		 mov	 eax, edx
  0017f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00182	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00184	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00187	c1 e0 03	 shl	 eax, 3
  0018a	50		 push	 eax
  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00191	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00194	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vText$[ebp], 0

; 1698 :             _Mylast  = pointer();

  0019b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vText$[ebp+4], 0

; 1699 :             _Myend   = pointer();

  001a2	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _vText$[ebp+8], 0
$LN103@FlushError:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001a9	8b 45 d0	 mov	 eax, DWORD PTR _eos$[ebp+24]
  001ac	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001af	72 13		 jb	 SHORT $LN116@FlushError
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b1	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  001b8	50		 push	 eax
  001b9	ff 75 bc	 push	 DWORD PTR _eos$[ebp+4]
  001bc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001c1	83 c4 08	 add	 esp, 8
$LN116@FlushError:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001c4	8b 45 ec	 mov	 eax, DWORD PTR _iit$[ebp+24]
  001c7	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001ca	72 13		 jb	 SHORT $LN129@FlushError
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cc	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  001d3	50		 push	 eax
  001d4	ff 75 d8	 push	 DWORD PTR _iit$[ebp+4]
  001d7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001dc	83 c4 08	 add	 esp, 8
$LN129@FlushError:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 203  : }

  001df	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _iFile$[ebp]
  001e5	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  001ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f4	59		 pop	 ecx
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi
  001f7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fa	33 cd		 xor	 ecx, ebp
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$0:
  00000	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _iFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$6:
  0000b	8d 4d d8	 lea	 ecx, DWORD PTR _iit$[ebp+4]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$1:
  00013	8d 4d d4	 lea	 ecx, DWORD PTR _iit$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$2:
  0001b	8d 4d b8	 lea	 ecx, DWORD PTR _eos$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$3:
  00023	8d 4d ac	 lea	 ecx, DWORD PTR _vText$[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
__unwindfunclet$?FlushError@CMakePackLog@@QAEXXZ$4:
  0002b	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$istream_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_WU?$char_traits@_W@2@H@std@@QAE@XZ
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
__ehhandler$?FlushError@CMakePackLog@@QAEXXZ:
  00038	90		 npad	 1
  00039	90		 npad	 1
  0003a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00041	8b 8a e8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-280]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FlushError@CMakePackLog@@QAEXXZ
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FlushError@CMakePackLog@@QAEXXZ ENDP			; CMakePackLog::FlushError
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteError@CMakePackLog@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szBuf$ = 8						; size = 4
?WriteError@CMakePackLog@@QAEXPBD@Z PROC		; CMakePackLog::WriteError, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 170  : 	if (!__IsLogMode())

  00006	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0000b	84 c0		 test	 al, al
  0000d	74 1d		 je	 SHORT $LN1@WriteError

; 171  : 		return;
; 172  : 
; 173  : 	__WriteError(c_szBuf, strlen(c_szBuf)+1);

  0000f	8b 55 08	 mov	 edx, DWORD PTR _c_szBuf$[ebp]
  00012	8b c2		 mov	 eax, edx
  00014	57		 push	 edi
  00015	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL4@WriteError:
  00018	8a 08		 mov	 cl, BYTE PTR [eax]
  0001a	40		 inc	 eax
  0001b	84 c9		 test	 cl, cl
  0001d	75 f9		 jne	 SHORT $LL4@WriteError
  0001f	2b c7		 sub	 eax, edi
  00021	8b ce		 mov	 ecx, esi
  00023	40		 inc	 eax
  00024	50		 push	 eax
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 ?__WriteError@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__WriteError
  0002b	5f		 pop	 edi
$LN1@WriteError:
  0002c	5e		 pop	 esi

; 174  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?WriteError@CMakePackLog@@QAEXPBD@Z ENDP		; CMakePackLog::WriteError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteErrornf@CMakePackLog@@QAAXPBDZZ
_TEXT	SEGMENT
_szBuf$ = -1032						; size = 1025
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_c_szFormat$ = 12					; size = 4
?WriteErrornf@CMakePackLog@@QAAXPBDZZ PROC		; CMakePackLog::WriteErrornf, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 152  : 	if (!__IsLogMode())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0001e	84 c0		 test	 al, al
  00020	74 5e		 je	 SHORT $LN1@WriteError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00022	8d 45 10	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	ff 75 0c	 push	 DWORD PTR _c_szFormat$[ebp]
  0002b	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00031	68 00 04 00 00	 push	 1024			; 00000400H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	ff 70 04	 push	 DWORD PTR [eax+4]
  00041	83 c9 01	 or	 ecx, 1
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0004a	83 c9 ff	 or	 ecx, -1
  0004d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00050	85 c0		 test	 eax, eax
  00052	0f 48 c1	 cmovs	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 160  : 	if (nBufLen > 0)

  00055	85 c0		 test	 eax, eax
  00057	7e 18		 jle	 SHORT $LN3@WriteError

; 161  : 	{
; 162  : 		szBuf[nBufLen++] = '\n';

  00059	c6 84 05 f8 fb
	ff ff 0a	 mov	 BYTE PTR _szBuf$[ebp+eax], 10 ; 0000000aH
  00061	40		 inc	 eax

; 163  : 		szBuf[nBufLen] = '\0';

  00062	3d 01 04 00 00	 cmp	 eax, 1025		; 00000401H
  00067	73 26		 jae	 SHORT $LN5@WriteError
  00069	c6 84 05 f8 fb
	ff ff 00	 mov	 BYTE PTR _szBuf$[ebp+eax], 0
$LN3@WriteError:

; 164  : 	}
; 165  : 	__WriteError(szBuf, nBufLen);

  00071	50		 push	 eax
  00072	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00078	8b ce		 mov	 ecx, esi
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?__WriteError@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__WriteError
$LN1@WriteError:

; 166  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	33 cd		 xor	 ecx, ebp
  00085	5e		 pop	 esi
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN5@WriteError:

; 163  : 		szBuf[nBufLen] = '\0';

  0008f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN11@WriteError:
  00094	cc		 int	 3
?WriteErrornf@CMakePackLog@@QAAXPBDZZ ENDP		; CMakePackLog::WriteErrornf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteErrorf@CMakePackLog@@QAAXPBDZZ
_TEXT	SEGMENT
_szBuf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_c_szFormat$ = 12					; size = 4
?WriteErrorf@CMakePackLog@@QAAXPBDZZ PROC		; CMakePackLog::WriteErrorf, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 138  : 	if (!__IsLogMode())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0001e	84 c0		 test	 al, al
  00020	74 51		 je	 SHORT $LN1@WriteError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00022	8d 45 10	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	ff 75 0c	 push	 DWORD PTR _c_szFormat$[ebp]
  0002b	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00031	68 00 04 00 00	 push	 1024			; 00000400H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	ff 70 04	 push	 DWORD PTR [eax+4]
  00041	83 c9 01	 or	 ecx, 1
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0004a	83 c9 ff	 or	 ecx, -1
  0004d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00050	85 c0		 test	 eax, eax
  00052	0f 48 c1	 cmovs	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 146  : 	szBuf[nBufLen] = '\0';

  00055	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0005a	73 26		 jae	 SHORT $LN4@WriteError

; 147  : 	__WriteError(szBuf, nBufLen);

  0005c	50		 push	 eax
  0005d	c6 84 05 fc fb
	ff ff 00	 mov	 BYTE PTR _szBuf$[ebp+eax], 0
  00065	8b ce		 mov	 ecx, esi
  00067	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?__WriteError@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__WriteError
$LN1@WriteError:

; 148  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN4@WriteError:

; 146  : 	szBuf[nBufLen] = '\0';

  00082	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN10@WriteError:
  00087	cc		 int	 3
?WriteErrorf@CMakePackLog@@QAAXPBDZZ ENDP		; CMakePackLog::WriteErrorf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Write@CMakePackLog@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szBuf$ = 8						; size = 4
?Write@CMakePackLog@@QAEXPBD@Z PROC			; CMakePackLog::Write, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 115  : 	if (!__IsLogMode())

  00006	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0000b	84 c0		 test	 al, al
  0000d	74 1d		 je	 SHORT $LN1@Write

; 116  : 		return;
; 117  : 
; 118  : 	__Write(c_szBuf, strlen(c_szBuf)+1);

  0000f	8b 55 08	 mov	 edx, DWORD PTR _c_szBuf$[ebp]
  00012	8b c2		 mov	 eax, edx
  00014	57		 push	 edi
  00015	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL4@Write:
  00018	8a 08		 mov	 cl, BYTE PTR [eax]
  0001a	40		 inc	 eax
  0001b	84 c9		 test	 cl, cl
  0001d	75 f9		 jne	 SHORT $LL4@Write
  0001f	2b c7		 sub	 eax, edi
  00021	8b ce		 mov	 ecx, esi
  00023	40		 inc	 eax
  00024	50		 push	 eax
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 ?__Write@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__Write
  0002b	5f		 pop	 edi
$LN1@Write:
  0002c	5e		 pop	 esi

; 119  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Write@CMakePackLog@@QAEXPBD@Z ENDP			; CMakePackLog::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Writenf@CMakePackLog@@QAAXPBDZZ
_TEXT	SEGMENT
_szBuf$ = -1032						; size = 1025
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_c_szFormat$ = 12					; size = 4
?Writenf@CMakePackLog@@QAAXPBDZZ PROC			; CMakePackLog::Writenf, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 97   : 	if (!__IsLogMode())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0001e	84 c0		 test	 al, al
  00020	74 5e		 je	 SHORT $LN1@Writenf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00022	8d 45 10	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	ff 75 0c	 push	 DWORD PTR _c_szFormat$[ebp]
  0002b	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00031	68 00 04 00 00	 push	 1024			; 00000400H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	ff 70 04	 push	 DWORD PTR [eax+4]
  00041	83 c9 01	 or	 ecx, 1
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0004a	83 c9 ff	 or	 ecx, -1
  0004d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00050	85 c0		 test	 eax, eax
  00052	0f 48 c1	 cmovs	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 105  : 	if (nBufLen > 0)

  00055	85 c0		 test	 eax, eax
  00057	7e 18		 jle	 SHORT $LN3@Writenf

; 106  : 	{
; 107  : 		szBuf[nBufLen++] = '\n';

  00059	c6 84 05 f8 fb
	ff ff 0a	 mov	 BYTE PTR _szBuf$[ebp+eax], 10 ; 0000000aH
  00061	40		 inc	 eax

; 108  : 		szBuf[nBufLen] = '\0';

  00062	3d 01 04 00 00	 cmp	 eax, 1025		; 00000401H
  00067	73 26		 jae	 SHORT $LN5@Writenf
  00069	c6 84 05 f8 fb
	ff ff 00	 mov	 BYTE PTR _szBuf$[ebp+eax], 0
$LN3@Writenf:

; 109  : 	}
; 110  : 	__Write(szBuf, nBufLen);

  00071	50		 push	 eax
  00072	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00078	8b ce		 mov	 ecx, esi
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?__Write@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__Write
$LN1@Writenf:

; 111  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	33 cd		 xor	 ecx, ebp
  00085	5e		 pop	 esi
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN5@Writenf:

; 108  : 		szBuf[nBufLen] = '\0';

  0008f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN11@Writenf:
  00094	cc		 int	 3
?Writenf@CMakePackLog@@QAAXPBDZZ ENDP			; CMakePackLog::Writenf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Writef@CMakePackLog@@QAAXPBDZZ
_TEXT	SEGMENT
_szBuf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_c_szFormat$ = 12					; size = 4
?Writef@CMakePackLog@@QAAXPBDZZ PROC			; CMakePackLog::Writef, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 83   : 	if (!__IsLogMode())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?__IsLogMode@CMakePackLog@@AAE_NXZ ; CMakePackLog::__IsLogMode
  0001e	84 c0		 test	 al, al
  00020	74 51		 je	 SHORT $LN1@Writef
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00022	8d 45 10	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	ff 75 0c	 push	 DWORD PTR _c_szFormat$[ebp]
  0002b	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00031	68 00 04 00 00	 push	 1024			; 00000400H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	ff 70 04	 push	 DWORD PTR [eax+4]
  00041	83 c9 01	 or	 ecx, 1
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0004a	83 c9 ff	 or	 ecx, -1
  0004d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00050	85 c0		 test	 eax, eax
  00052	0f 48 c1	 cmovs	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 91   : 	szBuf[nBufLen] = '\0';

  00055	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0005a	73 26		 jae	 SHORT $LN4@Writef

; 92   : 	__Write(szBuf, nBufLen);

  0005c	50		 push	 eax
  0005d	c6 84 05 fc fb
	ff ff 00	 mov	 BYTE PTR _szBuf$[ebp+eax], 0
  00065	8b ce		 mov	 ecx, esi
  00067	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?__Write@CMakePackLog@@AAEXPBDH@Z ; CMakePackLog::__Write
$LN1@Writef:

; 93   : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN4@Writef:

; 91   : 	szBuf[nBufLen] = '\0';

  00082	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN10@Writef:
  00087	cc		 int	 3
?Writef@CMakePackLog@@QAAXPBDZZ ENDP			; CMakePackLog::Writef
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?SetFileName@CMakePackLog@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetFileName@CMakePackLog@@QAEXPBD@Z PROC		; CMakePackLog::SetFileName, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00006	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 40   : {

  00009	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b d7		 mov	 edx, edi
  0000d	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL27@SetFileNam:
  00010	8a 02		 mov	 al, BYTE PTR [edx]
  00012	42		 inc	 edx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL27@SetFileNam
  00017	2b d1		 sub	 edx, ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0001c	52		 push	 edx
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00023	6a 04		 push	 4
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_04FPOLKAEB@?4log@
  0002a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0002d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00032	8b c7		 mov	 eax, edi
  00034	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL28@SetFileNam:
  00037	8a 08		 mov	 cl, BYTE PTR [eax]
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f9		 jne	 SHORT $LL28@SetFileNam
  0003e	2b c2		 sub	 eax, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00040	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004a	6a 04		 push	 4
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_04BKIDJPM@?4err@
  00051	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  00054	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 45   : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?SetFileName@CMakePackLog@@QAEXPBD@Z ENDP		; CMakePackLog::SetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ??1CMakePackLog@@QAE@XZ
_TEXT	SEGMENT
??1CMakePackLog@@QAE@XZ PROC				; CMakePackLog::~CMakePackLog, COMDAT
; _this$ = ecx

; 60   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 61   : 	if (NULL!=m_fp)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 0f		 je	 SHORT $LN2@CMakePackL

; 62   : 	{
; 63   : 		fclose(m_fp);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _fclose
  0000f	83 c4 04	 add	 esp, 4

; 64   : 		m_fp=NULL;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN2@CMakePackL:

; 65   : 	}
; 66   : 	if (NULL != m_fp_err)

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	85 c0		 test	 eax, eax
  0001d	74 10		 je	 SHORT $LN3@CMakePackL

; 67   : 	{
; 68   : 		fclose(m_fp_err);

  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _fclose
  00025	83 c4 04	 add	 esp, 4

; 69   : 		m_fp_err = NULL;

  00028	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@CMakePackL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0002f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00032	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00035	72 0d		 jb	 SHORT $LN9@CMakePackL

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00037	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00038	50		 push	 eax
  00039	ff 76 20	 push	 DWORD PTR [esi+32]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00041	83 c4 08	 add	 esp, 8
$LN9@CMakePackL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00044	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004b	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00052	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00056	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00059	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0005c	72 0d		 jb	 SHORT $LN19@CMakePackL

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0005e	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005f	50		 push	 eax
  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00068	83 c4 08	 add	 esp, 8
$LN19@CMakePackL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0006b	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00072	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00079	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  0007d	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 71   : }

  0007e	c3		 ret	 0
??1CMakePackLog@@QAE@XZ ENDP				; CMakePackLog::~CMakePackLog
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ??0CMakePackLog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMakePackLog@@QAE@XZ PROC				; CMakePackLog::CMakePackLog, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00004	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 57   : }

  0000b	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000d	c7 41 1c 0f 00
	00 00		 mov	 DWORD PTR [ecx+28], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00014	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00018	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001f	c7 41 34 0f 00
	00 00		 mov	 DWORD PTR [ecx+52], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00026	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 54   : {

  0002a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	m_fp=NULL;

  0002d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 56   : 	m_fp_err = NULL;

  00033	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 57   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??0CMakePackLog@@QAE@XZ ENDP				; CMakePackLog::CMakePackLog
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetSingleton@CMakePackLog@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@CMakePackLog@@SAAAV1@XZ PROC		; CMakePackLog::GetSingleton, COMDAT

; 49   : 	static CMakePackLog s_kMakePackLog;

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA
  00014	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001a	7f 06		 jg	 SHORT $LN8@GetSinglet
$LN5@GetSinglet:

; 50   : 	return s_kMakePackLog;
; 51   : }

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET ?s_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4V2@A
  00021	c3		 ret	 0
$LN8@GetSinglet:

; 49   : 	static CMakePackLog s_kMakePackLog;

  00022	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA
  00027	e8 00 00 00 00	 call	 __Init_thread_header
  0002c	83 c4 04	 add	 esp, 4
  0002f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA, -1
  00036	75 e4		 jne	 SHORT $LN5@GetSinglet
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4V2@A
  0003d	e8 00 00 00 00	 call	 ??0CMakePackLog@@QAE@XZ	; CMakePackLog::CMakePackLog
  00042	68 00 00 00 00	 push	 OFFSET ??__Fs_kMakePackLog@?1??GetSingleton@CMakePackLog@@SAAAV1@XZ@YAXXZ ; `CMakePackLog::GetSingleton'::`2'::`dynamic atexit destructor for 's_kMakePackLog''
  00047	e8 00 00 00 00	 call	 _atexit
  0004c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSingleton@CMakePackLog@@SAAAV2@XZ@4HA
  00051	e8 00 00 00 00	 call	 __Init_thread_footer
  00056	83 c4 08	 add	 esp, 8
  00059	eb c1		 jmp	 SHORT $LN5@GetSinglet
?GetSingleton@CMakePackLog@@SAAAV1@XZ ENDP		; CMakePackLog::GetSingleton
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEterPack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEterPack@@UAEPAXI@Z PROC				; CEterPack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 ec 13 00 00	 push	 5100			; 000013ecH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCEterPack@@UAEPAXI@Z ENDP				; CEterPack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
_TEXT	SEGMENT
$T2 = -1460						; size = 4
_data$GSCopy$1$ = -1456					; size = 4
_filename$GSCopy$1$ = -1452				; size = 4
$T3 = -1452						; size = 4
_zObj$GSCopy$1$ = -1448					; size = 4
$T4 = -1441						; size = 1
_Encryptor$ = -1440					; size = 1304
$T5 = -132						; size = 56
_tmp$ = -76						; size = 24
_key$ = -52						; size = 32
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_data$ = 12						; size = 4
_dataSize$ = 16						; size = 4
_zObj$ = 20						; size = 4
?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z PROC ; CEterPack::__Encrypt_Panama, COMDAT
; _this$ = ecx

; 1420 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec a8 05 00
	00		 sub	 esp, 1448		; 000005a8H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f9		 mov	 edi, ecx

; 1421 : 	if (32 != m_stIV_Panama.length())

  00043	83 bf e4 13 00
	00 20		 cmp	 DWORD PTR [edi+5092], 32 ; 00000020H
  0004a	8b 43 08	 mov	 eax, DWORD PTR _filename$[ebx]
  0004d	89 85 54 fa ff
	ff		 mov	 DWORD PTR _filename$GSCopy$1$[ebp], eax
  00053	8b 43 0c	 mov	 eax, DWORD PTR _data$[ebx]
  00056	89 85 50 fa ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], eax
  0005c	8b 43 14	 mov	 eax, DWORD PTR _zObj$[ebx]
  0005f	89 85 58 fa ff
	ff		 mov	 DWORD PTR _zObj$GSCopy$1$[ebp], eax
  00065	74 07		 je	 SHORT $LN2@Encrypt_Pa

; 1422 : 	{
; 1423 : #ifdef _DEBUG
; 1424 : 		TraceError("IV not set (filename: %s)", filename);
; 1425 : #endif
; 1426 : 		return false;

  00067	32 c0		 xor	 al, al
  00069	e9 f6 01 00 00	 jmp	 $LN1@Encrypt_Pa
$LN2@Encrypt_Pa:

; 1427 : 	}
; 1428 : 
; 1429 : 	CryptoPP::PanamaCipher<CryptoPP::LittleEndian>::Encryption Encryptor;

  0006e	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >

; 1430 : 
; 1431 : 	if (dataSize < Encryptor.MandatoryBlockSize())

  00079	8b 73 10	 mov	 esi, DWORD PTR _dataSize$[ebx]
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	83 fe 01	 cmp	 esi, 1
  00086	73 0c		 jae	 SHORT $LN3@Encrypt_Pa
  00088	c6 85 5f fa ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  0008f	e9 8d 01 00 00	 jmp	 $LN79@Encrypt_Pa
$LN3@Encrypt_Pa:

; 1432 : 	{
; 1433 : #ifdef _DEBUG
; 1434 : 		TraceError("Type 3 pack file must be bigger than %u bytes (filename: %s)", Encryptor.MandatoryBlockSize(), filename);
; 1435 : #endif
; 1436 : 		return false;
; 1437 : 	}
; 1438 : 
; 1439 : 	BYTE key[32];
; 1440 : 
; 1441 : 	__CreateFileNameKey_Panama(filename, key, sizeof(key));

  00094	6a 20		 push	 32			; 00000020H
  00096	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  00099	8b cf		 mov	 ecx, edi
  0009b	50		 push	 eax
  0009c	ff b5 54 fa ff
	ff		 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  000a2	e8 00 00 00 00	 call	 ?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z ; CEterPack::__CreateFileNameKey_Panama
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000a7	83 bf e8 13 00
	00 10		 cmp	 DWORD PTR [edi+5096], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  000ae	8d 87 d4 13 00
	00		 lea	 eax, DWORD PTR [edi+5076]

; 2145 :         if (_Large_string_engaged()) {

  000b4	72 02		 jb	 SHORT $LN21@Encrypt_Pa

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
$LN21@Encrypt_Pa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1442 : 	Encryptor.SetKeyWithIV(key, sizeof(key), (const BYTE*) m_stIV_Panama.c_str(), 32);

  000b8	6a 20		 push	 32			; 00000020H
  000ba	50		 push	 eax
  000bb	6a 20		 push	 32			; 00000020H
  000bd	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  000c0	50		 push	 eax
  000c1	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$[ebp]
  000c7	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 1445 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000cc	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000d1	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1445 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000d8	3b f0		 cmp	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000da	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+20], 15 ; 0000000fH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1445 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000e1	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000e3	c6 45 b4 00	 mov	 BYTE PTR _tmp$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1445 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000e7	0f 47 f8	 cmova	 edi, eax

; 1446 : 
; 1447 : 	std::string tmp;
; 1448 : 
; 1449 : 	tmp.reserve(cryptSize);

  000ea	57		 push	 edi
  000eb	8d 4d b4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f2	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 1451 : 	CryptoPP::ArraySource(data, cryptSize, true,

  000f7	6a 78		 push	 120			; 00000078H
  000f9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000fe	83 c4 04	 add	 esp, 4
  00101	89 85 54 fa ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00107	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010b	85 c0		 test	 eax, eax
  0010d	74 58		 je	 SHORT $LN9@Encrypt_Pa
  0010f	6a 10		 push	 16			; 00000010H
  00111	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00116	8b f0		 mov	 esi, eax
  00118	83 c4 04	 add	 esp, 4
  0011b	89 b5 4c fa ff
	ff		 mov	 DWORD PTR $T2[ebp], esi
  00121	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00125	85 f6		 test	 esi, esi
  00127	74 1e		 je	 SHORT $LN7@Encrypt_Pa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00129	6a 00		 push	 0
  0012b	8b ce		 mov	 ecx, esi
  0012d	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1072 : 		: m_output(&output) {CRYPTOPP_ASSERT(sizeof(value_type)==1);}

  00132	8d 45 b4	 lea	 eax, DWORD PTR _tmp$[ebp]
  00135	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  0013b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00142	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1451 : 	CryptoPP::ArraySource(data, cryptSize, true,

  00145	eb 02		 jmp	 SHORT $LN8@Encrypt_Pa
$LN7@Encrypt_Pa:
  00147	33 f6		 xor	 esi, esi
$LN8@Encrypt_Pa:
  00149	8b 8d 54 fa ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0014f	8d 85 64 fa ff
	ff		 lea	 eax, DWORD PTR _Encryptor$[ebp+4]
  00155	6a 05		 push	 5
  00157	56		 push	 esi
  00158	50		 push	 eax
  00159	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015d	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00162	8b 73 10	 mov	 esi, DWORD PTR _dataSize$[ebx]
  00165	eb 02		 jmp	 SHORT $LN10@Encrypt_Pa
$LN9@Encrypt_Pa:
  00167	33 c0		 xor	 eax, eax
$LN10@Encrypt_Pa:
  00169	50		 push	 eax
  0016a	6a 01		 push	 1
  0016c	57		 push	 edi
  0016d	ff b5 50 fa ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00173	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00179	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0017d	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  00182	8d 4d 88	 lea	 ecx, DWORD PTR $T5[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00185	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0018f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00196	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1457 : 	if (tmp.length() != cryptSize)

  0019b	39 7d c4	 cmp	 DWORD PTR _tmp$[ebp+16], edi
  0019e	74 09		 je	 SHORT $LN4@Encrypt_Pa
  001a0	c6 85 5f fa ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  001a7	eb 51		 jmp	 SHORT $LN17@Encrypt_Pa
$LN4@Encrypt_Pa:

; 1458 : 	{
; 1459 : #ifdef _DEBUG
; 1460 : 		TraceError("Type 3 pack crypt buffer size error (out %u should be %u)", tmp.length(), cryptSize);
; 1461 : #endif
; 1462 : 		return false;
; 1463 : 	}
; 1464 : 
; 1465 : 	zObj.AllocBuffer(dataSize);

  001a9	8b 8d 58 fa ff
	ff		 mov	 ecx, DWORD PTR _zObj$GSCopy$1$[ebp]
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001b5	83 7d c8 10	 cmp	 DWORD PTR _tmp$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  001b9	8d 45 b4	 lea	 eax, DWORD PTR _tmp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1466 : 	memcpy(zObj.GetBuffer(), tmp.c_str(), cryptSize);

  001bc	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  001bd	0f 43 45 b4	 cmovae	 eax, DWORD PTR _tmp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1466 : 	memcpy(zObj.GetBuffer(), tmp.c_str(), cryptSize);

  001c1	50		 push	 eax
  001c2	8b 85 58 fa ff
	ff		 mov	 eax, DWORD PTR _zObj$GSCopy$1$[ebp]
  001c8	ff 30		 push	 DWORD PTR [eax]
  001ca	e8 00 00 00 00	 call	 _memcpy
  001cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1467 : 
; 1468 : 	if (dataSize - cryptSize > 0)

  001d2	2b f7		 sub	 esi, edi
  001d4	74 1d		 je	 SHORT $LN5@Encrypt_Pa

; 1469 : 		memcpy(zObj.GetBuffer() + cryptSize, data + cryptSize, dataSize - cryptSize);

  001d6	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR _data$GSCopy$1$[ebp]
  001dc	03 c7		 add	 eax, edi
  001de	56		 push	 esi
  001df	50		 push	 eax
  001e0	8b 85 58 fa ff
	ff		 mov	 eax, DWORD PTR _zObj$GSCopy$1$[ebp]
  001e6	8b 00		 mov	 eax, DWORD PTR [eax]
  001e8	03 c7		 add	 eax, edi
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 _memcpy
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@Encrypt_Pa:

; 1471 : 	return true;

  001f3	c6 85 5f fa ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
$LN17@Encrypt_Pa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001fa	8b 45 c8	 mov	 eax, DWORD PTR _tmp$[ebp+20]
  001fd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00200	72 0d		 jb	 SHORT $LN78@Encrypt_Pa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00202	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00203	50		 push	 eax
  00204	ff 75 b4	 push	 DWORD PTR _tmp$[ebp]
  00207	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0020c	83 c4 08	 add	 esp, 8
$LN78@Encrypt_Pa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0020f	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00216	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0021d	c6 45 b4 00	 mov	 BYTE PTR _tmp$[ebp], 0
$LN79@Encrypt_Pa:
  00221	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 676  : 	virtual ~SymmetricCipherFinal() {}

  00227	c7 85 60 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$[ebp], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00231	c7 85 64 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$[ebp+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  0023b	c7 85 68 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$[ebp+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  00245	c7 85 80 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$[ebp+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  0024f	c7 85 88 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$[ebp+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  00259	e8 00 00 00 00	 call	 ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1471 : 	return true;

  0025e	8a 85 5f fa ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
$LN1@Encrypt_Pa:

; 1472 : }

  00264	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00267	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026e	59		 pop	 ecx
  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00274	33 cd		 xor	 ecx, ebp
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	8b e3		 mov	 esp, ebx
  00280	5b		 pop	 ebx
  00281	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$0:
  00000	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::~SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$1:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$2:
  00013	6a 78		 push	 120			; 00000078H
  00015	8b 85 54 fa ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
__unwindfunclet$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$3:
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	c3		 ret	 0
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 48 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1464]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ENDP ; CEterPack::__Encrypt_Panama
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
_TEXT	SEGMENT
$T2 = -1460						; size = 4
$T3 = -1456						; size = 4
_data$GSCopy$1$ = -1452					; size = 4
_zObj$GSCopy$1$ = -1448					; size = 4
$T4 = -1441						; size = 1
_Decryptor$ = -1440					; size = 1304
$T5 = -132						; size = 56
_tmp$ = -76						; size = 24
_key$ = -52						; size = 32
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_data$ = 12						; size = 4
_dataSize$ = 16						; size = 4
_zObj$ = 20						; size = 4
?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z PROC ; CEterPack::__Decrypt_Panama, COMDAT
; _this$ = ecx

; 1475 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec a8 05 00
	00		 sub	 esp, 1448		; 000005a8H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f1		 mov	 esi, ecx

; 1476 : 	if (32 != m_stIV_Panama.length())

  00043	83 be e4 13 00
	00 20		 cmp	 DWORD PTR [esi+5092], 32 ; 00000020H
  0004a	8b 43 0c	 mov	 eax, DWORD PTR _data$[ebx]
  0004d	8b 7b 08	 mov	 edi, DWORD PTR _filename$[ebx]
  00050	89 85 54 fa ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], eax
  00056	8b 43 14	 mov	 eax, DWORD PTR _zObj$[ebx]
  00059	89 85 58 fa ff
	ff		 mov	 DWORD PTR _zObj$GSCopy$1$[ebp], eax
  0005f	74 07		 je	 SHORT $LN2@Decrypt_Pa

; 1477 : 	{
; 1478 : #ifdef _DEBUG
; 1479 : 		TraceError("IV not set (filename: %s)", filename);
; 1480 : #endif
; 1481 : 		return false;

  00061	32 c0		 xor	 al, al
  00063	e9 e0 01 00 00	 jmp	 $LN1@Decrypt_Pa
$LN2@Decrypt_Pa:

; 1482 : 	}
; 1483 : 
; 1484 : 	CryptoPP::PanamaCipher<CryptoPP::LittleEndian>::Decryption Decryptor;

  00068	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@QAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >

; 1485 : 
; 1486 : 	BYTE key[32];
; 1487 : 
; 1488 : 	__CreateFileNameKey_Panama(filename, key, sizeof(key));

  00073	6a 20		 push	 32			; 00000020H
  00075	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007f	50		 push	 eax
  00080	57		 push	 edi
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z ; CEterPack::__CreateFileNameKey_Panama
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00088	83 be e8 13 00
	00 10		 cmp	 DWORD PTR [esi+5096], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0008f	8d 86 d4 13 00
	00		 lea	 eax, DWORD PTR [esi+5076]

; 2145 :         if (_Large_string_engaged()) {

  00095	72 02		 jb	 SHORT $LN19@Decrypt_Pa

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00097	8b 00		 mov	 eax, DWORD PTR [eax]
$LN19@Decrypt_Pa:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1489 : 	Decryptor.SetKeyWithIV(key, sizeof(key), (const BYTE*) m_stIV_Panama.c_str(), 32);

  00099	6a 20		 push	 32			; 00000020H
  0009b	50		 push	 eax
  0009c	6a 20		 push	 32			; 00000020H
  0009e	8d 45 cc	 lea	 eax, DWORD PTR _key$[ebp]
  000a1	50		 push	 eax
  000a2	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$[ebp]
  000a8	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 1491 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000ad	8b 73 10	 mov	 esi, DWORD PTR _dataSize$[ebx]
  000b0	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  000b5	3b f0		 cmp	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1491 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000be	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000c0	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+20], 15 ; 0000000fH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1491 : 	cryptSize = cryptSize > 2048 ? 2048 : cryptSize;

  000c7	0f 47 f8	 cmova	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000ca	c6 45 b4 00	 mov	 BYTE PTR _tmp$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1495 : 	tmp.reserve(cryptSize);

  000ce	57		 push	 edi
  000cf	8d 4d b4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 1497 : 	CryptoPP::ArraySource(data, cryptSize, true,

  000db	6a 78		 push	 120			; 00000078H
  000dd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 85 50 fa ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000eb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ef	85 c0		 test	 eax, eax
  000f1	74 58		 je	 SHORT $LN8@Decrypt_Pa
  000f3	6a 10		 push	 16			; 00000010H
  000f5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000fa	8b f0		 mov	 esi, eax
  000fc	83 c4 04	 add	 esp, 4
  000ff	89 b5 4c fa ff
	ff		 mov	 DWORD PTR $T2[ebp], esi
  00105	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00109	85 f6		 test	 esi, esi
  0010b	74 1e		 je	 SHORT $LN6@Decrypt_Pa
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  0010d	6a 00		 push	 0
  0010f	8b ce		 mov	 ecx, esi
  00111	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1072 : 		: m_output(&output) {CRYPTOPP_ASSERT(sizeof(value_type)==1);}

  00116	8d 45 b4	 lea	 eax, DWORD PTR _tmp$[ebp]
  00119	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  0011f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00126	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1497 : 	CryptoPP::ArraySource(data, cryptSize, true,

  00129	eb 02		 jmp	 SHORT $LN7@Decrypt_Pa
$LN6@Decrypt_Pa:
  0012b	33 f6		 xor	 esi, esi
$LN7@Decrypt_Pa:
  0012d	8b 8d 50 fa ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00133	8d 85 64 fa ff
	ff		 lea	 eax, DWORD PTR _Decryptor$[ebp+4]
  00139	6a 05		 push	 5
  0013b	56		 push	 esi
  0013c	50		 push	 eax
  0013d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00141	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00146	8b 73 10	 mov	 esi, DWORD PTR _dataSize$[ebx]
  00149	eb 02		 jmp	 SHORT $LN9@Decrypt_Pa
$LN8@Decrypt_Pa:
  0014b	33 c0		 xor	 eax, eax
$LN9@Decrypt_Pa:
  0014d	50		 push	 eax
  0014e	6a 01		 push	 1
  00150	57		 push	 edi
  00151	ff b5 54 fa ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00157	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0015d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00161	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  00166	8d 4d 88	 lea	 ecx, DWORD PTR $T5[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00169	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00173	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  0017a	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1503 : 	if (tmp.length() != cryptSize)

  0017f	39 7d c4	 cmp	 DWORD PTR _tmp$[ebp+16], edi
  00182	74 09		 je	 SHORT $LN3@Decrypt_Pa
  00184	c6 85 5f fa ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  0018b	eb 51		 jmp	 SHORT $LN15@Decrypt_Pa
$LN3@Decrypt_Pa:

; 1504 : 	{
; 1505 : #ifdef _DEBUG
; 1506 : 		TraceError("Type 3 pack crypt buffer size error (out %u should be %u)", tmp.length(), cryptSize);
; 1507 : #endif
; 1508 : 		return false;
; 1509 : 	}
; 1510 : 
; 1511 : 	zObj.AllocBuffer(dataSize);

  0018d	8b 8d 58 fa ff
	ff		 mov	 ecx, DWORD PTR _zObj$GSCopy$1$[ebp]
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00199	83 7d c8 10	 cmp	 DWORD PTR _tmp$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0019d	8d 45 b4	 lea	 eax, DWORD PTR _tmp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1512 : 	memcpy(zObj.GetBuffer(), tmp.c_str(), cryptSize);

  001a0	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  001a1	0f 43 45 b4	 cmovae	 eax, DWORD PTR _tmp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1512 : 	memcpy(zObj.GetBuffer(), tmp.c_str(), cryptSize);

  001a5	50		 push	 eax
  001a6	8b 85 58 fa ff
	ff		 mov	 eax, DWORD PTR _zObj$GSCopy$1$[ebp]
  001ac	ff 30		 push	 DWORD PTR [eax]
  001ae	e8 00 00 00 00	 call	 _memcpy
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1513 : 
; 1514 : 	if (dataSize - cryptSize > 0)

  001b6	2b f7		 sub	 esi, edi
  001b8	74 1d		 je	 SHORT $LN4@Decrypt_Pa

; 1515 : 		memcpy(zObj.GetBuffer() + cryptSize, data + cryptSize, dataSize - cryptSize);

  001ba	8b 85 54 fa ff
	ff		 mov	 eax, DWORD PTR _data$GSCopy$1$[ebp]
  001c0	03 c7		 add	 eax, edi
  001c2	56		 push	 esi
  001c3	50		 push	 eax
  001c4	8b 85 58 fa ff
	ff		 mov	 eax, DWORD PTR _zObj$GSCopy$1$[ebp]
  001ca	8b 00		 mov	 eax, DWORD PTR [eax]
  001cc	03 c7		 add	 eax, edi
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 _memcpy
  001d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Decrypt_Pa:

; 1517 : 	return true;

  001d7	c6 85 5f fa ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
$LN15@Decrypt_Pa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001de	8b 45 c8	 mov	 eax, DWORD PTR _tmp$[ebp+20]
  001e1	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001e4	72 0d		 jb	 SHORT $LN76@Decrypt_Pa

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001e6	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e7	50		 push	 eax
  001e8	ff 75 b4	 push	 DWORD PTR _tmp$[ebp]
  001eb	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001f0	83 c4 08	 add	 esp, 8
$LN76@Decrypt_Pa:
  001f3	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  001f9	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00200	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00207	c6 45 b4 00	 mov	 BYTE PTR _tmp$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\strciphr.h

; 676  : 	virtual ~SymmetricCipherFinal() {}

  0020b	c7 85 60 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$[ebp], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00215	c7 85 64 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$[ebp+4], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6BStreamTransformation@1@@
  0021f	c7 85 68 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$[ebp+8], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B@
  00229	c7 85 80 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$[ebp+32], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$AdditiveCipherConcretePolicy@I$07$00UAdditiveCipherAbstractPolicy@CryptoPP@@@1@@
  00233	c7 85 88 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$[ebp+40], OFFSET ??_7?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@6B?$Panama@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@1@@
  0023d	e8 00 00 00 00	 call	 ??1?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1517 : 	return true;

  00242	8a 85 5f fa ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
$LN1@Decrypt_Pa:

; 1518 : }

  00248	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00252	59		 pop	 ecx
  00253	5f		 pop	 edi
  00254	5e		 pop	 esi
  00255	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00258	33 cd		 xor	 ecx, ebp
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	8b e3		 mov	 esp, ebx
  00264	5b		 pop	 ebx
  00265	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$0:
  00000	8d 8d 60 fa ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$SymmetricCipherFinal@V?$ConcretePolicyHolder@V?$PanamaCipherPolicy@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VSymmetricCipher@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@U?$PanamaCipherInfo@U?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@@2@@CryptoPP@@UAE@XZ ; CryptoPP::SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >::~SymmetricCipherFinal<CryptoPP::ConcretePolicyHolder<CryptoPP::PanamaCipherPolicy<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> >,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::SymmetricCipher> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::PanamaCipherInfo<CryptoPP::EnumToType<enum CryptoPP::ByteOrder,0> > >
__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$1:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$2:
  00013	6a 78		 push	 120			; 00000078H
  00015	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
__unwindfunclet$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z$3:
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	c3		 ret	 0
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 48 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1464]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ENDP ; CEterPack::__Decrypt_Panama
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z
_TEXT	SEGMENT
$T2 = -104						; size = 4
$T3 = -104						; size = 4
tv1691 = -100						; size = 4
$T4 = -100						; size = 4
$T5 = -100						; size = 4
$T6 = -96						; size = 56
$T7 = -96						; size = 56
_SrcStringForKey$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_key$ = 12						; size = 4
_keySize$ = 16						; size = 4
?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z PROC ; CEterPack::__CreateFileNameKey_Panama, COMDAT
; _this$ = ecx

; 1347 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1348 : 	if (keySize != 32)

  0002b	83 7d 10 20	 cmp	 DWORD PTR _keySize$[ebp], 32 ; 00000020H
  0002f	8b 55 08	 mov	 edx, DWORD PTR _filename$[ebp]
  00032	0f 85 71 02 00
	00		 jne	 $LN284@CreateFile
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00038	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SrcStringForKey$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00041	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _SrcStringForKey$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00048	c6 45 d8 00	 mov	 BYTE PTR _SrcStringForKey$[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0004f	90		 npad	 1
$LL290@CreateFile:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL290@CreateFile
  00057	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	51		 push	 ecx
  0005a	52		 push	 edx
  0005b	8d 4d d8	 lea	 ecx, DWORD PTR _SrcStringForKey$[ebp]
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2145 :         if (_Large_string_engaged()) {

  00063	83 7d ec 10	 cmp	 DWORD PTR _SrcStringForKey$[ebp+20], 16 ; 00000010H
  00067	8d 45 d8	 lea	 eax, DWORD PTR _SrcStringForKey$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1352 : 	unsigned int idx = GetCRC32(SrcStringForKey.c_str(), SrcStringForKey.length()) & 3;

  0006a	ff 75 e8	 push	 DWORD PTR _SrcStringForKey$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0006d	0f 43 45 d8	 cmovae	 eax, DWORD PTR _SrcStringForKey$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1352 : 	unsigned int idx = GetCRC32(SrcStringForKey.c_str(), SrcStringForKey.length()) & 3;

  00071	50		 push	 eax
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32

; 1357 : 	static CryptoPP::Tiger tiger;

  0007e	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00085	8b f0		 mov	 esi, eax
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  0008d	83 c4 08	 add	 esp, 8
  00090	83 e6 03	 and	 esi, 3
  00093	33 ff		 xor	 edi, edi
  00095	33 db		 xor	 ebx, ebx
  00097	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  000a0	89 45 9c	 mov	 DWORD PTR tv1691[ebp], eax
  000a3	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  000a9	0f 8f 18 02 00
	00		 jg	 $LN297@CreateFile
$LN2@CreateFile:

; 1358 : 	static CryptoPP::SHA1 sha1;

  000af	8b 4d 9c	 mov	 ecx, DWORD PTR tv1691[ebp]
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  000b7	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000bd	0f 8f c3 02 00
	00		 jg	 $LN298@CreateFile
  000c3	eb 03		 jmp	 SHORT $LN3@CreateFile
$LN294@CreateFile:

; 1359 : 	static CryptoPP::RIPEMD128 ripemd128;

  000c5	8b 4d 9c	 mov	 ecx, DWORD PTR tv1691[ebp]
$LN3@CreateFile:
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  000cd	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000d3	0f 8f 6d 03 00
	00		 jg	 $LN299@CreateFile
  000d9	eb 03		 jmp	 SHORT $LN4@CreateFile
$LN293@CreateFile:

; 1360 : 	static CryptoPP::Whirlpool whirlpool;

  000db	8b 4d 9c	 mov	 ecx, DWORD PTR tv1691[ebp]
$LN4@CreateFile:
  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  000e3	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000e9	0f 8f 17 04 00
	00		 jg	 $LN300@CreateFile
$LN5@CreateFile:

; 1361 : 
; 1362 : 	switch (idx & 3)

  000ef	83 e6 03	 and	 esi, 3
  000f2	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN291@CreateFile[esi*4]
$LN11@CreateFile:

; 1363 : 	{
; 1364 : 		case 0:
; 1365 : 			hm1 = &whirlpool;

  000f9	bf 00 00 00 00	 mov	 edi, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A

; 1366 : 			break;

  000fe	eb 13		 jmp	 SHORT $LN6@CreateFile
$LN12@CreateFile:

; 1367 : 
; 1368 : 		case 1:
; 1369 : 			hm1 = &tiger;

  00100	bf 00 00 00 00	 mov	 edi, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A

; 1370 : 			break;

  00105	eb 0c		 jmp	 SHORT $LN6@CreateFile
$LN13@CreateFile:

; 1371 : 
; 1372 : 		case 2:
; 1373 : 			hm1 = &sha1;

  00107	bf 00 00 00 00	 mov	 edi, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A

; 1374 : 			break;

  0010c	eb 05		 jmp	 SHORT $LN6@CreateFile
$LN14@CreateFile:

; 1375 : 
; 1376 : 		case 3:
; 1377 : 			hm1 = &ripemd128;

  0010e	bf 00 00 00 00	 mov	 edi, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A
$LN6@CreateFile:

; 1381 : 	CryptoPP::StringSource(SrcStringForKey, true,

  00113	6a 6c		 push	 108			; 0000006cH
  00115	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0011a	83 c4 04	 add	 esp, 4
  0011d	89 45 9c	 mov	 DWORD PTR $T5[ebp], eax
  00120	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00124	85 c0		 test	 eax, eax
  00126	74 6a		 je	 SHORT $LN22@CreateFile
  00128	6a 20		 push	 32			; 00000020H
  0012a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0012f	8b f0		 mov	 esi, eax
  00131	83 c4 04	 add	 esp, 4
  00134	89 75 98	 mov	 DWORD PTR $T3[ebp], esi
  00137	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0013b	85 f6		 test	 esi, esi
  0013d	74 33		 je	 SHORT $LN20@CreateFile
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  0013f	6a 00		 push	 0
  00141	8b ce		 mov	 ecx, esi
  00143	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1151 : 		: m_buf(buf), m_size(size), m_total(0) {}

  00148	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0014b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArraySink@CryptoPP@@6BAlgorithm@1@@
  00151	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7ArraySink@CryptoPP@@6BWaitable@1@@
  00158	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0015b	c7 46 10 10 00
	00 00		 mov	 DWORD PTR [esi+16], 16	; 00000010H
  00162	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00169	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1381 : 	CryptoPP::StringSource(SrcStringForKey, true,

  00170	eb 02		 jmp	 SHORT $LN21@CreateFile
$LN20@CreateFile:
  00172	33 f6		 xor	 esi, esi
$LN21@CreateFile:
  00174	8b 4d 9c	 mov	 ecx, DWORD PTR $T5[ebp]
  00177	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0017c	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  00181	6a ff		 push	 -1
  00183	6a 00		 push	 0
  00185	56		 push	 esi
  00186	57		 push	 edi
  00187	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0018b	e8 00 00 00 00	 call	 ??0HashFilter@CryptoPP@@QAE@AAVHashTransformation@1@PAVBufferedTransformation@1@_NHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z ; CryptoPP::HashFilter::HashFilter
  00190	eb 02		 jmp	 SHORT $LN23@CreateFile
$LN22@CreateFile:
  00192	33 c0		 xor	 eax, eax
$LN23@CreateFile:
  00194	50		 push	 eax
  00195	6a 01		 push	 1
  00197	8d 45 d8	 lea	 eax, DWORD PTR _SrcStringForKey$[ebp]
  0019a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0019e	50		 push	 eax
  0019f	8d 4d a0	 lea	 ecx, DWORD PTR $T7[ebp]
  001a2	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  001a7	8d 4d ac	 lea	 ecx, DWORD PTR $T7[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  001aa	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  001b1	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  001b8	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1389 : 	unsigned int idx2 = *(unsigned int*) key;

  001bd	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  001c0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1390 : 
; 1391 : 	switch (idx2 & 3)

  001c2	83 e0 03	 and	 eax, 3
  001c5	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN292@CreateFile[eax*4]
$LN15@CreateFile:

; 1392 : 	{
; 1393 : 		case 0:
; 1394 : 			hm2 = &sha1;

  001cc	bb 00 00 00 00	 mov	 ebx, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A

; 1395 : 			break;

  001d1	eb 13		 jmp	 SHORT $LN8@CreateFile
$LN16@CreateFile:

; 1396 : 
; 1397 : 		case 1:
; 1398 : 			hm2 = &ripemd128;

  001d3	bb 00 00 00 00	 mov	 ebx, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A

; 1399 : 			break;

  001d8	eb 0c		 jmp	 SHORT $LN8@CreateFile
$LN17@CreateFile:

; 1400 : 
; 1401 : 		case 2:
; 1402 : 			hm2 = &whirlpool;

  001da	bb 00 00 00 00	 mov	 ebx, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A

; 1403 : 			break;

  001df	eb 05		 jmp	 SHORT $LN8@CreateFile
$LN18@CreateFile:

; 1404 : 
; 1405 : 		case 3:
; 1406 : 			hm2 = &tiger;

  001e1	bb 00 00 00 00	 mov	 ebx, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A
$LN8@CreateFile:

; 1410 : 	CryptoPP::StringSource(SrcStringForKey, true,

  001e6	6a 6c		 push	 108			; 0000006cH
  001e8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ed	8b f8		 mov	 edi, eax
  001ef	83 c4 04	 add	 esp, 4
  001f2	89 7d 98	 mov	 DWORD PTR $T2[ebp], edi
  001f5	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  001f9	85 ff		 test	 edi, edi
  001fb	74 6c		 je	 SHORT $LN26@CreateFile
  001fd	6a 20		 push	 32			; 00000020H
  001ff	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00204	8b f0		 mov	 esi, eax
  00206	83 c4 04	 add	 esp, 4
  00209	89 75 9c	 mov	 DWORD PTR $T4[ebp], esi
  0020c	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00210	85 f6		 test	 esi, esi
  00212	74 36		 je	 SHORT $LN24@CreateFile
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00214	6a 00		 push	 0
  00216	8b ce		 mov	 ecx, esi
  00218	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1410 : 	CryptoPP::StringSource(SrcStringForKey, true,

  0021d	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00220	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 1151 : 		: m_buf(buf), m_size(size), m_total(0) {}

  00223	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArraySink@CryptoPP@@6BAlgorithm@1@@
  00229	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7ArraySink@CryptoPP@@6BWaitable@1@@
  00230	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00233	c7 46 10 10 00
	00 00		 mov	 DWORD PTR [esi+16], 16	; 00000010H
  0023a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00241	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1410 : 	CryptoPP::StringSource(SrcStringForKey, true,

  00248	eb 02		 jmp	 SHORT $LN25@CreateFile
$LN24@CreateFile:
  0024a	33 f6		 xor	 esi, esi
$LN25@CreateFile:
  0024c	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  00251	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  00256	6a ff		 push	 -1
  00258	6a 00		 push	 0
  0025a	56		 push	 esi
  0025b	53		 push	 ebx
  0025c	8b cf		 mov	 ecx, edi
  0025e	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00262	e8 00 00 00 00	 call	 ??0HashFilter@CryptoPP@@QAE@AAVHashTransformation@1@PAVBufferedTransformation@1@_NHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z ; CryptoPP::HashFilter::HashFilter
  00267	eb 02		 jmp	 SHORT $LN27@CreateFile
$LN26@CreateFile:
  00269	33 c0		 xor	 eax, eax
$LN27@CreateFile:
  0026b	50		 push	 eax
  0026c	6a 01		 push	 1
  0026e	8d 45 d8	 lea	 eax, DWORD PTR _SrcStringForKey$[ebp]
  00271	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00275	50		 push	 eax
  00276	8d 4d a0	 lea	 ecx, DWORD PTR $T6[ebp]
  00279	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  0027e	8d 4d ac	 lea	 ecx, DWORD PTR $T6[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00281	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00288	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  0028f	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00294	8b 45 ec	 mov	 eax, DWORD PTR _SrcStringForKey$[ebp+20]
  00297	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0029a	72 0d		 jb	 SHORT $LN284@CreateFile

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0029c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029d	50		 push	 eax
  0029e	ff 75 d8	 push	 DWORD PTR _SrcStringForKey$[ebp]
  002a1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002a6	83 c4 08	 add	 esp, 8
$LN284@CreateFile:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1417 : }

  002a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b3	59		 pop	 ecx
  002b4	5f		 pop	 edi
  002b5	5e		 pop	 esi
  002b6	5b		 pop	 ebx
  002b7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	33 cd		 xor	 ecx, ebp
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c2 0c 00	 ret	 12			; 0000000cH
$LN297@CreateFile:

; 1357 : 	static CryptoPP::Tiger tiger;

  002c7	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  002cc	e8 00 00 00 00	 call	 __Init_thread_header
  002d1	83 c4 04	 add	 esp, 4
  002d4	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA, -1
  002db	0f 85 ce fd ff
	ff		 jne	 $LN2@CreateFile
  002e1	6a 01		 push	 1
  002e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A
  002e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002ec	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  002f1	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  002f4	c7 05 60 00 00
	00 ff ff ff 1f	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+96, 536870911 ; 1fffffffH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 43   : 	IteratedHashBase() : m_countLo(0), m_countHi(0) {}

  002fe	66 0f 13 05 08
	00 00 00	 movlpd	 QWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+8, xmm0
  00306	66 0f 13 05 10
	00 00 00	 movlpd	 QWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+16, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0030e	c7 05 64 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+100, 8

; 597  : 			m_allocated = true;

  00318	c6 05 59 00 00
	00 01		 mov	 BYTE PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+89, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0031f	c7 05 68 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+104, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+24
  00329	c7 05 b8 00 00
	00 ff ff ff 1f	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+184, 536870911 ; 1fffffffH
  00333	c7 05 bc 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+188, 8

; 597  : 			m_allocated = true;

  0033d	c6 05 b1 00 00
	00 01		 mov	 BYTE PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+177, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00344	c7 05 c0 00 00
	00 70 00 00 00	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+192, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+112
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  0034e	68 70 00 00 00	 push	 OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+112

; 190  : 	IteratedHashWithStaticTransform() {this->Init();}

  00353	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00357	e8 00 00 00 00	 call	 ?InitState@Tiger@CryptoPP@@SAXPA_K@Z ; CryptoPP::Tiger::InitState
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1357 : 	static CryptoPP::Tiger tiger;

  0035c	68 00 00 00 00	 push	 OFFSET ??__Ftiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'tiger''
  00361	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A, OFFSET ??_7Tiger@CryptoPP@@6B@
  0036b	e8 00 00 00 00	 call	 _atexit
  00370	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  00375	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00379	e8 00 00 00 00	 call	 __Init_thread_footer
  0037e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00381	e9 29 fd ff ff	 jmp	 $LN2@CreateFile
$LN298@CreateFile:

; 1358 : 	static CryptoPP::SHA1 sha1;

  00386	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  0038b	e8 00 00 00 00	 call	 __Init_thread_header
  00390	83 c4 04	 add	 esp, 4
  00393	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA, -1
  0039a	0f 85 25 fd ff
	ff		 jne	 $LN294@CreateFile
  003a0	6a 01		 push	 1
  003a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A
  003a7	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  003ab	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 43   : 	IteratedHashBase() : m_countLo(0), m_countHi(0) {}

  003b0	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+4, 0
  003ba	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+8, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  003c4	c7 05 58 00 00
	00 ff ff ff 3f	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+88, 1073741823 ; 3fffffffH
  003ce	c7 05 5c 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+92, 16 ; 00000010H

; 597  : 			m_allocated = true;

  003d8	c6 05 51 00 00
	00 01		 mov	 BYTE PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+81, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  003df	c7 05 60 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+96, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+16
  003e9	c7 05 b0 00 00
	00 ff ff ff 3f	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+176, 1073741823 ; 3fffffffH
  003f3	c7 05 b4 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+180, 16 ; 00000010H

; 597  : 			m_allocated = true;

  003fd	c6 05 a9 00 00
	00 01		 mov	 BYTE PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+169, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00404	c7 05 b8 00 00
	00 68 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+184, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+104
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  0040e	68 68 00 00 00	 push	 OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+104

; 190  : 	IteratedHashWithStaticTransform() {this->Init();}

  00413	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00417	e8 00 00 00 00	 call	 ?InitState@SHA1@CryptoPP@@SAXPAI@Z ; CryptoPP::SHA1::InitState
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1358 : 	static CryptoPP::SHA1 sha1;

  0041c	68 00 00 00 00	 push	 OFFSET ??__Fsha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'sha1''
  00421	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A, OFFSET ??_7SHA1@CryptoPP@@6B@
  0042b	e8 00 00 00 00	 call	 _atexit
  00430	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  00435	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00439	e8 00 00 00 00	 call	 __Init_thread_footer
  0043e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00441	e9 7f fc ff ff	 jmp	 $LN294@CreateFile
$LN299@CreateFile:

; 1359 : 	static CryptoPP::RIPEMD128 ripemd128;

  00446	68 00 00 00 00	 push	 OFFSET ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  0044b	e8 00 00 00 00	 call	 __Init_thread_header
  00450	83 c4 04	 add	 esp, 4
  00453	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA, -1
  0045a	0f 85 7b fc ff
	ff		 jne	 $LN293@CreateFile
  00460	6a 01		 push	 1
  00462	b9 00 00 00 00	 mov	 ecx, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A
  00467	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0046b	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 43   : 	IteratedHashBase() : m_countLo(0), m_countHi(0) {}

  00470	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+4, 0
  0047a	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+8, 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00484	c7 05 58 00 00
	00 ff ff ff 3f	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+88, 1073741823 ; 3fffffffH
  0048e	c7 05 5c 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+92, 16 ; 00000010H

; 597  : 			m_allocated = true;

  00498	c6 05 51 00 00
	00 01		 mov	 BYTE PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+81, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0049f	c7 05 60 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+96, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+16
  004a9	c7 05 b0 00 00
	00 ff ff ff 3f	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+176, 1073741823 ; 3fffffffH
  004b3	c7 05 b4 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+180, 16 ; 00000010H

; 597  : 			m_allocated = true;

  004bd	c6 05 a9 00 00
	00 01		 mov	 BYTE PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+169, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  004c4	c7 05 b8 00 00
	00 68 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+184, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+104
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  004ce	68 68 00 00 00	 push	 OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+104

; 190  : 	IteratedHashWithStaticTransform() {this->Init();}

  004d3	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  004d7	e8 00 00 00 00	 call	 ?InitState@RIPEMD128@CryptoPP@@SAXPAI@Z ; CryptoPP::RIPEMD128::InitState
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1359 : 	static CryptoPP::RIPEMD128 ripemd128;

  004dc	68 00 00 00 00	 push	 OFFSET ??__Fripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'ripemd128''
  004e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A, OFFSET ??_7RIPEMD128@CryptoPP@@6B@
  004eb	e8 00 00 00 00	 call	 _atexit
  004f0	68 00 00 00 00	 push	 OFFSET ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  004f5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004f9	e8 00 00 00 00	 call	 __Init_thread_footer
  004fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00501	e9 d5 fb ff ff	 jmp	 $LN293@CreateFile
$LN300@CreateFile:

; 1360 : 	static CryptoPP::Whirlpool whirlpool;

  00506	68 00 00 00 00	 push	 OFFSET ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  0050b	e8 00 00 00 00	 call	 __Init_thread_header
  00510	83 c4 04	 add	 esp, 4
  00513	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA, -1
  0051a	0f 85 cf fb ff
	ff		 jne	 $LN5@CreateFile
  00520	6a 01		 push	 1
  00522	b9 00 00 00 00	 mov	 ecx, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A
  00527	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0052b	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00530	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00533	c7 05 60 00 00
	00 ff ff ff 1f	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+96, 536870911 ; 1fffffffH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 43   : 	IteratedHashBase() : m_countLo(0), m_countHi(0) {}

  0053d	66 0f 13 05 08
	00 00 00	 movlpd	 QWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+8, xmm0
  00545	66 0f 13 05 10
	00 00 00	 movlpd	 QWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+16, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0054d	c7 05 64 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+100, 8

; 597  : 			m_allocated = true;

  00557	c6 05 59 00 00
	00 01		 mov	 BYTE PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+89, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0055e	c7 05 68 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+104, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+24
  00568	c7 05 b8 00 00
	00 ff ff ff 1f	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+184, 536870911 ; 1fffffffH
  00572	c7 05 bc 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+188, 8

; 597  : 			m_allocated = true;

  0057c	c6 05 b1 00 00
	00 01		 mov	 BYTE PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+177, 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00583	c7 05 c0 00 00
	00 70 00 00 00	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+192, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+112
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\cryptopp\iterhash.h

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  0058d	68 70 00 00 00	 push	 OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+112

; 190  : 	IteratedHashWithStaticTransform() {this->Init();}

  00592	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 192  : 	void Init() {T_Transform::InitState(this->m_state);}

  00596	e8 00 00 00 00	 call	 ?InitState@Whirlpool@CryptoPP@@SAXPA_K@Z ; CryptoPP::Whirlpool::InitState
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1360 : 	static CryptoPP::Whirlpool whirlpool;

  0059b	68 00 00 00 00	 push	 OFFSET ??__Fwhirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@YAXXZ ; `CEterPack::__CreateFileNameKey_Panama'::`2'::`dynamic atexit destructor for 'whirlpool''
  005a0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A, OFFSET ??_7Whirlpool@CryptoPP@@6B@
  005aa	e8 00 00 00 00	 call	 _atexit
  005af	68 00 00 00 00	 push	 OFFSET ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  005b4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005b8	e8 00 00 00 00	 call	 __Init_thread_footer
  005bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c0	e9 2a fb ff ff	 jmp	 $LN5@CreateFile
  005c5	0f 1f 00	 npad	 3
$LN291@CreateFile:

; 1417 : }

  005c8	00 00 00 00	 DD	 $LN11@CreateFile
  005cc	00 00 00 00	 DD	 $LN12@CreateFile
  005d0	00 00 00 00	 DD	 $LN13@CreateFile
  005d4	00 00 00 00	 DD	 $LN14@CreateFile
$LN292@CreateFile:
  005d8	00 00 00 00	 DD	 $LN15@CreateFile
  005dc	00 00 00 00	 DD	 $LN16@CreateFile
  005e0	00 00 00 00	 DD	 $LN17@CreateFile
  005e4	00 00 00 00	 DD	 $LN18@CreateFile
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _SrcStringForKey$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$5:
  00008	6a 6c		 push	 108			; 0000006cH
  0000a	8b 45 9c	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$6:
  00017	6a 20		 push	 32			; 00000020H
  00019	8b 45 98	 mov	 eax, DWORD PTR $T3[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
  00025	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$8:
  00026	6a 6c		 push	 108			; 0000006cH
  00028	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8
  00034	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$9:
  00035	6a 20		 push	 32			; 00000020H
  00037	8b 45 9c	 mov	 eax, DWORD PTR $T4[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00040	83 c4 08	 add	 esp, 8
  00043	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$1:
  00044	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  00049	e8 00 00 00 00	 call	 __Init_thread_abort
  0004e	59		 pop	 ecx
  0004f	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$12:
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A
  00055	e9 00 00 00 00	 jmp	 ??1?$ClonableImpl@VTiger@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VTiger@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$13:
  0005a	b9 70 00 00 00	 mov	 ecx, OFFSET ?tiger@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VTiger@CryptoPP@@A+112
  0005f	e9 00 00 00 00	 jmp	 ??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$2:
  00064	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  00069	e8 00 00 00 00	 call	 __Init_thread_abort
  0006e	59		 pop	 ecx
  0006f	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$18:
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A
  00075	e9 00 00 00 00	 jmp	 ??1?$ClonableImpl@VSHA1@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VSHA1@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$19:
  0007a	b9 68 00 00 00	 mov	 ecx, OFFSET ?sha1@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VSHA1@CryptoPP@@A+104
  0007f	e9 00 00 00 00	 jmp	 ??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$3:
  00084	68 00 00 00 00	 push	 OFFSET ?$TSS2@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  00089	e8 00 00 00 00	 call	 __Init_thread_abort
  0008e	59		 pop	 ecx
  0008f	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$24:
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A
  00095	e9 00 00 00 00	 jmp	 ??1?$ClonableImpl@VRIPEMD128@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@IU?$EnumToType@W4ByteOrder@CryptoPP@@$0A@@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VRIPEMD128@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$25:
  0009a	b9 68 00 00 00	 mov	 ecx, OFFSET ?ripemd128@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VRIPEMD128@CryptoPP@@A+104
  0009f	e9 00 00 00 00	 jmp	 ??1?$FixedSizeAlignedSecBlock@I$0BA@$0A@@CryptoPP@@QAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$4:
  000a4	68 00 00 00 00	 push	 OFFSET ?$TSS3@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4HA
  000a9	e8 00 00 00 00	 call	 __Init_thread_abort
  000ae	59		 pop	 ecx
  000af	c3		 ret	 0
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$30:
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A
  000b5	e9 00 00 00 00	 jmp	 ??1?$ClonableImpl@VWhirlpool@CryptoPP@@V?$AlgorithmImpl@V?$IteratedHash@_KU?$EnumToType@W4ByteOrder@CryptoPP@@$00@CryptoPP@@$0EA@VHashTransformation@2@@CryptoPP@@VWhirlpool@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z$31:
  000ba	b9 70 00 00 00	 mov	 ecx, OFFSET ?whirlpool@?1??__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z@4VWhirlpool@CryptoPP@@A+112
  000bf	e9 00 00 00 00	 jmp	 ??1?$FixedSizeAlignedSecBlock@_K$07$0A@@CryptoPP@@QAE@XZ
  000c4	cc		 int	 3
  000c5	cc		 int	 3
  000c6	cc		 int	 3
  000c7	cc		 int	 3
  000c8	cc		 int	 3
__ehhandler$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z:
  000c9	90		 npad	 1
  000ca	90		 npad	 1
  000cb	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000cf	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000d2	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  000d5	33 c8		 xor	 ecx, eax
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000df	33 c8		 xor	 ecx, eax
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z
  000eb	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__CreateFileNameKey_Panama@CEterPack@@AAEXPBDPAEI@Z ENDP ; CEterPack::__CreateFileNameKey_Panama
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ PROC ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >, COMDAT
; _this$ = ecx

; 1045 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 328  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1051 :     }

  00036	c3		 ret	 0
??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ENDP ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??0?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Newhead$1 = -4					; size = 4
??0?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ PROC ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >, COMDAT
; _this$ = ecx

; 804  :     list() : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00008	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00010	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00017	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  0001c	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0001e	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	89 75 fc	 mov	 DWORD PTR __Newhead$1[ebp], esi
  00026	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0002b	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  0002e	50		 push	 eax
  0002f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * &>
  00038	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  0003b	89 37		 mov	 DWORD PTR [edi], esi

; 805  :         _Alloc_sentinel_and_proxy();
; 806  :     }

  0003d	8b c7		 mov	 eax, edi
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ENDP ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 1805 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?erase@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@U4523@@Z
_TEXT	SEGMENT
_next$1$ = -8						; size = 4
_prev$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 4
?erase@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@U4523@@Z PROC ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::erase, COMDAT
; _this$ = ecx

; 1699 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1702 :       node_pointer next = table::next_node(node);

  00006	8b 55 0c	 mov	 edx, DWORD PTR _position$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  0000f	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1702 :       node_pointer next = table::next_node(node);

  00012	89 45 f8	 mov	 DWORD PTR _next$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00015	81 e6 ff ff ff
	7f		 and	 esi, 2147483647		; 7fffffffH

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  0001b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1699 :     {

  0001e	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  0001f	8b 3c b0	 mov	 edi, DWORD PTR [eax+esi*4]
  00022	89 7d fc	 mov	 DWORD PTR _prev$1$[ebp], edi

; 4058 :           while (prev->next_ != i)

  00025	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00027	3b ca		 cmp	 ecx, edx
  00029	74 12		 je	 SHORT $LN7@erase
  0002b	0f 1f 44 00 00	 npad	 5
$LL6@erase:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]

; 4059 :             prev = prev->next_;

  00032	8b f9		 mov	 edi, ecx
  00034	89 4d fc	 mov	 DWORD PTR _prev$1$[ebp], ecx
  00037	8b c8		 mov	 ecx, eax
  00039	3b c2		 cmp	 eax, edx
  0003b	75 f3		 jne	 SHORT $LL6@erase
$LN7@erase:

; 4060 : 
; 4061 :           // Delete the nodes.
; 4062 :           prev->next_ = j;

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _next$1$[ebp]
  00040	89 07		 mov	 DWORD PTR [edi], eax
$LL10@erase:

; 4063 :           do {
; 4064 :             node_pointer next = next_node(i);

  00042	8b 3a		 mov	 edi, DWORD PTR [edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00044	6a 10		 push	 16			; 00000010H
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4066 :             --size_;

  0004c	ff 4b 08	 dec	 DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004f	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3390 :           std::size_t bucket_index2 = bucket_index;

  00052	8b c6		 mov	 eax, esi

; 3391 : 
; 3392 :           if (next) {

  00054	85 ff		 test	 edi, edi
  00056	74 17		 je	 SHORT $LN60@erase

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00058	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0005b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3396 :             if (bucket_index == bucket_index2) {

  00060	3b f0		 cmp	 esi, eax
  00062	74 1d		 je	 SHORT $LN59@erase

; 3397 :               return bucket_index2;
; 3398 :             }
; 3399 : 
; 3400 :             // Update the bucket containing next.
; 3401 :             get_bucket_pointer(bucket_index2)->next_ = prev;

  00064	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00067	8b 55 fc	 mov	 edx, DWORD PTR _prev$1$[ebp]
  0006a	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  0006d	eb 03		 jmp	 SHORT $LN37@erase
$LN60@erase:

; 3391 : 
; 3392 :           if (next) {

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _prev$1$[ebp]
$LN37@erase:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00072	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]

; 3406 :           if (this_bucket->next_ == prev) {

  00075	39 14 b1	 cmp	 DWORD PTR [ecx+esi*4], edx
  00078	75 07		 jne	 SHORT $LN59@erase

; 3407 :             this_bucket->next_ = link_pointer();

  0007a	c7 04 b1 00 00
	00 00		 mov	 DWORD PTR [ecx+esi*4], 0
$LN59@erase:

; 4069 :           } while (i != j);

  00081	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  00084	8b f0		 mov	 esi, eax
  00086	8b d7		 mov	 edx, edi
  00088	3b f9		 cmp	 edi, ecx
  0008a	75 b6		 jne	 SHORT $LL10@erase

; 2371 :           : node_(static_cast<node_pointer>(x))

  0008c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1705 :     }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00092	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1705 :     }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
?erase@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@U4523@@Z ENDP ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::~unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::~unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 90	 lea	 ebx, DWORD PTR [eax+edx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL4@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00007	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	74 65		 je	 SHORT $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00013	8b da		 mov	 ebx, edx
  00015	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN52@table
  0001c	0f 1f 40 00	 npad	 4
$LL4@table:

; 3357 :               node_pointer next = next_node(n);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00022	6a 10		 push	 16			; 00000010H
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002d	8b c6		 mov	 eax, esi
  0002f	85 f6		 test	 esi, esi
  00031	75 ed		 jne	 SHORT $LL4@table
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b da		 mov	 ebx, edx
  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN52@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003b	8b c6		 mov	 eax, esi
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00040	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00043	3b d9		 cmp	 ebx, ecx
  00045	0f 44 f0	 cmove	 esi, eax
  00048	0f 44 d3	 cmove	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004b	8d 04 b5 04 00
	00 00		 lea	 eax, DWORD PTR [esi*4+4]
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00059	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00063	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  0006a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
$LN6@table:
  00073	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
tv459 = -8						; size = 8
_f$ = -8						; size = 8
_dummy_node$1$ = 8					; size = 4
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 3c		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 d2 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003a	8b f0		 mov	 esi, eax

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00046	50		 push	 eax
  00047	ff 77 14	 push	 DWORD PTR [edi+20]
  0004a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  00052	eb 25		 jmp	 SHORT $LN8@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  00054	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00061	0f 87 98 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00067	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00077	8b f0		 mov	 esi, eax
$LN8@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00079	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0007c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0007f	85 f6		 test	 esi, esi
  00081	74 55		 je	 SHORT $LN51@create_buc
  00083	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  0008f	8b c3		 mov	 eax, ebx
  00091	83 ec 08	 sub	 esp, 8
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000a7	f2 0f 11 4d f8	 movsd	 QWORD PTR tv459[ebp], xmm1
  000ac	dd 45 f8	 fld	 QWORD PTR tv459[ebp]
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _ceil
  000b7	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  000ba	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000bf	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  000c2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  000ca	72 05		 jb	 SHORT $LN55@create_buc
  000cc	83 c8 ff	 or	 eax, -1
  000cf	eb 09		 jmp	 SHORT $LN52@create_buc
$LN55@create_buc:
  000d1	e8 00 00 00 00	 call	 __dtoui3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000d6	eb 02		 jmp	 SHORT $LN52@create_buc
$LN51@create_buc:
  000d8	33 c0		 xor	 eax, eax
$LN52@create_buc:
  000da	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  000dd	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000e0	3b f0		 cmp	 esi, eax
  000e2	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  000e4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000ea	83 c6 04	 add	 esi, 4
  000ed	3b f0		 cmp	 esi, eax
  000ef	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 08		 mov	 DWORD PTR [eax], ecx
  000f8	5b		 pop	 ebx

; 3212 :         }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN69@create_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN70@create_buc:
  00104	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
tv75 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv75[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtoui3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_k$ = 8							; size = 4
??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z PROC ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[], COMDAT
; _this$ = ecx

; 1865 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1866 :       return table_.try_emplace_unique(k).first->second;

  00006	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  00009	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKK@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1867 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 90	 lea	 ebx, DWORD PTR [eax+edx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL4@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00007	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	74 65		 je	 SHORT $LN6@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00013	8b da		 mov	 ebx, edx
  00015	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN52@table
  0001c	0f 1f 40 00	 npad	 4
$LL4@table:

; 3357 :               node_pointer next = next_node(n);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00022	6a 10		 push	 16			; 00000010H
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002a	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002d	8b c6		 mov	 eax, esi
  0002f	85 f6		 test	 esi, esi
  00031	75 ed		 jne	 SHORT $LL4@table
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b da		 mov	 ebx, edx
  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN52@table:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003b	8b c6		 mov	 eax, esi
  0003d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00040	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]

; 3376 :           bucket_allocator_traits::deallocate(

  00043	3b d9		 cmp	 ebx, ecx
  00045	0f 44 f0	 cmove	 esi, eax
  00048	0f 44 d3	 cmove	 edx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0004b	8d 04 b5 04 00
	00 00		 lea	 eax, DWORD PTR [esi*4+4]
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00059	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00063	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  0006a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
$LN6@table:
  00073	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
tv459 = -8						; size = 8
_f$ = -8						; size = 8
_dummy_node$1$ = 8					; size = 4
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 3c		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 d2 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003a	8b f0		 mov	 esi, eax

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00046	50		 push	 eax
  00047	ff 77 14	 push	 DWORD PTR [edi+20]
  0004a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  00052	eb 25		 jmp	 SHORT $LN8@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  00054	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00061	0f 87 98 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00067	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00077	8b f0		 mov	 esi, eax
$LN8@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00079	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0007c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0007f	85 f6		 test	 esi, esi
  00081	74 55		 je	 SHORT $LN51@create_buc
  00083	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  0008f	8b c3		 mov	 eax, ebx
  00091	83 ec 08	 sub	 esp, 8
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000a7	f2 0f 11 4d f8	 movsd	 QWORD PTR tv459[ebp], xmm1
  000ac	dd 45 f8	 fld	 QWORD PTR tv459[ebp]
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _ceil
  000b7	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  000ba	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000bf	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  000c2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  000ca	72 05		 jb	 SHORT $LN55@create_buc
  000cc	83 c8 ff	 or	 eax, -1
  000cf	eb 09		 jmp	 SHORT $LN52@create_buc
$LN55@create_buc:
  000d1	e8 00 00 00 00	 call	 __dtoui3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000d6	eb 02		 jmp	 SHORT $LN52@create_buc
$LN51@create_buc:
  000d8	33 c0		 xor	 eax, eax
$LN52@create_buc:
  000da	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  000dd	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000e0	3b f0		 cmp	 esi, eax
  000e2	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  000e4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000ea	83 c6 04	 add	 esi, 4
  000ed	3b f0		 cmp	 esi, eax
  000ef	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 08		 mov	 DWORD PTR [eax], ecx
  000f8	5b		 pop	 ebx

; 3212 :         }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN69@create_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN70@create_buc:
  00104	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
tv75 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv75[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtoui3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKK@std@@@std@@KKU?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,unsigned long> >,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z
_TEXT	SEGMENT
_fileIndex$ = -296					; size = 280
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pIndex$ = 8						; size = 4
?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z PROC	; CEterPack::Delete, COMDAT
; _this$ = ecx

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx
  00030	8b 7d 08	 mov	 edi, DWORD PTR _pIndex$[ebp]

; 743  : 	CFileBase fileIndex;

  00033	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase

; 744  : 
; 745  : 	if (!fileIndex.Create(m_indexFileName, CFileBase::FILEMODE_WRITE))

  0003e	6a 02		 push	 2
  00040	8d 86 55 02 00
	00		 lea	 eax, DWORD PTR [esi+597]
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	50		 push	 eax
  0004e	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00054	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  00059	85 c0		 test	 eax, eax
  0005b	75 04		 jne	 SHORT $LN2@Delete
  0005d	32 db		 xor	 bl, bl
  0005f	eb 19		 jmp	 SHORT $LN5@Delete
$LN2@Delete:

; 746  : 		return false;
; 747  : 
; 748  : 	PushFreeIndex(pIndex);

  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z ; CEterPack::PushFreeIndex

; 749  : 	WriteIndex(fileIndex, pIndex);

  00069	57		 push	 edi
  0006a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _fileIndex$[ebp]
  00070	8b ce		 mov	 ecx, esi
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ; CEterPack::WriteIndex

; 750  : 	return true;

  00078	b3 01		 mov	 bl, 1
$LN5@Delete:
  0007a	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00080	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  00085	8a c3		 mov	 al, bl

; 751  : }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00098	33 cd		 xor	 ecx, ebp
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z$0:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z ENDP	; CEterPack::Delete
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteNewData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
?WriteNewData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z PROC ; CEterPack::WriteNewData, COMDAT
; _this$ = ecx

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1285 : 	file.Seek(index->data_position);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _index$[ebp]
  0000e	ff b7 b8 00 00
	00		 push	 DWORD PTR [edi+184]
  00014	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 1286 : 
; 1287 : 	if (!file.Write(data, index->data_size))

  00019	ff b7 b0 00 00
	00		 push	 DWORD PTR [edi+176]
  0001f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00021	8b cb		 mov	 ecx, ebx
  00023	ff 75 10	 push	 DWORD PTR _data$[ebp]
  00026	ff 50 04	 call	 DWORD PTR [eax+4]
  00029	85 c0		 test	 eax, eax
  0002b	74 3e		 je	 SHORT $LN7@WriteNewDa

; 1288 : 	{
; 1289 : 		assert(!"WriteData: fwrite data failed");
; 1290 : 		return false;
; 1291 : 	}
; 1292 : 
; 1293 : 	int empty_size = index->real_data_size - index->data_size;

  0002d	8b b7 ac 00 00
	00		 mov	 esi, DWORD PTR [edi+172]
  00033	2b b7 b0 00 00
	00		 sub	 esi, DWORD PTR [edi+176]

; 1294 : 
; 1295 : 	if (empty_size < 0)

  00039	78 39		 js	 SHORT $LN11@WriteNewDa

; 1299 : 	}
; 1300 : 
; 1301 : 	if (empty_size == 0)

  0003b	85 f6		 test	 esi, esi
  0003d	74 23		 je	 SHORT $LN9@WriteNewDa

; 1302 : 		return true;
; 1303 : 
; 1304 : 	char * empty_buf = (char *) calloc(empty_size, sizeof(char));

  0003f	6a 01		 push	 1
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _calloc

; 1305 : 
; 1306 : 	if (!file.Write(empty_buf, empty_size))

  00047	8b 13		 mov	 edx, DWORD PTR [ebx]
  00049	83 c4 08	 add	 esp, 8
  0004c	8b f8		 mov	 edi, eax
  0004e	8b cb		 mov	 ecx, ebx
  00050	56		 push	 esi
  00051	57		 push	 edi
  00052	ff 52 04	 call	 DWORD PTR [edx+4]
  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN7@WriteNewDa

; 1307 : 	{
; 1308 : 		assert(!"WriteData: fwrite empty data failed");
; 1309 : 		return false;
; 1310 : 	}
; 1311 : 
; 1312 : 	free(empty_buf);

  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _free
  0005f	83 c4 04	 add	 esp, 4
$LN9@WriteNewDa:

; 1313 : 	return true;
; 1314 : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	b0 01		 mov	 al, 1
  00066	5b		 pop	 ebx
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
$LN7@WriteNewDa:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	32 c0		 xor	 al, al
  0006f	5b		 pop	 ebx
  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
$LN11@WriteNewDa:

; 1296 : 	{
; 1297 : 		printf("SYSERR: WriteNewData(): CRITICAL ERROR: empty_size lower than 0!\n");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@IGPMDEEF@SYSERR?3?5WriteNewData?$CI?$CJ?3?5CRITICA@
  00079	e8 00 00 00 00	 call	 _printf
  0007e	83 c4 04	 add	 esp, 4

; 1298 : 		exit(1);

  00081	6a 01		 push	 1
  00083	e8 00 00 00 00	 call	 _exit
$LN8@WriteNewDa:
  00088	cc		 int	 3
?WriteNewData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ENDP ; CEterPack::WriteNewData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
?WriteData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z PROC ; CEterPack::WriteData, COMDAT
; _this$ = ecx

; 1271 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1272 : 	file.Seek(index->data_position);

  00004	8b 75 0c	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  0000b	8b cf		 mov	 ecx, edi
  0000d	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  00013	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 1273 : 
; 1274 : 	if (!file.Write(data, index->data_size))

  00018	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	8b cf		 mov	 ecx, edi
  00022	ff 75 10	 push	 DWORD PTR _data$[ebp]
  00025	ff 50 04	 call	 DWORD PTR [eax+4]
  00028	85 c0		 test	 eax, eax
  0002a	5f		 pop	 edi
  0002b	0f 95 c0	 setne	 al
  0002e	5e		 pop	 esi

; 1275 : 	{
; 1276 : 		assert(!"WriteData: fwrite data failed");
; 1277 : 		return false;
; 1278 : 	}
; 1279 : 
; 1280 : 	return true;
; 1281 : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?WriteData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ENDP ; CEterPack::WriteData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?ReadData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PAXJ@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
_maxsize$ = 20						; size = 4
?ReadData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PAXJ@Z PROC ; CEterPack::ReadData, COMDAT
; _this$ = ecx

; 1261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1262 : 	if (index->data_size > maxsize)

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _index$[ebp]
  00007	8b 87 b0 00 00
	00		 mov	 eax, DWORD PTR [edi+176]
  0000d	3b 45 14	 cmp	 eax, DWORD PTR _maxsize$[ebp]
  00010	7e 07		 jle	 SHORT $LN2@ReadData

; 1263 : 		return false;

  00012	32 c0		 xor	 al, al
  00014	5f		 pop	 edi

; 1268 : }

  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
$LN2@ReadData:

; 1264 : 
; 1265 : 	file.Seek(index->data_position);

  00019	ff b7 b8 00 00
	00		 push	 DWORD PTR [edi+184]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00022	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 1266 : 	file.Read(data, index->data_size);

  00027	ff b7 b0 00 00
	00		 push	 DWORD PTR [edi+176]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _data$[ebp]
  00033	e8 00 00 00 00	 call	 ?Read@CFileBase@@QAEHPAXH@Z ; CFileBase::Read

; 1267 : 	return true;

  00038	b0 01		 mov	 al, 1
  0003a	5f		 pop	 edi

; 1268 : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?ReadData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PAXJ@Z ENDP ; CEterPack::ReadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetNewDataPosition@CEterPack@@AAEJAAVCFileBase@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?GetNewDataPosition@CEterPack@@AAEJAAVCFileBase@@@Z PROC ; CEterPack::GetNewDataPosition, COMDAT
; _this$ = ecx

; 1256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1257 : 	return file.Size();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	e8 00 00 00 00	 call	 ?Size@CFileBase@@QAEKXZ	; CFileBase::Size

; 1258 : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?GetNewDataPosition@CEterPack@@AAEJAAVCFileBase@@@Z ENDP ; CEterPack::GetNewDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?CreateDataFile@CEterPack@@AAE_NXZ
_TEXT	SEGMENT
?CreateDataFile@CEterPack@@AAE_NXZ PROC			; CEterPack::CreateDataFile, COMDAT
; _this$ = ecx

; 1235 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00004	83 bf b4 13 00
	00 10		 cmp	 DWORD PTR [edi+5044], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0000b	8d b7 a0 13 00
	00		 lea	 esi, DWORD PTR [edi+5024]

; 2144 :         const value_type* _Result = _Bx._Buf;

  00011	8b c6		 mov	 eax, esi

; 2145 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN22@CreateData

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 06		 mov	 eax, DWORD PTR [esi]
$LN22@CreateData:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1238 : 	if (NULL != (fp = fopen(m_stDataFileName.c_str(), "rb")))

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	74 0e		 je	 SHORT $LN2@CreateData
$LN24@CreateData:

; 1250 : 
; 1251 : 	fclose(fp);
; 1252 : 	return true;
; 1253 : }

  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _fclose
  0002f	83 c4 04	 add	 esp, 4
  00032	b0 01		 mov	 al, 1
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	c3		 ret	 0
$LN2@CreateData:

; 1239 : 	{
; 1240 : 		fclose(fp);
; 1241 : 		return true;
; 1242 : 	}
; 1243 : 	else if (m_bReadOnly)

  00037	80 bf 64 03 00
	00 00		 cmp	 BYTE PTR [edi+868], 0
  0003e	75 1a		 jne	 SHORT $LN23@CreateData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00040	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00044	72 02		 jb	 SHORT $LN17@CreateData

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00046	8b 36		 mov	 esi, DWORD PTR [esi]
$LN17@CreateData:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1246 : 	fp = fopen(m_stDataFileName.c_str(), "wb");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _fopen
  00053	83 c4 08	 add	 esp, 8

; 1247 : 
; 1248 : 	if (!fp)

  00056	85 c0		 test	 eax, eax
  00058	75 cf		 jne	 SHORT $LN24@CreateData
$LN23@CreateData:
  0005a	5f		 pop	 edi

; 1249 : 		return false;

  0005b	32 c0		 xor	 al, al

; 1250 : 
; 1251 : 	fclose(fp);
; 1252 : 	return true;
; 1253 : }

  0005d	5e		 pop	 esi
  0005e	c3		 ret	 0
?CreateDataFile@CEterPack@@AAE_NXZ ENDP			; CEterPack::CreateDataFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
__Op$2 = -24						; size = 8
__Insert_after$3 = -20					; size = 4
__Insert_before$4 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Where$1$ = 8						; size = 4
$T5 = 8							; size = 4
_i$6 = 8						; size = 4
_index$ = 8						; size = 4
?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z PROC ; CEterPack::PushFreeIndex, COMDAT
; _this$ = ecx

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e4	 mov	 DWORD PTR _this$1$[ebp], edi

; 1151 : 	if (index->filename_crc != 0)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR _index$[ebp]
  00030	83 bb a8 00 00
	00 00		 cmp	 DWORD PTR [ebx+168], 0
  00037	8d b3 a8 00 00
	00		 lea	 esi, DWORD PTR [ebx+168]
  0003d	74 40		 je	 SHORT $LN2@PushFreeIn

; 1152 : 	{
; 1153 : 		TDataPositionMap::iterator i = m_DataPositionMap.find(index->filename_crc);

  0003f	56		 push	 esi
  00040	8d 4d 08	 lea	 ecx, DWORD PTR _i$6[ebp]
  00043	51		 push	 ecx
  00044	8d 8f 80 03 00
	00		 lea	 ecx, DWORD PTR [edi+896]
  0004a	e8 00 00 00 00	 call	 ?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::find

; 1154 : 
; 1155 : 		if (i != m_DataPositionMap.end())

  0004f	8b 45 08	 mov	 eax, DWORD PTR _i$6[ebp]
  00052	85 c0		 test	 eax, eax
  00054	74 10		 je	 SHORT $LN3@PushFreeIn

; 1156 : 			m_DataPositionMap.erase(i);

  00056	50		 push	 eax
  00057	8d 45 08	 lea	 eax, DWORD PTR $T5[ebp]
  0005a	50		 push	 eax
  0005b	8d 8f 80 03 00
	00		 lea	 ecx, DWORD PTR [edi+896]
  00061	e8 00 00 00 00	 call	 ?erase@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@U4523@@Z ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::erase
$LN3@PushFreeIn:

; 1157 : 
; 1158 : 		index->filename_crc = 0;
; 1159 : 		memset(index->filename, 0, sizeof(index->filename));

  00066	68 a1 00 00 00	 push	 161			; 000000a1H
  0006b	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0006e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00074	6a 00		 push	 0
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memset
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@PushFreeIn:

; 1160 : 	}
; 1161 : 
; 1162 : 	int blockidx = GetFreeBlockIndex(index->real_data_size);

  0007f	ff b3 ac 00 00
	00		 push	 DWORD PTR [ebx+172]
  00085	8b cf		 mov	 ecx, edi
  00087	e8 00 00 00 00	 call	 ?GetFreeBlockIndex@CEterPack@@AAEHJ@Z ; CEterPack::GetFreeBlockIndex

; 1163 : 	m_FreeIndexList[blockidx].push_back(index);

  0008c	83 c0 73	 add	 eax, 115		; 00000073H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  0008f	81 7c c7 04 55
	55 55 15	 cmp	 DWORD PTR [edi+eax*8+4], 357913941 ; 15555555H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1163 : 	m_FreeIndexList[blockidx].push_back(index);

  00097	8d 34 c7	 lea	 esi, DWORD PTR [edi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  0009a	8b 06		 mov	 eax, DWORD PTR [esi]
  0009c	89 45 08	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1014 :         if (_Mysize == max_size()) {

  0009f	74 71		 je	 SHORT $LN49@PushFreeIn
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000a1	89 75 e8	 mov	 DWORD PTR __Op$2[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a4	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000ad	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b4	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  000b9	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1020 :         return _Op._Transfer_before(_Where);

  000bb	8b 45 08	 mov	 eax, DWORD PTR __Where$1$[ebp]
  000be	89 45 f0	 mov	 DWORD PTR __Insert_before$4[ebp], eax

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000c1	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 1019 :         ++_Mysize;

  000c4	ff 46 04	 inc	 DWORD PTR [esi+4]

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  000c7	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000ca	8d 45 f0	 lea	 eax, DWORD PTR __Insert_before$4[ebp]
  000cd	50		 push	 eax
  000ce	57		 push	 edi
  000cf	89 75 ec	 mov	 DWORD PTR __Insert_after$3[ebp], esi
  000d2	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  000d7	8d 45 ec	 lea	 eax, DWORD PTR __Insert_after$3[ebp]
  000da	50		 push	 eax
  000db	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSEterPackIndex@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSEterPackIndex@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<SEterPackIndex *,void *> *,std::_List_node<SEterPackIndex *,void *> * const &>

; 605  :         _Insert_before->_Prev = _Result;

  000e4	8b 45 08	 mov	 eax, DWORD PTR __Where$1$[ebp]
  000e7	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1164 : 	m_FragmentSize += index->real_data_size;

  000ea	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 605  :         _Insert_before->_Prev = _Result;

  000ed	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 606  :         _Insert_after->_Next  = _Result;

  000f0	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1164 : 	m_FragmentSize += index->real_data_size;

  000f2	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [ebx+172]
  000f8	01 81 60 03 00
	00		 add	 DWORD PTR [ecx+864], eax

; 1166 : }

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
$LN49@PushFreeIn:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1015 :             _Xlength_error("list too long");

  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00117	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN47@PushFreeIn:
  0011c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSEterPackIndex@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<SEterPackIndex *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z ENDP ; CEterPack::PushFreeIndex
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetFreeBlockIndex@CEterPack@@AAEHJ@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?GetFreeBlockIndex@CEterPack@@AAEHJ@Z PROC		; CEterPack::GetFreeBlockIndex, COMDAT
; _this$ = ecx

; 1145 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1146 : 	return min(FREE_INDEX_MAX_SIZE, size / FREE_INDEX_BLOCK_SIZE);

  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0000b	99		 cdq
  0000c	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00012	03 c2		 add	 eax, edx
  00014	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00017	3b c1		 cmp	 eax, ecx
  00019	0f 4f c1	 cmovg	 eax, ecx

; 1147 : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetFreeBlockIndex@CEterPack@@AAEHJ@Z ENDP		; CEterPack::GetFreeBlockIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_index$ = 12						; size = 4
?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z PROC ; CEterPack::WriteIndex, COMDAT
; _this$ = ecx

; 1131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1132 : 	file.Seek(sizeof(DWORD) + sizeof(DWORD));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	6a 08		 push	 8
  0000c	8b cf		 mov	 ecx, edi
  0000e	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 1133 : 	file.Write(&m_indexCount, sizeof(long));

  00013	8b 17		 mov	 edx, DWORD PTR [edi]
  00015	8d 86 50 01 00
	00		 lea	 eax, DWORD PTR [esi+336]
  0001b	6a 04		 push	 4
  0001d	50		 push	 eax
  0001e	8b cf		 mov	 ecx, edi
  00020	ff 52 04	 call	 DWORD PTR [edx+4]

; 1134 : 	file.Seek(eterpack::c_HeaderSize + (index->id * sizeof(TEterPackIndex)));

  00023	8b 75 0c	 mov	 esi, DWORD PTR _index$[ebp]
  00026	8b cf		 mov	 ecx, edi
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002d	c1 e0 06	 shl	 eax, 6
  00030	83 c0 0c	 add	 eax, 12			; 0000000cH
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 1135 : 
; 1136 : 	if (!file.Write(index, sizeof(TEterPackIndex)))

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	8b cf		 mov	 ecx, edi
  0003d	68 c0 00 00 00	 push	 192			; 000000c0H
  00042	56		 push	 esi
  00043	ff 50 04	 call	 DWORD PTR [eax+4]
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 1137 : 	{
; 1138 : 		assert(!"WriteIndex: fwrite failed");
; 1139 : 		return;
; 1140 : 	}
; 1141 : }

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ENDP ; CEterPack::WriteIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?NewIndex@CEterPack@@AAEPAUSEterPackIndex@@AAVCFileBase@@PBDJ@Z
_TEXT	SEGMENT
$T1 = -20						; size = 8
$T2 = -12						; size = 8
_this$1$ = -4						; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_this$1$ = 16						; size = 4
_size$ = 16						; size = 4
?NewIndex@CEterPack@@AAEPAUSEterPackIndex@@AAVCFileBase@@PBDJ@Z PROC ; CEterPack::NewIndex, COMDAT
; _this$ = ecx

; 1176 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1177 : 	TEterPackIndex* index = NULL;
; 1178 : 	int block_size = size + (DATA_BLOCK_SIZE - (size % DATA_BLOCK_SIZE));

  00008	8b 75 10	 mov	 esi, DWORD PTR _size$[ebp]
  0000b	8b c6		 mov	 eax, esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00013	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00018	79 07		 jns	 SHORT $LN81@NewIndex
  0001a	48		 dec	 eax
  0001b	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00020	40		 inc	 eax
$LN81@NewIndex:
  00021	8b de		 mov	 ebx, esi
  00023	2b d8		 sub	 ebx, eax
  00025	81 c3 00 01 00
	00		 add	 ebx, 256		; 00000100H

; 1179 : //		return index;
; 1180 : 
; 1181 : 	int blockidx = GetFreeBlockIndex(block_size);

  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?GetFreeBlockIndex@CEterPack@@AAEHJ@Z ; CEterPack::GetFreeBlockIndex
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00031	8d 8f 98 03 00
	00		 lea	 ecx, DWORD PTR [edi+920]
  00037	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  0003a	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  0003d	89 4d 10	 mov	 DWORD PTR _this$1$[ebp], ecx

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	3b ca		 cmp	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1184 : 		 i != m_FreeIndexList[blockidx].end();

  00044	74 46		 je	 SHORT $LN79@NewIndex
  00046	8b d7		 mov	 edx, edi
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@NewIndex:

; 1185 : 		 ++i)
; 1186 : 	{
; 1187 : 		 if ((*i)->real_data_size >= size)

  00050	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00053	39 b7 ac 00 00
	00		 cmp	 DWORD PTR [edi+172], esi
  00059	7d 0d		 jge	 SHORT $LN72@NewIndex
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  0005b	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 199  :         return this->_Ptr == _Right._Ptr;

  0005d	3b 8c c2 98 03
	00 00		 cmp	 ecx, DWORD PTR [edx+eax*8+920]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1184 : 		 i != m_FreeIndexList[blockidx].end();

  00064	75 ea		 jne	 SHORT $LL4@NewIndex

; 1185 : 		 ++i)
; 1186 : 	{
; 1187 : 		 if ((*i)->real_data_size >= size)

  00066	eb 24		 jmp	 SHORT $LN79@NewIndex
$LN72@NewIndex:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00068	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006b	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0006d	6a 0c		 push	 12			; 0000000cH
  0006f	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00070	89 02		 mov	 DWORD PTR [edx], eax

; 397  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00072	8b 11		 mov	 edx, DWORD PTR [ecx]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 398  :         --_Mysize;

  0007a	8b 45 10	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	ff 48 04	 dec	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00080	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00085	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1197 : 	if (!index)

  00088	85 ff		 test	 edi, edi
  0008a	75 22		 jne	 SHORT $LN6@NewIndex
$LN79@NewIndex:

; 1198 : 	{
; 1199 : 		index = new TEterPackIndex;

  0008c	68 c0 00 00 00	 push	 192			; 000000c0H
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1200 : 		index->real_data_size = block_size;
; 1201 : 		index->id = GetNewIndexPosition(file);

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00099	83 c4 04	 add	 esp, 4
  0009c	8b f8		 mov	 edi, eax
  0009e	ff 75 08	 push	 DWORD PTR _file$[ebp]
  000a1	89 9f ac 00 00
	00		 mov	 DWORD PTR [edi+172], ebx
  000a7	e8 00 00 00 00	 call	 ?GetNewIndexPosition@CEterPack@@AAEJAAVCFileBase@@@Z ; CEterPack::GetNewIndexPosition
  000ac	89 07		 mov	 DWORD PTR [edi], eax
$LN6@NewIndex:

; 1202 : 	}
; 1203 : 
; 1204 : 	strncpy(index->filename, filename, FILENAME_MAX_LEN);

  000ae	68 a0 00 00 00	 push	 160			; 000000a0H
  000b3	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  000b6	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 _strncpy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 22   : 	char * p = name;

  000bf	8b f3		 mov	 esi, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1205 : 	index->filename[FILENAME_MAX_LEN] = '\0';

  000c1	c6 87 a4 00 00
	00 00		 mov	 BYTE PTR [edi+164], 0
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 24   : 	while (*p)

  000cb	8a 06		 mov	 al, BYTE PTR [esi]
  000cd	84 c0		 test	 al, al
  000cf	74 1d		 je	 SHORT $LN60@NewIndex
$LL59@NewIndex:

; 25   : 	{
; 26   : 		if (*p == '\\')

  000d1	3c 5c		 cmp	 al, 92			; 0000005cH
  000d3	75 04		 jne	 SHORT $LN61@NewIndex

; 27   : 			*p = '/';

  000d5	b0 2f		 mov	 al, 47			; 0000002fH
  000d7	eb 0c		 jmp	 SHORT $LN62@NewIndex
$LN61@NewIndex:

; 28   : 		else
; 29   : 			*p = (int) tolower(*p);

  000d9	0f be c0	 movsx	 eax, al
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _tolower
  000e2	83 c4 04	 add	 esp, 4
$LN62@NewIndex:

; 30   : 		p++;

  000e5	88 06		 mov	 BYTE PTR [esi], al
  000e7	46		 inc	 esi
  000e8	8a 06		 mov	 al, BYTE PTR [esi]
  000ea	84 c0		 test	 al, al
  000ec	75 e3		 jne	 SHORT $LL59@NewIndex
$LN60@NewIndex:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1208 : 	index->filename_crc	= GetCRC32(index->filename, strlen(index->filename));

  000ee	8b cb		 mov	 ecx, ebx
  000f0	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL80@NewIndex:
  000f3	8a 01		 mov	 al, BYTE PTR [ecx]
  000f5	41		 inc	 ecx
  000f6	84 c0		 test	 al, al
  000f8	75 f9		 jne	 SHORT $LL80@NewIndex
  000fa	2b ca		 sub	 ecx, edx
  000fc	51		 push	 ecx
  000fd	53		 push	 ebx
  000fe	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00103	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1208 : 	index->filename_crc	= GetCRC32(index->filename, strlen(index->filename));

  00106	83 c4 08	 add	 esp, 8
  00109	89 87 a8 00 00
	00		 mov	 DWORD PTR [edi+168], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0010f	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00112	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00115	89 7d f8	 mov	 DWORD PTR $T2[ebp+4], edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00118	50		 push	 eax
  00119	50		 push	 eax
  0011a	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  0011d	50		 push	 eax
  0011e	8d 89 80 03 00
	00		 lea	 ecx, DWORD PTR [ecx+896]
  00124	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,SEterPackIndex *> >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1211 : 	return index;

  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx

; 1212 : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 0c 00	 ret	 12			; 0000000cH
?NewIndex@CEterPack@@AAEPAUSEterPackIndex@@AAVCFileBase@@PBDJ@Z ENDP ; CEterPack::NewIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetNewIndexPosition@CEterPack@@AAEJAAVCFileBase@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?GetNewIndexPosition@CEterPack@@AAEJAAVCFileBase@@@Z PROC ; CEterPack::GetNewIndexPosition, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1170 : 	long pos = (file.Size() - eterpack::c_HeaderSize) / sizeof(TEterPackIndex);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00009	e8 00 00 00 00	 call	 ?Size@CFileBase@@QAEKXZ	; CFileBase::Size
  0000e	8d 50 f4	 lea	 edx, DWORD PTR [eax-12]
  00011	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00016	f7 e2		 mul	 edx
  00018	c1 ea 07	 shr	 edx, 7

; 1171 : 	++m_indexCount;

  0001b	ff 86 50 01 00
	00		 inc	 DWORD PTR [esi+336]

; 1172 : 	return (pos);

  00021	8b c2		 mov	 eax, edx
  00023	5e		 pop	 esi

; 1173 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetNewIndexPosition@CEterPack@@AAEJAAVCFileBase@@@Z ENDP ; CEterPack::GetNewIndexPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_filename_crc$ = 8					; size = 4
_filename$ = 8						; size = 4
?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z PROC	; CEterPack::FindIndex, COMDAT
; _this$ = ecx

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1217 : 	strncpy(tmpFilename, filename, MAX_PATH);

  00006	68 04 01 00 00	 push	 260			; 00000104H
  0000b	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000e	8b f9		 mov	 edi, ecx
  00010	68 00 00 00 00	 push	 OFFSET ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA
  00015	e8 00 00 00 00	 call	 _strncpy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 24   : 	while (*p)

  0001a	a0 00 00 00 00	 mov	 al, BYTE PTR ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1217 : 	strncpy(tmpFilename, filename, MAX_PATH);

  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 22   : 	char * p = name;

  00022	be 00 00 00 00	 mov	 esi, OFFSET ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA

; 24   : 	while (*p)

  00027	84 c0		 test	 al, al
  00029	74 22		 je	 SHORT $LN6@FindIndex
  0002b	0f 1f 44 00 00	 npad	 5
$LL5@FindIndex:

; 25   : 	{
; 26   : 		if (*p == '\\')

  00030	3c 5c		 cmp	 al, 92			; 0000005cH
  00032	75 04		 jne	 SHORT $LN7@FindIndex

; 27   : 			*p = '/';

  00034	b0 2f		 mov	 al, 47			; 0000002fH
  00036	eb 0c		 jmp	 SHORT $LN8@FindIndex
$LN7@FindIndex:

; 28   : 		else
; 29   : 			*p = (int) tolower(*p);

  00038	0f be c0	 movsx	 eax, al
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _tolower
  00041	83 c4 04	 add	 esp, 4
$LN8@FindIndex:

; 30   : 		p++;

  00044	88 06		 mov	 BYTE PTR [esi], al
  00046	46		 inc	 esi
  00047	8a 06		 mov	 al, BYTE PTR [esi]
  00049	84 c0		 test	 al, al
  0004b	75 e3		 jne	 SHORT $LL5@FindIndex
$LN6@FindIndex:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1220 : 	DWORD filename_crc = GetCRC32(tmpFilename, strlen(tmpFilename));

  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA
  00052	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL22@FindIndex:
  00055	8a 01		 mov	 al, BYTE PTR [ecx]
  00057	41		 inc	 ecx
  00058	84 c0		 test	 al, al
  0005a	75 f9		 jne	 SHORT $LL22@FindIndex
  0005c	2b ca		 sub	 ecx, edx
  0005e	51		 push	 ecx
  0005f	68 00 00 00 00	 push	 OFFSET ?tmpFilename@?1??FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z@4PADA
  00064	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00069	83 c4 08	 add	 esp, 8
  0006c	89 45 08	 mov	 DWORD PTR _filename_crc$[ebp], eax

; 1221 : 	TDataPositionMap::iterator i = m_DataPositionMap.find(filename_crc);

  0006f	8d 45 08	 lea	 eax, DWORD PTR _filename_crc$[ebp]
  00072	8d 8f 80 03 00
	00		 lea	 ecx, DWORD PTR [edi+896]
  00078	50		 push	 eax
  00079	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?find@?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::find
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00082	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	85 c0		 test	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1223 : 	if (i == m_DataPositionMap.end())

  00089	75 06		 jne	 SHORT $LN2@FindIndex

; 1227 : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
$LN2@FindIndex:

; 1224 : 		return NULL;
; 1225 : 
; 1226 : 	return (i->second);

  00091	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 1227 : }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ENDP	; CEterPack::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?CreateIndexFile@CEterPack@@AAE_NXZ
_TEXT	SEGMENT
?CreateIndexFile@CEterPack@@AAE_NXZ PROC		; CEterPack::CreateIndexFile, COMDAT
; _this$ = ecx

; 1103 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1104 : 	FILE * fp;
; 1105 : 
; 1106 : 	if (NULL != (fp = fopen(m_indexFileName, "rb")))

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00009	8d b7 55 02 00
	00		 lea	 esi, DWORD PTR [edi+597]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	85 c0		 test	 eax, eax
  0001a	74 0e		 je	 SHORT $LN2@CreateInde

; 1107 : 	{
; 1108 : 		fclose(fp);

  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _fclose
  00022	83 c4 04	 add	 esp, 4

; 1109 : 		return true;

  00025	b0 01		 mov	 al, 1
  00027	5f		 pop	 edi

; 1127 : }

  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN2@CreateInde:

; 1110 : 	}
; 1111 : 	else if (m_bReadOnly)

  0002a	80 bf 64 03 00
	00 00		 cmp	 BYTE PTR [edi+868], 0
  00031	75 51		 jne	 SHORT $LN7@CreateInde

; 1112 : 		return false;
; 1113 : 
; 1114 : 	//
; 1115 : 	//
; 1116 : 	fp = fopen(m_indexFileName, "wb");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _fopen
  0003e	8b f0		 mov	 esi, eax
  00040	83 c4 08	 add	 esp, 8

; 1117 : 
; 1118 : 	if (!fp)

  00043	85 f6		 test	 esi, esi
  00045	74 3d		 je	 SHORT $LN7@CreateInde

; 1120 : 
; 1121 : 	fwrite(&eterpack::c_IndexCC, sizeof(DWORD), 1, fp);

  00047	56		 push	 esi
  00048	6a 01		 push	 1
  0004a	6a 04		 push	 4
  0004c	68 00 00 00 00	 push	 OFFSET ?c_IndexCC@eterpack@@3KB
  00051	e8 00 00 00 00	 call	 _fwrite

; 1122 : 	fwrite(&eterpack::c_Version, sizeof(DWORD), 1, fp);

  00056	56		 push	 esi
  00057	6a 01		 push	 1
  00059	6a 04		 push	 4
  0005b	68 00 00 00 00	 push	 OFFSET ?c_Version@eterpack@@3KB
  00060	e8 00 00 00 00	 call	 _fwrite

; 1123 : 	fwrite(&m_indexCount, sizeof(long), 1, fp);

  00065	56		 push	 esi
  00066	6a 01		 push	 1
  00068	8d 87 50 01 00
	00		 lea	 eax, DWORD PTR [edi+336]
  0006e	6a 04		 push	 4
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _fwrite

; 1124 : 
; 1125 : 	fclose(fp);

  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _fclose
  0007c	83 c4 34	 add	 esp, 52			; 00000034H

; 1126 : 	return true;

  0007f	b0 01		 mov	 al, 1
  00081	5f		 pop	 edi

; 1127 : }

  00082	5e		 pop	 esi
  00083	c3		 ret	 0
$LN7@CreateInde:
  00084	5f		 pop	 edi

; 1119 : 		return false;

  00085	32 c0		 xor	 al, al

; 1127 : }

  00087	5e		 pop	 esi
  00088	c3		 ret	 0
?CreateIndexFile@CEterPack@@AAE_NXZ ENDP		; CEterPack::CreateIndexFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z
_TEXT	SEGMENT
$T2 = -384						; size = 8
_zObj$ = -376						; size = 20
$T3 = -356						; size = 8
_pvData$ = -348						; size = 4
_rkFileDict$GSCopy$1$ = -344				; size = 4
_file$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rkFileDict$ = 8					; size = 4
_bOverwrite$ = 12					; size = 1
?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z PROC ; CEterPack::__BuildIndex, COMDAT
; _this$ = ecx

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 45 08	 mov	 eax, DWORD PTR _rkFileDict$[ebp]

; 398  : 	//DWORD dwBeginTime = ELTimer_GetMSec();
; 399  : 	CMappedFile file;

  00033	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00039	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _rkFileDict$GSCopy$1$[ebp], eax
  0003f	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 400  : 	LPCVOID pvData;
; 401  : 	CLZObject zObj;

  00044	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject

; 402  : 
; 403  : 	if (NULL == file.Create(m_indexFileName, &pvData, 0, 0))

  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00060	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00064	50		 push	 eax
  00065	8d 87 55 02 00
	00		 lea	 eax, DWORD PTR [edi+597]
  0006b	50		 push	 eax
  0006c	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00072	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00077	85 c0		 test	 eax, eax
  00079	75 12		 jne	 SHORT $LN5@BuildIndex

; 404  : 	{
; 405  : 		TraceError("Cannot open pack index file! %s", m_dbName);

  0007b	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CA@IACKDODI@Cannot?5open?5pack?5index?5file?$CB?5?$CFs@
  00086	50		 push	 eax
  00087	51		 push	 ecx
  00088	e9 c8 01 00 00	 jmp	 $LN42@BuildIndex
$LN5@BuildIndex:

; 406  : 		return false;
; 407  : 	}
; 408  : 
; 409  : 	if (file.Size() < eterpack::c_HeaderSize)

  0008d	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00093	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00098	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0009b	73 12		 jae	 SHORT $LN6@BuildIndex

; 410  : 	{
; 411  : 		TraceError("Pack index file header error! %s", m_dbName);
; 412  : 		return false;

  0009d	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  000a3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CB@KNLDPAAC@Pack?5index?5file?5header?5error?$CB?5?$CF@
  000a8	50		 push	 eax
  000a9	51		 push	 ecx
  000aa	e9 a6 01 00 00	 jmp	 $LN42@BuildIndex
$LN6@BuildIndex:

; 413  : 	}
; 414  : 
; 415  : 	DWORD fourcc = *(DWORD *) pvData;

  000af	8b b5 a4 fe ff
	ff		 mov	 esi, DWORD PTR _pvData$[ebp]
  000b5	8b 06		 mov	 eax, DWORD PTR [esi]

; 416  : 
; 417  : 	BYTE * pbData;
; 418  : 	UINT uiFileSize;
; 419  : 
; 420  : 	if (fourcc == eterpack::c_IndexCC)

  000b7	3d 45 50 4b 44	 cmp	 eax, 1145786437		; 444b5045H
  000bc	75 0d		 jne	 SHORT $LN7@BuildIndex

; 421  : 	{
; 422  : 		pbData = (BYTE *) pvData;
; 423  : 		uiFileSize = file.Size();

  000be	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c4	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 424  : 	}

  000c9	eb 58		 jmp	 SHORT $LN43@BuildIndex
$LN7@BuildIndex:

; 425  : 	else if (fourcc == CLZObject::ms_dwFourCC)

  000cb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  000d1	0f 85 72 01 00
	00		 jne	 $LN9@BuildIndex

; 426  : 	{
; 427  : 		m_bEncrypted = true;
; 428  : 
; 429  : 		if (!CLZO::Instance().Decompress(zObj, (const BYTE *) pvData, s_adwEterPackKey))

  000d7	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackKey@@3PAKA
  000dc	56		 push	 esi
  000dd	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  000e3	c6 87 54 01 00
	00 01		 mov	 BYTE PTR [edi+340], 1
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  000f6	84 c0		 test	 al, al
  000f8	0f 84 5f 01 00
	00		 je	 $LN26@BuildIndex

; 430  : 			return false;
; 431  : 
; 432  : 		if (zObj.GetSize() < eterpack::c_HeaderSize)

  000fe	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00104	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
  00109	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0010c	0f 82 4b 01 00
	00		 jb	 $LN26@BuildIndex

; 433  : 			return false;
; 434  : 
; 435  : 		pbData = zObj.GetBuffer();

  00112	8b b5 88 fe ff
	ff		 mov	 esi, DWORD PTR _zObj$[ebp]

; 436  : 		uiFileSize = zObj.GetSize();

  00118	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0011e	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
$LN43@BuildIndex:

; 441  : 		return false;
; 442  : 	}
; 443  : 
; 444  : 	pbData += sizeof(DWORD);
; 445  : 
; 446  : 	DWORD ver = *(DWORD *) pbData;
; 447  : 	pbData += sizeof(DWORD);
; 448  : 
; 449  : 	if (ver != eterpack::c_Version)

  00123	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00127	8b c8		 mov	 ecx, eax
  00129	74 11		 je	 SHORT $LN13@BuildIndex

; 450  : 	{
; 451  : 		TraceError("Pack index file version error! %s", m_dbName);

  0012b	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  00131	50		 push	 eax
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KGHAJIDH@Pack?5index?5file?5version?5error?$CB?5@

; 452  : 		return false;

  00137	e9 19 01 00 00	 jmp	 $LN42@BuildIndex
$LN13@BuildIndex:

; 453  : 	}
; 454  : 
; 455  : 	m_indexCount = *(long *) pbData;

  0013c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0013f	89 97 50 01 00
	00		 mov	 DWORD PTR [edi+336], edx

; 456  : 	pbData += sizeof(long);
; 457  : 
; 458  : 	if (uiFileSize < eterpack::c_HeaderSize + sizeof(TEterPackIndex) * m_indexCount)

  00145	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00148	c1 e0 06	 shl	 eax, 6
  0014b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0014e	3b c8		 cmp	 ecx, eax
  00150	73 1a		 jae	 SHORT $LN14@BuildIndex

; 459  : 	{
; 460  : 		TraceError("Pack index file size error! %s, indexCount %d", m_dbName, m_indexCount);

  00152	52		 push	 edx
  00153	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JMMFBMPC@Pack?5index?5file?5size?5error?$CB?5?$CFs?0@
  0015f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : 		return false;

  00167	e9 f1 00 00 00	 jmp	 $LN26@BuildIndex
$LN14@BuildIndex:

; 462  : 	}
; 463  : 
; 464  : 	//Tracef("Loading Pack file %s elements: %d ... ", m_dbName, m_indexCount);
; 465  : 
; 466  : 	m_indexData = new TEterPackIndex[m_indexCount];

  0016c	33 c9		 xor	 ecx, ecx
  0016e	8b c2		 mov	 eax, edx
  00170	ba c0 00 00 00	 mov	 edx, 192		; 000000c0H
  00175	f7 e2		 mul	 edx
  00177	0f 90 c1	 seto	 cl
  0017a	f7 d9		 neg	 ecx
  0017c	0b c8		 or	 ecx, eax
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 467  : 	memcpy(m_indexData, pbData, sizeof(TEterPackIndex) * m_indexCount);

  00184	8b 8f 50 01 00
	00		 mov	 ecx, DWORD PTR [edi+336]
  0018a	89 87 5c 03 00
	00		 mov	 DWORD PTR [edi+860], eax
  00190	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00193	c1 e1 06	 shl	 ecx, 6
  00196	51		 push	 ecx
  00197	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0019a	51		 push	 ecx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy

; 468  : 
; 469  : 	TEterPackIndex * index = m_indexData;

  001a1	8b b7 5c 03 00
	00		 mov	 esi, DWORD PTR [edi+860]

; 470  : 
; 471  : 	for (int i = 0; i < m_indexCount; ++i, ++index)

  001a7	33 db		 xor	 ebx, ebx
  001a9	83 c4 10	 add	 esp, 16			; 00000010H
  001ac	39 9f 50 01 00
	00		 cmp	 DWORD PTR [edi+336], ebx
  001b2	0f 8e 8d 00 00
	00		 jle	 $LN3@BuildIndex
  001b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@BuildIndex:

; 472  : 	{
; 473  : 		if (!index->filename_crc)

  001c0	8b 8e a8 00 00
	00		 mov	 ecx, DWORD PTR [esi+168]
  001c6	85 c9		 test	 ecx, ecx
  001c8	75 0a		 jne	 SHORT $LN15@BuildIndex

; 474  : 		{
; 475  : 			PushFreeIndex(index);

  001ca	56		 push	 esi
  001cb	8b cf		 mov	 ecx, edi
  001cd	e8 00 00 00 00	 call	 ?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z ; CEterPack::PushFreeIndex

; 476  : 		}

  001d2	eb 5e		 jmp	 SHORT $LN2@BuildIndex
$LN15@BuildIndex:

; 477  : 		else
; 478  : 		{
; 479  : 			if (index->real_data_size > index->data_size)

  001d4	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  001da	8b 96 b0 00 00
	00		 mov	 edx, DWORD PTR [esi+176]
  001e0	3b c2		 cmp	 eax, edx
  001e2	7e 0e		 jle	 SHORT $LN40@BuildIndex

; 480  : 				m_FragmentSize += index->real_data_size - index->data_size;

  001e4	2b c2		 sub	 eax, edx
  001e6	01 87 60 03 00
	00		 add	 DWORD PTR [edi+864], eax
  001ec	8b 8e a8 00 00
	00		 mov	 ecx, DWORD PTR [esi+168]
$LN40@BuildIndex:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  001f2	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001f8	89 8d 9c fe ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  001fe	50		 push	 eax
  001ff	50		 push	 eax
  00200	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00206	89 b5 a0 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+4], esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0020c	50		 push	 eax
  0020d	8d 8f 80 03 00
	00		 lea	 ecx, DWORD PTR [edi+896]
  00213	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@std@@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKPAUSEterPackIndex@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,SEterPackIndex *> >,unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,SEterPackIndex *> >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 484  : 			if (bOverwrite)

  00218	80 7d 0c 00	 cmp	 BYTE PTR _bOverwrite$[ebp], 0
  0021c	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkFileDict$GSCopy$1$[ebp]
  00222	56		 push	 esi
  00223	57		 push	 edi
  00224	74 07		 je	 SHORT $LN18@BuildIndex

; 485  : 				rkFileDict.UpdateItem(this, index);

  00226	e8 00 00 00 00	 call	 ?UpdateItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ; CEterFileDict::UpdateItem
  0022b	eb 05		 jmp	 SHORT $LN2@BuildIndex
$LN18@BuildIndex:

; 486  : 			else
; 487  : 				rkFileDict.InsertItem(this, index);

  0022d	e8 00 00 00 00	 call	 ?InsertItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ; CEterFileDict::InsertItem
$LN2@BuildIndex:

; 470  : 
; 471  : 	for (int i = 0; i < m_indexCount; ++i, ++index)

  00232	43		 inc	 ebx
  00233	81 c6 c0 00 00
	00		 add	 esi, 192		; 000000c0H
  00239	3b 9f 50 01 00
	00		 cmp	 ebx, DWORD PTR [edi+336]
  0023f	0f 8c 7b ff ff
	ff		 jl	 $LL4@BuildIndex
$LN3@BuildIndex:

; 488  : 		}
; 489  : 	}
; 490  : 
; 491  : 	//Tracef("Done. (spent %dms)\n", ELTimer_GetMSec() - dwBeginTime);
; 492  : 	return true;

  00245	b3 01		 mov	 bl, 1
  00247	eb 16		 jmp	 SHORT $LN29@BuildIndex
$LN9@BuildIndex:

; 437  : 	}
; 438  : 	else
; 439  : 	{
; 440  : 		TraceError("Pack index file fourcc error! %s", m_dbName);

  00249	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  0024f	50		 push	 eax
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HPBCEBAA@Pack?5index?5file?5fourcc?5error?$CB?5?$CF@
$LN42@BuildIndex:
  00255	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0025a	83 c4 08	 add	 esp, 8
$LN26@BuildIndex:
  0025d	32 db		 xor	 bl, bl
$LN29@BuildIndex:

; 488  : 		}
; 489  : 	}
; 490  : 
; 491  : 	//Tracef("Done. (spent %dms)\n", ELTimer_GetMSec() - dwBeginTime);
; 492  : 	return true;

  0025f	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00265	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  0026a	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00270	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00275	8a c3		 mov	 al, bl

; 493  : }

  00277	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0027a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00281	59		 pop	 ecx
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	5b		 pop	 ebx
  00285	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00288	33 cd		 xor	 ecx, ebp
  0028a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z$1:
  0000b	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 7c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-388]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z ENDP ; CEterPack::__BuildIndex
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ
_TEXT	SEGMENT
?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ PROC ; CEterPack::GetPackPolicy_HybridCrypt, COMDAT
; _this$ = ecx

; 1522 : 	return  m_pCSHybridCryptPolicy;

  00000	8b 81 d0 13 00
	00		 mov	 eax, DWORD PTR [ecx+5072]

; 1523 : }

  00006	c3		 ret	 0
?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ENDP ; CEterPack::GetPackPolicy_HybridCrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_zObj$ = -664						; size = 20
_data$ = -644						; size = 4
_retNames$GSCopy$1$ = -640				; size = 4
_i$1$ = -636						; size = 4
__Ptr$1$ = -632						; size = 4
$T2 = -625						; size = 1
_dataMapFile$ = -624					; size = 324
$T3 = -300						; size = 24
_dir$4 = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_retNames$ = 8						; size = 4
?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CEterPack::GetNames, COMDAT
; _this$ = ecx

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 02 00
	00		 sub	 esp, 652		; 0000028cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx
  0002f	8b 45 08	 mov	 eax, DWORD PTR _retNames$[ebp]

; 854  : 	CMappedFile dataMapFile;

  00032	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  00038	89 85 80 fd ff
	ff		 mov	 DWORD PTR _retNames$GSCopy$1$[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00043	83 be b4 13 00
	00 10		 cmp	 DWORD PTR [esi+5044], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0004a	8d 86 a0 13 00
	00		 lea	 eax, DWORD PTR [esi+5024]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 854  : 	CMappedFile dataMapFile;

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00057	72 02		 jb	 SHORT $LN14@GetNames

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00059	8b 00		 mov	 eax, DWORD PTR [eax]
$LN14@GetNames:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 857  : 	if (!dataMapFile.Create(m_stDataFileName.c_str(), &data, 0, 0))

  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  00065	51		 push	 ecx
  00066	50		 push	 eax
  00067	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0006d	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00072	85 c0		 test	 eax, eax
  00074	75 0b		 jne	 SHORT $LN5@GetNames
  00076	88 85 8f fd ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  0007c	e9 95 01 00 00	 jmp	 $LN10@GetNames
$LN5@GetNames:

; 860  : 	CLZObject zObj;

  00081	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00087	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0008c	83 be 88 03 00
	00 00		 cmp	 DWORD PTR [esi+904], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 860  : 	CLZObject zObj;

  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00097	0f 84 67 01 00
	00		 je	 $LN3@GetNames

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0009d	8b 86 84 03 00
	00		 mov	 eax, DWORD PTR [esi+900]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  000a3	8b b6 94 03 00
	00		 mov	 esi, DWORD PTR [esi+916]
  000a9	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  000ac	89 b5 84 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 863  : 		i != m_DataPositionMap.end();

  000b2	85 f6		 test	 esi, esi
  000b4	0f 84 4a 01 00
	00		 je	 $LN3@GetNames
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL4@GetNames:

; 864  : 		++i)
; 865  : 	{
; 866  : 		TEterPackIndex* index = i->second;

  000c0	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000c3	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  000c9	68 04 01 00 00	 push	 260			; 00000104H
  000ce	6a 00		 push	 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 868  : 		inlinePathCreate(index->filename);

  000d0	83 c7 04	 add	 edi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000d3	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 868  : 		inlinePathCreate(index->filename);

  000d4	89 bd 88 fd ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000da	e8 00 00 00 00	 call	 _memset

; 7    : 	const char* p, *k;
; 8    : 
; 9    : 	p = path + 3;

  000df	8d 47 03	 lea	 eax, DWORD PTR [edi+3]

; 10   : 
; 11   : 	while (NULL != (k = strchr(p, '/')))

  000e2	6a 2f		 push	 47			; 0000002fH
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _strchr
  000ea	8b f8		 mov	 edi, eax
  000ec	83 c4 14	 add	 esp, 20			; 00000014H
  000ef	85 ff		 test	 edi, edi
  000f1	74 5e		 je	 SHORT $LN42@GetNames
  000f3	8b b5 88 fd ff
	ff		 mov	 esi, DWORD PTR __Ptr$1$[ebp]
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL41@GetNames:

; 12   : 	{
; 13   : 		memset(dir, 0, sizeof(dir));

  00100	68 04 01 00 00	 push	 260			; 00000104H
  00105	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  0010b	6a 00		 push	 0
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memset

; 14   : 		strncpy(dir, path, k - path);

  00113	8b c7		 mov	 eax, edi
  00115	2b c6		 sub	 eax, esi
  00117	50		 push	 eax
  00118	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  0011e	56		 push	 esi
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _strncpy
  00125	83 c4 18	 add	 esp, 24			; 00000018H

; 15   : 		CreateDirectory(dir, NULL);

  00128	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  0012e	6a 00		 push	 0
  00130	50		 push	 eax
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 16   : 		p = k + 1;

  00137	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0013a	6a 2f		 push	 47			; 0000002fH
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _strchr
  00142	8b f8		 mov	 edi, eax
  00144	83 c4 08	 add	 esp, 8
  00147	85 ff		 test	 edi, edi
  00149	75 b5		 jne	 SHORT $LL41@GetNames
  0014b	8b b5 84 fd ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LN42@GetNames:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00151	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  00157	8b c2		 mov	 eax, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00159	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00163	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0016d	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00174	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL96@GetNames:
  00177	8a 08		 mov	 cl, BYTE PTR [eax]
  00179	40		 inc	 eax
  0017a	84 c9		 test	 cl, cl
  0017c	75 f9		 jne	 SHORT $LL96@GetNames
  0017e	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00180	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00186	50		 push	 eax
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0018d	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR _retNames$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 870  : 		retNames->push_back(index->filename);

  00193	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00197	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0019a	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0019d	74 29		 je	 SHORT $LN59@GetNames
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0019f	0f 10 85 d4 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001a6	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001ad	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  001b0	f3 0f 7e 85 e4
	fe ff ff	 movq	 xmm0, QWORD PTR $T3[ebp+16]
  001b8	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001bd	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  001c2	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001c6	eb 13		 jmp	 SHORT $LN58@GetNames
$LN59@GetNames:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001c8	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  001ce	52		 push	 edx
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001d5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
$LN58@GetNames:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 870  : 		retNames->push_back(index->filename);

  001db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001df	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001e2	72 10		 jb	 SHORT $LN82@GetNames

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001e4	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e5	50		 push	 eax
  001e6	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  001ec	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001f1	83 c4 08	 add	 esp, 8
$LN82@GetNames:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  001f4	8b 36		 mov	 esi, DWORD PTR [esi]
  001f6	89 b5 84 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi

; 2399 :           return node_ != x.node_;

  001fc	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 863  : 		i != m_DataPositionMap.end();

  001fe	0f 85 bc fe ff
	ff		 jne	 $LL4@GetNames
$LN3@GetNames:

; 871  : 	}
; 872  : 	return true;

  00204	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0020a	c6 85 8f fd ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00211	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
$LN10@GetNames:
  00216	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0021c	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00221	8a 85 8f fd ff
	ff		 mov	 al, BYTE PTR $T2[ebp]

; 873  : }

  00227	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0022a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00231	59		 pop	 ecx
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1:
  0000b	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
__unwindfunclet$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$2:
  00016	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 68 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-664]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetNames@CEterPack@@QAE_NPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CEterPack::GetNames
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?DeleteUnreferencedData@CEterPack@@QAEKXZ
_TEXT	SEGMENT
tv280 = -12						; size = 4
_this$1$ = -8						; size = 4
$T1 = -4						; size = 4
?DeleteUnreferencedData@CEterPack@@QAEKXZ PROC		; CEterPack::DeleteUnreferencedData, COMDAT
; _this$ = ecx

; 1322 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00006	83 b9 88 03 00
	00 00		 cmp	 DWORD PTR [ecx+904], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1322 : {

  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00010	74 6c		 je	 SHORT $LN10@DeleteUnre

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00012	8b 81 84 03 00
	00		 mov	 eax, DWORD PTR [ecx+900]
  00018	53		 push	 ebx
  00019	56		 push	 esi

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0001a	8b b1 94 03 00
	00		 mov	 esi, DWORD PTR [ecx+916]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1324 : 	DWORD dwCount = 0;

  00020	33 db		 xor	 ebx, ebx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00022	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00025	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1326 : 	while (i != m_DataPositionMap.end())

  00027	74 4d		 je	 SHORT $LN33@DeleteUnre
  00029	81 c1 68 03 00
	00		 add	 ecx, 872		; 00000368H
  0002f	89 4d f4	 mov	 DWORD PTR tv280[ebp], ecx
  00032	57		 push	 edi
$LL2@DeleteUnre:

; 1327 : 	{
; 1328 : 		TEterPackIndex * pIndex = (i++)->second;

  00033	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2388 :           node_ = static_cast<node_pointer>(node_->next_);

  00036	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1330 : 		if (0 == m_map_indexRefCount[pIndex->id])

  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0003d	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[]
  00046	83 38 00	 cmp	 DWORD PTR [eax], 0
  00049	75 1b		 jne	 SHORT $LN4@DeleteUnre

; 1331 : 		{
; 1332 : 			printf("Unref File %s\n", pIndex->filename);

  0004b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MDGHMGJK@Unref?5File?5?$CFs?6@
  00054	e8 00 00 00 00	 call	 _printf

; 1333 : 			Delete(pIndex);

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005c	83 c4 08	 add	 esp, 8
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z ; CEterPack::Delete

; 1334 : 			++dwCount;

  00065	43		 inc	 ebx
$LN4@DeleteUnre:

; 1326 : 	while (i != m_DataPositionMap.end())

  00066	8b 4d f4	 mov	 ecx, DWORD PTR tv280[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2399 :           return node_ != x.node_;

  00069	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1326 : 	while (i != m_DataPositionMap.end())

  0006b	75 c6		 jne	 SHORT $LL2@DeleteUnre

; 1335 : 		}
; 1336 : 	}
; 1337 : 
; 1338 : 	return dwCount;

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	8b c3		 mov	 eax, ebx
  00071	5b		 pop	 ebx

; 1339 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN33@DeleteUnre:
  00076	5e		 pop	 esi

; 1335 : 		}
; 1336 : 	}
; 1337 : 
; 1338 : 	return dwCount;

  00077	8b c3		 mov	 eax, ebx
  00079	5b		 pop	 ebx

; 1339 : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
$LN10@DeleteUnre:

; 1335 : 		}
; 1336 : 	}
; 1337 : 
; 1338 : 	return dwCount;

  0007e	33 c0		 xor	 eax, eax

; 1339 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?DeleteUnreferencedData@CEterPack@@QAEKXZ ENDP		; CEterPack::DeleteUnreferencedData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?DecryptIndexFile@CEterPack@@QAE_NXZ
_TEXT	SEGMENT
_file$ = -296						; size = 280
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?DecryptIndexFile@CEterPack@@QAE_NXZ PROC		; CEterPack::DecryptIndexFile, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DecryptIndexFile@CEterPack@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx

; 308  : 	if (!m_bEncrypted)

  00030	80 bf 54 01 00
	00 00		 cmp	 BYTE PTR [edi+340], 0
  00037	75 07		 jne	 SHORT $LN2@DecryptInd

; 309  : 		return true;

  00039	b0 01		 mov	 al, 1
  0003b	e9 a1 00 00 00	 jmp	 $LN1@DecryptInd
$LN2@DecryptInd:

; 310  : 
; 311  : 	CFileBase file;

  00040	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00046	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase

; 312  : 
; 313  : 	if (!file.Create(m_indexFileName, CFileBase::FILEMODE_WRITE))

  0004b	6a 02		 push	 2
  0004d	8d 87 55 02 00
	00		 lea	 eax, DWORD PTR [edi+597]
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	50		 push	 eax
  0005b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00061	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  00066	85 c0		 test	 eax, eax
  00068	75 04		 jne	 SHORT $LN3@DecryptInd
  0006a	32 db		 xor	 bl, bl
  0006c	eb 66		 jmp	 SHORT $LN6@DecryptInd
$LN3@DecryptInd:

; 314  : 		return false;
; 315  : 
; 316  : 	file.Write(&eterpack::c_IndexCC, sizeof(DWORD));

  0006e	6a 04		 push	 4
  00070	68 00 00 00 00	 push	 OFFSET ?c_IndexCC@eterpack@@3KB
  00075	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0007b	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 317  : 	file.Write(&eterpack::c_Version, sizeof(DWORD));

  00080	6a 04		 push	 4
  00082	68 00 00 00 00	 push	 OFFSET ?c_Version@eterpack@@3KB
  00087	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0008d	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 318  : 	file.Write(&m_indexCount, sizeof(long));

  00092	6a 04		 push	 4
  00094	8d b7 50 01 00
	00		 lea	 esi, DWORD PTR [edi+336]
  0009a	56		 push	 esi
  0009b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000a1	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 319  : 	file.Write(m_indexData, sizeof(TEterPackIndex) * m_indexCount);

  000a6	8b 06		 mov	 eax, DWORD PTR [esi]
  000a8	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ae	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000b1	c1 e0 06	 shl	 eax, 6
  000b4	50		 push	 eax
  000b5	ff b7 5c 03 00
	00		 push	 DWORD PTR [edi+860]
  000bb	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 320  : 
; 321  : 	file.Close();

  000c0	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c6	e8 00 00 00 00	 call	 ?Close@CFileBase@@QAEXXZ ; CFileBase::Close

; 322  : 
; 323  : 	m_bEncrypted = false;

  000cb	c6 87 54 01 00
	00 00		 mov	 BYTE PTR [edi+340], 0

; 324  : 	return true;

  000d2	b3 01		 mov	 bl, 1
$LN6@DecryptInd:
  000d4	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000da	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  000df	8a c3		 mov	 al, bl
$LN1@DecryptInd:

; 325  : }

  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f2	33 cd		 xor	 ecx, ebp
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DecryptIndexFile@CEterPack@@QAE_NXZ$0:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?DecryptIndexFile@CEterPack@@QAE_NXZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DecryptIndexFile@CEterPack@@QAE_NXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DecryptIndexFile@CEterPack@@QAE_NXZ ENDP		; CEterPack::DecryptIndexFile
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?EncryptIndexFile@CEterPack@@QAE_NXZ
_TEXT	SEGMENT
_zObj$ = -368						; size = 20
_pvData$ = -348						; size = 4
_fp$1$ = -344						; size = 4
_file$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?EncryptIndexFile@CEterPack@@QAE_NXZ PROC		; CEterPack::EncryptIndexFile, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?EncryptIndexFile@CEterPack@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx

; 345  : 	CMappedFile file;

  00030	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 346  : 	LPCVOID pvData;
; 347  : 
; 348  : 	if (NULL == file.Create(m_indexFileName, &pvData, 0, 0))

  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	50		 push	 eax
  0004d	8d bb 55 02 00
	00		 lea	 edi, DWORD PTR [ebx+597]
  00053	57		 push	 edi
  00054	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0005a	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  0005f	85 c0		 test	 eax, eax
  00061	75 1b		 jne	 SHORT $LN4@EncryptInd

; 349  : 	{
; 350  : 		TraceError("EncryptIndex: Cannot open pack index file! %s", m_dbName);

  00063	8d 83 55 01 00
	00		 lea	 eax, DWORD PTR [ebx+341]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@LCLPMBOA@EncryptIndex?3?5Cannot?5open?5pack?5@
  0006f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00074	83 c4 08	 add	 esp, 8
  00077	32 db		 xor	 bl, bl
  00079	e9 4a 01 00 00	 jmp	 $LN14@EncryptInd
$LN4@EncryptInd:

; 351  : 		return false;
; 352  : 	}
; 353  : 
; 354  : 	BYTE * pbData = new BYTE[file.Size()];

  0007e	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00084	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0008f	83 c4 04	 add	 esp, 4

; 355  : 	memcpy(pbData, pvData, file.Size());

  00092	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00098	8b f0		 mov	 esi, eax
  0009a	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0009f	50		 push	 eax
  000a0	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  000a6	56		 push	 esi
  000a7	e8 00 00 00 00	 call	 _memcpy
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 356  : 
; 357  : 	CLZObject zObj;

  000af	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  000b5	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject

; 358  : 
; 359  : 	if (!CLZO::Instance().CompressEncryptedMemory(zObj, pbData, file.Size(), s_adwEterPackKey))

  000ba	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackKey@@3PAKA
  000bf	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c9	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  000d4	50		 push	 eax
  000d5	56		 push	 esi
  000d6	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z ; CLZO::CompressEncryptedMemory
  000e2	84 c0		 test	 al, al
  000e4	75 2c		 jne	 SHORT $LN5@EncryptInd

; 360  : 	{
; 361  : 		TraceError("EncryptIndex: Cannot encrypt! %s", m_dbName);

  000e6	8d 83 55 01 00
	00		 lea	 eax, DWORD PTR [ebx+341]
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BKLKOCID@EncryptIndex?3?5Cannot?5encrypt?$CB?5?$CF@
$LN23@EncryptInd:

; 385  : 		fclose(fp);

  000f2	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000f7	83 c4 08	 add	 esp, 8
  000fa	85 f6		 test	 esi, esi
  000fc	0f 84 9a 00 00
	00		 je	 $LN16@EncryptInd
  00102	56		 push	 esi
  00103	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00108	83 c4 04	 add	 esp, 4
  0010b	32 db		 xor	 bl, bl
  0010d	e9 ab 00 00 00	 jmp	 $LN17@EncryptInd
$LN5@EncryptInd:

; 362  : 		SAFE_DELETE_ARRAY(pbData);
; 363  : 		return false;
; 364  : 	}
; 365  : 
; 366  : 	file.Destroy();

  00112	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00118	e8 00 00 00 00	 call	 ?Destroy@CMappedFile@@QAEXXZ ; CMappedFile::Destroy
  0011d	0f 1f 00	 npad	 3
$LL2@EncryptInd:

; 367  : 
; 368  : 	while (!DeleteFile(m_indexFileName));

  00120	57		 push	 edi
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  00127	85 c0		 test	 eax, eax
  00129	74 f5		 je	 SHORT $LL2@EncryptInd

; 369  : 
; 370  : 	FILE * fp;
; 371  : 
; 372  : 	fp = fopen(m_indexFileName, "wb");

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00130	57		 push	 edi
  00131	e8 00 00 00 00	 call	 _fopen
  00136	83 c4 08	 add	 esp, 8
  00139	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _fp$1$[ebp], eax

; 373  : 
; 374  : 	if (!fp)

  0013f	85 c0		 test	 eax, eax
  00141	75 0e		 jne	 SHORT $LN7@EncryptInd

; 375  : 	{
; 376  : 		TraceError("EncryptIndex: Cannot open file for writing! %s", m_dbName);

  00143	8d 83 55 01 00
	00		 lea	 eax, DWORD PTR [ebx+341]
  00149	50		 push	 eax
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NIHCOGLD@EncryptIndex?3?5Cannot?5open?5file?5@
  0014f	eb a1		 jmp	 SHORT $LN23@EncryptInd
$LN7@EncryptInd:

; 377  : 		SAFE_DELETE_ARRAY(pbData);
; 378  : 		return false;
; 379  : 	}
; 380  : 
; 381  : 	if (1 != fwrite(zObj.GetBuffer(), zObj.GetSize(), 1, fp))

  00151	50		 push	 eax
  00152	6a 01		 push	 1
  00154	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0015a	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
  0015f	50		 push	 eax
  00160	ff b5 90 fe ff
	ff		 push	 DWORD PTR _zObj$[ebp]
  00166	e8 00 00 00 00	 call	 _fwrite
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	83 f8 01	 cmp	 eax, 1
  00171	74 2d		 je	 SHORT $LN9@EncryptInd

; 382  : 	{
; 383  : 		TraceError("Encryptindex: Cannot write to file! %s", m_indexFileName);

  00173	57		 push	 edi
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FFDEAKBO@Encryptindex?3?5Cannot?5write?5to?5f@
  00179	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0017e	83 c4 08	 add	 esp, 8

; 384  : 		SAFE_DELETE_ARRAY(pbData);

  00181	85 f6		 test	 esi, esi
  00183	74 09		 je	 SHORT $LN10@EncryptInd
  00185	56		 push	 esi
  00186	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0018b	83 c4 04	 add	 esp, 4
$LN10@EncryptInd:

; 385  : 		fclose(fp);

  0018e	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _fp$1$[ebp]
  00194	e8 00 00 00 00	 call	 _fclose
  00199	83 c4 04	 add	 esp, 4
$LN16@EncryptInd:
  0019c	32 db		 xor	 bl, bl
  0019e	eb 1d		 jmp	 SHORT $LN17@EncryptInd
$LN9@EncryptInd:

; 386  : 		return false;
; 387  : 	}
; 388  : 
; 389  : 	fclose(fp);

  001a0	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _fp$1$[ebp]
  001a6	e8 00 00 00 00	 call	 _fclose

; 390  : 
; 391  : 	m_bEncrypted = true;
; 392  : 	delete [] pbData;

  001ab	56		 push	 esi
  001ac	c6 83 54 01 00
	00 01		 mov	 BYTE PTR [ebx+340], 1
  001b3	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001b8	83 c4 08	 add	 esp, 8

; 393  : 	return true;

  001bb	b3 01		 mov	 bl, 1
$LN17@EncryptInd:
  001bd	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001c3	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
$LN14@EncryptInd:
  001c8	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  001ce	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  001d3	8a c3		 mov	 al, bl

; 394  : }

  001d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001df	59		 pop	 ecx
  001e0	5f		 pop	 edi
  001e1	5e		 pop	 esi
  001e2	5b		 pop	 ebx
  001e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e6	33 cd		 xor	 ecx, ebp
  001e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EncryptIndexFile@CEterPack@@QAE_NXZ$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?EncryptIndexFile@CEterPack@@QAE_NXZ$1:
  0000b	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?EncryptIndexFile@CEterPack@@QAE_NXZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 8c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-372]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EncryptIndexFile@CEterPack@@QAE_NXZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EncryptIndexFile@CEterPack@@QAE_NXZ ENDP		; CEterPack::EncryptIndexFile
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ
_TEXT	SEGMENT
?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ PROC ; CEterPack::GetIndexMap, COMDAT
; _this$ = ecx

; 1318 : 	return m_DataPositionMap;

  00000	8d 81 80 03 00
	00		 lea	 eax, DWORD PTR [ecx+896]

; 1319 : }

  00006	c3		 ret	 0
?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ ENDP ; CEterPack::GetIndexMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?IsExist@CEterPack@@QAE_NPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?IsExist@CEterPack@@QAE_NPBD@Z PROC			; CEterPack::IsExist, COMDAT
; _this$ = ecx

; 1230 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1231 : 	return FindIndex(filename) ? true : false;

  00003	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00006	e8 00 00 00 00	 call	 ?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ; CEterPack::FindIndex
  0000b	85 c0		 test	 eax, eax
  0000d	0f 95 c0	 setne	 al

; 1232 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?IsExist@CEterPack@@QAE_NPBD@Z ENDP			; CEterPack::IsExist
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetFragmentSize@CEterPack@@QAEJXZ
_TEXT	SEGMENT
?GetFragmentSize@CEterPack@@QAEJXZ PROC			; CEterPack::GetFragmentSize, COMDAT
; _this$ = ecx

; 1098 : 	return m_FragmentSize;

  00000	8b 81 60 03 00
	00		 mov	 eax, DWORD PTR [ecx+864]

; 1099 : }

  00006	c3		 ret	 0
?GetFragmentSize@CEterPack@@QAEJXZ ENDP			; CEterPack::GetFragmentSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Extract@CEterPack@@QAE_NXZ
_TEXT	SEGMENT
_index$1$ = -948					; size = 4
_pSDBData$2 = -944					; size = 4
_iSDBSize$3 = -940					; size = 4
_zObj$ = -936						; size = 20
_this$GSCopy$1$ = -916					; size = 4
_data$ = -912						; size = 4
tv801 = -905						; size = 1
_dataMapFile$ = -904					; size = 324
_writeFile$4 = -580					; size = 280
$T5 = -300						; size = 24
$T6 = -300						; size = 24
_dir$7 = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Extract@CEterPack@@QAE_NXZ PROC			; CEterPack::Extract, COMDAT
; _this$ = ecx

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Extract@CEterPack@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 03 00
	00		 sub	 esp, 936		; 000003a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d 6c fc ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 765  : 	CMappedFile dataMapFile;

  00036	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00041	83 bb b4 13 00
	00 10		 cmp	 DWORD PTR [ebx+5044], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  00048	8d 83 a0 13 00
	00		 lea	 eax, DWORD PTR [ebx+5024]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 765  : 	CMappedFile dataMapFile;

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00055	72 02		 jb	 SHORT $LN36@Extract

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00057	8b 00		 mov	 eax, DWORD PTR [eax]
$LN36@Extract:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 768  : 	if (!dataMapFile.Create(m_stDataFileName.c_str(), &data, 0, 0))

  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  00063	51		 push	 ecx
  00064	50		 push	 eax
  00065	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0006b	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00070	85 c0		 test	 eax, eax
  00072	75 07		 jne	 SHORT $LN5@Extract
  00074	32 db		 xor	 bl, bl
  00076	e9 e4 01 00 00	 jmp	 $LN28@Extract
$LN5@Extract:

; 771  : 	CLZObject zObj;

  0007b	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00081	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00086	83 bb 88 03 00
	00 00		 cmp	 DWORD PTR [ebx+904], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 771  : 	CLZObject zObj;

  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00091	0f 84 bb 01 00
	00		 je	 $LN3@Extract

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00097	8b 83 84 03 00
	00		 mov	 eax, DWORD PTR [ebx+900]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0009d	8b b3 94 03 00
	00		 mov	 esi, DWORD PTR [ebx+916]
  000a3	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 774  : 		i != m_DataPositionMap.end();

  000a6	85 f6		 test	 esi, esi
  000a8	0f 84 a4 01 00
	00		 je	 $LN3@Extract
  000ae	66 90		 npad	 2
$LL4@Extract:

; 775  : 		++i)
; 776  : 	{
; 777  : 		TEterPackIndex* index = i->second;

  000b0	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]

; 778  : 		CFileBase writeFile;

  000b3	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  000b9	89 9d 4c fc ff
	ff		 mov	 DWORD PTR _index$1$[ebp], ebx
  000bf	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000c4	68 04 01 00 00	 push	 260			; 00000104H
  000c9	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 778  : 		CFileBase writeFile;

  000cf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000d3	6a 00		 push	 0
  000d5	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 780  : 		inlinePathCreate(index->filename);

  000d6	83 c3 04	 add	 ebx, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\Inline.h

; 6    : 	char dir[MAX_PATH] = {}; // @fixme017 (64->MAX_PATH and 0-initialized)

  000d9	e8 00 00 00 00	 call	 _memset

; 7    : 	const char* p, *k;
; 8    : 
; 9    : 	p = path + 3;

  000de	8d 43 03	 lea	 eax, DWORD PTR [ebx+3]

; 10   : 
; 11   : 	while (NULL != (k = strchr(p, '/')))

  000e1	6a 2f		 push	 47			; 0000002fH
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _strchr
  000e9	8b f8		 mov	 edi, eax
  000eb	83 c4 14	 add	 esp, 20			; 00000014H
  000ee	85 ff		 test	 edi, edi
  000f0	74 4b		 je	 SHORT $LN64@Extract
$LL63@Extract:

; 12   : 	{
; 13   : 		memset(dir, 0, sizeof(dir));

  000f2	68 04 01 00 00	 push	 260			; 00000104H
  000f7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$7[ebp]
  000fd	6a 00		 push	 0
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memset

; 14   : 		strncpy(dir, path, k - path);

  00105	8b c7		 mov	 eax, edi
  00107	2b c3		 sub	 eax, ebx
  00109	50		 push	 eax
  0010a	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$7[ebp]
  00110	53		 push	 ebx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _strncpy
  00117	83 c4 18	 add	 esp, 24			; 00000018H

; 15   : 		CreateDirectory(dir, NULL);

  0011a	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _dir$7[ebp]
  00120	6a 00		 push	 0
  00122	50		 push	 eax
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 16   : 		p = k + 1;

  00129	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0012c	6a 2f		 push	 47			; 0000002fH
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _strchr
  00134	8b f8		 mov	 edi, eax
  00136	83 c4 08	 add	 esp, 8
  00139	85 ff		 test	 edi, edi
  0013b	75 b5		 jne	 SHORT $LL63@Extract
$LN64@Extract:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 781  : 		printf("%s\n", index->filename);

  0013d	53		 push	 ebx
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  00143	e8 00 00 00 00	 call	 _printf
  00148	83 c4 08	 add	 esp, 8

; 782  : 
; 783  : 		writeFile.Create(index->filename, CFileBase::FILEMODE_WRITE);

  0014b	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  00151	6a 02		 push	 2
  00153	53		 push	 ebx
  00154	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create

; 784  : 
; 785  : 		if (COMPRESSED_TYPE_COMPRESS == index->compressed_type)

  00159	8b bd 4c fc ff
	ff		 mov	 edi, DWORD PTR _index$1$[ebp]
  0015f	8a 87 bc 00 00
	00		 mov	 al, BYTE PTR [edi+188]
  00165	3c 01		 cmp	 al, 1
  00167	75 37		 jne	 SHORT $LN6@Extract

; 786  : 		{
; 787  : 			if (!CLZO::Instance().Decompress(zObj, (const BYTE *) data + index->data_position))

  00169	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  0016f	03 85 70 fc ff
	ff		 add	 eax, DWORD PTR _data$[ebp]
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  0017b	6a 00		 push	 0
  0017d	50		 push	 eax
  0017e	8d 85 58 fc ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  0018a	84 c0		 test	 al, al
  0018c	0f 84 ad 02 00
	00		 je	 $LN112@Extract

; 788  : 			{
; 789  : 				printf("cannot decompress");
; 790  : 				return false;
; 791  : 			}
; 792  : 
; 793  : 			writeFile.Write(zObj.GetBuffer(), zObj.GetSize());

  00192	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00198	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
  0019d	50		 push	 eax

; 794  : 			zObj.Clear();
; 795  : 		}

  0019e	eb 72		 jmp	 SHORT $LN126@Extract
$LN6@Extract:

; 796  : 		else if (COMPRESSED_TYPE_SECURITY == index->compressed_type)

  001a0	3c 02		 cmp	 al, 2
  001a2	75 3a		 jne	 SHORT $LN9@Extract

; 797  : 		{
; 798  : 			if (!CLZO::Instance().Decompress(zObj, (const BYTE *) data + index->data_position, s_adwEterPackSecurityKey))

  001a4	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  001aa	03 85 70 fc ff
	ff		 add	 eax, DWORD PTR _data$[ebp]
  001b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  001b6	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackSecurityKey@@3PAKA
  001bb	50		 push	 eax
  001bc	8d 85 58 fc ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  001c8	84 c0		 test	 al, al
  001ca	0f 84 6f 02 00
	00		 je	 $LN112@Extract

; 799  : 			{
; 800  : 				printf("cannot decompress");
; 801  : 				return false;
; 802  : 			}
; 803  : 
; 804  : 			writeFile.Write(zObj.GetBuffer(), zObj.GetSize());

  001d0	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001d6	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
  001db	50		 push	 eax

; 805  : 			zObj.Clear();
; 806  : 		}

  001dc	eb 34		 jmp	 SHORT $LN126@Extract
$LN9@Extract:

; 807  : 		else if (COMPRESSED_TYPE_PANAMA == index->compressed_type)

  001de	3c 03		 cmp	 al, 3
  001e0	0f 85 a2 00 00
	00		 jne	 $LN12@Extract

; 808  : 		{
; 809  : 			__Decrypt_Panama(index->filename, (const BYTE *) data + index->data_position, index->data_size, zObj);

  001e6	8b 8d 6c fc ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001ec	8d 85 58 fc ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  001f2	50		 push	 eax
  001f3	ff b7 b0 00 00
	00		 push	 DWORD PTR [edi+176]
  001f9	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  001ff	03 85 70 fc ff
	ff		 add	 eax, DWORD PTR _data$[ebp]
  00205	50		 push	 eax
  00206	53		 push	 ebx
  00207	e8 00 00 00 00	 call	 ?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Decrypt_Panama
$LN18@Extract:

; 846  : 
; 847  : 		writeFile.Destroy();

  0020c	ff b5 5c fc ff
	ff		 push	 DWORD PTR _zObj$[ebp+4]
$LN126@Extract:
  00212	ff b5 58 fc ff
	ff		 push	 DWORD PTR _zObj$[ebp]
$LN127@Extract:
  00218	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  0021e	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write
  00223	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00229	e8 00 00 00 00	 call	 ?Clear@CLZObject@@QAEXXZ ; CLZObject::Clear
$LN21@Extract:
  0022e	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  00234	e8 00 00 00 00	 call	 ?Destroy@CFileBase@@QAEXXZ ; CFileBase::Destroy

; 848  : 	}

  00239	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  0023f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00243	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  00248	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  0024a	85 f6		 test	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 774  : 		i != m_DataPositionMap.end();

  0024c	0f 85 5e fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 849  : 	return true;

  00252	b3 01		 mov	 bl, 1
$LN32@Extract:
  00254	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0025a	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
$LN28@Extract:
  0025f	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  00265	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0026a	8a c3		 mov	 al, bl

; 850  : }

  0026c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00276	59		 pop	 ecx
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	5b		 pop	 ebx
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027d	33 cd		 xor	 ecx, ebp
  0027f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
$LN12@Extract:

; 810  : 			writeFile.Write(zObj.GetBuffer(), zObj.GetBufferSize());
; 811  : 			zObj.Clear();
; 812  : 		}
; 813  : 		else if (COMPRESSED_TYPE_HYBRIDCRYPT == index->compressed_type || COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  00288	3c 04		 cmp	 al, 4
  0028a	74 2b		 je	 SHORT $LN16@Extract
  0028c	3c 05		 cmp	 al, 5
  0028e	74 27		 je	 SHORT $LN16@Extract

; 834  : 			else
; 835  : 			{
; 836  : 				writeFile.Write(zObj.GetBuffer(), zObj.GetBufferSize());
; 837  : 			}
; 838  : 			zObj.Clear();
; 839  : #ifdef __THEMIDA__
; 840  : 			VM_END
; 841  : #endif
; 842  : 		}
; 843  : 
; 844  : 		else if (COMPRESSED_TYPE_NONE == index->compressed_type)

  00290	84 c0		 test	 al, al
  00292	75 9a		 jne	 SHORT $LN21@Extract

; 845  : 			writeFile.Write((const char *) data + index->data_position, index->data_size);

  00294	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  0029a	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  002a0	ff b7 b0 00 00
	00		 push	 DWORD PTR [edi+176]
  002a6	03 85 70 fc ff
	ff		 add	 eax, DWORD PTR _data$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write
  002b2	e9 77 ff ff ff	 jmp	 $LN21@Extract
$LN16@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002b7	8b cb		 mov	 ecx, ebx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  002b9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002c3	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002cd	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002d4	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL123@Extract:
  002d7	8a 01		 mov	 al, BYTE PTR [ecx]
  002d9	41		 inc	 ecx
  002da	84 c0		 test	 al, al
  002dc	75 f9		 jne	 SHORT $LL123@Extract
  002de	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002e0	51		 push	 ecx
  002e1	53		 push	 ebx
  002e2	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  002e8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 818  : 			if( !m_pCSHybridCryptPolicy->DecryptMemory(string(index->filename), (const BYTE *) data + index->data_position, index->data_size, zObj) )

  002ed	8d 85 58 fc ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  002f3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002f7	50		 push	 eax
  002f8	ff b7 b0 00 00
	00		 push	 DWORD PTR [edi+176]
  002fe	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  00304	03 85 70 fc ff
	ff		 add	 eax, DWORD PTR _data$[ebp]
  0030a	50		 push	 eax
  0030b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00311	50		 push	 eax
  00312	8b 85 6c fc ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00318	8b 88 d0 13 00
	00		 mov	 ecx, DWORD PTR [eax+5072]
  0031e	e8 00 00 00 00	 call	 ?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::DecryptMemory
  00323	84 c0		 test	 al, al
  00325	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00329	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 818  : 			if( !m_pCSHybridCryptPolicy->DecryptMemory(string(index->filename), (const BYTE *) data + index->data_position, index->data_size, zObj) )

  0032f	0f 94 85 77 fc
	ff ff		 sete	 BYTE PTR tv801[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00336	83 f8 10	 cmp	 eax, 16			; 00000010H
  00339	72 10		 jb	 SHORT $LN82@Extract

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0033b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033c	50		 push	 eax
  0033d	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T6[ebp]
  00343	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00348	83 c4 08	 add	 esp, 8
$LN82@Extract:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 818  : 			if( !m_pCSHybridCryptPolicy->DecryptMemory(string(index->filename), (const BYTE *) data + index->data_position, index->data_size, zObj) )

  0034b	80 bd 77 fc ff
	ff 00		 cmp	 BYTE PTR tv801[ebp], 0
  00352	0f 85 f4 00 00
	00		 jne	 $LN114@Extract

; 819  : 				return false;
; 820  : 
; 821  : 			if( COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  00358	80 bf bc 00 00
	00 05		 cmp	 BYTE PTR [edi+188], 5
  0035f	0f 85 a7 fe ff
	ff		 jne	 $LN18@Extract

; 822  : 			{
; 823  : 				dataMapFile.BindLZObjectWithBufferedSize(&zObj);

  00365	8d 85 58 fc ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  0036b	50		 push	 eax
  0036c	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  00372	e8 00 00 00 00	 call	 ?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObjectWithBufferedSize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00377	8b c3		 mov	 eax, ebx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00379	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00383	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0038d	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00394	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL124@Extract:
  00397	8a 08		 mov	 cl, BYTE PTR [eax]
  00399	40		 inc	 eax
  0039a	84 c9		 test	 cl, cl
  0039c	75 f9		 jne	 SHORT $LL124@Extract
  0039e	2b c2		 sub	 eax, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003a0	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  003a6	50		 push	 eax
  003a7	53		 push	 ebx
  003a8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 828  : 				if( !m_pCSHybridCryptPolicy->GetSupplementaryDataBlock(string(index->filename), pSDBData, iSDBSize) )

  003ad	8d 85 54 fc ff
	ff		 lea	 eax, DWORD PTR _iSDBSize$3[ebp]
  003b3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  003b7	50		 push	 eax
  003b8	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR _pSDBData$2[ebp]
  003be	50		 push	 eax
  003bf	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  003c5	50		 push	 eax
  003c6	8b 85 6c fc ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  003cc	8b 88 d0 13 00
	00		 mov	 ecx, DWORD PTR [eax+5072]
  003d2	e8 00 00 00 00	 call	 ?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
  003d7	84 c0		 test	 al, al
  003d9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003dd	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 828  : 				if( !m_pCSHybridCryptPolicy->GetSupplementaryDataBlock(string(index->filename), pSDBData, iSDBSize) )

  003e3	0f 94 c3	 sete	 bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003e6	83 f8 10	 cmp	 eax, 16			; 00000010H
  003e9	72 10		 jb	 SHORT $LN104@Extract

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003eb	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003ec	50		 push	 eax
  003ed	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T5[ebp]
  003f3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003f8	83 c4 08	 add	 esp, 8
$LN104@Extract:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 828  : 				if( !m_pCSHybridCryptPolicy->GetSupplementaryDataBlock(string(index->filename), pSDBData, iSDBSize) )

  003fb	84 db		 test	 bl, bl
  003fd	75 4d		 jne	 SHORT $LN114@Extract

; 830  : 
; 831  : 				dataMapFile.AppendDataBlock( pSDBData, iSDBSize );

  003ff	ff b5 54 fc ff
	ff		 push	 DWORD PTR _iSDBSize$3[ebp]
  00405	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0040b	ff b5 50 fc ff
	ff		 push	 DWORD PTR _pSDBData$2[ebp]
  00411	e8 00 00 00 00	 call	 ?AppendDataBlock@CMappedFile@@QAEPAEPBXK@Z ; CMappedFile::AppendDataBlock

; 832  : 				writeFile.Write(dataMapFile.AppendDataBlock( pSDBData, iSDBSize ),dataMapFile.Size());

  00416	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0041c	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00421	50		 push	 eax
  00422	ff b5 54 fc ff
	ff		 push	 DWORD PTR _iSDBSize$3[ebp]
  00428	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  0042e	ff b5 50 fc ff
	ff		 push	 DWORD PTR _pSDBData$2[ebp]
  00434	e8 00 00 00 00	 call	 ?AppendDataBlock@CMappedFile@@QAEPAEPBXK@Z ; CMappedFile::AppendDataBlock
  00439	50		 push	 eax

; 833  : 			}

  0043a	e9 d9 fd ff ff	 jmp	 $LN127@Extract
$LN112@Extract:
  0043f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OILLCEPM@cannot?5decompress@
  00444	e8 00 00 00 00	 call	 _printf
  00449	83 c4 04	 add	 esp, 4
$LN114@Extract:

; 829  : 					return false;

  0044c	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  00452	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  00457	32 db		 xor	 bl, bl
  00459	e9 f6 fd ff ff	 jmp	 $LN32@Extract
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$0:
  00000	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _dataMapFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$1:
  0000b	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$2:
  00016	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _writeFile$4[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$3:
  00021	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Extract@CEterPack@@QAE_NXZ$4:
  0002c	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?Extract@CEterPack@@QAE_NXZ:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 48 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-952]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Extract@CEterPack@@QAE_NXZ
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Extract@CEterPack@@QAE_NXZ ENDP			; CEterPack::Extract
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Delete@CEterPack@@QAE_NPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Delete@CEterPack@@QAE_NPBD@Z PROC			; CEterPack::Delete, COMDAT
; _this$ = ecx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 755  : 	TEterPackIndex * pIndex = FindIndex(filename);

  00004	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ; CEterPack::FindIndex

; 756  : 
; 757  : 	if (!pIndex)

  0000e	85 c0		 test	 eax, eax
  00010	75 07		 jne	 SHORT $LN2@Delete

; 758  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	5e		 pop	 esi

; 761  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@Delete:

; 759  : 
; 760  : 	return Delete(pIndex);

  00019	50		 push	 eax
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?Delete@CEterPack@@AAE_NPAUSEterPackIndex@@@Z ; CEterPack::Delete
  00021	5e		 pop	 esi

; 761  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?Delete@CEterPack@@QAE_NPBD@Z ENDP			; CEterPack::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Put@CEterPack@@QAE_NPBDPBXJE@Z
_TEXT	SEGMENT
_zObj$ = -656						; size = 20
_data_crc$1$ = -636					; size = 4
$T2 = -636						; size = 4
_filename$GSCopy$1$ = -632				; size = 4
$T3 = -632						; size = 4
_data$GSCopy$1$ = -628					; size = 4
_fileData$ = -624					; size = 280
_fileIndex$ = -344					; size = 280
$T4 = -64						; size = 24
_encryptStr$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_packType$ = 20						; size = 1
?Put@CEterPack@@QAE_NPBDPBXJE@Z PROC			; CEterPack::Put, COMDAT
; _this$ = ecx

; 940  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Put@CEterPack@@QAE_NPBDPBXJE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 02 00
	00		 sub	 esp, 644		; 00000284H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx

; 941  : 	if (m_bEncrypted)

  00030	80 bf 54 01 00
	00 00		 cmp	 BYTE PTR [edi+340], 0
  00037	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003d	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00040	89 b5 88 fd ff
	ff		 mov	 DWORD PTR _filename$GSCopy$1$[ebp], esi
  00046	89 85 8c fd ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], eax
  0004c	74 1c		 je	 SHORT $LN2@Put

; 942  : 	{
; 943  : 		TraceError("EterPack::Put : Cannot put to encrypted pack (filename: %s, DB: %s)", filename, m_dbName);

  0004e	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  00054	50		 push	 eax
  00055	56		 push	 esi
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@JIDJMBKL@EterPack?3?3Put?5?3?5Cannot?5put?5to?5e@
  0005b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 944  : 		return false;

  00063	32 c0		 xor	 al, al
  00065	e9 89 01 00 00	 jmp	 $LN1@Put
$LN2@Put:

; 945  : 	}
; 946  : 
; 947  : 	CFileBase fileIndex;

  0006a	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00070	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase

; 948  : 
; 949  : 	if (!fileIndex.Create(m_indexFileName, CFileBase::FILEMODE_WRITE))

  00075	6a 02		 push	 2
  00077	8d 87 55 02 00
	00		 lea	 eax, DWORD PTR [edi+597]
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	50		 push	 eax
  00085	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  0008b	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  00090	85 c0		 test	 eax, eax
  00092	75 07		 jne	 SHORT $LN3@Put
  00094	32 db		 xor	 bl, bl
  00096	e9 4b 01 00 00	 jmp	 $LN28@Put
$LN3@Put:

; 954  : 	CFileBase fileData;

  0009b	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _fileData$[ebp]
  000a1	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000a6	83 bf b4 13 00
	00 10		 cmp	 DWORD PTR [edi+5044], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  000ad	8d 87 a0 13 00
	00		 lea	 eax, DWORD PTR [edi+5024]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 954  : 	CFileBase fileData;

  000b3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000b7	72 02		 jb	 SHORT $LN38@Put

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000b9	8b 00		 mov	 eax, DWORD PTR [eax]
$LN38@Put:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 956  : 	if (!fileData.Create(m_stDataFileName.c_str(), CFileBase::FILEMODE_WRITE))

  000bb	6a 02		 push	 2
  000bd	50		 push	 eax
  000be	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _fileData$[ebp]
  000c4	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  000c9	85 c0		 test	 eax, eax
  000cb	75 07		 jne	 SHORT $LN4@Put
  000cd	32 db		 xor	 bl, bl
  000cf	e9 07 01 00 00	 jmp	 $LN29@Put
$LN4@Put:

; 957  : 	{
; 958  : 		return false;
; 959  : 	}
; 960  : 
; 961  : 	TEterPackIndex * pIndex;
; 962  : 	pIndex = FindIndex(filename);

  000d4	56		 push	 esi
  000d5	8b cf		 mov	 ecx, edi
  000d7	e8 00 00 00 00	 call	 ?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ; CEterPack::FindIndex

; 963  : 
; 964  : 	CLZObject zObj;

  000dc	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  000e2	8b f0		 mov	 esi, eax
  000e4	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000e9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _encryptStr$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000f0	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _encryptStr$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000f7	c6 45 d8 00	 mov	 BYTE PTR _encryptStr$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 967  : 	if (packType == COMPRESSED_TYPE_SECURITY ||

  000fb	8a 45 14	 mov	 al, BYTE PTR _packType$[ebp]
  000fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00102	3c 02		 cmp	 al, 2
  00104	0f 84 07 01 00
	00		 je	 $LN111@Put
  0010a	3c 01		 cmp	 al, 1
  0010c	0f 84 9f 00 00
	00		 je	 $LN8@Put

; 987  : 	}
; 988  : 	else if (packType == COMPRESSED_TYPE_PANAMA)

  00112	3c 03		 cmp	 al, 3
  00114	75 3a		 jne	 SHORT $LN12@Put

; 989  : 	{
; 990  : 		if (!__Encrypt_Panama(filename, (const BYTE *) data, len, zObj))

  00116	8d 85 70 fd ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  0011c	8b cf		 mov	 ecx, edi
  0011e	50		 push	 eax
  0011f	53		 push	 ebx
  00120	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00126	ff b5 88 fd ff
	ff		 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  0012c	e8 00 00 00 00	 call	 ?__Encrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Encrypt_Panama
  00131	84 c0		 test	 al, al
  00133	0f 84 95 00 00
	00		 je	 $LN30@Put

; 991  : 		{
; 992  : 			return false;
; 993  : 		}
; 994  : 
; 995  : 		data = zObj.GetBuffer();

  00139	8b 9d 70 fd ff
	ff		 mov	 ebx, DWORD PTR _zObj$[ebp]
  0013f	89 9d 8c fd ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], ebx

; 996  : 		len = zObj.GetBufferSize();

  00145	8b 9d 74 fd ff
	ff		 mov	 ebx, DWORD PTR _zObj$[ebp+4]

; 997  : 	}

  0014b	e9 fc 00 00 00	 jmp	 $LN15@Put
$LN12@Put:

; 998  : 	else if (packType == COMPRESSED_TYPE_HYBRIDCRYPT || packType == COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB )

  00150	3c 04		 cmp	 al, 4
  00152	74 08		 je	 SHORT $LN16@Put
  00154	3c 05		 cmp	 al, 5
  00156	0f 85 f0 00 00
	00		 jne	 $LN15@Put
$LN16@Put:

; 999  : 	{
; 1000 : #ifdef __THEMIDA__
; 1001 : 		VM_START
; 1002 : #endif
; 1003 : 
; 1004 : 		if( !m_pCSHybridCryptPolicy->EncryptMemory( string(filename), (const BYTE *)data, len, zObj ) )

  0015c	ff b5 88 fd ff
	ff		 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  00162	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00165	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0016a	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00170	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00174	51		 push	 ecx
  00175	8b 8f d0 13 00
	00		 mov	 ecx, DWORD PTR [edi+5072]
  0017b	53		 push	 ebx
  0017c	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::EncryptMemory
  00188	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0018b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0018f	8a d8		 mov	 bl, al
  00191	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00196	84 db		 test	 bl, bl
  00198	74 34		 je	 SHORT $LN30@Put

; 1005 : 		{
; 1006 : 			return false;
; 1007 : 		}
; 1008 : 
; 1009 : 		data = zObj.GetBuffer();

  0019a	8b 9d 70 fd ff
	ff		 mov	 ebx, DWORD PTR _zObj$[ebp]
  001a0	89 9d 8c fd ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], ebx

; 1010 : 		len = zObj.GetBufferSize();

  001a6	8b 9d 74 fd ff
	ff		 mov	 ebx, DWORD PTR _zObj$[ebp+4]
  001ac	e9 9b 00 00 00	 jmp	 $LN15@Put
$LN8@Put:

; 973  : 			{
; 974  : 				return false;
; 975  : 			}
; 976  : 		}
; 977  : 		else
; 978  : 		{
; 979  : 			if (!CLZO::Instance().CompressMemory(zObj, data, len))

  001b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  001b7	8d 85 70 fd ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  001bd	53		 push	 ebx
  001be	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 ?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z ; CLZO::CompressMemory
  001ca	84 c0		 test	 al, al
  001cc	75 65		 jne	 SHORT $LN11@Put
$LN30@Put:
  001ce	32 db		 xor	 bl, bl
$LN105@Put:

; 1092 : 
; 1093 : 	return true;

  001d0	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001d6	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
$LN29@Put:
  001db	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _fileData$[ebp]
  001e1	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
$LN28@Put:
  001e6	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  001ec	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  001f1	8a c3		 mov	 al, bl
$LN1@Put:

; 1094 : }

  001f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fd	59		 pop	 ecx
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00204	33 cd		 xor	 ecx, ebp
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 10 00	 ret	 16			; 00000010H
$LN111@Put:

; 968  : 		packType == COMPRESSED_TYPE_COMPRESS)
; 969  : 	{
; 970  : 		if (packType == COMPRESSED_TYPE_SECURITY)
; 971  : 		{
; 972  : 			if (!CLZO::Instance().CompressEncryptedMemory(zObj, data, len, s_adwEterPackSecurityKey))

  00211	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  00217	8d 85 70 fd ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  0021d	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackSecurityKey@@3PAKA
  00222	53		 push	 ebx
  00223	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z ; CLZO::CompressEncryptedMemory
  0022f	84 c0		 test	 al, al
  00231	74 9b		 je	 SHORT $LN30@Put
$LN11@Put:

; 980  : 			{
; 981  : 				return false;
; 982  : 			}
; 983  : 		}
; 984  : 
; 985  : 		data = zObj.GetBuffer();

  00233	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _zObj$[ebp]

; 986  : 		len = zObj.GetSize();

  00239	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0023f	89 85 8c fd ff
	ff		 mov	 DWORD PTR _data$GSCopy$1$[ebp], eax
  00245	e8 00 00 00 00	 call	 ?GetSize@CLZObject@@QAEKXZ ; CLZObject::GetSize
  0024a	8b d8		 mov	 ebx, eax
$LN15@Put:

; 1011 : #ifdef __THEMIDA__
; 1012 : 		VM_END
; 1013 : #endif
; 1014 : 
; 1015 : 	}
; 1016 : 
; 1017 : 
; 1018 : #ifdef CHECKSUM_CHECK_MD5
; 1019 : 	MD5_CTX context;
; 1020 : 	GenerateMD5Hash( (BYTE*)(data), len, context );
; 1021 : #else
; 1022 : 	DWORD data_crc;
; 1023 : 	data_crc = GetCRC32((const char *) data, len);

  0024c	53		 push	 ebx
  0024d	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00253	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00258	83 c4 08	 add	 esp, 8
  0025b	89 85 84 fd ff
	ff		 mov	 DWORD PTR _data_crc$1$[ebp], eax

; 1024 : #endif
; 1025 : 
; 1026 : 	if (pIndex)

  00261	85 f6		 test	 esi, esi
  00263	0f 84 b0 00 00
	00		 je	 $LN18@Put

; 1027 : 	{
; 1028 : 		if (pIndex->real_data_size >= len)

  00269	39 9e ac 00 00
	00		 cmp	 DWORD PTR [esi+172], ebx
  0026f	0f 8c 8d 00 00
	00		 jl	 $LN19@Put

; 1029 : 		{
; 1030 : 			++m_map_indexRefCount[pIndex->id];

  00275	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00277	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0027d	89 8d 88 fd ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00283	8d 8f 68 03 00
	00		 lea	 ecx, DWORD PTR [edi+872]
  00289	50		 push	 eax
  0028a	e8 00 00 00 00	 call	 ??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[]
  0028f	ff 00		 inc	 DWORD PTR [eax]

; 1031 : 
; 1032 : 			if ( (pIndex->data_size != len) ||

  00291	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _data_crc$1$[ebp]
  00297	39 9e b0 00 00
	00		 cmp	 DWORD PTR [esi+176], ebx
  0029d	75 08		 jne	 SHORT $LN21@Put
  0029f	39 86 b4 00 00
	00		 cmp	 DWORD PTR [esi+180], eax
  002a5	74 54		 je	 SHORT $LN20@Put
$LN21@Put:

; 1033 : #ifdef CHECKSUM_CHECK_MD5
; 1034 : 				(memcmp( pIndex->MD5Digest, context.digest, 16 ) != 0) )
; 1035 : #else
; 1036 : 				(pIndex->data_crc != data_crc) )
; 1037 : #endif
; 1038 : 			{
; 1039 : #ifdef __MAKE_PACK__
; 1040 : 				if (ms_PackLogFile)
; 1041 : 					fprintf(ms_PackLogFile, "Overwrite[%d/%d] %s\n", bCompress, bSecurity, pIndex->filename);
; 1042 : 				printf("Overwrite[%d/%d] %s\n", bCompress, bSecurity, pIndex->filename);
; 1043 : #endif
; 1044 : 				pIndex->data_size = len;
; 1045 : #ifdef CHECKSUM_CHECK_MD5
; 1046 : 				memcpy( pIndex->MD5Digest, context.digest, 16 );
; 1047 : 
; 1048 : #else
; 1049 : 				pIndex->data_crc = data_crc;
; 1050 : #endif
; 1051 : 
; 1052 : 				pIndex->compressed_type = packType;

  002a7	8a 4d 14	 mov	 cl, BYTE PTR _packType$[ebp]
  002aa	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax

; 1053 : 
; 1054 : 				CMakePackLog::GetSingleton().Writef("Overwrite[type:%u] %s\n", pIndex->compressed_type, pIndex->filename);

  002b0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  002b3	50		 push	 eax
  002b4	0f be c1	 movsx	 eax, cl
  002b7	50		 push	 eax
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IGHIDEHN@Overwrite?$FLtype?3?$CFu?$FN?5?$CFs?6@
  002bd	89 9e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ebx
  002c3	88 8e bc 00 00
	00		 mov	 BYTE PTR [esi+188], cl
  002c9	e8 00 00 00 00	 call	 ?GetSingleton@CMakePackLog@@SAAAV1@XZ ; CMakePackLog::GetSingleton
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 ?Writef@CMakePackLog@@QAAXPBDZZ ; CMakePackLog::Writef
  002d4	83 c4 10	 add	 esp, 16			; 00000010H

; 1055 : 
; 1056 : 				WriteIndex(fileIndex, pIndex);

  002d7	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _fileIndex$[ebp]
  002dd	8b cf		 mov	 ecx, edi
  002df	56		 push	 esi
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 ?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ; CEterPack::WriteIndex

; 1057 : 				WriteData(fileData, pIndex, data);

  002e6	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  002ec	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR _fileData$[ebp]
  002f2	8b cf		 mov	 ecx, edi
  002f4	56		 push	 esi
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 ?WriteData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ; CEterPack::WriteData
$LN20@Put:

; 1058 : 			}
; 1059 : 
; 1060 : 			return true;

  002fb	b3 01		 mov	 bl, 1
  002fd	e9 ce fe ff ff	 jmp	 $LN105@Put
$LN19@Put:

; 1061 : 		}
; 1062 : 
; 1063 : 		PushFreeIndex(pIndex);

  00302	56		 push	 esi
  00303	8b cf		 mov	 ecx, edi
  00305	e8 00 00 00 00	 call	 ?PushFreeIndex@CEterPack@@AAEXPAUSEterPackIndex@@@Z ; CEterPack::PushFreeIndex

; 1064 : 		WriteIndex(fileIndex, pIndex);

  0030a	56		 push	 esi
  0030b	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _fileIndex$[ebp]
  00311	8b cf		 mov	 ecx, edi
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 ?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ; CEterPack::WriteIndex
$LN18@Put:

; 1065 : 	}
; 1066 : 
; 1067 : 	pIndex = NewIndex(fileIndex, filename, len);

  00319	53		 push	 ebx
  0031a	ff b5 88 fd ff
	ff		 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  00320	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _fileIndex$[ebp]
  00326	8b cf		 mov	 ecx, edi
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 ?NewIndex@CEterPack@@AAEPAUSEterPackIndex@@AAVCFileBase@@PBDJ@Z ; CEterPack::NewIndex
  0032e	8b f0		 mov	 esi, eax

; 1068 : 	pIndex->data_size = len;
; 1069 : 
; 1070 : #ifdef CHECKSUM_CHECK_MD5
; 1071 : 		memcpy( pIndex->MD5Digest, context.digest, 16 );
; 1072 : #else
; 1073 : 		pIndex->data_crc = data_crc;
; 1074 : #endif
; 1075 : 
; 1076 : 
; 1077 : 	pIndex->data_position = GetNewDataPosition(fileData);

  00330	8b cf		 mov	 ecx, edi
  00332	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR _data_crc$1$[ebp]
  00338	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax
  0033e	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR _fileData$[ebp]
  00344	50		 push	 eax
  00345	89 9e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ebx
  0034b	e8 00 00 00 00	 call	 ?GetNewDataPosition@CEterPack@@AAEJAAVCFileBase@@@Z ; CEterPack::GetNewDataPosition

; 1078 : 	pIndex->compressed_type = packType;

  00350	8a 4d 14	 mov	 cl, BYTE PTR _packType$[ebp]
  00353	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax

; 1079 : 
; 1080 : 	WriteIndex(fileIndex, pIndex);

  00359	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _fileIndex$[ebp]
  0035f	56		 push	 esi
  00360	88 8e bc 00 00
	00		 mov	 BYTE PTR [esi+188], cl
  00366	8b cf		 mov	 ecx, edi
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 ?WriteIndex@CEterPack@@AAEXAAVCFileBase@@PAUSEterPackIndex@@@Z ; CEterPack::WriteIndex

; 1081 : 	WriteNewData(fileData, pIndex, data);

  0036e	ff b5 8c fd ff
	ff		 push	 DWORD PTR _data$GSCopy$1$[ebp]
  00374	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR _fileData$[ebp]
  0037a	8b cf		 mov	 ecx, edi
  0037c	56		 push	 esi
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 ?WriteNewData@CEterPack@@AAE_NAAVCFileBase@@PAUSEterPackIndex@@PBX@Z ; CEterPack::WriteNewData

; 1082 : 
; 1083 : 	++m_map_indexRefCount[pIndex->id];

  00383	8b 06		 mov	 eax, DWORD PTR [esi]
  00385	8d 8f 68 03 00
	00		 lea	 ecx, DWORD PTR [edi+872]
  0038b	89 85 84 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00391	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 ??A?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAEAAKABK@Z ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::operator[]
  0039d	ff 00		 inc	 DWORD PTR [eax]

; 1084 : 
; 1085 : #ifdef __MAKE_PACK__
; 1086 : 	if (ms_PackLogFile)
; 1087 : 		fprintf(ms_PackLogFile, "Write[%d/%d] %s\n", bCompress, bSecurity, pIndex->filename);
; 1088 : 	printf("Write[%d/%d] %s, position %ld realsize %ld size %ld\n",
; 1089 : 			bCompress, bSecurity, pIndex->filename, pIndex->data_position, pIndex->real_data_size, pIndex->data_size);
; 1090 : #endif
; 1091 : 	CMakePackLog::GetSingleton().Writef("Write[type:%u] %s\n", pIndex->compressed_type, pIndex->filename);

  0039f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  003a2	50		 push	 eax
  003a3	0f be 86 bc 00
	00 00		 movsx	 eax, BYTE PTR [esi+188]
  003aa	50		 push	 eax
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JEPAOIH@Write?$FLtype?3?$CFu?$FN?5?$CFs?6@
  003b0	e8 00 00 00 00	 call	 ?GetSingleton@CMakePackLog@@SAAAV1@XZ ; CMakePackLog::GetSingleton
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 ?Writef@CMakePackLog@@QAAXPBDZZ ; CMakePackLog::Writef
  003bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1092 : 
; 1093 : 	return true;

  003be	b3 01		 mov	 bl, 1
  003c0	e9 0b fe ff ff	 jmp	 $LN105@Put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$0:
  00000	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _fileIndex$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$1:
  0000b	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _fileData$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$2:
  00016	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$3:
  00021	8d 4d d8	 lea	 ecx, DWORD PTR _encryptStr$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Put@CEterPack@@QAE_NPBDPBXJE@Z$4:
  00029	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?Put@CEterPack@@QAE_NPBDPBXJE@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 6c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-660]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Put@CEterPack@@QAE_NPBDPBXJE@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Put@CEterPack@@QAE_NPBDPBXJE@Z ENDP			; CEterPack::Put
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_strRelateMapName$GSCopy$1$ = -388			; size = 4
_pMappedData$ = -384					; size = 4
_this$GSCopy$1$ = -380					; size = 4
_iMappedDataSize$ = -376				; size = 4
_data$ = -372						; size = 4
tv396 = -365						; size = 1
_mapFile$ = -364					; size = 324
$T2 = -40						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_sourceFilename$ = 12					; size = 4
_packType$ = 16						; size = 1
_strRelateMapName$ = 20					; size = 4
?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CEterPack::Put, COMDAT
; _this$ = ecx

; 876  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d 84 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 45 14	 mov	 eax, DWORD PTR _strRelateMapName$[ebp]

; 877  : 	CMappedFile mapFile;

  00037	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  0003d	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00040	8b 7d 0c	 mov	 edi, DWORD PTR _sourceFilename$[ebp]
  00043	89 85 7c fe ff
	ff		 mov	 DWORD PTR _strRelateMapName$GSCopy$1$[ebp], eax
  00049	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 878  : 	LPCVOID		data;
; 879  : 
; 880  : 	if (sourceFilename)

  00055	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  0005b	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	50		 push	 eax
  00066	85 ff		 test	 edi, edi
  00068	74 03		 je	 SHORT $LN2@Put

; 881  : 	{
; 882  : 		if (!mapFile.Create(sourceFilename, &data, 0, 0))

  0006a	57		 push	 edi

; 883  : 		{
; 884  : 			return false;
; 885  : 		}
; 886  : 	}

  0006b	eb 01		 jmp	 SHORT $LN67@Put
$LN2@Put:

; 887  : 	else if (!mapFile.Create(filename, &data, 0, 0))

  0006d	56		 push	 esi
$LN67@Put:

; 888  : 	{
; 889  : 		return false;
; 890  : 	}
; 891  : 
; 892  : 	BYTE*  pMappedData    = (BYTE*)data;

  0006e	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00073	85 c0		 test	 eax, eax
  00075	0f 84 55 01 00
	00		 je	 $LN15@Put
  0007b	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _data$[ebp]

; 893  : 	int	   iMappedDataSize = mapFile.Size();

  00081	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  00087	89 85 80 fe ff
	ff		 mov	 DWORD PTR _pMappedData$[ebp], eax
  0008d	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 894  : 
; 895  : 	if( packType == COMPRESSED_TYPE_HYBRIDCRYPT || packType == COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB )

  00092	8b 5d 10	 mov	 ebx, DWORD PTR _packType$[ebp]
  00095	89 85 88 fe ff
	ff		 mov	 DWORD PTR _iMappedDataSize$[ebp], eax
  0009b	80 fb 04	 cmp	 bl, 4
  0009e	74 09		 je	 SHORT $LN7@Put
  000a0	80 fb 05	 cmp	 bl, 5
  000a3	0f 85 0d 01 00
	00		 jne	 $LN64@Put
$LN7@Put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000a9	8b ce		 mov	 ecx, esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000ab	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b9	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000bd	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL61@Put:
  000c0	8a 01		 mov	 al, BYTE PTR [ecx]
  000c2	41		 inc	 ecx
  000c3	84 c0		 test	 al, al
  000c5	75 f9		 jne	 SHORT $LL61@Put
  000c7	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c9	51		 push	 ecx
  000ca	56		 push	 esi
  000cb	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000ce	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 900  : 		m_pCSHybridCryptPolicy->GenerateCryptKey( string(filename) );

  000d3	8b bd 84 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  000d9	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000dc	50		 push	 eax
  000dd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e1	8b 8f d0 13 00
	00		 mov	 ecx, DWORD PTR [edi+5072]
  000e7	e8 00 00 00 00	 call	 ?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ec	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 900  : 		m_pCSHybridCryptPolicy->GenerateCryptKey( string(filename) );

  000ef	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000f3	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f6	72 0d		 jb	 SHORT $LN33@Put

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000f8	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f9	50		 push	 eax
  000fa	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  000fd	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00102	83 c4 08	 add	 esp, 8
$LN33@Put:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 902  : 		if( packType == COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB )

  00105	80 fb 05	 cmp	 bl, 5
  00108	0f 85 8e 00 00
	00		 jne	 $LN63@Put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0010e	8b ce		 mov	 ecx, esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00110	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00117	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0011e	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00122	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL62@Put:
  00125	8a 01		 mov	 al, BYTE PTR [ecx]
  00127	41		 inc	 ecx
  00128	84 c0		 test	 al, al
  0012a	75 f9		 jne	 SHORT $LL62@Put
  0012c	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0012e	51		 push	 ecx
  0012f	56		 push	 esi
  00130	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00133	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 904  : 			if( !m_pCSHybridCryptPolicy->GenerateSupplementaryDataBlock( string(filename), strRelateMapName, (const BYTE*)data, mapFile.Size(), pMappedData, iMappedDataSize ))

  00138	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _iMappedDataSize$[ebp]
  0013e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00142	50		 push	 eax
  00143	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _pMappedData$[ebp]
  00149	50		 push	 eax
  0014a	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  00150	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00155	8b 8f d0 13 00
	00		 mov	 ecx, DWORD PTR [edi+5072]
  0015b	50		 push	 eax
  0015c	ff b5 8c fe ff
	ff		 push	 DWORD PTR _data$[ebp]
  00162	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00165	ff b5 7c fe ff
	ff		 push	 DWORD PTR _strRelateMapName$GSCopy$1$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
  00171	84 c0		 test	 al, al
  00173	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00177	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 904  : 			if( !m_pCSHybridCryptPolicy->GenerateSupplementaryDataBlock( string(filename), strRelateMapName, (const BYTE*)data, mapFile.Size(), pMappedData, iMappedDataSize ))

  0017a	0f 94 85 93 fe
	ff ff		 sete	 BYTE PTR tv396[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00181	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00184	72 0d		 jb	 SHORT $LN55@Put

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00186	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00187	50		 push	 eax
  00188	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  0018b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00190	83 c4 08	 add	 esp, 8
$LN55@Put:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 904  : 			if( !m_pCSHybridCryptPolicy->GenerateSupplementaryDataBlock( string(filename), strRelateMapName, (const BYTE*)data, mapFile.Size(), pMappedData, iMappedDataSize ))

  00193	80 bd 93 fe ff
	ff 00		 cmp	 BYTE PTR tv396[ebp], 0
  0019a	75 34		 jne	 SHORT $LN15@Put
$LN63@Put:

; 902  : 		if( packType == COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB )

  0019c	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _iMappedDataSize$[ebp]

; 905  : 			{
; 906  : 				return false;
; 907  : 			}
; 908  : 		}
; 909  : #ifdef __THEMIDA__
; 910  : 		VM_END
; 911  : #endif
; 912  : 	}
; 913  : 
; 914  : 	return Put(filename, pMappedData, iMappedDataSize, packType);

  001a2	8b cf		 mov	 ecx, edi
  001a4	53		 push	 ebx
  001a5	50		 push	 eax
  001a6	ff b5 80 fe ff
	ff		 push	 DWORD PTR _pMappedData$[ebp]
  001ac	56		 push	 esi
  001ad	e8 00 00 00 00	 call	 ?Put@CEterPack@@QAE_NPBDPBXJE@Z ; CEterPack::Put
  001b2	8a d8		 mov	 bl, al
  001b4	eb 1c		 jmp	 SHORT $LN16@Put
$LN64@Put:

; 894  : 
; 895  : 	if( packType == COMPRESSED_TYPE_HYBRIDCRYPT || packType == COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB )

  001b6	8b bd 84 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]

; 905  : 			{
; 906  : 				return false;
; 907  : 			}
; 908  : 		}
; 909  : #ifdef __THEMIDA__
; 910  : 		VM_END
; 911  : #endif
; 912  : 	}
; 913  : 
; 914  : 	return Put(filename, pMappedData, iMappedDataSize, packType);

  001bc	8b cf		 mov	 ecx, edi
  001be	53		 push	 ebx
  001bf	50		 push	 eax
  001c0	ff b5 80 fe ff
	ff		 push	 DWORD PTR _pMappedData$[ebp]
  001c6	56		 push	 esi
  001c7	e8 00 00 00 00	 call	 ?Put@CEterPack@@QAE_NPBDPBXJE@Z ; CEterPack::Put
  001cc	8a d8		 mov	 bl, al
  001ce	eb 02		 jmp	 SHORT $LN16@Put
$LN15@Put:
  001d0	32 db		 xor	 bl, bl
$LN16@Put:
  001d2	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  001d8	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  001dd	8a c3		 mov	 al, bl

; 915  : }

  001df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e9	59		 pop	 ecx
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx
  001ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _mapFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  0000b	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00013	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a 78 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-392]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CEterPack::Put
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -80					; size = 4
_out_file$GSCopy$1$ = -76				; size = 4
$T2 = -76						; size = 4
$T3 = -76						; size = 4
$T4 = -76						; size = 4
_filename$GSCopy$1$ = -72				; size = 4
_pSDBData$5 = -72					; size = 4
$T6 = -68						; size = 4
$T7 = -68						; size = 4
_iSDBSize$8 = -68					; size = 4
$T9 = -68						; size = 4
$T10 = -64						; size = 24
$T11 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_out_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_index$ = 16						; size = 4
_data$ = 20						; size = 4
?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z PROC ; CEterPack::Get2, COMDAT
; _this$ = ecx

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 75 10	 mov	 esi, DWORD PTR _index$[ebp]
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _out_file$[ebp]
  00034	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00037	8b 7d 14	 mov	 edi, DWORD PTR _data$[ebp]
  0003a	89 5d b4	 mov	 DWORD PTR _out_file$GSCopy$1$[ebp], ebx
  0003d	89 45 b8	 mov	 DWORD PTR _filename$GSCopy$1$[ebp], eax

; 628  : 	if (!index)

  00040	85 f6		 test	 esi, esi
  00042	0f 84 25 01 00
	00		 je	 $LN56@Get2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00048	83 b9 b4 13 00
	00 10		 cmp	 DWORD PTR [ecx+5044], 16 ; 00000010H

; 3668 :         return _Mypair._Myval2._Myptr();

  0004f	8d 81 a0 13 00
	00		 lea	 eax, DWORD PTR [ecx+5024]

; 2145 :         if (_Large_string_engaged()) {

  00055	72 02		 jb	 SHORT $LN43@Get2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00057	8b 00		 mov	 eax, DWORD PTR [eax]
$LN43@Get2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 641  : 	out_file.Create(m_stDataFileName.c_str(), data, index->data_position, index->data_size);

  00059	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  0005f	8b cb		 mov	 ecx, ebx
  00061	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  00067	57		 push	 edi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create

; 642  : 
; 643  : 	bool bIsSecurityCheckRequired = ( index->compressed_type == COMPRESSED_TYPE_SECURITY ||

  0006e	8a 86 bc 00 00
	00		 mov	 al, BYTE PTR [esi+188]
  00074	3c 02		 cmp	 al, 2
  00076	74 04		 je	 SHORT $LN20@Get2
  00078	3c 03		 cmp	 al, 3
  0007a	75 1c		 jne	 SHORT $LN55@Get2
$LN20@Get2:

; 644  : 									  index->compressed_type == COMPRESSED_TYPE_PANAMA );
; 645  : 
; 646  : 
; 647  : 	if( bIsSecurityCheckRequired )
; 648  : 	{
; 649  : #ifdef CHECKSUM_CHECK_MD5
; 650  : 		MD5_CTX context;
; 651  : 		GenerateMD5Hash( (BYTE*)(*data), index->data_size, context );
; 652  : 
; 653  : 		if( memcmp( index->MD5Digest, context.digest, 16 ) != 0 )
; 654  : 		{
; 655  : 			return false;
; 656  : 		}
; 657  : #else
; 658  : 		#ifdef ENABLE_CRC32_CHECK
; 659  : 		DWORD dwCrc32 = GetCRC32((const char*)(*data), index->data_size);

  0007c	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  00082	ff 37		 push	 DWORD PTR [edi]
  00084	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00089	83 c4 08	 add	 esp, 8

; 660  : 
; 661  : 		if( index->data_crc != dwCrc32 )

  0008c	39 86 b4 00 00
	00		 cmp	 DWORD PTR [esi+180], eax
  00092	0f 85 d5 00 00
	00		 jne	 $LN56@Get2
$LN55@Get2:

; 662  : 		{
; 663  : 			return false;
; 664  : 		}
; 665  : 		#endif
; 666  : #endif
; 667  : 	}
; 668  : 
; 669  : 	if (COMPRESSED_TYPE_COMPRESS == index->compressed_type)

  00098	8a 86 bc 00 00
	00		 mov	 al, BYTE PTR [esi+188]
  0009e	3c 01		 cmp	 al, 1
  000a0	75 5a		 jne	 SHORT $LN5@Get2

; 670  : 	{
; 671  : 		CLZObject * zObj = new CLZObject;

  000a2	6a 14		 push	 20			; 00000014H
  000a4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a9	83 c4 04	 add	 esp, 4
  000ac	89 45 b4	 mov	 DWORD PTR $T4[ebp], eax
  000af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN22@Get2
  000ba	8b c8		 mov	 ecx, eax
  000bc	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  000c1	8b f0		 mov	 esi, eax
  000c3	eb 02		 jmp	 SHORT $LN23@Get2
$LN22@Get2:
  000c5	33 f6		 xor	 esi, esi
$LN23@Get2:

; 672  : 
; 673  : 		if (!CLZO::Instance().Decompress(*zObj, static_cast<const BYTE *>(*data)))

  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  000cd	6a 00		 push	 0
  000cf	ff 37		 push	 DWORD PTR [edi]
  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  000de	84 c0		 test	 al, al
  000e0	75 0a		 jne	 SHORT $LN7@Get2

; 674  : 		{
; 675  : 			TraceError("Failed to decompress : %s", filename);

  000e2	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CFBHFFAK@Failed?5to?5decompress?5?3?5?$CFs@
  000ea	eb 63		 jmp	 SHORT $LN60@Get2
$LN7@Get2:

; 732  : 		}
; 733  : #ifdef __THEMIDA__
; 734  : 		VM_END
; 735  : #endif
; 736  : 	}
; 737  : 	return true;

  000ec	56		 push	 esi
  000ed	8b cb		 mov	 ecx, ebx
  000ef	e8 00 00 00 00	 call	 ?BindLZObject@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObject
  000f4	8b 06		 mov	 eax, DWORD PTR [esi]
  000f6	89 07		 mov	 DWORD PTR [edi], eax
  000f8	b0 01		 mov	 al, 1
  000fa	eb 73		 jmp	 SHORT $LN1@Get2
$LN5@Get2:

; 676  : 			delete zObj;
; 677  : 			return false;
; 678  : 		}
; 679  : 
; 680  : 		out_file.BindLZObject(zObj);
; 681  : 		*data = zObj->GetBuffer();
; 682  : 	}
; 683  : 	else if (COMPRESSED_TYPE_SECURITY == index->compressed_type)

  000fc	3c 02		 cmp	 al, 2
  000fe	0f 85 89 00 00
	00		 jne	 $LN8@Get2

; 684  : 	{
; 685  : 		CLZObject * zObj = new CLZObject;

  00104	6a 14		 push	 20			; 00000014H
  00106	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0010b	83 c4 04	 add	 esp, 4
  0010e	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
  00111	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00118	85 c0		 test	 eax, eax
  0011a	74 0b		 je	 SHORT $LN26@Get2
  0011c	8b c8		 mov	 ecx, eax
  0011e	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  00123	8b f0		 mov	 esi, eax
  00125	eb 02		 jmp	 SHORT $LN27@Get2
$LN26@Get2:
  00127	33 f6		 xor	 esi, esi
$LN27@Get2:

; 686  : 
; 687  : 		if (!CLZO::Instance().Decompress(*zObj, static_cast<const BYTE *>(*data), s_adwEterPackSecurityKey))

  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  0012f	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackSecurityKey@@3PAKA
  00134	ff 37		 push	 DWORD PTR [edi]
  00136	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013d	56		 push	 esi
  0013e	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  00143	84 c0		 test	 al, al
  00145	75 a5		 jne	 SHORT $LN7@Get2

; 688  : 		{
; 689  : 			TraceError("Failed to encrypt : %s", filename);

  00147	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CFAPLGOA@Failed?5to?5encrypt?5?3?5?$CFs@
$LN60@Get2:

; 724  : 			{
; 725  : 				return false;

  0014f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00154	83 c4 08	 add	 esp, 8
  00157	85 f6		 test	 esi, esi
  00159	74 12		 je	 SHORT $LN56@Get2
  0015b	8b ce		 mov	 ecx, esi
  0015d	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  00162	6a 14		 push	 20			; 00000014H
  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016a	83 c4 08	 add	 esp, 8
$LN56@Get2:
  0016d	32 c0		 xor	 al, al
$LN1@Get2:

; 738  : }

  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 10 00	 ret	 16			; 00000010H
$LN8@Get2:

; 690  : 			delete zObj;
; 691  : 			return false;
; 692  : 		}
; 693  : 
; 694  : 		out_file.BindLZObject(zObj);
; 695  : 		*data = zObj->GetBuffer();
; 696  : 	}
; 697  : 	else if (COMPRESSED_TYPE_PANAMA == index->compressed_type)

  0018d	3c 03		 cmp	 al, 3
  0018f	75 54		 jne	 SHORT $LN11@Get2

; 698  : 	{
; 699  : 		CLZObject * zObj = new CLZObject;

  00191	6a 14		 push	 20			; 00000014H
  00193	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00198	83 c4 04	 add	 esp, 4
  0019b	89 45 b4	 mov	 DWORD PTR $T2[ebp], eax
  0019e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001a5	85 c0		 test	 eax, eax
  001a7	74 09		 je	 SHORT $LN30@Get2
  001a9	8b c8		 mov	 ecx, eax
  001ab	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  001b0	eb 02		 jmp	 SHORT $LN59@Get2
$LN30@Get2:
  001b2	33 c0		 xor	 eax, eax
$LN59@Get2:

; 700  : 		__Decrypt_Panama(filename, static_cast<const BYTE*>(*data), index->data_size, *zObj);

  001b4	8b 4d b0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001b7	50		 push	 eax
  001b8	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  001be	89 45 bc	 mov	 DWORD PTR $T7[ebp], eax
  001c1	ff 37		 push	 DWORD PTR [edi]
  001c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ca	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  001cd	e8 00 00 00 00	 call	 ?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Decrypt_Panama

; 701  : 		out_file.BindLZObjectWithBufferedSize(zObj);

  001d2	8b 75 bc	 mov	 esi, DWORD PTR $T7[ebp]
  001d5	8b cb		 mov	 ecx, ebx
  001d7	56		 push	 esi
  001d8	e8 00 00 00 00	 call	 ?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObjectWithBufferedSize

; 702  : 		*data = zObj->GetBuffer();

  001dd	8b 06		 mov	 eax, DWORD PTR [esi]

; 732  : 		}
; 733  : #ifdef __THEMIDA__
; 734  : 		VM_END
; 735  : #endif
; 736  : 	}
; 737  : 	return true;

  001df	89 07		 mov	 DWORD PTR [edi], eax
  001e1	b0 01		 mov	 al, 1
  001e3	eb 8a		 jmp	 SHORT $LN1@Get2
$LN11@Get2:

; 703  : 	}
; 704  : 	else if (COMPRESSED_TYPE_HYBRIDCRYPT == index->compressed_type || COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  001e5	3c 04		 cmp	 al, 4
  001e7	74 08		 je	 SHORT $LN14@Get2
  001e9	3c 05		 cmp	 al, 5
  001eb	0f 85 e7 00 00
	00		 jne	 $LN17@Get2
$LN14@Get2:

; 705  : 	{
; 706  : #ifdef __THEMIDA__
; 707  : 		VM_START
; 708  : #endif
; 709  : 
; 710  : 		CLZObject * zObj = new CLZObject;

  001f1	6a 14		 push	 20			; 00000014H
  001f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001f8	83 c4 04	 add	 esp, 4
  001fb	89 45 bc	 mov	 DWORD PTR $T9[ebp], eax
  001fe	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00205	85 c0		 test	 eax, eax
  00207	74 0e		 je	 SHORT $LN32@Get2
  00209	8b c8		 mov	 ecx, eax
  0020b	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  00210	8b d8		 mov	 ebx, eax
  00212	89 45 bc	 mov	 DWORD PTR $T6[ebp], eax
  00215	eb 05		 jmp	 SHORT $LN33@Get2
$LN32@Get2:
  00217	33 db		 xor	 ebx, ebx
  00219	89 5d bc	 mov	 DWORD PTR $T6[ebp], ebx
$LN33@Get2:

; 711  : 
; 712  : 		if( !m_pCSHybridCryptPolicy->DecryptMemory(string(filename), static_cast<const BYTE*>(*data), index->data_size, *zObj) )

  0021c	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  0021f	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  00222	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00229	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0022e	8b 4d b0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00231	53		 push	 ebx
  00232	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  00238	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  0023f	ff 37		 push	 DWORD PTR [edi]
  00241	8b 89 d0 13 00
	00		 mov	 ecx, DWORD PTR [ecx+5072]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::DecryptMemory
  0024d	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  00250	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00257	8a d8		 mov	 bl, al
  00259	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0025e	84 db		 test	 bl, bl
  00260	0f 84 07 ff ff
	ff		 je	 $LN56@Get2

; 713  : 		{
; 714  : 			return false;
; 715  : 		}
; 716  : 		out_file.BindLZObjectWithBufferedSize(zObj);

  00266	8b 5d bc	 mov	 ebx, DWORD PTR $T6[ebp]
  00269	8b 4d b4	 mov	 ecx, DWORD PTR _out_file$GSCopy$1$[ebp]
  0026c	53		 push	 ebx
  0026d	e8 00 00 00 00	 call	 ?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObjectWithBufferedSize

; 717  : 
; 718  : 		if( COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  00272	80 be bc 00 00
	00 05		 cmp	 BYTE PTR [esi+188], 5
  00279	75 59		 jne	 SHORT $LN16@Get2

; 719  : 		{
; 720  : 			BYTE* pSDBData;
; 721  : 			int   iSDBSize;
; 722  : 
; 723  : 			if( !m_pCSHybridCryptPolicy->GetSupplementaryDataBlock(string(filename), pSDBData, iSDBSize) )

  0027b	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  0027e	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  00281	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00286	8d 4d bc	 lea	 ecx, DWORD PTR _iSDBSize$8[ebp]
  00289	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00290	51		 push	 ecx
  00291	8d 4d b8	 lea	 ecx, DWORD PTR _pSDBData$5[ebp]
  00294	51		 push	 ecx
  00295	50		 push	 eax
  00296	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00299	8b 88 d0 13 00
	00		 mov	 ecx, DWORD PTR [eax+5072]
  0029f	e8 00 00 00 00	 call	 ?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
  002a4	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  002a7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ae	8a d8		 mov	 bl, al
  002b0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002b5	84 db		 test	 bl, bl
  002b7	0f 84 b0 fe ff
	ff		 je	 $LN56@Get2

; 726  : 			}
; 727  : 			*data = out_file.AppendDataBlock( pSDBData, iSDBSize );

  002bd	ff 75 bc	 push	 DWORD PTR _iSDBSize$8[ebp]
  002c0	8b 4d b4	 mov	 ecx, DWORD PTR _out_file$GSCopy$1$[ebp]
  002c3	ff 75 b8	 push	 DWORD PTR _pSDBData$5[ebp]
  002c6	e8 00 00 00 00	 call	 ?AppendDataBlock@CMappedFile@@QAEPAEPBXK@Z ; CMappedFile::AppendDataBlock

; 732  : 		}
; 733  : #ifdef __THEMIDA__
; 734  : 		VM_END
; 735  : #endif
; 736  : 	}
; 737  : 	return true;

  002cb	89 07		 mov	 DWORD PTR [edi], eax
  002cd	b0 01		 mov	 al, 1
  002cf	e9 9b fe ff ff	 jmp	 $LN1@Get2
$LN16@Get2:

; 728  : 		}
; 729  : 		else
; 730  : 		{
; 731  : 			*data = zObj->GetBuffer();

  002d4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 732  : 		}
; 733  : #ifdef __THEMIDA__
; 734  : 		VM_END
; 735  : #endif
; 736  : 	}
; 737  : 	return true;

  002d6	89 07		 mov	 DWORD PTR [edi], eax
$LN17@Get2:
  002d8	b0 01		 mov	 al, 1
  002da	e9 90 fe ff ff	 jmp	 $LN1@Get2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$0:
  00000	6a 14		 push	 20			; 00000014H
  00002	8b 45 b4	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$1:
  0000f	6a 14		 push	 20			; 00000014H
  00011	8b 45 b4	 mov	 eax, DWORD PTR $T3[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
  0001d	c3		 ret	 0
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$2:
  0001e	6a 14		 push	 20			; 00000014H
  00020	8b 45 b4	 mov	 eax, DWORD PTR $T2[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
  0002c	c3		 ret	 0
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$3:
  0002d	6a 14		 push	 20			; 00000014H
  0002f	8b 45 bc	 mov	 eax, DWORD PTR $T9[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
  0003b	c3		 ret	 0
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$4:
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z$5:
  00044	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
__ehhandler$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z:
  00051	90		 npad	 1
  00052	90		 npad	 1
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z ENDP ; CEterPack::Get2
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_out_file$GSCopy$1$ = -84				; size = 4
_this$GSCopy$1$ = -80					; size = 4
_pSDBData$2 = -76					; size = 4
$T3 = -76						; size = 4
$T4 = -76						; size = 4
$T5 = -76						; size = 4
$T6 = -76						; size = 4
_filename$GSCopy$1$ = -72				; size = 4
$T7 = -68						; size = 4
$T8 = -68						; size = 4
_iSDBSize$9 = -68					; size = 4
$T10 = -64						; size = 24
$T11 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_out_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_data$ = 16						; size = 4
?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC	; CEterPack::Get, COMDAT
; _this$ = ecx

; 508  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _out_file$[ebp]
  00034	8b 7d 10	 mov	 edi, DWORD PTR _data$[ebp]

; 509  : 	TEterPackIndex * index = FindIndex(filename);

  00037	50		 push	 eax
  00038	89 5d ac	 mov	 DWORD PTR _out_file$GSCopy$1$[ebp], ebx
  0003b	89 45 b8	 mov	 DWORD PTR _filename$GSCopy$1$[ebp], eax
  0003e	e8 00 00 00 00	 call	 ?FindIndex@CEterPack@@AAEPAUSEterPackIndex@@PBD@Z ; CEterPack::FindIndex
  00043	8b f0		 mov	 esi, eax

; 510  : 
; 511  : 	if (!index)

  00045	85 f6		 test	 esi, esi
  00047	0f 84 24 01 00
	00		 je	 $LN56@Get
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  0004d	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00050	05 a0 13 00 00	 add	 eax, 5024		; 000013a0H

; 2145 :         if (_Large_string_engaged()) {

  00055	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00059	72 02		 jb	 SHORT $LN43@Get

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0005b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN43@Get:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 525  : 	out_file.Create(m_stDataFileName.c_str(), data, index->data_position, index->data_size);

  0005d	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  00063	8b cb		 mov	 ecx, ebx
  00065	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  0006b	57		 push	 edi
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create

; 526  : 
; 527  : 	bool bIsSecurityCheckRequired = ( index->compressed_type == COMPRESSED_TYPE_SECURITY ||

  00072	8a 86 bc 00 00
	00		 mov	 al, BYTE PTR [esi+188]
  00078	3c 02		 cmp	 al, 2
  0007a	74 04		 je	 SHORT $LN20@Get
  0007c	3c 03		 cmp	 al, 3
  0007e	75 1c		 jne	 SHORT $LN55@Get
$LN20@Get:

; 528  : 									  index->compressed_type == COMPRESSED_TYPE_PANAMA );
; 529  : 
; 530  : 
; 531  : 	if( bIsSecurityCheckRequired )
; 532  : 	{
; 533  : #ifdef CHECKSUM_CHECK_MD5
; 534  : 		MD5_CTX context;
; 535  : 		GenerateMD5Hash( (BYTE*)(*data), index->data_size, context );
; 536  : 
; 537  : 		if( memcmp( index->MD5Digest, context.digest, 16 ) != 0 )
; 538  : 		{
; 539  : 			return false;
; 540  : 		}
; 541  : #else
; 542  : 		#ifdef ENABLE_CRC32_CHECK
; 543  : 		DWORD dwCrc32 = GetCRC32((const char*)(*data), index->data_size);

  00080	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  00086	ff 37		 push	 DWORD PTR [edi]
  00088	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0008d	83 c4 08	 add	 esp, 8

; 544  : 
; 545  : 		if( index->data_crc != dwCrc32 )

  00090	39 86 b4 00 00
	00		 cmp	 DWORD PTR [esi+180], eax
  00096	0f 85 d5 00 00
	00		 jne	 $LN56@Get
$LN55@Get:

; 546  : 		{
; 547  : 			return false;
; 548  : 		}
; 549  : 		#endif
; 550  : #endif
; 551  : 	}
; 552  : 
; 553  : 	if (COMPRESSED_TYPE_COMPRESS == index->compressed_type)

  0009c	8a 86 bc 00 00
	00		 mov	 al, BYTE PTR [esi+188]
  000a2	3c 01		 cmp	 al, 1
  000a4	75 5a		 jne	 SHORT $LN5@Get

; 554  : 	{
; 555  : 		CLZObject * zObj = new CLZObject;

  000a6	6a 14		 push	 20			; 00000014H
  000a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ad	83 c4 04	 add	 esp, 4
  000b0	89 45 b4	 mov	 DWORD PTR $T6[ebp], eax
  000b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ba	85 c0		 test	 eax, eax
  000bc	74 0b		 je	 SHORT $LN22@Get
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  000c5	8b f0		 mov	 esi, eax
  000c7	eb 02		 jmp	 SHORT $LN23@Get
$LN22@Get:
  000c9	33 f6		 xor	 esi, esi
$LN23@Get:

; 556  : 
; 557  : 		if (!CLZO::Instance().Decompress(*zObj, static_cast<const BYTE *>(*data)))

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  000d1	6a 00		 push	 0
  000d3	ff 37		 push	 DWORD PTR [edi]
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  000e2	84 c0		 test	 al, al
  000e4	75 0a		 jne	 SHORT $LN7@Get

; 558  : 		{
; 559  : 			TraceError("Failed to decompress : %s", filename);

  000e6	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CFBHFFAK@Failed?5to?5decompress?5?3?5?$CFs@
  000ee	eb 63		 jmp	 SHORT $LN60@Get
$LN7@Get:

; 617  : 		}
; 618  : #ifdef __THEMIDA__
; 619  : 		VM_END
; 620  : #endif
; 621  : 	}
; 622  : 
; 623  : 	return true;

  000f0	56		 push	 esi
  000f1	8b cb		 mov	 ecx, ebx
  000f3	e8 00 00 00 00	 call	 ?BindLZObject@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObject
  000f8	8b 06		 mov	 eax, DWORD PTR [esi]
  000fa	89 07		 mov	 DWORD PTR [edi], eax
  000fc	b0 01		 mov	 al, 1
  000fe	eb 73		 jmp	 SHORT $LN1@Get
$LN5@Get:

; 560  : 			delete zObj;
; 561  : 			return false;
; 562  : 		}
; 563  : 
; 564  : 		out_file.BindLZObject(zObj);
; 565  : 		*data = zObj->GetBuffer();
; 566  : 	}
; 567  : 	else if (COMPRESSED_TYPE_SECURITY == index->compressed_type)

  00100	3c 02		 cmp	 al, 2
  00102	0f 85 89 00 00
	00		 jne	 $LN8@Get

; 568  : 	{
; 569  : 		CLZObject * zObj = new CLZObject;

  00108	6a 14		 push	 20			; 00000014H
  0010a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0010f	83 c4 04	 add	 esp, 4
  00112	89 45 b4	 mov	 DWORD PTR $T5[ebp], eax
  00115	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0011c	85 c0		 test	 eax, eax
  0011e	74 0b		 je	 SHORT $LN26@Get
  00120	8b c8		 mov	 ecx, eax
  00122	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  00127	8b f0		 mov	 esi, eax
  00129	eb 02		 jmp	 SHORT $LN27@Get
$LN26@Get:
  0012b	33 f6		 xor	 esi, esi
$LN27@Get:

; 570  : 
; 571  : 		if (!CLZO::Instance().Decompress(*zObj, static_cast<const BYTE *>(*data), s_adwEterPackSecurityKey))

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  00133	68 00 00 00 00	 push	 OFFSET ?s_adwEterPackSecurityKey@@3PAKA
  00138	ff 37		 push	 DWORD PTR [edi]
  0013a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00141	56		 push	 esi
  00142	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  00147	84 c0		 test	 al, al
  00149	75 a5		 jne	 SHORT $LN7@Get

; 572  : 		{
; 573  : 			TraceError("Failed to encrypt : %s", filename);

  0014b	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CFAPLGOA@Failed?5to?5encrypt?5?3?5?$CFs@
$LN60@Get:

; 608  : 			{
; 609  : 				return false;

  00153	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00158	83 c4 08	 add	 esp, 8
  0015b	85 f6		 test	 esi, esi
  0015d	74 12		 je	 SHORT $LN56@Get
  0015f	8b ce		 mov	 ecx, esi
  00161	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  00166	6a 14		 push	 20			; 00000014H
  00168	56		 push	 esi
  00169	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016e	83 c4 08	 add	 esp, 8
$LN56@Get:
  00171	32 c0		 xor	 al, al
$LN1@Get:

; 624  : }

  00173	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00176	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017d	59		 pop	 ecx
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 0c 00	 ret	 12			; 0000000cH
$LN8@Get:

; 574  : 			delete zObj;
; 575  : 			return false;
; 576  : 		}
; 577  : 
; 578  : 		out_file.BindLZObject(zObj);
; 579  : 		*data = zObj->GetBuffer();
; 580  : 	}
; 581  : 	else if (COMPRESSED_TYPE_PANAMA == index->compressed_type)

  00191	3c 03		 cmp	 al, 3
  00193	75 54		 jne	 SHORT $LN11@Get

; 582  : 	{
; 583  : 		CLZObject * zObj = new CLZObject;

  00195	6a 14		 push	 20			; 00000014H
  00197	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0019c	83 c4 04	 add	 esp, 4
  0019f	89 45 b4	 mov	 DWORD PTR $T4[ebp], eax
  001a2	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001a9	85 c0		 test	 eax, eax
  001ab	74 09		 je	 SHORT $LN30@Get
  001ad	8b c8		 mov	 ecx, eax
  001af	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  001b4	eb 02		 jmp	 SHORT $LN59@Get
$LN30@Get:
  001b6	33 c0		 xor	 eax, eax
$LN59@Get:

; 584  : 		__Decrypt_Panama(filename, static_cast<const BYTE*>(*data), index->data_size, *zObj);

  001b8	8b 4d b0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001bb	50		 push	 eax
  001bc	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  001c2	89 45 bc	 mov	 DWORD PTR $T8[ebp], eax
  001c5	ff 37		 push	 DWORD PTR [edi]
  001c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ce	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  001d1	e8 00 00 00 00	 call	 ?__Decrypt_Panama@CEterPack@@AAE_NPBDPBEKAAVCLZObject@@@Z ; CEterPack::__Decrypt_Panama

; 585  : 		out_file.BindLZObjectWithBufferedSize(zObj);

  001d6	8b 75 bc	 mov	 esi, DWORD PTR $T8[ebp]
  001d9	8b cb		 mov	 ecx, ebx
  001db	56		 push	 esi
  001dc	e8 00 00 00 00	 call	 ?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObjectWithBufferedSize

; 586  : 		*data = zObj->GetBuffer();

  001e1	8b 06		 mov	 eax, DWORD PTR [esi]

; 617  : 		}
; 618  : #ifdef __THEMIDA__
; 619  : 		VM_END
; 620  : #endif
; 621  : 	}
; 622  : 
; 623  : 	return true;

  001e3	89 07		 mov	 DWORD PTR [edi], eax
  001e5	b0 01		 mov	 al, 1
  001e7	eb 8a		 jmp	 SHORT $LN1@Get
$LN11@Get:

; 587  : 	}
; 588  : 	else if (COMPRESSED_TYPE_HYBRIDCRYPT == index->compressed_type || COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  001e9	3c 04		 cmp	 al, 4
  001eb	74 08		 je	 SHORT $LN14@Get
  001ed	3c 05		 cmp	 al, 5
  001ef	0f 85 e7 00 00
	00		 jne	 $LN17@Get
$LN14@Get:

; 589  : 	{
; 590  : #ifdef __THEMIDA__
; 591  : 		VM_START
; 592  : #endif
; 593  : 
; 594  : 		CLZObject * zObj = new CLZObject;

  001f5	6a 14		 push	 20			; 00000014H
  001f7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001fc	83 c4 04	 add	 esp, 4
  001ff	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
  00202	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00209	85 c0		 test	 eax, eax
  0020b	74 0e		 je	 SHORT $LN32@Get
  0020d	8b c8		 mov	 ecx, eax
  0020f	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject
  00214	8b d8		 mov	 ebx, eax
  00216	89 45 bc	 mov	 DWORD PTR $T7[ebp], eax
  00219	eb 05		 jmp	 SHORT $LN33@Get
$LN32@Get:
  0021b	33 db		 xor	 ebx, ebx
  0021d	89 5d bc	 mov	 DWORD PTR $T7[ebp], ebx
$LN33@Get:

; 595  : 
; 596  : 		if( !m_pCSHybridCryptPolicy->DecryptMemory(string(filename), static_cast<const BYTE*>(*data), index->data_size, *zObj) )

  00220	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  00223	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  00226	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0022d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00232	53		 push	 ebx
  00233	ff b6 b0 00 00
	00		 push	 DWORD PTR [esi+176]
  00239	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00240	ff 37		 push	 DWORD PTR [edi]
  00242	50		 push	 eax
  00243	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00246	8b 88 d0 13 00
	00		 mov	 ecx, DWORD PTR [eax+5072]
  0024c	e8 00 00 00 00	 call	 ?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::DecryptMemory
  00251	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  00254	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025b	8a d8		 mov	 bl, al
  0025d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00262	84 db		 test	 bl, bl
  00264	0f 84 07 ff ff
	ff		 je	 $LN56@Get

; 597  : 		{
; 598  : 			return false;
; 599  : 		}
; 600  : 
; 601  : 		out_file.BindLZObjectWithBufferedSize(zObj);

  0026a	8b 5d bc	 mov	 ebx, DWORD PTR $T7[ebp]
  0026d	8b 4d ac	 mov	 ecx, DWORD PTR _out_file$GSCopy$1$[ebp]
  00270	53		 push	 ebx
  00271	e8 00 00 00 00	 call	 ?BindLZObjectWithBufferedSize@CMappedFile@@QAEXPAVCLZObject@@@Z ; CMappedFile::BindLZObjectWithBufferedSize

; 602  : 		if( COMPRESSED_TYPE_HYBRIDCRYPT_WITHSDB == index->compressed_type)

  00276	80 be bc 00 00
	00 05		 cmp	 BYTE PTR [esi+188], 5
  0027d	75 59		 jne	 SHORT $LN16@Get

; 603  : 		{
; 604  : 			BYTE* pSDBData;
; 605  : 			int   iSDBSize;
; 606  : 
; 607  : 			if( !m_pCSHybridCryptPolicy->GetSupplementaryDataBlock(string(filename), pSDBData, iSDBSize) )

  0027f	ff 75 b8	 push	 DWORD PTR _filename$GSCopy$1$[ebp]
  00282	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  00285	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0028a	8d 4d bc	 lea	 ecx, DWORD PTR _iSDBSize$9[ebp]
  0028d	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00294	51		 push	 ecx
  00295	8d 4d b4	 lea	 ecx, DWORD PTR _pSDBData$2[ebp]
  00298	51		 push	 ecx
  00299	50		 push	 eax
  0029a	8b 45 b0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0029d	8b 88 d0 13 00
	00		 mov	 ecx, DWORD PTR [eax+5072]
  002a3	e8 00 00 00 00	 call	 ?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
  002a8	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  002ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b2	8a d8		 mov	 bl, al
  002b4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002b9	84 db		 test	 bl, bl
  002bb	0f 84 b0 fe ff
	ff		 je	 $LN56@Get

; 610  : 			}
; 611  : 
; 612  : 			*data = out_file.AppendDataBlock( pSDBData, iSDBSize );

  002c1	ff 75 bc	 push	 DWORD PTR _iSDBSize$9[ebp]
  002c4	8b 4d ac	 mov	 ecx, DWORD PTR _out_file$GSCopy$1$[ebp]
  002c7	ff 75 b4	 push	 DWORD PTR _pSDBData$2[ebp]
  002ca	e8 00 00 00 00	 call	 ?AppendDataBlock@CMappedFile@@QAEPAEPBXK@Z ; CMappedFile::AppendDataBlock

; 617  : 		}
; 618  : #ifdef __THEMIDA__
; 619  : 		VM_END
; 620  : #endif
; 621  : 	}
; 622  : 
; 623  : 	return true;

  002cf	89 07		 mov	 DWORD PTR [edi], eax
  002d1	b0 01		 mov	 al, 1
  002d3	e9 9b fe ff ff	 jmp	 $LN1@Get
$LN16@Get:

; 613  : 		}
; 614  : 		else
; 615  : 		{
; 616  : 			*data = zObj->GetBuffer();

  002d8	8b 03		 mov	 eax, DWORD PTR [ebx]

; 617  : 		}
; 618  : #ifdef __THEMIDA__
; 619  : 		VM_END
; 620  : #endif
; 621  : 	}
; 622  : 
; 623  : 	return true;

  002da	89 07		 mov	 DWORD PTR [edi], eax
$LN17@Get:
  002dc	b0 01		 mov	 al, 1
  002de	e9 90 fe ff ff	 jmp	 $LN1@Get
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0:
  00000	6a 14		 push	 20			; 00000014H
  00002	8b 45 b4	 mov	 eax, DWORD PTR $T6[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$1:
  0000f	6a 14		 push	 20			; 00000014H
  00011	8b 45 b4	 mov	 eax, DWORD PTR $T5[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
  0001d	c3		 ret	 0
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$2:
  0001e	6a 14		 push	 20			; 00000014H
  00020	8b 45 b4	 mov	 eax, DWORD PTR $T4[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
  0002c	c3		 ret	 0
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$3:
  0002d	6a 14		 push	 20			; 00000014H
  0002f	8b 45 b4	 mov	 eax, DWORD PTR $T3[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
  0003b	c3		 ret	 0
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$4:
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$5:
  00044	8d 4d c0	 lea	 ecx, DWORD PTR $T10[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
__ehhandler$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:
  00051	90		 npad	 1
  00052	90		 npad	 1
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP	; CEterPack::Get
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetDBName@CEterPack@@QAEPBDXZ
_TEXT	SEGMENT
?GetDBName@CEterPack@@QAEPBDXZ PROC			; CEterPack::GetDBName, COMDAT
; _this$ = ecx

; 1343 : 	return m_dbName;

  00000	8d 81 55 01 00
	00		 lea	 eax, DWORD PTR [ecx+341]

; 1344 : }

  00006	c3		 ret	 0
?GetDBName@CEterPack@@QAEPBDXZ ENDP			; CEterPack::GetDBName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetPathName@CEterPack@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetPathName@CEterPack@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CEterPack::GetPathName, COMDAT
; _this$ = ecx

; 242  : 	return m_stPathName;

  00000	8d 81 b8 13 00
	00		 lea	 eax, DWORD PTR [ecx+5048]

; 243  : }

  00006	c3		 ret	 0
?GetPathName@CEterPack@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CEterPack::GetPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?DecryptIV@CEterPack@@QAE_NK@Z
_TEXT	SEGMENT
_dwPanamaKey$ = 8					; size = 4
?DecryptIV@CEterPack@@QAE_NK@Z PROC			; CEterPack::DecryptIV, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 290  : 	if (m_stIV_Panama.length() != 32)

  00006	83 be e4 13 00
	00 20		 cmp	 DWORD PTR [esi+5092], 32 ; 00000020H
  0000d	74 07		 je	 SHORT $LN5@DecryptIV

; 291  : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 304  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN5@DecryptIV:

; 292  : 
; 293  : 	if (m_bDecrypedIV)

  00016	80 be 65 03 00
	00 00		 cmp	 BYTE PTR [esi+869], 0
  0001d	75 36		 jne	 SHORT $LN19@DecryptIV
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0001f	83 be e8 13 00
	00 10		 cmp	 DWORD PTR [esi+5096], 16 ; 00000010H
  00026	57		 push	 edi

; 3590 :         return _Mypair._Myval2._Myptr()[_Off];

  00027	8d be d4 13 00
	00		 lea	 edi, DWORD PTR [esi+5076]

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN11@DecryptIV

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN11@DecryptIV:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 297  : 	for (int i = 0; i != m_stIV_Panama.length() / sizeof(DWORD); ++i)

  00031	8b 55 08	 mov	 edx, DWORD PTR _dwPanamaKey$[ebp]
  00034	33 c9		 xor	 ecx, ecx
$LL4@DecryptIV:

; 298  : 	{
; 299  : 		ivs[i] ^= dwPanamaKey + i * 16777619;

  00036	31 14 8f	 xor	 DWORD PTR [edi+ecx*4], edx
  00039	41		 inc	 ecx
  0003a	8b 86 e4 13 00
	00		 mov	 eax, DWORD PTR [esi+5092]
  00040	81 c2 93 01 00
	01		 add	 edx, 16777619		; 01000193H
  00046	c1 e8 02	 shr	 eax, 2
  00049	3b c8		 cmp	 ecx, eax
  0004b	75 e9		 jne	 SHORT $LL4@DecryptIV

; 300  : 	}
; 301  : 
; 302  : 	m_bDecrypedIV = true;

  0004d	c6 86 65 03 00
	00 01		 mov	 BYTE PTR [esi+869], 1

; 303  : 	return true;

  00054	5f		 pop	 edi
$LN19@DecryptIV:

; 304  : }

  00055	b0 01		 mov	 al, 1
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?DecryptIV@CEterPack@@QAE_NK@Z ENDP			; CEterPack::DecryptIV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z
_TEXT	SEGMENT
_rkFileDict$ = 8					; size = 4
_dbname$ = 12						; size = 4
_pathName$ = 16						; size = 4
_bReadOnly$ = 20					; size = 1
_iv$ = 24						; size = 4
?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z PROC ; CEterPack::Create, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 247  : 	if (iv)

  00004	8b 5d 18	 mov	 ebx, DWORD PTR _iv$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 15		 je	 SHORT $LN2@Create

; 248  : 	{
; 249  : 		m_stIV_Panama.assign((const char*) iv, 32);

  0000e	6a 20		 push	 32			; 00000020H
  00010	53		 push	 ebx
  00011	8d 8f d4 13 00
	00		 lea	 ecx, DWORD PTR [edi+5076]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 250  : 		m_bDecrypedIV = false;

  0001c	c6 87 65 03 00
	00 00		 mov	 BYTE PTR [edi+869], 0
$LN2@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00023	8b 55 10	 mov	 edx, DWORD PTR _pathName$[ebp]
  00026	8b ca		 mov	 ecx, edx
  00028	56		 push	 esi
  00029	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0002c	0f 1f 40 00	 npad	 4
$LL27@Create:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL27@Create
  00037	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	51		 push	 ecx
  0003a	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 253  : 	m_stPathName = pathName;

  0003b	8d 8f b8 13 00
	00		 lea	 ecx, DWORD PTR [edi+5048]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 255  : 	strncpy(m_dbName, dbname, DBNAME_MAX_LEN);

  00046	68 ff 00 00 00	 push	 255			; 000000ffH
  0004b	ff 75 0c	 push	 DWORD PTR _dbname$[ebp]
  0004e	8d 87 55 01 00
	00		 lea	 eax, DWORD PTR [edi+341]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _strncpy

; 256  : 
; 257  : 	strncpy(m_indexFileName, dbname, MAX_PATH);

  0005a	68 04 01 00 00	 push	 260			; 00000104H
  0005f	ff 75 0c	 push	 DWORD PTR _dbname$[ebp]
  00062	8d b7 55 02 00
	00		 lea	 esi, DWORD PTR [edi+597]
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _strncpy
  0006e	83 c4 18	 add	 esp, 24			; 00000018H

; 258  : 	strcat(m_indexFileName, ".eix");

  00071	4e		 dec	 esi
$LL28@Create:
  00072	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00075	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00078	84 c0		 test	 al, al
  0007a	75 f6		 jne	 SHORT $LL28@Create
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04OLDEJNOH@?4eix@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00081	8b 55 0c	 mov	 edx, DWORD PTR _dbname$[ebp]
  00084	8b ca		 mov	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 258  : 	strcat(m_indexFileName, ".eix");

  00086	89 06		 mov	 DWORD PTR [esi], eax
  00088	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04OLDEJNOH@?4eix@+4
  0008d	88 46 04	 mov	 BYTE PTR [esi+4], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00090	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL29@Create:
  00093	8a 01		 mov	 al, BYTE PTR [ecx]
  00095	41		 inc	 ecx
  00096	84 c0		 test	 al, al
  00098	75 f9		 jne	 SHORT $LL29@Create
  0009a	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009c	51		 push	 ecx
  0009d	52		 push	 edx
  0009e	8d 8f a0 13 00
	00		 lea	 ecx, DWORD PTR [edi+5024]
  000a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a9	6a 04		 push	 4
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_04JJCMEEIK@?4epk@
  000b0	8d 8f a0 13 00
	00		 lea	 ecx, DWORD PTR [edi+5024]
  000b6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 263  : 	m_bReadOnly = bReadOnly;

  000bb	8a 45 14	 mov	 al, BYTE PTR _bReadOnly$[ebp]

; 264  : 
; 265  : 	if (!CreateIndexFile())

  000be	8b cf		 mov	 ecx, edi
  000c0	88 87 64 03 00
	00		 mov	 BYTE PTR [edi+868], al
  000c6	e8 00 00 00 00	 call	 ?CreateIndexFile@CEterPack@@AAE_NXZ ; CEterPack::CreateIndexFile
  000cb	5e		 pop	 esi
  000cc	84 c0		 test	 al, al
  000ce	74 36		 je	 SHORT $LN26@Create

; 266  : 		return false;
; 267  : 
; 268  : 	if (!CreateDataFile())

  000d0	8b cf		 mov	 ecx, edi
  000d2	e8 00 00 00 00	 call	 ?CreateDataFile@CEterPack@@AAE_NXZ ; CEterPack::CreateDataFile
  000d7	84 c0		 test	 al, al
  000d9	74 2b		 je	 SHORT $LN26@Create

; 270  : 
; 271  : 	bool bOverwrite = (iv != NULL);

  000db	85 db		 test	 ebx, ebx

; 272  : 	__BuildIndex(rkFileDict, bOverwrite);

  000dd	8b cf		 mov	 ecx, edi
  000df	0f 95 c0	 setne	 al
  000e2	0f b6 c0	 movzx	 eax, al
  000e5	50		 push	 eax
  000e6	ff 75 08	 push	 DWORD PTR _rkFileDict$[ebp]
  000e9	e8 00 00 00 00	 call	 ?__BuildIndex@CEterPack@@AAE_NAAVCEterFileDict@@_N@Z ; CEterPack::__BuildIndex

; 273  : 
; 274  : 	if (m_bReadOnly)

  000ee	80 bf 64 03 00
	00 00		 cmp	 BYTE PTR [edi+868], 0
  000f5	75 07		 jne	 SHORT $LN6@Create

; 275  : 	{
; 276  : 		//m_bIsDataLoaded = true;
; 277  : 		//if (!m_file.Create(m_stDataFileName.c_str(), (const void**)&m_file_data, 0, 0))
; 278  : 		//	return false;
; 279  : 	}
; 280  : 	else
; 281  : 	{
; 282  : 		DecryptIndexFile();

  000f7	8b cf		 mov	 ecx, edi
  000f9	e8 00 00 00 00	 call	 ?DecryptIndexFile@CEterPack@@QAE_NXZ ; CEterPack::DecryptIndexFile
$LN6@Create:

; 283  : 	}
; 284  : 
; 285  : 	return true;

  000fe	5f		 pop	 edi
  000ff	b0 01		 mov	 al, 1

; 286  : }

  00101	5b		 pop	 ebx
  00102	5d		 pop	 ebp
  00103	c2 14 00	 ret	 20			; 00000014H
$LN26@Create:
  00106	5f		 pop	 edi

; 269  : 		return false;

  00107	32 c0		 xor	 al, al

; 286  : }

  00109	5b		 pop	 ebx
  0010a	5d		 pop	 ebp
  0010b	c2 14 00	 ret	 20			; 00000014H
?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ENDP ; CEterPack::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?Destroy@CEterPack@@QAEXXZ
_TEXT	SEGMENT
tv474 = -4						; size = 4
?Destroy@CEterPack@@QAEXXZ PROC				; CEterPack::Destroy, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi

; 224  : 	m_bReadOnly = false;

  00008	c6 83 64 03 00
	00 00		 mov	 BYTE PTR [ebx+868], 0

; 225  : 	m_bEncrypted = false;

  0000f	c6 83 54 01 00
	00 00		 mov	 BYTE PTR [ebx+340], 0

; 226  : 	m_indexCount = 0;

  00016	c7 83 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+336], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  00020	83 bb 88 03 00
	00 00		 cmp	 DWORD PTR [ebx+904], 0
  00027	74 4d		 je	 SHORT $LN14@Destroy

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00029	8b 93 94 03 00
	00		 mov	 edx, DWORD PTR [ebx+916]
  0002f	8b 83 84 03 00
	00		 mov	 eax, DWORD PTR [ebx+900]
  00035	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  00038	3b d1		 cmp	 edx, ecx
  0003a	74 11		 je	 SHORT $LN11@Destroy
  0003c	0f 1f 40 00	 npad	 4
$LL12@Destroy:

; 4519 :             it->next_ = node_pointer();

  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00046	83 c2 04	 add	 edx, 4
  00049	3b d1		 cmp	 edx, ecx
  0004b	75 f3		 jne	 SHORT $LL12@Destroy
$LN11@Destroy:

; 4520 :           }
; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();
; 4523 :           node_pointer n = next_node(prev);

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 4524 :           prev->next_ = node_pointer();

  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4525 :           size_ = 0;

  00055	c7 83 88 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+904], 0

; 4526 : 
; 4527 :           while (n) {

  0005f	85 c0		 test	 eax, eax
  00061	74 13		 je	 SHORT $LN14@Destroy
$LL13@Destroy:

; 4528 :             node_pointer next = next_node(n);

  00063	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00065	6a 10		 push	 16			; 00000010H
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0006d	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4530 :             n = next;

  00070	8b c6		 mov	 eax, esi
  00072	85 f6		 test	 esi, esi
  00074	75 ed		 jne	 SHORT $LL13@Destroy
$LN14@Destroy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 229  : 	for (int i = 0; i < FREE_INDEX_MAX_SIZE + 1; ++i)

  00076	ba 01 02 00 00	 mov	 edx, 513		; 00000201H
  0007b	57		 push	 edi
  0007c	8d bb 98 03 00
	00		 lea	 edi, DWORD PTR [ebx+920]
  00082	89 55 fc	 mov	 DWORD PTR tv474[ebp], edx
$LL4@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00085	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  00087	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00090	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00092	85 c0		 test	 eax, eax
  00094	74 16		 je	 SHORT $LN39@Destroy
$LL40@Destroy:

; 328  :             _Pnext = _Pnode->_Next;

  00096	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00098	6a 0c		 push	 12			; 0000000cH
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a0	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  000a3	8b c6		 mov	 eax, esi
  000a5	85 f6		 test	 esi, esi
  000a7	75 ed		 jne	 SHORT $LL40@Destroy
  000a9	8b 55 fc	 mov	 edx, DWORD PTR tv474[ebp]
$LN39@Destroy:

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  000ac	8b 07		 mov	 eax, DWORD PTR [edi]
  000ae	89 00		 mov	 DWORD PTR [eax], eax

; 1431 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  000b0	8b 07		 mov	 eax, DWORD PTR [edi]
  000b2	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1432 :         _My_data._Mysize        = 0;

  000b5	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 229  : 	for (int i = 0; i < FREE_INDEX_MAX_SIZE + 1; ++i)

  000bc	83 c7 08	 add	 edi, 8
  000bf	83 ea 01	 sub	 edx, 1
  000c2	89 55 fc	 mov	 DWORD PTR tv474[ebp], edx
  000c5	75 be		 jne	 SHORT $LL4@Destroy

; 230  : 		m_FreeIndexList[i].clear();
; 231  : 
; 232  : 	SAFE_DELETE_ARRAY(m_indexData);

  000c7	8b 83 5c 03 00
	00		 mov	 eax, DWORD PTR [ebx+860]
  000cd	5f		 pop	 edi
  000ce	85 c0		 test	 eax, eax
  000d0	74 13		 je	 SHORT $LN5@Destroy
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000d8	83 c4 04	 add	 esp, 4
  000db	c7 83 5c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+860], 0
$LN5@Destroy:

; 233  : 
; 234  : 	m_FragmentSize = 0;
; 235  : 
; 236  : 	memset(m_dbName, 0, sizeof(m_dbName));
; 237  : 	memset(m_indexFileName, 0, sizeof(m_indexFileName));

  000e5	68 05 02 00 00	 push	 517			; 00000205H
  000ea	8d 83 55 01 00
	00		 lea	 eax, DWORD PTR [ebx+341]
  000f0	c7 83 60 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+864], 0
  000fa	6a 00		 push	 0
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _memset
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx

; 238  : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?Destroy@CEterPack@@QAEXXZ ENDP				; CEterPack::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ??1CEterPack@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CEterPack@@UAE@XZ PROC				; CEterPack::~CEterPack, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CEterPack@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEterPack@@6B@

; 216  : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CEterPack@@QAEXXZ ; CEterPack::Destroy

; 217  : 
; 218  : 	delete m_pCSHybridCryptPolicy;

  00031	8b be d0 13 00
	00		 mov	 edi, DWORD PTR [esi+5072]
  00037	85 ff		 test	 edi, edi
  00039	74 12		 je	 SHORT $LN6@CEterPack
  0003b	8b cf		 mov	 ecx, edi
  0003d	e8 00 00 00 00	 call	 ??1EterPackPolicy_CSHybridCrypt@@QAE@XZ ; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
  00042	6a 30		 push	 48			; 00000030H
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004a	83 c4 08	 add	 esp, 8
$LN6@CEterPack:

; 219  : 	m_pCSHybridCryptPolicy = NULL;

  0004d	c7 86 d0 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5072], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00057	8b 86 e8 13 00
	00		 mov	 eax, DWORD PTR [esi+5096]
  0005d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00060	72 10		 jb	 SHORT $LN12@CEterPack

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00062	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00063	50		 push	 eax
  00064	ff b6 d4 13 00
	00		 push	 DWORD PTR [esi+5076]
  0006a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0006f	83 c4 08	 add	 esp, 8
$LN12@CEterPack:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00072	c7 86 e4 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5092], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0007c	c7 86 e8 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5096], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00086	c6 86 d4 13 00
	00 00		 mov	 BYTE PTR [esi+5076], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0008d	8b 86 cc 13 00
	00		 mov	 eax, DWORD PTR [esi+5068]
  00093	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00096	72 10		 jb	 SHORT $LN22@CEterPack

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00098	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00099	50		 push	 eax
  0009a	ff b6 b8 13 00
	00		 push	 DWORD PTR [esi+5048]
  000a0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a5	83 c4 08	 add	 esp, 8
$LN22@CEterPack:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000a8	c7 86 c8 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5064], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b2	c7 86 cc 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5068], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bc	c6 86 b8 13 00
	00 00		 mov	 BYTE PTR [esi+5048], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  000c3	8b 86 b4 13 00
	00		 mov	 eax, DWORD PTR [esi+5044]
  000c9	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000cc	72 10		 jb	 SHORT $LN32@CEterPack

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ce	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cf	50		 push	 eax
  000d0	ff b6 a0 13 00
	00		 push	 DWORD PTR [esi+5024]
  000d6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000db	83 c4 08	 add	 esp, 8
$LN32@CEterPack:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 220  : }

  000de	68 00 00 00 00	 push	 OFFSET ??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
  000e3	68 01 02 00 00	 push	 513			; 00000201H
  000e8	6a 08		 push	 8
  000ea	8d 86 98 03 00
	00		 lea	 eax, DWORD PTR [esi+920]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000f0	c7 86 b0 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5040], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 220  : }

  000fa	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000fb	c7 86 b4 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5044], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00105	c6 86 a0 13 00
	00 00		 mov	 BYTE PTR [esi+5024], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 220  : }

  0010c	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00111	8d 8e 80 03 00
	00		 lea	 ecx, DWORD PTR [esi+896]
  00117	e8 00 00 00 00	 call	 ??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::~unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
  0011c	8d 8e 68 03 00
	00		 lea	 ecx, DWORD PTR [esi+872]
  00122	e8 00 00 00 00	 call	 ??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
  00127	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0012a	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
  00140	cc		 int	 3
  00141	cc		 int	 3
  00142	cc		 int	 3
  00143	cc		 int	 3
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CEterPack@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CEterPack@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CEterPack@@UAE@XZ ENDP				; CEterPack::~CEterPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ??0CEterPack@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEterPack@@QAE@XZ PROC				; CEterPack::CEterPack, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEterPack@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEterPack@@6B@
  00033	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
  00038	8d 8e 68 03 00
	00		 lea	 ecx, DWORD PTR [esi+872]
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	c7 86 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+336], 0
  0004f	c6 86 54 01 00
	00 00		 mov	 BYTE PTR [esi+340], 0
  00056	c7 86 5c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+860], 0
  00060	c7 86 60 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+864], 0
  0006a	66 c7 86 64 03
	00 00 00 00	 mov	 WORD PTR [esi+868], 0
  00073	e8 00 00 00 00	 call	 ??0?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
  00078	8d 8e 80 03 00
	00		 lea	 ecx, DWORD PTR [esi+896]
  0007e	e8 00 00 00 00	 call	 ??0?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
  00083	68 00 00 00 00	 push	 OFFSET ??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
  00088	68 00 00 00 00	 push	 OFFSET ??0?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
  0008d	68 01 02 00 00	 push	 513			; 00000201H
  00092	6a 08		 push	 8
  00094	8d 86 98 03 00
	00		 lea	 eax, DWORD PTR [esi+920]
  0009a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000a4	c7 86 b0 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5040], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000ae	c7 86 b4 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5044], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b8	c6 86 a0 13 00
	00 00		 mov	 BYTE PTR [esi+5024], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000bf	c7 86 c8 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5064], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000c9	c7 86 cc 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5068], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d3	c6 86 b8 13 00
	00 00		 mov	 BYTE PTR [esi+5048], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000da	c7 86 e4 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5092], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000e4	c7 86 e8 13 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+5096], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000ee	c6 86 d4 13 00
	00 00		 mov	 BYTE PTR [esi+5076], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 210  : 	m_pCSHybridCryptPolicy = new EterPackPolicy_CSHybridCrypt;

  000f5	6a 30		 push	 48			; 00000030H
  000f7	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000fb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00100	8b f8		 mov	 edi, eax
  00102	83 c4 04	 add	 esp, 4
  00105	89 7d f0	 mov	 DWORD PTR $T2[ebp], edi
  00108	85 ff		 test	 edi, edi
  0010a	74 28		 je	 SHORT $LN3@CEterPack
  0010c	8b cf		 mov	 ecx, edi
  0010e	e8 00 00 00 00	 call	 ??0?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
  00113	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00116	e8 00 00 00 00	 call	 ??0?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
  0011b	89 be d0 13 00
	00		 mov	 DWORD PTR [esi+5072], edi

; 211  : 
; 212  : }

  00121	8b c6		 mov	 eax, esi
  00123	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00126	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012d	59		 pop	 ecx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
$LN3@CEterPack:

; 210  : 	m_pCSHybridCryptPolicy = new EterPackPolicy_CSHybridCrypt;

  00134	c7 86 d0 13 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5072], 0

; 211  : 
; 212  : }

  0013e	8b c6		 mov	 eax, esi
  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEterPack@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$??0CEterPack@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	81 c1 68 03 00
	00		 add	 ecx, 872		; 00000368H
  00014	e9 00 00 00 00	 jmp	 ??1?$unordered_map@KKU?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@4@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~unordered_map<unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
__unwindfunclet$??0CEterPack@@QAE@XZ$2:
  00019	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	81 c1 80 03 00
	00		 add	 ecx, 896		; 00000380H
  00022	e9 00 00 00 00	 jmp	 ??1?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >::~unordered_map<unsigned long,SEterPackIndex *,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,SEterPackIndex *> > >
__unwindfunclet$??0CEterPack@@QAE@XZ$3:
  00027	68 00 00 00 00	 push	 OFFSET ??1?$list@PAUSEterPackIndex@@V?$allocator@PAUSEterPackIndex@@@std@@@std@@QAE@XZ ; std::list<SEterPackIndex *,std::allocator<SEterPackIndex *> >::~list<SEterPackIndex *,std::allocator<SEterPackIndex *> >
  0002c	68 01 02 00 00	 push	 513			; 00000201H
  00031	6a 08		 push	 8
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	05 98 03 00 00	 add	 eax, 920		; 00000398H
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00041	c3		 ret	 0
__unwindfunclet$??0CEterPack@@QAE@XZ$4:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 a0 13 00
	00		 add	 ecx, 5024		; 000013a0H
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CEterPack@@QAE@XZ$5:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 b8 13 00
	00		 add	 ecx, 5048		; 000013b8H
  00059	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CEterPack@@QAE@XZ$6:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 d4 13 00
	00		 add	 ecx, 5076		; 000013d4H
  00067	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
__ehhandler$??0CEterPack@@QAE@XZ:
  00071	90		 npad	 1
  00072	90		 npad	 1
  00073	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00077	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0007a	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0007d	33 c8		 xor	 ecx, eax
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEterPack@@QAE@XZ
  00089	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEterPack@@QAE@XZ ENDP				; CEterPack::CEterPack
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?equal_range@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@U1234@@std@@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?equal_range@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@U1234@@std@@ABK@Z PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::equal_range, COMDAT
; _this$ = ecx

; 2332 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 2333 :       node_pointer n = table_.find_node(k);

  00031	8b d0		 mov	 edx, eax
  00033	5e		 pop	 esi

; 2334 :       return std::make_pair(

  00034	85 d2		 test	 edx, edx
  00036	74 26		 je	 SHORT $LN3@equal_rang
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2978 :           node_pointer n1 = n;

  00038	8b ca		 mov	 ecx, edx
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL28@equal_rang:

; 2979 :           do {
; 2980 :             n1 = next_node(n1);

  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 2981 :           } while (n1 && !n1->is_first_in_group());

  00042	85 c9		 test	 ecx, ecx
  00044	74 1a		 je	 SHORT $LN4@equal_rang

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00046	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00049	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004c	f7 d0		 not	 eax
  0004e	a8 01		 test	 al, 1

; 2981 :           } while (n1 && !n1->is_first_in_group());

  00050	74 ee		 je	 SHORT $LL28@equal_rang
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00055	89 10		 mov	 DWORD PTR [eax], edx
  00057	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 2336 :     }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN3@equal_rang:

; 2334 :       return std::make_pair(

  0005e	33 c9		 xor	 ecx, ecx
$LN4@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00060	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00063	89 10		 mov	 DWORD PTR [eax], edx
  00065	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 2336 :     }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?equal_range@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@U1234@@std@@ABK@Z ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::equal_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::find, COMDAT
; _this$ = ecx

; 2287 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 2288 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 2288 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 2289 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z
_TEXT	SEGMENT
_a$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::insert, COMDAT
; _this$ = ecx

; 1247 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00029	8d 57 03	 lea	 edx, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
  00033	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00036	f7 da		 neg	 edx
  00038	1b d2		 sbb	 edx, edx
  0003a	23 d0		 and	 edx, eax
  0003c	89 55 ec	 mov	 DWORD PTR _a$2[ebp], edx

; 2039 :           a.create_node();

  0003f	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::create_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  00051	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  00054	8b 75 f0	 mov	 esi, DWORD PTR _a$2[ebp+4]

; 1957 :           node_ = node_pointer();

  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0

; 2042 :           return a.release();

  0005e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00065	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00069	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  0006e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00071	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  00074	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\unordered_map.hpp

; 1095 :         return iterator(table_.emplace_equiv(

  00079	56		 push	 esi
  0007a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	8b cf		 mov	 ecx, edi
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 ?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_equiv

; 1248 :         return this->emplace(boost::move(x));

  00085	8b c6		 mov	 eax, esi

; 1249 :       }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::insert
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z
_TEXT	SEGMENT
_a$ = -24						; size = 8
_key_hash$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv675 = 12						; size = 4
_n$ = 12						; size = 4
?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_equiv, COMDAT
; _this$ = ecx

; 4256 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0002d	8d 57 03	 lea	 edx, DWORD PTR [edi+3]

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  00030	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00033	89 5d ec	 mov	 DWORD PTR _a$[ebp+4], ebx
  00036	f7 da		 neg	 edx
  00038	1b d2		 sbb	 edx, edx
  0003a	23 d0		 and	 edx, eax
  0003c	89 55 e8	 mov	 DWORD PTR _a$[ebp], edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0003f	ff 73 08	 push	 DWORD PTR [ebx+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4258 :           const_key_type& k = this->get_key(a.node_);

  00042	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0004c	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00051	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00054	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  00057	83 e1 01	 and	 ecx, 1

; 4259 :           std::size_t key_hash = this->hash(k);

  0005a	89 45 f0	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  0005d	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0005f	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00062	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00065	f7 da		 neg	 edx
  00067	1b d2		 sbb	 edx, edx
  00069	23 d1		 and	 edx, ecx
  0006b	8b cf		 mov	 ecx, edi
  0006d	52		 push	 edx
  0006e	56		 push	 esi
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 4542 :         if (!buckets_) {

  00075	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 4260 :           node_pointer position = this->find_node(key_hash, k);

  00079	8b f0		 mov	 esi, eax

; 4261 :           this->reserve_for_insert(this->size_ + 1);

  0007b	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0007e	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00081	89 45 0c	 mov	 DWORD PTR tv675[ebp], eax

; 4542 :         if (!buckets_) {

  00084	75 1a		 jne	 SHORT $LN33@emplace_eq

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00086	50		 push	 eax
  00087	8b cf		 mov	 ecx, edi
  00089	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0008e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00091	3b c8		 cmp	 ecx, eax
  00093	0f 42 c8	 cmovb	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00096	51		 push	 ecx
  00097	8b cf		 mov	 ecx, edi
  00099	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  0009e	eb 2f		 jmp	 SHORT $LN36@emplace_eq
$LN33@emplace_eq:

; 4544 :         } else if (size > max_load_) {

  000a0	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  000a3	76 2a		 jbe	 SHORT $LN36@emplace_eq

; 4545 :           std::size_t num_buckets =

  000a5	8b ca		 mov	 ecx, edx
  000a7	d1 e9		 shr	 ecx, 1
  000a9	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000ac	ba 01 00 00 00	 mov	 edx, 1
  000b1	39 45 0c	 cmp	 DWORD PTR tv675[ebp], eax
  000b4	0f 42 d1	 cmovb	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  000b7	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b9	03 57 08	 add	 edx, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  000c2	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000c5	74 08		 je	 SHORT $LN36@emplace_eq

; 4549 :             this->rehash_impl(num_buckets);

  000c7	50		 push	 eax
  000c8	8b cf		 mov	 ecx, edi
  000ca	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN36@emplace_eq:

; 2604 :           return hash % bucket_count;

  000cf	8b 45 f0	 mov	 eax, DWORD PTR _key_hash$1$[ebp]
  000d2	33 d2		 xor	 edx, edx
  000d4	f7 77 04	 div	 DWORD PTR [edi+4]

; 2007 :           node_ = node_pointer();

  000d7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$[ebp+4], 0

; 4203 :           if (pos) {

  000de	8b c2		 mov	 eax, edx
  000e0	85 f6		 test	 esi, esi
  000e2	74 29		 je	 SHORT $LN45@emplace_eq

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  000e4	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  000e9	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 4205 :             n->next_ = pos->next_;

  000ec	8b 06		 mov	 eax, DWORD PTR [esi]
  000ee	89 03		 mov	 DWORD PTR [ebx], eax

; 4206 :             pos->next_ = n;

  000f0	89 1e		 mov	 DWORD PTR [esi], ebx

; 4207 :             if (n->next_) {

  000f2	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000f4	85 c9		 test	 ecx, ecx
  000f6	74 52		 je	 SHORT $LN50@emplace_eq

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  000f8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000fb	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 4209 :               if (next_bucket != bucket_index) {

  00101	3b ca		 cmp	 ecx, edx
  00103	74 45		 je	 SHORT $LN50@emplace_eq

; 4210 :                 this->get_bucket_pointer(next_bucket)->next_ = n;

  00105	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00108	89 1c 88	 mov	 DWORD PTR [eax+ecx*4], ebx

; 4211 :               }
; 4212 :             }
; 4213 :           } else {

  0010b	eb 3d		 jmp	 SHORT $LN50@emplace_eq
$LN45@emplace_eq:

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0010d	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00112	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00115	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 4217 :             if (!b->next_) {

  00118	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  0011b	85 c0		 test	 eax, eax
  0011d	75 22		 jne	 SHORT $LN49@emplace_eq

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0011f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00122	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]

; 4220 :               if (start_node->next_) {

  00125	8b 01		 mov	 eax, DWORD PTR [ecx]
  00127	85 c0		 test	 eax, eax
  00129	74 0b		 je	 SHORT $LN51@emplace_eq

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  0012b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012e	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 4221 :                 this

  00133	89 1c 86	 mov	 DWORD PTR [esi+eax*4], ebx
$LN51@emplace_eq:

; 4222 :                   ->get_bucket_pointer(this->node_bucket(next_node(start_node)))
; 4223 :                   ->next_ = n;
; 4224 :               }
; 4225 : 
; 4226 :               b->next_ = start_node;

  00136	89 0c 96	 mov	 DWORD PTR [esi+edx*4], ecx

; 4227 :               n->next_ = start_node->next_;

  00139	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013b	89 03		 mov	 DWORD PTR [ebx], eax

; 4228 :               start_node->next_ = n;

  0013d	89 19		 mov	 DWORD PTR [ecx], ebx

; 4229 :             } else {

  0013f	eb 09		 jmp	 SHORT $LN50@emplace_eq
$LN49@emplace_eq:

; 4230 :               n->next_ = b->next_->next_;

  00141	8b 00		 mov	 eax, DWORD PTR [eax]
  00143	89 03		 mov	 DWORD PTR [ebx], eax

; 4231 :               b->next_->next_ = n;

  00145	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00148	89 18		 mov	 DWORD PTR [eax], ebx
$LN50@emplace_eq:

; 2371 :           : node_(static_cast<node_pointer>(x))

  0014a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 4262 :           return iterator(

  0014d	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]

; 4234 :           ++this->size_;

  00150	ff 47 08	 inc	 DWORD PTR [edi+8]

; 2371 :           : node_(static_cast<node_pointer>(x))

  00153	89 1e		 mov	 DWORD PTR [esi], ebx

; 4262 :           return iterator(

  00155	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
  0015a	8b c6		 mov	 eax, esi

; 4263 :             this->add_node_equiv(a.release(), key_hash, position));
; 4264 :         }

  0015c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00166	59		 pop	 ecx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterFileDict::Item> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?emplace_equiv@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@34@PAU?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_equiv
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 90	 lea	 ebx, DWORD PTR [eax+edx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL4@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
tv459 = -8						; size = 8
_f$ = -8						; size = 8
_dummy_node$1$ = 8					; size = 4
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 3c		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 d2 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003a	8b f0		 mov	 esi, eax

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00046	50		 push	 eax
  00047	ff 77 14	 push	 DWORD PTR [edi+20]
  0004a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  00052	eb 25		 jmp	 SHORT $LN8@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  00054	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00061	0f 87 98 00 00
	00		 ja	 $LN69@create_buc

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00067	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 679  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00077	8b f0		 mov	 esi, eax
$LN8@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00079	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0007c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0007f	85 f6		 test	 esi, esi
  00081	74 55		 je	 SHORT $LN51@create_buc
  00083	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  0008f	8b c3		 mov	 eax, ebx
  00091	83 ec 08	 sub	 esp, 8
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	0f 5a c9	 cvtps2pd xmm1, xmm1
  0009a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000a7	f2 0f 11 4d f8	 movsd	 QWORD PTR tv459[ebp], xmm1
  000ac	dd 45 f8	 fld	 QWORD PTR tv459[ebp]
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _ceil
  000b7	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  000ba	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000bf	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  000c2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  000ca	72 05		 jb	 SHORT $LN55@create_buc
  000cc	83 c8 ff	 or	 eax, -1
  000cf	eb 09		 jmp	 SHORT $LN52@create_buc
$LN55@create_buc:
  000d1	e8 00 00 00 00	 call	 __dtoui3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000d6	eb 02		 jmp	 SHORT $LN52@create_buc
$LN51@create_buc:
  000d8	33 c0		 xor	 eax, eax
$LN52@create_buc:
  000da	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  000dd	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000e0	3b f0		 cmp	 esi, eax
  000e2	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  000e4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  000ea	83 c6 04	 add	 esi, 4
  000ed	3b f0		 cmp	 esi, eax
  000ef	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 08		 mov	 DWORD PTR [eax], ecx
  000f8	5b		 pop	 ebx

; 3212 :         }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN69@create_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN70@create_buc:
  00104	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
tv75 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv75[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtoui3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z
_TEXT	SEGMENT
_iter_pair$ = -8					; size = 8
_dwFileNameHash$ = 8					; size = 4
_c_pszFileName$ = 12					; size = 4
?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z PROC	; CEterFileDict::GetItem, COMDAT
; _this$ = ecx

; 1563 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1564 : 	std::pair<TDict::iterator, TDict::iterator> iter_pair = m_dict.equal_range(dwFileNameHash);

  00009	8d 45 08	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  0000c	50		 push	 eax
  0000d	8d 45 f8	 lea	 eax, DWORD PTR _iter_pair$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?equal_range@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@U1234@@std@@ABK@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::equal_range

; 1565 : 
; 1566 : 	TDict::iterator iter = iter_pair.first;

  00016	8b 45 f8	 mov	 eax, DWORD PTR _iter_pair$[ebp]
  00019	8b 7d fc	 mov	 edi, DWORD PTR _iter_pair$[ebp+4]
  0001c	3b c7		 cmp	 eax, edi

; 1568 : 	while (iter != iter_pair.second)

  0001e	74 3f		 je	 SHORT $LN3@GetItem
$LL2@GetItem:

; 1569 : 	{
; 1570 : 		Item& item = iter->second;
; 1571 : 
; 1572 : 		if (0 == strcmp(c_pszFileName, item.pkInfo->filename))

  00020	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _c_pszFileName$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL17@GetItem:
  00030	8a 1a		 mov	 bl, BYTE PTR [edx]
  00032	3a 19		 cmp	 bl, BYTE PTR [ecx]
  00034	75 1a		 jne	 SHORT $LN18@GetItem
  00036	84 db		 test	 bl, bl
  00038	74 12		 je	 SHORT $LN19@GetItem
  0003a	8a 5a 01	 mov	 bl, BYTE PTR [edx+1]
  0003d	3a 59 01	 cmp	 bl, BYTE PTR [ecx+1]
  00040	75 0e		 jne	 SHORT $LN18@GetItem
  00042	83 c2 02	 add	 edx, 2
  00045	83 c1 02	 add	 ecx, 2
  00048	84 db		 test	 bl, bl
  0004a	75 e4		 jne	 SHORT $LL17@GetItem
$LN19@GetItem:
  0004c	33 c9		 xor	 ecx, ecx
  0004e	eb 05		 jmp	 SHORT $LN20@GetItem
$LN18@GetItem:
  00050	1b c9		 sbb	 ecx, ecx
  00052	83 c9 01	 or	 ecx, 1
$LN20@GetItem:
  00055	85 c9		 test	 ecx, ecx
  00057	74 11		 je	 SHORT $LN13@GetItem
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  00059	8b 00		 mov	 eax, DWORD PTR [eax]

; 2399 :           return node_ != x.node_;

  0005b	3b c7		 cmp	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1568 : 	while (iter != iter_pair.second)

  0005d	75 c1		 jne	 SHORT $LL2@GetItem
$LN3@GetItem:
  0005f	5f		 pop	 edi

; 1573 : 			return &item;
; 1574 : 
; 1575 : 		++iter;
; 1576 : 	}
; 1577 : 
; 1578 : 	return NULL;
; 1579 : }

  00060	5e		 pop	 esi
  00061	33 c0		 xor	 eax, eax
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN13@GetItem:
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z ENDP	; CEterFileDict::GetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?UpdateItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 12
_f$ = -4						; size = 4
$T2 = 8							; size = 4
_pkPack$ = 8						; size = 4
_pkInfo$ = 12						; size = 4
?UpdateItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z PROC ; CEterFileDict::UpdateItem, COMDAT
; _this$ = ecx

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1540 : 	Item item;
; 1541 : 
; 1542 : 	item.pkPack = pkPack;
; 1543 : 	item.pkInfo = pkInfo;
; 1544 : 
; 1545 : 	TDict::iterator f = m_dict.find(pkInfo->filename_crc);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _pkInfo$[ebp]
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _f$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f1		 mov	 esi, ecx
  00011	8d bb a8 00 00
	00		 lea	 edi, DWORD PTR [ebx+168]
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?find@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::find
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\unordered\detail\implementation.hpp

; 2394 :           return node_ == x.node_;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  00021	85 c0		 test	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1546 : 	if (f == m_dict.end())

  00023	75 26		 jne	 SHORT $LN2@UpdateItem
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1547 : 		m_dict.insert(TDict::value_type(pkInfo->filename_crc, item));

  00027	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00029	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pkPack$[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR $T1[ebp+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1547 : 		m_dict.insert(TDict::value_type(pkInfo->filename_crc, item));

  00032	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00039	89 5d f8	 mov	 DWORD PTR $T1[ebp+8], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1547 : 		m_dict.insert(TDict::value_type(pkInfo->filename_crc, item));

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::insert
  00042	5f		 pop	 edi

; 1557 : 		}
; 1558 : 
; 1559 : 	}
; 1560 : }

  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN2@UpdateItem:

; 1548 : 	else
; 1549 : 	{
; 1550 : 		if (strcmp(f->second.pkInfo->filename, item.pkInfo->filename) == 0)

  0004b	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  0004e	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00051	83 c7 04	 add	 edi, 4
  00054	8b d6		 mov	 edx, esi
  00056	8b cf		 mov	 ecx, edi
$LL23@UpdateItem:
  00058	8a 19		 mov	 bl, BYTE PTR [ecx]
  0005a	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0005c	75 1a		 jne	 SHORT $LN24@UpdateItem
  0005e	84 db		 test	 bl, bl
  00060	74 12		 je	 SHORT $LN25@UpdateItem
  00062	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00065	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00068	75 0e		 jne	 SHORT $LN24@UpdateItem
  0006a	83 c1 02	 add	 ecx, 2
  0006d	83 c2 02	 add	 edx, 2
  00070	84 db		 test	 bl, bl
  00072	75 e4		 jne	 SHORT $LL23@UpdateItem
$LN25@UpdateItem:
  00074	33 c9		 xor	 ecx, ecx
  00076	eb 05		 jmp	 SHORT $LN26@UpdateItem
$LN24@UpdateItem:
  00078	1b c9		 sbb	 ecx, ecx
  0007a	83 c9 01	 or	 ecx, 1
$LN26@UpdateItem:
  0007d	85 c9		 test	 ecx, ecx
  0007f	75 15		 jne	 SHORT $LN4@UpdateItem

; 1551 : 		{
; 1552 : 			f->second = item;

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pkPack$[ebp]
  00084	5f		 pop	 edi
  00085	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _pkInfo$[ebp]

; 1557 : 		}
; 1558 : 
; 1559 : 	}
; 1560 : }

  0008b	5e		 pop	 esi
  0008c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
$LN4@UpdateItem:

; 1553 : 		}
; 1554 : 		else
; 1555 : 		{
; 1556 : 			TraceError("NAME_COLLISION: OLD: %s NEW: %s", f->second.pkInfo->filename, item.pkInfo->filename);

  00096	56		 push	 esi
  00097	57		 push	 edi
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GEOIKNCG@NAME_COLLISION?3?5OLD?3?5?$CFs?5NEW?3?5?$CFs@
  0009d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	5f		 pop	 edi

; 1557 : 		}
; 1558 : 
; 1559 : 	}
; 1560 : }

  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 08 00	 ret	 8
?UpdateItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ENDP ; CEterFileDict::UpdateItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp
;	COMDAT ?InsertItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_pkPack$ = 8						; size = 4
$T2 = 12						; size = 4
_pkInfo$ = 12						; size = 4
?InsertItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z PROC ; CEterFileDict::InsertItem, COMDAT
; _this$ = ecx

; 1529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00006	8b 55 0c	 mov	 edx, DWORD PTR _pkInfo$[ebp]
  00009	89 55 fc	 mov	 DWORD PTR $T1[ebp+8], edx
  0000c	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00015	8b 45 08	 mov	 eax, DWORD PTR _pkPack$[ebp]
  00018	89 45 f8	 mov	 DWORD PTR $T1[ebp+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterPack\EterPack.cpp

; 1535 : 	m_dict.insert(TDict::value_type(pkInfo->filename_crc, item));

  0001b	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0001e	50		 push	 eax
  0001f	8d 45 0c	 lea	 eax, DWORD PTR $T2[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?insert@?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@detail@unordered@boost@@@iterator_detail@23@$$QAU?$pair@$$CBKUItem@CEterFileDict@@@std@@@Z ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::insert

; 1536 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?InsertItem@CEterFileDict@@QAEXPAVCEterPack@@PAUSEterPackIndex@@@Z ENDP ; CEterFileDict::InsertItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\boost\container_hash\hash.hpp
;	COMDAT ??$hash_value@K@boost@@YAIK@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$hash_value@K@boost@@YAIK@Z PROC			; boost::hash_value<unsigned long>, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         return static_cast<std::size_t>(v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 361  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$hash_value@K@boost@@YAIK@Z ENDP			; boost::hash_value<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
__Value$ = -4						; size = 4
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 562  : _NODISCARD const _Ty& _Immortalize_memcpy_image() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic

; 604  :         auto _As_bytes = _ISO_VOLATILE_LOAD32(_Storage);

  00004	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
  00009	e8 00 00 00 00	 call	 ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
  0000e	83 c4 04	 add	 esp, 4
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 569  :     if (_Storage[0].load(memory_order_acquire) != 0) {

  00013	85 c0		 test	 eax, eax
  00015	75 2d		 jne	 SHORT $LN28@Immortaliz

; 570  :         return reinterpret_cast<_Ty&>(_Storage);
; 571  :     }
; 572  : 
; 573  :     const _Ty _Target;
; 574  :     const auto _Target_iter = reinterpret_cast<const uintptr_t*>(_STD addressof(_Target));
; 575  :     _CSTD memcpy(_Storage + 1, _Target_iter + 1, sizeof(_Ty) - sizeof(uintptr_t));

  00017	56		 push	 esi
  00018	c7 05 04 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A+4, 5

; 576  :     _Storage[0].store(_Target_iter[0], memory_order_release);

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Value$[ebp], OFFSET ??_7_Iostream_error_category2@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic

; 582  :             _Compiler_or_memory_barrier();

  00029	8d 45 fc	 lea	 eax, DWORD PTR __Value$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z ; std::_Atomic_reinterpret_as<int,unsigned int>

; 583  :             _ISO_VOLATILE_STORE32(_Storage, _As_bytes);

  00032	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
  00037	8b f0		 mov	 esi, eax
  00039	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  0003e	83 c4 08	 add	 esp, 8
  00041	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 577  :     return reinterpret_cast<_Ty&>(_Storage);

  00043	5e		 pop	 esi
$LN28@Immortaliz:

; 578  : }

  00044	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category2@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN4@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
__New_ptr$1 = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT
; _this$ = ecx

; 475  :     _NODISCARD virtual string message(int _Errcode) const override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 476  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00006	56		 push	 esi
  00007	83 f8 01	 cmp	 eax, 1
  0000a	75 60		 jne	 SHORT $LN2@message
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	6a 20		 push	 32			; 00000020H

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00018	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00022	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00027	c7 46 10 15 00
	00 00		 mov	 DWORD PTR [esi+16], 21	; 00000015H
  0002e	c7 46 14 1f 00
	00 00		 mov	 DWORD PTR [esi+20], 31	; 0000001fH
  00035	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
  0003c	89 45 08	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  0003f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00042	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+16
  00048	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004b	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+20
  00051	88 48 14	 mov	 BYTE PTR [eax+20], cl
  00054	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00058	8d 45 08	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0005b	50		 push	 eax
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 483  :     }

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
$LN2@message:
  0006c	57		 push	 edi

; 481  :             return _Syserror_map(_Errcode);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00073	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 481  :             return _Syserror_map(_Errcode);

  00076	8b d0		 mov	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00078	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 481  :             return _Syserror_map(_Errcode);

  0007a	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0007d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00084	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0008b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0008e	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL61@message:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00091	8a 01		 mov	 al, BYTE PTR [ecx]
  00093	41		 inc	 ecx
  00094	84 c0		 test	 al, al
  00096	75 f9		 jne	 SHORT $LL61@message
  00098	2b cf		 sub	 ecx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009a	51		 push	 ecx
  0009b	52		 push	 edx
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 481  :             return _Syserror_map(_Errcode);

  000a3	5f		 pop	 edi

; 483  :     }

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category2@std@@UBEPBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT
; _this$ = ecx

; 472  :         return "iostream";

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 473  :     }

  00005	c3		 ret	 0
?name@_Iostream_error_category2@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN15@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\stdexcept
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 24
__InitData$3 = -80					; size = 8
__Errcode$ = -80					; size = 8
tv386 = -72						; size = 8
__Errcode$1$ = -68					; size = 4
_this$GSCopy$ = -68					; size = 4
_this$ = -68						; size = 4
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 395  :     _System_error(error_code _Errcode, const string& _Message)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 bc	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]

; 396  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  00032	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00035	8b 7d 0c	 mov	 edi, DWORD PTR __Errcode$[ebp+4]
  00038	89 45 b8	 mov	 DWORD PTR tv386[ebp], eax
  0003b	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  0003e	50		 push	 eax
  0003f	89 75 bc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  0004a	89 45 bc	 mov	 DWORD PTR __Errcode$1$[ebp], eax
  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  00050	89 45 b4	 mov	 DWORD PTR __Errcode$[ebp+4], eax

; 386  :         if (!_Message.empty()) {

  00053	83 7d a8 00	 cmp	 DWORD PTR $T2[ebp+16], 0
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005e	74 0f		 je	 SHORT $LN7@System_err
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00060	6a 02		 push	 2
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  00067	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN7@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 160  :         return category().message(value());

  0006f	ff 75 bc	 push	 DWORD PTR __Errcode$1$[ebp]
  00072	8b 07		 mov	 eax, DWORD PTR [edi]
  00074	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00077	51		 push	 ecx
  00078	8b cf		 mov	 ecx, edi
  0007a	ff 50 08	 call	 DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0007d	83 7d ec 10	 cmp	 DWORD PTR $T5[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00081	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00084	ff 75 e8	 push	 DWORD PTR $T5[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  00087	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T5[ebp]

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0008b	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0008e	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 390  :         _Message.append(_Errcode.message());

  0008f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00093	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2153 :         return _BUF_SIZE <= _Myres;

  00098	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp+20]
  0009b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0009e	72 0d		 jb	 SHORT $LN34@System_err

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000a0	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a1	50		 push	 eax
  000a2	ff 75 d8	 push	 DWORD PTR $T5[ebp]
  000a5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000aa	83 c4 08	 add	 esp, 8
$LN34@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ad	0f 10 4d 98	 movups	 xmm1, XMMWORD PTR $T2[ebp]

; 2144 :         const value_type* _Result = _Bx._Buf;

  000b1	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 59   :     {

  000b4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ba	f3 0f 7e 45 a8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  000bf	66 0f d6 45 d0	 movq	 QWORD PTR $T4[ebp+16], xmm0
  000c4	0f 57 c0	 xorps	 xmm0, xmm0

; 2153 :         return _BUF_SIZE <= _Myres;

  000c7	83 7d d4 10	 cmp	 DWORD PTR $T4[ebp+20], 16 ; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  000cb	66 0f 7e c8	 movd	 eax, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 58   :         : _Data()

  000cf	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d4	0f 11 4d c0	 movups	 XMMWORD PTR $T4[ebp], xmm1

; 2145 :         if (_Large_string_engaged()) {

  000d8	0f 43 c8	 cmovae	 ecx, eax

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000db	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 58   :         : _Data()

  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000e5	c7 45 ac 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 61   :         __std_exception_copy(&_InitData, &_Data);

  000ec	50		 push	 eax
  000ed	8d 45 b0	 lea	 eax, DWORD PTR __InitData$3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000f0	c6 45 98 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 61   :         __std_exception_copy(&_InitData, &_Data);

  000f4	50		 push	 eax
  000f5	89 4d b0	 mov	 DWORD PTR __InitData$3[ebp], ecx
  000f8	c6 45 b4 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  000fc	e8 00 00 00 00	 call	 ___std_exception_copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00101	8b 45 d4	 mov	 eax, DWORD PTR $T4[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h

; 61   :         __std_exception_copy(&_InitData, &_Data);

  00104	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\stdexcept

; 111  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

  00107	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0010d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00110	72 0d		 jb	 SHORT $LN78@System_err

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00112	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00113	50		 push	 eax
  00114	ff 75 c0	 push	 DWORD PTR $T4[ebp]
  00117	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0011c	83 c4 08	 add	 esp, 8
$LN78@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error

; 396  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  0011f	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  00122	8b c6		 mov	 eax, esi
  00124	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00127	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  0012a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_System_error@std@@6B@
  00130	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00143	33 cd		 xor	 ecx, ebp
  00145	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 333  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :         return _Addr == _Right._Addr;

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 333  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00006	56		 push	 esi

; 90   :         return _Addr == _Right._Addr;

  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 334  :     return *this == _Code.category() && _Code.value() == _Errval;

  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 335  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 334  :     return *this == _Code.category() && _Code.value() == _Errval;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 335  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 329  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  :     return default_error_condition(_Errval) == _Cond;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]

; 90   :         return _Addr == _Right._Addr;

  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 249  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00022	75 0f		 jne	 SHORT $LN5@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN5@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 331  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN5@equivalent:

; 249  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 331  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 324  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 325  :     // make error_condition for error code
; 326  :     return error_condition(_Errval, *this);
; 327  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 115  : };

  00000	c2 00 00	 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 348  : _NODISCARD inline error_code make_error_code(io_errc _Errno) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  :     return _Immortalize_memcpy_image<_Iostream_error_category2>();

  00003	e8 00 00 00 00	 call	 ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>

; 126  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00008	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Errno$[ebp]
  0000e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 349  :     return error_code(static_cast<int>(_Errno), _STD iostream_category());

  00011	8b c2		 mov	 eax, edx

; 126  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00013	89 0a		 mov	 DWORD PTR [edx], ecx

; 350  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 12		 jb	 SHORT $LN4@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	33 c0		 xor	 eax, eax
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0002d	66 89 06	 mov	 WORD PTR [esi], ax
  00030	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00031	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 2586 :     basic_string& operator=(basic_string&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2587 :         if (this != _STD addressof(_Right)) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 4a		 je	 SHORT $LN19@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00014	72 12		 jb	 SHORT $LN7@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0001d	50		 push	 eax
  0001e	ff 36		 push	 DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00025	83 c4 08	 add	 esp, 8
$LN7@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00028	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;
; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002f	33 c0		 xor	 eax, eax
  00031	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00038	66 89 06	 mov	 WORD PTR [esi], ax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0003b	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0003e	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00041	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00046	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0004b	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004e	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00055	66 89 07	 mov	 WORD PTR [edi], ax
$LN19@operator:
  00058	5f		 pop	 edi

; 2588 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});
; 2589 :         }
; 2590 : 
; 2591 :         return *this;
; 2592 :     }

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__New_array$1 = -8					; size = 4
__Right_size$1$ = -4					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00022	89 4d fc	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2145 :         if (_Large_string_engaged()) {

  00025	72 05		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0002c	83 f9 08	 cmp	 ecx, 8
  0002f	73 1b		 jae	 SHORT $LN8@basic_stri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00031	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	bb 07 00 00 00	 mov	 ebx, 7

; 2278 :     }

  00039	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0003b	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2278 :     }

  0003e	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00041	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004e	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00053	83 cb 07	 or	 ebx, 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00056	3b d8		 cmp	 ebx, eax
  00058	0f 47 d8	 cmova	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00063	77 43		 ja	 SHORT $LN35@basic_stri

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00065	03 c0		 add	 eax, eax
  00067	56		 push	 esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0006e	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00070	8d 45 f8	 lea	 eax, DWORD PTR __New_array$1[ebp]
  00073	50		 push	 eax
  00074	57		 push	 edi
  00075	89 75 f8	 mov	 DWORD PTR __New_array$1[ebp], esi
  00078	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00080	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  00087	51		 push	 ecx
  00088	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 _memcpy
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00094	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2278 :     }

  00097	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0009a	8b c7		 mov	 eax, edi
  0009c	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0009f	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2278 :     }

  000a0	5f		 pop	 edi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN35@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000a8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN33@basic_stri:
  000ad	cc		 int	 3
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
__New_ptr$1 = -4					; size = 4
$T2 = 8							; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3733 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 3734 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 75 08	 mov	 esi, DWORD PTR __Newcap$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00010	89 55 f8	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  00013	3b d6		 cmp	 edx, esi
  00015	0f 87 f6 00 00
	00		 ja	 $LN5@reserve

; 3735 :             return; // nothing to do
; 3736 :         }
; 3737 : 
; 3738 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	53		 push	 ebx
  0001c	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0001f	3b de		 cmp	 ebx, esi
  00021	0f 84 e9 00 00
	00		 je	 $LN41@reserve

; 3739 :             return; // nothing to do
; 3740 :         }
; 3741 : 
; 3742 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00027	0f 83 b7 00 00
	00		 jae	 $LN4@reserve

; 3743 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3744 :             _Reallocate_grow_by(

  0002d	8b ce		 mov	 ecx, esi

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0002f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3743 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3744 :             _Reallocate_grow_by(

  00034	2b ca		 sub	 ecx, edx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00036	2b c2		 sub	 eax, edx
  00038	3b c1		 cmp	 eax, ecx
  0003a	0f 82 d9 00 00
	00		 jb	 $LN47@reserve

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00040	8b ce		 mov	 ecx, esi
  00042	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00045	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004b	76 07		 jbe	 SHORT $LN15@reserve

; 4203 :             return _Max;

  0004d	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00052	eb 1e		 jmp	 SHORT $LN43@reserve
$LN15@reserve:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00054	8b d3		 mov	 edx, ebx
  00056	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0005b	d1 ea		 shr	 edx, 1
  0005d	2b c2		 sub	 eax, edx
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 07		 jbe	 SHORT $LN16@reserve

; 4207 :             return _Max;

  00063	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00068	eb 08		 jmp	 SHORT $LN43@reserve
$LN16@reserve:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0006a	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0006d	3b c8		 cmp	 ecx, eax
  0006f	0f 42 c8	 cmovb	 ecx, eax
$LN43@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00072	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00075	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00081	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  00084	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00087	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  0008a	41		 inc	 ecx
  0008b	89 45 fc	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  0008e	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00091	51		 push	 ecx
  00092	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00095	72 2a		 jb	 SHORT $LN9@reserve

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00097	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00099	56		 push	 esi
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memcpy

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a3	50		 push	 eax
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000aa	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ad	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000b0	89 07		 mov	 DWORD PTR [edi], eax

; 3749 :             _Mypair._Myval2._Mysize = _Old_size;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  000b5	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 3760 :     }

  000ba	5e		 pop	 esi
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
$LN9@reserve:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c1	57		 push	 edi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memcpy

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000c8	8d 45 fc	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000cb	50		 push	 eax
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 3749 :             _Mypair._Myval2._Mysize = _Old_size;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d5	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3749 :             _Mypair._Myval2._Mysize = _Old_size;

  000d8	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000db	5b		 pop	 ebx
  000dc	5f		 pop	 edi

; 3760 :     }

  000dd	5e		 pop	 esi
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
$LN4@reserve:

; 3750 :             return;
; 3751 :         }
; 3752 : 
; 3753 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  000e4	83 fe 10	 cmp	 esi, 16			; 00000010H
  000e7	73 27		 jae	 SHORT $LN41@reserve

; 2153 :         return _BUF_SIZE <= _Myres;

  000e9	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3750 :             return;
; 3751 :         }
; 3752 : 
; 3753 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  000ec	72 22		 jb	 SHORT $LN41@reserve

; 4280 :         const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  000ee	8b 37		 mov	 esi, DWORD PTR [edi]

; 4281 :         auto& _Al          = _Getal();
; 4282 :         _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4283 :         _Traits::copy(_Mypair._Myval2._Bx._Buf, _Unfancy(_Ptr), _Mypair._Myval2._Mysize + 1);

  000f0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000f3	50		 push	 eax
  000f4	56		 push	 esi
  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 _memcpy

; 4284 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000fb	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000fe	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ff	50		 push	 eax
  00100	56		 push	 esi
  00101	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4285 :         _Mypair._Myval2._Myres = _BUF_SIZE - 1;

  00106	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010d	83 c4 14	 add	 esp, 20			; 00000014H
$LN41@reserve:
  00110	5b		 pop	 ebx
$LN5@reserve:
  00111	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3760 :     }

  00112	5e		 pop	 esi
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
$LN47@reserve:

; 4250 :             _Xlen_string(); // result too long

  00119	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN42@reserve:
  0011e	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z
_TEXT	SEGMENT
tv519 = -16						; size = 4
__New_ptr$1 = -12					; size = 4
tv518 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Result$1$ = 8						; size = 4
__Ptr_shifted_after$1$ = 8				; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
tv522 = 16						; size = 4
tv520 = 16						; size = 4
$T2 = 16						; size = 4
__Insert_at$1$ = 16					; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 3078 :         const size_type _Off, _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 2157 :         if (_Mysize < _Off) {

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000e	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00011	3b f1		 cmp	 esi, ecx
  00013	0f 82 a0 01 00
	00		 jb	 $LN61@insert

; 3079 :         // insert [_Ptr, _Ptr + _Count) at _Off
; 3080 :         _Mypair._Myval2._Check_offset(_Off);
; 3081 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3082 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00019	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0001c	8b c2		 mov	 eax, edx
  0001e	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00021	2b c6		 sub	 eax, esi
  00023	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  00026	3b d8		 cmp	 ebx, eax
  00028	0f 87 8a 00 00
	00		 ja	 $LN2@insert

; 2135 :         value_type* _Result = _Bx._Buf;

  0002e	89 7d 08	 mov	 DWORD PTR __Result$1$[ebp], edi

; 3083 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00031	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00034	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00037	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00039	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0003c	72 05		 jb	 SHORT $LN14@insert

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0003e	8b 07		 mov	 eax, DWORD PTR [edi]
  00040	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN14@insert:

; 3084 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3085 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  00043	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]

; 3086 :             // the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 3087 :             // while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 3088 :             size_type _Ptr_shifted_after;
; 3089 :             if (_Ptr + _Count <= _Insert_at
; 3090 :                 || _Ptr > _Old_ptr + _Old_size) { // inserted content is before the shifted region, or does not alias

  00046	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00049	03 c3		 add	 eax, ebx
  0004b	89 55 10	 mov	 DWORD PTR __Insert_at$1$[ebp], edx
  0004e	3b c2		 cmp	 eax, edx
  00050	76 20		 jbe	 SHORT $LN5@insert
  00052	8b 45 08	 mov	 eax, DWORD PTR __Result$1$[ebp]
  00055	03 c6		 add	 eax, esi
  00057	39 45 0c	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0005a	77 16		 ja	 SHORT $LN5@insert

; 3092 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  0005c	3b 55 0c	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  0005f	77 07		 ja	 SHORT $LN6@insert

; 3093 :                 _Ptr_shifted_after = 0;

  00061	33 c0		 xor	 eax, eax
  00063	89 45 08	 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], eax

; 3094 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  00066	eb 0d		 jmp	 SHORT $LN7@insert
$LN6@insert:

; 3095 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  00068	8b c2		 mov	 eax, edx
  0006a	2b 45 0c	 sub	 eax, DWORD PTR __Ptr$[ebp]
  0006d	89 45 08	 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], eax
  00070	eb 03		 jmp	 SHORT $LN7@insert
$LN5@insert:

; 3091 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  00072	89 5d 08	 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], ebx
$LN7@insert:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00075	2b f1		 sub	 esi, ecx

; 3096 :             }
; 3097 : 
; 3098 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00077	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0007a	46		 inc	 esi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0007b	56		 push	 esi
  0007c	52		 push	 edx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memmove

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00083	8b 75 08	 mov	 esi, DWORD PTR __Ptr_shifted_after$1$[ebp]
  00086	56		 push	 esi
  00087	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0008a	ff 75 10	 push	 DWORD PTR __Insert_at$1$[ebp]
  0008d	e8 00 00 00 00	 call	 _memcpy

; 3099 :             _Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
; 3100 :             _Traits::copy(

  00092	8b c3		 mov	 eax, ebx
  00094	2b c6		 sub	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00096	50		 push	 eax

; 3099 :             _Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
; 3100 :             _Traits::copy(

  00097	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0009a	03 c6		 add	 eax, esi
  0009c	03 c3		 add	 eax, ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009e	50		 push	 eax

; 3099 :             _Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
; 3100 :             _Traits::copy(

  0009f	8b 45 10	 mov	 eax, DWORD PTR __Insert_at$1$[ebp]
  000a2	03 c6		 add	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _memcpy
  000aa	83 c4 24	 add	 esp, 36			; 00000024H

; 3112 :             },
; 3113 :             _Off, _Ptr, _Count);
; 3114 :     }

  000ad	8b c7		 mov	 eax, edi
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 0c 00	 ret	 12			; 0000000cH
$LN2@insert:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  000b8	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000bd	2b c6		 sub	 eax, esi
  000bf	3b c3		 cmp	 eax, ebx
  000c1	0f 82 f7 00 00
	00		 jb	 $LN62@insert

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  000c7	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000ca	83 c9 0f	 or	 ecx, 15			; 0000000fH
  000cd	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000d3	76 07		 jbe	 SHORT $LN32@insert

; 4203 :             return _Max;

  000d5	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000da	eb 24		 jmp	 SHORT $LN58@insert
$LN32@insert:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000dc	8b c2		 mov	 eax, edx
  000de	d1 e8		 shr	 eax, 1
  000e0	89 45 10	 mov	 DWORD PTR tv522[ebp], eax
  000e3	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000e8	2b 45 10	 sub	 eax, DWORD PTR tv522[ebp]
  000eb	3b d0		 cmp	 edx, eax
  000ed	76 07		 jbe	 SHORT $LN33@insert

; 4207 :             return _Max;

  000ef	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000f4	eb 0a		 jmp	 SHORT $LN58@insert
$LN33@insert:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000f6	8b 45 10	 mov	 eax, DWORD PTR tv522[ebp]
  000f9	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000fb	3b c8		 cmp	 ecx, eax
  000fd	0f 42 c8	 cmovb	 ecx, eax
$LN58@insert:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00100	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00103	89 4d 10	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  0010c	8b 4d 10	 mov	 ecx, DWORD PTR $T2[ebp]
  0010f	8b d0		 mov	 edx, eax
  00111	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00114	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00117	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0011a	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0011d	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00120	2b f0		 sub	 esi, eax
  00122	46		 inc	 esi
  00123	89 55 f4	 mov	 DWORD PTR __New_ptr$1[ebp], edx
  00126	89 75 f0	 mov	 DWORD PTR tv519[ebp], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00129	50		 push	 eax
  0012a	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  0012d	89 4d 10	 mov	 DWORD PTR tv520[ebp], ecx
  00130	03 cb		 add	 ecx, ebx
  00132	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  00136	89 4d f8	 mov	 DWORD PTR tv518[ebp], ecx
  00139	72 44		 jb	 SHORT $LN26@insert

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0013b	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0013d	56		 push	 esi
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 _memcpy
  00144	53		 push	 ebx
  00145	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00148	ff 75 10	 push	 DWORD PTR tv520[ebp]
  0014b	e8 00 00 00 00	 call	 _memcpy
  00150	ff 75 f0	 push	 DWORD PTR tv519[ebp]

; 3111 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00153	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00156	03 c6		 add	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00158	50		 push	 eax
  00159	ff 75 f8	 push	 DWORD PTR tv518[ebp]
  0015c	e8 00 00 00 00	 call	 _memcpy

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00161	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  00164	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00165	50		 push	 eax
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  0016c	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 3112 :             },
; 3113 :             _Off, _Ptr, _Count);
; 3114 :     }

  0016f	83 c4 2c	 add	 esp, 44			; 0000002cH

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00172	89 07		 mov	 DWORD PTR [edi], eax

; 3112 :             },
; 3113 :             _Off, _Ptr, _Count);
; 3114 :     }

  00174	8b c7		 mov	 eax, edi
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 0c 00	 ret	 12			; 0000000cH
$LN26@insert:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0017f	57		 push	 edi
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 _memcpy
  00186	53		 push	 ebx
  00187	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0018a	ff 75 10	 push	 DWORD PTR tv520[ebp]
  0018d	e8 00 00 00 00	 call	 _memcpy

; 3111 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00192	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00195	56		 push	 esi

; 3111 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00196	03 c7		 add	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00198	50		 push	 eax
  00199	ff 75 f8	 push	 DWORD PTR tv518[ebp]
  0019c	e8 00 00 00 00	 call	 _memcpy

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001a1	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  001a4	50		 push	 eax
  001a5	57		 push	 edi
  001a6	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 3112 :             },
; 3113 :             _Off, _Ptr, _Count);
; 3114 :     }

  001ab	83 c4 2c	 add	 esp, 44			; 0000002cH
  001ae	8b c7		 mov	 eax, edi
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 0c 00	 ret	 12			; 0000000cH
$LN61@insert:

; 2158 :             _Xran();

  001b9	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN62@insert:

; 4250 :             _Xlen_string(); // result too long

  001be	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@insert:
  001c3	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_size$1$ = -16					; size = 4
__New_ptr$1 = -12					; size = 4
tv448 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv452 = 12						; size = 4
tv449 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f0	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 d6 00 00
	00		 jb	 $LN45@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN19@append

; 4203 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN42@append
$LN19@append:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv452[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv452[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN20@append

; 4207 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN42@append
$LN20@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv452[ebp]
  00090	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN42@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv449[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c1	89 4d f8	 mov	 DWORD PTR tv448[ebp], ecx
  000c4	72 3c		 jb	 SHORT $LN13@append

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c6	ff 75 f0	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000e7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f2	83 c4 20	 add	 esp, 32			; 00000020H

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	89 07		 mov	 DWORD PTR [edi], eax

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN13@append:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00102	56		 push	 esi
  00103	57		 push	 edi
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	53		 push	 ebx
  0010b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0010e	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  00111	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00116	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  00119	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011c	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0011f	50		 push	 eax
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00126	83 c4 20	 add	 esp, 32			; 00000020H
  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN45@append:

; 4250 :             _Xlen_string(); // result too long

  00134	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@append:
  00139	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
_TEXT	SEGMENT
__Fancyptr$1 = -8					; size = 4
__New_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Source_of_al$ = 12					; size = 4
__Left_ptr$ = 16					; size = 4
__Left_size$ = 20					; size = 4
__Right_ptr$ = 24					; size = 4
__Right_size$ = 28					; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2443 :             _One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2444 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 2445 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 2446 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 2447 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00006	8b 45 14	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00009	03 45 1c	 add	 eax, DWORD PTR __Right_size$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	89 45 fc	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2448 :         size_type _New_capacity = _BUF_SIZE - 1;

  00014	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 2449 :         auto& _My_data          = _Mypair._Myval2;
; 2450 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00019	8b df		 mov	 ebx, edi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0001b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00022	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2451 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2452 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 2453 :         if (_New_capacity < _New_size) {

  00029	3b c6		 cmp	 eax, esi
  0002b	76 3c		 jbe	 SHORT $LN2@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002d	8b f0		 mov	 esi, eax
  0002f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00032	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	76 07		 jbe	 SHORT $LN9@basic_stri

; 4203 :             return _Max;

  0003a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0003f	eb 0a		 jmp	 SHORT $LN8@basic_stri
$LN9@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00041	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00046	3b f0		 cmp	 esi, eax
  00048	0f 42 f0	 cmovb	 esi, eax
$LN8@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0004b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00054	8b d8		 mov	 ebx, eax

; 2456 :             _Ptr                    = _Unfancy(_Fancyptr);
; 2457 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00056	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$1[ebp]
  00059	50		 push	 eax
  0005a	57		 push	 edi
  0005b	89 5d f8	 mov	 DWORD PTR __Fancyptr$1[ebp], ebx
  0005e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00063	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@basic_stri:

; 2461 :         _My_data._Myres  = _New_capacity;

  00069	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0006c	8b 75 14	 mov	 esi, DWORD PTR __Left_size$[ebp]
  0006f	56		 push	 esi
  00070	ff 75 10	 push	 DWORD PTR __Left_ptr$[ebp]

; 2458 :         }
; 2459 : 
; 2460 :         _My_data._Mysize = _New_size;

  00073	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00076	53		 push	 ebx
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	ff 75 1c	 push	 DWORD PTR __Right_size$[ebp]

; 2462 :         _Traits::copy(_Ptr, _Left_ptr, _Left_size);
; 2463 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  0007f	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00082	ff 75 18	 push	 DWORD PTR __Right_ptr$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _memcpy

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  0008b	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008e	83 c4 18	 add	 esp, 24			; 00000018H

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  00091	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 2465 :         _Proxy._Release();
; 2466 :     }

  00095	8b c7		 mov	 eax, edi
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 18 00	 ret	 24			; 00000018H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL13@basic_stri:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL13@basic_stri
  00027	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  00032	5f		 pop	 edi
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	5e		 pop	 esi

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2169 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);
; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000e	83 c4 04	 add	 esp, 4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00014	51		 push	 ecx
  00015	6a 00		 push	 0
  00017	56		 push	 esi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	ff 70 04	 push	 DWORD PTR [eax+4]
  00021	ff 30		 push	 DWORD PTR [eax]
  00023	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H

; 959  :         __crt_va_end(_ArgList);
; 960  :         return _Result;

  0002b	5e		 pop	 esi

; 961  :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
