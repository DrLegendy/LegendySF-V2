; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0CSymbol@@QAE@XZ				; CSymbol::CSymbol
PUBLIC	??1CSymbol@@UAE@XZ				; CSymbol::~CSymbol
PUBLIC	?issymbol@CSymbol@@SAHH@Z			; CSymbol::issymbol
PUBLIC	?SetType@CSymbol@@QAEXH@Z			; CSymbol::SetType
PUBLIC	?GetType@CSymbol@@QAEHXZ			; CSymbol::GetType
PUBLIC	?Equal@CSymbol@@QAE_NV1@@Z			; CSymbol::Equal
PUBLIC	?Less@CSymbol@@QAE_NV1@@Z			; CSymbol::Less
PUBLIC	??_GCSymbol@@UAEPAXI@Z				; CSymbol::`scalar deleting destructor'
PUBLIC	??_7CSymbol@@6B@				; CSymbol::`vftable'
PUBLIC	??_R4CSymbol@@6B@				; CSymbol::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSymbol@@@8				; CSymbol `RTTI Type Descriptor'
PUBLIC	??_R3CSymbol@@8					; CSymbol::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSymbol@@8					; CSymbol::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSymbol@@8			; CSymbol::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBase@@8				; CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBase@@@8				; CBase `RTTI Type Descriptor'
PUBLIC	??_R3CBase@@8					; CBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBase@@8					; CBase::`RTTI Base Class Array'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??0CBase@@QAE@XZ:PROC				; CBase::CBase
EXTRN	??1CBase@@UAE@XZ:PROC				; CBase::~CBase
EXTRN	??_ECSymbol@@UAEPAXI@Z:PROC			; CSymbol::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2CBase@@8
rdata$r	SEGMENT
??_R2CBase@@8 DD FLAT:??_R1A@?0A@EA@CBase@@8		; CBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBase@@8
rdata$r	SEGMENT
??_R3CBase@@8 DD 00H					; CBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBase@@@8
data$r	SEGMENT
??_R0?AVCBase@@@8 DD FLAT:??_7type_info@@6B@		; CBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBase@@8 DD FLAT:??_R0?AVCBase@@@8	; CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSymbol@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSymbol@@8 DD FLAT:??_R0?AVCSymbol@@@8	; CSymbol::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSymbol@@8
rdata$r	ENDS
;	COMDAT ??_R2CSymbol@@8
rdata$r	SEGMENT
??_R2CSymbol@@8 DD FLAT:??_R1A@?0A@EA@CSymbol@@8	; CSymbol::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSymbol@@8
rdata$r	SEGMENT
??_R3CSymbol@@8 DD 00H					; CSymbol::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSymbol@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSymbol@@@8
data$r	SEGMENT
??_R0?AVCSymbol@@@8 DD FLAT:??_7type_info@@6B@		; CSymbol `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSymbol@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSymbol@@6B@
rdata$r	SEGMENT
??_R4CSymbol@@6B@ DD 00H				; CSymbol::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSymbol@@@8
	DD	FLAT:??_R3CSymbol@@8
rdata$r	ENDS
;	COMDAT ??_7CSymbol@@6B@
CONST	SEGMENT
??_7CSymbol@@6B@ DD FLAT:??_R4CSymbol@@6B@		; CSymbol::`vftable'
	DD	FLAT:??_ECSymbol@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSymbol@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSymbol@@UAEPAXI@Z PROC				; CSymbol::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSymbol@@UAE@XZ	; CSymbol::~CSymbol
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSymbol@@UAEPAXI@Z ENDP				; CSymbol::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ?Less@CSymbol@@QAE_NV1@@Z
_TEXT	SEGMENT
_dif$ = 8						; size = 12
?Less@CSymbol@@QAE_NV1@@Z PROC				; CSymbol::Less, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :     if (dif.iType/10 > iType/10) return true;

  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	f7 6d 10	 imul	 DWORD PTR _dif$[ebp+8]
  0000b	53		 push	 ebx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00014	56		 push	 esi
  00015	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00018	8b ca		 mov	 ecx, edx
  0001a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001d	03 ca		 add	 ecx, edx
  0001f	f7 ee		 imul	 esi
  00021	c1 fa 02	 sar	 edx, 2
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx

; 24   :     return false;

  0002b	3b c8		 cmp	 ecx, eax
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR _dif$[ebp]
  00030	0f 9f c3	 setg	 bl
  00033	e8 00 00 00 00	 call	 ??1CSymbol@@UAE@XZ	; CSymbol::~CSymbol
  00038	5e		 pop	 esi
  00039	8a c3		 mov	 al, bl
  0003b	5b		 pop	 ebx

; 25   : }

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?Less@CSymbol@@QAE_NV1@@Z ENDP				; CSymbol::Less
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ?Equal@CSymbol@@QAE_NV1@@Z
_TEXT	SEGMENT
_dif$ = 8						; size = 12
?Equal@CSymbol@@QAE_NV1@@Z PROC				; CSymbol::Equal, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   :     if (dif.iType/10 == iType/10) return true;

  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	f7 6d 10	 imul	 DWORD PTR _dif$[ebp+8]
  0000b	53		 push	 ebx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00014	56		 push	 esi
  00015	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00018	8b ca		 mov	 ecx, edx
  0001a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001d	03 ca		 add	 ecx, edx
  0001f	f7 ee		 imul	 esi
  00021	c1 fa 02	 sar	 edx, 2
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx

; 18   :     return false;

  0002b	3b c8		 cmp	 ecx, eax
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR _dif$[ebp]
  00030	0f 94 c3	 sete	 bl
  00033	e8 00 00 00 00	 call	 ??1CSymbol@@UAE@XZ	; CSymbol::~CSymbol
  00038	5e		 pop	 esi
  00039	8a c3		 mov	 al, bl
  0003b	5b		 pop	 ebx

; 19   : }

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?Equal@CSymbol@@QAE_NV1@@Z ENDP				; CSymbol::Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ?GetType@CSymbol@@QAEHXZ
_TEXT	SEGMENT
?GetType@CSymbol@@QAEHXZ PROC				; CSymbol::GetType, COMDAT
; _this$ = ecx

; 29   :     return iType;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 30   : }

  00003	c3		 ret	 0
?GetType@CSymbol@@QAEHXZ ENDP				; CSymbol::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ?SetType@CSymbol@@QAEXH@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?SetType@CSymbol@@QAEXH@Z PROC				; CSymbol::SetType, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   :     iType=Type;

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetType@CSymbol@@QAEXH@Z ENDP				; CSymbol::SetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ?issymbol@CSymbol@@SAHH@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 4
?issymbol@CSymbol@@SAHH@Z PROC				; CSymbol::issymbol, COMDAT

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 39   :     switch(ch)

  00003	8b 45 08	 mov	 eax, DWORD PTR _ch$[ebp]
  00006	83 c0 d8	 add	 eax, -40		; ffffffd8H
  00009	83 f8 36	 cmp	 eax, 54			; 00000036H
  0000c	77 3f		 ja	 SHORT $LN2@issymbol
  0000e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@issymbol[eax]
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@issymbol[eax*4]
$LN4@issymbol:

; 40   :     {
; 41   : 	case SY_PLUS	: return ST_PLUS;

  0001c	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH

; 50   : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN5@issymbol:

; 42   : 	case SY_MINUS	: return ST_MINUS;

  00023	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 50   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN6@issymbol:

; 43   : 	case SY_MULTIPLY: return ST_MULTIPLY;

  0002a	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 50   : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN7@issymbol:

; 44   : 	case SY_DIVIDE	: return SY_DIVIDE;

  00031	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH

; 50   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN8@issymbol:

; 45   : 	case SY_CARET	: return SY_CARET;

  00038	b8 5e 00 00 00	 mov	 eax, 94			; 0000005eH

; 50   : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN9@issymbol:

; 46   : 	case SY_OPEN	: return SY_OPEN;

  0003f	b8 28 00 00 00	 mov	 eax, 40			; 00000028H

; 50   : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN10@issymbol:

; 47   : 	case SY_CLOSE	: return ST_CLOSE;

  00046	b8 07 00 00 00	 mov	 eax, 7

; 50   : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN2@issymbol:

; 48   :     }
; 49   :     return 0;

  0004d	33 c0		 xor	 eax, eax

; 50   : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
  00051	0f 1f 00	 npad	 3
$LN13@issymbol:
  00054	00 00 00 00	 DD	 $LN9@issymbol
  00058	00 00 00 00	 DD	 $LN10@issymbol
  0005c	00 00 00 00	 DD	 $LN6@issymbol
  00060	00 00 00 00	 DD	 $LN4@issymbol
  00064	00 00 00 00	 DD	 $LN5@issymbol
  00068	00 00 00 00	 DD	 $LN7@issymbol
  0006c	00 00 00 00	 DD	 $LN8@issymbol
  00070	00 00 00 00	 DD	 $LN2@issymbol
$LN12@issymbol:
  00074	00		 DB	 0
  00075	01		 DB	 1
  00076	02		 DB	 2
  00077	03		 DB	 3
  00078	07		 DB	 7
  00079	04		 DB	 4
  0007a	07		 DB	 7
  0007b	05		 DB	 5
  0007c	07		 DB	 7
  0007d	07		 DB	 7
  0007e	07		 DB	 7
  0007f	07		 DB	 7
  00080	07		 DB	 7
  00081	07		 DB	 7
  00082	07		 DB	 7
  00083	07		 DB	 7
  00084	07		 DB	 7
  00085	07		 DB	 7
  00086	07		 DB	 7
  00087	07		 DB	 7
  00088	07		 DB	 7
  00089	07		 DB	 7
  0008a	07		 DB	 7
  0008b	07		 DB	 7
  0008c	07		 DB	 7
  0008d	07		 DB	 7
  0008e	07		 DB	 7
  0008f	07		 DB	 7
  00090	07		 DB	 7
  00091	07		 DB	 7
  00092	07		 DB	 7
  00093	07		 DB	 7
  00094	07		 DB	 7
  00095	07		 DB	 7
  00096	07		 DB	 7
  00097	07		 DB	 7
  00098	07		 DB	 7
  00099	07		 DB	 7
  0009a	07		 DB	 7
  0009b	07		 DB	 7
  0009c	07		 DB	 7
  0009d	07		 DB	 7
  0009e	07		 DB	 7
  0009f	07		 DB	 7
  000a0	07		 DB	 7
  000a1	07		 DB	 7
  000a2	07		 DB	 7
  000a3	07		 DB	 7
  000a4	07		 DB	 7
  000a5	07		 DB	 7
  000a6	07		 DB	 7
  000a7	07		 DB	 7
  000a8	07		 DB	 7
  000a9	07		 DB	 7
  000aa	06		 DB	 6
?issymbol@CSymbol@@SAHH@Z ENDP				; CSymbol::issymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ??1CSymbol@@UAE@XZ
_TEXT	SEGMENT
??1CSymbol@@UAE@XZ PROC					; CSymbol::~CSymbol, COMDAT
; _this$ = ecx

; 11   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSymbol@@6B@

; 12   : 
; 13   : }

  00006	e9 00 00 00 00	 jmp	 ??1CBase@@UAE@XZ	; CBase::~CBase
??1CSymbol@@UAE@XZ ENDP					; CSymbol::~CSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Symbol.cpp
;	COMDAT ??0CSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSymbol@@QAE@XZ PROC					; CSymbol::CSymbol, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CBase@@QAE@XZ	; CBase::CBase
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSymbol@@6B@

; 6    :     id = MID_SYMBOL;
; 7    :     iType = ST_UNKNOWN;
; 8    : }

  00015	8b c6		 mov	 eax, esi
  00017	c7 46 04 00 04
	00 00		 mov	 DWORD PTR [esi+4], 1024	; 00000400H
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	5e		 pop	 esi
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CSymbol@@QAE@XZ ENDP					; CSymbol::CSymbol
_TEXT	ENDS
END
