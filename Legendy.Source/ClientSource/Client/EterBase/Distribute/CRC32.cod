; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetCRC32@@YAKPBDI@Z				; GetCRC32
PUBLIC	?GetCaseCRC32@@YAKPBDI@Z			; GetCaseCRC32
PUBLIC	?GetHFILECRC32@@YAKPAX@Z			; GetHFILECRC32
PUBLIC	?GetFileCRC32@@YAKPBD@Z				; GetFileCRC32
PUBLIC	?GetFileSize@@YAKPBD@Z				; GetFileSize
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
_DATA	SEGMENT
?CRCTable@@3PAKA DD 00H					; CRCTable
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
;	COMDAT ?GetFileSize@@YAKPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?GetFileSize@@YAKPBD@Z PROC				; GetFileSize, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 195  : 	HANDLE hFile = CreateFile(c_szFileName,					// name of the file

  00004	6a 00		 push	 0
  00006	68 80 00 00 00	 push	 128			; 00000080H
  0000b	6a 03		 push	 3
  0000d	6a 00		 push	 0
  0000f	6a 01		 push	 1
  00011	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00016	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001f	8b f8		 mov	 edi, eax

; 196  : 						 GENERIC_READ,					// desired access
; 197  : 						 FILE_SHARE_READ,			// share mode
; 198  : 						 NULL,						// security attributes
; 199  : 						 OPEN_EXISTING,			// creation disposition
; 200  : 						 FILE_ATTRIBUTE_NORMAL,		// flags and attr
; 201  : 						 NULL);						// template file
; 202  : 
; 203  : 	if (INVALID_HANDLE_VALUE == hFile)

  00021	83 ff ff	 cmp	 edi, -1
  00024	75 05		 jne	 SHORT $LN2@GetFileSiz

; 204  : 		return 0;

  00026	33 c0		 xor	 eax, eax
  00028	5f		 pop	 edi

; 211  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN2@GetFileSiz:
  0002b	56		 push	 esi

; 205  : 
; 206  : 	DWORD dwSize = GetFileSize(hFile, NULL);

  0002c	6a 00		 push	 0
  0002e	57		 push	 edi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8

; 207  : 
; 208  : 	CloseHandle(hFile);

  00035	57		 push	 edi
  00036	8b f0		 mov	 esi, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 209  : 
; 210  : 	return dwSize;

  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5f		 pop	 edi

; 211  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?GetFileSize@@YAKPBD@Z ENDP				; GetFileSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
;	COMDAT ?GetFileCRC32@@YAKPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?GetFileCRC32@@YAKPBD@Z PROC				; GetFileCRC32, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 174  : 	HANDLE hFile = CreateFile(c_szFileName,					// name of the file

  00004	6a 00		 push	 0
  00006	68 80 00 00 00	 push	 128			; 00000080H
  0000b	6a 03		 push	 3
  0000d	6a 00		 push	 0
  0000f	6a 01		 push	 1
  00011	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00016	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001f	8b f8		 mov	 edi, eax

; 175  : 						 GENERIC_READ,					// desired access
; 176  : 						 FILE_SHARE_READ,			// share mode
; 177  : 						 NULL,						// security attributes
; 178  : 						 OPEN_EXISTING,			// creation disposition
; 179  : 						 FILE_ATTRIBUTE_NORMAL,		// flags and attr
; 180  : 						 NULL);						// template file
; 181  : 
; 182  : 	if (INVALID_HANDLE_VALUE == hFile)

  00021	83 ff ff	 cmp	 edi, -1
  00024	75 05		 jne	 SHORT $LN2@GetFileCRC

; 183  : 		return 0;

  00026	33 c0		 xor	 eax, eax
  00028	5f		 pop	 edi

; 191  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN2@GetFileCRC:
  0002b	56		 push	 esi

; 184  : 
; 185  : 
; 186  : 	DWORD dwRetCRC32=GetHFILECRC32(hFile);

  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GetHFILECRC32@@YAKPAX@Z ; GetHFILECRC32
  00032	83 c4 04	 add	 esp, 4
  00035	8b f0		 mov	 esi, eax

; 187  : 
; 188  : 	CloseHandle(hFile);

  00037	57		 push	 edi
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 189  : 
; 190  : 	return dwRetCRC32;

  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5f		 pop	 edi

; 191  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?GetFileCRC32@@YAKPBD@Z ENDP				; GetFileCRC32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
;	COMDAT ?GetHFILECRC32@@YAKPAX@Z
_TEXT	SEGMENT
_SysInfo$ = -36						; size = 36
_hFile$ = 8						; size = 4
?GetHFILECRC32@@YAKPAX@Z PROC				; GetHFILECRC32, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 128  : 	DWORD dwRetCRC32=0;
; 129  : 
; 130  : 	DWORD dwFileSize = GetFileSize(hFile, NULL);

  00008	8b 75 08	 mov	 esi, DWORD PTR _hFile$[ebp]
  0000b	57		 push	 edi
  0000c	6a 00		 push	 0
  0000e	56		 push	 esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00015	8b d8		 mov	 ebx, eax

; 131  : 
; 132  : 	DWORD dataOffset=0;
; 133  : 	DWORD mapSize=dwFileSize;
; 134  : 
; 135  : 	SYSTEM_INFO SysInfo;
; 136  : 	GetSystemInfo(&SysInfo);

  00017	8d 45 dc	 lea	 eax, DWORD PTR _SysInfo$[ebp]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 137  : 
; 138  : 	DWORD dwSysGran = SysInfo.dwAllocationGranularity;
; 139  : 	DWORD dwFileMapStart = (dataOffset / dwSysGran) * dwSysGran;
; 140  : 	DWORD dwMapViewSize = (dataOffset % dwSysGran) + mapSize;
; 141  : 	//INT iViewDelta = dataOffset - dwFileMapStart;
; 142  : 
; 143  : 	HANDLE hFM = CreateFileMapping(hFile,				// handle

  00021	6a 00		 push	 0
  00023	53		 push	 ebx
  00024	6a 00		 push	 0
  00026	6a 02		 push	 2
  00028	6a 00		 push	 0
  0002a	56		 push	 esi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileMappingA@24
  00031	8b f8		 mov	 edi, eax

; 144  : 							  NULL,					// security
; 145  : 							  PAGE_READONLY,		// flProtect
; 146  : 							  0,					// high
; 147  : 							  dataOffset + mapSize,	// low
; 148  : 							  NULL);				// name
; 149  : 	if (hFM)

  00033	85 ff		 test	 edi, edi
  00035	74 37		 je	 SHORT $LN5@GetHFILECR

; 150  : 	{
; 151  : 		LPVOID lpMapData = MapViewOfFile(hFM,

  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 04		 push	 4
  0003e	57		 push	 edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapViewOfFile@20
  00045	8b f0		 mov	 esi, eax

; 152  : 									FILE_MAP_READ,
; 153  : 									0,
; 154  : 									dwFileMapStart,
; 155  : 									dwMapViewSize);
; 156  : 
; 157  : 		dwRetCRC32=GetCRC32((const char*)lpMapData, dwFileSize);

  00047	53		 push	 ebx
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0004e	83 c4 08	 add	 esp, 8
  00051	8b d8		 mov	 ebx, eax

; 158  : 
; 159  : 
; 160  : 		if (lpMapData)

  00053	85 f6		 test	 esi, esi
  00055	74 07		 je	 SHORT $LN3@GetHFILECR

; 161  : 		{
; 162  : 
; 163  : 			UnmapViewOfFile(lpMapData);

  00057	56		 push	 esi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnmapViewOfFile@4
$LN3@GetHFILECR:

; 164  : 		}
; 165  : 
; 166  : 		CloseHandle(hFM);

  0005e	57		 push	 edi
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00065	5f		 pop	 edi

; 167  : 	}
; 168  : 
; 169  : 	return dwRetCRC32;
; 170  : }

  00066	5e		 pop	 esi
  00067	8b c3		 mov	 eax, ebx
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN5@GetHFILECR:
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	33 c0		 xor	 eax, eax
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?GetHFILECRC32@@YAKPAX@Z ENDP				; GetHFILECRC32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
;	COMDAT ?GetCaseCRC32@@YAKPBDI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?GetCaseCRC32@@YAKPBDI@Z PROC				; GetCaseCRC32, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 98   :     DWORD crc = 0xffffffff;
; 99   : 
; 100  :     if (16 <= len)

  00005	8b 75 08	 mov	 esi, DWORD PTR _buf$[ebp]
  00008	83 c8 ff	 or	 eax, -1
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  0000f	83 ff 10	 cmp	 edi, 16			; 00000010H
  00012	0f 82 1e 02 00
	00		 jb	 $LN3@GetCaseCRC
$LL4@GetCaseCRC:

; 101  :     {
; 102  :         do
; 103  :         {
; 104  :             DO16CI(buf, 0);

  00018	8a 1e		 mov	 bl, BYTE PTR [esi]
  0001a	0f be d3	 movsx	 edx, bl
  0001d	80 eb 61	 sub	 bl, 97			; 00000061H
  00020	80 fb 19	 cmp	 bl, 25			; 00000019H
  00023	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]
  00026	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00029	0f 47 ca	 cmova	 ecx, edx
  0002c	0f be d3	 movsx	 edx, bl
  0002f	33 c8		 xor	 ecx, eax
  00031	80 eb 61	 sub	 bl, 97			; 00000061H
  00034	0f b6 c9	 movzx	 ecx, cl
  00037	c1 e8 08	 shr	 eax, 8
  0003a	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00041	80 fb 19	 cmp	 bl, 25			; 00000019H
  00044	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]
  00047	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  0004a	0f 47 ca	 cmova	 ecx, edx
  0004d	0f be d3	 movsx	 edx, bl
  00050	33 c8		 xor	 ecx, eax
  00052	80 eb 61	 sub	 bl, 97			; 00000061H
  00055	0f b6 c9	 movzx	 ecx, cl
  00058	c1 e8 08	 shr	 eax, 8
  0005b	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00062	80 fb 19	 cmp	 bl, 25			; 00000019H
  00065	8a 5e 03	 mov	 bl, BYTE PTR [esi+3]
  00068	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  0006b	0f 47 ca	 cmova	 ecx, edx
  0006e	0f be d3	 movsx	 edx, bl
  00071	33 c8		 xor	 ecx, eax
  00073	80 eb 61	 sub	 bl, 97			; 00000061H
  00076	0f b6 c9	 movzx	 ecx, cl
  00079	c1 e8 08	 shr	 eax, 8
  0007c	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00083	80 fb 19	 cmp	 bl, 25			; 00000019H
  00086	8a 5e 04	 mov	 bl, BYTE PTR [esi+4]
  00089	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  0008c	0f 47 ca	 cmova	 ecx, edx
  0008f	0f be d3	 movsx	 edx, bl
  00092	33 c8		 xor	 ecx, eax
  00094	80 eb 61	 sub	 bl, 97			; 00000061H
  00097	0f b6 c9	 movzx	 ecx, cl
  0009a	c1 e8 08	 shr	 eax, 8
  0009d	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  000a4	80 fb 19	 cmp	 bl, 25			; 00000019H
  000a7	8a 5e 05	 mov	 bl, BYTE PTR [esi+5]
  000aa	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  000ad	0f 47 ca	 cmova	 ecx, edx
  000b0	0f be d3	 movsx	 edx, bl
  000b3	33 c8		 xor	 ecx, eax
  000b5	80 eb 61	 sub	 bl, 97			; 00000061H
  000b8	0f b6 c9	 movzx	 ecx, cl
  000bb	c1 e8 08	 shr	 eax, 8
  000be	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  000c5	80 fb 19	 cmp	 bl, 25			; 00000019H
  000c8	8a 5e 06	 mov	 bl, BYTE PTR [esi+6]
  000cb	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  000ce	0f 47 ca	 cmova	 ecx, edx
  000d1	0f be d3	 movsx	 edx, bl
  000d4	33 c8		 xor	 ecx, eax
  000d6	80 eb 61	 sub	 bl, 97			; 00000061H
  000d9	0f b6 c9	 movzx	 ecx, cl
  000dc	c1 e8 08	 shr	 eax, 8
  000df	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  000e6	80 fb 19	 cmp	 bl, 25			; 00000019H
  000e9	8a 5e 07	 mov	 bl, BYTE PTR [esi+7]
  000ec	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  000ef	0f 47 ca	 cmova	 ecx, edx
  000f2	0f be d3	 movsx	 edx, bl
  000f5	33 c8		 xor	 ecx, eax
  000f7	80 eb 61	 sub	 bl, 97			; 00000061H
  000fa	0f b6 c9	 movzx	 ecx, cl
  000fd	c1 e8 08	 shr	 eax, 8
  00100	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00107	80 fb 19	 cmp	 bl, 25			; 00000019H
  0010a	8a 5e 08	 mov	 bl, BYTE PTR [esi+8]
  0010d	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00110	0f 47 ca	 cmova	 ecx, edx
  00113	33 c8		 xor	 ecx, eax
  00115	c1 e8 08	 shr	 eax, 8
  00118	0f b6 c9	 movzx	 ecx, cl
  0011b	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00122	0f be d3	 movsx	 edx, bl
  00125	80 eb 61	 sub	 bl, 97			; 00000061H
  00128	80 fb 19	 cmp	 bl, 25			; 00000019H
  0012b	8a 5e 09	 mov	 bl, BYTE PTR [esi+9]
  0012e	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00131	0f 47 ca	 cmova	 ecx, edx
  00134	0f be d3	 movsx	 edx, bl
  00137	33 c8		 xor	 ecx, eax
  00139	80 eb 61	 sub	 bl, 97			; 00000061H
  0013c	0f b6 c9	 movzx	 ecx, cl
  0013f	c1 e8 08	 shr	 eax, 8
  00142	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00149	80 fb 19	 cmp	 bl, 25			; 00000019H
  0014c	8a 5e 0a	 mov	 bl, BYTE PTR [esi+10]
  0014f	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00152	0f 47 ca	 cmova	 ecx, edx
  00155	0f be d3	 movsx	 edx, bl
  00158	33 c8		 xor	 ecx, eax
  0015a	80 eb 61	 sub	 bl, 97			; 00000061H
  0015d	0f b6 c9	 movzx	 ecx, cl
  00160	c1 e8 08	 shr	 eax, 8
  00163	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  0016a	80 fb 19	 cmp	 bl, 25			; 00000019H
  0016d	8a 5e 0b	 mov	 bl, BYTE PTR [esi+11]
  00170	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00173	0f 47 ca	 cmova	 ecx, edx
  00176	0f be d3	 movsx	 edx, bl
  00179	33 c8		 xor	 ecx, eax
  0017b	80 eb 61	 sub	 bl, 97			; 00000061H
  0017e	0f b6 c9	 movzx	 ecx, cl
  00181	c1 e8 08	 shr	 eax, 8
  00184	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  0018b	80 fb 19	 cmp	 bl, 25			; 00000019H
  0018e	8a 5e 0c	 mov	 bl, BYTE PTR [esi+12]
  00191	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00194	0f 47 ca	 cmova	 ecx, edx
  00197	0f be d3	 movsx	 edx, bl
  0019a	33 c8		 xor	 ecx, eax
  0019c	80 eb 61	 sub	 bl, 97			; 00000061H
  0019f	0f b6 c9	 movzx	 ecx, cl
  001a2	c1 e8 08	 shr	 eax, 8
  001a5	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  001ac	80 fb 19	 cmp	 bl, 25			; 00000019H
  001af	8a 5e 0d	 mov	 bl, BYTE PTR [esi+13]
  001b2	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  001b5	0f 47 ca	 cmova	 ecx, edx
  001b8	0f be d3	 movsx	 edx, bl
  001bb	33 c8		 xor	 ecx, eax
  001bd	80 eb 61	 sub	 bl, 97			; 00000061H
  001c0	0f b6 c9	 movzx	 ecx, cl
  001c3	c1 e8 08	 shr	 eax, 8
  001c6	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  001cd	80 fb 19	 cmp	 bl, 25			; 00000019H
  001d0	8a 5e 0e	 mov	 bl, BYTE PTR [esi+14]
  001d3	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  001d6	0f 47 ca	 cmova	 ecx, edx
  001d9	0f be d3	 movsx	 edx, bl
  001dc	33 c8		 xor	 ecx, eax
  001de	80 eb 61	 sub	 bl, 97			; 00000061H
  001e1	0f b6 c9	 movzx	 ecx, cl
  001e4	c1 e8 08	 shr	 eax, 8
  001e7	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  001ee	80 fb 19	 cmp	 bl, 25			; 00000019H
  001f1	8a 5e 0f	 mov	 bl, BYTE PTR [esi+15]
  001f4	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  001f7	0f 47 ca	 cmova	 ecx, edx
  001fa	0f be d3	 movsx	 edx, bl
  001fd	33 c8		 xor	 ecx, eax
  001ff	80 eb 61	 sub	 bl, 97			; 00000061H
  00202	0f b6 c9	 movzx	 ecx, cl
  00205	c1 e8 08	 shr	 eax, 8
  00208	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  0020f	80 fb 19	 cmp	 bl, 25			; 00000019H
  00212	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00215	0f 47 ca	 cmova	 ecx, edx

; 105  : 
; 106  :             buf += 16;

  00218	83 c6 10	 add	 esi, 16			; 00000010H
  0021b	33 c8		 xor	 ecx, eax
  0021d	c1 e8 08	 shr	 eax, 8
  00220	0f b6 c9	 movzx	 ecx, cl
  00223	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]

; 107  :             len -= 16;

  0022a	83 ef 10	 sub	 edi, 16			; 00000010H

; 108  :         } while (len >= 16);

  0022d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00230	0f 83 e2 fd ff
	ff		 jae	 $LL4@GetCaseCRC
$LN3@GetCaseCRC:

; 109  :     }
; 110  : 
; 111  :     if (0 != len)

  00236	85 ff		 test	 edi, edi
  00238	74 2e		 je	 SHORT $LN6@GetCaseCRC
  0023a	66 0f 1f 44 00
	00		 npad	 6
$LL7@GetCaseCRC:

; 112  :     {
; 113  :         do
; 114  :         {
; 115  :             DO1CI(buf, 0);

  00240	8a 1e		 mov	 bl, BYTE PTR [esi]

; 116  : 
; 117  :             ++buf;

  00242	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00245	0f be d3	 movsx	 edx, bl
  00248	80 eb 61	 sub	 bl, 97			; 00000061H
  0024b	80 fb 19	 cmp	 bl, 25			; 00000019H
  0024e	8d 4a e0	 lea	 ecx, DWORD PTR [edx-32]
  00251	0f 47 ca	 cmova	 ecx, edx
  00254	33 c8		 xor	 ecx, eax
  00256	c1 e8 08	 shr	 eax, 8
  00259	0f b6 c9	 movzx	 ecx, cl
  0025c	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]

; 118  :             --len;

  00263	83 ef 01	 sub	 edi, 1

; 119  :         } while (len > 0);

  00266	75 d8		 jne	 SHORT $LL7@GetCaseCRC
$LN6@GetCaseCRC:

; 120  :     }
; 121  : 
; 122  :     crc ^= 0xffffffff;
; 123  :     return crc;

  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	f7 d0		 not	 eax
  0026c	5b		 pop	 ebx

; 124  : }

  0026d	5d		 pop	 ebp
  0026e	c3		 ret	 0
?GetCaseCRC32@@YAKPBDI@Z ENDP				; GetCaseCRC32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CRC32.cpp
;	COMDAT ?GetCRC32@@YAKPBDI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
tv736 = 12						; size = 4
_len$ = 12						; size = 4
?GetCRC32@@YAKPBDI@Z PROC				; GetCRC32, COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   :     DWORD crc = 0xffffffff;
; 60   : 
; 61   :     if (len >= 16)

  00003	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00006	83 c8 ff	 or	 eax, -1
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  0000d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00010	0f 82 7c 00 00
	00		 jb	 $LN3@GetCRC32
  00016	8b cf		 mov	 ecx, edi
  00018	c1 e9 04	 shr	 ecx, 4
  0001b	53		 push	 ebx
  0001c	89 4d 0c	 mov	 DWORD PTR tv736[ebp], ecx
  0001f	56		 push	 esi
$LL4@GetCRC32:

; 62   :     {
; 63   :         do
; 64   :         {
; 65   :             DO16(buf, 0);

  00020	8d 72 02	 lea	 esi, DWORD PTR [edx+2]
  00023	bb 04 00 00 00	 mov	 ebx, 4
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@GetCRC32:
  00030	0f be 4e fe	 movsx	 ecx, BYTE PTR [esi-2]
  00034	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00037	33 c8		 xor	 ecx, eax
  00039	c1 e8 08	 shr	 eax, 8
  0003c	0f b6 c9	 movzx	 ecx, cl
  0003f	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00046	0f be 4e fb	 movsx	 ecx, BYTE PTR [esi-5]
  0004a	33 c8		 xor	 ecx, eax
  0004c	c1 e8 08	 shr	 eax, 8
  0004f	0f b6 c9	 movzx	 ecx, cl
  00052	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  00059	0f be 4e fc	 movsx	 ecx, BYTE PTR [esi-4]
  0005d	33 c8		 xor	 ecx, eax
  0005f	c1 e8 08	 shr	 eax, 8
  00062	0f b6 c9	 movzx	 ecx, cl
  00065	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  0006c	0f be 4e fd	 movsx	 ecx, BYTE PTR [esi-3]
  00070	33 c8		 xor	 ecx, eax
  00072	c1 e8 08	 shr	 eax, 8
  00075	0f b6 c9	 movzx	 ecx, cl
  00078	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]
  0007f	83 eb 01	 sub	 ebx, 1
  00082	75 ac		 jne	 SHORT $LL13@GetCRC32

; 66   : 
; 67   :             buf += 16;

  00084	83 c2 10	 add	 edx, 16			; 00000010H

; 68   :             len -= 16;

  00087	83 ef 10	 sub	 edi, 16			; 00000010H

; 69   :         } while (len >= 16);

  0008a	83 6d 0c 01	 sub	 DWORD PTR tv736[ebp], 1
  0008e	75 90		 jne	 SHORT $LL4@GetCRC32

; 59   :     DWORD crc = 0xffffffff;
; 60   : 
; 61   :     if (len >= 16)

  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
$LN3@GetCRC32:

; 70   :     }
; 71   : 
; 72   :     if (len != 0)

  00092	85 ff		 test	 edi, edi
  00094	74 1a		 je	 SHORT $LN6@GetCRC32
$LL7@GetCRC32:

; 73   :     {
; 74   :         do
; 75   :         {
; 76   :             DO1(buf, 0);

  00096	0f be 0a	 movsx	 ecx, BYTE PTR [edx]

; 77   :             ++buf;

  00099	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0009c	33 c8		 xor	 ecx, eax
  0009e	c1 e8 08	 shr	 eax, 8
  000a1	0f b6 c9	 movzx	 ecx, cl
  000a4	33 04 8d 00 00
	00 00		 xor	 eax, DWORD PTR ?CRCTable@@3PAKA[ecx*4]

; 78   :             --len;

  000ab	83 ef 01	 sub	 edi, 1

; 79   :         } while (len > 0);

  000ae	75 e6		 jne	 SHORT $LL7@GetCRC32
$LN6@GetCRC32:

; 80   :     }
; 81   : 
; 82   : 	crc ^= 0xffffffff;

  000b0	f7 d0		 not	 eax

; 83   : 	return crc;

  000b2	5f		 pop	 edi

; 84   : }

  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?GetCRC32@@YAKPBDI@Z ENDP				; GetCRC32
_TEXT	ENDS
END
