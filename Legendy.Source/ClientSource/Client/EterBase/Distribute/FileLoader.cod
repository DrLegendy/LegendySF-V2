; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??0CMemoryTextFileLoader@@QAE@XZ		; CMemoryTextFileLoader::CMemoryTextFileLoader
PUBLIC	??1CMemoryTextFileLoader@@UAE@XZ		; CMemoryTextFileLoader::~CMemoryTextFileLoader
PUBLIC	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z		; CMemoryTextFileLoader::Bind
PUBLIC	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ	; CMemoryTextFileLoader::GetLineCount
PUBLIC	?CheckLineIndex@CMemoryTextFileLoader@@QAE_NK@Z	; CMemoryTextFileLoader::CheckLineIndex
PUBLIC	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
PUBLIC	?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine2
PUBLIC	?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CMemoryTextFileLoader::SplitLineByTab
PUBLIC	?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??_GCMemoryTextFileLoader@@UAEPAXI@Z		; CMemoryTextFileLoader::`scalar deleting destructor'
PUBLIC	??0CMemoryFileLoader@@QAE@HPBX@Z		; CMemoryFileLoader::CMemoryFileLoader
PUBLIC	??1CMemoryFileLoader@@UAE@XZ			; CMemoryFileLoader::~CMemoryFileLoader
PUBLIC	?Read@CMemoryFileLoader@@QAE_NHPAX@Z		; CMemoryFileLoader::Read
PUBLIC	?GetPosition@CMemoryFileLoader@@QAEHXZ		; CMemoryFileLoader::GetPosition
PUBLIC	?GetSize@CMemoryFileLoader@@QAEHXZ		; CMemoryFileLoader::GetSize
PUBLIC	?IsReadableSize@CMemoryFileLoader@@IAE_NH@Z	; CMemoryFileLoader::IsReadableSize
PUBLIC	?GetCurrentPositionPointer@CMemoryFileLoader@@IAEPBDXZ ; CMemoryFileLoader::GetCurrentPositionPointer
PUBLIC	??_GCMemoryFileLoader@@UAEPAXI@Z		; CMemoryFileLoader::`scalar deleting destructor'
PUBLIC	??0CDiskFileLoader@@QAE@XZ			; CDiskFileLoader::CDiskFileLoader
PUBLIC	??1CDiskFileLoader@@UAE@XZ			; CDiskFileLoader::~CDiskFileLoader
PUBLIC	?Close@CDiskFileLoader@@QAEXXZ			; CDiskFileLoader::Close
PUBLIC	?Open@CDiskFileLoader@@QAE_NPBD@Z		; CDiskFileLoader::Open
PUBLIC	?Read@CDiskFileLoader@@QAE_NHPAX@Z		; CDiskFileLoader::Read
PUBLIC	?GetSize@CDiskFileLoader@@QAEHXZ		; CDiskFileLoader::GetSize
PUBLIC	?Initialize@CDiskFileLoader@@IAEXXZ		; CDiskFileLoader::Initialize
PUBLIC	??_GCDiskFileLoader@@UAEPAXI@Z			; CDiskFileLoader::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CMemoryTextFileLoader@@6B@			; CMemoryTextFileLoader::`vftable'
PUBLIC	??_7CMemoryFileLoader@@6B@			; CMemoryFileLoader::`vftable'
PUBLIC	??_7CDiskFileLoader@@6B@			; CDiskFileLoader::`vftable'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CMemoryTextFileLoader@@6B@			; CMemoryTextFileLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMemoryTextFileLoader@@@8		; CMemoryTextFileLoader `RTTI Type Descriptor'
PUBLIC	??_R3CMemoryTextFileLoader@@8			; CMemoryTextFileLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMemoryTextFileLoader@@8			; CMemoryTextFileLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMemoryTextFileLoader@@8		; CMemoryTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CMemoryFileLoader@@6B@			; CMemoryFileLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMemoryFileLoader@@@8			; CMemoryFileLoader `RTTI Type Descriptor'
PUBLIC	??_R3CMemoryFileLoader@@8			; CMemoryFileLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMemoryFileLoader@@8			; CMemoryFileLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMemoryFileLoader@@8		; CMemoryFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDiskFileLoader@@6B@			; CDiskFileLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDiskFileLoader@@@8			; CDiskFileLoader `RTTI Type Descriptor'
PUBLIC	??_R3CDiskFileLoader@@8				; CDiskFileLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDiskFileLoader@@8				; CDiskFileLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDiskFileLoader@@8		; CDiskFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_ECMemoryTextFileLoader@@UAEPAXI@Z:PROC	; CMemoryTextFileLoader::`vector deleting destructor'
EXTRN	??_ECMemoryFileLoader@@UAEPAXI@Z:PROC		; CMemoryFileLoader::`vector deleting destructor'
EXTRN	??_ECDiskFileLoader@@UAEPAXI@Z:PROC		; CDiskFileLoader::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDiskFileLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDiskFileLoader@@8 DD FLAT:??_R0?AVCDiskFileLoader@@@8 ; CDiskFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDiskFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CDiskFileLoader@@8
rdata$r	SEGMENT
??_R2CDiskFileLoader@@8 DD FLAT:??_R1A@?0A@EA@CDiskFileLoader@@8 ; CDiskFileLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDiskFileLoader@@8
rdata$r	SEGMENT
??_R3CDiskFileLoader@@8 DD 00H				; CDiskFileLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDiskFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDiskFileLoader@@@8
data$r	SEGMENT
??_R0?AVCDiskFileLoader@@@8 DD FLAT:??_7type_info@@6B@	; CDiskFileLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDiskFileLoader@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDiskFileLoader@@6B@
rdata$r	SEGMENT
??_R4CDiskFileLoader@@6B@ DD 00H			; CDiskFileLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDiskFileLoader@@@8
	DD	FLAT:??_R3CDiskFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMemoryFileLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMemoryFileLoader@@8 DD FLAT:??_R0?AVCMemoryFileLoader@@@8 ; CMemoryFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMemoryFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CMemoryFileLoader@@8
rdata$r	SEGMENT
??_R2CMemoryFileLoader@@8 DD FLAT:??_R1A@?0A@EA@CMemoryFileLoader@@8 ; CMemoryFileLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMemoryFileLoader@@8
rdata$r	SEGMENT
??_R3CMemoryFileLoader@@8 DD 00H			; CMemoryFileLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMemoryFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMemoryFileLoader@@@8
data$r	SEGMENT
??_R0?AVCMemoryFileLoader@@@8 DD FLAT:??_7type_info@@6B@ ; CMemoryFileLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMemoryFileLoader@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMemoryFileLoader@@6B@
rdata$r	SEGMENT
??_R4CMemoryFileLoader@@6B@ DD 00H			; CMemoryFileLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMemoryFileLoader@@@8
	DD	FLAT:??_R3CMemoryFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMemoryTextFileLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMemoryTextFileLoader@@8 DD FLAT:??_R0?AVCMemoryTextFileLoader@@@8 ; CMemoryTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMemoryTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CMemoryTextFileLoader@@8
rdata$r	SEGMENT
??_R2CMemoryTextFileLoader@@8 DD FLAT:??_R1A@?0A@EA@CMemoryTextFileLoader@@8 ; CMemoryTextFileLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMemoryTextFileLoader@@8
rdata$r	SEGMENT
??_R3CMemoryTextFileLoader@@8 DD 00H			; CMemoryTextFileLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMemoryTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMemoryTextFileLoader@@@8
data$r	SEGMENT
??_R0?AVCMemoryTextFileLoader@@@8 DD FLAT:??_7type_info@@6B@ ; CMemoryTextFileLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMemoryTextFileLoader@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMemoryTextFileLoader@@6B@
rdata$r	SEGMENT
??_R4CMemoryTextFileLoader@@6B@ DD 00H			; CMemoryTextFileLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMemoryTextFileLoader@@@8
	DD	FLAT:??_R3CMemoryTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CDiskFileLoader@@6B@
CONST	SEGMENT
??_7CDiskFileLoader@@6B@ DD FLAT:??_R4CDiskFileLoader@@6B@ ; CDiskFileLoader::`vftable'
	DD	FLAT:??_ECDiskFileLoader@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CMemoryFileLoader@@6B@
CONST	SEGMENT
??_7CMemoryFileLoader@@6B@ DD FLAT:??_R4CMemoryFileLoader@@6B@ ; CMemoryFileLoader::`vftable'
	DD	FLAT:??_ECMemoryFileLoader@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CMemoryTextFileLoader@@6B@
CONST	SEGMENT
??_7CMemoryTextFileLoader@@6B@ DD FLAT:??_R4CMemoryTextFileLoader@@6B@ ; CMemoryTextFileLoader::`vftable'
	DD	FLAT:??_ECMemoryTextFileLoader@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
__ehfuncinfo$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$1
__ehfuncinfo$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$1
__ehfuncinfo$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z$0
__ehfuncinfo$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 49		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00027	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0002f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00032	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00035	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0003a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003f	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00042	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00049	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00050	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00053	83 c0 18	 add	 eax, 24			; 00000018H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	3b c2		 cmp	 eax, edx
  00058	75 c6		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0005a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0005d	56		 push	 esi
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 2d		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 0c		 jb	 SHORT $LN15@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00021	83 c4 08	 add	 esp, 8
$LN15@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	3b f7		 cmp	 esi, edi
  0003a	75 d4		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0003c	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Newvec$ = -40						; size = 4
_this$ = -36						; size = 4
tv296 = -32						; size = 4
__Oldsize$1$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
__Constructed_last$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d dc	 mov	 DWORD PTR _this$[ebp], edi

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx
  00061	89 45 e4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00064	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00069	0f 84 f5 00 00
	00		 je	 $LN37@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00072	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	2b ce		 sub	 ecx, esi
  00077	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007c	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0007e	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 02	 sar	 edx, 2
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 07		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00097	8b f3		 mov	 esi, ebx
  00099	89 5d e8	 mov	 DWORD PTR __Newcapacity$[ebp], ebx
  0009c	eb 0b		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009e	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000a1	3b f3		 cmp	 esi, ebx
  000a3	0f 42 f3	 cmovb	 esi, ebx
  000a6	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000af	0f 87 b4 00 00
	00		 ja	 $LN38@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000b8	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000c1	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 748  :         _TRY_BEGIN

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ca	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000cd	83 c4 04	 add	 esp, 4
  000d0	89 5d d8	 mov	 DWORD PTR __Newvec$[ebp], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d3	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000d6	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000d9	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  000dc	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  000df	89 4d e0	 mov	 DWORD PTR tv296[ebp], ecx
  000e2	89 45 ec	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ea	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ed	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000f0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f2	3b d0		 cmp	 edx, eax
  000f4	75 04		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f6	8b d3		 mov	 edx, ebx

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  000f8	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000fa	57		 push	 edi
  000fb	53		 push	 ebx
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00103	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00106	83 c4 10	 add	 esp, 16			; 00000010H
  00109	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010c	8b 55 ec	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0010f	57		 push	 edi
  00110	52		 push	 edx
  00111	50		 push	 eax
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00118	8b 4d e4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	41		 inc	 ecx
  0011f	56		 push	 esi
  00120	51		 push	 ecx
  00121	53		 push	 ebx
  00122	8b cf		 mov	 ecx, edi
  00124	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00129	8b 45 e0	 mov	 eax, DWORD PTR tv296[ebp]

; 767  :     }

  0012c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00136	59		 pop	 ecx
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00140	8b 45 ec	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00143	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	50		 push	 eax
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0014d	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  00150	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	ff 75 d8	 push	 DWORD PTR __Newvec$[ebp]
  00156	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 762  :         _RERAISE;

  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Emplace_re:

; 738  :             _Xlength();

  00164	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN38@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00169	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Emplace_re:
  0016e	cc		 int	 3
  0016f	cc		 int	 3
  00170	cc		 int	 3
  00171	cc		 int	 3
  00172	cc		 int	 3
  00173	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Newvec$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 37		 mov	 esi, DWORD PTR [edi]
  00015	2b d6		 sub	 edx, esi

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b da		 mov	 ebx, edx
  00037	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0003a	03 da		 add	 ebx, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0003c	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00042	0f 84 d6 00 00
	00		 je	 $LN49@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	2b ce		 sub	 ecx, esi

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00052	43		 inc	 ebx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00055	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005a	c1 fa 02	 sar	 edx, 2
  0005d	8b ca		 mov	 ecx, edx
  0005f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00062	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00064	8b d1		 mov	 edx, ecx
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0006e	8b f3		 mov	 esi, ebx
  00070	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00072	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00075	3b f3		 cmp	 esi, ebx
  00077	0f 42 f3	 cmovb	 esi, ebx
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007a	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00080	0f 87 9d 00 00
	00		 ja	 $LN50@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00086	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00089	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00095	83 c4 04	 add	 esp, 4
  00098	89 45 f8	 mov	 DWORD PTR __Newvec$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0009e	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000a4	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  000ab	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000b2	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000b5	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b8	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  000bb	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  000c0	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000c5	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000cc	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d3	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000d9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000db	39 55 08	 cmp	 DWORD PTR __Whereptr$[ebp], edx
  000de	74 1a		 je	 SHORT $LN5@Emplace_re

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000e0	57		 push	 edi
  000e1	50		 push	 eax
  000e2	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ee	83 c4 10	 add	 esp, 16			; 00000010H
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000f4	83 c0 18	 add	 eax, 24			; 00000018H

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f7	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fa	57		 push	 edi
  000fb	50		 push	 eax
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00103	83 c4 10	 add	 esp, 16			; 00000010H

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00106	8b cf		 mov	 ecx, edi
  00108	56		 push	 esi
  00109	53		 push	 ebx
  0010a	ff 75 f8	 push	 DWORD PTR __Newvec$1$[ebp]
  0010d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx

; 767  :     }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN49@Emplace_re:

; 738  :             _Xlength();

  0011e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN50@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00123	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN47@Emplace_re:
  00128	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDiskFileLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDiskFileLoader@@UAEPAXI@Z PROC			; CDiskFileLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDiskFileLoader@@UAE@XZ ; CDiskFileLoader::~CDiskFileLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCDiskFileLoader@@UAEPAXI@Z ENDP			; CDiskFileLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Initialize@CDiskFileLoader@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CDiskFileLoader@@IAEXXZ PROC		; CDiskFileLoader::Initialize, COMDAT
; _this$ = ecx

; 274  : 	m_fp = NULL;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 275  : 	m_size = 0;

  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 276  : }

  0000e	c3		 ret	 0
?Initialize@CDiskFileLoader@@IAEXXZ ENDP		; CDiskFileLoader::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetSize@CDiskFileLoader@@QAEHXZ
_TEXT	SEGMENT
?GetSize@CDiskFileLoader@@QAEHXZ PROC			; CDiskFileLoader::GetSize, COMDAT
; _this$ = ecx

; 231  : 	return m_size;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 232  : }

  00003	c3		 ret	 0
?GetSize@CDiskFileLoader@@QAEHXZ ENDP			; CDiskFileLoader::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Read@CDiskFileLoader@@QAE_NHPAX@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pvDst$ = 12						; size = 4
?Read@CDiskFileLoader@@QAE_NHPAX@Z PROC			; CDiskFileLoader::Read, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 	assert(m_fp != NULL);
; 237  : 
; 238  : 	int ret = fread(pvDst, size, 1, m_fp);

  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	6a 01		 push	 1
  00008	ff 75 08	 push	 DWORD PTR _size$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _pvDst$[ebp]
  0000e	e8 00 00 00 00	 call	 _fread
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 239  : 
; 240  : 	if (ret <= 0)

  00016	85 c0		 test	 eax, eax
  00018	0f 9f c0	 setg	 al

; 241  : 		return false;
; 242  : 
; 243  : 	return true;
; 244  : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?Read@CDiskFileLoader@@QAE_NHPAX@Z ENDP			; CDiskFileLoader::Read
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Open@CDiskFileLoader@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?Open@CDiskFileLoader@@QAE_NPBD@Z PROC			; CDiskFileLoader::Open, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 248  : 	Close();

  00006	e8 00 00 00 00	 call	 ?Close@CDiskFileLoader@@QAEXXZ ; CDiskFileLoader::Close

; 249  : 
; 250  : 	if (!c_szFileName[0])

  0000b	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  0000e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00011	74 40		 je	 SHORT $LN5@Open

; 251  : 		return false;
; 252  : 
; 253  : 	m_fp = fopen(c_szFileName, "rb");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _fopen
  0001e	83 c4 08	 add	 esp, 8
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 254  : 
; 255  : 	if (!m_fp)

  00024	85 c0		 test	 eax, eax
  00026	74 2b		 je	 SHORT $LN5@Open

; 257  : 
; 258  : 	fseek(m_fp, 0, SEEK_END);

  00028	6a 02		 push	 2
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _fseek

; 259  : 	m_size = ftell(m_fp);

  00032	ff 76 04	 push	 DWORD PTR [esi+4]
  00035	e8 00 00 00 00	 call	 _ftell

; 260  : 	fseek(m_fp, 0, SEEK_SET);

  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	ff 76 04	 push	 DWORD PTR [esi+4]
  00041	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00044	e8 00 00 00 00	 call	 _fseek
  00049	83 c4 1c	 add	 esp, 28			; 0000001cH

; 261  : 	return true;

  0004c	b0 01		 mov	 al, 1
  0004e	5e		 pop	 esi

; 262  : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN5@Open:

; 256  : 		return false;

  00053	32 c0		 xor	 al, al
  00055	5e		 pop	 esi

; 262  : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?Open@CDiskFileLoader@@QAE_NPBD@Z ENDP			; CDiskFileLoader::Open
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Close@CDiskFileLoader@@QAEXXZ
_TEXT	SEGMENT
?Close@CDiskFileLoader@@QAEXXZ PROC			; CDiskFileLoader::Close, COMDAT
; _this$ = ecx

; 265  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 266  : 	if (m_fp)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@Close

; 267  : 		fclose(m_fp);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _fclose
  00010	83 c4 04	 add	 esp, 4
$LN2@Close:

; 268  : 
; 269  : 	Initialize();

  00013	8b ce		 mov	 ecx, esi
  00015	5e		 pop	 esi
  00016	e9 00 00 00 00	 jmp	 ?Initialize@CDiskFileLoader@@IAEXXZ ; CDiskFileLoader::Initialize
?Close@CDiskFileLoader@@QAEXXZ ENDP			; CDiskFileLoader::Close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??1CDiskFileLoader@@UAE@XZ
_TEXT	SEGMENT
??1CDiskFileLoader@@UAE@XZ PROC				; CDiskFileLoader::~CDiskFileLoader, COMDAT
; _this$ = ecx

; 284  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDiskFileLoader@@6B@

; 285  : 	Close();

  00006	e9 00 00 00 00	 jmp	 ?Close@CDiskFileLoader@@QAEXXZ ; CDiskFileLoader::Close
??1CDiskFileLoader@@UAE@XZ ENDP				; CDiskFileLoader::~CDiskFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??0CDiskFileLoader@@QAE@XZ
_TEXT	SEGMENT
??0CDiskFileLoader@@QAE@XZ PROC				; CDiskFileLoader::CDiskFileLoader, COMDAT
; _this$ = ecx

; 279  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDiskFileLoader@@6B@

; 280  : 	Initialize();

  00009	e8 00 00 00 00	 call	 ?Initialize@CDiskFileLoader@@IAEXXZ ; CDiskFileLoader::Initialize

; 281  : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CDiskFileLoader@@QAE@XZ ENDP				; CDiskFileLoader::CDiskFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMemoryFileLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMemoryFileLoader@@UAEPAXI@Z PROC			; CMemoryFileLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMemoryFileLoader@@UAE@XZ ; CMemoryFileLoader::~CMemoryFileLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMemoryFileLoader@@UAEPAXI@Z ENDP			; CMemoryFileLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetCurrentPositionPointer@CMemoryFileLoader@@IAEPBDXZ
_TEXT	SEGMENT
?GetCurrentPositionPointer@CMemoryFileLoader@@IAEPBDXZ PROC ; CMemoryFileLoader::GetCurrentPositionPointer, COMDAT
; _this$ = ecx

; 211  : 	assert(m_pcBase != NULL);
; 212  : 	return (m_pcBase + m_pos);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 213  : }

  00006	c3		 ret	 0
?GetCurrentPositionPointer@CMemoryFileLoader@@IAEPBDXZ ENDP ; CMemoryFileLoader::GetCurrentPositionPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?IsReadableSize@CMemoryFileLoader@@IAE_NH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?IsReadableSize@CMemoryFileLoader@@IAE_NH@Z PROC	; CMemoryFileLoader::IsReadableSize, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	if (m_pos + size > m_size)

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	03 45 08	 add	 eax, DWORD PTR _size$[ebp]
  00009	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0000c	0f 9e c0	 setle	 al

; 194  : 		return false;
; 195  : 
; 196  : 	return true;
; 197  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?IsReadableSize@CMemoryFileLoader@@IAE_NH@Z ENDP	; CMemoryFileLoader::IsReadableSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetSize@CMemoryFileLoader@@QAEHXZ
_TEXT	SEGMENT
?GetSize@CMemoryFileLoader@@QAEHXZ PROC			; CMemoryFileLoader::GetSize, COMDAT
; _this$ = ecx

; 183  : 	return m_size;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 184  : }

  00003	c3		 ret	 0
?GetSize@CMemoryFileLoader@@QAEHXZ ENDP			; CMemoryFileLoader::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetPosition@CMemoryFileLoader@@QAEHXZ
_TEXT	SEGMENT
?GetPosition@CMemoryFileLoader@@QAEHXZ PROC		; CMemoryFileLoader::GetPosition, COMDAT
; _this$ = ecx

; 188  : 	return m_pos;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 189  : }

  00003	c3		 ret	 0
?GetPosition@CMemoryFileLoader@@QAEHXZ ENDP		; CMemoryFileLoader::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Read@CMemoryFileLoader@@QAE_NHPAX@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pvDst$ = 12						; size = 4
?Read@CMemoryFileLoader@@QAE_NHPAX@Z PROC		; CMemoryFileLoader::Read, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 201  : 	if (!IsReadableSize(size))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 ?IsReadableSize@CMemoryFileLoader@@IAE_NH@Z ; CMemoryFileLoader::IsReadableSize
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN2@Read

; 207  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN2@Read:

; 202  : 		return false;
; 203  : 
; 204  : 	memcpy(pvDst, GetCurrentPositionPointer(), size);

  0001a	57		 push	 edi
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetCurrentPositionPointer@CMemoryFileLoader@@IAEPBDXZ ; CMemoryFileLoader::GetCurrentPositionPointer
  00022	50		 push	 eax
  00023	ff 75 0c	 push	 DWORD PTR _pvDst$[ebp]
  00026	e8 00 00 00 00	 call	 _memcpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 205  : 	m_pos += size;
; 206  : 	return true;

  0002e	b0 01		 mov	 al, 1
  00030	01 7e 0c	 add	 DWORD PTR [esi+12], edi
  00033	5f		 pop	 edi

; 207  : }

  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?Read@CMemoryFileLoader@@QAE_NHPAX@Z ENDP		; CMemoryFileLoader::Read
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??1CMemoryFileLoader@@UAE@XZ
_TEXT	SEGMENT
??1CMemoryFileLoader@@UAE@XZ PROC			; CMemoryFileLoader::~CMemoryFileLoader, COMDAT
; _this$ = ecx

; 225  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMemoryFileLoader@@6B@

; 226  : }

  00006	c3		 ret	 0
??1CMemoryFileLoader@@UAE@XZ ENDP			; CMemoryFileLoader::~CMemoryFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??0CMemoryFileLoader@@QAE@HPBX@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_c_pvMemoryFile$ = 12					; size = 4
??0CMemoryFileLoader@@QAE@HPBX@Z PROC			; CMemoryFileLoader::CMemoryFileLoader, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 217  : 	assert(c_pvMemoryFile != NULL);
; 218  : 
; 219  : 	m_pos = 0;
; 220  : 	m_size = size;

  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 221  : 	m_pcBase = (const char *) c_pvMemoryFile;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _c_pvMemoryFile$[ebp]
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 222  : }

  0000f	8b c1		 mov	 eax, ecx
  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMemoryFileLoader@@6B@
  00017	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??0CMemoryFileLoader@@QAE@HPBX@Z ENDP			; CMemoryFileLoader::CMemoryFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMemoryTextFileLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMemoryTextFileLoader@@UAEPAXI@Z PROC		; CMemoryTextFileLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMemoryTextFileLoader@@UAEPAXI@Z ENDP		; CMemoryTextFileLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;
; 1669 :         pointer& _Myfirst = _My_data._Myfirst;
; 1670 :         pointer& _Mylast  = _My_data._Mylast;
; 1671 :         pointer& _Myend   = _My_data._Myend;
; 1672 : 
; 1673 :         _My_data._Orphan_all();
; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 31		 je	 SHORT $LN2@Change_arr

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000c	57		 push	 edi
  0000d	ff 77 04	 push	 DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00020	f7 e9		 imul	 ecx
  00022	c1 fa 02	 sar	 edx, 2
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002f	c1 e0 03	 shl	 eax, 3
  00032	50		 push	 eax
  00033	ff 37		 push	 DWORD PTR [edi]
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1680 :         _Myfirst = _Newvec;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00040	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00043	89 0f		 mov	 DWORD PTR [edi], ecx
  00045	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00048	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0004b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00051	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00054	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00057	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0005a	5f		 pop	 edi

; 1683 :     }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv224 = -4						; size = 4
__Newvec$1$ = 8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00011	2b 17		 sub	 edx, DWORD PTR [edi]
  00013	f7 ea		 imul	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00015	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00018	c1 fa 02	 sar	 edx, 2
  0001b	8b da		 mov	 ebx, edx
  0001d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00020	03 da		 add	 ebx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00022	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00027	77 7a		 ja	 SHORT $LN28@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00030	89 45 fc	 mov	 DWORD PTR tv224[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00033	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00038	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0003a	57		 push	 edi
  0003b	56		 push	 esi
  0003c	ff 77 04	 push	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003f	89 75 08	 mov	 DWORD PTR __Newvec$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00049	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0004b	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0004e	85 c9		 test	 ecx, ecx
  00050	74 35		 je	 SHORT $LN20@Reallocate

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00052	57		 push	 edi
  00053	ff 77 04	 push	 DWORD PTR [edi+4]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005c	8b 37		 mov	 esi, DWORD PTR [edi]
  0005e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00063	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00066	2b ce		 sub	 ecx, esi
  00068	f7 e9		 imul	 ecx
  0006a	c1 fa 02	 sar	 edx, 2
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00074	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00077	c1 e0 03	 shl	 eax, 3
  0007a	50		 push	 eax
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00081	8b 75 08	 mov	 esi, DWORD PTR __Newvec$1$[ebp]
  00084	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00087	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0008a	89 37		 mov	 DWORD PTR [edi], esi
  0008c	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  0008f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00092	8b 45 fc	 mov	 eax, DWORD PTR tv224[ebp]
  00095	03 c6		 add	 eax, esi
  00097	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 1269 :     }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN28@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000a3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN26@Reallocate:
  000a8	cc		 int	 3
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	c1 e0 03	 shl	 eax, 3
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8

; 804  :     }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
_TEXT	SEGMENT
_dwLine$ = 8						; size = 4
?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z PROC ; CMemoryTextFileLoader::GetLineString, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00006	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 142  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ENDP ; CMemoryTextFileLoader::GetLineString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_c_iLineLength$1$ = -316				; size = 4
_pstTokenVector$GSCopy$1$ = -312			; size = 4
__Hay_size$1$ = -308					; size = 4
_dwLine$GSCopy$1$ = -304				; size = 4
_c_rstLine$1$ = -304					; size = 4
_this$GSCopy$1$ = -300					; size = 4
__Result$1$ = -300					; size = 4
__Matches$2 = -296					; size = 256
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwLine$ = 8						; size = 4
_pstTokenVector$ = 12					; size = 4
?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CMemoryTextFileLoader::SplitLineByTab, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 75 0c	 mov	 esi, DWORD PTR _pstTokenVector$[ebp]
  00036	8b 45 08	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00039	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _dwLine$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 14   : {

  00044	89 b5 c8 fe ff
	ff		 mov	 DWORD PTR _pstTokenVector$GSCopy$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004d	8b 3e		 mov	 edi, DWORD PTR [esi]
  0004f	2b cf		 sub	 ecx, edi
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 02	 sar	 edx, 2
  00056	8b c2		 mov	 eax, edx
  00058	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005b	03 c2		 add	 eax, edx

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0005d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00060	73 0b		 jae	 SHORT $LN10@SplitLineB

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00062	6a 0a		 push	 10			; 0000000aH
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
  0006b	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN10@SplitLineB:

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0006d	56		 push	 esi
  0006e	ff 76 04	 push	 DWORD PTR [esi+4]
  00071	57		 push	 edi
  00072	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1390 :         _Mylast = _Myfirst;

  00077	8b 06		 mov	 eax, DWORD PTR [esi]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 18   : 	const std::string & c_rstLine = GetLineString(dwLine);

  0007c	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1390 :         _Mylast = _Myfirst;

  00082	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 18   : 	const std::string & c_rstLine = GetLineString(dwLine);

  00085	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _dwLine$GSCopy$1$[ebp]
  0008b	e8 00 00 00 00	 call	 ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
  00090	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _c_rstLine$1$[ebp], eax

; 19   : 	const int c_iLineLength = c_rstLine.length();

  00096	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00099	89 8d c4 fe ff
	ff		 mov	 DWORD PTR _c_iLineLength$1$[ebp], ecx

; 20   : 
; 21   : 	if (0 == c_iLineLength)

  0009f	85 c9		 test	 ecx, ecx
  000a1	75 1f		 jne	 SHORT $LN5@SplitLineB

; 22   : 		return false;

  000a3	32 c0		 xor	 al, al
$LN1@SplitLineB:

; 36   : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
$LN5@SplitLineB:

; 23   : 
; 24   : 	int basePos = 0;

  000c2	33 ff		 xor	 edi, edi
$LL4@SplitLineB:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000c4	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000c8	8b f0		 mov	 esi, eax
  000ca	89 85 d4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
  000d0	72 08		 jb	 SHORT $LN136@SplitLineB

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000d2	8b 30		 mov	 esi, DWORD PTR [eax]
  000d4	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], esi
$LN136@SplitLineB:

; 3954 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  000da	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dd	89 8d cc fe ff
	ff		 mov	 DWORD PTR __Hay_size$1$[ebp], ecx

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  000e3	3b f9		 cmp	 edi, ecx
  000e5	73 3f		 jae	 SHORT $LN31@SplitLineB
  000e7	68 00 01 00 00	 push	 256			; 00000100H
  000ec	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$2[ebp]
  000f2	6a 00		 push	 0
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memset

; 695  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 696  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,
; 697  :                                                                 // fall back to the serial algorithm
; 698  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 699  :         }
; 700  : 
; 701  :         const auto _End = _Haystack + _Hay_size;

  000fa	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR __Hay_size$1$[ebp]
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00103	c6 85 e1 fe ff
	ff 01		 mov	 BYTE PTR __Matches$2[ebp+9], 1

; 701  :         const auto _End = _Haystack + _Hay_size;

  0010a	8d 14 31	 lea	 edx, DWORD PTR [ecx+esi]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0010d	03 f7		 add	 esi, edi
  0010f	3b f2		 cmp	 esi, edx
  00111	73 13		 jae	 SHORT $LN31@SplitLineB
$LL32@SplitLineB:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00113	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00116	8a 84 05 d8 fe
	ff ff		 mov	 al, BYTE PTR __Matches$2[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  0011d	84 c0		 test	 al, al
  0011f	75 7f		 jne	 SHORT $LN121@SplitLineB

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00121	46		 inc	 esi
  00122	3b f2		 cmp	 esi, edx
  00124	72 ed		 jb	 SHORT $LL32@SplitLineB
$LN31@SplitLineB:

; 705  :             }
; 706  :         }
; 707  :     }
; 708  : 
; 709  :     return static_cast<size_t>(-1); // no match

  00126	83 ce ff	 or	 esi, -1
$LN29@SplitLineB:

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00129	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00130	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00137	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2157 :         if (_Mysize < _Off) {

  0013b	3b cf		 cmp	 ecx, edi
  0013d	0f 82 ab 00 00
	00		 jb	 $LN122@SplitLineB

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  00143	2b cf		 sub	 ecx, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 30   : 		pstTokenVector->push_back(c_rstLine.substr(basePos, beginPos-basePos));

  00145	8b c6		 mov	 eax, esi
  00147	2b c7		 sub	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  00149	3b c8		 cmp	 ecx, eax
  0014b	0f 42 c1	 cmovb	 eax, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0014e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _c_rstLine$1$[ebp]
  00154	8b d1		 mov	 edx, ecx

; 2145 :         if (_Large_string_engaged()) {

  00156	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0015a	72 02		 jb	 SHORT $LN135@SplitLineB

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0015c	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN135@SplitLineB:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0015e	50		 push	 eax
  0015f	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00162	50		 push	 eax
  00163	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00166	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0016b	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 30   : 		pstTokenVector->push_back(c_rstLine.substr(basePos, beginPos-basePos));

  00171	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00178	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0017b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0017e	74 28		 je	 SHORT $LN87@SplitLineB
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00180	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T3[ebp]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00184	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00188	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0018b	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T3[ebp+16]
  00190	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00195	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  0019a	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019e	eb 15		 jmp	 SHORT $LN86@SplitLineB
$LN121@SplitLineB:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  001a0	2b b5 d4 fe ff
	ff		 sub	 esi, DWORD PTR __Result$1$[ebp]
  001a6	eb 81		 jmp	 SHORT $LN29@SplitLineB
$LN87@SplitLineB:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001a8	8d 55 d8	 lea	 edx, DWORD PTR $T3[ebp]
  001ab	52		 push	 edx
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001b2	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+20]
$LN86@SplitLineB:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 30   : 		pstTokenVector->push_back(c_rstLine.substr(basePos, beginPos-basePos));

  001b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001bc	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001bf	72 0d		 jb	 SHORT $LN110@SplitLineB

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001c1	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c2	50		 push	 eax
  001c3	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  001c6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001cb	83 c4 08	 add	 esp, 8
$LN110@SplitLineB:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 32   : 		basePos = beginPos+1;

  001ce	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]

; 33   : 	} while (basePos < c_iLineLength && basePos > 0);

  001d1	3b bd c4 fe ff
	ff		 cmp	 edi, DWORD PTR _c_iLineLength$1$[ebp]
  001d7	7d 0e		 jge	 SHORT $LN6@SplitLineB
  001d9	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _c_rstLine$1$[ebp]
  001df	85 ff		 test	 edi, edi
  001e1	0f 8f dd fe ff
	ff		 jg	 $LL4@SplitLineB
$LN6@SplitLineB:

; 34   : 
; 35   : 	return true;

  001e7	b0 01		 mov	 al, 1
  001e9	e9 b7 fe ff ff	 jmp	 $LN1@SplitLineB
$LN122@SplitLineB:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2158 :             _Xran();

  001ee	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN138@SplitLineB:
  001f3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CMemoryTextFileLoader::SplitLineByTab
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
_TEXT	SEGMENT
_c_rstLine$1$ = -1108					; size = 4
_pstTokenVector$GSCopy$1$ = -1104			; size = 4
_c_szDelimeter$GSCopy$1$ = -1100			; size = 4
__Hay_size$1$ = -1096					; size = 4
__Result$1$ = -1092					; size = 4
_dwLine$GSCopy$1$ = -1092				; size = 4
__Result$1$ = -1092					; size = 4
__Result$1$ = -1092					; size = 4
__Matches$2 = -1088					; size = 256
__Matches$3 = -832					; size = 256
__Matches$4 = -576					; size = 256
__Matches$5 = -320					; size = 256
_stToken$ = -64						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwLine$ = 8						; size = 4
_pstTokenVector$ = 12					; size = 4
_c_szDelimeter$ = 16					; size = 4
?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z PROC ; CMemoryTextFileLoader::SplitLine2, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _pstTokenVector$[ebp]
  00032	8b 45 08	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00035	89 85 bc fb ff
	ff		 mov	 DWORD PTR _dwLine$GSCopy$1$[ebp], eax
  0003b	8b 45 10	 mov	 eax, DWORD PTR _c_szDelimeter$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003e	8b 31		 mov	 esi, DWORD PTR [ecx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 39   : {

  00040	89 85 b4 fb ff
	ff		 mov	 DWORD PTR _c_szDelimeter$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 39   : {

  0004b	89 8d b0 fb ff
	ff		 mov	 DWORD PTR _pstTokenVector$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00051	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00054	2b ce		 sub	 ecx, esi
  00056	f7 e9		 imul	 ecx
  00058	c1 fa 02	 sar	 edx, 2
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00062	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00065	73 17		 jae	 SHORT $LN350@SplitLine2

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00067	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
  0006d	6a 0a		 push	 10			; 0000000aH
  0006f	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
  00074	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
  0007a	8b 30		 mov	 esi, DWORD PTR [eax]
  0007c	eb 06		 jmp	 SHORT $LN16@SplitLine2
$LN350@SplitLine2:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }
; 715  : 
; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee
; 717  :         emplace_back(_Val);
; 718  :     }
; 719  : 
; 720  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee
; 721  :         emplace_back(_STD move(_Val));
; 722  :     }
; 723  : 
; 724  :     template <class... _Valty>
; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {
; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 736  : 
; 737  :         if (_Oldsize == max_size()) {
; 738  :             _Xlength();
; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;
; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);
; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 746  :         pointer _Constructed_first      = _Constructed_last;
; 747  : 
; 748  :         _TRY_BEGIN
; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee
; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;
; 767  :     }
; 768  : 
; 769  :     template <class... _Valty>
; 770  :     iterator emplace(const_iterator _Where, _Valty&&... _Val) { // insert by perfectly forwarding _Val at _Where
; 771  :         const pointer _Whereptr = _Where._Ptr;
; 772  :         auto& _My_data          = _Mypair._Myval2;
; 773  :         const pointer _Oldlast  = _My_data._Mylast;
; 774  : #if _ITERATOR_DEBUG_LEVEL == 2
; 775  :         _STL_VERIFY(
; 776  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 777  :             "vector emplace iterator outside range");
; 778  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 779  : 
; 780  :         if (_Oldlast != _My_data._Myend) {
; 781  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee
; 782  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :             } else {
; 784  :                 auto& _Al = _Getal();
; 785  :                 _Alloc_temporary<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing
; 786  :                 // after constructing _Obj, provide basic guarantee
; 787  :                 _Orphan_range(_Whereptr, _Oldlast);
; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));
; 789  :                 ++_My_data._Mylast;
; 790  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
; 791  :                 *_Whereptr = _STD move(_Obj._Storage._Value);
; 792  :             }
; 793  : 
; 794  :             return _Make_iterator(_Whereptr);
; 795  :         }
; 796  : 
; 797  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));
; 798  :     }
; 799  : 
; 800  :     iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where
; 801  :         return emplace(_Where, _Val);
; 802  :     }
; 803  : 
; 804  :     iterator insert(const_iterator _Where, _Ty&& _Val) { // insert by moving _Val at _Where
; 805  :         return emplace(_Where, _STD move(_Val));
; 806  :     }
; 807  : 
; 808  :     iterator insert(const_iterator _Where, _CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val) {
; 809  :         // insert _Count * _Val at _Where
; 810  :         const pointer _Whereptr = _Where._Ptr;
; 811  : 
; 812  :         auto& _My_data   = _Mypair._Myval2;
; 813  :         pointer& _Mylast = _My_data._Mylast;
; 814  : 
; 815  :         const pointer _Oldfirst = _My_data._Myfirst;
; 816  :         const pointer _Oldlast  = _Mylast;
; 817  : #if _ITERATOR_DEBUG_LEVEL == 2
; 818  :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr,
; 819  :             "vector insert iterator outside range");
; 820  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 821  : 
; 822  :         const auto _Whereoff        = static_cast<size_type>(_Whereptr - _Oldfirst);
; 823  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 824  :         const bool _One_at_back     = _Count == 1 && _Whereptr == _Oldlast;
; 825  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 826  :         } else if (_Count > _Unused_capacity) { // reallocate
; 827  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 828  : 
; 829  :             if (_Count > max_size() - _Oldsize) {
; 830  :                 _Xlength();
; 831  :             }
; 832  : 
; 833  :             const size_type _Newsize     = _Oldsize + _Count;
; 834  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 835  : 
; 836  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 837  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 838  :             pointer _Constructed_first      = _Constructed_last;
; 839  : 
; 840  :             _TRY_BEGIN
; 841  :             _Ufill(_Newvec + _Whereoff, _Count, _Val);
; 842  :             _Constructed_first = _Newvec + _Whereoff;
; 843  : 
; 844  :             if (_One_at_back) { // provide strong guarantee
; 845  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 846  :             } else { // provide basic guarantee
; 847  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 848  :                 _Constructed_first = _Newvec;
; 849  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 850  :             }
; 851  :             _CATCH_ALL
; 852  :             _Destroy(_Constructed_first, _Constructed_last);
; 853  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 854  :             _RERAISE;
; 855  :             _CATCH_END
; 856  : 
; 857  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 858  :         } else if (_One_at_back) { // provide strong guarantee
; 859  :             _Emplace_back_with_unused_capacity(_Val);
; 860  :         } else { // provide basic guarantee
; 861  :             const _Alloc_temporary<_Alty> _Tmp_storage(_Getal(), _Val); // handle aliasing
; 862  :             const auto& _Tmp              = _Tmp_storage._Storage._Value;
; 863  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 864  :             _Orphan_range(_Whereptr, _Oldlast);
; 865  : 
; 866  :             if (_Count > _Affected_elements) { // new stuff spills off end
; 867  :                 _Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
; 868  :                 _Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
; 869  :                 _STD fill(_Whereptr, _Oldlast, _Tmp);
; 870  :             } else { // new stuff can all be assigned
; 871  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 872  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 873  :                 _STD fill(_Whereptr, _Whereptr + _Count, _Tmp);
; 874  :             }
; 875  :         }
; 876  : 
; 877  :         return _Make_iterator_offset(_Whereoff);
; 878  :     }
; 879  : 
; 880  : private:
; 881  :     template <class _Iter>
; 882  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {
; 883  :         // insert input range [_First, _Last) at _Where
; 884  :         if (_First == _Last) {
; 885  :             return; // nothing to do, avoid invalidating iterators
; 886  :         }
; 887  : 
; 888  :         auto& _My_data       = _Mypair._Myval2;
; 889  :         pointer& _Myfirst    = _My_data._Myfirst;
; 890  :         pointer& _Mylast     = _My_data._Mylast;
; 891  :         const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
; 892  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 893  : 
; 894  :         // For one-at-back, provide strong guarantee.
; 895  :         // Otherwise, provide basic guarantee (despite N4659 26.3.11.5 [vector.modifiers]/1).
; 896  :         // Performance note: except for one-at-back, emplace_back()'s strong guarantee is unnecessary here.
; 897  : 
; 898  :         for (; _First != _Last; ++_First) {
; 899  :             emplace_back(*_First);
; 900  :         }
; 901  : 
; 902  :         _Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);
; 903  : 
; 904  :         _STD rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
; 905  :     }
; 906  : 
; 907  :     template <class _Iter>
; 908  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {
; 909  :         // insert forward range [_First, _Last) at _Where
; 910  :         const pointer _Whereptr = _Where._Ptr;
; 911  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 912  : 
; 913  :         auto& _My_data   = _Mypair._Myval2;
; 914  :         pointer& _Mylast = _My_data._Mylast;
; 915  : 
; 916  :         const pointer _Oldfirst     = _My_data._Myfirst;
; 917  :         const pointer _Oldlast      = _Mylast;
; 918  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 919  : 
; 920  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 921  :         } else if (_Count > _Unused_capacity) { // reallocate
; 922  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 923  : 
; 924  :             if (_Count > max_size() - _Oldsize) {
; 925  :                 _Xlength();
; 926  :             }
; 927  : 
; 928  :             const size_type _Newsize     = _Oldsize + _Count;
; 929  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 930  : 
; 931  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 932  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);
; 933  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 934  :             pointer _Constructed_first      = _Constructed_last;
; 935  : 
; 936  :             _TRY_BEGIN
; 937  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);
; 938  :             _Constructed_first = _Newvec + _Whereoff;
; 939  : 
; 940  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee
; 941  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 942  :             } else { // provide basic guarantee
; 943  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 944  :                 _Constructed_first = _Newvec;
; 945  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 946  :             }
; 947  :             _CATCH_ALL
; 948  :             _Destroy(_Constructed_first, _Constructed_last);
; 949  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 950  :             _RERAISE;
; 951  :             _CATCH_END
; 952  : 
; 953  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 954  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 955  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 956  :                  // (For one-at-back, this provides the strong guarantee.)
; 957  : 
; 958  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 959  : 
; 960  :             if (_Count < _Affected_elements) { // some affected elements must be assigned
; 961  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 962  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 963  :                 _Destroy(_Whereptr, _Whereptr + _Count);
; 964  : 
; 965  :                 _TRY_BEGIN
; 966  :                 _Ucopy(_First, _Last, _Whereptr);
; 967  :                 _CATCH_ALL
; 968  :                 // glue the broken pieces back together
; 969  : 
; 970  :                 _TRY_BEGIN
; 971  :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
; 972  :                 _CATCH_ALL
; 973  :                 // vaporize the detached piece
; 974  :                 _Orphan_range(_Whereptr, _Oldlast);
; 975  :                 _Destroy(_Whereptr + _Count, _Mylast);
; 976  :                 _Mylast = _Whereptr;
; 977  :                 _RERAISE;
; 978  :                 _CATCH_END
; 979  : 
; 980  :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 981  :                 _Destroy(_Oldlast, _Mylast);
; 982  :                 _Mylast = _Oldlast;
; 983  :                 _RERAISE;
; 984  :                 _CATCH_END
; 985  :             } else { // affected elements don't overlap before/after
; 986  :                 const pointer _Relocated = _Whereptr + _Count;
; 987  :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);
; 988  :                 _Destroy(_Whereptr, _Oldlast);
; 989  : 
; 990  :                 _TRY_BEGIN
; 991  :                 _Ucopy(_First, _Last, _Whereptr);
; 992  :                 _CATCH_ALL
; 993  :                 // glue the broken pieces back together
; 994  : 
; 995  :                 _TRY_BEGIN
; 996  :                 _Umove(_Relocated, _Mylast, _Whereptr);
; 997  :                 _CATCH_ALL
; 998  :                 // vaporize the detached piece
; 999  :                 _Orphan_range(_Whereptr, _Oldlast);
; 1000 :                 _Destroy(_Relocated, _Mylast);
; 1001 :                 _Mylast = _Whereptr;
; 1002 :                 _RERAISE;
; 1003 :                 _CATCH_END
; 1004 : 
; 1005 :                 _Destroy(_Relocated, _Mylast);
; 1006 :                 _Mylast = _Oldlast;
; 1007 :                 _RERAISE;
; 1008 :                 _CATCH_END
; 1009 :             }
; 1010 : 
; 1011 :             _Orphan_range(_Whereptr, _Oldlast);
; 1012 :         }
; 1013 :     }
; 1014 : 
; 1015 : public:
; 1016 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1017 :     iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
; 1018 :         const pointer _Whereptr = _Where._Ptr;
; 1019 :         auto& _My_data          = _Mypair._Myval2;
; 1020 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1021 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1022 :         _STL_VERIFY(
; 1023 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1024 :             "vector insert iterator outside range");
; 1025 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1026 : 
; 1027 :         _Adl_verify_range(_First, _Last);
; 1028 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
; 1029 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1030 :         return _Make_iterator_offset(_Whereoff);
; 1031 :     }
; 1032 : 
; 1033 :     iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
; 1034 :         return insert(_Where, _Ilist.begin(), _Ilist.end());
; 1035 :     }
; 1036 : 
; 1037 :     void assign(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) { // assign _Newsize * _Val
; 1038 :         auto& _My_data    = _Mypair._Myval2;
; 1039 :         pointer& _Myfirst = _My_data._Myfirst;
; 1040 :         pointer& _Mylast  = _My_data._Mylast;
; 1041 : 
; 1042 :         _My_data._Orphan_all();
; 1043 : 
; 1044 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1045 :         if (_Newsize > _Oldsize) {
; 1046 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1047 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1048 :                 _Clear_and_reserve_geometric(_Newsize);
; 1049 :                 _Oldsize = 0;
; 1050 :             } else {
; 1051 :                 _STD fill(_Myfirst, _Mylast, _Val);
; 1052 :             }
; 1053 : 
; 1054 :             _Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
; 1055 :         } else {
; 1056 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1057 :             _STD fill(_Myfirst, _Newlast, _Val);
; 1058 :             _Destroy(_Newlast, _Mylast);
; 1059 :             _Mylast = _Newlast;
; 1060 :         }
; 1061 :     }
; 1062 : 
; 1063 : private:
; 1064 :     template <class _Iter>
; 1065 :     void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) { // assign input range [_First, _Last)
; 1066 :         auto& _My_data    = _Mypair._Myval2;
; 1067 :         pointer& _Myfirst = _My_data._Myfirst;
; 1068 :         pointer& _Mylast  = _My_data._Mylast;
; 1069 : 
; 1070 :         _My_data._Orphan_all();
; 1071 : 
; 1072 :         pointer _Next = _Myfirst;
; 1073 : 
; 1074 :         for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
; 1075 :             *_Next = *_First;
; 1076 :         }
; 1077 : 
; 1078 :         // Code size optimization: we've exhausted only the source, only the dest, or both.
; 1079 :         // If we've exhausted only the source: we Trim, then Append does nothing.
; 1080 :         // If we've exhausted only the dest: Trim does nothing, then we Append.
; 1081 :         // If we've exhausted both: Trim does nothing, then Append does nothing.
; 1082 : 
; 1083 :         // Trim.
; 1084 :         _Destroy(_Next, _Mylast);
; 1085 :         _Mylast = _Next;
; 1086 : 
; 1087 :         // Append.
; 1088 :         for (; _First != _Last; ++_First) {
; 1089 :             emplace_back(*_First); // performance note: emplace_back()'s strong guarantee is unnecessary here
; 1090 :         }
; 1091 :     }
; 1092 : 
; 1093 :     template <class _Iter>
; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)
; 1095 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 1096 :         auto& _My_data      = _Mypair._Myval2;
; 1097 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1098 :         pointer& _Mylast    = _My_data._Mylast;
; 1099 :         pointer& _Myend     = _My_data._Myend;
; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 : #if _HAS_IF_CONSTEXPR
; 1104 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1105 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1106 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1108 :             if (_Newsize > _Oldcapacity) {
; 1109 :                 _Clear_and_reserve_geometric(_Newsize);
; 1110 :             }
; 1111 : 
; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
; 1113 :         } else
; 1114 : #endif // _HAS_IF_CONSTEXPR
; 1115 :         {
; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1117 : 
; 1118 :             if (_Newsize > _Oldsize) {
; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate
; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;
; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1129 :             } else {
; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;
; 1131 :                 _Copy_unchecked(_First, _Last, _Myfirst);
; 1132 :                 _Destroy(_Newlast, _Mylast);
; 1133 :                 _Mylast = _Newlast;
; 1134 :             }
; 1135 :         }
; 1136 :     }
; 1137 : 
; 1138 : public:
; 1139 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1140 :     void assign(_Iter _First, _Iter _Last) {
; 1141 :         _Adl_verify_range(_First, _Last);
; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1143 :     }
; 1144 : 
; 1145 :     void assign(initializer_list<_Ty> _Ilist) {
; 1146 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1147 :     }
; 1148 : 
; 1149 : private:
; 1150 :     void _Copy_assign(const vector& _Right, false_type) {
; 1151 :         _Pocca(_Getal(), _Right._Getal());
; 1152 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1153 :         assign(_Right_data._Myfirst, _Right_data._Mylast);
; 1154 :     }
; 1155 : 
; 1156 :     void _Copy_assign(const vector& _Right, true_type) {
; 1157 :         if (_Getal() != _Right._Getal()) {
; 1158 :             _Tidy();
; 1159 :             _Mypair._Myval2._Reload_proxy(
; 1160 :                 _GET_PROXY_ALLOCATOR(_Alty, _Getal()), _GET_PROXY_ALLOCATOR(_Alty, _Right._Getal()));
; 1161 :         }
; 1162 : 
; 1163 :         _Copy_assign(_Right, false_type{});
; 1164 :     }
; 1165 : 
; 1166 : public:
; 1167 :     vector& operator=(const vector& _Right) {
; 1168 :         if (this != _STD addressof(_Right)) {
; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1170 :         }
; 1171 : 
; 1172 :         return *this;
; 1173 :     }
; 1174 : 
; 1175 :     vector& operator=(initializer_list<_Ty> _Ilist) {
; 1176 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1177 :         return *this;
; 1178 :     }
; 1179 : 
; 1180 : private:
; 1181 :     template <class _Ty2>
; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
; 1183 :         if (_Newsize > max_size()) {
; 1184 :             _Xlength();
; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);
; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1196 :         pointer _Appended_last        = _Appended_first;
; 1197 : 
; 1198 :         _TRY_BEGIN
; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);
; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1204 :         _RERAISE;
; 1205 :         _CATCH_END
; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1208 :     }
; 1209 : 
; 1210 :     template <class _Ty2>
; 1211 :     void _Resize(const size_type _Newsize, const _Ty2& _Val) { // trim or append elements, provide strong guarantee
; 1212 :         auto& _My_data      = _Mypair._Myval2;
; 1213 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1214 :         pointer& _Mylast    = _My_data._Mylast;
; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1216 :         if (_Newsize < _Oldsize) { // trim
; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1218 :             _Orphan_range(_Newlast, _Mylast);
; 1219 :             _Destroy(_Newlast, _Mylast);
; 1220 :             _Mylast = _Newlast;
; 1221 :             return;
; 1222 :         }
; 1223 : 
; 1224 :         if (_Newsize > _Oldsize) { // append
; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1227 :                 _Resize_reallocate(_Newsize, _Val);
; 1228 :                 return;
; 1229 :             }
; 1230 : 
; 1231 :             const pointer _Oldlast = _Mylast;
; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
; 1233 :             _Orphan_range(_Oldlast, _Oldlast);
; 1234 :         }
; 1235 : 
; 1236 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1237 :     }
; 1238 : 
; 1239 : public:
; 1240 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1241 :         // trim or append value-initialized elements, provide strong guarantee
; 1242 :         _Resize(_Newsize, _Value_init_tag{});
; 1243 :     }
; 1244 : 
; 1245 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1246 :         // trim or append copies of _Val, provide strong guarantee
; 1247 :         _Resize(_Newsize, _Val);
; 1248 :     }
; 1249 : 
; 1250 : private:
; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {
; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;
; 1254 :         pointer& _Myfirst = _My_data._Myfirst;
; 1255 :         pointer& _Mylast  = _My_data._Mylast;
; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1258 : 
; 1259 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1260 : 
; 1261 :         _TRY_BEGIN
; 1262 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1263 :         _CATCH_ALL
; 1264 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1265 :         _RERAISE;
; 1266 :         _CATCH_END
; 1267 : 
; 1268 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1269 :     }
; 1270 : 
; 1271 :     void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1272 :         auto& _My_data    = _Mypair._Myval2;
; 1273 :         pointer& _Myfirst = _My_data._Myfirst;
; 1274 :         pointer& _Mylast  = _My_data._Mylast;
; 1275 :         pointer& _Myend   = _My_data._Myend;
; 1276 : 
; 1277 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1278 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1279 :         {
; 1280 :             _Lockit _Lock(_LOCK_DEBUG);
; 1281 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter); // asserts that all iterators are orphaned
; 1282 :         } // unlock
; 1283 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1284 : 
; 1285 :         if (_Newsize > max_size()) {
; 1286 :             _Xlength();
; 1287 :         }
; 1288 : 
; 1289 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1290 : 
; 1291 :         if (_Myfirst) { // destroy and deallocate old array
; 1292 :             _Destroy(_Myfirst, _Mylast);
; 1293 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1294 : 
; 1295 :             _Myfirst = pointer();
; 1296 :             _Mylast  = pointer();
; 1297 :             _Myend   = pointer();
; 1298 :         }
; 1299 : 
; 1300 :         _Buy_raw(_Newcapacity);
; 1301 :     }
; 1302 : 
; 1303 : public:
; 1304 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1305 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0007e	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
$LN16@SplitLine2:

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00084	50		 push	 eax
  00085	ff 70 04	 push	 DWORD PTR [eax+4]
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1390 :         _Mylast = _Myfirst;

  0008e	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00097	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _stToken$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0009e	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _stToken$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000a5	c6 45 c0 00	 mov	 BYTE PTR _stToken$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1390 :         _Mylast = _Myfirst;

  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 44   : 	const std::string & c_rstLine = GetLineString(dwLine);

  000ae	ff b5 bc fb ff
	ff		 push	 DWORD PTR _dwLine$GSCopy$1$[ebp]
  000b4	8b cf		 mov	 ecx, edi
  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000bd	e8 00 00 00 00	 call	 ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
  000c2	8b d0		 mov	 edx, eax

; 45   : 
; 46   : 	DWORD basePos = 0;

  000c4	33 ff		 xor	 edi, edi
  000c6	89 95 ac fb ff
	ff		 mov	 DWORD PTR _c_rstLine$1$[ebp], edx
  000cc	0f 1f 40 00	 npad	 4
$LL4@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d0	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  000d6	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL347@SplitLine2:
  000e0	8a 06		 mov	 al, BYTE PTR [esi]
  000e2	46		 inc	 esi
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL347@SplitLine2
  000e7	2b f1		 sub	 esi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  000e9	89 95 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2145 :         if (_Large_string_engaged()) {

  000ef	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  000f3	72 08		 jb	 SHORT $LN340@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000f5	8b 02		 mov	 eax, DWORD PTR [edx]
  000f7	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN340@SplitLine2:

; 4029 :         return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  000fd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00100	89 85 b8 fb ff
	ff		 mov	 DWORD PTR __Hay_size$1$[ebp], eax

; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00106	3b f8		 cmp	 edi, eax
  00108	73 69		 jae	 SHORT $LN294@SplitLine2
  0010a	68 00 01 00 00	 push	 256			; 00000100H
  0010f	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$5[ebp]
  00115	6a 00		 push	 0
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 _memset

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0011d	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
  00126	8b c8		 mov	 ecx, eax
  00128	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 625  :         for (; _First != _Last; ++_First) {

  0012b	3b c2		 cmp	 eax, edx
  0012d	74 11		 je	 SHORT $LN56@SplitLine2
  0012f	90		 npad	 1
$LL57@SplitLine2:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00130	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00133	41		 inc	 ecx
  00134	c6 84 05 c0 fe
	ff ff 01	 mov	 BYTE PTR __Matches$5[ebp+eax], 1
  0013c	3b ca		 cmp	 ecx, edx
  0013e	75 f0		 jne	 SHORT $LL57@SplitLine2
$LN56@SplitLine2:

; 792  :         const auto _End = _Haystack + _Hay_size;

  00140	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR __Result$1$[ebp]
  00146	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR __Hay_size$1$[ebp]
  0014c	03 ca		 add	 ecx, edx

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0014e	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  00151	3b f1		 cmp	 esi, ecx
  00153	73 1e		 jae	 SHORT $LN294@SplitLine2
  00155	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL47@SplitLine2:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00160	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00163	8a 84 05 c0 fe
	ff ff		 mov	 al, BYTE PTR __Matches$5[ebp+eax]

; 794  :             if (!_Matches._Match(*_Match_try)) {

  0016a	84 c0		 test	 al, al
  0016c	74 25		 je	 SHORT $LN287@SplitLine2

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0016e	46		 inc	 esi
  0016f	3b f1		 cmp	 esi, ecx
  00171	72 ed		 jb	 SHORT $LL47@SplitLine2
$LN294@SplitLine2:
  00173	83 c8 ff	 or	 eax, -1
$LN1@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 80   : }

  00176	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00179	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00180	59		 pop	 ecx
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00186	33 cd		 xor	 ecx, ebp
  00188	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 0c 00	 ret	 12			; 0000000cH
$LN287@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00193	2b f2		 sub	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 52   : 		if (beginPos < 0)

  00195	78 dc		 js	 SHORT $LN294@SplitLine2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00197	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  0019d	8b c2		 mov	 eax, edx

; 2145 :         if (_Large_string_engaged()) {

  0019f	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  001a2	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001a5	72 02		 jb	 SHORT $LN341@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  001a7	8b 02		 mov	 eax, DWORD PTR [edx]
$LN341@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 57   : 		if (c_rstLine[beginPos] == '"')

  001a9	80 3c 06 22	 cmp	 BYTE PTR [esi+eax], 34	; 00000022H
  001ad	75 6a		 jne	 SHORT $LN6@SplitLine2

; 58   : 		{
; 59   : 			++beginPos;

  001af	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  001b0	8b fa		 mov	 edi, edx

; 2145 :         if (_Large_string_engaged()) {

  001b2	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001b5	72 02		 jb	 SHORT $LN342@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  001b7	8b 3a		 mov	 edi, DWORD PTR [edx]
$LN342@SplitLine2:

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  001b9	3b b5 b8 fb ff
	ff		 cmp	 esi, DWORD PTR __Hay_size$1$[ebp]
  001bf	73 42		 jae	 SHORT $LN346@SplitLine2
  001c1	68 00 01 00 00	 push	 256			; 00000100H
  001c6	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR __Matches$4[ebp]
  001cc	6a 00		 push	 0
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 _memset

; 697  :                                                                 // fall back to the serial algorithm
; 698  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 699  :         }
; 700  : 
; 701  :         const auto _End = _Haystack + _Hay_size;

  001d4	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR __Hay_size$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001da	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  001dd	03 d7		 add	 edx, edi

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  001df	c6 85 e2 fd ff
	ff 01		 mov	 BYTE PTR __Matches$4[ebp+34], 1
  001e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001e9	3b ca		 cmp	 ecx, edx
  001eb	73 16		 jae	 SHORT $LN346@SplitLine2
  001ed	0f 1f 00	 npad	 3
$LL99@SplitLine2:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  001f0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  001f3	8a 84 05 c0 fd
	ff ff		 mov	 al, BYTE PTR __Matches$4[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  001fa	84 c0		 test	 al, al
  001fc	75 0f		 jne	 SHORT $LN289@SplitLine2

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001fe	41		 inc	 ecx
  001ff	3b ca		 cmp	 ecx, edx
  00201	72 ed		 jb	 SHORT $LL99@SplitLine2
$LN346@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 63   : 				return -2;

  00203	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00208	e9 69 ff ff ff	 jmp	 $LN1@SplitLine2
$LN289@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0020d	2b cf		 sub	 ecx, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 62   : 			if (endPos < 0)

  0020f	78 f2		 js	 SHORT $LN346@SplitLine2

; 64   : 
; 65   : 			basePos = endPos + 1;

  00211	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 66   : 		}

  00214	e9 a3 00 00 00	 jmp	 $LN7@SplitLine2
$LN6@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00219	8b bd b4 fb ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0021f	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL348@SplitLine2:
  00222	8a 07		 mov	 al, BYTE PTR [edi]
  00224	47		 inc	 edi
  00225	84 c0		 test	 al, al
  00227	75 f9		 jne	 SHORT $LL348@SplitLine2
  00229	2b f9		 sub	 edi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0022b	89 95 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2145 :         if (_Large_string_engaged()) {

  00231	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00235	72 08		 jb	 SHORT $LN343@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00237	8b 02		 mov	 eax, DWORD PTR [edx]
  00239	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN343@SplitLine2:

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0023f	85 ff		 test	 edi, edi
  00241	74 74		 je	 SHORT $LN143@SplitLine2
  00243	3b b5 b8 fb ff
	ff		 cmp	 esi, DWORD PTR __Hay_size$1$[ebp]
  00249	73 6c		 jae	 SHORT $LN143@SplitLine2
  0024b	68 00 01 00 00	 push	 256			; 00000100H
  00250	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  00256	6a 00		 push	 0
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 _memset

; 695  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 696  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0025e	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00264	83 c4 0c	 add	 esp, 12			; 0000000cH
  00267	8b c8		 mov	 ecx, eax
  00269	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  0026c	8b fe		 mov	 edi, esi

; 625  :         for (; _First != _Last; ++_First) {

  0026e	3b c2		 cmp	 eax, edx
  00270	74 10		 je	 SHORT $LN153@SplitLine2
$LL154@SplitLine2:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00272	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00275	41		 inc	 ecx
  00276	c6 84 05 c0 fc
	ff ff 01	 mov	 BYTE PTR __Matches$3[ebp+eax], 1
  0027e	3b ca		 cmp	 ecx, edx
  00280	75 f0		 jne	 SHORT $LL154@SplitLine2
$LN153@SplitLine2:

; 701  :         const auto _End = _Haystack + _Hay_size;

  00282	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR __Result$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00288	03 fa		 add	 edi, edx
  0028a	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR __Hay_size$1$[ebp]
  00290	03 ca		 add	 ecx, edx
  00292	3b f9		 cmp	 edi, ecx
  00294	73 21		 jae	 SHORT $LN143@SplitLine2
  00296	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL144@SplitLine2:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  002a0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  002a3	8a 84 05 c0 fc
	ff ff		 mov	 al, BYTE PTR __Matches$3[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  002aa	84 c0		 test	 al, al
  002ac	0f 85 81 00 00
	00		 jne	 $LN291@SplitLine2

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  002b2	47		 inc	 edi
  002b3	3b f9		 cmp	 edi, ecx
  002b5	72 e9		 jb	 SHORT $LL144@SplitLine2
$LN143@SplitLine2:

; 705  :             }
; 706  :         }
; 707  :     }
; 708  : 
; 709  :     return static_cast<size_t>(-1); // no match

  002b7	83 cf ff	 or	 edi, -1
$LN141@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 69   : 			endPos = c_rstLine.find_first_of(c_szDelimeter, beginPos);

  002ba	8b cf		 mov	 ecx, edi
$LN7@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2157 :         if (_Mysize < _Off) {

  002bc	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR __Hay_size$1$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  002c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002c9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002d0	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0

; 2157 :         if (_Mysize < _Off) {

  002d4	3b c6		 cmp	 eax, esi
  002d6	0f 82 2c 01 00
	00		 jb	 $LN296@SplitLine2

; 2144 :         const value_type* _Result = _Bx._Buf;

  002dc	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e2	2b c6		 sub	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 73   : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  002e4	2b ce		 sub	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e6	3b c1		 cmp	 eax, ecx
  002e8	0f 42 c8	 cmovb	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  002eb	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  002ef	8b c2		 mov	 eax, edx
  002f1	72 02		 jb	 SHORT $LN344@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  002f3	8b 02		 mov	 eax, DWORD PTR [edx]
$LN344@SplitLine2:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  002f5	51		 push	 ecx
  002f6	03 c6		 add	 eax, esi
  002f8	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00301	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 73   : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  00307	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0030b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0030e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00311	74 24		 je	 SHORT $LN199@SplitLine2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00313	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00317	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0031b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0031e	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00323	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00328	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  0032d	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00331	eb 11		 jmp	 SHORT $LN198@SplitLine2
$LN291@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00333	2b fa		 sub	 edi, edx
  00335	eb 83		 jmp	 SHORT $LN141@SplitLine2
$LN199@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00337	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  0033a	52		 push	 edx
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00341	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN198@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 73   : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  00344	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00348	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0034b	72 0d		 jb	 SHORT $LN222@SplitLine2

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0034d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0034e	50		 push	 eax
  0034f	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  00352	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00357	83 c4 08	 add	 esp, 8
$LN222@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0035a	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00360	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL349@SplitLine2:
  00363	8a 06		 mov	 al, BYTE PTR [esi]
  00365	46		 inc	 esi
  00366	84 c0		 test	 al, al
  00368	75 f9		 jne	 SHORT $LL349@SplitLine2
  0036a	2b f1		 sub	 esi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0036c	8b 8d ac fb ff
	ff		 mov	 ecx, DWORD PTR _c_rstLine$1$[ebp]
  00372	89 8d bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00378	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0037c	72 08		 jb	 SHORT $LN339@SplitLine2

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0037e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00380	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN339@SplitLine2:

; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00386	3b 79 10	 cmp	 edi, DWORD PTR [ecx+16]
  00389	73 67		 jae	 SHORT $LN3@SplitLine2
  0038b	68 00 01 00 00	 push	 256			; 00000100H
  00390	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR __Matches$2[ebp]
  00396	6a 00		 push	 0
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 _memset

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0039e	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  003a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a7	8b c8		 mov	 ecx, eax
  003a9	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 625  :         for (; _First != _Last; ++_First) {

  003ac	3b c2		 cmp	 eax, edx
  003ae	74 10		 je	 SHORT $LN249@SplitLine2
$LL250@SplitLine2:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  003b0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  003b3	41		 inc	 ecx
  003b4	c6 84 05 c0 fb
	ff ff 01	 mov	 BYTE PTR __Matches$2[ebp+eax], 1
  003bc	3b ca		 cmp	 ecx, edx
  003be	75 f0		 jne	 SHORT $LL250@SplitLine2
$LN249@SplitLine2:

; 792  :         const auto _End = _Haystack + _Hay_size;

  003c0	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  003c6	8b b5 bc fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  003cc	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  003cf	03 d6		 add	 edx, esi

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  003d1	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  003d4	3b ca		 cmp	 ecx, edx
  003d6	73 1a		 jae	 SHORT $LN3@SplitLine2
  003d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL240@SplitLine2:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  003e0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]

; 794  :             if (!_Matches._Match(*_Match_try)) {

  003e3	80 bc 05 c0 fb
	ff ff 00	 cmp	 BYTE PTR __Matches$2[ebp+eax], 0
  003eb	74 0c		 je	 SHORT $LN293@SplitLine2

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  003ed	41		 inc	 ecx
  003ee	3b ca		 cmp	 ecx, edx
  003f0	72 ee		 jb	 SHORT $LL240@SplitLine2
$LN3@SplitLine2:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 79   : 	return 0;

  003f2	33 c0		 xor	 eax, eax
  003f4	e9 7d fd ff ff	 jmp	 $LN1@SplitLine2
$LN293@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  003f9	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 75   : 		if (int(c_rstLine.find_first_not_of(c_szDelimeter, basePos)) < 0)

  003fb	78 f5		 js	 SHORT $LN3@SplitLine2

; 76   : 			break;
; 77   : 	} while (basePos < c_rstLine.length());

  003fd	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  00403	e9 c8 fc ff ff	 jmp	 $LL4@SplitLine2
$LN296@SplitLine2:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2158 :             _Xran();

  00408	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN352@SplitLine2:
  0040d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _stToken$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a ac fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1108]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ENDP ; CMemoryTextFileLoader::SplitLine2
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
_TEXT	SEGMENT
_c_rstLine$1$ = -1108					; size = 4
_pstTokenVector$GSCopy$1$ = -1104			; size = 4
_c_szDelimeter$GSCopy$1$ = -1100			; size = 4
__Hay_size$1$ = -1096					; size = 4
__Result$1$ = -1092					; size = 4
_dwLine$GSCopy$1$ = -1092				; size = 4
__Result$1$ = -1092					; size = 4
__Result$1$ = -1092					; size = 4
__Matches$2 = -1088					; size = 256
__Matches$3 = -832					; size = 256
__Matches$4 = -576					; size = 256
__Matches$5 = -320					; size = 256
_stToken$ = -64						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwLine$ = 8						; size = 4
_pstTokenVector$ = 12					; size = 4
_c_szDelimeter$ = 16					; size = 4
?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z PROC ; CMemoryTextFileLoader::SplitLine, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _pstTokenVector$[ebp]
  00032	8b 45 08	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00035	89 85 bc fb ff
	ff		 mov	 DWORD PTR _dwLine$GSCopy$1$[ebp], eax
  0003b	8b 45 10	 mov	 eax, DWORD PTR _c_szDelimeter$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003e	8b 31		 mov	 esi, DWORD PTR [ecx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 83   : {

  00040	89 85 b4 fb ff
	ff		 mov	 DWORD PTR _c_szDelimeter$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 83   : {

  0004b	89 8d b0 fb ff
	ff		 mov	 DWORD PTR _pstTokenVector$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00051	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00054	2b ce		 sub	 ecx, esi
  00056	f7 e9		 imul	 ecx
  00058	c1 fa 02	 sar	 edx, 2
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00062	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00065	73 17		 jae	 SHORT $LN350@SplitLine

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00067	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
  0006d	6a 0a		 push	 10			; 0000000aH
  0006f	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
  00074	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
  0007a	8b 30		 mov	 esi, DWORD PTR [eax]
  0007c	eb 06		 jmp	 SHORT $LN16@SplitLine
$LN350@SplitLine:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }
; 715  : 
; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee
; 717  :         emplace_back(_Val);
; 718  :     }
; 719  : 
; 720  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee
; 721  :         emplace_back(_STD move(_Val));
; 722  :     }
; 723  : 
; 724  :     template <class... _Valty>
; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {
; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 736  : 
; 737  :         if (_Oldsize == max_size()) {
; 738  :             _Xlength();
; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;
; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);
; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 746  :         pointer _Constructed_first      = _Constructed_last;
; 747  : 
; 748  :         _TRY_BEGIN
; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee
; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;
; 767  :     }
; 768  : 
; 769  :     template <class... _Valty>
; 770  :     iterator emplace(const_iterator _Where, _Valty&&... _Val) { // insert by perfectly forwarding _Val at _Where
; 771  :         const pointer _Whereptr = _Where._Ptr;
; 772  :         auto& _My_data          = _Mypair._Myval2;
; 773  :         const pointer _Oldlast  = _My_data._Mylast;
; 774  : #if _ITERATOR_DEBUG_LEVEL == 2
; 775  :         _STL_VERIFY(
; 776  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 777  :             "vector emplace iterator outside range");
; 778  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 779  : 
; 780  :         if (_Oldlast != _My_data._Myend) {
; 781  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee
; 782  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :             } else {
; 784  :                 auto& _Al = _Getal();
; 785  :                 _Alloc_temporary<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing
; 786  :                 // after constructing _Obj, provide basic guarantee
; 787  :                 _Orphan_range(_Whereptr, _Oldlast);
; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));
; 789  :                 ++_My_data._Mylast;
; 790  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
; 791  :                 *_Whereptr = _STD move(_Obj._Storage._Value);
; 792  :             }
; 793  : 
; 794  :             return _Make_iterator(_Whereptr);
; 795  :         }
; 796  : 
; 797  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));
; 798  :     }
; 799  : 
; 800  :     iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where
; 801  :         return emplace(_Where, _Val);
; 802  :     }
; 803  : 
; 804  :     iterator insert(const_iterator _Where, _Ty&& _Val) { // insert by moving _Val at _Where
; 805  :         return emplace(_Where, _STD move(_Val));
; 806  :     }
; 807  : 
; 808  :     iterator insert(const_iterator _Where, _CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val) {
; 809  :         // insert _Count * _Val at _Where
; 810  :         const pointer _Whereptr = _Where._Ptr;
; 811  : 
; 812  :         auto& _My_data   = _Mypair._Myval2;
; 813  :         pointer& _Mylast = _My_data._Mylast;
; 814  : 
; 815  :         const pointer _Oldfirst = _My_data._Myfirst;
; 816  :         const pointer _Oldlast  = _Mylast;
; 817  : #if _ITERATOR_DEBUG_LEVEL == 2
; 818  :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr,
; 819  :             "vector insert iterator outside range");
; 820  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 821  : 
; 822  :         const auto _Whereoff        = static_cast<size_type>(_Whereptr - _Oldfirst);
; 823  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 824  :         const bool _One_at_back     = _Count == 1 && _Whereptr == _Oldlast;
; 825  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 826  :         } else if (_Count > _Unused_capacity) { // reallocate
; 827  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 828  : 
; 829  :             if (_Count > max_size() - _Oldsize) {
; 830  :                 _Xlength();
; 831  :             }
; 832  : 
; 833  :             const size_type _Newsize     = _Oldsize + _Count;
; 834  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 835  : 
; 836  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 837  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 838  :             pointer _Constructed_first      = _Constructed_last;
; 839  : 
; 840  :             _TRY_BEGIN
; 841  :             _Ufill(_Newvec + _Whereoff, _Count, _Val);
; 842  :             _Constructed_first = _Newvec + _Whereoff;
; 843  : 
; 844  :             if (_One_at_back) { // provide strong guarantee
; 845  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 846  :             } else { // provide basic guarantee
; 847  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 848  :                 _Constructed_first = _Newvec;
; 849  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 850  :             }
; 851  :             _CATCH_ALL
; 852  :             _Destroy(_Constructed_first, _Constructed_last);
; 853  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 854  :             _RERAISE;
; 855  :             _CATCH_END
; 856  : 
; 857  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 858  :         } else if (_One_at_back) { // provide strong guarantee
; 859  :             _Emplace_back_with_unused_capacity(_Val);
; 860  :         } else { // provide basic guarantee
; 861  :             const _Alloc_temporary<_Alty> _Tmp_storage(_Getal(), _Val); // handle aliasing
; 862  :             const auto& _Tmp              = _Tmp_storage._Storage._Value;
; 863  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 864  :             _Orphan_range(_Whereptr, _Oldlast);
; 865  : 
; 866  :             if (_Count > _Affected_elements) { // new stuff spills off end
; 867  :                 _Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
; 868  :                 _Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
; 869  :                 _STD fill(_Whereptr, _Oldlast, _Tmp);
; 870  :             } else { // new stuff can all be assigned
; 871  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 872  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 873  :                 _STD fill(_Whereptr, _Whereptr + _Count, _Tmp);
; 874  :             }
; 875  :         }
; 876  : 
; 877  :         return _Make_iterator_offset(_Whereoff);
; 878  :     }
; 879  : 
; 880  : private:
; 881  :     template <class _Iter>
; 882  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {
; 883  :         // insert input range [_First, _Last) at _Where
; 884  :         if (_First == _Last) {
; 885  :             return; // nothing to do, avoid invalidating iterators
; 886  :         }
; 887  : 
; 888  :         auto& _My_data       = _Mypair._Myval2;
; 889  :         pointer& _Myfirst    = _My_data._Myfirst;
; 890  :         pointer& _Mylast     = _My_data._Mylast;
; 891  :         const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
; 892  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 893  : 
; 894  :         // For one-at-back, provide strong guarantee.
; 895  :         // Otherwise, provide basic guarantee (despite N4659 26.3.11.5 [vector.modifiers]/1).
; 896  :         // Performance note: except for one-at-back, emplace_back()'s strong guarantee is unnecessary here.
; 897  : 
; 898  :         for (; _First != _Last; ++_First) {
; 899  :             emplace_back(*_First);
; 900  :         }
; 901  : 
; 902  :         _Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);
; 903  : 
; 904  :         _STD rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
; 905  :     }
; 906  : 
; 907  :     template <class _Iter>
; 908  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {
; 909  :         // insert forward range [_First, _Last) at _Where
; 910  :         const pointer _Whereptr = _Where._Ptr;
; 911  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 912  : 
; 913  :         auto& _My_data   = _Mypair._Myval2;
; 914  :         pointer& _Mylast = _My_data._Mylast;
; 915  : 
; 916  :         const pointer _Oldfirst     = _My_data._Myfirst;
; 917  :         const pointer _Oldlast      = _Mylast;
; 918  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 919  : 
; 920  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 921  :         } else if (_Count > _Unused_capacity) { // reallocate
; 922  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 923  : 
; 924  :             if (_Count > max_size() - _Oldsize) {
; 925  :                 _Xlength();
; 926  :             }
; 927  : 
; 928  :             const size_type _Newsize     = _Oldsize + _Count;
; 929  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 930  : 
; 931  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 932  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);
; 933  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 934  :             pointer _Constructed_first      = _Constructed_last;
; 935  : 
; 936  :             _TRY_BEGIN
; 937  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);
; 938  :             _Constructed_first = _Newvec + _Whereoff;
; 939  : 
; 940  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee
; 941  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 942  :             } else { // provide basic guarantee
; 943  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 944  :                 _Constructed_first = _Newvec;
; 945  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 946  :             }
; 947  :             _CATCH_ALL
; 948  :             _Destroy(_Constructed_first, _Constructed_last);
; 949  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 950  :             _RERAISE;
; 951  :             _CATCH_END
; 952  : 
; 953  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 954  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 955  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 956  :                  // (For one-at-back, this provides the strong guarantee.)
; 957  : 
; 958  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 959  : 
; 960  :             if (_Count < _Affected_elements) { // some affected elements must be assigned
; 961  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 962  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 963  :                 _Destroy(_Whereptr, _Whereptr + _Count);
; 964  : 
; 965  :                 _TRY_BEGIN
; 966  :                 _Ucopy(_First, _Last, _Whereptr);
; 967  :                 _CATCH_ALL
; 968  :                 // glue the broken pieces back together
; 969  : 
; 970  :                 _TRY_BEGIN
; 971  :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
; 972  :                 _CATCH_ALL
; 973  :                 // vaporize the detached piece
; 974  :                 _Orphan_range(_Whereptr, _Oldlast);
; 975  :                 _Destroy(_Whereptr + _Count, _Mylast);
; 976  :                 _Mylast = _Whereptr;
; 977  :                 _RERAISE;
; 978  :                 _CATCH_END
; 979  : 
; 980  :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 981  :                 _Destroy(_Oldlast, _Mylast);
; 982  :                 _Mylast = _Oldlast;
; 983  :                 _RERAISE;
; 984  :                 _CATCH_END
; 985  :             } else { // affected elements don't overlap before/after
; 986  :                 const pointer _Relocated = _Whereptr + _Count;
; 987  :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);
; 988  :                 _Destroy(_Whereptr, _Oldlast);
; 989  : 
; 990  :                 _TRY_BEGIN
; 991  :                 _Ucopy(_First, _Last, _Whereptr);
; 992  :                 _CATCH_ALL
; 993  :                 // glue the broken pieces back together
; 994  : 
; 995  :                 _TRY_BEGIN
; 996  :                 _Umove(_Relocated, _Mylast, _Whereptr);
; 997  :                 _CATCH_ALL
; 998  :                 // vaporize the detached piece
; 999  :                 _Orphan_range(_Whereptr, _Oldlast);
; 1000 :                 _Destroy(_Relocated, _Mylast);
; 1001 :                 _Mylast = _Whereptr;
; 1002 :                 _RERAISE;
; 1003 :                 _CATCH_END
; 1004 : 
; 1005 :                 _Destroy(_Relocated, _Mylast);
; 1006 :                 _Mylast = _Oldlast;
; 1007 :                 _RERAISE;
; 1008 :                 _CATCH_END
; 1009 :             }
; 1010 : 
; 1011 :             _Orphan_range(_Whereptr, _Oldlast);
; 1012 :         }
; 1013 :     }
; 1014 : 
; 1015 : public:
; 1016 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1017 :     iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
; 1018 :         const pointer _Whereptr = _Where._Ptr;
; 1019 :         auto& _My_data          = _Mypair._Myval2;
; 1020 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1021 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1022 :         _STL_VERIFY(
; 1023 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1024 :             "vector insert iterator outside range");
; 1025 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1026 : 
; 1027 :         _Adl_verify_range(_First, _Last);
; 1028 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
; 1029 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1030 :         return _Make_iterator_offset(_Whereoff);
; 1031 :     }
; 1032 : 
; 1033 :     iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
; 1034 :         return insert(_Where, _Ilist.begin(), _Ilist.end());
; 1035 :     }
; 1036 : 
; 1037 :     void assign(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) { // assign _Newsize * _Val
; 1038 :         auto& _My_data    = _Mypair._Myval2;
; 1039 :         pointer& _Myfirst = _My_data._Myfirst;
; 1040 :         pointer& _Mylast  = _My_data._Mylast;
; 1041 : 
; 1042 :         _My_data._Orphan_all();
; 1043 : 
; 1044 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1045 :         if (_Newsize > _Oldsize) {
; 1046 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1047 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1048 :                 _Clear_and_reserve_geometric(_Newsize);
; 1049 :                 _Oldsize = 0;
; 1050 :             } else {
; 1051 :                 _STD fill(_Myfirst, _Mylast, _Val);
; 1052 :             }
; 1053 : 
; 1054 :             _Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
; 1055 :         } else {
; 1056 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1057 :             _STD fill(_Myfirst, _Newlast, _Val);
; 1058 :             _Destroy(_Newlast, _Mylast);
; 1059 :             _Mylast = _Newlast;
; 1060 :         }
; 1061 :     }
; 1062 : 
; 1063 : private:
; 1064 :     template <class _Iter>
; 1065 :     void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) { // assign input range [_First, _Last)
; 1066 :         auto& _My_data    = _Mypair._Myval2;
; 1067 :         pointer& _Myfirst = _My_data._Myfirst;
; 1068 :         pointer& _Mylast  = _My_data._Mylast;
; 1069 : 
; 1070 :         _My_data._Orphan_all();
; 1071 : 
; 1072 :         pointer _Next = _Myfirst;
; 1073 : 
; 1074 :         for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
; 1075 :             *_Next = *_First;
; 1076 :         }
; 1077 : 
; 1078 :         // Code size optimization: we've exhausted only the source, only the dest, or both.
; 1079 :         // If we've exhausted only the source: we Trim, then Append does nothing.
; 1080 :         // If we've exhausted only the dest: Trim does nothing, then we Append.
; 1081 :         // If we've exhausted both: Trim does nothing, then Append does nothing.
; 1082 : 
; 1083 :         // Trim.
; 1084 :         _Destroy(_Next, _Mylast);
; 1085 :         _Mylast = _Next;
; 1086 : 
; 1087 :         // Append.
; 1088 :         for (; _First != _Last; ++_First) {
; 1089 :             emplace_back(*_First); // performance note: emplace_back()'s strong guarantee is unnecessary here
; 1090 :         }
; 1091 :     }
; 1092 : 
; 1093 :     template <class _Iter>
; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)
; 1095 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 1096 :         auto& _My_data      = _Mypair._Myval2;
; 1097 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1098 :         pointer& _Mylast    = _My_data._Mylast;
; 1099 :         pointer& _Myend     = _My_data._Myend;
; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 : #if _HAS_IF_CONSTEXPR
; 1104 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1105 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1106 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1108 :             if (_Newsize > _Oldcapacity) {
; 1109 :                 _Clear_and_reserve_geometric(_Newsize);
; 1110 :             }
; 1111 : 
; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
; 1113 :         } else
; 1114 : #endif // _HAS_IF_CONSTEXPR
; 1115 :         {
; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1117 : 
; 1118 :             if (_Newsize > _Oldsize) {
; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate
; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;
; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1129 :             } else {
; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;
; 1131 :                 _Copy_unchecked(_First, _Last, _Myfirst);
; 1132 :                 _Destroy(_Newlast, _Mylast);
; 1133 :                 _Mylast = _Newlast;
; 1134 :             }
; 1135 :         }
; 1136 :     }
; 1137 : 
; 1138 : public:
; 1139 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1140 :     void assign(_Iter _First, _Iter _Last) {
; 1141 :         _Adl_verify_range(_First, _Last);
; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1143 :     }
; 1144 : 
; 1145 :     void assign(initializer_list<_Ty> _Ilist) {
; 1146 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1147 :     }
; 1148 : 
; 1149 : private:
; 1150 :     void _Copy_assign(const vector& _Right, false_type) {
; 1151 :         _Pocca(_Getal(), _Right._Getal());
; 1152 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1153 :         assign(_Right_data._Myfirst, _Right_data._Mylast);
; 1154 :     }
; 1155 : 
; 1156 :     void _Copy_assign(const vector& _Right, true_type) {
; 1157 :         if (_Getal() != _Right._Getal()) {
; 1158 :             _Tidy();
; 1159 :             _Mypair._Myval2._Reload_proxy(
; 1160 :                 _GET_PROXY_ALLOCATOR(_Alty, _Getal()), _GET_PROXY_ALLOCATOR(_Alty, _Right._Getal()));
; 1161 :         }
; 1162 : 
; 1163 :         _Copy_assign(_Right, false_type{});
; 1164 :     }
; 1165 : 
; 1166 : public:
; 1167 :     vector& operator=(const vector& _Right) {
; 1168 :         if (this != _STD addressof(_Right)) {
; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1170 :         }
; 1171 : 
; 1172 :         return *this;
; 1173 :     }
; 1174 : 
; 1175 :     vector& operator=(initializer_list<_Ty> _Ilist) {
; 1176 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1177 :         return *this;
; 1178 :     }
; 1179 : 
; 1180 : private:
; 1181 :     template <class _Ty2>
; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
; 1183 :         if (_Newsize > max_size()) {
; 1184 :             _Xlength();
; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);
; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1196 :         pointer _Appended_last        = _Appended_first;
; 1197 : 
; 1198 :         _TRY_BEGIN
; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);
; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1204 :         _RERAISE;
; 1205 :         _CATCH_END
; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1208 :     }
; 1209 : 
; 1210 :     template <class _Ty2>
; 1211 :     void _Resize(const size_type _Newsize, const _Ty2& _Val) { // trim or append elements, provide strong guarantee
; 1212 :         auto& _My_data      = _Mypair._Myval2;
; 1213 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1214 :         pointer& _Mylast    = _My_data._Mylast;
; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1216 :         if (_Newsize < _Oldsize) { // trim
; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1218 :             _Orphan_range(_Newlast, _Mylast);
; 1219 :             _Destroy(_Newlast, _Mylast);
; 1220 :             _Mylast = _Newlast;
; 1221 :             return;
; 1222 :         }
; 1223 : 
; 1224 :         if (_Newsize > _Oldsize) { // append
; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1227 :                 _Resize_reallocate(_Newsize, _Val);
; 1228 :                 return;
; 1229 :             }
; 1230 : 
; 1231 :             const pointer _Oldlast = _Mylast;
; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
; 1233 :             _Orphan_range(_Oldlast, _Oldlast);
; 1234 :         }
; 1235 : 
; 1236 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1237 :     }
; 1238 : 
; 1239 : public:
; 1240 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1241 :         // trim or append value-initialized elements, provide strong guarantee
; 1242 :         _Resize(_Newsize, _Value_init_tag{});
; 1243 :     }
; 1244 : 
; 1245 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1246 :         // trim or append copies of _Val, provide strong guarantee
; 1247 :         _Resize(_Newsize, _Val);
; 1248 :     }
; 1249 : 
; 1250 : private:
; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {
; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;
; 1254 :         pointer& _Myfirst = _My_data._Myfirst;
; 1255 :         pointer& _Mylast  = _My_data._Mylast;
; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1258 : 
; 1259 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1260 : 
; 1261 :         _TRY_BEGIN
; 1262 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1263 :         _CATCH_ALL
; 1264 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1265 :         _RERAISE;
; 1266 :         _CATCH_END
; 1267 : 
; 1268 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1269 :     }
; 1270 : 
; 1271 :     void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1272 :         auto& _My_data    = _Mypair._Myval2;
; 1273 :         pointer& _Myfirst = _My_data._Myfirst;
; 1274 :         pointer& _Mylast  = _My_data._Mylast;
; 1275 :         pointer& _Myend   = _My_data._Myend;
; 1276 : 
; 1277 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1278 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1279 :         {
; 1280 :             _Lockit _Lock(_LOCK_DEBUG);
; 1281 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter); // asserts that all iterators are orphaned
; 1282 :         } // unlock
; 1283 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1284 : 
; 1285 :         if (_Newsize > max_size()) {
; 1286 :             _Xlength();
; 1287 :         }
; 1288 : 
; 1289 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1290 : 
; 1291 :         if (_Myfirst) { // destroy and deallocate old array
; 1292 :             _Destroy(_Myfirst, _Mylast);
; 1293 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1294 : 
; 1295 :             _Myfirst = pointer();
; 1296 :             _Mylast  = pointer();
; 1297 :             _Myend   = pointer();
; 1298 :         }
; 1299 : 
; 1300 :         _Buy_raw(_Newcapacity);
; 1301 :     }
; 1302 : 
; 1303 : public:
; 1304 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1305 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0007e	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
$LN16@SplitLine:

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00084	50		 push	 eax
  00085	ff 70 04	 push	 DWORD PTR [eax+4]
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1390 :         _Mylast = _Myfirst;

  0008e	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00097	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _stToken$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0009e	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _stToken$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000a5	c6 45 c0 00	 mov	 BYTE PTR _stToken$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1390 :         _Mylast = _Myfirst;

  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 88   : 	const std::string & c_rstLine = GetLineString(dwLine);

  000ae	ff b5 bc fb ff
	ff		 push	 DWORD PTR _dwLine$GSCopy$1$[ebp]
  000b4	8b cf		 mov	 ecx, edi
  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000bd	e8 00 00 00 00	 call	 ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
  000c2	8b d0		 mov	 edx, eax

; 89   : 
; 90   : 	DWORD basePos = 0;

  000c4	33 ff		 xor	 edi, edi
  000c6	89 95 ac fb ff
	ff		 mov	 DWORD PTR _c_rstLine$1$[ebp], edx
  000cc	0f 1f 40 00	 npad	 4
$LL4@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d0	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  000d6	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL347@SplitLine:
  000e0	8a 06		 mov	 al, BYTE PTR [esi]
  000e2	46		 inc	 esi
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL347@SplitLine
  000e7	2b f1		 sub	 esi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  000e9	89 95 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2145 :         if (_Large_string_engaged()) {

  000ef	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  000f3	72 08		 jb	 SHORT $LN340@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000f5	8b 02		 mov	 eax, DWORD PTR [edx]
  000f7	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN340@SplitLine:

; 4029 :         return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  000fd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00100	89 85 b8 fb ff
	ff		 mov	 DWORD PTR __Hay_size$1$[ebp], eax

; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00106	3b f8		 cmp	 edi, eax
  00108	73 69		 jae	 SHORT $LN294@SplitLine
  0010a	68 00 01 00 00	 push	 256			; 00000100H
  0010f	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$5[ebp]
  00115	6a 00		 push	 0
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 _memset

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0011d	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
  00126	8b c8		 mov	 ecx, eax
  00128	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 625  :         for (; _First != _Last; ++_First) {

  0012b	3b c2		 cmp	 eax, edx
  0012d	74 11		 je	 SHORT $LN56@SplitLine
  0012f	90		 npad	 1
$LL57@SplitLine:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00130	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00133	41		 inc	 ecx
  00134	c6 84 05 c0 fe
	ff ff 01	 mov	 BYTE PTR __Matches$5[ebp+eax], 1
  0013c	3b ca		 cmp	 ecx, edx
  0013e	75 f0		 jne	 SHORT $LL57@SplitLine
$LN56@SplitLine:

; 792  :         const auto _End = _Haystack + _Hay_size;

  00140	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR __Result$1$[ebp]
  00146	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR __Hay_size$1$[ebp]

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0014c	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  0014f	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  00152	3b f1		 cmp	 esi, ecx
  00154	73 1d		 jae	 SHORT $LN294@SplitLine
  00156	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL47@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00160	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00163	8a 84 05 c0 fe
	ff ff		 mov	 al, BYTE PTR __Matches$5[ebp+eax]

; 794  :             if (!_Matches._Match(*_Match_try)) {

  0016a	84 c0		 test	 al, al
  0016c	74 24		 je	 SHORT $LN287@SplitLine

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0016e	46		 inc	 esi
  0016f	3b f1		 cmp	 esi, ecx
  00171	72 ed		 jb	 SHORT $LL47@SplitLine
$LN294@SplitLine:
  00173	32 c0		 xor	 al, al
$LN1@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 123  : }

  00175	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00178	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017f	59		 pop	 ecx
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00185	33 cd		 xor	 ecx, ebp
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 0c 00	 ret	 12			; 0000000cH
$LN287@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00192	2b f2		 sub	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 95   : 		if (beginPos < 0)

  00194	78 dd		 js	 SHORT $LN294@SplitLine
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00196	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  0019c	8b c2		 mov	 eax, edx

; 2145 :         if (_Large_string_engaged()) {

  0019e	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  001a1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001a4	72 02		 jb	 SHORT $LN341@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  001a6	8b 02		 mov	 eax, DWORD PTR [edx]
$LN341@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 100  : 		if (c_rstLine[beginPos] == '"')

  001a8	80 3c 06 22	 cmp	 BYTE PTR [esi+eax], 34	; 00000022H
  001ac	75 6a		 jne	 SHORT $LN6@SplitLine

; 101  : 		{
; 102  : 			++beginPos;

  001ae	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  001af	8b fa		 mov	 edi, edx

; 2145 :         if (_Large_string_engaged()) {

  001b1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001b4	72 02		 jb	 SHORT $LN342@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  001b6	8b 3a		 mov	 edi, DWORD PTR [edx]
$LN342@SplitLine:

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  001b8	3b b5 b8 fb ff
	ff		 cmp	 esi, DWORD PTR __Hay_size$1$[ebp]
  001be	73 b3		 jae	 SHORT $LN294@SplitLine
  001c0	68 00 01 00 00	 push	 256			; 00000100H
  001c5	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR __Matches$4[ebp]
  001cb	6a 00		 push	 0
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _memset

; 697  :                                                                 // fall back to the serial algorithm
; 698  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 699  :         }
; 700  : 
; 701  :         const auto _End = _Haystack + _Hay_size;

  001d3	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR __Hay_size$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001d9	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  001df	c6 85 e2 fd ff
	ff 01		 mov	 BYTE PTR __Matches$4[ebp+34], 1

; 701  :         const auto _End = _Haystack + _Hay_size;

  001e6	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001e9	3b ca		 cmp	 ecx, edx
  001eb	73 86		 jae	 SHORT $LN294@SplitLine
  001ed	0f 1f 00	 npad	 3
$LL99@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  001f0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  001f3	8a 84 05 c0 fd
	ff ff		 mov	 al, BYTE PTR __Matches$4[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  001fa	84 c0		 test	 al, al
  001fc	75 0a		 jne	 SHORT $LN289@SplitLine

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001fe	41		 inc	 ecx
  001ff	3b ca		 cmp	 ecx, edx
  00201	72 ed		 jb	 SHORT $LL99@SplitLine
  00203	e9 6b ff ff ff	 jmp	 $LN294@SplitLine
$LN289@SplitLine:

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00208	2b cf		 sub	 ecx, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 105  : 			if (endPos < 0)

  0020a	0f 88 63 ff ff
	ff		 js	 $LN294@SplitLine

; 106  : 				return false;
; 107  : 
; 108  : 			basePos = endPos + 1;

  00210	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 109  : 		}

  00213	e9 a4 00 00 00	 jmp	 $LN7@SplitLine
$LN6@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00218	8b bd b4 fb ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0021e	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL348@SplitLine:
  00221	8a 07		 mov	 al, BYTE PTR [edi]
  00223	47		 inc	 edi
  00224	84 c0		 test	 al, al
  00226	75 f9		 jne	 SHORT $LL348@SplitLine
  00228	2b f9		 sub	 edi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0022a	89 95 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2145 :         if (_Large_string_engaged()) {

  00230	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00234	72 08		 jb	 SHORT $LN343@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00236	8b 02		 mov	 eax, DWORD PTR [edx]
  00238	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN343@SplitLine:

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0023e	85 ff		 test	 edi, edi
  00240	74 75		 je	 SHORT $LN143@SplitLine
  00242	3b b5 b8 fb ff
	ff		 cmp	 esi, DWORD PTR __Hay_size$1$[ebp]
  00248	73 6d		 jae	 SHORT $LN143@SplitLine
  0024a	68 00 01 00 00	 push	 256			; 00000100H
  0024f	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  00255	6a 00		 push	 0
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 _memset

; 695  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 696  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0025d	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	8b c8		 mov	 ecx, eax
  00268	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  0026b	8b fe		 mov	 edi, esi

; 625  :         for (; _First != _Last; ++_First) {

  0026d	3b c2		 cmp	 eax, edx
  0026f	74 10		 je	 SHORT $LN153@SplitLine
$LL154@SplitLine:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00271	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00274	41		 inc	 ecx
  00275	c6 84 05 c0 fc
	ff ff 01	 mov	 BYTE PTR __Matches$3[ebp+eax], 1
  0027d	3b ca		 cmp	 ecx, edx
  0027f	75 f0		 jne	 SHORT $LL154@SplitLine
$LN153@SplitLine:

; 701  :         const auto _End = _Haystack + _Hay_size;

  00281	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR __Result$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00287	03 fa		 add	 edi, edx
  00289	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR __Hay_size$1$[ebp]
  0028f	03 ca		 add	 ecx, edx
  00291	3b f9		 cmp	 edi, ecx
  00293	73 22		 jae	 SHORT $LN143@SplitLine
  00295	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL144@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  002a0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  002a3	8a 84 05 c0 fc
	ff ff		 mov	 al, BYTE PTR __Matches$3[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  002aa	84 c0		 test	 al, al
  002ac	0f 85 81 00 00
	00		 jne	 $LN291@SplitLine

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  002b2	47		 inc	 edi
  002b3	3b f9		 cmp	 edi, ecx
  002b5	72 e9		 jb	 SHORT $LL144@SplitLine
$LN143@SplitLine:

; 705  :             }
; 706  :         }
; 707  :     }
; 708  : 
; 709  :     return static_cast<size_t>(-1); // no match

  002b7	83 cf ff	 or	 edi, -1
$LN141@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 112  : 			endPos = c_rstLine.find_first_of(c_szDelimeter, beginPos);

  002ba	8b cf		 mov	 ecx, edi
$LN7@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2157 :         if (_Mysize < _Off) {

  002bc	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR __Hay_size$1$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  002c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002c9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002d0	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0

; 2157 :         if (_Mysize < _Off) {

  002d4	3b c6		 cmp	 eax, esi
  002d6	0f 82 32 01 00
	00		 jb	 $LN296@SplitLine

; 2144 :         const value_type* _Result = _Bx._Buf;

  002dc	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e2	2b c6		 sub	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 116  : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  002e4	2b ce		 sub	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e6	3b c1		 cmp	 eax, ecx
  002e8	0f 42 c8	 cmovb	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  002eb	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  002ef	8b c2		 mov	 eax, edx
  002f1	72 02		 jb	 SHORT $LN344@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  002f3	8b 02		 mov	 eax, DWORD PTR [edx]
$LN344@SplitLine:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  002f5	51		 push	 ecx
  002f6	03 c6		 add	 eax, esi
  002f8	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00301	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _pstTokenVector$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 116  : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  00307	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0030b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0030e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00311	74 24		 je	 SHORT $LN199@SplitLine
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00313	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00317	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0031b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0031e	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00323	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00328	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  0032d	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00331	eb 11		 jmp	 SHORT $LN198@SplitLine
$LN291@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00333	2b fa		 sub	 edi, edx
  00335	eb 83		 jmp	 SHORT $LN141@SplitLine
$LN199@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00337	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  0033a	52		 push	 edx
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00341	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN198@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 116  : 		pstTokenVector->push_back(c_rstLine.substr(beginPos, endPos - beginPos));

  00344	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00348	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0034b	72 0d		 jb	 SHORT $LN222@SplitLine

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0034d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0034e	50		 push	 eax
  0034f	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  00352	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00357	83 c4 08	 add	 esp, 8
$LN222@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0035a	8b b5 b4 fb ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00360	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL349@SplitLine:
  00363	8a 06		 mov	 al, BYTE PTR [esi]
  00365	46		 inc	 esi
  00366	84 c0		 test	 al, al
  00368	75 f9		 jne	 SHORT $LL349@SplitLine
  0036a	2b f1		 sub	 esi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0036c	8b 8d ac fb ff
	ff		 mov	 ecx, DWORD PTR _c_rstLine$1$[ebp]
  00372	89 8d bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00378	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0037c	72 08		 jb	 SHORT $LN339@SplitLine

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0037e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00380	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN339@SplitLine:

; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00386	3b 79 10	 cmp	 edi, DWORD PTR [ecx+16]
  00389	0f 83 78 00 00
	00		 jae	 $LN3@SplitLine
  0038f	68 00 01 00 00	 push	 256			; 00000100H
  00394	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR __Matches$2[ebp]
  0039a	6a 00		 push	 0
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 _memset

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  003a2	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ab	8b c8		 mov	 ecx, eax
  003ad	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 625  :         for (; _First != _Last; ++_First) {

  003b0	3b c2		 cmp	 eax, edx
  003b2	74 10		 je	 SHORT $LN249@SplitLine
$LL250@SplitLine:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  003b4	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  003b7	41		 inc	 ecx
  003b8	c6 84 05 c0 fb
	ff ff 01	 mov	 BYTE PTR __Matches$2[ebp+eax], 1
  003c0	3b ca		 cmp	 ecx, edx
  003c2	75 f0		 jne	 SHORT $LL250@SplitLine
$LN249@SplitLine:

; 792  :         const auto _End = _Haystack + _Hay_size;

  003c4	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  003ca	8b b5 bc fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  003d0	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  003d3	03 d6		 add	 edx, esi

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  003d5	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  003d8	3b ca		 cmp	 ecx, edx
  003da	73 2b		 jae	 SHORT $LN3@SplitLine
  003dc	0f 1f 40 00	 npad	 4
$LL240@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  003e0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]

; 794  :             if (!_Matches._Match(*_Match_try)) {

  003e3	80 bc 05 c0 fb
	ff ff 00	 cmp	 BYTE PTR __Matches$2[ebp+eax], 0
  003eb	74 0c		 je	 SHORT $LN293@SplitLine

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  003ed	41		 inc	 ecx
  003ee	3b ca		 cmp	 ecx, edx
  003f0	72 ee		 jb	 SHORT $LL240@SplitLine
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 122  : 	return true;

  003f2	b0 01		 mov	 al, 1
  003f4	e9 7c fd ff ff	 jmp	 $LN1@SplitLine
$LN293@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  003f9	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 118  : 		if (int(c_rstLine.find_first_not_of(c_szDelimeter, basePos)) < 0)

  003fb	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _c_rstLine$1$[ebp]
  00401	0f 89 c9 fc ff
	ff		 jns	 $LL4@SplitLine
$LN3@SplitLine:

; 122  : 	return true;

  00407	b0 01		 mov	 al, 1
  00409	e9 67 fd ff ff	 jmp	 $LN1@SplitLine
$LN296@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2158 :             _Xran();

  0040e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN352@SplitLine:
  00413	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _stToken$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a ac fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1108]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ENDP ; CMemoryTextFileLoader::SplitLine
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?CheckLineIndex@CMemoryTextFileLoader@@QAE_NK@Z
_TEXT	SEGMENT
_dwLine$ = 8						; size = 4
?CheckLineIndex@CMemoryTextFileLoader@@QAE_NK@Z PROC	; CMemoryTextFileLoader::CheckLineIndex, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000e	f7 ea		 imul	 edx
  00010	c1 fa 02	 sar	 edx, 2
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 132  : 	if (dwLine >= m_stLineVector.size())

  0001a	39 45 08	 cmp	 DWORD PTR _dwLine$[ebp], eax
  0001d	0f 92 c0	 setb	 al

; 133  : 		return false;
; 134  : 
; 135  : 	return true;
; 136  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?CheckLineIndex@CMemoryTextFileLoader@@QAE_NK@Z ENDP	; CMemoryTextFileLoader::CheckLineIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ
_TEXT	SEGMENT
?GetLineCount@CMemoryTextFileLoader@@QAEKXZ PROC	; CMemoryTextFileLoader::GetLineCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 02	 sar	 edx, 2
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 128  : }

  00017	c3		 ret	 0
?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ENDP	; CMemoryTextFileLoader::GetLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z
_TEXT	SEGMENT
_c_pvBuf$GSCopy$1$ = -68				; size = 4
__Old_capacity$1$ = -64					; size = 4
__New_ptr$2 = -64					; size = 4
__Old_capacity$1$ = -60					; size = 4
__New_ptr$3 = -60					; size = 4
_this$1$ = -56						; size = 4
__New_size$1$ = -52					; size = 4
tv1382 = -52						; size = 4
tv1380 = -52						; size = 4
__New_size$1$ = -52					; size = 4
tv1383 = -48						; size = 4
tv1379 = -48						; size = 4
__Old_size$1$ = -48					; size = 4
__Old_size$1$ = -48					; size = 4
_c$1$ = -41						; size = 1
_stLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_bufSize$ = 8						; size = 4
_c_pvBuf$ = 12						; size = 4
?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z PROC		; CMemoryTextFileLoader::Bind, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _c_pvBuf$[ebp]

; 146  : 	m_stLineVector.reserve(128);

  0002e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00034	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 145  : {

  00036	89 45 bc	 mov	 DWORD PTR _c_pvBuf$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00039	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003e	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 146  : 	m_stLineVector.reserve(128);

  00040	89 75 c8	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0004d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00052	73 0c		 jae	 SHORT $LN15@Bind

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00054	68 80 00 00 00	 push	 128			; 00000080H
  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
$LN15@Bind:

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00060	56		 push	 esi
  00061	ff 76 04	 push	 DWORD PTR [esi+4]
  00064	ff 36		 push	 DWORD PTR [esi]
  00066	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1390 :         _Mylast = _Myfirst;

  0006b	8b d6		 mov	 edx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0006d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stLine$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00074	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00079	c6 45 d8 00	 mov	 BYTE PTR _stLine$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00080	89 75 ec	 mov	 DWORD PTR _stLine$[ebp+20], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1390 :         _Mylast = _Myfirst;

  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 151  : 	int pos = 0;

  00088	33 ff		 xor	 edi, edi
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 	while (pos < bufSize)

  00091	39 7d 08	 cmp	 DWORD PTR _bufSize$[ebp], edi
  00094	0f 8e bb 02 00
	00		 jle	 $LN3@Bind
  0009a	8b 5d d8	 mov	 ebx, DWORD PTR _stLine$[ebp]
  0009d	0f 1f 00	 npad	 3
$LL2@Bind:

; 154  : 	{
; 155  : 		const char c = c_pcBuf[pos++];

  000a0	8b 4d bc	 mov	 ecx, DWORD PTR _c_pvBuf$GSCopy$1$[ebp]
  000a3	8a 04 39	 mov	 al, BYTE PTR [ecx+edi]
  000a6	47		 inc	 edi
  000a7	88 45 d7	 mov	 BYTE PTR _c$1$[ebp], al

; 156  : 
; 157  : 		if ('\n' == c || '\r' == c)

  000aa	3c 0a		 cmp	 al, 10			; 0000000aH
  000ac	0f 84 44 02 00
	00		 je	 $LN6@Bind
  000b2	3c 0d		 cmp	 al, 13			; 0000000dH
  000b4	0f 84 3c 02 00
	00		 je	 $LN6@Bind

; 162  : 
; 163  : 			m_stLineVector.push_back(stLine);
; 164  : 			stLine = "";
; 165  : 		}
; 166  : 		else if (c < 0)

  000ba	84 c0		 test	 al, al
  000bc	0f 89 30 01 00
	00		 jns	 $LN10@Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  000c2	8b 55 e8	 mov	 edx, DWORD PTR _stLine$[ebp+16]
  000c5	8b c6		 mov	 eax, esi
  000c7	2b c2		 sub	 eax, edx
  000c9	89 55 d0	 mov	 DWORD PTR __Old_size$1$[ebp], edx

; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  000cc	83 f8 02	 cmp	 eax, 2
  000cf	72 2f		 jb	 SHORT $LN84@Bind

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  000d1	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 2153 :         return _BUF_SIZE <= _Myres;

  000d4	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  000d7	89 45 e8	 mov	 DWORD PTR _stLine$[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  000da	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000dd	8b 45 bc	 mov	 eax, DWORD PTR _c_pvBuf$GSCopy$1$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  000e0	0f 43 cb	 cmovae	 ecx, ebx

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000e3	66 8b 44 38 ff	 mov	 ax, WORD PTR [eax+edi-1]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 169  : 			++pos;

  000e8	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000e9	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000ed	c6 44 11 02 00	 mov	 BYTE PTR [ecx+edx+2], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 169  : 			++pos;

  000f2	8b 5d d8	 mov	 ebx, DWORD PTR _stLine$[ebp]
  000f5	8b 75 ec	 mov	 esi, DWORD PTR _stLine$[ebp+20]

; 170  : 		}

  000f8	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  000fb	e9 49 02 00 00	 jmp	 $LN62@Bind
$LN84@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00100	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00105	2b c2		 sub	 eax, edx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00107	83 f8 02	 cmp	 eax, 2
  0010a	0f 82 99 02 00
	00		 jb	 $LN181@Bind

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00110	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00113	8b ce		 mov	 ecx, esi

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00115	8b f0		 mov	 esi, eax

; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00117	89 45 cc	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0011a	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  0011d	89 4d c4	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00120	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00126	76 07		 jbe	 SHORT $LN101@Bind

; 4203 :             return _Max;

  00128	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0012d	eb 1e		 jmp	 SHORT $LN100@Bind
$LN101@Bind:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0012f	8b d1		 mov	 edx, ecx
  00131	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00136	d1 ea		 shr	 edx, 1
  00138	2b c2		 sub	 eax, edx
  0013a	3b c8		 cmp	 ecx, eax
  0013c	76 07		 jbe	 SHORT $LN102@Bind

; 4207 :             return _Max;

  0013e	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00143	eb 08		 jmp	 SHORT $LN100@Bind
$LN102@Bind:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00145	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00148	3b f0		 cmp	 esi, eax
  0014a	0f 42 f0	 cmovb	 esi, eax
$LN100@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0014d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  00156	8b 4d cc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00159	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  0015c	89 4d e8	 mov	 DWORD PTR _stLine$[ebp+16], ecx

; 4260 :         _My_data._Myres       = _New_capacity;
; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0015f	8b 4d d0	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00162	89 45 c0	 mov	 DWORD PTR __New_ptr$2[ebp], eax
  00165	89 75 ec	 mov	 DWORD PTR _stLine$[ebp+20], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00168	51		 push	 ecx
  00169	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  0016c	89 55 d0	 mov	 DWORD PTR tv1383[ebp], edx
  0016f	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00172	03 d0		 add	 edx, eax
  00174	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  00178	89 55 cc	 mov	 DWORD PTR tv1382[ebp], edx
  0017b	72 38		 jb	 SHORT $LN95@Bind

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0017d	53		 push	 ebx
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	8b 45 bc	 mov	 eax, DWORD PTR _c_pvBuf$GSCopy$1$[ebp]
  00187	8b 4d d0	 mov	 ecx, DWORD PTR tv1383[ebp]
  0018a	66 8b 44 38 ff	 mov	 ax, WORD PTR [eax+edi-1]
  0018f	66 89 01	 mov	 WORD PTR [ecx], ax

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00192	8b 45 cc	 mov	 eax, DWORD PTR tv1382[ebp]
  00195	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00198	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  0019b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019c	50		 push	 eax
  0019d	53		 push	 ebx
  0019e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  001a3	8b 5d c0	 mov	 ebx, DWORD PTR __New_ptr$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a6	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 170  : 		}

  001a9	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  001ac	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  001ad	89 5d d8	 mov	 DWORD PTR _stLine$[ebp], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 170  : 		}

  001b0	e9 94 01 00 00	 jmp	 $LN62@Bind
$LN95@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  001b5	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _memcpy
  001bf	8b 45 bc	 mov	 eax, DWORD PTR _c_pvBuf$GSCopy$1$[ebp]
  001c2	8b 4d d0	 mov	 ecx, DWORD PTR tv1383[ebp]
  001c5	66 8b 44 38 ff	 mov	 ax, WORD PTR [eax+edi-1]
  001ca	66 89 01	 mov	 WORD PTR [ecx], ax

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001cd	8b 45 cc	 mov	 eax, DWORD PTR tv1382[ebp]
  001d0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001d3	8d 45 c0	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  001d6	50		 push	 eax
  001d7	8d 45 d8	 lea	 eax, DWORD PTR _stLine$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 169  : 			++pos;

  001e0	8b 5d d8	 mov	 ebx, DWORD PTR _stLine$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001e3	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 169  : 			++pos;

  001e6	8b 75 ec	 mov	 esi, DWORD PTR _stLine$[ebp+20]
  001e9	47		 inc	 edi

; 170  : 		}

  001ea	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  001ed	e9 57 01 00 00	 jmp	 $LN62@Bind
$LN10@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  001f2	8b 4d e8	 mov	 ecx, DWORD PTR _stLine$[ebp+16]
  001f5	89 4d d0	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  001f8	3b ce		 cmp	 ecx, esi

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  001fa	73 1f		 jae	 SHORT $LN126@Bind

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  001fc	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2153 :         return _BUF_SIZE <= _Myres;

  001ff	83 fe 10	 cmp	 esi, 16			; 00000010H

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00202	89 45 e8	 mov	 DWORD PTR _stLine$[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00205	8d 45 d8	 lea	 eax, DWORD PTR _stLine$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  00208	0f 43 c3	 cmovae	 eax, ebx

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  0020b	8a 5d d7	 mov	 bl, BYTE PTR _c$1$[ebp]
  0020e	88 1c 08	 mov	 BYTE PTR [eax+ecx], bl

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00211	c6 44 08 01 00	 mov	 BYTE PTR [eax+ecx+1], 0

; 3614 :             return;

  00216	e9 28 01 00 00	 jmp	 $LN189@Bind
$LN126@Bind:

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  0021b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00220	2b c1		 sub	 eax, ecx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00222	83 f8 01	 cmp	 eax, 1
  00225	0f 82 7e 01 00
	00		 jb	 $LN181@Bind

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0022b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  0022e	8b ce		 mov	 ecx, esi

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00230	8b f0		 mov	 esi, eax

; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00232	89 45 cc	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00235	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00238	89 4d c0	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0023b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00241	76 07		 jbe	 SHORT $LN141@Bind

; 4203 :             return _Max;

  00243	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00248	eb 1e		 jmp	 SHORT $LN140@Bind
$LN141@Bind:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0024a	8b d1		 mov	 edx, ecx
  0024c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00251	d1 ea		 shr	 edx, 1
  00253	2b c2		 sub	 eax, edx
  00255	3b c8		 cmp	 ecx, eax
  00257	76 07		 jbe	 SHORT $LN142@Bind

; 4207 :             return _Max;

  00259	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0025e	eb 08		 jmp	 SHORT $LN140@Bind
$LN142@Bind:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00260	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00263	3b f0		 cmp	 esi, eax
  00265	0f 42 f0	 cmovb	 esi, eax
$LN140@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00268	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  00271	8b 4d cc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00274	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  00277	89 4d e8	 mov	 DWORD PTR _stLine$[ebp+16], ecx

; 4260 :         _My_data._Myres       = _New_capacity;
; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0027a	8b 4d d0	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  0027d	89 45 c4	 mov	 DWORD PTR __New_ptr$3[ebp], eax
  00280	89 75 ec	 mov	 DWORD PTR _stLine$[ebp+20], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00283	51		 push	 ecx
  00284	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  00287	89 55 cc	 mov	 DWORD PTR tv1380[ebp], edx
  0028a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0028d	03 d0		 add	 edx, eax
  0028f	83 7d c0 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  00293	89 55 d0	 mov	 DWORD PTR tv1379[ebp], edx
  00296	72 31		 jb	 SHORT $LN135@Bind

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00298	53		 push	 ebx
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0029f	8b 4d cc	 mov	 ecx, DWORD PTR tv1380[ebp]
  002a2	8a 45 d7	 mov	 al, BYTE PTR _c$1$[ebp]
  002a5	88 01		 mov	 BYTE PTR [ecx], al

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  002a7	8b 45 d0	 mov	 eax, DWORD PTR tv1379[ebp]
  002aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  002ad	8b 45 c0	 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  002b0	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b1	50		 push	 eax
  002b2	53		 push	 ebx
  002b3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  002b8	8b 5d c4	 mov	 ebx, DWORD PTR __New_ptr$3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002bb	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4267 :         } else {

  002be	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  002c1	89 5d d8	 mov	 DWORD PTR _stLine$[ebp], ebx
  002c4	e9 80 00 00 00	 jmp	 $LN62@Bind
$LN135@Bind:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002c9	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]
  002cc	51		 push	 ecx
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  002d3	8b 4d cc	 mov	 ecx, DWORD PTR tv1380[ebp]
  002d6	8a 45 d7	 mov	 al, BYTE PTR _c$1$[ebp]
  002d9	88 01		 mov	 BYTE PTR [ecx], al

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  002db	8b 45 d0	 mov	 eax, DWORD PTR tv1379[ebp]
  002de	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  002e1	8d 45 c4	 lea	 eax, DWORD PTR __New_ptr$3[ebp]
  002e4	50		 push	 eax
  002e5	8d 45 d8	 lea	 eax, DWORD PTR _stLine$[ebp]
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  002ee	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  002f1	83 c4 14	 add	 esp, 20			; 00000014H
  002f4	eb 4d		 jmp	 SHORT $LN189@Bind
$LN6@Bind:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 159  : 			if (pos < bufSize)

  002f6	3b 7d 08	 cmp	 edi, DWORD PTR _bufSize$[ebp]
  002f9	7d 0c		 jge	 SHORT $LN8@Bind

; 160  : 				if ('\n' == c_pcBuf[pos] || '\r' == c_pcBuf[pos])

  002fb	8a 04 39	 mov	 al, BYTE PTR [ecx+edi]
  002fe	3c 0a		 cmp	 al, 10			; 0000000aH
  00300	74 04		 je	 SHORT $LN9@Bind
  00302	3c 0d		 cmp	 al, 13			; 0000000dH
  00304	75 01		 jne	 SHORT $LN8@Bind
$LN9@Bind:

; 161  : 					++pos;

  00306	47		 inc	 edi
$LN8@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00307	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0030a	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]
  0030d	51		 push	 ecx
  0030e	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00311	74 10		 je	 SHORT $LN37@Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00313	8b c8		 mov	 ecx, eax
  00315	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  0031a	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0031d	83 42 04 18	 add	 DWORD PTR [edx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00321	eb 0b		 jmp	 SHORT $LN36@Bind
$LN37@Bind:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00323	50		 push	 eax
  00324	8b ca		 mov	 ecx, edx
  00326	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0032b	8b 55 c8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN36@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0032e	83 7d ec 10	 cmp	 DWORD PTR _stLine$[ebp+20], 16 ; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  00332	8d 45 d8	 lea	 eax, DWORD PTR _stLine$[ebp]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00335	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stLine$[ebp+16], 0

; 2136 :         if (_Large_string_engaged()) {

  0033c	0f 43 45 d8	 cmovae	 eax, DWORD PTR _stLine$[ebp]

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00340	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN189@Bind:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 153  : 	while (pos < bufSize)

  00343	8b 75 ec	 mov	 esi, DWORD PTR _stLine$[ebp+20]
  00346	8b 5d d8	 mov	 ebx, DWORD PTR _stLine$[ebp]
$LN62@Bind:
  00349	3b 7d 08	 cmp	 edi, DWORD PTR _bufSize$[ebp]
  0034c	0f 8c 4e fd ff
	ff		 jl	 $LL2@Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4221 :         if (_New_size > max_size()) {

  00352	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
$LN3@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00355	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]
  00358	51		 push	 ecx
  00359	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0035c	74 10		 je	 SHORT $LN163@Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0035e	8b c8		 mov	 ecx, eax
  00360	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00365	8b 75 c8	 mov	 esi, DWORD PTR _this$1$[ebp]
  00368	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0036c	eb 08		 jmp	 SHORT $LN162@Bind
$LN163@Bind:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0036e	50		 push	 eax
  0036f	8b ca		 mov	 ecx, edx
  00371	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
$LN162@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00376	8b 45 ec	 mov	 eax, DWORD PTR _stLine$[ebp+20]
  00379	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0037c	72 0d		 jb	 SHORT $LN173@Bind

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0037e	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0037f	50		 push	 eax
  00380	ff 75 d8	 push	 DWORD PTR _stLine$[ebp]
  00383	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00388	83 c4 08	 add	 esp, 8
$LN173@Bind:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 178  : }

  0038b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0038e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00395	59		 pop	 ecx
  00396	5f		 pop	 edi
  00397	5e		 pop	 esi
  00398	5b		 pop	 ebx
  00399	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039c	33 cd		 xor	 ecx, ebp
  0039e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a3	8b e5		 mov	 esp, ebp
  003a5	5d		 pop	 ebp
  003a6	c2 08 00	 ret	 8
$LN181@Bind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  003a9	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN187@Bind:
  003ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ENDP		; CMemoryTextFileLoader::Bind
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??1CMemoryTextFileLoader@@UAE@XZ
_TEXT	SEGMENT
??1CMemoryTextFileLoader@@UAE@XZ PROC			; CMemoryTextFileLoader::~CMemoryTextFileLoader, COMDAT
; _this$ = ecx

; 10   : {

  00000	57		 push	 edi

; 11   : }

  00001	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMemoryTextFileLoader@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	85 c0		 test	 eax, eax
  0000e	74 45		 je	 SHORT $LN6@CMemoryTex

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00010	57		 push	 edi
  00011	ff 77 04	 push	 DWORD PTR [edi+4]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00022	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00024	f7 e9		 imul	 ecx
  00026	c1 fa 02	 sar	 edx, 2
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00030	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00033	c1 e0 03	 shl	 eax, 3
  00036	50		 push	 eax
  00037	ff 37		 push	 DWORD PTR [edi]
  00039	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0003e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00044	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00047	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1699 :             _Myend   = pointer();

  0004e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN6@CMemoryTex:
  00055	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 11   : }

  00056	c3		 ret	 0
??1CMemoryTextFileLoader@@UAE@XZ ENDP			; CMemoryTextFileLoader::~CMemoryTextFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp
;	COMDAT ??0CMemoryTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMemoryTextFileLoader@@QAE@XZ PROC			; CMemoryTextFileLoader::CMemoryTextFileLoader, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMemoryTextFileLoader@@6B@

; 7    : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\FileLoader.cpp

; 7    : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CMemoryTextFileLoader@@QAE@XZ ENDP			; CMemoryTextFileLoader::CMemoryTextFileLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	5e		 pop	 esi

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2169 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
