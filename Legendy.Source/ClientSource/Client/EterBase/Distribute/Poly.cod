; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0CPoly@@QAE@XZ				; CPoly::CPoly
PUBLIC	??1CPoly@@UAE@XZ				; CPoly::~CPoly
PUBLIC	?Analyze@CPoly@@QAEHPBD@Z			; CPoly::Analyze
PUBLIC	?Eval@CPoly@@QAEMXZ				; CPoly::Eval
PUBLIC	?SetRandom@CPoly@@QAEXH@Z			; CPoly::SetRandom
PUBLIC	?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::SetStr
PUBLIC	?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
PUBLIC	?GetVarCount@CPoly@@QAEHXZ			; CPoly::GetVarCount
PUBLIC	?GetVarName@CPoly@@QAEPBDI@Z			; CPoly::GetVarName
PUBLIC	?Clear@CPoly@@QAEXXZ				; CPoly::Clear
PUBLIC	?my_irandom@CPoly@@IAEHNN@Z			; CPoly::my_irandom
PUBLIC	?my_frandom@CPoly@@IAENNN@Z			; CPoly::my_frandom
PUBLIC	?init@CPoly@@IAEXXZ				; CPoly::init
PUBLIC	?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
PUBLIC	?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find
PUBLIC	?emit@CPoly@@IAEXHH@Z				; CPoly::emit
PUBLIC	?match@CPoly@@IAEXH@Z				; CPoly::match
PUBLIC	?expo@CPoly@@IAEXXZ				; CPoly::expo
PUBLIC	?factor@CPoly@@IAEXXZ				; CPoly::factor
PUBLIC	?term@CPoly@@IAEXXZ				; CPoly::term
PUBLIC	?lexan@CPoly@@IAEHXZ				; CPoly::lexan
PUBLIC	?error@CPoly@@IAEXXZ				; CPoly::error
PUBLIC	?expr@CPoly@@IAEXXZ				; CPoly::expr
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
PUBLIC	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
PUBLIC	??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
PUBLIC	?_Reallocate_exactly@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXI@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Reallocate_exactly
PUBLIC	?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
PUBLIC	??_GCPoly@@UAEPAXI@Z				; CPoly::`scalar deleting destructor'
PUBLIC	?_random@@YANXZ					; _random
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@PAVCSymTable@@@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAEPAPAVCSymTable@@QAPAV2@$$QAPAV2@@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Emplace_reallocate<CSymTable *>
PUBLIC	??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
PUBLIC	??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
PUBLIC	??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCSymTable@@@std@@@std@@YAXPAPAVCSymTable@@QAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ; std::_Destroy_range<std::allocator<CSymTable *> >
PUBLIC	??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
PUBLIC	??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >
PUBLIC	??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
PUBLIC	??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
PUBLIC	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z	; std::_Copy_memmove<double *,double *>
PUBLIC	??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CPoly@@6B@					; CPoly::`vftable'
PUBLIC	??_C@_03KLIPLJLL@min@				; `string'
PUBLIC	??_C@_03LJAEFNNE@max@				; `string'
PUBLIC	??_C@_06EBGNBFIA@number@			; `string'
PUBLIC	??_C@_07OMLILGHE@irandom@			; `string'
PUBLIC	??_C@_05CCJGGLIO@irand@				; `string'
PUBLIC	??_C@_07DFJIKENI@frandom@			; `string'
PUBLIC	??_C@_05NDMANJFL@frand@				; `string'
PUBLIC	??_C@_03LALBNOCG@cos@				; `string'
PUBLIC	??_C@_03BLEJJJBH@sin@				; `string'
PUBLIC	??_C@_03IIINPABG@tan@				; `string'
PUBLIC	??_C@_03PPPAEIOB@cot@				; `string'
PUBLIC	??_C@_03OPEPJGGD@csc@				; `string'
PUBLIC	??_C@_05KCHJPNOJ@cosec@				; `string'
PUBLIC	??_C@_03KHPNBODO@sec@				; `string'
PUBLIC	??_C@_02OAHAJOFD@pi@				; `string'
PUBLIC	??_C@_01KGKMHCOC@e@				; `string'
PUBLIC	??_C@_03MGHMBJCF@log@				; `string'
PUBLIC	??_C@_02LKANFCIA@ln@				; `string'
PUBLIC	??_C@_05HGHHAHAP@log10@				; `string'
PUBLIC	??_C@_03BCGAIFPO@abs@				; `string'
PUBLIC	??_C@_03FFONCNID@mod@				; `string'
PUBLIC	??_C@_05PBJFFIGL@floor@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPoly@@6B@					; CPoly::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPoly@@@8				; CPoly `RTTI Type Descriptor'
PUBLIC	??_R3CPoly@@8					; CPoly::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPoly@@8					; CPoly::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPoly@@8				; CPoly::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f00000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4005bf0a8b145769
PUBLIC	__real@400921fb54442d18
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_rand:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??0CSymTable@@QAE@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CSymTable::CSymTable
EXTRN	??_ECPoly@@UAEPAXI@Z:PROC			; CPoly::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIfmod:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_log10_precise:PROC
EXTRN	__libm_sse2_log_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4005bf0a8b145769
CONST	SEGMENT
__real@4005bf0a8b145769 DQ 04005bf0a8b145769r	; 2.71828
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f00000000000000
CONST	SEGMENT
__real@3f00000000000000 DQ 03f00000000000000r	; 3.05176e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CPoly@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPoly@@8 DD FLAT:??_R0?AVCPoly@@@8	; CPoly::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPoly@@8
rdata$r	ENDS
;	COMDAT ??_R2CPoly@@8
rdata$r	SEGMENT
??_R2CPoly@@8 DD FLAT:??_R1A@?0A@EA@CPoly@@8		; CPoly::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPoly@@8
rdata$r	SEGMENT
??_R3CPoly@@8 DD 00H					; CPoly::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPoly@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPoly@@@8
data$r	SEGMENT
??_R0?AVCPoly@@@8 DD FLAT:??_7type_info@@6B@		; CPoly `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPoly@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPoly@@6B@
rdata$r	SEGMENT
??_R4CPoly@@6B@ DD 00H					; CPoly::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPoly@@@8
	DD	FLAT:??_R3CPoly@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBJFFIGL@floor@
CONST	SEGMENT
??_C@_05PBJFFIGL@floor@ DB 'floor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod@
CONST	SEGMENT
??_C@_03FFONCNID@mod@ DB 'mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGHHAHAP@log10@
CONST	SEGMENT
??_C@_05HGHHAHAP@log10@ DB 'log10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKANFCIA@ln@
CONST	SEGMENT
??_C@_02LKANFCIA@ln@ DB 'ln', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log@
CONST	SEGMENT
??_C@_03MGHMBJCF@log@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e@
CONST	SEGMENT
??_C@_01KGKMHCOC@e@ DB 'e', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec@
CONST	SEGMENT
??_C@_03KHPNBODO@sec@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCHJPNOJ@cosec@
CONST	SEGMENT
??_C@_05KCHJPNOJ@cosec@ DB 'cosec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPEPJGGD@csc@
CONST	SEGMENT
??_C@_03OPEPJGGD@csc@ DB 'csc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPPAEIOB@cot@
CONST	SEGMENT
??_C@_03PPPAEIOB@cot@ DB 'cot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIINPABG@tan@
CONST	SEGMENT
??_C@_03IIINPABG@tan@ DB 'tan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLEJJJBH@sin@
CONST	SEGMENT
??_C@_03BLEJJJBH@sin@ DB 'sin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LALBNOCG@cos@
CONST	SEGMENT
??_C@_03LALBNOCG@cos@ DB 'cos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDMANJFL@frand@
CONST	SEGMENT
??_C@_05NDMANJFL@frand@ DB 'frand', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFJIKENI@frandom@
CONST	SEGMENT
??_C@_07DFJIKENI@frandom@ DB 'frandom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCJGGLIO@irand@
CONST	SEGMENT
??_C@_05CCJGGLIO@irand@ DB 'irand', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OMLILGHE@irandom@
CONST	SEGMENT
??_C@_07OMLILGHE@irandom@ DB 'irandom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number@
CONST	SEGMENT
??_C@_06EBGNBFIA@number@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max@
CONST	SEGMENT
??_C@_03LJAEFNNE@max@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min@
CONST	SEGMENT
??_C@_03KLIPLJLL@min@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CPoly@@6B@
CONST	SEGMENT
??_7CPoly@@6B@ DD FLAT:??_R4CPoly@@6B@			; CPoly::`vftable'
	DD	FLAT:??_ECPoly@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lexan@CPoly@@IAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lexan@CPoly@@IAEHXZ$0
__ehfuncinfo$?lexan@CPoly@@IAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lexan@CPoly@@IAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
__ehfuncinfo$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@CPoly@@IAEXXZ DD 019930522H
	DD	018H
	DD	FLAT:__unwindtable$?init@CPoly@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?init@CPoly@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$25
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Analyze@CPoly@@QAEHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Analyze@CPoly@@QAEHPBD@Z$0
__ehfuncinfo$?Analyze@CPoly@@QAEHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Analyze@CPoly@@QAEHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPoly@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CPoly@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPoly@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_memmove<int *,int *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z PROC		; std::_Copy_memmove<double *,double *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ENDP		; std::_Copy_memmove<double *,double *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC	; std::_Copy_backward_memmove<int *,int *>, COMDAT

; 4284 : _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4285 :     // implement copy_backward-like function as memmove
; 4286 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4287 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4288 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4289 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4290 :     return static_cast<_BidIt2>(_CSTD memmove(_Dest_ch - _Count, _First_ch, _Count));

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4291 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP	; std::_Copy_backward_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,std::allocator<int> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z PROC ; std::_Uninitialized_move<double *,std::allocator<double> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 03	 sar	 edi, 3
  0001e	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ENDP ; std::_Uninitialized_move<double *,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSymTable * *,CSymTable * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z PROC ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ENDP ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z PROC ; std::_Destroy_range<std::allocator<double> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ENDP ; std::_Destroy_range<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCSymTable@@@std@@@std@@YAXPAPAVCSymTable@@QAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCSymTable@@@std@@@std@@YAXPAPAVCSymTable@@QAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CSymTable *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCSymTable@@@std@@@std@@YAXPAPAVCSymTable@@QAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CSymTable *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 510  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 511  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 512  : 
; 513  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN4@Traits_com

; 514  :         return _Ans;
; 515  :     }
; 516  : 
; 517  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 522  :         return 1;
; 523  :     }
; 524  : 
; 525  :     return 0;
; 526  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 518  :         return -1;
; 519  :     }
; 520  : 
; 521  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN4@Traits_com:

; 522  :         return 1;
; 523  :     }
; 524  : 
; 525  :     return 0;
; 526  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z PROC ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 03	 sar	 ebx, 3
  0001a	c1 f8 03	 sar	 eax, 3

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00022	0f 84 c2 00 00
	00		 je	 $LN41@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 03	 sar	 ecx, 3

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00056	0f 87 93 00 00
	00		 ja	 $LN42@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00079	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0007d	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00081	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00086	3b da		 cmp	 ebx, edx
  00088	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008a	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008f	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00091	56		 push	 esi
  00092	57		 push	 edi
  00093	53		 push	 ebx
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >
  0009a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0009d	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009f	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a2	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a5	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
$LN5@Emplace_re:
  000a8	56		 push	 esi
  000a9	50		 push	 eax
  000aa	52		 push	 edx
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b1	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000b3	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c9		 test	 ecx, ecx
  000b8	74 12		 je	 SHORT $LN35@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ba	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bd	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 e0 f8	 and	 eax, -8			; fffffff8H
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c9	83 c4 08	 add	 esp, 8
$LN35@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cc	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cf	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000d1	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000d3	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  000d6	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000dc	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000df	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 767  :     }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
$LN41@Emplace_re:

; 738  :             _Xlength();

  000ea	e8 00 00 00 00	 call	 ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN42@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ef	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN39@Emplace_re:
  000f4	cc		 int	 3
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVCSymTable@@@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAEPAPAVCSymTable@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVCSymTable@@@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAEPAPAVCSymTable@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Emplace_reallocate<CSymTable *>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@PAVCSymTable@@@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAEPAPAVCSymTable@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Emplace_reallocate<CSymTable *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4502 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b d0		 mov	 edx, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
$LN6@operator:

; 2144 :         const value_type* _Result = _Bx._Buf;

  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]
$LN11@operator:

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001e	ff 70 10	 push	 DWORD PTR [eax+16]
  00021	52		 push	 edx
  00022	ff 71 10	 push	 DWORD PTR [ecx+16]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 4503 :     return _Left.compare(_Right) < 0;

  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	5e		 pop	 esi

; 4504 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?_random@@YANXZ
_TEXT	SEGMENT
tv68 = -8						; size = 8
?_random@@YANXZ PROC					; _random, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 14   :     return rand() / (RAND_MAX + 1.0);

  00006	e8 00 00 00 00	 call	 _rand
  0000b	66 0f 6e c0	 movd	 xmm0, eax
  0000f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00013	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00000000000000
  0001b	f2 0f 11 45 f8	 movsd	 QWORD PTR tv68[ebp], xmm0
  00020	dd 45 f8	 fld	 QWORD PTR tv68[ebp]

; 15   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_random@@YANXZ ENDP					; _random
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPoly@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPoly@@UAEPAXI@Z PROC				; CPoly::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPoly@@UAE@XZ	; CPoly::~CPoly
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 80 00 00 00	 push	 128			; 00000080H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPoly@@UAEPAXI@Z ENDP				; CPoly::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv254 = 8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXI@Z PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;
; 1254 :         pointer& _Myfirst = _My_data._Myfirst;
; 1255 :         pointer& _Mylast  = _My_data._Mylast;
; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0000e	2b 3e		 sub	 edi, DWORD PTR [esi]
  00010	c1 ff 02	 sar	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00013	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00018	77 4c		 ja	 SHORT $LN26@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0001a	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0001d	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  0001e	89 45 08	 mov	 DWORD PTR tv254[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00021	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00026	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00027	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00029	53		 push	 ebx
  0002a	ff 76 04	 push	 DWORD PTR [esi+4]
  0002d	ff 36		 push	 DWORD PTR [esi]
  0002f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@YAPAPAVCSymTable@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSymTable@@@0@@Z ; std::_Uninitialized_move<CSymTable * *,std::allocator<CSymTable *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00034	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00039	85 c9		 test	 ecx, ecx
  0003b	74 12		 je	 SHORT $LN20@Reallocate

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 e0 fc	 and	 eax, -4			; fffffffcH
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004c	83 c4 08	 add	 esp, 8
$LN20@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0004f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00052	89 1e		 mov	 DWORD PTR [esi], ebx
  00054	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00057	8b 45 08	 mov	 eax, DWORD PTR tv254[ebp]
  0005a	03 c3		 add	 eax, ebx
  0005c	5f		 pop	 edi
  0005d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 1269 :     }

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN26@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00066	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN24@Reallocate:
  0006b	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ PROC ; std::vector<double,std::allocator<double> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ENDP ; std::vector<double,std::allocator<double> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 720  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 704  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 721  :         emplace_back(_STD move(_Val));
; 722  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>

; 721  :         emplace_back(_STD move(_Val));
; 722  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 704  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 717  :         emplace_back(_Val);
; 718  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>

; 717  :         emplace_back(_Val);
; 718  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?expr@CPoly@@IAEXXZ
_TEXT	SEGMENT
?expr@CPoly@@IAEXXZ PROC				; CPoly::expr, COMDAT
; _this$ = ecx

; 279  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 280  :     int t;
; 281  : 
; 282  :     switch (iLookAhead)

  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	83 e8 2b	 sub	 eax, 43			; 0000002bH
  00009	74 05		 je	 SHORT $LN8@expr
  0000b	83 e8 02	 sub	 eax, 2
  0000e	75 19		 jne	 SHORT $LN2@expr
$LN8@expr:

; 283  :     {
; 284  : 	case '+':
; 285  : 	case '-':
; 286  : 	    uiLookPos--;

  00010	ff 4e 24	 dec	 DWORD PTR [esi+36]
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 287  : 	    iLookAhead = POLY_NUM;

  00016	c7 46 18 09 00
	00 00		 mov	 DWORD PTR [esi+24], 9

; 288  : 	    iNumToken = iToken = 0;

  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00024	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
$LN2@expr:

; 289  : 
; 290  :     }
; 291  : 
; 292  :     term();

  00029	e8 00 00 00 00	 call	 ?term@CPoly@@IAEXXZ	; CPoly::term

; 293  : 
; 294  :     while (!ErrorOccur)

  0002e	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00032	75 3a		 jne	 SHORT $LN5@expr
  00034	57		 push	 edi
$LL4@expr:

; 295  :     {
; 296  : 	switch (iLookAhead)

  00035	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00038	8d 47 f5	 lea	 eax, DWORD PTR [edi-11]
  0003b	83 f8 22	 cmp	 eax, 34			; 00000022H
  0003e	77 30		 ja	 SHORT $LN11@expr
  00040	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN17@expr[eax]
  00047	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@expr[eax*4]
$LN9@expr:

; 297  : 	{
; 298  : 	    case '+':
; 299  : 	    case '-':
; 300  : 		t=iLookAhead;
; 301  : 		match(t);

  0004e	57		 push	 edi
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 302  : 		term();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?term@CPoly@@IAEXXZ	; CPoly::term

; 303  : 		emit(t,POLY_NONE);

  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00067	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0006b	74 c8		 je	 SHORT $LL4@expr
$LN19@expr:
  0006d	5f		 pop	 edi
$LN5@expr:
  0006e	5e		 pop	 esi

; 308  : 					  //THROW( new CParseException("Error Parsing"));
; 309  : 					  return;
; 310  : 	}
; 311  :     }
; 312  : }

  0006f	c3		 ret	 0
$LN11@expr:
  00070	5f		 pop	 edi

; 304  : 		continue;
; 305  : 	    case POLY_EOS: case ')': case ',': return;
; 306  : 	    default:
; 307  : 					  error();

  00071	8b ce		 mov	 ecx, esi
  00073	5e		 pop	 esi
  00074	e9 00 00 00 00	 jmp	 ?error@CPoly@@IAEXXZ	; CPoly::error
  00079	0f 1f 00	 npad	 3
$LN18@expr:

; 308  : 					  //THROW( new CParseException("Error Parsing"));
; 309  : 					  return;
; 310  : 	}
; 311  :     }
; 312  : }

  0007c	00 00 00 00	 DD	 $LN19@expr
  00080	00 00 00 00	 DD	 $LN9@expr
  00084	00 00 00 00	 DD	 $LN11@expr
$LN17@expr:
  00088	00		 DB	 0
  00089	02		 DB	 2
  0008a	02		 DB	 2
  0008b	02		 DB	 2
  0008c	02		 DB	 2
  0008d	02		 DB	 2
  0008e	02		 DB	 2
  0008f	02		 DB	 2
  00090	02		 DB	 2
  00091	02		 DB	 2
  00092	02		 DB	 2
  00093	02		 DB	 2
  00094	02		 DB	 2
  00095	02		 DB	 2
  00096	02		 DB	 2
  00097	02		 DB	 2
  00098	02		 DB	 2
  00099	02		 DB	 2
  0009a	02		 DB	 2
  0009b	02		 DB	 2
  0009c	02		 DB	 2
  0009d	02		 DB	 2
  0009e	02		 DB	 2
  0009f	02		 DB	 2
  000a0	02		 DB	 2
  000a1	02		 DB	 2
  000a2	02		 DB	 2
  000a3	02		 DB	 2
  000a4	02		 DB	 2
  000a5	02		 DB	 2
  000a6	00		 DB	 0
  000a7	02		 DB	 2
  000a8	01		 DB	 1
  000a9	00		 DB	 0
  000aa	01		 DB	 1
?expr@CPoly@@IAEXXZ ENDP				; CPoly::expr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?error@CPoly@@IAEXXZ
_TEXT	SEGMENT
?error@CPoly@@IAEXXZ PROC				; CPoly::error, COMDAT
; _this$ = ecx

; 316  :     iErrorPos=uiLookPos;

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 317  :     ErrorOccur=true;

  00006	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1

; 318  : }

  0000a	c3		 ret	 0
?error@CPoly@@IAEXXZ ENDP				; CPoly::error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?lexan@CPoly@@IAEHXZ
_TEXT	SEGMENT
_tt$1$ = -64						; size = 8
__New_size$1$ = -60					; size = 4
__Old_capacity$1$ = -56					; size = 4
__Old_size$1$ = -52					; size = 4
__New_ptr$2 = -48					; size = 4
__Ch$1$ = -41						; size = 1
_localSymbol$3 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?lexan@CPoly@@IAEHXZ PROC				; CPoly::lexan, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lexan@CPoly@@IAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx

; 322  :     int t;
; 323  :     double tt;
; 324  : 
; 325  :     while (uiLookPos < strData.size())

  0002d	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00030	8b 5f 70	 mov	 ebx, DWORD PTR [edi+112]
  00033	3b c3		 cmp	 eax, ebx
  00035	73 32		 jae	 SHORT $LN247@lexan
  00037	8d 77 60	 lea	 esi, DWORD PTR [edi+96]
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL2@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00040	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 2135 :         value_type* _Result = _Bx._Buf;

  00043	8b ce		 mov	 ecx, esi

; 2136 :         if (_Large_string_engaged()) {

  00045	83 fa 10	 cmp	 edx, 16			; 00000010H
  00048	72 02		 jb	 SHORT $LN237@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0004a	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN237@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 327  : 	if (strData[uiLookPos] == ' ' || strData[uiLookPos] == '\t')

  0004c	80 3c 08 20	 cmp	 BYTE PTR [eax+ecx], 32	; 00000020H
  00050	74 0f		 je	 SHORT $LN220@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00052	8b ce		 mov	 ecx, esi

; 2136 :         if (_Large_string_engaged()) {

  00054	83 fa 10	 cmp	 edx, 16			; 00000010H
  00057	72 02		 jb	 SHORT $LN236@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00059	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN236@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 327  : 	if (strData[uiLookPos] == ' ' || strData[uiLookPos] == '\t')

  0005b	80 3c 08 09	 cmp	 BYTE PTR [eax+ecx], 9
  0005f	75 29		 jne	 SHORT $LN12@lexan
$LN220@lexan:

; 375  : 	}
; 376  : 	uiLookPos++;

  00061	40		 inc	 eax
  00062	89 47 24	 mov	 DWORD PTR [edi+36], eax
  00065	3b c3		 cmp	 eax, ebx
  00067	72 d7		 jb	 SHORT $LL2@lexan
$LN247@lexan:

; 377  :     }
; 378  :     return POLY_EOS;

  00069	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
$LN1@lexan:

; 379  : }

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN12@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  0008a	8b ce		 mov	 ecx, esi

; 2136 :         if (_Large_string_engaged()) {

  0008c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0008f	72 02		 jb	 SHORT $LN238@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00091	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN238@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 329  : 	else if (isdigit(strData[uiLookPos]))

  00093	0f be 04 08	 movsx	 eax, BYTE PTR [eax+ecx]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _isdigit
  0009d	83 c4 04	 add	 esp, 4
  000a0	85 c0		 test	 eax, eax
  000a2	0f 84 05 01 00
	00		 je	 $LN15@lexan

; 330  : 	{
; 331  : 	    t = 0;
; 332  : 	    for (;uiLookPos<strData.size();uiLookPos++)

  000a8	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  000ab	33 db		 xor	 ebx, ebx
  000ad	3b 57 70	 cmp	 edx, DWORD PTR [edi+112]
  000b0	73 3e		 jae	 SHORT $LN249@lexan
$LL6@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000b2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  000b6	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  000b8	72 02		 jb	 SHORT $LN240@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000ba	8b 06		 mov	 eax, DWORD PTR [esi]
$LN240@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 334  : 		if (isdigit(strData[uiLookPos]))

  000bc	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _isdigit
  000c6	83 c4 04	 add	 esp, 4
  000c9	85 c0		 test	 eax, eax
  000cb	74 23		 je	 SHORT $LN249@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000cd	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  000d1	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  000d3	72 02		 jb	 SHORT $LN239@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000d5	8b 06		 mov	 eax, DWORD PTR [esi]
$LN239@lexan:

; 3590 :         return _Mypair._Myval2._Myptr()[_Off];

  000d7	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 335  : 		    t = t * 10 + strData[uiLookPos] - '0';

  000da	8d 1c 9b	 lea	 ebx, DWORD PTR [ebx+ebx*4]
  000dd	8d 5b e8	 lea	 ebx, DWORD PTR [ebx-24]
  000e0	0f be 0c 02	 movsx	 ecx, BYTE PTR [edx+eax]
  000e4	42		 inc	 edx
  000e5	89 57 24	 mov	 DWORD PTR [edi+36], edx
  000e8	8d 1c 59	 lea	 ebx, DWORD PTR [ecx+ebx*2]
  000eb	3b 57 70	 cmp	 edx, DWORD PTR [edi+112]
  000ee	72 c2		 jb	 SHORT $LL6@lexan
$LN249@lexan:

; 336  : 		else
; 337  : 		    break;
; 338  : 	    }
; 339  : 	    iToken=t;
; 340  : 	    tt=0.1;

  000f0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fb999999999999a

; 342  : 	    if (uiLookPos<strData.size() && strData[uiLookPos]=='.')

  000f8	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  000fb	8b 57 70	 mov	 edx, DWORD PTR [edi+112]
  000fe	f2 0f 11 45 c0	 movsd	 QWORD PTR _tt$1$[ebp], xmm0
  00103	0f 57 c0	 xorps	 xmm0, xmm0
  00106	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00109	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  0010e	3b ca		 cmp	 ecx, edx
  00110	73 7e		 jae	 SHORT $LN250@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00112	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  00116	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  00118	72 02		 jb	 SHORT $LN241@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0011a	8b 06		 mov	 eax, DWORD PTR [esi]
$LN241@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 342  : 	    if (uiLookPos<strData.size() && strData[uiLookPos]=='.')

  0011c	80 3c 01 2e	 cmp	 BYTE PTR [ecx+eax], 46	; 0000002eH
  00120	75 6e		 jne	 SHORT $LN250@lexan

; 343  : 	    {
; 344  : 		uiLookPos++;

  00122	41		 inc	 ecx
  00123	89 4f 24	 mov	 DWORD PTR [edi+36], ecx

; 345  : 		for (;uiLookPos<strData.size();uiLookPos++,tt*=0.1)

  00126	3b ca		 cmp	 ecx, edx
  00128	73 66		 jae	 SHORT $LN250@lexan
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL9@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00130	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  00134	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  00136	72 02		 jb	 SHORT $LN243@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00138	8b 06		 mov	 eax, DWORD PTR [esi]
$LN243@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 347  : 		    if (isdigit(strData[uiLookPos]))

  0013a	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 _isdigit
  00144	83 c4 04	 add	 esp, 4
  00147	85 c0		 test	 eax, eax
  00149	74 45		 je	 SHORT $LN250@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0014b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  0014f	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  00151	72 02		 jb	 SHORT $LN242@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00153	8b 06		 mov	 eax, DWORD PTR [esi]
$LN242@lexan:

; 3590 :         return _Mypair._Myval2._Myptr()[_Off];

  00155	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 348  : 			iNumToken+=tt*(strData[uiLookPos]-'0');

  00158	f2 0f 10 4d c0	 movsd	 xmm1, QWORD PTR _tt$1$[ebp]
  0015d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00161	41		 inc	 ecx
  00162	83 e8 30	 sub	 eax, 48			; 00000030H
  00165	89 4f 24	 mov	 DWORD PTR [edi+36], ecx
  00168	66 0f 6e c0	 movd	 xmm0, eax
  0016c	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00170	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00174	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb999999999999a
  0017c	f2 0f 58 47 10	 addsd	 xmm0, QWORD PTR [edi+16]
  00181	f2 0f 11 4d c0	 movsd	 QWORD PTR _tt$1$[ebp], xmm1
  00186	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  0018b	3b 4f 70	 cmp	 ecx, DWORD PTR [edi+112]
  0018e	72 a0		 jb	 SHORT $LL9@lexan
$LN250@lexan:
  00190	66 0f 6e 47 08	 movd	 xmm0, DWORD PTR [edi+8]

; 349  : 		    else
; 350  : 			break;
; 351  : 		}
; 352  : 	    }
; 353  : 	    iNumToken+=iToken;
; 354  : 	    return POLY_NUM;

  00195	b8 09 00 00 00	 mov	 eax, 9
  0019a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0019e	f2 0f 58 47 10	 addsd	 xmm0, QWORD PTR [edi+16]
  001a3	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  001a8	e9 c1 fe ff ff	 jmp	 $LN1@lexan
$LN15@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001ad	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  001b1	8b ce		 mov	 ecx, esi
  001b3	72 02		 jb	 SHORT $LN244@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  001b5	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN244@lexan:

; 3590 :         return _Mypair._Myval2._Myptr()[_Off];

  001b7	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 356  : 	else if (isalpha(strData[uiLookPos]))

  001ba	0f be 04 08	 movsx	 eax, BYTE PTR [eax+ecx]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 _isalpha
  001c4	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  001c7	83 c4 04	 add	 esp, 4
  001ca	85 c0		 test	 eax, eax
  001cc	0f 84 a9 01 00
	00		 je	 $LN22@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001d2	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  001d7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _localSymbol$3[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001de	89 5d ec	 mov	 DWORD PTR _localSymbol$3[ebp+20], ebx

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001e1	c6 45 d8 00	 mov	 BYTE PTR _localSymbol$3[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 358  : 	    string localSymbol("");

  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 359  : 	    while (uiLookPos<strData.size() && isalpha(strData[uiLookPos]))

  001ec	3b 4f 70	 cmp	 ecx, DWORD PTR [edi+112]
  001ef	0f 83 38 01 00
	00		 jae	 $LN248@lexan
$LL10@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001f5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  001f9	8b c6		 mov	 eax, esi

; 2136 :         if (_Large_string_engaged()) {

  001fb	72 02		 jb	 SHORT $LN246@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  001fd	8b 06		 mov	 eax, DWORD PTR [esi]
$LN246@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 359  : 	    while (uiLookPos<strData.size() && isalpha(strData[uiLookPos]))

  001ff	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 _isalpha
  00209	83 c4 04	 add	 esp, 4
  0020c	85 c0		 test	 eax, eax
  0020e	0f 84 19 01 00
	00		 je	 $LN248@lexan
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00214	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  00218	8b ce		 mov	 ecx, esi

; 2136 :         if (_Large_string_engaged()) {

  0021a	72 02		 jb	 SHORT $LN245@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0021c	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN245@lexan:

; 2827 :         push_back(_Ch);

  0021e	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00221	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00224	8b 4d e8	 mov	 ecx, DWORD PTR _localSymbol$3[ebp+16]

; 2827 :         push_back(_Ch);

  00227	88 55 d7	 mov	 BYTE PTR __Ch$1$[ebp], dl

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0022a	89 4d cc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0022d	3b cb		 cmp	 ecx, ebx

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0022f	73 1d		 jae	 SHORT $LN154@lexan

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00231	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2153 :         return _BUF_SIZE <= _Myres;

  00234	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00237	89 45 e8	 mov	 DWORD PTR _localSymbol$3[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  0023a	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$3[ebp]

; 2136 :         if (_Large_string_engaged()) {

  0023d	0f 43 45 d8	 cmovae	 eax, DWORD PTR _localSymbol$3[ebp]

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00241	88 14 08	 mov	 BYTE PTR [eax+ecx], dl

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00244	c6 44 08 01 00	 mov	 BYTE PTR [eax+ecx+1], 0

; 3614 :             return;

  00249	e9 cc 00 00 00	 jmp	 $LN253@lexan
$LN154@lexan:

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  0024e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00253	2b c1		 sub	 eax, ecx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00255	83 f8 01	 cmp	 eax, 1
  00258	0f 82 3b 01 00
	00		 jb	 $LN211@lexan

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0025e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00261	8b cb		 mov	 ecx, ebx

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00263	8b d8		 mov	 ebx, eax

; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00265	89 45 c4	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00268	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  0026b	89 4d c8	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0026e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00274	76 07		 jbe	 SHORT $LN169@lexan

; 4203 :             return _Max;

  00276	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0027b	eb 1e		 jmp	 SHORT $LN168@lexan
$LN169@lexan:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0027d	8b d1		 mov	 edx, ecx
  0027f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00284	d1 ea		 shr	 edx, 1
  00286	2b c2		 sub	 eax, edx
  00288	3b c8		 cmp	 ecx, eax
  0028a	76 07		 jbe	 SHORT $LN170@lexan

; 4207 :             return _Max;

  0028c	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00291	eb 08		 jmp	 SHORT $LN168@lexan
$LN170@lexan:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00293	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00296	3b d8		 cmp	 ebx, eax
  00298	0f 42 d8	 cmovb	 ebx, eax
$LN168@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0029b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0029e	50		 push	 eax
  0029f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  002a4	8b 4d c4	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002a7	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  002aa	83 7d c8 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  002ae	89 45 d0	 mov	 DWORD PTR __New_ptr$2[ebp], eax
  002b1	89 4d e8	 mov	 DWORD PTR _localSymbol$3[ebp+16], ecx
  002b4	89 5d ec	 mov	 DWORD PTR _localSymbol$3[ebp+20], ebx
  002b7	72 35		 jb	 SHORT $LN163@lexan

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002b9	ff 75 cc	 push	 DWORD PTR __Old_size$1$[ebp]
  002bc	ff 75 d8	 push	 DWORD PTR _localSymbol$3[ebp]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  002c5	8b 45 cc	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  002c8	8b 4d d0	 mov	 ecx, DWORD PTR __New_ptr$2[ebp]
  002cb	8a 55 d7	 mov	 dl, BYTE PTR __Ch$1$[ebp]
  002ce	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  002d1	c6 44 08 01 00	 mov	 BYTE PTR [eax+ecx+1], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  002d6	8b 45 c8	 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  002d9	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002da	50		 push	 eax
  002db	ff 75 d8	 push	 DWORD PTR _localSymbol$3[ebp]
  002de	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  002e3	8b 45 d0	 mov	 eax, DWORD PTR __New_ptr$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e6	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  002e9	89 45 d8	 mov	 DWORD PTR _localSymbol$3[ebp], eax

; 4267 :         } else {

  002ec	eb 2f		 jmp	 SHORT $LN164@lexan
$LN163@lexan:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  002ee	8b 5d cc	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  002f1	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$3[ebp]
  002f4	53		 push	 ebx
  002f5	51		 push	 ecx
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  002fc	8b 45 d0	 mov	 eax, DWORD PTR __New_ptr$2[ebp]
  002ff	8a 55 d7	 mov	 dl, BYTE PTR __Ch$1$[ebp]
  00302	88 14 18	 mov	 BYTE PTR [eax+ebx], dl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00305	c6 44 03 01 00	 mov	 BYTE PTR [ebx+eax+1], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0030a	8d 45 d0	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  0030d	50		 push	 eax
  0030e	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$3[ebp]
  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00317	83 c4 14	 add	 esp, 20			; 00000014H
$LN253@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 362  : 		uiLookPos++;

  0031a	8b 5d ec	 mov	 ebx, DWORD PTR _localSymbol$3[ebp+20]
$LN164@lexan:
  0031d	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00320	41		 inc	 ecx
  00321	89 4f 24	 mov	 DWORD PTR [edi+36], ecx
  00324	3b 4f 70	 cmp	 ecx, DWORD PTR [edi+112]
  00327	0f 82 c8 fe ff
	ff		 jb	 $LL10@lexan
$LN248@lexan:

; 363  : 	    }
; 364  : 	    iToken= find(localSymbol);

  0032d	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$3[ebp]
  00330	8b cf		 mov	 ecx, edi
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find
  00338	8b c8		 mov	 ecx, eax
  0033a	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 365  : 	    if (iToken==-1)

  0033d	83 f9 ff	 cmp	 ecx, -1
  00340	75 15		 jne	 SHORT $LN24@lexan

; 366  : 	    {
; 367  : 		iToken=insert(localSymbol,POLY_ID);

  00342	6a 0a		 push	 10			; 0000000aH
  00344	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$3[ebp]
  00347	8b cf		 mov	 ecx, edi
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
  0034f	8b 5d ec	 mov	 ebx, DWORD PTR _localSymbol$3[ebp+20]
  00352	8b c8		 mov	 ecx, eax
  00354	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@lexan:

; 369  : 	    return lSymbol[(/*FindIndex*/(iToken))]->token;

  00357	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0035a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0035d	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00360	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00363	72 0f		 jb	 SHORT $LN194@lexan

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00365	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00368	51		 push	 ecx
  00369	ff 75 d8	 push	 DWORD PTR _localSymbol$3[ebp]
  0036c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00371	83 c4 08	 add	 esp, 8
$LN194@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 369  : 	    return lSymbol[(/*FindIndex*/(iToken))]->token;

  00374	8b c6		 mov	 eax, esi
  00376	e9 f3 fc ff ff	 jmp	 $LN1@lexan
$LN22@lexan:

; 374  : 	    return strData[uiLookPos++];

  0037b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0037e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00385	89 47 24	 mov	 DWORD PTR [edi+36], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00388	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0038c	72 02		 jb	 SHORT $LN203@lexan

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0038e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN203@lexan:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 374  : 	    return strData[uiLookPos++];

  00390	0f be 04 0e	 movsx	 eax, BYTE PTR [esi+ecx]
  00394	e9 d5 fc ff ff	 jmp	 $LN1@lexan
$LN211@lexan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  00399	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN252@lexan:
  0039e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lexan@CPoly@@IAEHXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?lexan@CPoly@@IAEHXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lexan@CPoly@@IAEHXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lexan@CPoly@@IAEHXZ ENDP				; CPoly::lexan
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?term@CPoly@@IAEXXZ
_TEXT	SEGMENT
?term@CPoly@@IAEXXZ PROC				; CPoly::term, COMDAT
; _this$ = ecx

; 382  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 383  :     int t;
; 384  :     factor();

  00003	e8 00 00 00 00	 call	 ?factor@CPoly@@IAEXXZ	; CPoly::factor

; 385  :     while (!ErrorOccur)

  00008	80 7f 20 00	 cmp	 BYTE PTR [edi+32], 0
  0000c	75 34		 jne	 SHORT $LN14@term
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL2@term:

; 386  :     {
; 387  : 	switch (iLookAhead)

  00010	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00013	83 fe 25	 cmp	 esi, 37			; 00000025H
  00016	74 0a		 je	 SHORT $LN6@term
  00018	83 fe 2a	 cmp	 esi, 42			; 0000002aH
  0001b	74 05		 je	 SHORT $LN6@term
  0001d	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  00020	75 1f		 jne	 SHORT $LN15@term
$LN6@term:

; 388  : 	{
; 389  : 	    case '*':
; 390  : 	    case '/':
; 391  : 	    case '%':
; 392  : 		t=iLookAhead;
; 393  : 		match(t);

  00022	56		 push	 esi
  00023	8b cf		 mov	 ecx, edi
  00025	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 394  : 		factor();

  0002a	8b cf		 mov	 ecx, edi
  0002c	e8 00 00 00 00	 call	 ?factor@CPoly@@IAEXXZ	; CPoly::factor

; 395  : 		emit(t,POLY_NONE);

  00031	6a 00		 push	 0
  00033	56		 push	 esi
  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  0003b	80 7f 20 00	 cmp	 BYTE PTR [edi+32], 0
  0003f	74 cf		 je	 SHORT $LL2@term
$LN15@term:
  00041	5e		 pop	 esi
$LN14@term:
  00042	5f		 pop	 edi

; 396  : 		continue;
; 397  : 	    default:
; 398  : 		return;
; 399  : 	}
; 400  :     }
; 401  : }

  00043	c3		 ret	 0
?term@CPoly@@IAEXXZ ENDP				; CPoly::term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?factor@CPoly@@IAEXXZ
_TEXT	SEGMENT
?factor@CPoly@@IAEXXZ PROC				; CPoly::factor, COMDAT
; _this$ = ecx

; 404  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 405  :     int t;
; 406  :     expo();

  00003	e8 00 00 00 00	 call	 ?expo@CPoly@@IAEXXZ	; CPoly::expo

; 407  :     while (!ErrorOccur)

  00008	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0000c	75 29		 jne	 SHORT $LN14@factor
  0000e	66 90		 npad	 2
$LL2@factor:

; 408  :     {
; 409  : 	switch (iLookAhead)

  00010	83 7e 18 5e	 cmp	 DWORD PTR [esi+24], 94	; 0000005eH
  00014	75 21		 jne	 SHORT $LN14@factor

; 410  : 	{
; 411  : 	    case '^':
; 412  : 		t=iLookAhead;
; 413  : 		match(t);

  00016	6a 5e		 push	 94			; 0000005eH
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 414  : 		expo();

  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?expo@CPoly@@IAEXXZ	; CPoly::expo

; 415  : 		emit(t,POLY_NONE);

  00026	6a 00		 push	 0
  00028	6a 5e		 push	 94			; 0000005eH
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00031	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00035	74 d9		 je	 SHORT $LL2@factor
$LN14@factor:
  00037	5e		 pop	 esi

; 416  : 		continue;
; 417  : 	    default:
; 418  : 		return;
; 419  : 	}
; 420  :     }
; 421  : }

  00038	c3		 ret	 0
?factor@CPoly@@IAEXXZ ENDP				; CPoly::factor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?expo@CPoly@@IAEXXZ
_TEXT	SEGMENT
?expo@CPoly@@IAEXXZ PROC				; CPoly::expo, COMDAT
; _this$ = ecx

; 424  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 425  :     int t;
; 426  :     switch (iLookAhead)

  00004	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00007	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000a	83 f8 27	 cmp	 eax, 39			; 00000027H
  0000d	0f 87 9b 00 00
	00		 ja	 $LN10@expo
  00013	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@expo[eax]
  0001a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@expo[eax*4]
$LN4@expo:

; 427  :     {
; 428  : 	case '(':
; 429  : 	    match('('); expr(); match(')'); break;

  00021	6a 28		 push	 40			; 00000028H
  00023	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  0002f	6a 29		 push	 41			; 00000029H

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
$LN2@expo:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
$LN5@expo:

; 430  : 	case POLY_NUM:
; 431  : 	    emit(POLY_NUM, iToken); match(POLY_NUM); break;

  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	6a 09		 push	 9
  00040	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00045	6a 09		 push	 9

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	c3		 ret	 0
$LN6@expo:

; 432  : 	case POLY_ID:
; 433  : 	    emit(POLY_ID,(int)/*FindIndex*/(iToken)); match(POLY_ID); break;

  00051	ff 76 08	 push	 DWORD PTR [esi+8]
  00054	6a 0a		 push	 10			; 0000000aH
  00056	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  0005b	6a 0a		 push	 10			; 0000000aH

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	c3		 ret	 0
$LN7@expo:

; 434  : 	case POLY_ROOT:
; 435  : 	case POLY_SIN:
; 436  : 	case POLY_COT:
; 437  : 	case POLY_TAN:
; 438  : 	case POLY_CSC:
; 439  : 	case POLY_SEC:
; 440  : 	case POLY_LN:
; 441  : 	case POLY_LOG10:
; 442  : 	case POLY_COS:
; 443  : 	case POLY_ABS:
; 444  : 	case POLY_FLOOR:
; 445  : 	    t=iLookAhead;
; 446  : 	    match(iLookAhead); match('('); expr(); match(')'); emit(t,iToken);

  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0006d	6a 28		 push	 40			; 00000028H
$LN16@expo:

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  0007d	6a 29		 push	 41			; 00000029H
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00086	ff 76 08	 push	 DWORD PTR [esi+8]
  00089	8b ce		 mov	 ecx, esi
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	c3		 ret	 0
$LN8@expo:

; 447  : 	    break;
; 448  : 	case POLY_LOG:
; 449  : 	case POLY_MINF:
; 450  : 	case POLY_MAXF:
; 451  : 	case POLY_IRAND:
; 452  : 	case POLY_FRAND:
; 453  : 	case POLY_MOD:
; 454  : 	    t=iLookAhead;
; 455  : 	    match(iLookAhead); match('('); expr(); match(','); expr(); match(')'); emit(t,iToken);

  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0009a	6a 28		 push	 40			; 00000028H
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  000aa	6a 2c		 push	 44			; 0000002cH

; 456  : 	    break;

  000ac	eb c1		 jmp	 SHORT $LN16@expo
$LN10@expo:
  000ae	5f		 pop	 edi

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  000af	5e		 pop	 esi
  000b0	e9 00 00 00 00	 jmp	 ?error@CPoly@@IAEXXZ	; CPoly::error
  000b5	0f 1f 00	 npad	 3
$LN13@expo:
  000b8	00 00 00 00	 DD	 $LN7@expo
  000bc	00 00 00 00	 DD	 $LN5@expo
  000c0	00 00 00 00	 DD	 $LN6@expo
  000c4	00 00 00 00	 DD	 $LN2@expo
  000c8	00 00 00 00	 DD	 $LN8@expo
  000cc	00 00 00 00	 DD	 $LN4@expo
  000d0	00 00 00 00	 DD	 $LN10@expo
$LN12@expo:
  000d4	00		 DB	 0
  000d5	06		 DB	 6
  000d6	06		 DB	 6
  000d7	06		 DB	 6
  000d8	06		 DB	 6
  000d9	06		 DB	 6
  000da	06		 DB	 6
  000db	06		 DB	 6
  000dc	01		 DB	 1
  000dd	02		 DB	 2
  000de	03		 DB	 3
  000df	00		 DB	 0
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	00		 DB	 0
  000e3	00		 DB	 0
  000e4	00		 DB	 0
  000e5	04		 DB	 4
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	04		 DB	 4
  000ea	04		 DB	 4
  000eb	04		 DB	 4
  000ec	04		 DB	 4
  000ed	04		 DB	 4
  000ee	00		 DB	 0
  000ef	06		 DB	 6
  000f0	06		 DB	 6
  000f1	06		 DB	 6
  000f2	06		 DB	 6
  000f3	06		 DB	 6
  000f4	06		 DB	 6
  000f5	06		 DB	 6
  000f6	06		 DB	 6
  000f7	06		 DB	 6
  000f8	06		 DB	 6
  000f9	06		 DB	 6
  000fa	06		 DB	 6
  000fb	05		 DB	 5
?expo@CPoly@@IAEXXZ ENDP				; CPoly::expo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?match@CPoly@@IAEXH@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?match@CPoly@@IAEXH@Z PROC				; CPoly::match, COMDAT
; _this$ = ecx

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 467  :     if (iLookAhead==t) iLookAhead=lexan(); else error();

  00006	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00009	3b 45 08	 cmp	 eax, DWORD PTR _t$[ebp]
  0000c	75 0d		 jne	 SHORT $LN2@match
  0000e	e8 00 00 00 00	 call	 ?lexan@CPoly@@IAEHXZ	; CPoly::lexan
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	5e		 pop	 esi

; 468  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN2@match:

; 467  :     if (iLookAhead==t) iLookAhead=lexan(); else error();

  0001b	e8 00 00 00 00	 call	 ?error@CPoly@@IAEXXZ	; CPoly::error
  00020	5e		 pop	 esi

; 468  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?match@CPoly@@IAEXH@Z ENDP				; CPoly::match
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?emit@CPoly@@IAEXHH@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
$T2 = 8							; size = 4
$T3 = 8							; size = 4
$T4 = 8							; size = 4
$T5 = 8							; size = 4
$T6 = 8							; size = 4
_t$ = 8							; size = 4
_tval$ = 12						; size = 4
?emit@CPoly@@IAEXHH@Z PROC				; CPoly::emit, COMDAT
; _this$ = ecx

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  :     switch (t)

  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0000c	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  0000f	0f 87 1a 01 00
	00		 ja	 $LN13@emit
  00015	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@emit[eax]
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@emit[eax*4]
$LN4@emit:

; 473  :     {
; 474  : 	case '+':
; 475  : 	    tokenBase.push_back(POLY_PLU);

  00023	8d 45 08	 lea	 eax, DWORD PTR $T6[ebp]
  00026	c7 45 08 03 00
	00 00		 mov	 DWORD PTR $T6[ebp], 3
  0002d	50		 push	 eax
  0002e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00031	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00036	5e		 pop	 esi

; 524  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN5@emit:

; 476  : 	    break;
; 477  : 	case '-':
; 478  : 	    tokenBase.push_back(POLY_MIN);

  0003b	8d 45 08	 lea	 eax, DWORD PTR $T5[ebp]
  0003e	c7 45 08 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  00045	50		 push	 eax
  00046	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00049	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  0004e	5e		 pop	 esi

; 524  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN6@emit:

; 479  : 	    break;
; 480  : 	case '*':
; 481  : 	    tokenBase.push_back(POLY_MUL);

  00053	8d 45 08	 lea	 eax, DWORD PTR $T4[ebp]
  00056	c7 45 08 02 00
	00 00		 mov	 DWORD PTR $T4[ebp], 2
  0005d	50		 push	 eax
  0005e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00061	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00066	5e		 pop	 esi

; 524  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN7@emit:

; 482  : 	    break;
; 483  : 	case '/':
; 484  : 	    tokenBase.push_back(POLY_DIV);

  0006b	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  0006e	c7 45 08 06 00
	00 00		 mov	 DWORD PTR $T3[ebp], 6
  00075	50		 push	 eax
  00076	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00079	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  0007e	5e		 pop	 esi

; 524  : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN8@emit:

; 485  : 	    break;
; 486  : 	case '%':
; 487  : 	    tokenBase.push_back(POLY_MOD);

  00083	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  00086	c7 45 08 1a 00
	00 00		 mov	 DWORD PTR $T2[ebp], 26	; 0000001aH
  0008d	50		 push	 eax
  0008e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00091	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00096	5e		 pop	 esi

; 524  : }

  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
$LN9@emit:

; 488  : 	    break;
; 489  : 	case '^':
; 490  : 	    tokenBase.push_back(POLY_POW);

  0009b	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  0009e	c7 45 08 04 00
	00 00		 mov	 DWORD PTR $T1[ebp], 4
  000a5	50		 push	 eax
  000a6	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000a9	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  000ae	5e		 pop	 esi

; 524  : }

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN10@emit:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000b3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 509  : 	    tokenBase.push_back(t);

  000b6	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000b9	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000bc	74 0b		 je	 SHORT $LN18@emit

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000be	89 10		 mov	 DWORD PTR [eax], edx

; 690  :         ++_Mylast;

  000c0	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
  000c4	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 524  : }

  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
$LN18@emit:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c9	8d 55 08	 lea	 edx, DWORD PTR _t$[ebp]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
  000d3	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 524  : }

  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
$LN11@emit:

; 510  : 	    break;
; 511  : 	case POLY_NUM:
; 512  : 	    tokenBase.push_back(t);

  000d8	8d 45 08	 lea	 eax, DWORD PTR _t$[ebp]
  000db	50		 push	 eax
  000dc	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000df	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000e4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 513  : 	    numBase.push_back(iNumToken);

  000e7	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  000ea	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000ed	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000f0	74 13		 je	 SHORT $LN25@emit
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000f2	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  000f6	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  000fa	83 c0 08	 add	 eax, 8
  000fd	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00100	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 524  : }

  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN25@emit:
  00105	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00106	89 55 0c	 mov	 DWORD PTR _tval$[ebp], edx
  00109	89 45 08	 mov	 DWORD PTR _t$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 524  : }

  0010c	5d		 pop	 ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0010d	e9 00 00 00 00	 jmp	 ??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
$LN12@emit:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 516  : 	    tokenBase.push_back(t);

  00112	8d 45 08	 lea	 eax, DWORD PTR _t$[ebp]
  00115	50		 push	 eax
  00116	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00119	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 517  : 	    tokenBase.push_back(tval); break;

  0011e	8d 45 0c	 lea	 eax, DWORD PTR _tval$[ebp]
  00121	50		 push	 eax
  00122	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00125	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
  0012a	5e		 pop	 esi

; 524  : }

  0012b	5d		 pop	 ebp
  0012c	c2 08 00	 ret	 8
$LN13@emit:

; 518  : 	default:
; 519  : 	    error();

  0012f	e8 00 00 00 00	 call	 ?error@CPoly@@IAEXXZ	; CPoly::error

; 520  : 	    Clear();

  00134	8b ce		 mov	 ecx, esi
  00136	e8 00 00 00 00	 call	 ?Clear@CPoly@@QAEXXZ	; CPoly::Clear
  0013b	5e		 pop	 esi

; 524  : }

  0013c	5d		 pop	 ebp
  0013d	c2 08 00	 ret	 8
$LN32@emit:
  00140	00 00 00 00	 DD	 $LN10@emit
  00144	00 00 00 00	 DD	 $LN11@emit
  00148	00 00 00 00	 DD	 $LN12@emit
  0014c	00 00 00 00	 DD	 $LN8@emit
  00150	00 00 00 00	 DD	 $LN6@emit
  00154	00 00 00 00	 DD	 $LN4@emit
  00158	00 00 00 00	 DD	 $LN5@emit
  0015c	00 00 00 00	 DD	 $LN7@emit
  00160	00 00 00 00	 DD	 $LN9@emit
  00164	00 00 00 00	 DD	 $LN13@emit
$LN31@emit:
  00168	00		 DB	 0
  00169	09		 DB	 9
  0016a	09		 DB	 9
  0016b	09		 DB	 9
  0016c	09		 DB	 9
  0016d	09		 DB	 9
  0016e	09		 DB	 9
  0016f	09		 DB	 9
  00170	01		 DB	 1
  00171	02		 DB	 2
  00172	09		 DB	 9
  00173	00		 DB	 0
  00174	00		 DB	 0
  00175	00		 DB	 0
  00176	00		 DB	 0
  00177	00		 DB	 0
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	00		 DB	 0
  0017b	00		 DB	 0
  0017c	00		 DB	 0
  0017d	00		 DB	 0
  0017e	00		 DB	 0
  0017f	00		 DB	 0
  00180	00		 DB	 0
  00181	00		 DB	 0
  00182	00		 DB	 0
  00183	09		 DB	 9
  00184	09		 DB	 9
  00185	09		 DB	 9
  00186	09		 DB	 9
  00187	09		 DB	 9
  00188	09		 DB	 9
  00189	09		 DB	 9
  0018a	09		 DB	 9
  0018b	09		 DB	 9
  0018c	03		 DB	 3
  0018d	09		 DB	 9
  0018e	09		 DB	 9
  0018f	09		 DB	 9
  00190	09		 DB	 9
  00191	04		 DB	 4
  00192	05		 DB	 5
  00193	09		 DB	 9
  00194	06		 DB	 6
  00195	09		 DB	 9
  00196	07		 DB	 7
  00197	09		 DB	 9
  00198	09		 DB	 9
  00199	09		 DB	 9
  0019a	09		 DB	 9
  0019b	09		 DB	 9
  0019c	09		 DB	 9
  0019d	09		 DB	 9
  0019e	09		 DB	 9
  0019f	09		 DB	 9
  001a0	09		 DB	 9
  001a1	09		 DB	 9
  001a2	09		 DB	 9
  001a3	09		 DB	 9
  001a4	09		 DB	 9
  001a5	09		 DB	 9
  001a6	09		 DB	 9
  001a7	09		 DB	 9
  001a8	09		 DB	 9
  001a9	09		 DB	 9
  001aa	09		 DB	 9
  001ab	09		 DB	 9
  001ac	09		 DB	 9
  001ad	09		 DB	 9
  001ae	09		 DB	 9
  001af	09		 DB	 9
  001b0	09		 DB	 9
  001b1	09		 DB	 9
  001b2	09		 DB	 9
  001b3	09		 DB	 9
  001b4	09		 DB	 9
  001b5	09		 DB	 9
  001b6	09		 DB	 9
  001b7	09		 DB	 9
  001b8	09		 DB	 9
  001b9	09		 DB	 9
  001ba	09		 DB	 9
  001bb	09		 DB	 9
  001bc	09		 DB	 9
  001bd	09		 DB	 9
  001be	09		 DB	 9
  001bf	09		 DB	 9
  001c0	09		 DB	 9
  001c1	09		 DB	 9
  001c2	09		 DB	 9
  001c3	09		 DB	 9
  001c4	09		 DB	 9
  001c5	08		 DB	 8
?emit@CPoly@@IAEXHH@Z ENDP				; CPoly::emit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv298 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
tv296 = -4						; size = 4
_s$ = 8							; size = 4
?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPoly::find, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 528  :     int l, m, r;
; 529  : 
; 530  :     l = 0;
; 531  :     r = STSize - 1;

  00009	8b 79 58	 mov	 edi, DWORD PTR [ecx+88]
  0000c	33 db		 xor	 ebx, ebx
  0000e	83 ef 01	 sub	 edi, 1

; 532  : 
; 533  :     while (l <= r)

  00011	78 5b		 js	 SHORT $LN3@find
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00013	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00016	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00019	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  0001c	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  0001f	90		 npad	 1
$LL2@find:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 537  : 	if (lSymbol[SymbolIndex[m]]->strlex == s)

  00020	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00023	8d 34 1f	 lea	 esi, DWORD PTR [edi+ebx]
  00026	d1 fe		 sar	 esi, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00028	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  0002b	89 45 f0	 mov	 DWORD PTR tv298[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 537  : 	if (lSymbol[SymbolIndex[m]]->strlex == s)

  0002e	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00031	83 c0 14	 add	 eax, 20			; 00000014H
  00034	50		 push	 eax
  00035	89 45 fc	 mov	 DWORD PTR tv296[ebp], eax
  00038	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0003d	83 c4 08	 add	 esp, 8
  00040	84 c0		 test	 al, al
  00042	75 36		 jne	 SHORT $LN20@find

; 539  : 	else if (lSymbol[SymbolIndex[m]]->strlex < s)

  00044	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00047	ff 75 fc	 push	 DWORD PTR tv296[ebp]
  0004a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004f	8a c8		 mov	 cl, al
  00051	83 c4 08	 add	 esp, 8
  00054	84 c9		 test	 cl, cl
  00056	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00059	0f 44 f8	 cmove	 edi, eax
  0005c	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0005f	46		 inc	 esi
  00060	84 c9		 test	 cl, cl
  00062	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00065	0f 44 f3	 cmove	 esi, ebx
  00068	8b de		 mov	 ebx, esi
  0006a	3b df		 cmp	 ebx, edi
  0006c	7e b2		 jle	 SHORT $LL2@find
$LN3@find:
  0006e	5f		 pop	 edi

; 540  : 	    l = m + 1;
; 541  : 	else
; 542  : 	    r = m - 1;
; 543  :     }
; 544  :     return -1;
; 545  : }

  0006f	5e		 pop	 esi
  00070	83 c8 ff	 or	 eax, -1
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
$LN20@find:

; 538  : 	    return SymbolIndex[m];

  0007a	8b 45 f0	 mov	 eax, DWORD PTR tv298[ebp]
  0007d	5f		 pop	 edi

; 540  : 	    l = m + 1;
; 541  : 	else
; 542  : 	    r = m - 1;
; 543  :     }
; 544  :     return -1;
; 545  : }

  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPoly::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T3 = -40						; size = 4
tv992 = -36						; size = 4
_this$1$ = -36						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
__New_array$6 = -28					; size = 4
tv988 = -24						; size = 4
__Right_size$1$ = -24					; size = 4
tv1008 = -20						; size = 4
__Result$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
__Val$1$ = 12						; size = 4
$T7 = 12						; size = 4
_tok$ = 12						; size = 4
?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; CPoly::insert, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  0002c	6a 30		 push	 48			; 00000030H
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
  00039	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  0003c	85 c0		 test	 eax, eax
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00048	0f 84 92 00 00
	00		 je	 $LN8@insert
  0004e	83 ec 18	 sub	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00051	89 45 ec	 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  00054	8b fc		 mov	 edi, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00056	8b d0		 mov	 edx, eax

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2145 :         if (_Large_string_engaged()) {

  00066	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0006a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0006d	89 4d e8	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2145 :         if (_Large_string_engaged()) {

  00070	72 05		 jb	 SHORT $LN22@insert

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00072	8b 10		 mov	 edx, DWORD PTR [eax]
  00074	89 55 ec	 mov	 DWORD PTR __Result$1$[ebp], edx
$LN22@insert:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00077	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0007a	73 0d		 jae	 SHORT $LN19@insert

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007c	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  0007f	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00084	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2663 :             return;

  00087	eb 42		 jmp	 SHORT $LN18@insert
$LN19@insert:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00089	8b c1		 mov	 eax, ecx
  0008b	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00090	83 c8 0f	 or	 eax, 15			; 0000000fH
  00093	3b c1		 cmp	 eax, ecx
  00095	0f 47 c1	 cmova	 eax, ecx
  00098	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0009b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000a2	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000a4	8d 45 e4	 lea	 eax, DWORD PTR __New_array$6[ebp]
  000a7	50		 push	 eax
  000a8	57		 push	 edi
  000a9	89 75 e4	 mov	 DWORD PTR __New_array$6[ebp], esi
  000ac	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000b1	8b 4d e8	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000b4	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000b5	51		 push	 ecx
  000b6	ff 75 ec	 push	 DWORD PTR __Result$1$[ebp]
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 _memcpy
  000bf	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
  000c2	83 c4 18	 add	 esp, 24			; 00000018H
  000c5	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  000c8	8b 4d e8	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
$LN18@insert:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  000cb	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  000ce	89 47 14	 mov	 DWORD PTR [edi+20], eax
  000d1	ff 75 0c	 push	 DWORD PTR _tok$[ebp]
  000d4	8b 4d dc	 mov	 ecx, DWORD PTR $T4[ebp]
  000d7	e8 00 00 00 00	 call	 ??0CSymTable@@QAE@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSymTable::CSymTable
  000dc	8b d0		 mov	 edx, eax
  000de	eb 02		 jmp	 SHORT $LN9@insert
$LN8@insert:
  000e0	33 d2		 xor	 edx, edx
$LN9@insert:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000e2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  000e5	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000e8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ef	89 55 0c	 mov	 DWORD PTR $T7[ebp], edx
  000f2	89 4d dc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000f5	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000f8	74 08		 je	 SHORT $LN37@insert

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000fa	89 10		 mov	 DWORD PTR [eax], edx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  000fc	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00100	eb 0d		 jmp	 SHORT $LN36@insert
$LN37@insert:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00102	8d 55 0c	 lea	 edx, DWORD PTR $T7[ebp]
  00105	52		 push	 edx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@PAVCSymTable@@@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAEPAPAVCSymTable@@QAPAV2@$$QAPAV2@@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Emplace_reallocate<CSymTable *>
  0010c	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN36@insert:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 553  :     for (i=0;i<STSize;i++)

  0010f	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00112	83 c6 58	 add	 esi, 88			; 00000058H
  00115	33 ff		 xor	 edi, edi
  00117	89 75 0c	 mov	 DWORD PTR __Val$1$[ebp], esi
  0011a	89 45 ec	 mov	 DWORD PTR tv1008[ebp], eax
  0011d	85 c0		 test	 eax, eax
  0011f	7e 3d		 jle	 SHORT $LN96@insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00121	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
  00124	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00126	89 4d dc	 mov	 DWORD PTR tv992[ebp], ecx
  00129	8b 76 4c	 mov	 esi, DWORD PTR [esi+76]
  0012c	8b c6		 mov	 eax, esi
  0012e	89 75 e8	 mov	 DWORD PTR tv988[ebp], esi
$LL4@insert:
  00131	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 555  : 	if (s<lSymbol[SymbolIndex[i]]->strlex)

  00133	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00136	83 c0 14	 add	 eax, 20			; 00000014H
  00139	50		 push	 eax
  0013a	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0013d	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00142	83 c4 08	 add	 esp, 8
  00145	84 c0		 test	 al, al
  00147	75 2d		 jne	 SHORT $LN92@insert

; 553  :     for (i=0;i<STSize;i++)

  00149	8b 45 e8	 mov	 eax, DWORD PTR tv988[ebp]
  0014c	47		 inc	 edi
  0014d	8b 4d dc	 mov	 ecx, DWORD PTR tv992[ebp]
  00150	83 c0 04	 add	 eax, 4
  00153	89 45 e8	 mov	 DWORD PTR tv988[ebp], eax
  00156	3b 7d ec	 cmp	 edi, DWORD PTR tv1008[ebp]
  00159	7c d6		 jl	 SHORT $LL4@insert

; 555  : 	if (s<lSymbol[SymbolIndex[i]]->strlex)

  0015b	8b 75 0c	 mov	 esi, DWORD PTR __Val$1$[ebp]
$LN96@insert:

; 563  :     {
; 564  : 	//SymbolIndex.SetAtGrow(STSize,STSize);
; 565  : 	SymbolIndex.push_back(STSize);

  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00161	83 c1 4c	 add	 ecx, 76			; 0000004cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00164	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00167	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0016a	74 55		 je	 SHORT $LN87@insert

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0016c	8b 06		 mov	 eax, DWORD PTR [esi]
  0016e	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00170	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00174	eb 52		 jmp	 SHORT $LN86@insert
$LN92@insert:

; 773  :         const pointer _Oldlast  = _My_data._Mylast;

  00176	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]

; 120  :         _Ptr += _Off;

  00179	8d 3c be	 lea	 edi, DWORD PTR [esi+edi*4]

; 773  :         const pointer _Oldlast  = _My_data._Mylast;

  0017c	8b 72 50	 mov	 esi, DWORD PTR [edx+80]

; 774  : #if _ITERATOR_DEBUG_LEVEL == 2
; 775  :         _STL_VERIFY(
; 776  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 777  :             "vector emplace iterator outside range");
; 778  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 779  : 
; 780  :         if (_Oldlast != _My_data._Myend) {

  0017f	3b 72 54	 cmp	 esi, DWORD PTR [edx+84]
  00182	74 33		 je	 SHORT $LN60@insert

; 781  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee

  00184	3b fe		 cmp	 edi, esi
  00186	75 0e		 jne	 SHORT $LN61@insert

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00188	8b 45 ec	 mov	 eax, DWORD PTR tv1008[ebp]
  0018b	89 06		 mov	 DWORD PTR [esi], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  0018d	83 42 50 04	 add	 DWORD PTR [edx+80], 4

; 783  :             } else {

  00191	8b 75 0c	 mov	 esi, DWORD PTR __Val$1$[ebp]
  00194	eb 32		 jmp	 SHORT $LN86@insert
$LN61@insert:

; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  00196	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00199	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  0019c	56		 push	 esi
  0019d	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  0019e	89 06		 mov	 DWORD PTR [esi], eax

; 789  :                 ++_My_data._Mylast;

  001a0	83 42 50 04	 add	 DWORD PTR [edx+80], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  001a4	57		 push	 edi
  001a5	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 791  :                 *_Whereptr = _STD move(_Obj._Storage._Value);

  001aa	8b 45 ec	 mov	 eax, DWORD PTR tv1008[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 794  :             return _Make_iterator(_Whereptr);

  001b0	8b 75 0c	 mov	 esi, DWORD PTR __Val$1$[ebp]
  001b3	89 07		 mov	 DWORD PTR [edi], eax
  001b5	eb 11		 jmp	 SHORT $LN86@insert
$LN60@insert:

; 795  :         }
; 796  : 
; 797  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));

  001b7	8b 75 0c	 mov	 esi, DWORD PTR __Val$1$[ebp]
  001ba	8d 4a 4c	 lea	 ecx, DWORD PTR [edx+76]
  001bd	56		 push	 esi
  001be	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 562  :     if (!bAdded)

  001bf	eb 02		 jmp	 SHORT $LN98@insert
$LN87@insert:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001c1	56		 push	 esi
  001c2	52		 push	 edx
$LN98@insert:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 567  :     STSize++;

  001c3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
$LN86@insert:
  001c8	8b 06		 mov	 eax, DWORD PTR [esi]
  001ca	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  001cd	89 0e		 mov	 DWORD PTR [esi], ecx

; 568  :     return STSize-1;
; 569  : }

  001cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d9	59		 pop	 ecx
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	6a 30		 push	 48			; 00000030H
  00002	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; CPoly::insert
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?init@CPoly@@IAEXXZ
_TEXT	SEGMENT
$T2 = -40						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
$T5 = -40						; size = 24
$T6 = -40						; size = 24
$T7 = -40						; size = 24
$T8 = -40						; size = 24
$T9 = -40						; size = 24
$T10 = -40						; size = 24
$T11 = -40						; size = 24
$T12 = -40						; size = 24
$T13 = -40						; size = 24
$T14 = -40						; size = 24
$T15 = -40						; size = 24
$T16 = -40						; size = 24
$T17 = -40						; size = 24
$T18 = -40						; size = 24
$T19 = -40						; size = 24
$T20 = -40						; size = 24
$T21 = -40						; size = 24
$T22 = -40						; size = 24
$T23 = -40						; size = 24
$T24 = -40						; size = 24
$T25 = -40						; size = 24
$T26 = -40						; size = 24
$T27 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?init@CPoly@@IAEXXZ PROC				; CPoly::init, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@CPoly@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0002b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03KLIPLJLL@min@
  00031	66 89 45 d8	 mov	 WORD PTR $T27[ebp], ax
  00035	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03KLIPLJLL@min@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T27[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00041	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T27[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00048	88 45 da	 mov	 BYTE PTR $T27[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0004b	c6 45 db 00	 mov	 BYTE PTR $T27[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 595  :     insert("min",POLY_MINF);

  0004f	6a 16		 push	 22			; 00000016H
  00051	8d 45 d8	 lea	 eax, DWORD PTR $T27[ebp]
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00061	8b 45 ec	 mov	 eax, DWORD PTR $T27[ebp+20]
  00064	83 f8 10	 cmp	 eax, 16			; 00000010H
  00067	72 0d		 jb	 SHORT $LN80@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00069	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006a	50		 push	 eax
  0006b	ff 75 d8	 push	 DWORD PTR $T27[ebp]
  0006e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00073	83 c4 08	 add	 esp, 8
$LN80@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00076	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03LJAEFNNE@max@
  0007c	66 89 45 d8	 mov	 WORD PTR $T26[ebp], ax
  00080	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03LJAEFNNE@max@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00085	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T26[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0008c	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T26[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00093	88 45 da	 mov	 BYTE PTR $T26[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00096	c6 45 db 00	 mov	 BYTE PTR $T26[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 596  :     insert("max",POLY_MAXF);

  0009a	6a 17		 push	 23			; 00000017H
  0009c	8d 45 d8	 lea	 eax, DWORD PTR $T26[ebp]
  0009f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a6	50		 push	 eax
  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ae	8b 45 ec	 mov	 eax, DWORD PTR $T26[ebp+20]
  000b1	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b4	72 0d		 jb	 SHORT $LN136@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000b6	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b7	50		 push	 eax
  000b8	ff 75 d8	 push	 DWORD PTR $T26[ebp]
  000bb	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c0	83 c4 08	 add	 esp, 8
$LN136@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06EBGNBFIA@number@
  000c8	89 45 d8	 mov	 DWORD PTR $T25[ebp], eax
  000cb	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06EBGNBFIA@number@+4

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000d1	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  000d8	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 6

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000df	66 89 45 dc	 mov	 WORD PTR $T25[ebp+4], ax

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000e3	c6 45 de 00	 mov	 BYTE PTR $T25[ebp+6], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 597  :     insert("number", POLY_IRAND);

  000e7	6a 18		 push	 24			; 00000018H
  000e9	8d 45 d8	 lea	 eax, DWORD PTR $T25[ebp]
  000ec	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000f3	50		 push	 eax
  000f4	8b ce		 mov	 ecx, esi
  000f6	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000fb	8b 45 ec	 mov	 eax, DWORD PTR $T25[ebp+20]
  000fe	83 f8 10	 cmp	 eax, 16			; 00000010H
  00101	72 0d		 jb	 SHORT $LN192@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00103	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00104	50		 push	 eax
  00105	ff 75 d8	 push	 DWORD PTR $T25[ebp]
  00108	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0010d	83 c4 08	 add	 esp, 8
$LN192@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07OMLILGHE@irandom@
  00115	89 45 d8	 mov	 DWORD PTR $T24[ebp], eax
  00118	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07OMLILGHE@irandom@+4
  0011e	66 89 45 dc	 mov	 WORD PTR $T24[ebp+4], ax
  00122	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07OMLILGHE@irandom@+6

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00127	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T24[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0012e	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR $T24[ebp+16], 7

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00135	88 45 de	 mov	 BYTE PTR $T24[ebp+6], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00138	c6 45 df 00	 mov	 BYTE PTR $T24[ebp+7], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 598  :     insert("irandom", POLY_IRAND);

  0013c	6a 18		 push	 24			; 00000018H
  0013e	8d 45 d8	 lea	 eax, DWORD PTR $T24[ebp]
  00141	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00148	50		 push	 eax
  00149	8b ce		 mov	 ecx, esi
  0014b	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00150	8b 45 ec	 mov	 eax, DWORD PTR $T24[ebp+20]
  00153	83 f8 10	 cmp	 eax, 16			; 00000010H
  00156	72 0d		 jb	 SHORT $LN248@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00158	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00159	50		 push	 eax
  0015a	ff 75 d8	 push	 DWORD PTR $T24[ebp]
  0015d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00162	83 c4 08	 add	 esp, 8
$LN248@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00165	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05CCJGGLIO@irand@
  0016a	89 45 d8	 mov	 DWORD PTR $T23[ebp], eax
  0016d	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05CCJGGLIO@irand@+4

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00172	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00179	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 5

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00180	88 45 dc	 mov	 BYTE PTR $T23[ebp+4], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00183	c6 45 dd 00	 mov	 BYTE PTR $T23[ebp+5], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 599  :     insert("irand", POLY_IRAND);

  00187	6a 18		 push	 24			; 00000018H
  00189	8d 45 d8	 lea	 eax, DWORD PTR $T23[ebp]
  0018c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00193	50		 push	 eax
  00194	8b ce		 mov	 ecx, esi
  00196	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0019b	8b 45 ec	 mov	 eax, DWORD PTR $T23[ebp+20]
  0019e	83 f8 10	 cmp	 eax, 16			; 00000010H
  001a1	72 0d		 jb	 SHORT $LN304@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001a3	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a4	50		 push	 eax
  001a5	ff 75 d8	 push	 DWORD PTR $T23[ebp]
  001a8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001ad	83 c4 08	 add	 esp, 8
$LN304@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07DFJIKENI@frandom@
  001b5	89 45 d8	 mov	 DWORD PTR $T22[ebp], eax
  001b8	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07DFJIKENI@frandom@+4
  001be	66 89 45 dc	 mov	 WORD PTR $T22[ebp+4], ax
  001c2	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07DFJIKENI@frandom@+6

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001c7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  001ce	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 7

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  001d5	88 45 de	 mov	 BYTE PTR $T22[ebp+6], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001d8	c6 45 df 00	 mov	 BYTE PTR $T22[ebp+7], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 600  :     insert("frandom",POLY_FRAND);

  001dc	6a 19		 push	 25			; 00000019H
  001de	8d 45 d8	 lea	 eax, DWORD PTR $T22[ebp]
  001e1	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  001e8	50		 push	 eax
  001e9	8b ce		 mov	 ecx, esi
  001eb	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001f0	8b 45 ec	 mov	 eax, DWORD PTR $T22[ebp+20]
  001f3	83 f8 10	 cmp	 eax, 16			; 00000010H
  001f6	72 0d		 jb	 SHORT $LN360@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001f8	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f9	50		 push	 eax
  001fa	ff 75 d8	 push	 DWORD PTR $T22[ebp]
  001fd	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00202	83 c4 08	 add	 esp, 8
$LN360@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00205	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05NDMANJFL@frand@
  0020a	89 45 d8	 mov	 DWORD PTR $T21[ebp], eax
  0020d	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05NDMANJFL@frand@+4

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00212	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00219	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 5

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00220	88 45 dc	 mov	 BYTE PTR $T21[ebp+4], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00223	c6 45 dd 00	 mov	 BYTE PTR $T21[ebp+5], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 601  :     insert("frand",POLY_FRAND);

  00227	6a 19		 push	 25			; 00000019H
  00229	8d 45 d8	 lea	 eax, DWORD PTR $T21[ebp]
  0022c	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00233	50		 push	 eax
  00234	8b ce		 mov	 ecx, esi
  00236	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0023b	8b 45 ec	 mov	 eax, DWORD PTR $T21[ebp+20]
  0023e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00241	72 0d		 jb	 SHORT $LN416@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00243	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00244	50		 push	 eax
  00245	ff 75 d8	 push	 DWORD PTR $T21[ebp]
  00248	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0024d	83 c4 08	 add	 esp, 8
$LN416@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00250	b8 72 74 00 00	 mov	 eax, 29810		; 00007472H

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00255	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0025c	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 2

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00263	66 89 45 d8	 mov	 WORD PTR $T20[ebp], ax

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00267	c6 45 da 00	 mov	 BYTE PTR $T20[ebp+2], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 602  :     insert("rt",POLY_ROOT);

  0026b	6a 01		 push	 1
  0026d	8d 45 d8	 lea	 eax, DWORD PTR $T20[ebp]
  00270	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  00277	50		 push	 eax
  00278	8b ce		 mov	 ecx, esi
  0027a	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0027f	8b 45 ec	 mov	 eax, DWORD PTR $T20[ebp+20]
  00282	83 f8 10	 cmp	 eax, 16			; 00000010H
  00285	72 0d		 jb	 SHORT $LN472@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00287	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00288	50		 push	 eax
  00289	ff 75 d8	 push	 DWORD PTR $T20[ebp]
  0028c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00291	83 c4 08	 add	 esp, 8
$LN472@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00294	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0029b	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 4

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002a2	c7 45 d8 73 71
	72 74		 mov	 DWORD PTR $T19[ebp], 1953657203 ; 74727173H

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002a9	c6 45 dc 00	 mov	 BYTE PTR $T19[ebp+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 603  :     insert("sqrt",POLY_ROOT);

  002ad	6a 01		 push	 1
  002af	8d 45 d8	 lea	 eax, DWORD PTR $T19[ebp]
  002b2	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  002b9	50		 push	 eax
  002ba	8b ce		 mov	 ecx, esi
  002bc	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002c1	8b 45 ec	 mov	 eax, DWORD PTR $T19[ebp+20]
  002c4	83 f8 10	 cmp	 eax, 16			; 00000010H
  002c7	72 0d		 jb	 SHORT $LN528@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002c9	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ca	50		 push	 eax
  002cb	ff 75 d8	 push	 DWORD PTR $T19[ebp]
  002ce	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002d3	83 c4 08	 add	 esp, 8
$LN528@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002d6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03LALBNOCG@cos@
  002dc	66 89 45 d8	 mov	 WORD PTR $T18[ebp], ax
  002e0	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03LALBNOCG@cos@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002e5	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  002ec	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002f3	88 45 da	 mov	 BYTE PTR $T18[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002f6	c6 45 db 00	 mov	 BYTE PTR $T18[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 604  :     insert("cos",POLY_COS);

  002fa	6a 0c		 push	 12			; 0000000cH
  002fc	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  002ff	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00306	50		 push	 eax
  00307	8b ce		 mov	 ecx, esi
  00309	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0030e	8b 45 ec	 mov	 eax, DWORD PTR $T18[ebp+20]
  00311	83 f8 10	 cmp	 eax, 16			; 00000010H
  00314	72 0d		 jb	 SHORT $LN584@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00316	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00317	50		 push	 eax
  00318	ff 75 d8	 push	 DWORD PTR $T18[ebp]
  0031b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00320	83 c4 08	 add	 esp, 8
$LN584@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00323	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03BLEJJJBH@sin@
  00329	66 89 45 d8	 mov	 WORD PTR $T17[ebp], ax
  0032d	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03BLEJJJBH@sin@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00332	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00339	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00340	88 45 da	 mov	 BYTE PTR $T17[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00343	c6 45 db 00	 mov	 BYTE PTR $T17[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 605  :     insert("sin",POLY_SIN);

  00347	6a 0d		 push	 13			; 0000000dH
  00349	8d 45 d8	 lea	 eax, DWORD PTR $T17[ebp]
  0034c	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00353	50		 push	 eax
  00354	8b ce		 mov	 ecx, esi
  00356	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0035b	8b 45 ec	 mov	 eax, DWORD PTR $T17[ebp+20]
  0035e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00361	72 0d		 jb	 SHORT $LN640@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00363	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00364	50		 push	 eax
  00365	ff 75 d8	 push	 DWORD PTR $T17[ebp]
  00368	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0036d	83 c4 08	 add	 esp, 8
$LN640@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00370	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03IIINPABG@tan@
  00376	66 89 45 d8	 mov	 WORD PTR $T16[ebp], ax
  0037a	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03IIINPABG@tan@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0037f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00386	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0038d	88 45 da	 mov	 BYTE PTR $T16[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00390	c6 45 db 00	 mov	 BYTE PTR $T16[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 606  :     insert("tan",POLY_TAN);

  00394	6a 0e		 push	 14			; 0000000eH
  00396	8d 45 d8	 lea	 eax, DWORD PTR $T16[ebp]
  00399	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  003a0	50		 push	 eax
  003a1	8b ce		 mov	 ecx, esi
  003a3	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003a8	8b 45 ec	 mov	 eax, DWORD PTR $T16[ebp+20]
  003ab	83 f8 10	 cmp	 eax, 16			; 00000010H
  003ae	72 0d		 jb	 SHORT $LN696@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003b0	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b1	50		 push	 eax
  003b2	ff 75 d8	 push	 DWORD PTR $T16[ebp]
  003b5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003ba	83 c4 08	 add	 esp, 8
$LN696@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  003bd	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03PPPAEIOB@cot@
  003c3	66 89 45 d8	 mov	 WORD PTR $T15[ebp], ax
  003c7	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03PPPAEIOB@cot@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  003cc	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  003d3	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  003da	88 45 da	 mov	 BYTE PTR $T15[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  003dd	c6 45 db 00	 mov	 BYTE PTR $T15[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 607  :     insert("cot",POLY_COT);

  003e1	6a 11		 push	 17			; 00000011H
  003e3	8d 45 d8	 lea	 eax, DWORD PTR $T15[ebp]
  003e6	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  003ed	50		 push	 eax
  003ee	8b ce		 mov	 ecx, esi
  003f0	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003f5	8b 45 ec	 mov	 eax, DWORD PTR $T15[ebp+20]
  003f8	83 f8 10	 cmp	 eax, 16			; 00000010H
  003fb	72 0d		 jb	 SHORT $LN752@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003fd	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003fe	50		 push	 eax
  003ff	ff 75 d8	 push	 DWORD PTR $T15[ebp]
  00402	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00407	83 c4 08	 add	 esp, 8
$LN752@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0040a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03OPEPJGGD@csc@
  00410	66 89 45 d8	 mov	 WORD PTR $T14[ebp], ax
  00414	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03OPEPJGGD@csc@+2

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00419	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00420	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 3

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00427	88 45 da	 mov	 BYTE PTR $T14[ebp+2], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0042a	c6 45 db 00	 mov	 BYTE PTR $T14[ebp+3], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 608  :     insert("csc",POLY_CSC);

  0042e	6a 0f		 push	 15			; 0000000fH
  00430	8d 45 d8	 lea	 eax, DWORD PTR $T14[ebp]
  00433	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0043a	50		 push	 eax
  0043b	8b ce		 mov	 ecx, esi
  0043d	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00442	8b 45 ec	 mov	 eax, DWORD PTR $T14[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 608  :     insert("csc",POLY_CSC);

  00445	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0044c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0044f	72 0d		 jb	 SHORT $LN808@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00451	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00452	50		 push	 eax
  00453	ff 75 d8	 push	 DWORD PTR $T14[ebp]
  00456	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0045b	83 c4 08	 add	 esp, 8
$LN808@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0045e	6a 05		 push	 5
  00460	68 00 00 00 00	 push	 OFFSET ??_C@_05KCHJPNOJ@cosec@
  00465	8d 4d d8	 lea	 ecx, DWORD PTR $T13[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00468	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0046f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00476	c6 45 d8 00	 mov	 BYTE PTR $T13[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0047a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 609  :     insert("cosec",POLY_COSEC);

  0047f	6a 0f		 push	 15			; 0000000fH
  00481	8d 45 d8	 lea	 eax, DWORD PTR $T13[ebp]
  00484	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0048b	50		 push	 eax
  0048c	8b ce		 mov	 ecx, esi
  0048e	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00493	8b 45 ec	 mov	 eax, DWORD PTR $T13[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 609  :     insert("cosec",POLY_COSEC);

  00496	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0049d	83 f8 10	 cmp	 eax, 16			; 00000010H
  004a0	72 0d		 jb	 SHORT $LN830@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004a2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004a3	50		 push	 eax
  004a4	ff 75 d8	 push	 DWORD PTR $T13[ebp]
  004a7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004ac	83 c4 08	 add	 esp, 8
$LN830@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004af	6a 03		 push	 3
  004b1	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  004b6	8d 4d d8	 lea	 ecx, DWORD PTR $T12[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  004b9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  004c0	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  004c7	c6 45 d8 00	 mov	 BYTE PTR $T12[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004cb	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 610  :     insert("sec",POLY_SEC);

  004d0	6a 10		 push	 16			; 00000010H
  004d2	8d 45 d8	 lea	 eax, DWORD PTR $T12[ebp]
  004d5	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  004dc	50		 push	 eax
  004dd	8b ce		 mov	 ecx, esi
  004df	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004e4	8b 45 ec	 mov	 eax, DWORD PTR $T12[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 610  :     insert("sec",POLY_SEC);

  004e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004ee	83 f8 10	 cmp	 eax, 16			; 00000010H
  004f1	72 0d		 jb	 SHORT $LN852@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004f3	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004f4	50		 push	 eax
  004f5	ff 75 d8	 push	 DWORD PTR $T12[ebp]
  004f8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004fd	83 c4 08	 add	 esp, 8
$LN852@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00500	6a 02		 push	 2
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  00507	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0050a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00511	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00518	c6 45 d8 00	 mov	 BYTE PTR $T11[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0051c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 611  :     insert("pi",POLY_PI);

  00521	6a 0a		 push	 10			; 0000000aH
  00523	8d 45 d8	 lea	 eax, DWORD PTR $T11[ebp]
  00526	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0052d	50		 push	 eax
  0052e	8b ce		 mov	 ecx, esi
  00530	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00535	8b 45 ec	 mov	 eax, DWORD PTR $T11[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 611  :     insert("pi",POLY_PI);

  00538	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0053f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00542	72 0d		 jb	 SHORT $LN874@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00544	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00545	50		 push	 eax
  00546	ff 75 d8	 push	 DWORD PTR $T11[ebp]
  00549	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0054e	83 c4 08	 add	 esp, 8
$LN874@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00551	6a 02		 push	 2
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  00558	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0055b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00562	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00569	c6 45 d8 00	 mov	 BYTE PTR $T10[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0056d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 612  :     SetVar("pi",3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068);

  00572	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@400921fb54442d18
  0057a	8d 45 d8	 lea	 eax, DWORD PTR $T10[ebp]
  0057d	83 ec 08	 sub	 esp, 8
  00580	8b ce		 mov	 ecx, esi
  00582	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00587	50		 push	 eax
  00588	e8 00 00 00 00	 call	 ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0058d	8b 45 ec	 mov	 eax, DWORD PTR $T10[ebp+20]
  00590	83 f8 10	 cmp	 eax, 16			; 00000010H
  00593	72 0d		 jb	 SHORT $LN896@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00595	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00596	50		 push	 eax
  00597	ff 75 d8	 push	 DWORD PTR $T10[ebp]
  0059a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0059f	83 c4 08	 add	 esp, 8
$LN896@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005a2	6a 01		 push	 1
  005a4	68 00 00 00 00	 push	 OFFSET ??_C@_01KGKMHCOC@e@
  005a9	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  005ac	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  005b3	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  005ba	c6 45 d8 00	 mov	 BYTE PTR $T9[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005be	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 613  :     insert("e",POLY_EXP);

  005c3	6a 0a		 push	 10			; 0000000aH
  005c5	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  005c8	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  005cf	50		 push	 eax
  005d0	8b ce		 mov	 ecx, esi
  005d2	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  005d7	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 613  :     insert("e",POLY_EXP);

  005da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  005e1	83 f8 10	 cmp	 eax, 16			; 00000010H
  005e4	72 0d		 jb	 SHORT $LN918@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  005e6	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005e7	50		 push	 eax
  005e8	ff 75 d8	 push	 DWORD PTR $T9[ebp]
  005eb	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  005f0	83 c4 08	 add	 esp, 8
$LN918@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005f3	6a 01		 push	 1
  005f5	68 00 00 00 00	 push	 OFFSET ??_C@_01KGKMHCOC@e@
  005fa	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  005fd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00604	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0060b	c6 45 d8 00	 mov	 BYTE PTR $T8[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0060f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 614  :     SetVar("e",2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427);

  00614	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4005bf0a8b145769
  0061c	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
  0061f	83 ec 08	 sub	 esp, 8
  00622	8b ce		 mov	 ecx, esi
  00624	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00629	50		 push	 eax
  0062a	e8 00 00 00 00	 call	 ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0062f	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp+20]
  00632	83 f8 10	 cmp	 eax, 16			; 00000010H
  00635	72 0d		 jb	 SHORT $LN940@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00637	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00638	50		 push	 eax
  00639	ff 75 d8	 push	 DWORD PTR $T8[ebp]
  0063c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00641	83 c4 08	 add	 esp, 8
$LN940@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00644	6a 03		 push	 3
  00646	68 00 00 00 00	 push	 OFFSET ??_C@_03MGHMBJCF@log@
  0064b	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0064e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00655	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0065c	c6 45 d8 00	 mov	 BYTE PTR $T7[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00660	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 615  :     insert("log",POLY_LOG);

  00665	6a 12		 push	 18			; 00000012H
  00667	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  0066a	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00671	50		 push	 eax
  00672	8b ce		 mov	 ecx, esi
  00674	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00679	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 615  :     insert("log",POLY_LOG);

  0067c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00683	83 f8 10	 cmp	 eax, 16			; 00000010H
  00686	72 0d		 jb	 SHORT $LN962@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00688	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00689	50		 push	 eax
  0068a	ff 75 d8	 push	 DWORD PTR $T7[ebp]
  0068d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00692	83 c4 08	 add	 esp, 8
$LN962@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00695	6a 02		 push	 2
  00697	68 00 00 00 00	 push	 OFFSET ??_C@_02LKANFCIA@ln@
  0069c	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0069f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  006a6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  006ad	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006b1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 616  :     insert("ln",POLY_LN);

  006b6	6a 13		 push	 19			; 00000013H
  006b8	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  006bb	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 19 ; 00000013H
  006c2	50		 push	 eax
  006c3	8b ce		 mov	 ecx, esi
  006c5	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006ca	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 616  :     insert("ln",POLY_LN);

  006cd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006d4	83 f8 10	 cmp	 eax, 16			; 00000010H
  006d7	72 0d		 jb	 SHORT $LN984@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  006d9	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006da	50		 push	 eax
  006db	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  006de	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  006e3	83 c4 08	 add	 esp, 8
$LN984@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006e6	6a 05		 push	 5
  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_05HGHHAHAP@log10@
  006ed	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  006f0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  006f7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  006fe	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00702	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 617  :     insert("log10",POLY_LOG10);

  00707	6a 14		 push	 20			; 00000014H
  00709	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0070c	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00713	50		 push	 eax
  00714	8b ce		 mov	 ecx, esi
  00716	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0071b	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 617  :     insert("log10",POLY_LOG10);

  0071e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00725	83 f8 10	 cmp	 eax, 16			; 00000010H
  00728	72 0d		 jb	 SHORT $LN1006@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0072a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0072b	50		 push	 eax
  0072c	ff 75 d8	 push	 DWORD PTR $T5[ebp]
  0072f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00734	83 c4 08	 add	 esp, 8
$LN1006@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00737	6a 03		 push	 3
  00739	68 00 00 00 00	 push	 OFFSET ??_C@_03BCGAIFPO@abs@
  0073e	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00741	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00748	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0074f	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00753	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 618  :     insert("abs",POLY_ABS);

  00758	6a 15		 push	 21			; 00000015H
  0075a	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  0075d	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00764	50		 push	 eax
  00765	8b ce		 mov	 ecx, esi
  00767	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0076c	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 618  :     insert("abs",POLY_ABS);

  0076f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00776	83 f8 10	 cmp	 eax, 16			; 00000010H
  00779	72 0d		 jb	 SHORT $LN1028@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0077b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0077c	50		 push	 eax
  0077d	ff 75 d8	 push	 DWORD PTR $T4[ebp]
  00780	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00785	83 c4 08	 add	 esp, 8
$LN1028@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00788	6a 03		 push	 3
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_03FFONCNID@mod@
  0078f	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00792	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00799	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  007a0	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 619  :     insert("mod",POLY_MOD);

  007a9	6a 1a		 push	 26			; 0000001aH
  007ab	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  007ae	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 22 ; 00000016H
  007b5	50		 push	 eax
  007b6	8b ce		 mov	 ecx, esi
  007b8	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  007bd	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 619  :     insert("mod",POLY_MOD);

  007c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  007c7	83 f8 10	 cmp	 eax, 16			; 00000010H
  007ca	72 0d		 jb	 SHORT $LN1050@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  007cc	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007cd	50		 push	 eax
  007ce	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  007d1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  007d6	83 c4 08	 add	 esp, 8
$LN1050@init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007d9	6a 05		 push	 5
  007db	68 00 00 00 00	 push	 OFFSET ??_C@_05PBJFFIGL@floor@
  007e0	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  007e3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  007ea	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  007f1	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007f5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 620  :     insert("floor",POLY_FLOOR);

  007fa	6a 1b		 push	 27			; 0000001bH
  007fc	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  007ff	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 23 ; 00000017H
  00806	50		 push	 eax
  00807	8b ce		 mov	 ecx, esi
  00809	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0080e	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+20]
  00811	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00814	72 0d		 jb	 SHORT $LN1078@init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00816	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00817	50		 push	 eax
  00818	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  0081b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00820	83 c4 08	 add	 esp, 8
$LN1078@init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 622  : }

  00823	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00826	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00829	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0082c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00833	59		 pop	 ecx
  00834	5e		 pop	 esi
  00835	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00838	33 cd		 xor	 ecx, ebp
  0083a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0083f	8b e5		 mov	 esp, ebp
  00841	5d		 pop	 ebp
  00842	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@CPoly@@IAEXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T27[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T26[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$4:
  00020	8d 4d d8	 lea	 ecx, DWORD PTR $T23[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$5:
  00028	8d 4d d8	 lea	 ecx, DWORD PTR $T22[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$6:
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$7:
  00038	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$8:
  00040	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$9:
  00048	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$10:
  00050	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$11:
  00058	8d 4d d8	 lea	 ecx, DWORD PTR $T16[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$12:
  00060	8d 4d d8	 lea	 ecx, DWORD PTR $T15[ebp]
  00063	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$13:
  00068	8d 4d d8	 lea	 ecx, DWORD PTR $T14[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$14:
  00070	8d 4d d8	 lea	 ecx, DWORD PTR $T13[ebp]
  00073	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$15:
  00078	8d 4d d8	 lea	 ecx, DWORD PTR $T12[ebp]
  0007b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$16:
  00080	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  00083	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$18:
  00088	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  0008b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$20:
  00090	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  00093	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$21:
  00098	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0009b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$22:
  000a0	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  000a3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$23:
  000a8	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$24:
  000b0	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$25:
  000b8	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000bb	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c0	cc		 int	 3
  000c1	cc		 int	 3
  000c2	cc		 int	 3
  000c3	cc		 int	 3
  000c4	cc		 int	 3
__ehhandler$?init@CPoly@@IAEXXZ:
  000c5	90		 npad	 1
  000c6	90		 npad	 1
  000c7	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000cb	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000ce	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  000d1	33 c8		 xor	 ecx, eax
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000db	33 c8		 xor	 ecx, eax
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@CPoly@@IAEXXZ
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@CPoly@@IAEXXZ ENDP				; CPoly::init
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?my_frandom@CPoly@@IAENNN@Z
_TEXT	SEGMENT
_start$ = 8						; size = 8
_end$ = 16						; size = 8
?my_frandom@CPoly@@IAENNN@Z PROC			; CPoly::my_frandom, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   :     return _random() * (end - start) + start;

  00003	e8 00 00 00 00	 call	 ?_random@@YANXZ		; _random
  00008	dd 45 10	 fld	 QWORD PTR _end$[ebp]
  0000b	dd 45 08	 fld	 QWORD PTR _start$[ebp]
  0000e	dc e9		 fsub	 ST(1), ST(0)
  00010	d9 ca		 fxch	 ST(2)
  00012	de c9		 fmulp	 ST(1), ST(0)
  00014	de c1		 faddp	 ST(1), ST(0)

; 44   : }

  00016	5d		 pop	 ebp
  00017	c2 10 00	 ret	 16			; 00000010H
?my_frandom@CPoly@@IAENNN@Z ENDP			; CPoly::my_frandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?my_irandom@CPoly@@IAEHNN@Z
_TEXT	SEGMENT
_start$ = 8						; size = 8
tv129 = 16						; size = 8
tv90 = 16						; size = 8
tv88 = 16						; size = 8
_end$ = 16						; size = 8
?my_irandom@CPoly@@IAEHNN@Z PROC			; CPoly::my_irandom, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	switch (m_iRandomType)

  00003	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00006	83 e8 01	 sub	 eax, 1
  00009	74 66		 je	 SHORT $LN4@my_irandom
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 58		 je	 SHORT $LN5@my_irandom

; 31   : 			break;
; 32   : 	}
; 33   : 
; 34   :     // Make range as inclusive-exclusive
; 35   :     int is = int(start + 0.5);
; 36   :     int ie = int(end - start + 0.5) + 1;
; 37   : 
; 38   :     return int(_random() * ie + is);

  00010	e8 00 00 00 00	 call	 ?_random@@YANXZ		; _random
  00015	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _end$[ebp]
  0001a	f2 0f 10 55 08	 movsd	 xmm2, QWORD PTR _start$[ebp]
  0001f	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00023	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fe0000000000000
  0002b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00033	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00037	40		 inc	 eax
  00038	66 0f 6e c0	 movd	 xmm0, eax
  0003c	f2 0f 2c c2	 cvttsd2si eax, xmm2
  00040	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00044	f2 0f 11 45 10	 movsd	 QWORD PTR tv129[ebp], xmm0
  00049	dc 4d 10	 fmul	 QWORD PTR tv129[ebp]
  0004c	66 0f 6e c0	 movd	 xmm0, eax
  00050	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00054	f2 0f 11 45 10	 movsd	 QWORD PTR tv90[ebp], xmm0
  00059	dc 45 10	 fadd	 QWORD PTR tv90[ebp]
  0005c	dd 5d 10	 fstp	 QWORD PTR tv88[ebp]
  0005f	f2 0f 2c 45 10	 cvttsd2si eax, QWORD PTR tv88[ebp]

; 39   : }

  00064	5d		 pop	 ebp
  00065	c2 10 00	 ret	 16			; 00000010H
$LN5@my_irandom:

; 28   : 			break;
; 29   : 		case RANDOM_TYPE_FORCE_MAX:
; 30   : 			return int(end);

  00068	f2 0f 2c 45 10	 cvttsd2si eax, QWORD PTR _end$[ebp]

; 39   : }

  0006d	5d		 pop	 ebp
  0006e	c2 10 00	 ret	 16			; 00000010H
$LN4@my_irandom:

; 25   : 	{
; 26   : 		case RANDOM_TYPE_FORCE_MIN:
; 27   : 			return int(start);

  00071	f2 0f 2c 45 08	 cvttsd2si eax, QWORD PTR _start$[ebp]

; 39   : }

  00076	5d		 pop	 ebp
  00077	c2 10 00	 ret	 16			; 00000010H
?my_irandom@CPoly@@IAEHNN@Z ENDP			; CPoly::my_irandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Clear@CPoly@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPoly@@QAEXXZ PROC				; CPoly::Clear, COMDAT
; _this$ = ecx

; 259  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 260  :     int i;
; 261  :     //while (!tokenBase.IsEmpty()) listBase.RemoveTail();
; 262  :     //while (!numBase.IsEmpty()) numBase.RemoveTail();
; 263  :     tokenBase.clear();
; 264  :     numBase.clear();
; 265  : 
; 266  :     for (i = 0;i < STSize; ++i)

  00004	33 ff		 xor	 edi, edi
  00006	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00009	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0000c	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0000f	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00012	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00015	7e 20		 jle	 SHORT $LN3@Clear
$LL4@Clear:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00017	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 268  : 	if (lSymbol[i]) delete lSymbol[i];

  0001a	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 09		 je	 SHORT $LN19@Clear
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	6a 01		 push	 1
  00025	ff 10		 call	 DWORD PTR [eax]
  00027	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
$LN19@Clear:

; 269  : 	lSymbol[i]=NULL;

  0002a	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0
  00031	47		 inc	 edi
  00032	3b 7e 58	 cmp	 edi, DWORD PTR [esi+88]
  00035	7c e0		 jl	 SHORT $LL4@Clear
$LN3@Clear:

; 270  :     }
; 271  :     //lSymbol.FreeExtra();
; 272  :     lSymbol.clear();

  00037	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0003a	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 273  :     SymbolIndex.clear();

  0003d	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]

; 274  :     STSize=0;
; 275  : 	MathSymbolCount=0;

  00040	5f		 pop	 edi
  00041	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00044	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004b	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00052	5e		 pop	 esi

; 276  : }

  00053	c3		 ret	 0
?Clear@CPoly@@QAEXXZ ENDP				; CPoly::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?GetVarName@CPoly@@QAEPBDI@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetVarName@CPoly@@QAEPBDI@Z PROC			; CPoly::GetVarName, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00003	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00006	03 55 08	 add	 edx, DWORD PTR _dwIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  00009	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0000c	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H

; 2153 :         return _BUF_SIZE <= _Myres;

  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00016	72 02		 jb	 SHORT $LN8@GetVarName
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 590  : 	return lSymbol[dwIndex + MathSymbolCount]->strlex.c_str();

  00018	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@GetVarName:

; 591  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetVarName@CPoly@@QAEPBDI@Z ENDP			; CPoly::GetVarName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?GetVarCount@CPoly@@QAEHXZ
_TEXT	SEGMENT
?GetVarCount@CPoly@@QAEHXZ PROC				; CPoly::GetVarCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00003	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 584  : 	return lSymbol.size() - MathSymbolCount;

  00009	2b 41 5c	 sub	 eax, DWORD PTR [ecx+92]

; 585  : }

  0000c	c3		 ret	 0
?GetVarCount@CPoly@@QAEHXZ ENDP				; CPoly::GetVarCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
_TEXT	SEGMENT
_strName$ = 8						; size = 4
_dVar$ = 12						; size = 8
?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z PROC ; CPoly::SetVar, COMDAT
; _this$ = ecx

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 573  : 
; 574  :     if (ErrorOccur) return false;

  00006	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0000a	75 27		 jne	 SHORT $LN7@SetVar

; 575  :     int index=find(strName);

  0000c	ff 75 08	 push	 DWORD PTR _strName$[ebp]
  0000f	e8 00 00 00 00	 call	 ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find

; 576  :     if (index==-1) return false;

  00014	83 f8 ff	 cmp	 eax, -1
  00017	74 1a		 je	 SHORT $LN7@SetVar

; 577  :     CSymTable* stVar = lSymbol[(/*FindIndex*/(index))];
; 578  :     stVar->dVal=dVar;

  00019	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0001c	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _dVar$[ebp]
  00021	5e		 pop	 esi
  00022	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00025	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0

; 579  :     return true;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 580  : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN7@SetVar:

; 576  :     if (index==-1) return false;

  00033	33 c0		 xor	 eax, eax
  00035	5e		 pop	 esi

; 580  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ENDP ; CPoly::SetVar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPoly::SetStr, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 65   :     strData = str;

  00006	83 c1 60	 add	 ecx, 96			; 00000060H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 13		 je	 SHORT $LN4@SetStr

; 2153 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00011	8b d0		 mov	 edx, eax

; 2145 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN9@SetStr

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN9@SetStr:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetStr:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 66   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPoly::SetStr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetRandom@CPoly@@QAEXH@Z
_TEXT	SEGMENT
_iRandomType$ = 8					; size = 4
?SetRandom@CPoly@@QAEXH@Z PROC				; CPoly::SetRandom, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   : 	m_iRandomType = iRandomType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iRandomType$[ebp]
  00006	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 20   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRandom@CPoly@@QAEXH@Z ENDP				; CPoly::SetRandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Eval@CPoly@@QAEMXZ
_TEXT	SEGMENT
_iSp$1$ = -828						; size = 4
tv1356 = -824						; size = 4
tv1388 = -820						; size = 4
_this$1$ = -820						; size = 4
_t$3$ = -816						; size = 8
tv1330 = -816						; size = 8
tv760 = -816						; size = 8
_save$ = -808						; size = 800
__$ArrayPad$ = -4					; size = 4
?Eval@CPoly@@QAEMXZ PROC				; CPoly::Eval, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 40 03 00
	00		 sub	 esp, 832		; 00000340H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 3c 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+832], eax
  0001a	8b c1		 mov	 eax, ecx

; 70   :     int stNow;
; 71   :     double save[POLY_MAXSTACK],t;
; 72   :     int iSp=0;

  0001c	33 d2		 xor	 edx, edx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	89 44 24 14	 mov	 DWORD PTR _this$1$[esp+840], eax
  00024	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx

; 73   :     if (ErrorOccur)

  00028	38 50 20	 cmp	 BYTE PTR [eax+32], dl
  0002b	0f 85 90 04 00
	00		 jne	 $LN43@Eval
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00031	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00034	8b 78 34	 mov	 edi, DWORD PTR [eax+52]
  00037	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 84   :     while (pos != tokenBase.end())

  0003a	0f 84 61 04 00
	00		 je	 $LN3@Eval
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00040	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00048	8d 4c 24 20	 lea	 ecx, DWORD PTR _save$[esp+840]
  0004c	83 e9 10	 sub	 ecx, 16			; 00000010H
  0004f	89 4c 24 10	 mov	 DWORD PTR tv1356[esp+840], ecx
$LL2@Eval:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 87   : 	stNow=*pos;

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00055	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 89   : 	switch (stNow)

  00058	48		 dec	 eax
  00059	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0005c	0f 87 5f 04 00
	00		 ja	 $LN43@Eval
  00062	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN99@Eval[eax*4]
$LN7@Eval:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 265  :         _Vector_iterator _Tmp = *this;

  00069	8b c7		 mov	 eax, edi

; 75   :         ++_Ptr;

  0006b	83 c7 08	 add	 edi, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 92   : 		save[iSp++]=*posn++; break;

  0006e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00072	f2 0f 11 44 d4
	20		 movsd	 QWORD PTR _save$[esp+edx*8+840], xmm0
  00078	42		 inc	 edx
  00079	83 c1 08	 add	 ecx, 8
  0007c	e9 0b 04 00 00	 jmp	 $LN102@Eval
$LN8@Eval:

; 94   : 		save[iSp++]=

  00081	8b 44 24 14	 mov	 eax, DWORD PTR _this$1$[esp+840]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00085	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 94   : 		save[iSp++]=

  00087	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0008a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0008d	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  00091	83 c1 08	 add	 ecx, 8
  00094	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00099	f2 0f 11 44 d4
	20		 movsd	 QWORD PTR _save$[esp+edx*8+840], xmm0
  0009f	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  000a0	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 97   : 		break;

  000a3	e9 e4 03 00 00	 jmp	 $LN102@Eval
$LN9@Eval:

; 98   : 		//case '+':
; 99   : 	    case POLY_PLU:
; 100  : 		iSp--;
; 101  : 		save[iSp-1]+=save[iSp]; break;

  000a8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000ae	4a		 dec	 edx
  000af	f2 0f 58 44 d4
	18		 addsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000b5	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000bb	e9 c9 03 00 00	 jmp	 $LN103@Eval
$LN10@Eval:

; 102  : 		//case '-':
; 103  : 	    case POLY_MIN:
; 104  : 		iSp--;
; 105  : 		save[iSp-1]-=save[iSp]; break;

  000c0	f2 0f 10 44 d4
	10		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+824]
  000c6	4a		 dec	 edx
  000c7	f2 0f 5c 44 d4
	20		 subsd	 xmm0, QWORD PTR _save$[esp+edx*8+840]
  000cd	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000d3	e9 b1 03 00 00	 jmp	 $LN103@Eval
$LN11@Eval:

; 106  : 		//case '*':
; 107  : 	    case POLY_MUL:
; 108  : 		iSp--;
; 109  : 		save[iSp-1]*=save[iSp]; break;

  000d8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000de	4a		 dec	 edx
  000df	f2 0f 59 44 d4
	18		 mulsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000e5	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000eb	e9 99 03 00 00	 jmp	 $LN103@Eval
$LN12@Eval:

; 110  : 		//case '%':
; 111  : 	    case POLY_MOD:
; 112  : 		iSp--;
; 113  : 		if (save[iSp]==0)

  000f0	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000f6	4a		 dec	 edx
  000f7	83 e9 08	 sub	 ecx, 8
  000fa	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  000fe	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00106	89 4c 24 10	 mov	 DWORD PTR tv1356[esp+840], ecx
  0010a	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv760[esp+840], xmm0
  00110	9f		 lahf
  00111	f6 c4 44	 test	 ah, 68			; 00000044H
  00114	0f 8b a7 03 00
	00		 jnp	 $LN43@Eval

; 114  : 		{
; 115  : 		    //THROW(new CEvalException("Divide by 0"));
; 116  : 		    return 0;
; 117  : 		}
; 118  : 		save[iSp-1]=fmod(save[iSp-1],save[iSp]); break;

  0011a	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  0011e	dd 44 24 18	 fld	 QWORD PTR tv760[esp+840]
  00122	e8 00 00 00 00	 call	 __CIfmod
$LN106@Eval:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00127	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0012b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00133	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  00137	dd 5c d4 18	 fstp	 QWORD PTR _save$[esp+edx*8+832]
  0013b	e9 54 03 00 00	 jmp	 $LN4@Eval
$LN14@Eval:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 122  : 		if (save[iSp]==0)

  00140	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  00146	4a		 dec	 edx
  00147	83 e9 08	 sub	 ecx, 8
  0014a	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  0014e	66 0f 2e 0d 00
	00 00 00	 ucomisd xmm1, QWORD PTR __real@0000000000000000
  00156	89 4c 24 10	 mov	 DWORD PTR tv1356[esp+840], ecx
  0015a	9f		 lahf
  0015b	f6 c4 44	 test	 ah, 68			; 00000044H
  0015e	0f 8b 5d 03 00
	00		 jnp	 $LN43@Eval

; 123  : 		{
; 124  : 		    //THROW(new CEvalException("Divide by 0"));
; 125  : 		    return 0;
; 126  : 		}
; 127  : 		save[iSp-1]/=save[iSp]; break;

  00164	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0016a	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0016e	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00174	e9 1b 03 00 00	 jmp	 $LN4@Eval
$LN16@Eval:

; 128  : 		//case '^':
; 129  : 	    case POLY_POW:
; 130  : 		iSp--;
; 131  : 		save[iSp-1]=pow(save[iSp-1],save[iSp]); break;

  00179	f2 0f 10 44 d4
	10		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+824]
  0017f	4a		 dec	 edx
  00180	83 e9 08	 sub	 ecx, 8
  00183	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  00187	89 4c 24 10	 mov	 DWORD PTR tv1356[esp+840], ecx
  0018b	f2 0f 10 4c d4
	20		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+840]
  00191	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00196	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0019a	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  001a2	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  001a6	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  001ac	e9 e3 02 00 00	 jmp	 $LN4@Eval
$LN17@Eval:

; 132  : 	    case POLY_ROOT:
; 133  : 		if (save[iSp-1]<0)

  001b1	f2 0f 10 54 d4
	18		 movsd	 xmm2, QWORD PTR _save$[esp+edx*8+832]
  001b7	0f 57 c0	 xorps	 xmm0, xmm0
  001ba	66 0f 2f c2	 comisd	 xmm0, xmm2
  001be	0f 87 fd 02 00
	00		 ja	 $LN43@Eval

; 134  : 		{
; 135  : 		    //THROW(new CEvalException("Negative in root"));
; 136  : 		    return 0;
; 137  : 		}
; 138  : 		save[iSp-1]=sqrt(save[iSp-1]); break;

  001c4	0f 57 c9	 xorps	 xmm1, xmm1
  001c7	0f 28 c2	 movaps	 xmm0, xmm2
  001ca	66 0f 2e c8	 ucomisd xmm1, xmm0
  001ce	77 06		 ja	 SHORT $LN100@Eval
  001d0	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  001d4	eb 05		 jmp	 SHORT $LN101@Eval
$LN100@Eval:
  001d6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN101@Eval:
  001db	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  001df	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  001e7	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  001eb	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  001f1	e9 9e 02 00 00	 jmp	 $LN4@Eval
$LN19@Eval:

; 139  : 	    case POLY_COS:
; 140  : 		save[iSp-1]=cos(save[iSp-1]); break;

  001f6	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  001fc	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00201	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00205	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0020d	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  00211	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00217	e9 78 02 00 00	 jmp	 $LN4@Eval
$LN20@Eval:

; 141  : 	    case POLY_SIN:
; 142  : 		save[iSp-1]=sin(save[iSp-1]); break;

  0021c	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00222	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00227	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0022b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00233	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  00237	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  0023d	e9 52 02 00 00	 jmp	 $LN4@Eval
$LN21@Eval:

; 143  : 	    case POLY_TAN:
; 144  : 		if (!(t=cos(save[iSp-1])))

  00242	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00248	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0024d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00255	9f		 lahf
  00256	f6 c4 44	 test	 ah, 68			; 00000044H
  00259	0f 8b 62 02 00
	00		 jnp	 $LN43@Eval

; 145  : 		{
; 146  : 		    //THROW (new CEvalException("Divide by 0"));
; 147  : 		    return 0;
; 148  : 		}
; 149  : 		save[iSp-1]=tan(save[iSp-1]); break;

  0025f	8b 44 24 0c	 mov	 eax, DWORD PTR _iSp$1$[esp+840]
  00263	f2 0f 10 44 c4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+eax*8+832]
  00269	e8 00 00 00 00	 call	 __libm_sse2_tan_precise
  0026e	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00272	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0027a	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  0027e	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00284	e9 0b 02 00 00	 jmp	 $LN4@Eval
$LN23@Eval:

; 150  : 	    case POLY_CSC:
; 151  : 		if (!(t=sin(save[iSp-1])))

  00289	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0028f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
$LN107@Eval:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00294	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0029c	9f		 lahf
  0029d	f6 c4 44	 test	 ah, 68			; 00000044H
  002a0	0f 8b 1b 02 00
	00		 jnp	 $LN43@Eval
  002a6	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  002ae	0f 28 cb	 movaps	 xmm1, xmm3
  002b1	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  002b5	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002b9	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  002bd	f2 0f 11 4c d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm1
  002c3	e9 cc 01 00 00	 jmp	 $LN4@Eval
$LN25@Eval:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 158  : 		if (!(t=cos(save[iSp-1])))

  002c8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  002ce	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 159  : 		{
; 160  : 		    //THROW(new CEvalException("Divide by 0"));
; 161  : 		    return 0;
; 162  : 		}
; 163  : 		save[iSp-1]=1/t; break;

  002d3	eb bf		 jmp	 SHORT $LN107@Eval
$LN27@Eval:

; 164  : 	    case POLY_COT:
; 165  : 		if (!(t=sin(save[iSp-1])))

  002d5	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  002db	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  002e0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  002e8	f2 0f 11 44 24
	18		 movsd	 QWORD PTR _t$3$[esp+840], xmm0
  002ee	9f		 lahf
  002ef	f6 c4 44	 test	 ah, 68			; 00000044H
  002f2	0f 8b c9 01 00
	00		 jnp	 $LN43@Eval

; 166  : 		{
; 167  : 		    //THROW(new CEvalException("Divide by 0"));
; 168  : 		    return 0;
; 169  : 		}
; 170  : 		save[iSp-1]=cos(save[iSp-1])/t; break;

  002f8	8b 44 24 0c	 mov	 eax, DWORD PTR _iSp$1$[esp+840]
  002fc	f2 0f 10 44 c4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+eax*8+832]
  00302	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00307	f2 0f 5e 44 24
	18		 divsd	 xmm0, QWORD PTR _t$3$[esp+840]
$LN109@Eval:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0030d	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00311	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00319	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]
  0031d	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00323	e9 6c 01 00 00	 jmp	 $LN4@Eval
$LN29@Eval:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 172  : 		if (save[iSp-1]<=0)

  00328	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  0032e	0f 57 c0	 xorps	 xmm0, xmm0
  00331	66 0f 2f c1	 comisd	 xmm0, xmm1
  00335	0f 83 86 01 00
	00		 jae	 $LN43@Eval

; 173  : 		{
; 174  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 175  : 		    return 0;
; 176  : 		}
; 177  : 		save[iSp-1]=log(save[iSp-1]); break;

  0033b	0f 28 c1	 movaps	 xmm0, xmm1
  0033e	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  00343	eb c8		 jmp	 SHORT $LN109@Eval
$LN31@Eval:

; 178  : 	    case POLY_LOG10:
; 179  : 		if (save[iSp-1]<=0)

  00345	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  0034b	0f 57 c0	 xorps	 xmm0, xmm0
  0034e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00352	0f 83 69 01 00
	00		 jae	 $LN43@Eval

; 180  : 		{
; 181  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 182  : 		    return 0;
; 183  : 		}
; 184  : 		save[iSp-1]=log10(save[iSp-1]); break;

  00358	0f 28 c1	 movaps	 xmm0, xmm1
  0035b	e8 00 00 00 00	 call	 __libm_sse2_log10_precise
  00360	eb ab		 jmp	 SHORT $LN109@Eval
$LN33@Eval:

; 185  : 	    case POLY_LOG:
; 186  : 		if (save[iSp-1]<=0)

  00362	f2 0f 10 54 d4
	18		 movsd	 xmm2, QWORD PTR _save$[esp+edx*8+832]
  00368	0f 57 c0	 xorps	 xmm0, xmm0
  0036b	66 0f 2f c2	 comisd	 xmm0, xmm2
  0036f	0f 83 4c 01 00
	00		 jae	 $LN43@Eval

; 187  : 		{
; 188  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 189  : 		    return 0;
; 190  : 		}
; 191  : 		if (save[iSp-2]<=0 || save[iSp-2]==1)

  00375	f2 0f 10 09	 movsd	 xmm1, QWORD PTR [ecx]
  00379	66 0f 2f c1	 comisd	 xmm0, xmm1
  0037d	0f 83 3e 01 00
	00		 jae	 $LN43@Eval
  00383	66 0f 2e cb	 ucomisd xmm1, xmm3
  00387	9f		 lahf
  00388	f6 c4 44	 test	 ah, 68			; 00000044H
  0038b	0f 8b 30 01 00
	00		 jnp	 $LN43@Eval

; 192  : 		{
; 193  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 194  : 		    return 0;
; 195  : 		}
; 196  : 
; 197  : 		save[iSp-2]=log(save[iSp-1])/log(save[iSp-2]);

  00391	0f 28 c2	 movaps	 xmm0, xmm2
  00394	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  00399	8b 44 24 10	 mov	 eax, DWORD PTR tv1356[esp+840]
  0039d	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1330[esp+840], xmm0
  003a3	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  003a7	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  003ac	f2 0f 10 4c 24
	18		 movsd	 xmm1, QWORD PTR tv1330[esp+840]
  003b2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003b6	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]

; 198  : 		iSp--;

  003ba	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 199  : 		break;

  003be	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  003c6	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  003ca	e9 b9 00 00 00	 jmp	 $LN104@Eval
$LN37@Eval:

; 200  : 	    case POLY_ABS:
; 201  : 		save[iSp-1]=fabs(save[iSp-1]);

  003cf	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  003d5	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  003dc	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0

; 202  : 		break;

  003e2	e9 ad 00 00 00	 jmp	 $LN4@Eval
$LN38@Eval:

; 203  : 		case POLY_FLOOR:
; 204  : 		save[iSp-1]=floor(save[iSp-1]);

  003e7	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  003eb	83 ec 08	 sub	 esp, 8
  003ee	dd 1c 24	 fstp	 QWORD PTR [esp]
  003f1	e8 00 00 00 00	 call	 _floor
  003f6	83 c4 08	 add	 esp, 8

; 205  : 		break;

  003f9	e9 29 fd ff ff	 jmp	 $LN106@Eval
$LN39@Eval:

; 206  : 	    case POLY_IRAND:
; 207  : 		save[iSp-2]=my_irandom(save[iSp-2],save[iSp-1]);

  003fe	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00404	83 ec 10	 sub	 esp, 16			; 00000010H
  00407	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  0040d	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00411	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$1$[esp+856]
  00415	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0041a	e8 00 00 00 00	 call	 ?my_irandom@CPoly@@IAEHNN@Z ; CPoly::my_irandom
  0041f	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]

; 208  : 		iSp--;

  00423	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 209  : 		break;

  00427	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0042f	66 0f 6e c0	 movd	 xmm0, eax
  00433	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00437	eb 4b		 jmp	 SHORT $LN105@Eval
$LN40@Eval:

; 210  : 	    case POLY_FRAND:
; 211  : 		save[iSp-2]=my_frandom(save[iSp-2],save[iSp-1]);

  00439	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0043f	83 ec 10	 sub	 esp, 16			; 00000010H
  00442	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  00448	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0044c	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$1$[esp+856]
  00450	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00455	e8 00 00 00 00	 call	 ?my_frandom@CPoly@@IAENNN@Z ; CPoly::my_frandom
  0045a	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1356[esp+840]

; 212  : 		iSp--;

  0045e	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 213  : 		break;

  00462	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0046a	dd 19		 fstp	 QWORD PTR [ecx]
  0046c	eb 1a		 jmp	 SHORT $LN104@Eval
$LN41@Eval:

; 214  : 	    case POLY_MINF:
; 215  : 		save[iSp-2]=(save[iSp-2]<save[iSp-1])?save[iSp-2]:save[iSp-1];

  0046e	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00472	f2 0f 5d 44 d4
	18		 minsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]

; 216  : 		iSp--;
; 217  : 		break;

  00478	eb 0a		 jmp	 SHORT $LN105@Eval
$LN42@Eval:

; 218  : 	    case POLY_MAXF:
; 219  : 		save[iSp-2]=(save[iSp-2]>save[iSp-1])?save[iSp-2]:save[iSp-1];

  0047a	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0047e	f2 0f 5f 44 d4
	18		 maxsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
$LN105@Eval:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00484	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
$LN104@Eval:
  00488	4a		 dec	 edx
$LN103@Eval:
  00489	83 e9 08	 sub	 ecx, 8
$LN102@Eval:
  0048c	89 4c 24 10	 mov	 DWORD PTR tv1356[esp+840], ecx
  00490	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
$LN4@Eval:
  00494	8b 44 24 14	 mov	 eax, DWORD PTR _this$1$[esp+840]
  00498	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 84   :     while (pos != tokenBase.end())

  0049b	0f 85 b2 fb ff
	ff		 jne	 $LL2@Eval
$LN3@Eval:

; 220  : 		iSp--;
; 221  : 		break;
; 222  : 		/*case POLY_MOD:
; 223  : 		  save[iSp-2]=fmod(save[iSp-2],save[iSp-1]);
; 224  : 		  iSp--;
; 225  : 		  break;*/
; 226  : 	    default:
; 227  : 		return 0;
; 228  : 		//THROW(new CEvalException("Token Error"));
; 229  : 	}
; 230  :     }
; 231  :     return float(save[iSp-1]);

  004a1	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  004a5	d9 5c 24 14	 fstp	 DWORD PTR tv1388[esp+840]
  004a9	d9 44 24 14	 fld	 DWORD PTR tv1388[esp+840]

; 232  : }

  004ad	5f		 pop	 edi
  004ae	5e		 pop	 esi
  004af	8b 8c 24 3c 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+832]
  004b6	33 cc		 xor	 ecx, esp
  004b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bd	8b e5		 mov	 esp, ebp
  004bf	5d		 pop	 ebp
  004c0	c3		 ret	 0
$LN43@Eval:
  004c1	8b 8c 24 44 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+840]
  004c8	d9 ee		 fldz
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	33 cc		 xor	 ecx, esp
  004ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d3	8b e5		 mov	 esp, ebp
  004d5	5d		 pop	 ebp
  004d6	c3		 ret	 0
  004d7	90		 npad	 1
$LN99@Eval:
  004d8	00 00 00 00	 DD	 $LN17@Eval
  004dc	00 00 00 00	 DD	 $LN11@Eval
  004e0	00 00 00 00	 DD	 $LN9@Eval
  004e4	00 00 00 00	 DD	 $LN16@Eval
  004e8	00 00 00 00	 DD	 $LN10@Eval
  004ec	00 00 00 00	 DD	 $LN14@Eval
  004f0	00 00 00 00	 DD	 $LN43@Eval
  004f4	00 00 00 00	 DD	 $LN43@Eval
  004f8	00 00 00 00	 DD	 $LN7@Eval
  004fc	00 00 00 00	 DD	 $LN8@Eval
  00500	00 00 00 00	 DD	 $LN43@Eval
  00504	00 00 00 00	 DD	 $LN19@Eval
  00508	00 00 00 00	 DD	 $LN20@Eval
  0050c	00 00 00 00	 DD	 $LN21@Eval
  00510	00 00 00 00	 DD	 $LN23@Eval
  00514	00 00 00 00	 DD	 $LN25@Eval
  00518	00 00 00 00	 DD	 $LN27@Eval
  0051c	00 00 00 00	 DD	 $LN33@Eval
  00520	00 00 00 00	 DD	 $LN29@Eval
  00524	00 00 00 00	 DD	 $LN31@Eval
  00528	00 00 00 00	 DD	 $LN37@Eval
  0052c	00 00 00 00	 DD	 $LN41@Eval
  00530	00 00 00 00	 DD	 $LN42@Eval
  00534	00 00 00 00	 DD	 $LN39@Eval
  00538	00 00 00 00	 DD	 $LN40@Eval
  0053c	00 00 00 00	 DD	 $LN12@Eval
  00540	00 00 00 00	 DD	 $LN38@Eval
?Eval@CPoly@@QAEMXZ ENDP				; CPoly::Eval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Analyze@CPoly@@QAEHPBD@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszStr$ = 8						; size = 4
?Analyze@CPoly@@QAEHPBD@Z PROC				; CPoly::Analyze, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Analyze@CPoly@@QAEHPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR _pszStr$[ebp]

; 236  :     if (pszStr)

  0002f	85 d2		 test	 edx, edx
  00031	74 5e		 je	 SHORT $LN23@Analyze
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00033	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00035	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00043	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL31@Analyze:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL31@Analyze
  00057	2b cf		 sub	 ecx, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	51		 push	 ecx
  0005a	52		 push	 edx
  0005b	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 237  : 	SetStr(pszStr);

  00063	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	50		 push	 eax
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::SetStr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00075	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 237  : 	SetStr(pszStr);

  00078	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0007f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00082	72 0d		 jb	 SHORT $LN23@Analyze

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00084	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	50		 push	 eax
  00086	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  00089	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008e	83 c4 08	 add	 esp, 8
$LN23@Analyze:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 239  :     if (0 == strData.length())

  00091	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  00095	75 07		 jne	 SHORT $LN3@Analyze

; 240  : 	return true;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	eb 30		 jmp	 SHORT $LN1@Analyze
$LN3@Analyze:

; 241  : 
; 242  :     //DisposeList();
; 243  :     ErrorOccur = false;
; 244  :     uiLookPos = 0;
; 245  :     iLookAhead = lexan();

  0009e	8b ce		 mov	 ecx, esi
  000a0	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  000a4	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  000ab	e8 00 00 00 00	 call	 ?lexan@CPoly@@IAEHXZ	; CPoly::lexan

; 246  : 
; 247  :     expr();

  000b0	8b ce		 mov	 ecx, esi
  000b2	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000b5	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  000ba	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000bd	3b 46 2c	 cmp	 eax, DWORD PTR [esi+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 249  :     if (tokenBase.empty())

  000c0	75 04		 jne	 SHORT $LN4@Analyze

; 250  :     {
; 251  : 	//THROW(new CParseException("No Data"));
; 252  : 	return false;

  000c2	33 c0		 xor	 eax, eax
  000c4	eb 08		 jmp	 SHORT $LN1@Analyze
$LN4@Analyze:

; 253  :     }
; 254  : 
; 255  :     return !ErrorOccur;

  000c6	33 c0		 xor	 eax, eax
  000c8	38 46 20	 cmp	 BYTE PTR [esi+32], al
  000cb	0f 94 c0	 sete	 al
$LN1@Analyze:

; 256  : }

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000de	33 cd		 xor	 ecx, ebp
  000e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Analyze@CPoly@@QAEHPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Analyze@CPoly@@QAEHPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Analyze@CPoly@@QAEHPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Analyze@CPoly@@QAEHPBD@Z ENDP				; CPoly::Analyze
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ??1CPoly@@UAE@XZ
_TEXT	SEGMENT
??1CPoly@@UAE@XZ PROC					; CPoly::~CPoly, COMDAT
; _this$ = ecx

; 59   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPoly@@6B@

; 60   :     Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CPoly@@QAEXXZ	; CPoly::Clear
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0000e	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00011	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00014	72 0d		 jb	 SHORT $LN7@CPoly

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00016	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	50		 push	 eax
  00018	ff 76 60	 push	 DWORD PTR [esi+96]
  0001b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00020	83 c4 08	 add	 esp, 8
$LN7@CPoly:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00023	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002a	c7 46 74 0f 00
	00 00		 mov	 DWORD PTR [esi+116], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00031	c6 46 60 00	 mov	 BYTE PTR [esi+96], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00035	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 27		 je	 SHORT $LN16@CPoly

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003c	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0003f	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00041	83 e0 fc	 and	 eax, -4			; fffffffcH
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004b	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00052	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00055	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 1699 :             _Myend   = pointer();

  0005c	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN16@CPoly:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00063	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00066	85 c9		 test	 ecx, ecx
  00068	74 27		 je	 SHORT $LN23@CPoly

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006a	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0006d	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006f	83 e0 fc	 and	 eax, -4			; fffffffcH
  00072	50		 push	 eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00079	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00083	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 1699 :             _Myend   = pointer();

  0008a	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN23@CPoly:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00091	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00094	85 c9		 test	 ecx, ecx
  00096	74 27		 je	 SHORT $LN30@CPoly

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00098	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0009b	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009d	83 e0 f8	 and	 eax, -8			; fffffff8H
  000a0	50		 push	 eax
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  000a7	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ae	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  000b1	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 1699 :             _Myend   = pointer();

  000b8	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN30@CPoly:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  000bf	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  000c2	85 c9		 test	 ecx, ecx
  000c4	74 27		 je	 SHORT $LN37@CPoly

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c6	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000ce	50		 push	 eax
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  000d5	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000dc	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  000df	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1699 :             _Myend   = pointer();

  000e6	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN37@CPoly:
  000ed	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 61   : }

  000ee	c3		 ret	 0
??1CPoly@@UAE@XZ ENDP					; CPoly::~CPoly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp
;	COMDAT ??0CPoly@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPoly@@QAE@XZ PROC					; CPoly::CPoly, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPoly@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPoly@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002f	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00036	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0003d	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 47   : {

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004b	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00052	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00059	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 47   : {

  00060	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00063	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00069	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00070	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00077	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0007e	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00085	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0008c	c7 46 74 0f 00
	00 00		 mov	 DWORD PTR [esi+116], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00093	c6 46 60 00	 mov	 BYTE PTR [esi+96], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 48   : 	m_iRandomType = RANDOM_TYPE_FREELY;

  00097	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 49   :     uiLookPos = 0;

  0009e	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 50   :     ErrorOccur = true;

  000a5	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 51   :     lSymbol.clear();

  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 52   :     STSize = 0;

  000ae	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 53   : 	MathSymbolCount = 0;

  000b5	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000bc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000bf	2b c2		 sub	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 47   : {

  000c1	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000c5	c1 f8 02	 sar	 eax, 2

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000c8	83 f8 32	 cmp	 eax, 50			; 00000032H
  000cb	73 07		 jae	 SHORT $LN42@CPoly

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  000cd	6a 32		 push	 50			; 00000032H
  000cf	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXI@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Reallocate_exactly
$LN42@CPoly:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\poly\Poly.cpp

; 55   :     init();

  000d4	8b ce		 mov	 ecx, esi
  000d6	e8 00 00 00 00	 call	 ?init@CPoly@@IAEXXZ	; CPoly::init

; 56   : }

  000db	8b c6		 mov	 eax, esi
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e7	59		 pop	 ecx
  000e8	5e		 pop	 esi
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPoly@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CPoly@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 34	 add	 ecx, 52			; 00000034H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$??0CPoly@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
__unwindfunclet$??0CPoly@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CPoly@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 60	 add	 ecx, 96			; 00000060H
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$??0CPoly@@QAE@XZ:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00048	33 c8		 xor	 ecx, eax
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPoly@@QAE@XZ
  00054	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPoly@@QAE@XZ ENDP					; CPoly::CPoly
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4470 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:
  00010	56		 push	 esi

; 2144 :         const value_type* _Result = _Bx._Buf;

  00011	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00014	8b d6		 mov	 edx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 16		 mov	 edx, DWORD PTR [esi]
$LN11@operator:

; 4091 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001e	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00021	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00024	75 5f		 jne	 SHORT $LN17@operator

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00026	83 ee 04	 sub	 esi, 4
  00029	72 16		 jb	 SHORT $LN23@operator
  0002b	0f 1f 44 00 00	 npad	 5
$LL24@operator:
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00034	75 10		 jne	 SHORT $LN22@operator
  00036	83 c2 04	 add	 edx, 4
  00039	83 c1 04	 add	 ecx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL24@operator
$LN23@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN21@operator
$LN22@operator:
  00046	8a 02		 mov	 al, BYTE PTR [edx]
  00048	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004a	75 27		 jne	 SHORT $LN25@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN21@operator
  00051	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00054	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00057	75 1a		 jne	 SHORT $LN25@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN21@operator
  0005e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00061	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00064	75 0d		 jne	 SHORT $LN25@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN21@operator
  0006b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0006e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00071	74 07		 je	 SHORT $LN21@operator
$LN25@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN26@operator
$LN21@operator:
  0007a	33 c0		 xor	 eax, eax
$LN26@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007c	85 c0		 test	 eax, eax
  0007e	75 05		 jne	 SHORT $LN17@operator
  00080	b0 01		 mov	 al, 1
  00082	5e		 pop	 esi

; 4471 :     return _Left._Equal(_Right);
; 4472 : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN17@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00085	32 c0		 xor	 al, al
  00087	5e		 pop	 esi

; 4471 :     return _Left._Equal(_Right);
; 4472 : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
