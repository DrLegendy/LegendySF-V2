; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0CPostIt@@QAE@PBD@Z				; CPostIt::CPostIt
PUBLIC	??1CPostIt@@QAE@XZ				; CPostIt::~CPostIt
PUBLIC	?Flush@CPostIt@@QAEHXZ				; CPostIt::Flush
PUBLIC	?Empty@CPostIt@@QAEXXZ				; CPostIt::Empty
PUBLIC	?Get@CPostIt@@QAEHPBDPADK@Z			; CPostIt::Get
PUBLIC	?Set@CPostIt@@QAEHPBD@Z				; CPostIt::Set
PUBLIC	?Set@CPostIt@@QAEHPBD0@Z			; CPostIt::Set
PUBLIC	?Set@CPostIt@@QAEHPBDK@Z			; CPostIt::Set
PUBLIC	?CopyTo@CPostIt@@QAEHPAV1@PBD@Z			; CPostIt::CopyTo
PUBLIC	?Init@CPostIt@@IAEHPBD@Z			; CPostIt::Init
PUBLIC	?Destroy@CPostIt@@IAEXXZ			; CPostIt::Destroy
PUBLIC	??0_CPostItMemoryBlock@@QAE@XZ			; _CPostItMemoryBlock::_CPostItMemoryBlock
PUBLIC	??1_CPostItMemoryBlock@@QAE@XZ			; _CPostItMemoryBlock::~_CPostItMemoryBlock
PUBLIC	?Assign@_CPostItMemoryBlock@@QAEHPAX@Z		; _CPostItMemoryBlock::Assign
PUBLIC	?CreateHandle@_CPostItMemoryBlock@@QAEPAXXZ	; _CPostItMemoryBlock::CreateHandle
PUBLIC	?DestroyHandle@_CPostItMemoryBlock@@QAEHXZ	; _CPostItMemoryBlock::DestroyHandle
PUBLIC	?Find@_CPostItMemoryBlock@@QAEPADPBD@Z		; _CPostItMemoryBlock::Find
PUBLIC	?Put@_CPostItMemoryBlock@@QAEHPBD@Z		; _CPostItMemoryBlock::Put
PUBLIC	?Put@_CPostItMemoryBlock@@QAEHPBD0@Z		; _CPostItMemoryBlock::Put
PUBLIC	?Get@_CPostItMemoryBlock@@QAEHPBDPADK@Z		; _CPostItMemoryBlock::Get
PUBLIC	?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z ; std::list<char *,std::allocator<char *> >::push_back
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * &>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@PADPAX@std@@@std@@YAXAAPAU?$_List_node@PADPAX@0@@Z ; std::_Destroy_in_place<std::_List_node<char *,void *> *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_04LBFPPOKC@YMCF@				; `string'
PUBLIC	??_C@_05FEKNMKB@YMCF_@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__strnicmp:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	__imp__GlobalUnlock@4:PROC
EXTRN	__imp__GlobalLock@4:PROC
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	__imp__OpenClipboard@4:PROC
EXTRN	__imp__CloseClipboard@0:PROC
EXTRN	__imp__SetClipboardData@8:PROC
EXTRN	__imp__GetClipboardData@4:PROC
EXTRN	__imp__RegisterClipboardFormatA@4:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FEKNMKB@YMCF_@
CONST	SEGMENT
??_C@_05FEKNMKB@YMCF_@ DB 'YMCF_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBFPPOKC@YMCF@
CONST	SEGMENT
??_C@_04LBFPPOKC@YMCF@ DB 'YMCF', 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAD@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PADPAX@std@@@1@ABQAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAD@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PADPAX@std@@@1@ABQAD@Z$0
__ehfuncinfo$??$?0ABQAD@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PADPAX@std@@@1@ABQAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAD@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PADPAX@std@@@1@ABQAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAD@?$list@PADV?$allocator@PAD@std@@@std@@QAEPAU?$_List_node@PADPAX@1@QAU21@ABQAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAD@?$list@PADV?$allocator@PAD@std@@@std@@QAEPAU?$_List_node@PADPAX@1@QAU21@ABQAD@Z$1
__ehfuncinfo$??$_Emplace@ABQAD@?$list@PADV?$allocator@PAD@std@@@std@@QAEPAU?$_List_node@PADPAX@1@QAU21@ABQAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAD@?$list@PADV?$allocator@PAD@std@@@std@@QAEPAU?$_List_node@PADPAX@1@QAU21@ABQAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z$1
__ehfuncinfo$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@CPostIt@@QAEHPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Set@CPostIt@@QAEHPBD0@Z$0
__ehfuncinfo$?Set@CPostIt@@QAEHPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Set@CPostIt@@QAEHPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@CPostIt@@QAEHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Set@CPostIt@@QAEHPBD@Z$0
__ehfuncinfo$?Set@CPostIt@@QAEHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Set@CPostIt@@QAEHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Get@CPostIt@@QAEHPBDPADK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@CPostIt@@QAEHPBDPADK@Z$0
__ehfuncinfo$?Get@CPostIt@@QAEHPBDPADK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Get@CPostIt@@QAEHPBDPADK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@PADPAX@std@@@std@@YAXAAPAU?$_List_node@PADPAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@PADPAX@std@@@std@@YAXAAPAU?$_List_node@PADPAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<char *,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@PADPAX@std@@@std@@YAXAAPAU?$_List_node@PADPAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__Insert_after$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Insert_before$ = 8					; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z PROC ; std::list<char *,std::allocator<char *> >::push_back, COMDAT
; _this$ = ecx

; 1251 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 1014 :         if (_Mysize == max_size()) {

  0002a	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00031	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1014 :         if (_Mysize == max_size()) {

  00033	74 61		 je	 SHORT $LN38@push_back
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00035	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00038	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00048	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  00050	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00052	8d 45 08	 lea	 eax, DWORD PTR __Insert_before$[ebp]

; 1020 :         return _Op._Transfer_before(_Where);

  00055	89 5d 08	 mov	 DWORD PTR __Insert_before$[ebp], ebx

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00058	50		 push	 eax
  00059	57		 push	 edi

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0005a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1019 :         ++_Mysize;

  0005f	ff 46 04	 inc	 DWORD PTR [esi+4]

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  00062	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00065	89 75 f0	 mov	 DWORD PTR __Insert_after$3[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00068	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0006d	8d 45 f0	 lea	 eax, DWORD PTR __Insert_after$3[ebp]
  00070	50		 push	 eax
  00071	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  0007a	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  0007d	83 c4 14	 add	 esp, 20			; 00000014H

; 606  :         _Insert_after->_Next  = _Result;

  00080	89 3e		 mov	 DWORD PTR [esi], edi

; 1253 :     }

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN38@push_back:

; 1015 :             _Xlength_error("list too long");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0009b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN36@push_back:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PADPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<char *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z ENDP ; std::list<char *,std::allocator<char *> >::push_back
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Get@_CPostItMemoryBlock@@QAEHPBDPADK@Z
_TEXT	SEGMENT
_lpszKeyName$ = 8					; size = 4
_lpBuffer$ = 12						; size = 4
_nSize$ = 16						; size = 4
?Get@_CPostItMemoryBlock@@QAEHPBDPADK@Z PROC		; _CPostItMemoryBlock::Get, COMDAT
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 292  : 	LPSTR lpszText = Find( lpszKeyName );

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpszKeyName$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?Find@_CPostItMemoryBlock@@QAEPADPBD@Z ; _CPostItMemoryBlock::Find
  0000d	8b c8		 mov	 ecx, eax

; 293  : 	if( lpszText == NULL )

  0000f	85 c9		 test	 ecx, ecx
  00011	75 05		 jne	 SHORT $LN2@Get
  00013	5e		 pop	 esi

; 299  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Get:

; 294  : 		return FALSE;
; 295  : 	lpszText += (strlen( lpszKeyName ) + 1);

  00018	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0001b	0f 1f 44 00 00	 npad	 5
$LL6@Get:
  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	46		 inc	 esi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL6@Get
  00027	57		 push	 edi
  00028	2b f2		 sub	 esi, edx
  0002a	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0002d	03 fe		 add	 edi, esi

; 296  : 	::ZeroMemory( lpBuffer, nSize );

  0002f	8b 75 10	 mov	 esi, DWORD PTR _nSize$[ebp]
  00032	56		 push	 esi
  00033	6a 00		 push	 0
  00035	ff 75 0c	 push	 DWORD PTR _lpBuffer$[ebp]
  00038	e8 00 00 00 00	 call	 _memset

; 297  : 	strncpy( lpBuffer, lpszText, (nSize < strlen( lpszText )) ? nSize : strlen( lpszText ) );

  0003d	8b cf		 mov	 ecx, edi
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL7@Get:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL7@Get
  0004c	2b ca		 sub	 ecx, edx
  0004e	3b f1		 cmp	 esi, ecx
  00050	72 10		 jb	 SHORT $LN5@Get
  00052	8b cf		 mov	 ecx, edi
  00054	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL8@Get:
  00057	8a 01		 mov	 al, BYTE PTR [ecx]
  00059	41		 inc	 ecx
  0005a	84 c0		 test	 al, al
  0005c	75 f9		 jne	 SHORT $LL8@Get
  0005e	2b ca		 sub	 ecx, edx
  00060	8b f1		 mov	 esi, ecx
$LN5@Get:
  00062	56		 push	 esi
  00063	57		 push	 edi
  00064	ff 75 0c	 push	 DWORD PTR _lpBuffer$[ebp]
  00067	e8 00 00 00 00	 call	 _strncpy
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 298  : 	return TRUE;

  0006f	b8 01 00 00 00	 mov	 eax, 1
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 299  : }

  00076	5d		 pop	 ebp
  00077	c2 0c 00	 ret	 12			; 0000000cH
?Get@_CPostItMemoryBlock@@QAEHPBDPADK@Z ENDP		; _CPostItMemoryBlock::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Put@_CPostItMemoryBlock@@QAEHPBD0@Z
_TEXT	SEGMENT
_nStrLen$1$ = -4					; size = 4
tv397 = 8						; size = 4
_lpszText$ = 8						; size = 4
_lpszKeyName$ = 8					; size = 4
tv410 = 12						; size = 4
tv407 = 12						; size = 4
tv401 = 12						; size = 4
_lpBuffer$ = 12						; size = 4
?Put@_CPostItMemoryBlock@@QAEHPBD0@Z PROC		; _CPostItMemoryBlock::Put, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 251  : 	LPSTR	lpszText;
; 252  : 
; 253  : 	if( (lpszText = Find( lpszKeyName )) != NULL ) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR _lpszKeyName$[ebp]
  0000a	8b d9		 mov	 ebx, ecx
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?Find@_CPostItMemoryBlock@@QAEPADPBD@Z ; _CPostItMemoryBlock::Find
  00012	85 c0		 test	 eax, eax
  00014	74 3a		 je	 SHORT $LN3@Put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00019	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001b	3b f1		 cmp	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 254  : 		for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  0001d	74 31		 je	 SHORT $LN3@Put
  0001f	90		 npad	 1
$LL4@Put:

; 255  : 			if( lpszText == *itr ) {

  00020	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00023	74 08		 je	 SHORT $LN58@Put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  00025	8b 36		 mov	 esi, DWORD PTR [esi]

; 199  :         return this->_Ptr == _Right._Ptr;

  00027	3b f1		 cmp	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 254  : 		for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  00029	75 f5		 jne	 SHORT $LL4@Put

; 255  : 			if( lpszText == *itr ) {

  0002b	eb 23		 jmp	 SHORT $LN3@Put
$LN58@Put:

; 256  : 				SAFE_DELETE_ARRAY( lpszText );

  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00033	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00038	6a 0c		 push	 12			; 0000000cH
  0003a	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax

; 397  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  0003d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00042	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 398  :         --_Mysize;

  00045	ff 4b 08	 dec	 DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Put:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 262  : 	if( lpBuffer == NULL || !*lpBuffer )

  00050	8b 75 0c	 mov	 esi, DWORD PTR _lpBuffer$[ebp]
  00053	85 f6		 test	 esi, esi
  00055	0f 84 cd 00 00
	00		 je	 $LN9@Put
  0005b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0005e	0f 84 c4 00 00
	00		 je	 $LN9@Put

; 263  : 		return TRUE;
; 264  : 	size_t nStrLen	= strlen( lpszKeyName ) + 1 /* '=' */ + strlen( lpBuffer );

  00064	8b cf		 mov	 ecx, edi
  00066	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL62@Put:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL62@Put
  00077	2b ca		 sub	 ecx, edx
  00079	8b d6		 mov	 edx, esi
  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0007e	89 45 08	 mov	 DWORD PTR tv397[ebp], eax
$LL63@Put:
  00081	8a 02		 mov	 al, BYTE PTR [edx]
  00083	42		 inc	 edx
  00084	84 c0		 test	 al, al
  00086	75 f9		 jne	 SHORT $LL63@Put
  00088	2b 55 08	 sub	 edx, DWORD PTR tv397[ebp]
  0008b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0008e	03 c2		 add	 eax, edx
  00090	89 45 fc	 mov	 DWORD PTR _nStrLen$1$[ebp], eax

; 265  : 	lpszText = new CHAR[ nStrLen + 1 ];

  00093	40		 inc	 eax
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 266  : 	::CopyMemory( lpszText, lpszKeyName, strlen( lpszKeyName ) );

  0009a	8b cf		 mov	 ecx, edi
  0009c	8b d0		 mov	 edx, eax
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 55 08	 mov	 DWORD PTR _lpszText$[ebp], edx
  000a4	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000a7	89 45 0c	 mov	 DWORD PTR tv401[ebp], eax
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL64@Put:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL64@Put
  000b7	2b 4d 0c	 sub	 ecx, DWORD PTR tv401[ebp]
  000ba	51		 push	 ecx
  000bb	57		 push	 edi
  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 _memcpy

; 267  : 	*(lpszText + strlen( lpszKeyName )) = '=';

  000c2	8b cf		 mov	 ecx, edi
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000ca	66 0f 1f 44 00
	00		 npad	 6
$LL65@Put:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL65@Put
  000d7	2b ca		 sub	 ecx, edx
  000d9	8b 55 08	 mov	 edx, DWORD PTR _lpszText$[ebp]
  000dc	c6 04 11 3d	 mov	 BYTE PTR [ecx+edx], 61	; 0000003dH

; 268  : 	::CopyMemory( lpszText + strlen( lpszKeyName ) + 1, lpBuffer, strlen( lpBuffer ) );

  000e0	8b ce		 mov	 ecx, esi
  000e2	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000e5	89 45 0c	 mov	 DWORD PTR tv407[ebp], eax
$LL66@Put:
  000e8	8a 01		 mov	 al, BYTE PTR [ecx]
  000ea	41		 inc	 ecx
  000eb	84 c0		 test	 al, al
  000ed	75 f9		 jne	 SHORT $LL66@Put
  000ef	2b 4d 0c	 sub	 ecx, DWORD PTR tv407[ebp]
  000f2	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000f5	89 45 0c	 mov	 DWORD PTR tv410[ebp], eax
$LL67@Put:
  000f8	8a 07		 mov	 al, BYTE PTR [edi]
  000fa	47		 inc	 edi
  000fb	84 c0		 test	 al, al
  000fd	75 f9		 jne	 SHORT $LL67@Put
  000ff	2b 7d 0c	 sub	 edi, DWORD PTR tv410[ebp]
  00102	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00105	51		 push	 ecx
  00106	03 c7		 add	 eax, edi
  00108	56		 push	 esi
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _memcpy

; 269  : 	*(lpszText + nStrLen) = '\0';

  0010f	8b 45 08	 mov	 eax, DWORD PTR _lpszText$[ebp]
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _nStrLen$1$[ebp]
  00118	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 270  : 
; 271  : 	m_StrList.push_back( lpszText );

  0011c	8d 45 08	 lea	 eax, DWORD PTR _lpszText$[ebp]
  0011f	50		 push	 eax
  00120	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00123	e8 00 00 00 00	 call	 ?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z ; std::list<char *,std::allocator<char *> >::push_back
$LN9@Put:

; 272  : 	return TRUE;
; 273  : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	5b		 pop	 ebx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 08 00	 ret	 8
?Put@_CPostItMemoryBlock@@QAEHPBD0@Z ENDP		; _CPostItMemoryBlock::Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Put@_CPostItMemoryBlock@@QAEHPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpszText$ = 8						; size = 4
_lpBuffer$ = 8						; size = 4
?Put@_CPostItMemoryBlock@@QAEHPBD@Z PROC		; _CPostItMemoryBlock::Put, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 277  : 	LPSTR	lpszText;
; 278  : 
; 279  : 	if( lpBuffer == NULL || !*lpBuffer )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpBuffer$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	74 48		 je	 SHORT $LN3@Put
  0000f	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  00012	74 43		 je	 SHORT $LN3@Put

; 280  : 		return TRUE;
; 281  : 	size_t nStrLen	= strlen( lpBuffer );

  00014	56		 push	 esi
  00015	8b f3		 mov	 esi, ebx
  00017	57		 push	 edi
  00018	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0001b	0f 1f 44 00 00	 npad	 5
$LL5@Put:
  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	46		 inc	 esi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL5@Put
  00027	2b f1		 sub	 esi, ecx

; 282  : 	lpszText = new CHAR[ nStrLen + 1 ];

  00029	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 283  : 	::CopyMemory( lpszText, lpBuffer, nStrLen );

  00032	56		 push	 esi
  00033	8b f8		 mov	 edi, eax
  00035	53		 push	 ebx
  00036	57		 push	 edi
  00037	89 7d 08	 mov	 DWORD PTR _lpszText$[ebp], edi
  0003a	e8 00 00 00 00	 call	 _memcpy

; 284  : 	*(lpszText + nStrLen) = '\0';
; 285  : 
; 286  : 	m_StrList.push_back( lpszText );

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00042	8d 45 08	 lea	 eax, DWORD PTR _lpszText$[ebp]
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0004c	83 c1 04	 add	 ecx, 4
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?push_back@?$list@PADV?$allocator@PAD@std@@@std@@QAEXABQAD@Z ; std::list<char *,std::allocator<char *> >::push_back

; 287  : 	return TRUE;

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
$LN3@Put:

; 288  : }

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?Put@_CPostItMemoryBlock@@QAEHPBD@Z ENDP		; _CPostItMemoryBlock::Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Find@_CPostItMemoryBlock@@QAEPADPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpszKeyName$ = 8					; size = 4
?Find@_CPostItMemoryBlock@@QAEPADPBD@Z PROC		; _CPostItMemoryBlock::Find, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 236  : {

  0000e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 237  : 	for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  00013	74 44		 je	 SHORT $LN40@Find
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _lpszKeyName$[ebp]
$LL4@Find:

; 238  : 		LPSTR	lpszText = *itr;

  00018	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 239  : 
; 240  : 		if( _strnicmp( lpszText, lpszKeyName, strlen( lpszKeyName ) ) != 0 )

  0001b	8b cb		 mov	 ecx, ebx
  0001d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL41@Find:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL41@Find
  00027	2b ca		 sub	 ecx, edx
  00029	51		 push	 ecx
  0002a	53		 push	 ebx
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 __strnicmp
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	75 17		 jne	 SHORT $LN2@Find

; 241  : 			continue;
; 242  : 		if( *(lpszText + strlen( lpszKeyName )) != '=' )

  00038	8b c3		 mov	 eax, ebx
  0003a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003d	0f 1f 00	 npad	 3
$LL42@Find:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL42@Find
  00047	2b c2		 sub	 eax, edx
  00049	80 3c 38 3d	 cmp	 BYTE PTR [eax+edi], 61	; 0000003dH
  0004d	74 15		 je	 SHORT $LN6@Find
$LN2@Find:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 199  :         return this->_Ptr == _Right._Ptr;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 166  :         this->_Ptr = this->_Ptr->_Next;

  00052	8b 36		 mov	 esi, DWORD PTR [esi]

; 199  :         return this->_Ptr == _Right._Ptr;

  00054	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 237  : 	for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  00057	75 bf		 jne	 SHORT $LL4@Find
$LN40@Find:
  00059	5f		 pop	 edi

; 245  : 	}
; 246  : 	return NULL;
; 247  : }

  0005a	5e		 pop	 esi
  0005b	33 c0		 xor	 eax, eax
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN6@Find:

; 243  : 			continue;
; 244  : 		return lpszText;

  00064	8b c7		 mov	 eax, edi
  00066	5f		 pop	 edi

; 245  : 	}
; 246  : 	return NULL;
; 247  : }

  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?Find@_CPostItMemoryBlock@@QAEPADPBD@Z ENDP		; _CPostItMemoryBlock::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?DestroyHandle@_CPostItMemoryBlock@@QAEHXZ
_TEXT	SEGMENT
?DestroyHandle@_CPostItMemoryBlock@@QAEHXZ PROC		; _CPostItMemoryBlock::DestroyHandle, COMDAT
; _this$ = ecx

; 229  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 230  : 	::GlobalFree( m_hHandle );

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4

; 231  : 	m_hHandle = NULL;

  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 232  : 	return TRUE;

  00011	b8 01 00 00 00	 mov	 eax, 1
  00016	5e		 pop	 esi

; 233  : }

  00017	c3		 ret	 0
?DestroyHandle@_CPostItMemoryBlock@@QAEHXZ ENDP		; _CPostItMemoryBlock::DestroyHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?CreateHandle@_CPostItMemoryBlock@@QAEPAXXZ
_TEXT	SEGMENT
_hBlock$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?CreateHandle@_CPostItMemoryBlock@@QAEPAXXZ PROC	; _CPostItMemoryBlock::CreateHandle, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi

; 198  : 	if( m_StrList.size() == 0 )

  0000e	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00012	74 51		 je	 SHORT $LN94@CreateHand
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00014	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 200  : 	DWORD dwBlockSize = sizeof( DWORD );

  00017	bf 04 00 00 00	 mov	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 204  : 	for( itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  00020	74 1d		 je	 SHORT $LN3@CreateHand
$LL4@CreateHand:

; 206  : 		dwBlockSize += (DWORD) strlen( *itr );

  00022	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00025	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
$LL95@CreateHand:
  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	46		 inc	 esi
  0002b	84 c9		 test	 cl, cl
  0002d	75 f9		 jne	 SHORT $LL95@CreateHand
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 206  : 		dwBlockSize += (DWORD) strlen( *itr );

  00031	2b f3		 sub	 esi, ebx
  00033	83 c7 02	 add	 edi, 2
  00036	03 fe		 add	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 199  :         return this->_Ptr == _Right._Ptr;

  00038	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 204  : 	for( itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  0003a	75 e6		 jne	 SHORT $LL4@CreateHand
  0003c	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN3@CreateHand:

; 207  : 	}
; 208  : 
; 209  : 	HANDLE hBlock = ::GlobalAlloc( GMEM_ZEROINIT | GMEM_MOVEABLE, dwBlockSize );

  0003f	57		 push	 edi
  00040	6a 42		 push	 66			; 00000042H
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8
  00048	8b d8		 mov	 ebx, eax
  0004a	89 5d f8	 mov	 DWORD PTR _hBlock$1$[ebp], ebx

; 210  : 	if( hBlock == NULL )

  0004d	85 db		 test	 ebx, ebx
  0004f	74 14		 je	 SHORT $LN94@CreateHand

; 211  : 		return INVALID_HANDLE_VALUE;
; 212  : 	LPBYTE lpBuffer = (LPBYTE) ::GlobalLock( hBlock );

  00051	53		 push	 ebx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalLock@4
  00058	8b f8		 mov	 edi, eax

; 213  : 	if( lpBuffer == NULL ) {

  0005a	85 ff		 test	 edi, edi
  0005c	75 11		 jne	 SHORT $LN10@CreateHand

; 214  : 		::GlobalFree( hBlock );

  0005e	53		 push	 ebx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4
$LN94@CreateHand:

; 225  : 	return hBlock;
; 226  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	83 c8 ff	 or	 eax, -1
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN10@CreateHand:

; 215  : 		return INVALID_HANDLE_VALUE;
; 216  : 	}
; 217  : 	*((LPDWORD) lpBuffer) = (DWORD) m_StrList.size();	lpBuffer += sizeof( DWORD );

  0006f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00072	89 07		 mov	 DWORD PTR [edi], eax
  00074	83 c7 04	 add	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00077	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0007a	8b 30		 mov	 esi, DWORD PTR [eax]
  0007c	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 218  : 	for( itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  0007e	74 58		 je	 SHORT $LN6@CreateHand
$LL7@CreateHand:

; 219  : 		*((LPWORD) lpBuffer) = (WORD) strlen( *itr );	lpBuffer += sizeof( WORD );

  00080	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00083	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL96@CreateHand:
  00086	8a 01		 mov	 al, BYTE PTR [ecx]
  00088	41		 inc	 ecx
  00089	84 c0		 test	 al, al
  0008b	75 f9		 jne	 SHORT $LL96@CreateHand
  0008d	2b ca		 sub	 ecx, edx
  0008f	66 89 0f	 mov	 WORD PTR [edi], cx
  00092	83 c7 02	 add	 edi, 2

; 220  : 		::CopyMemory( lpBuffer, *itr, strlen( *itr ) );	lpBuffer += strlen( *itr );

  00095	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00098	8b ca		 mov	 ecx, edx
  0009a	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  0009d	0f 1f 00	 npad	 3
$LL97@CreateHand:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL97@CreateHand
  000a7	2b cb		 sub	 ecx, ebx
  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	57		 push	 edi
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL98@CreateHand:
  000c0	8a 08		 mov	 cl, BYTE PTR [eax]
  000c2	40		 inc	 eax
  000c3	84 c9		 test	 cl, cl
  000c5	75 f9		 jne	 SHORT $LL98@CreateHand
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  000c7	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 220  : 		::CopyMemory( lpBuffer, *itr, strlen( *itr ) );	lpBuffer += strlen( *itr );

  000c9	2b c2		 sub	 eax, edx
  000cb	03 f8		 add	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 199  :         return this->_Ptr == _Right._Ptr;

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000d0	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 218  : 	for( itr = m_StrList.begin(); itr != m_StrList.end(); ++itr ) {

  000d3	75 ab		 jne	 SHORT $LL7@CreateHand
  000d5	8b 5d f8	 mov	 ebx, DWORD PTR _hBlock$1$[ebp]
$LN6@CreateHand:

; 221  : 	}
; 222  : 	::GlobalUnlock( hBlock );

  000d8	53		 push	 ebx
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalUnlock@4

; 223  : 
; 224  : 	m_hHandle = hBlock;

  000df	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000e2	5f		 pop	 edi

; 225  : 	return hBlock;
; 226  : }

  000e3	5e		 pop	 esi
  000e4	89 18		 mov	 DWORD PTR [eax], ebx
  000e6	8b c3		 mov	 eax, ebx
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?CreateHandle@_CPostItMemoryBlock@@QAEPAXXZ ENDP	; _CPostItMemoryBlock::CreateHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Assign@_CPostItMemoryBlock@@QAEHPAX@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_dwCount$1$ = -4					; size = 4
_hBlock$ = 8						; size = 4
?Assign@_CPostItMemoryBlock@@QAEHPAX@Z PROC		; _CPostItMemoryBlock::Assign, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 174  : 	if( hBlock == NULL || hBlock == INVALID_HANDLE_VALUE )

  00006	8b 45 08	 mov	 eax, DWORD PTR _hBlock$[ebp]
  00009	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	56		 push	 esi
  0000d	85 c0		 test	 eax, eax
  0000f	74 68		 je	 SHORT $LN6@Assign
  00011	83 f8 ff	 cmp	 eax, -1
  00014	74 63		 je	 SHORT $LN6@Assign

; 176  : 	LPBYTE lpBuffer = (LPBYTE) ::GlobalLock( hBlock );

  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalLock@4
  0001d	8b f0		 mov	 esi, eax

; 177  : 
; 178  : 	if( lpBuffer == NULL )

  0001f	85 f6		 test	 esi, esi
  00021	74 56		 je	 SHORT $LN6@Assign

; 179  : 		return FALSE;
; 180  : 	DWORD dwCount = *((LPDWORD) lpBuffer);				lpBuffer += sizeof( DWORD );

  00023	8b 06		 mov	 eax, DWORD PTR [esi]
  00025	83 c6 04	 add	 esi, 4
  00028	89 45 fc	 mov	 DWORD PTR _dwCount$1$[ebp], eax

; 181  : 	for( DWORD dwI=0; dwI < dwCount; dwI++ ) {

  0002b	85 c0		 test	 eax, eax
  0002d	74 35		 je	 SHORT $LN3@Assign
  0002f	53		 push	 ebx
  00030	57		 push	 edi
$LL4@Assign:

; 182  : 		WORD	wLen = *((LPWORD) lpBuffer);			lpBuffer += sizeof( WORD );

  00031	0f b7 1e	 movzx	 ebx, WORD PTR [esi]
  00034	83 c6 02	 add	 esi, 2

; 183  : 
; 184  : 		LPSTR	lpszText = new CHAR[ wLen + 1 ];

  00037	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 185  : 		::CopyMemory( lpszText, lpBuffer, wLen );

  00040	53		 push	 ebx
  00041	8b f8		 mov	 edi, eax
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 _memcpy

; 186  : 		lpszText[ wLen ] = '\0';
; 187  : 
; 188  : 		lpBuffer += wLen;
; 189  : 
; 190  : 		Put( lpszText );

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  00054	03 f3		 add	 esi, ebx
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?Put@_CPostItMemoryBlock@@QAEHPBD@Z ; _CPostItMemoryBlock::Put
  0005c	83 6d fc 01	 sub	 DWORD PTR _dwCount$1$[ebp], 1
  00060	75 cf		 jne	 SHORT $LL4@Assign
  00062	5f		 pop	 edi
  00063	5b		 pop	 ebx
$LN3@Assign:

; 191  : 	}
; 192  : 	::GlobalUnlock( hBlock );

  00064	ff 75 08	 push	 DWORD PTR _hBlock$[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalUnlock@4

; 193  : 	return TRUE;

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	5e		 pop	 esi

; 194  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN6@Assign:

; 175  : 		return FALSE;

  00079	33 c0		 xor	 eax, eax
  0007b	5e		 pop	 esi

; 194  : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Assign@_CPostItMemoryBlock@@QAEHPAX@Z ENDP		; _CPostItMemoryBlock::Assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ??1_CPostItMemoryBlock@@QAE@XZ
_TEXT	SEGMENT
??1_CPostItMemoryBlock@@QAE@XZ PROC			; _CPostItMemoryBlock::~_CPostItMemoryBlock, COMDAT
; _this$ = ecx

; 164  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00004	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00007	8b 30		 mov	 esi, DWORD PTR [eax]
  00009	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 165  : 	for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ) {

  0000b	74 3a		 je	 SHORT $LN3@CPostItMem
  0000d	57		 push	 edi
  0000e	66 90		 npad	 2
$LL2@CPostItMem:

; 166  : 		LPSTR	lpszText = *itr;

  00010	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 167  : 		SAFE_DELETE_ARRAY( lpszText );

  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN5@CPostItMem
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001d	83 c4 04	 add	 esp, 4
$LN5@CPostItMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00020	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1353 :         const auto _Result = _Where._Ptr->_Next;

  00023	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00025	6a 0c		 push	 12			; 0000000cH
  00027	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00028	89 38		 mov	 DWORD PTR [eax], edi

; 397  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 398  :         --_Mysize;

  00032	ff 4b 08	 dec	 DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0003a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00040	8b f7		 mov	 esi, edi

; 199  :         return this->_Ptr == _Right._Ptr;

  00042	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 165  : 	for( StrListItr itr = m_StrList.begin(); itr != m_StrList.end(); ) {

  00044	75 ca		 jne	 SHORT $LL2@CPostItMem
  00046	5f		 pop	 edi
$LN3@CPostItMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 324  :         _Head->_Prev->_Next = nullptr;

  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00050	8b 00		 mov	 eax, DWORD PTR [eax]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00052	85 c0		 test	 eax, eax
  00054	74 13		 je	 SHORT $LN55@CPostItMem
$LL56@CPostItMem:

; 328  :             _Pnext = _Pnode->_Next;

  00056	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00058	6a 0c		 push	 12			; 0000000cH
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00060	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00063	8b c6		 mov	 eax, esi
  00065	85 f6		 test	 esi, esi
  00067	75 ed		 jne	 SHORT $LL56@CPostItMem
$LN55@CPostItMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00069	6a 0c		 push	 12			; 0000000cH
  0006b	ff 73 04	 push	 DWORD PTR [ebx+4]
  0006e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00073	83 c4 08	 add	 esp, 8
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 170  : }

  00078	c3		 ret	 0
??1_CPostItMemoryBlock@@QAE@XZ ENDP			; _CPostItMemoryBlock::~_CPostItMemoryBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ??0_CPostItMemoryBlock@@QAE@XZ
_TEXT	SEGMENT
__Newhead$1 = -4					; size = 4
_this$ = -4						; size = 4
??0_CPostItMemoryBlock@@QAE@XZ PROC			; _CPostItMemoryBlock::_CPostItMemoryBlock, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000b	6a 0c		 push	 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 159  : _CPostItMemoryBlock::_CPostItMemoryBlock( void ) : m_hHandle( NULL )

  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00021	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  00026	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00028	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	89 75 fc	 mov	 DWORD PTR __Newhead$1[ebp], esi
  00030	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00035	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  00038	50		 push	 eax
  00039	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_List_node<char *,void *> *,std::_List_node<char *,void *> * &>
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  00045	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp

; 161  : }

  00048	8b c7		 mov	 eax, edi
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??0_CPostItMemoryBlock@@QAE@XZ ENDP			; _CPostItMemoryBlock::_CPostItMemoryBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Destroy@CPostIt@@IAEXXZ
_TEXT	SEGMENT
?Destroy@CPostIt@@IAEXXZ PROC				; CPostIt::Destroy, COMDAT
; _this$ = ecx

; 102  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 103  : 	Flush();

  00004	e8 00 00 00 00	 call	 ?Flush@CPostIt@@QAEHXZ	; CPostIt::Flush

; 104  : 	SAFE_DELETE( m_pMemoryBlock );

  00009	8b b7 08 01 00
	00		 mov	 esi, DWORD PTR [edi+264]
  0000f	85 f6		 test	 esi, esi
  00011	74 1c		 je	 SHORT $LN2@Destroy
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1_CPostItMemoryBlock@@QAE@XZ ; _CPostItMemoryBlock::~_CPostItMemoryBlock
  0001a	6a 0c		 push	 12			; 0000000cH
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
  00025	c7 87 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+264], 0
$LN2@Destroy:

; 105  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?Destroy@CPostIt@@IAEXXZ ENDP				; CPostIt::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Init@CPostIt@@IAEHPBD@Z
_TEXT	SEGMENT
_szAppName$ = 8						; size = 4
?Init@CPostIt@@IAEHPBD@Z PROC				; CPostIt::Init, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	if( szAppName == NULL || !*szAppName ) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _szAppName$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 57		 je	 SHORT $LN4@Init
  0000a	80 38 00	 cmp	 BYTE PTR [eax], 0
  0000d	74 52		 je	 SHORT $LN4@Init

; 42   : 	} else {
; 43   : 		strcpy( m_szClipFormatName, "YMCF_" );

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]

; 44   : 		strcat( m_szClipFormatName, szAppName );

  00014	8b f0		 mov	 esi, eax
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_05FEKNMKB@YMCF_@
  0001c	89 0f		 mov	 DWORD PTR [edi], ecx
  0001e	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FEKNMKB@YMCF_@+4
  00025	66 89 4f 04	 mov	 WORD PTR [edi+4], cx
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@Init:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL6@Init
  00037	2b c6		 sub	 eax, esi
  00039	4f		 dec	 edi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL7@Init:
  00040	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00043	47		 inc	 edi
  00044	84 c9		 test	 cl, cl
  00046	75 f8		 jne	 SHORT $LL7@Init
  00048	8b c8		 mov	 ecx, eax
  0004a	c1 e9 02	 shr	 ecx, 2
  0004d	f3 a5		 rep movsd
  0004f	8b c8		 mov	 ecx, eax

; 45   : 	}
; 46   : 	return TRUE;
; 47   : }

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	83 e1 03	 and	 ecx, 3
  00059	f3 a4		 rep movsb
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN4@Init:

; 41   : 		strcpy( m_szClipFormatName, "YMCF" );

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04LBFPPOKC@YMCF@
  00066	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00069	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04LBFPPOKC@YMCF@+4
  0006e	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 45   : 	}
; 46   : 	return TRUE;
; 47   : }

  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?Init@CPostIt@@IAEHPBD@Z ENDP				; CPostIt::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?CopyTo@CPostIt@@QAEHPAV1@PBD@Z
_TEXT	SEGMENT
_pPostIt$ = 8						; size = 4
_lpszKeyName$ = 12					; size = 4
?CopyTo@CPostIt@@QAEHPAV1@PBD@Z PROC			; CPostIt::CopyTo, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	if( m_pMemoryBlock == NULL )

  00003	8b 89 08 01 00
	00		 mov	 ecx, DWORD PTR [ecx+264]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 19		 je	 SHORT $LN5@CopyTo

; 52   : 		return FALSE;
; 53   : 	LPSTR szText = m_pMemoryBlock->Find( lpszKeyName );

  0000d	ff 75 0c	 push	 DWORD PTR _lpszKeyName$[ebp]
  00010	e8 00 00 00 00	 call	 ?Find@_CPostItMemoryBlock@@QAEPADPBD@Z ; _CPostItMemoryBlock::Find

; 54   : 	if( szText == NULL )

  00015	85 c0		 test	 eax, eax
  00017	74 0d		 je	 SHORT $LN5@CopyTo

; 56   : 	return pPostIt->Set( szText );

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _pPostIt$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?Set@CPostIt@@QAEHPBD@Z	; CPostIt::Set

; 57   : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN5@CopyTo:

; 55   : 		return FALSE;

  00026	33 c0		 xor	 eax, eax

; 57   : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?CopyTo@CPostIt@@QAEHPAV1@PBD@Z ENDP			; CPostIt::CopyTo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Set@CPostIt@@QAEHPBDK@Z
_TEXT	SEGMENT
_szValue$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpszKeyName$ = 8					; size = 4
_dwValue$ = 12						; size = 4
?Set@CPostIt@@QAEHPBDK@Z PROC				; CPostIt::Set, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpszKeyName$[ebp]

; 118  : 	CHAR szValue[12];
; 119  : 
; 120  : 	_snprintf( szValue, 12, "%d", dwValue );

  00014	8d 45 f0	 lea	 eax, DWORD PTR _szValue$[ebp]
  00017	57		 push	 edi
  00018	ff 75 0c	 push	 DWORD PTR _dwValue$[ebp]
  0001b	8b f9		 mov	 edi, ecx
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00022	6a 0c		 push	 12			; 0000000cH
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 __snprintf
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 121  : 	return Set( lpszKeyName, szValue );

  0002d	8d 45 f0	 lea	 eax, DWORD PTR _szValue$[ebp]
  00030	8b cf		 mov	 ecx, edi
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?Set@CPostIt@@QAEHPBD0@Z ; CPostIt::Set

; 122  : }

  00039	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003c	5f		 pop	 edi
  0003d	33 cd		 xor	 ecx, ebp
  0003f	5e		 pop	 esi
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?Set@CPostIt@@QAEHPBDK@Z ENDP				; CPostIt::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Set@CPostIt@@QAEHPBD0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpszKeyName$ = 8					; size = 4
_lpBuffer$ = 12						; size = 4
?Set@CPostIt@@QAEHPBD0@Z PROC				; CPostIt::Set, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Set@CPostIt@@QAEHPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 109  : 	if( m_pMemoryBlock == NULL )

  00026	8b 86 08 01 00
	00		 mov	 eax, DWORD PTR [esi+264]
  0002c	85 c0		 test	 eax, eax
  0002e	75 30		 jne	 SHORT $LN2@Set

; 110  : 		m_pMemoryBlock = new _CPostItMemoryBlock;

  00030	6a 0c		 push	 12			; 0000000cH
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	85 c0		 test	 eax, eax
  00046	74 09		 je	 SHORT $LN4@Set
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ??0_CPostItMemoryBlock@@QAE@XZ ; _CPostItMemoryBlock::_CPostItMemoryBlock
  0004f	eb 02		 jmp	 SHORT $LN5@Set
$LN4@Set:
  00051	33 c0		 xor	 eax, eax
$LN5@Set:
  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	89 86 08 01 00
	00		 mov	 DWORD PTR [esi+264], eax
$LN2@Set:

; 111  : 	m_pMemoryBlock->Put( lpszKeyName, lpBuffer );

  00060	ff 75 0c	 push	 DWORD PTR _lpBuffer$[ebp]
  00063	8b c8		 mov	 ecx, eax
  00065	ff 75 08	 push	 DWORD PTR _lpszKeyName$[ebp]
  00068	e8 00 00 00 00	 call	 ?Put@_CPostItMemoryBlock@@QAEHPBD0@Z ; _CPostItMemoryBlock::Put

; 112  : 	m_bModified = TRUE;

  0006d	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 113  : 	return TRUE;

  00073	b8 01 00 00 00	 mov	 eax, 1

; 114  : }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Set@CPostIt@@QAEHPBD0@Z$0:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?Set@CPostIt@@QAEHPBD0@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Set@CPostIt@@QAEHPBD0@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Set@CPostIt@@QAEHPBD0@Z ENDP				; CPostIt::Set
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Set@CPostIt@@QAEHPBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpBuffer$ = 8						; size = 4
?Set@CPostIt@@QAEHPBD@Z PROC				; CPostIt::Set, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Set@CPostIt@@QAEHPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 126  : 	if( lpBuffer == NULL )

  00026	83 7d 08 00	 cmp	 DWORD PTR _lpBuffer$[ebp], 0
  0002a	75 14		 jne	 SHORT $LN2@Set

; 127  : 		return FALSE;

  0002c	33 c0		 xor	 eax, eax

; 133  : }

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	5e		 pop	 esi
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN2@Set:

; 128  : 	if( m_pMemoryBlock == NULL )

  00040	8b 86 08 01 00
	00		 mov	 eax, DWORD PTR [esi+264]
  00046	85 c0		 test	 eax, eax
  00048	75 30		 jne	 SHORT $LN3@Set

; 129  : 		m_pMemoryBlock = new _CPostItMemoryBlock;

  0004a	6a 0c		 push	 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005e	85 c0		 test	 eax, eax
  00060	74 09		 je	 SHORT $LN5@Set
  00062	8b c8		 mov	 ecx, eax
  00064	e8 00 00 00 00	 call	 ??0_CPostItMemoryBlock@@QAE@XZ ; _CPostItMemoryBlock::_CPostItMemoryBlock
  00069	eb 02		 jmp	 SHORT $LN6@Set
$LN5@Set:
  0006b	33 c0		 xor	 eax, eax
$LN6@Set:
  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	89 86 08 01 00
	00		 mov	 DWORD PTR [esi+264], eax
$LN3@Set:

; 130  : 	m_pMemoryBlock->Put( lpBuffer );

  0007a	ff 75 08	 push	 DWORD PTR _lpBuffer$[ebp]
  0007d	8b c8		 mov	 ecx, eax
  0007f	e8 00 00 00 00	 call	 ?Put@_CPostItMemoryBlock@@QAEHPBD@Z ; _CPostItMemoryBlock::Put

; 131  : 	m_bModified = TRUE;

  00084	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 132  : 	return TRUE;

  0008a	b8 01 00 00 00	 mov	 eax, 1

; 133  : }

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5e		 pop	 esi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Set@CPostIt@@QAEHPBD@Z$0:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?Set@CPostIt@@QAEHPBD@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Set@CPostIt@@QAEHPBD@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Set@CPostIt@@QAEHPBD@Z ENDP				; CPostIt::Set
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Get@CPostIt@@QAEHPBDPADK@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpszKeyName$ = 8					; size = 4
_lpBuffer$ = 12						; size = 4
_nSize$ = 16						; size = 4
?Get@CPostIt@@QAEHPBDPADK@Z PROC			; CPostIt::Get, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Get@CPostIt@@QAEHPBDPADK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 137  : 	if( m_pMemoryBlock == NULL ) {

  00027	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
  0002d	85 c9		 test	 ecx, ecx
  0002f	0f 85 84 00 00
	00		 jne	 $LN2@Get

; 138  : 		UINT	uDGPFormat;
; 139  : 
; 140  : 		uDGPFormat = ::RegisterClipboardFormatA( m_szClipFormatName );

  00035	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClipboardFormatA@4

; 141  : 		if( ::OpenClipboard( NULL ) == FALSE )

  0003f	6a 00		 push	 0
  00041	8b f8		 mov	 edi, eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenClipboard@4
  00049	85 c0		 test	 eax, eax
  0004b	74 13		 je	 SHORT $LN10@Get

; 142  : 			return FALSE;
; 143  : 
; 144  : 		HANDLE hClipboardMemory = ::GetClipboardData( uDGPFormat );

  0004d	57		 push	 edi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipboardData@4
  00054	8b f8		 mov	 edi, eax

; 145  : 
; 146  : 		if( hClipboardMemory == NULL ) {

  00056	85 ff		 test	 edi, edi
  00058	75 1b		 jne	 SHORT $LN4@Get

; 147  : 			::CloseClipboard();

  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseClipboard@0
$LN10@Get:

; 157  : }

  00060	33 c0		 xor	 eax, eax
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Get:

; 148  : 			return FALSE;
; 149  : 		}
; 150  : 		m_pMemoryBlock = new _CPostItMemoryBlock;

  00075	6a 0c		 push	 12			; 0000000cH
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00089	85 c0		 test	 eax, eax
  0008b	74 09		 je	 SHORT $LN6@Get
  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 ??0_CPostItMemoryBlock@@QAE@XZ ; _CPostItMemoryBlock::_CPostItMemoryBlock
  00094	eb 02		 jmp	 SHORT $LN7@Get
$LN6@Get:
  00096	33 c0		 xor	 eax, eax
$LN7@Get:

; 151  : 		m_pMemoryBlock->Assign( hClipboardMemory );

  00098	57		 push	 edi
  00099	8b c8		 mov	 ecx, eax
  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	89 86 08 01 00
	00		 mov	 DWORD PTR [esi+264], eax
  000a8	e8 00 00 00 00	 call	 ?Assign@_CPostItMemoryBlock@@QAEHPAX@Z ; _CPostItMemoryBlock::Assign

; 152  : 
; 153  : 		::CloseClipboard();

  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseClipboard@0
  000b3	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
$LN2@Get:

; 154  : 	}
; 155  : 
; 156  : 	return m_pMemoryBlock->Get( lpszKeyName, lpBuffer, nSize );

  000b9	ff 75 10	 push	 DWORD PTR _nSize$[ebp]
  000bc	ff 75 0c	 push	 DWORD PTR _lpBuffer$[ebp]
  000bf	ff 75 08	 push	 DWORD PTR _lpszKeyName$[ebp]
  000c2	e8 00 00 00 00	 call	 ?Get@_CPostItMemoryBlock@@QAEHPBDPADK@Z ; _CPostItMemoryBlock::Get

; 157  : }

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Get@CPostIt@@QAEHPBDPADK@Z$0:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?Get@CPostIt@@QAEHPBDPADK@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Get@CPostIt@@QAEHPBDPADK@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Get@CPostIt@@QAEHPBDPADK@Z ENDP			; CPostIt::Get
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Empty@CPostIt@@QAEXXZ
_TEXT	SEGMENT
?Empty@CPostIt@@QAEXXZ PROC				; CPostIt::Empty, COMDAT
; _this$ = ecx

; 83   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 84   : 	SAFE_DELETE( m_pMemoryBlock );

  00004	8b be 08 01 00
	00		 mov	 edi, DWORD PTR [esi+264]
  0000a	85 ff		 test	 edi, edi
  0000c	74 1c		 je	 SHORT $LN2@Empty
  0000e	8b cf		 mov	 ecx, edi
  00010	e8 00 00 00 00	 call	 ??1_CPostItMemoryBlock@@QAE@XZ ; _CPostItMemoryBlock::~_CPostItMemoryBlock
  00015	6a 0c		 push	 12			; 0000000cH
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001d	83 c4 08	 add	 esp, 8
  00020	c7 86 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+264], 0
$LN2@Empty:

; 85   : 
; 86   : 	UINT	uDGPFormat;
; 87   : 
; 88   : 	uDGPFormat = ::RegisterClipboardFormatA( m_szClipFormatName );

  0002a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClipboardFormatA@4

; 89   : 	if( ::OpenClipboard( NULL ) == FALSE )

  00034	6a 00		 push	 0
  00036	8b f8		 mov	 edi, eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenClipboard@4
  0003e	85 c0		 test	 eax, eax
  00040	74 20		 je	 SHORT $LN1@Empty

; 90   : 		return;
; 91   : 	HANDLE hClipboardMemory = ::GetClipboardData( uDGPFormat );

  00042	57		 push	 edi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipboardData@4

; 92   : 	if( hClipboardMemory ) {

  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN4@Empty

; 93   : //		::GlobalFree( hClipboardMemory );
; 94   : 		::SetClipboardData( uDGPFormat, NULL );

  0004d	6a 00		 push	 0
  0004f	57		 push	 edi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetClipboardData@8
$LN4@Empty:

; 95   : 	}
; 96   : 	::CloseClipboard();

  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseClipboard@0

; 97   : 
; 98   : 	m_bModified = FALSE;

  0005c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@Empty:

; 99   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	c3		 ret	 0
?Empty@CPostIt@@QAEXXZ ENDP				; CPostIt::Empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ?Flush@CPostIt@@QAEHXZ
_TEXT	SEGMENT
?Flush@CPostIt@@QAEHXZ PROC				; CPostIt::Flush, COMDAT
; _this$ = ecx

; 60   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 61   : 	if( m_bModified == FALSE )

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	74 4f		 je	 SHORT $LN7@Flush

; 62   : 		return FALSE;
; 63   : 	if( m_pMemoryBlock == NULL )

  00009	83 be 08 01 00
	00 00		 cmp	 DWORD PTR [esi+264], 0
  00010	74 46		 je	 SHORT $LN7@Flush

; 64   : 		return FALSE;
; 65   : 	UINT	uDGPFormat;
; 66   : 
; 67   : 	uDGPFormat = ::RegisterClipboardFormatA( m_szClipFormatName );

  00012	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClipboardFormatA@4

; 68   : 	if( ::OpenClipboard( NULL ) == FALSE )

  0001c	6a 00		 push	 0
  0001e	8b f8		 mov	 edi, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenClipboard@4
  00026	85 c0		 test	 eax, eax
  00028	74 2e		 je	 SHORT $LN7@Flush

; 69   : 		return FALSE;
; 70   : 	if( ::SetClipboardData( uDGPFormat, m_pMemoryBlock->CreateHandle() ) == NULL ) {

  0002a	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
  00030	e8 00 00 00 00	 call	 ?CreateHandle@_CPostItMemoryBlock@@QAEPAXXZ ; _CPostItMemoryBlock::CreateHandle
  00035	50		 push	 eax
  00036	57		 push	 edi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetClipboardData@8
  0003d	85 c0		 test	 eax, eax
  0003f	75 1c		 jne	 SHORT $LN5@Flush

; 71   : //		DWORD dwLastError = ::GetLastError();
; 72   : 		m_pMemoryBlock->DestroyHandle();

  00041	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
  00047	e8 00 00 00 00	 call	 ?DestroyHandle@_CPostItMemoryBlock@@QAEHXZ ; _CPostItMemoryBlock::DestroyHandle

; 73   : 		::CloseClipboard();

  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseClipboard@0

; 74   : 		m_bModified = FALSE;

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN7@Flush:

; 80   : }

  00058	5f		 pop	 edi
  00059	33 c0		 xor	 eax, eax
  0005b	5e		 pop	 esi
  0005c	c3		 ret	 0
$LN5@Flush:

; 75   : 		return FALSE;
; 76   : 	}
; 77   : 	::CloseClipboard();

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseClipboard@0
  00063	5f		 pop	 edi

; 78   : 	m_bModified = FALSE;

  00064	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 79   : 	return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1

; 80   : }

  0006f	5e		 pop	 esi
  00070	c3		 ret	 0
?Flush@CPostIt@@QAEHXZ ENDP				; CPostIt::Flush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ??1CPostIt@@QAE@XZ
_TEXT	SEGMENT
??1CPostIt@@QAE@XZ PROC					; CPostIt::~CPostIt, COMDAT
; _this$ = ecx

; 35   : 	Destroy();

  00000	e9 00 00 00 00	 jmp	 ?Destroy@CPostIt@@IAEXXZ ; CPostIt::Destroy
??1CPostIt@@QAE@XZ ENDP					; CPostIt::~CPostIt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\CPostIt.cpp
;	COMDAT ??0CPostIt@@QAE@PBD@Z
_TEXT	SEGMENT
_szAppName$ = 8						; size = 4
??0CPostIt@@QAE@PBD@Z PROC				; CPostIt::CPostIt, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 30   : 	Init( szAppName );

  00004	ff 75 08	 push	 DWORD PTR _szAppName$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 86 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+264], 0
  00019	e8 00 00 00 00	 call	 ?Init@CPostIt@@IAEHPBD@Z ; CPostIt::Init

; 31   : }

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CPostIt@@QAE@PBD@Z ENDP				; CPostIt::CPostIt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);
; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1975 :         __crt_va_end(_ArgList);
; 1976 :         return _Result;
; 1977 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
