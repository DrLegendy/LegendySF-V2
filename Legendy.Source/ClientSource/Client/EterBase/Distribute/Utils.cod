; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?CreateTempFileName@@YAPBDPBD@Z			; CreateTempFileName
PUBLIC	?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ; GetFilePathNameExtension
PUBLIC	?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetFileExtension
PUBLIC	?GetFileNameParts@@YAXPBDHPAD11@Z		; GetFileNameParts
PUBLIC	?GetOldIndexingName@@YAXPADH@Z			; GetOldIndexingName
PUBLIC	?GetIndexingName@@YAXPADK@Z			; GetIndexingName
PUBLIC	?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
PUBLIC	?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
PUBLIC	?GetOnlyPathName@@YAPBDPBD@Z			; GetOnlyPathName
PUBLIC	?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetLocalFileName
PUBLIC	?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExceptionPathName
PUBLIC	?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
PUBLIC	?StringLowers@@YAXPAD@Z				; StringLowers
PUBLIC	?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?StringPath@@YAXPAD@Z				; StringPath
PUBLIC	?StringPath@@YAXPBDPAD@Z			; StringPath
PUBLIC	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?PrintAsciiData@@YAXPBXH@Z			; PrintAsciiData
PUBLIC	?IsFile@@YA_NPBD@Z				; IsFile
PUBLIC	?IsGlobalFileName@@YA_NPBD@Z			; IsGlobalFileName
PUBLIC	?MIN@@YAHHH@Z					; MIN
PUBLIC	?MAX@@YAHHH@Z					; MAX
PUBLIC	?MINMAX@@YAHHHH@Z				; MINMAX
PUBLIC	?fMIN@@YAMMM@Z					; fMIN
PUBLIC	?fMAX@@YAMMM@Z					; fMAX
PUBLIC	?fMINMAX@@YAMMMM@Z				; fMINMAX
PUBLIC	?MyCreateDirectory@@YAXPBD@Z			; MyCreateDirectory
PUBLIC	?RemoveAllDirectory@@YAXPBD@Z			; RemoveAllDirectory
PUBLIC	?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; SplitLine
PUBLIC	?_getf@@YAPBDPBDZZ				; _getf
PUBLIC	?CommandLineToArgv@@YAPAPADPADPAH@Z		; CommandLineToArgv
PUBLIC	?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; StringExceptCharacter
PUBLIC	?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExcutedFileName
PUBLIC	??1CDirRemover@@UAE@XZ				; CDirRemover::~CDirRemover
PUBLIC	?OnFolder@CDirRemover@@UAE_NPBD00@Z		; CDirRemover::OnFolder
PUBLIC	?OnFile@CDirRemover@@UAE_NPBD0@Z		; CDirRemover::OnFile
PUBLIC	??_GCDirRemover@@UAEPAXI@Z			; CDirRemover::`scalar deleting destructor'
PUBLIC	?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_in_place@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy_in_place<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
PUBLIC	??$_Destroy_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_03NGHAOOHL@etb@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_03NDEAONJP@?5?5?5@			; `string'
PUBLIC	??_C@_05CNDJFPDP@?$CF02x?5@			; `string'
PUBLIC	??_C@_02MINBJDHL@?$HM?5@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
PUBLIC	??_7CDirRemover@@6B@				; CDirRemover::`vftable'
PUBLIC	??_C@_03EMIMMIHL@?$CK?4?$CK@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDirRemover@@6B@				; CDirRemover::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDirRemover@@@8				; CDirRemover `RTTI Type Descriptor'
PUBLIC	??_R3CDirRemover@@8				; CDirRemover::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDirRemover@@8				; CDirRemover::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDirRemover@@8			; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDir@@8				; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDir@@@8				; CDir `RTTI Type Descriptor'
PUBLIC	??_R3CDir@@8					; CDir::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDir@@8					; CDir::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isprint:PROC
EXTRN	_strchr:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__RemoveDirectoryA@4:PROC
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	__imp__GetTempFileNameA@16:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__ecvt:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__getcwd:PROC
EXTRN	__access:PROC
EXTRN	__chmod:PROC
EXTRN	??0CDir@@QAE@XZ:PROC				; CDir::CDir
EXTRN	??1CDir@@UAE@XZ:PROC				; CDir::~CDir
EXTRN	?Create@CDir@@QAE_NPBD0H@Z:PROC			; CDir::Create
EXTRN	?korean_tolower@@YADD@Z:PROC			; korean_tolower
EXTRN	??_ECDirRemover@@UAEPAXI@Z:PROC			; CDirRemover::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
_BSS	SEGMENT
?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA DB 0105H DUP (?) ; `CreateTempFileName'::`2'::szTempName
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA DD 01H DUP (?) ; `GetOnlyPathName'::`2'::$TSS0
_BSS	ENDS
_BSS	SEGMENT
?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A DB 014H DUP (?) ; CDirRemover::ms_strDirectoryDeque
_BSS	ENDS
;	COMDAT ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
_BSS	SEGMENT
?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA DB 0100H DUP (?)	; `_getf'::`2'::szBuf
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; ??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R2CDir@@8
rdata$r	SEGMENT
??_R2CDir@@8 DD	FLAT:??_R1A@?0A@EA@CDir@@8		; CDir::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDir@@8
rdata$r	SEGMENT
??_R3CDir@@8 DD	00H					; CDir::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDir@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDir@@@8
data$r	SEGMENT
??_R0?AVCDir@@@8 DD FLAT:??_7type_info@@6B@		; CDir `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDir@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDir@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDir@@8 DD FLAT:??_R0?AVCDir@@@8		; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDir@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDirRemover@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDirRemover@@8 DD FLAT:??_R0?AVCDirRemover@@@8 ; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R2CDirRemover@@8
rdata$r	SEGMENT
??_R2CDirRemover@@8 DD FLAT:??_R1A@?0A@EA@CDirRemover@@8 ; CDirRemover::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDir@@8
rdata$r	ENDS
;	COMDAT ??_R3CDirRemover@@8
rdata$r	SEGMENT
??_R3CDirRemover@@8 DD 00H				; CDirRemover::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDirRemover@@@8
data$r	SEGMENT
??_R0?AVCDirRemover@@@8 DD FLAT:??_7type_info@@6B@	; CDirRemover `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDirRemover@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDirRemover@@6B@
rdata$r	SEGMENT
??_R4CDirRemover@@6B@ DD 00H				; CDirRemover::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDirRemover@@@8
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMIMMIHL@?$CK?4?$CK@
CONST	SEGMENT
??_C@_03EMIMMIHL@?$CK?4?$CK@ DB '*.*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CDirRemover@@6B@
CONST	SEGMENT
??_7CDirRemover@@6B@ DD FLAT:??_R4CDirRemover@@6B@	; CDirRemover::`vftable'
	DD	FLAT:??_ECDirRemover@@UAEPAXI@Z
	DD	FLAT:?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	FLAT:?OnFile@CDirRemover@@UAE_NPBD0@Z
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MINBJDHL@?$HM?5@
CONST	SEGMENT
??_C@_02MINBJDHL@?$HM?5@ DB '| ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNDJFPDP@?$CF02x?5@
CONST	SEGMENT
??_C@_05CNDJFPDP@?$CF02x?5@ DB '%02x ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDEAONJP@?5?5?5@
CONST	SEGMENT
??_C@_03NDEAONJP@?5?5?5@ DB '   ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------------------------------------'
	DB	'----', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `GetOnlyPathName'::`2'::strPathName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGHAOOHL@etb@
CONST	SEGMENT
??_C@_03NGHAOOHL@etb@ DB 'etb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0
__ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2
__ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1
__ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RemoveAllDirectory@@YAXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0
__ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveAllDirectory@@YAXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z PROC ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1814 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1815 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1816 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1817 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1818 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1819 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ENDP ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z PROC ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ENDP ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Destroy_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z PROC ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 969  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 970  :     if _CONSTEXPR_IF (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 971  :         for (; _First != _Last; ++_First) {
; 972  :             _Destroy_in_place(*_First);
; 973  :         }
; 974  :     }
; 975  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ENDP ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>, COMDAT

; 1874 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1879 :     } else {
; 1880 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1881 :         for (; 0 < _Count; --_Count) {
; 1882 :             _Backout._Emplace_back();
; 1883 :         }
; 1884 : 
; 1885 :         return _Backout._Release();
; 1886 :     }
; 1887 : }

  00012	5d		 pop	 ebp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z PROC ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1591 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1599 :     } else {
; 1600 :         _Uninitialized_backout<decltype(_UDest)> _Backout{_UDest};
; 1601 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1602 :             _Backout._Emplace_back(*_UFirst);
; 1603 :         }
; 1604 : 
; 1605 :         _UDest = _Backout._Release();
; 1606 :     }
; 1607 : 
; 1608 :     _Seek_wrapped(_Dest, _UDest);
; 1609 :     return _Dest;
; 1610 : }

  00003	5d		 pop	 ebp

; 1592 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1593 :     _Adl_verify_range(_First, _Last);
; 1594 :     auto _UFirst      = _Get_unwrapped(_First);
; 1595 :     const auto _ULast = _Get_unwrapped(_Last);
; 1596 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1597 :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 1598 :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ENDP ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1084 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Obj$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))
; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 08		 push	 8
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8

; 999  :     // deallocate a plain pointer using an allocator
; 1000 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1001 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1002 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);
; 1003 :     } else {
; 1004 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1005 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1006 :     }
; 1007 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 49		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00027	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0002f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00032	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00035	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0003a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003f	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00042	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00049	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00050	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00053	83 c0 18	 add	 eax, 24			; 00000018H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	3b c2		 cmp	 eax, edx
  00058	75 c6		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0005a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0005d	56		 push	 esi
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 902  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 903  :         _Left = _STD move(_Right);
; 904  :     }
; 905  : }

  00000	c2 00 00	 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy_in_place<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy_in_place<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 2d		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 0c		 jb	 SHORT $LN15@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00021	83 c4 08	 add	 esp, 8
$LN15@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	3b f7		 cmp	 esi, edi
  0003a	75 d4		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0003c	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1027 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1028 :     using _Ty = typename _Alloc::value_type;
; 1029 :     _Ptr->~_Ty();
; 1030 :     _Deallocate_plain(_Al, _Ptr);

  00000	e9 00 00 00 00	 jmp	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
tv843 = -8						; size = 4
__New_array$2 = -8					; size = 4
__Right_size$1$ = -4					; size = 4
__Newmap$1$ = -4					; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 1113 :     void _Emplace_back_internal(_Tys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1114 :         _PUSH_BACK_BEGIN;

  0000b	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  0000e	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00011	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00014	3b d0		 cmp	 edx, eax
  00016	0f 87 e1 00 00
	00		 ja	 $LN65@Emplace_ba

; 1429 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  0001c	85 d2		 test	 edx, edx
  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	0f 45 c2	 cmovne	 eax, edx
$LL6@Emplace_ba:

; 1430 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

  00026	8b f0		 mov	 esi, eax
  00028	2b f2		 sub	 esi, edx
  0002a	83 fe 01	 cmp	 esi, 1
  0002d	72 05		 jb	 SHORT $LN8@Emplace_ba
  0002f	83 f8 08	 cmp	 eax, 8
  00032	73 13		 jae	 SHORT $LN7@Emplace_ba
$LN8@Emplace_ba:

; 1431 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1432 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

  00034	b9 aa aa aa 0a	 mov	 ecx, 178956970		; 0aaaaaaaH
  00039	2b c8		 sub	 ecx, eax
  0003b	3b c8		 cmp	 ecx, eax
  0003d	0f 82 87 01 00
	00		 jb	 $LN61@Emplace_ba

; 1434 :             }
; 1435 : 
; 1436 :             _Newsize *= 2;

  00043	03 c0		 add	 eax, eax

; 1437 :         }

  00045	eb df		 jmp	 SHORT $LL6@Emplace_ba
$LN7@Emplace_ba:

; 1438 :         _Count = _Newsize - _Mapsize();
; 1439 : 
; 1440 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

  00047	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0004a	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004f	0f 87 70 01 00
	00		 ja	 $LN69@Emplace_ba

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00055	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0005e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00061	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  00068	89 4d f8	 mov	 DWORD PTR tv843[ebp], ecx
  0006b	03 c8		 add	 ecx, eax
  0006d	51		 push	 ecx
  0006e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00071	89 45 fc	 mov	 DWORD PTR __Newmap$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00074	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
  00077	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
  00081	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00084	83 c4 10	 add	 esp, 16			; 00000010H

; 1445 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  00087	50		 push	 eax
  00088	3b de		 cmp	 ebx, esi
  0008a	77 1d		 ja	 SHORT $LN10@Emplace_ba

; 1446 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  0008c	8d 04 99	 lea	 eax, DWORD PTR [ecx+ebx*4]
  0008f	50		 push	 eax
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1447 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  00096	8b ce		 mov	 ecx, esi
  00098	2b cb		 sub	 ecx, ebx
  0009a	51		 push	 ecx
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>

; 1448 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  000a1	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  000a4	83 c4 14	 add	 esp, 20			; 00000014H

; 1449 :         } else { // increment not greater than offset of initial block

  000a7	eb 24		 jmp	 SHORT $LN11@Emplace_ba
$LN10@Emplace_ba:

; 1450 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000a9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1451 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000b3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b6	ff 75 fc	 push	 DWORD PTR __Newmap$1$[ebp]
  000b9	8b 45 f8	 mov	 eax, DWORD PTR tv843[ebp]
  000bc	03 c1		 add	 eax, ecx
  000be	50		 push	 eax
  000bf	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
  000c8	83 c4 18	 add	 esp, 24			; 00000018H

; 1452 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000cb	8b de		 mov	 ebx, esi
$LN11@Emplace_ba:

; 1453 :         }
; 1454 : 
; 1455 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());
; 1456 :         if (_Map() != _Mapptr()) {

  000cd	53		 push	 ebx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
  000d4	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d7	83 c4 08	 add	 esp, 8
  000da	85 c9		 test	 ecx, ecx
  000dc	74 10		 je	 SHORT $LN12@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000de	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e1	c1 e0 02	 shl	 eax, 2
  000e4	50		 push	 eax
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000eb	83 c4 08	 add	 esp, 8
$LN12@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1460 :         _Map() = _Newmap; // point at new

  000ee	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  000f1	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1461 :         _Mapsize() += _Count;

  000f4	01 77 08	 add	 DWORD PTR [edi+8], esi
  000f7	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000fa	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
$LN65@Emplace_ba:

; 1114 :         _PUSH_BACK_BEGIN;

  000fd	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00100	21 4f 0c	 and	 DWORD PTR [edi+12], ecx
  00103	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00106	03 c6		 add	 eax, esi

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00108	23 c1		 and	 eax, ecx

; 1114 :         _PUSH_BACK_BEGIN;

  0010a	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  00111	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00114	83 3c 03 00	 cmp	 DWORD PTR [ebx+eax], 0
  00118	75 13		 jne	 SHORT $LN3@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0011a	6a 18		 push	 24			; 00000018H
  0011c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  00121	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00124	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  00127	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  0012a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN3@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0012d	8b 1c 03	 mov	 ebx, DWORD PTR [ebx+eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00130	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00133	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0013a	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00141	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00145	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00148	89 4d fc	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2145 :         if (_Large_string_engaged()) {

  0014b	72 05		 jb	 SHORT $LN48@Emplace_ba

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0014d	8b 00		 mov	 eax, DWORD PTR [eax]
  0014f	89 45 08	 mov	 DWORD PTR _<_Vals_0>$[ebp], eax
$LN48@Emplace_ba:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00152	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00155	73 1d		 jae	 SHORT $LN45@Emplace_ba

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00157	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  0015a	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0015f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1116 :         _PUSH_BACK_END;

  00162	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  00165	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  00168	ff 47 10	 inc	 DWORD PTR [edi+16]
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx

; 1117 :     }

  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 04 00	 ret	 4
$LN45@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00174	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00176	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0017b	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0017e	3b c1		 cmp	 eax, ecx
  00180	0f 47 c1	 cmova	 eax, ecx
  00183	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00186	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0018d	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  0018f	8d 45 f8	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00192	50		 push	 eax
  00193	53		 push	 ebx
  00194	89 75 f8	 mov	 DWORD PTR __New_array$2[ebp], esi
  00197	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0019c	8b 4d fc	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  0019f	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  001a0	51		 push	 ecx
  001a1	ff 75 08	 push	 DWORD PTR _<_Vals_0>$[ebp]
  001a4	56		 push	 esi
  001a5	e8 00 00 00 00	 call	 _memcpy
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  001ad	83 c4 18	 add	 esp, 24			; 00000018H
  001b0	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1116 :         _PUSH_BACK_END;

  001b3	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001b6	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  001b9	ff 47 10	 inc	 DWORD PTR [edi+16]
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx

; 1117 :     }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 04 00	 ret	 4
$LN69@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001c5	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN61@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1433 :                 _Xlen(); // result too long

  001ca	8b cf		 mov	 ecx, edi
  001cc	e8 00 00 00 00	 call	 ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN67@Emplace_ba:
  001d1	cc		 int	 3
??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Newvec$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 37		 mov	 esi, DWORD PTR [edi]
  00015	2b d6		 sub	 edx, esi

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b da		 mov	 ebx, edx
  00037	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0003a	03 da		 add	 ebx, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0003c	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00042	0f 84 d6 00 00
	00		 je	 $LN49@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	2b ce		 sub	 ecx, esi

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00052	43		 inc	 ebx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00055	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005a	c1 fa 02	 sar	 edx, 2
  0005d	8b ca		 mov	 ecx, edx
  0005f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00062	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00064	8b d1		 mov	 edx, ecx
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0006e	8b f3		 mov	 esi, ebx
  00070	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00072	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00075	3b f3		 cmp	 esi, ebx
  00077	0f 42 f3	 cmovb	 esi, ebx
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007a	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00080	0f 87 9d 00 00
	00		 ja	 $LN50@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00086	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00089	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00095	83 c4 04	 add	 esp, 4
  00098	89 45 f8	 mov	 DWORD PTR __Newvec$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0009e	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  000a4	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  000ab	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000b2	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000b5	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b8	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  000bb	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  000c0	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000c5	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000cc	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d3	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000d9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000db	39 55 08	 cmp	 DWORD PTR __Whereptr$[ebp], edx
  000de	74 1a		 je	 SHORT $LN5@Emplace_re

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000e0	57		 push	 edi
  000e1	50		 push	 eax
  000e2	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ee	83 c4 10	 add	 esp, 16			; 00000010H
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000f4	83 c0 18	 add	 eax, 24			; 00000018H

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f7	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fa	57		 push	 edi
  000fb	50		 push	 eax
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00103	83 c4 10	 add	 esp, 16			; 00000010H

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00106	8b cf		 mov	 ecx, edi
  00108	56		 push	 esi
  00109	53		 push	 ebx
  0010a	ff 75 f8	 push	 DWORD PTR __Newvec$1$[ebp]
  0010d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx

; 767  :     }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN49@Emplace_re:

; 738  :             _Xlength();

  0011e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN50@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00123	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN47@Emplace_re:
  00128	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;
; 1669 :         pointer& _Myfirst = _My_data._Myfirst;
; 1670 :         pointer& _Mylast  = _My_data._Mylast;
; 1671 :         pointer& _Myend   = _My_data._Myend;
; 1672 : 
; 1673 :         _My_data._Orphan_all();
; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 31		 je	 SHORT $LN2@Change_arr

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000c	57		 push	 edi
  0000d	ff 77 04	 push	 DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00020	f7 e9		 imul	 ecx
  00022	c1 fa 02	 sar	 edx, 2
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002f	c1 e0 03	 shl	 eax, 3
  00032	50		 push	 eax
  00033	ff 37		 push	 DWORD PTR [edi]
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1680 :         _Myfirst = _Newvec;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00040	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00043	89 0f		 mov	 DWORD PTR [edi], ecx
  00045	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00048	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0004b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00051	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00054	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00057	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0005a	5f		 pop	 edi

; 1683 :     }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv224 = -4						; size = 4
__Newvec$1$ = 8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00011	2b 17		 sub	 edx, DWORD PTR [edi]
  00013	f7 ea		 imul	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00015	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00018	c1 fa 02	 sar	 edx, 2
  0001b	8b da		 mov	 ebx, edx
  0001d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00020	03 da		 add	 ebx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00022	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00027	77 7a		 ja	 SHORT $LN28@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00030	89 45 fc	 mov	 DWORD PTR tv224[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00033	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00038	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0003a	57		 push	 edi
  0003b	56		 push	 esi
  0003c	ff 77 04	 push	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003f	89 75 08	 mov	 DWORD PTR __Newvec$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00049	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0004b	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0004e	85 c9		 test	 ecx, ecx
  00050	74 35		 je	 SHORT $LN20@Reallocate

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00052	57		 push	 edi
  00053	ff 77 04	 push	 DWORD PTR [edi+4]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005c	8b 37		 mov	 esi, DWORD PTR [edi]
  0005e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00063	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00066	2b ce		 sub	 ecx, esi
  00068	f7 e9		 imul	 ecx
  0006a	c1 fa 02	 sar	 edx, 2
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00074	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00077	c1 e0 03	 shl	 eax, 3
  0007a	50		 push	 eax
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00081	8b 75 08	 mov	 esi, DWORD PTR __Newvec$1$[ebp]
  00084	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00087	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0008a	89 37		 mov	 DWORD PTR [edi], esi
  0008c	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  0008f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00092	8b 45 fc	 mov	 eax, DWORD PTR tv224[ebp]
  00095	03 c6		 add	 eax, esi
  00097	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 1269 :     }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN28@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000a3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN26@Reallocate:
  000a8	cc		 int	 3
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$yd	SEGMENT
__Proxy_allocator$1 = -1				; size = 1
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 869  :         _Tidy();

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00013	50		 push	 eax
  00014	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00027	83 c4 08	 add	 esp, 8
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$di	SEGMENT
$T1 = -4						; size = 4
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque'', COMDAT

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00005	6a 08		 push	 8
  00007	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1102 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0000c	8b f0		 mov	 esi, eax

; 1103 :         _Construct_in_place(*_New_proxy, this);

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00015	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1104 :         _Myproxy            = _New_proxy;

  0001f	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  00025	68 00 00 00 00	 push	 OFFSET ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1105 :         _New_proxy->_Mycont = this;

  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  00030	e8 00 00 00 00	 call	 _atexit
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1464 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 1009 :         return _Mysize() == 0;

  00004	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00007	85 c9		 test	 ecx, ecx

; 1465 :         _Orphan_all();
; 1466 : 
; 1467 :         _Alpty _Almap(_Getal());
; 1468 :         while (!empty()) {

  00009	74 52		 je	 SHORT $LN3@Tidy
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@Tidy:

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00013	48		 dec	 eax
  00014	03 c8		 add	 ecx, eax
  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	48		 dec	 eax
  0001a	23 c8		 and	 ecx, eax

; 1142 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ));

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00022	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00025	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00028	72 0c		 jb	 SHORT $LN28@Tidy

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002b	50		 push	 eax
  0002c	ff 37		 push	 DWORD PTR [edi]
  0002e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00033	83 c4 08	 add	 esp, 8
$LN28@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00036	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00044	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1143 :         if (--_Mysize() == 0) {

  00047	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004a	83 e9 01	 sub	 ecx, 1
  0004d	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00050	75 07		 jne	 SHORT $LN46@Tidy

; 1144 :             _Myoff() = 0;

  00052	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN46@Tidy:

; 1009 :         return _Mysize() == 0;

  00059	85 c9		 test	 ecx, ecx

; 1465 :         _Orphan_all();
; 1466 : 
; 1467 :         _Alpty _Almap(_Getal());
; 1468 :         while (!empty()) {

  0005b	75 b3		 jne	 SHORT $LL2@Tidy
$LN3@Tidy:

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0005d	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00060	85 ff		 test	 edi, edi
  00062	74 1a		 je	 SHORT $LN5@Tidy
$LL40@Tidy:

; 1473 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00064	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00067	4f		 dec	 edi
  00068	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0006b	85 c0		 test	 eax, eax
  0006d	74 0b		 je	 SHORT $LN7@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006f	6a 18		 push	 24			; 00000018H
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00077	83 c4 08	 add	 esp, 8
$LN7@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0007a	85 ff		 test	 edi, edi
  0007c	75 e6		 jne	 SHORT $LL40@Tidy
$LN5@Tidy:

; 1474 :                 _Getal().deallocate(_Map()[_Block], _DEQUESIZ);
; 1475 :                 _Destroy_in_place(_Map()[_Block]);
; 1476 :             }
; 1477 :         }
; 1478 : 
; 1479 :         if (_Map() != _Mapptr()) {

  0007e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00081	85 c9		 test	 ecx, ecx
  00083	74 10		 je	 SHORT $LN47@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00088	c1 e0 02	 shl	 eax, 2
  0008b	50		 push	 eax
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00092	83 c4 08	 add	 esp, 8
$LN47@Tidy:
  00095	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1485 :     }

  00096	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000a4	5e		 pop	 esi
  000a5	c3		 ret	 0
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1418 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ??_GCDirRemover@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDirRemover@@UAEPAXI@Z PROC				; CDirRemover::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 467  : 		{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  0000c	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0e		 je	 SHORT $LN7@scalar
  00017	68 48 01 00 00	 push	 328			; 00000148H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCDirRemover@@UAEPAXI@Z ENDP				; CDirRemover::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?OnFile@CDirRemover@@UAE_NPBD0@Z
_TEXT	SEGMENT
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
?OnFile@CDirRemover@@UAE_NPBD0@Z PROC			; CDirRemover::OnFile, COMDAT
; _this$ = ecx

; 488  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 55 08	 mov	 edx, DWORD PTR _c_szPathName$[ebp]
  0002d	8b 75 0c	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00030	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00037	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003e	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00042	8b c2		 mov	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 489  : 			std::string strFullPathName;

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0004e	66 90		 npad	 2
$LL49@OnFile:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	40		 inc	 eax
  00053	84 c9		 test	 cl, cl
  00055	75 f9		 jne	 SHORT $LL49@OnFile
  00057	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0005c	50		 push	 eax
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00063	8b ce		 mov	 ecx, esi
  00065	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL50@OnFile:
  00068	8a 01		 mov	 al, BYTE PTR [ecx]
  0006a	41		 inc	 ecx
  0006b	84 c0		 test	 al, al
  0006d	75 f9		 jne	 SHORT $LL50@OnFile
  0006f	2b ca		 sub	 ecx, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00071	51		 push	 ecx
  00072	56		 push	 esi
  00073	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00076	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2153 :         return _BUF_SIZE <= _Myres;

  0007b	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0007f	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  00082	68 80 00 00 00	 push	 128			; 00000080H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00087	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 __chmod
  00091	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00094	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 2153 :         return _BUF_SIZE <= _Myres;

  00097	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0009b	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 493  : 			DeleteFile(strFullPathName.c_str());

  0009f	50		 push	 eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _strFullPathName$[ebp+20]
  000a9	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ac	72 0d		 jb	 SHORT $LN51@OnFile

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	50		 push	 eax
  000b0	ff 75 d8	 push	 DWORD PTR _strFullPathName$[ebp]
  000b3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000b8	83 c4 08	 add	 esp, 8
$LN51@OnFile:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 495  : 		}

  000bb	b0 01		 mov	 al, 1
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	33 cd		 xor	 ecx, ebp
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFile@CDirRemover@@UAE_NPBD0@Z ENDP			; CDirRemover::OnFile
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?OnFolder@CDirRemover@@UAE_NPBD00@Z
_TEXT	SEGMENT
_remover$ = -392					; size = 328
_strWorkingFolder$ = -64				; size = 24
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilter$ = 8					; size = 4
_c_szPathName$ = 12					; size = 4
_c_szFileName$ = 16					; size = 4
?OnFolder@CDirRemover@@UAE_NPBD00@Z PROC		; CDirRemover::OnFolder, COMDAT
; _this$ = ecx

; 471  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFilter$[ebp]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _c_szPathName$[ebp]
  00034	8b 7d 10	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00037	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00045	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00049	8b c2		 mov	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 472  : 			std::string strFullPathName;

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00052	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL86@OnFolder:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL86@OnFolder
  0005c	2b c6		 sub	 eax, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005e	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00061	50		 push	 eax
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00068	8b cf		 mov	 ecx, edi
  0006a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0006d	0f 1f 00	 npad	 3
$LL87@OnFolder:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL87@OnFolder
  00077	2b ca		 sub	 ecx, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00079	51		 push	 ecx
  0007a	57		 push	 edi
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0007e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 463  : 		CDirRemover()

  00083	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  00089	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  0008e	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00098	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H
  0009c	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  0009f	6a 00		 push	 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000a1	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  000a5	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  000ab	50		 push	 eax
  000ac	53		 push	 ebx
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000bd	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000c4	c6 45 c0 00	 mov	 BYTE PTR _strWorkingFolder$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 480  : 			GetWorkingFolder(strWorkingFolder);

  000c8	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  000cb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
  000d5	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  000d8	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 2153 :         return _BUF_SIZE <= _Myres;

  000db	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000df	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  000e2	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000e6	ff 75 e8	 push	 DWORD PTR _strFullPathName$[ebp+16]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ef	6a 01		 push	 1
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  000f6	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  000f9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 483  : 			StringPath(strWorkingFolder);

  000fe	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  00107	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  0010a	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00118	8b 45 d4	 mov	 eax, DWORD PTR _strWorkingFolder$[ebp+20]
  0011b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0011e	72 0d		 jb	 SHORT $LN67@OnFolder

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00120	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00121	50		 push	 eax
  00122	ff 75 c0	 push	 DWORD PTR _strWorkingFolder$[ebp]
  00125	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0012a	83 c4 08	 add	 esp, 8
$LN67@OnFolder:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 468  : 		}

  0012d	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  00133	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@
  0013d	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00142	8b 45 ec	 mov	 eax, DWORD PTR _strFullPathName$[ebp+20]
  00145	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00148	72 0d		 jb	 SHORT $LN88@OnFolder

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0014a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014b	50		 push	 eax
  0014c	ff 75 d8	 push	 DWORD PTR _strFullPathName$[ebp]
  0014f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00154	83 c4 08	 add	 esp, 8
$LN88@OnFolder:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 486  : 		}

  00157	b0 01		 mov	 al, 1
  00159	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00163	59		 pop	 ecx
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016a	33 cd		 xor	 ecx, ebp
  0016c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1:
  00008	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2:
  00013	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a 74 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-396]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFolder@CDirRemover@@UAE_NPBD00@Z ENDP		; CDirRemover::OnFolder
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ??1CDirRemover@@UAE@XZ
_TEXT	SEGMENT
??1CDirRemover@@UAE@XZ PROC				; CDirRemover::~CDirRemover, COMDAT
; _this$ = ecx

; 467  : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1CDir@@UAE@XZ		; CDir::~CDir
??1CDirRemover@@UAE@XZ ENDP				; CDirRemover::~CDirRemover
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ
text$yd	SEGMENT
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ PROC ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName'', COMDAT

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00007	72 22		 jb	 SHORT $LN7@dynamic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00010	68 00 00 00 00	 push	 OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00015	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>

; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  0001f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	5e		 pop	 esi
$LN7@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0002b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00035	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00046	c3		 ret	 0
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ENDP ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szPath$ = -268						; size = 261
__$ArrayPad$ = -4					; size = 4
_r_str$ = 8						; size = 4
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExcutedFileName, COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _r_str$[ebp]

; 578  : 	char szPath[MAX_PATH+1];
; 579  : 
; 580  : 	GetModuleFileName(NULL, szPath, MAX_PATH);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0001d	68 04 01 00 00	 push	 260			; 00000104H
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0002b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 581  : 	szPath[MAX_PATH] = '\0';

  00031	c6 45 f8 00	 mov	 BYTE PTR _szPath$[ebp+260], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL11@GetExcuted:
  00038	8a 08		 mov	 cl, BYTE PTR [eax]
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f9		 jne	 SHORT $LL11@GetExcuted
  0003f	2b c2		 sub	 eax, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 584  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00055	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 584  : }

  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExcutedFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_c_szCharacter$GSCopy$1$ = -92				; size = 4
$T2 = -88						; size = 24
_strFront$3 = -64					; size = 24
_strBack$4 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pstrString$ = 8					; size = 4
_c_szCharacter$ = 12					; size = 4
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; StringExceptCharacter, COMDAT

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _c_szCharacter$[ebp]
  0002d	8b 75 08	 mov	 esi, DWORD PTR _pstrString$[ebp]

; 529  : 	while((iNextPos = pstrString->find_first_of(c_szCharacter, icurPos)) >= 0)

  00030	8b ce		 mov	 ecx, esi
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	89 45 a4	 mov	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp], eax
  00038	e8 00 00 00 00	 call	 ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
  0003d	8b f8		 mov	 edi, eax
  0003f	85 ff		 test	 edi, edi
  00041	0f 88 52 01 00
	00		 js	 $LN3@StringExce
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@StringExce:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  00050	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  00053	8b cf		 mov	 ecx, edi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00055	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strFront$3[ebp+16], 0

; 2144 :         const value_type* _Result = _Bx._Buf;

  0005c	8b c6		 mov	 eax, esi

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  0005e	0f 42 4e 10	 cmovb	 ecx, DWORD PTR [esi+16]

; 2145 :         if (_Large_string_engaged()) {

  00062	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00066	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strFront$3[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0006d	c6 45 c0 00	 mov	 BYTE PTR _strFront$3[ebp], 0

; 2145 :         if (_Large_string_engaged()) {

  00071	72 02		 jb	 SHORT $LN124@StringExce

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00073	8b 06		 mov	 eax, DWORD PTR [esi]
$LN124@StringExce:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00075	51		 push	 ecx
  00076	50		 push	 eax
  00077	8d 4d c0	 lea	 ecx, DWORD PTR _strFront$3[ebp]
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  0007f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00082	8b c1		 mov	 eax, ecx
  00084	2b c7		 sub	 eax, edi
  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008d	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0008e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strBack$4[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00095	48		 dec	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00096	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strBack$4[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	c6 45 d8 00	 mov	 BYTE PTR _strBack$4[ebp], 0

; 2157 :         if (_Mysize < _Off) {

  000a1	3b cf		 cmp	 ecx, edi
  000a3	0f 82 0b 01 00
	00		 jb	 $LN117@StringExce

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  000a9	2b cf		 sub	 ecx, edi
  000ab	3b c8		 cmp	 ecx, eax
  000ad	0f 42 c1	 cmovb	 eax, ecx

; 2145 :         if (_Large_string_engaged()) {

  000b0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b4	8b ce		 mov	 ecx, esi
  000b6	72 02		 jb	 SHORT $LN123@StringExce

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN123@StringExce:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  000ba	50		 push	 eax
  000bb	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000be	50		 push	 eax
  000bf	8d 4d d8	 lea	 ecx, DWORD PTR _strBack$4[ebp]
  000c2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 533  : 		*pstrString = strFront + strBack;

  000c7	8d 45 d8	 lea	 eax, DWORD PTR _strBack$4[ebp]
  000ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ce	50		 push	 eax
  000cf	8d 45 c0	 lea	 eax, DWORD PTR _strFront$3[ebp]
  000d2	50		 push	 eax
  000d3	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000dc	8b f8		 mov	 edi, eax
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2587 :         if (this != _STD addressof(_Right)) {

  000e1	3b f7		 cmp	 esi, edi
  000e3	74 46		 je	 SHORT $LN84@StringExce

; 2153 :         return _BUF_SIZE <= _Myres;

  000e5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000e8	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000eb	72 0c		 jb	 SHORT $LN73@StringExce

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ed	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	51		 push	 ecx
  000ef	ff 36		 push	 DWORD PTR [esi]
  000f1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000f6	83 c4 08	 add	 esp, 8
$LN73@StringExce:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000f9	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00100	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00107	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0010a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0010d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00110	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00115	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0011a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00121	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00128	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN84@StringExce:

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0012b	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp+20]
  0012e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00131	72 0d		 jb	 SHORT $LN89@StringExce

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00133	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00134	50		 push	 eax
  00135	ff 75 a8	 push	 DWORD PTR $T2[ebp]
  00138	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0013d	83 c4 08	 add	 esp, 8
$LN89@StringExce:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00140	8b 45 ec	 mov	 eax, DWORD PTR _strBack$4[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00143	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0014a	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00151	c6 45 a8 00	 mov	 BYTE PTR $T2[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00155	83 f8 10	 cmp	 eax, 16			; 00000010H
  00158	72 0d		 jb	 SHORT $LN99@StringExce

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0015a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015b	50		 push	 eax
  0015c	ff 75 d8	 push	 DWORD PTR _strBack$4[ebp]
  0015f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00164	83 c4 08	 add	 esp, 8
$LN99@StringExce:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00167	8b 45 d4	 mov	 eax, DWORD PTR _strFront$3[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 534  : 	}

  0016a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00171	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00174	72 0d		 jb	 SHORT $LN109@StringExce

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00176	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00177	50		 push	 eax
  00178	ff 75 c0	 push	 DWORD PTR _strFront$3[ebp]
  0017b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00180	83 c4 08	 add	 esp, 8
$LN109@StringExce:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 529  : 	while((iNextPos = pstrString->find_first_of(c_szCharacter, icurPos)) >= 0)

  00183	6a 00		 push	 0
  00185	ff 75 a4	 push	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  00188	8b ce		 mov	 ecx, esi
  0018a	e8 00 00 00 00	 call	 ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
  0018f	8b f8		 mov	 edi, eax
  00191	85 ff		 test	 edi, edi
  00193	0f 89 b7 fe ff
	ff		 jns	 $LL2@StringExce
$LN3@StringExce:

; 535  : }

  00199	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a3	59		 pop	 ecx
  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
$LN117@StringExce:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2158 :             _Xran();

  001b4	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN126@StringExce:
  001b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _strFront$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _strBack$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; StringExceptCharacter
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?CommandLineToArgv@@YAPAPADPADPAH@Z
_TEXT	SEGMENT
__argv$1$ = -12						; size = 4
_argv$1$ = -8						; size = 4
_in_QM$1$ = -1						; size = 1
_CmdLine$ = 8						; size = 4
_in_TEXT$1$ = 11					; size = 1
__argc$ = 12						; size = 4
?CommandLineToArgv@@YAPAPADPADPAH@Z PROC		; CommandLineToArgv, COMDAT

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _CmdLine$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL21@CommandLin:
  00011	8a 01		 mov	 al, BYTE PTR [ecx]
  00013	41		 inc	 ecx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL21@CommandLin
  00018	2b ca		 sub	 ecx, edx

; 612  : 	i = ((len+2)/2)*sizeof(PVOID) + sizeof(PVOID);

  0001a	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0001d	d1 e8		 shr	 eax, 1
  0001f	8d 34 85 04 00
	00 00		 lea	 esi, DWORD PTR [eax*4+4]

; 613  : 
; 614  : 	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,

  00026	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00029	03 c6		 add	 eax, esi
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8

; 615  : 		i + (len+2)*sizeof(CHAR));
; 616  : 
; 617  : 	_argv = (PCHAR)(((PUCHAR)argv)+i);
; 618  : 
; 619  : 	argc = 0;

  00034	33 ff		 xor	 edi, edi
  00036	89 45 f8	 mov	 DWORD PTR _argv$1$[ebp], eax

; 620  : 	argv[argc] = _argv;
; 621  : 	in_QM = FALSE;
; 622  : 	in_TEXT = FALSE;
; 623  : 	in_SPACE = TRUE;

  00039	b6 01		 mov	 dh, 1
  0003b	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 624  : 	i = 0;
; 625  : 	j = 0;

  0003e	33 f6		 xor	 esi, esi
  00040	89 08		 mov	 DWORD PTR [eax], ecx

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  00042	8a 13		 mov	 dl, BYTE PTR [ebx]
  00044	89 4d f4	 mov	 DWORD PTR __argv$1$[ebp], ecx
  00047	32 c9		 xor	 cl, cl
  00049	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl
  0004c	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl
  0004f	84 d2		 test	 dl, dl
  00051	0f 84 86 00 00
	00		 je	 $LN3@CommandLin

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00057	8b 45 f4	 mov	 eax, DWORD PTR __argv$1$[ebp]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL2@CommandLin:

; 628  : 		if(in_QM) {

  00060	84 c9		 test	 cl, cl
  00062	74 12		 je	 SHORT $LN6@CommandLin

; 629  : 			if(a == '\"') {

  00064	80 fa 22	 cmp	 dl, 34			; 00000022H
  00067	75 07		 jne	 SHORT $LN8@CommandLin

; 630  : 				in_QM = FALSE;

  00069	32 c9		 xor	 cl, cl
  0006b	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 631  : 			} else {

  0006e	eb 62		 jmp	 SHORT $LN4@CommandLin
$LN8@CommandLin:

; 632  : 				_argv[j] = a;

  00070	88 10		 mov	 BYTE PTR [eax], dl

; 633  : 				j++;

  00072	46		 inc	 esi
  00073	40		 inc	 eax

; 634  : 			}
; 635  : 		} else {

  00074	eb 5c		 jmp	 SHORT $LN4@CommandLin
$LN6@CommandLin:

; 636  : 			switch(a) {

  00076	0f be ca	 movsx	 ecx, dl
  00079	83 c1 f7	 add	 ecx, -9			; fffffff7H
  0007c	83 f9 19	 cmp	 ecx, 25			; 00000019H
  0007f	77 39		 ja	 SHORT $LN14@CommandLin
  00081	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN22@CommandLin[ecx]
  00088	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@CommandLin[ecx*4]
$LN10@CommandLin:

; 637  : 				case '\"':
; 638  : 					in_QM = TRUE;

  0008f	b1 01		 mov	 cl, 1
  00091	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 639  : 					in_TEXT = TRUE;

  00094	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl

; 640  : 					if(in_SPACE) {

  00097	84 f6		 test	 dh, dh
  00099	74 35		 je	 SHORT $LN11@CommandLin

; 641  : 						argv[argc] = _argv+j;

  0009b	8b 55 f8	 mov	 edx, DWORD PTR _argv$1$[ebp]
  0009e	89 04 ba	 mov	 DWORD PTR [edx+edi*4], eax

; 642  : 						argc++;

  000a1	47		 inc	 edi

; 643  : 					}
; 644  : 					in_SPACE = FALSE;
; 645  : 					break;

  000a2	eb 2c		 jmp	 SHORT $LN11@CommandLin
$LN12@CommandLin:

; 646  : 				case ' ':
; 647  : 				case '\t':
; 648  : 				case '\n':
; 649  : 				case '\r':
; 650  : 					if(in_TEXT) {

  000a4	80 7d 0b 00	 cmp	 BYTE PTR _in_TEXT$1$[ebp], 0
  000a8	74 05		 je	 SHORT $LN13@CommandLin

; 651  : 						_argv[j] = '\0';

  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 652  : 						j++;

  000ad	46		 inc	 esi
  000ae	40		 inc	 eax
$LN13@CommandLin:

; 653  : 					}
; 654  : 					in_TEXT = FALSE;
; 655  : 					in_SPACE = TRUE;
; 656  : 					break;

  000af	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000b2	b6 01		 mov	 dh, 1
  000b4	c6 45 0b 00	 mov	 BYTE PTR _in_TEXT$1$[ebp], 0
  000b8	eb 18		 jmp	 SHORT $LN4@CommandLin
$LN14@CommandLin:

; 657  : 				default:
; 658  : 					in_TEXT = TRUE;

  000ba	c6 45 0b 01	 mov	 BYTE PTR _in_TEXT$1$[ebp], 1

; 659  : 					if(in_SPACE) {

  000be	84 f6		 test	 dh, dh
  000c0	74 07		 je	 SHORT $LN15@CommandLin

; 660  : 						argv[argc] = _argv+j;

  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _argv$1$[ebp]
  000c5	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 661  : 						argc++;

  000c8	47		 inc	 edi
$LN15@CommandLin:

; 662  : 					}
; 663  : 					_argv[j] = a;
; 664  : 					j++;

  000c9	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000cc	46		 inc	 esi
  000cd	88 10		 mov	 BYTE PTR [eax], dl
  000cf	40		 inc	 eax
$LN11@CommandLin:

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d0	32 f6		 xor	 dh, dh
$LN4@CommandLin:

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  000d2	8a 53 01	 mov	 dl, BYTE PTR [ebx+1]

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d5	43		 inc	 ebx
  000d6	84 d2		 test	 dl, dl
  000d8	75 86		 jne	 SHORT $LL2@CommandLin
  000da	8b 45 f8	 mov	 eax, DWORD PTR _argv$1$[ebp]
$LN3@CommandLin:

; 670  : 	}
; 671  : 	_argv[j] = '\0';

  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __argv$1$[ebp]
  000e0	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0

; 672  : 	argv[argc] = NULL;

  000e4	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0

; 673  : 
; 674  : 	(*_argc) = argc;

  000eb	8b 45 0c	 mov	 eax, DWORD PTR __argc$[ebp]
  000ee	89 38		 mov	 DWORD PTR [eax], edi

; 675  : 	return argv;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _argv$1$[ebp]
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx

; 676  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
  000fa	66 90		 npad	 2
$LN23@CommandLin:
  000fc	00 00 00 00	 DD	 $LN12@CommandLin
  00100	00 00 00 00	 DD	 $LN10@CommandLin
  00104	00 00 00 00	 DD	 $LN14@CommandLin
$LN22@CommandLin:
  00108	00		 DB	 0
  00109	00		 DB	 0
  0010a	02		 DB	 2
  0010b	02		 DB	 2
  0010c	00		 DB	 0
  0010d	02		 DB	 2
  0010e	02		 DB	 2
  0010f	02		 DB	 2
  00110	02		 DB	 2
  00111	02		 DB	 2
  00112	02		 DB	 2
  00113	02		 DB	 2
  00114	02		 DB	 2
  00115	02		 DB	 2
  00116	02		 DB	 2
  00117	02		 DB	 2
  00118	02		 DB	 2
  00119	02		 DB	 2
  0011a	02		 DB	 2
  0011b	02		 DB	 2
  0011c	02		 DB	 2
  0011d	02		 DB	 2
  0011e	02		 DB	 2
  0011f	00		 DB	 0
  00120	02		 DB	 2
  00121	01		 DB	 1
?CommandLineToArgv@@YAPAPADPADPAH@Z ENDP		; CommandLineToArgv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?_getf@@YAPBDPBDZZ
_TEXT	SEGMENT
_c_szFormat$ = 8					; size = 4
?_getf@@YAPBDPBDZZ PROC					; _getf, COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 0c	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 08	 push	 DWORD PTR _c_szFormat$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	68 00 00 00 00	 push	 OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	ff 70 04	 push	 DWORD PTR [eax+4]
  00020	83 c9 01	 or	 ecx, 1
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 595  : 	return szBuf;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA

; 596  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?_getf@@YAPBDPBDZZ ENDP					; _getf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
__Result$2$ = -852					; size = 4
__Result$2$ = -852					; size = 4
_c_szDelimeter$GSCopy$1$ = -848				; size = 4
_pkVec_strToken$GSCopy$1$ = -844			; size = 4
_strLine$1$ = -840					; size = 4
$T2 = -833						; size = 1
__Matches$3 = -832					; size = 256
__Matches$4 = -576					; size = 256
__Matches$5 = -320					; size = 256
$T6 = -64						; size = 24
_strLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szLine$ = 8						; size = 4
_c_szDelimeter$ = 12					; size = 4
_pkVec_strToken$ = 16					; size = 4
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; SplitLine, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 03 00
	00		 sub	 esp, 840		; 00000348H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szDelimeter$[ebp]
  00030	8b 7d 08	 mov	 edi, DWORD PTR _c_szLine$[ebp]
  00033	89 85 b0 fc ff
	ff		 mov	 DWORD PTR _c_szDelimeter$GSCopy$1$[ebp], eax
  00039	8b 45 10	 mov	 eax, DWORD PTR _pkVec_strToken$[ebp]
  0003c	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _pkVec_strToken$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00042	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00045	8b 30		 mov	 esi, DWORD PTR [eax]
  00047	2b ce		 sub	 ecx, esi
  00049	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004e	f7 e9		 imul	 ecx
  00050	c1 fa 02	 sar	 edx, 2
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0005a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005d	73 17		 jae	 SHORT $LN294@SplitLine

; 1307 :             if (_Newcapacity > max_size()) {
; 1308 :                 _Xlength();
; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  0005f	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  00065	6a 0a		 push	 10			; 0000000aH
  00067	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
  0006c	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  00072	8b 30		 mov	 esi, DWORD PTR [eax]
  00074	eb 06		 jmp	 SHORT $LN15@SplitLine
$LN294@SplitLine:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }
; 715  : 
; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee
; 717  :         emplace_back(_Val);
; 718  :     }
; 719  : 
; 720  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee
; 721  :         emplace_back(_STD move(_Val));
; 722  :     }
; 723  : 
; 724  :     template <class... _Valty>
; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {
; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 736  : 
; 737  :         if (_Oldsize == max_size()) {
; 738  :             _Xlength();
; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;
; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);
; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 746  :         pointer _Constructed_first      = _Constructed_last;
; 747  : 
; 748  :         _TRY_BEGIN
; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee
; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;
; 767  :     }
; 768  : 
; 769  :     template <class... _Valty>
; 770  :     iterator emplace(const_iterator _Where, _Valty&&... _Val) { // insert by perfectly forwarding _Val at _Where
; 771  :         const pointer _Whereptr = _Where._Ptr;
; 772  :         auto& _My_data          = _Mypair._Myval2;
; 773  :         const pointer _Oldlast  = _My_data._Mylast;
; 774  : #if _ITERATOR_DEBUG_LEVEL == 2
; 775  :         _STL_VERIFY(
; 776  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 777  :             "vector emplace iterator outside range");
; 778  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 779  : 
; 780  :         if (_Oldlast != _My_data._Myend) {
; 781  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee
; 782  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :             } else {
; 784  :                 auto& _Al = _Getal();
; 785  :                 _Alloc_temporary<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing
; 786  :                 // after constructing _Obj, provide basic guarantee
; 787  :                 _Orphan_range(_Whereptr, _Oldlast);
; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));
; 789  :                 ++_My_data._Mylast;
; 790  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
; 791  :                 *_Whereptr = _STD move(_Obj._Storage._Value);
; 792  :             }
; 793  : 
; 794  :             return _Make_iterator(_Whereptr);
; 795  :         }
; 796  : 
; 797  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));
; 798  :     }
; 799  : 
; 800  :     iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where
; 801  :         return emplace(_Where, _Val);
; 802  :     }
; 803  : 
; 804  :     iterator insert(const_iterator _Where, _Ty&& _Val) { // insert by moving _Val at _Where
; 805  :         return emplace(_Where, _STD move(_Val));
; 806  :     }
; 807  : 
; 808  :     iterator insert(const_iterator _Where, _CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val) {
; 809  :         // insert _Count * _Val at _Where
; 810  :         const pointer _Whereptr = _Where._Ptr;
; 811  : 
; 812  :         auto& _My_data   = _Mypair._Myval2;
; 813  :         pointer& _Mylast = _My_data._Mylast;
; 814  : 
; 815  :         const pointer _Oldfirst = _My_data._Myfirst;
; 816  :         const pointer _Oldlast  = _Mylast;
; 817  : #if _ITERATOR_DEBUG_LEVEL == 2
; 818  :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr,
; 819  :             "vector insert iterator outside range");
; 820  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 821  : 
; 822  :         const auto _Whereoff        = static_cast<size_type>(_Whereptr - _Oldfirst);
; 823  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 824  :         const bool _One_at_back     = _Count == 1 && _Whereptr == _Oldlast;
; 825  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 826  :         } else if (_Count > _Unused_capacity) { // reallocate
; 827  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 828  : 
; 829  :             if (_Count > max_size() - _Oldsize) {
; 830  :                 _Xlength();
; 831  :             }
; 832  : 
; 833  :             const size_type _Newsize     = _Oldsize + _Count;
; 834  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 835  : 
; 836  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 837  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 838  :             pointer _Constructed_first      = _Constructed_last;
; 839  : 
; 840  :             _TRY_BEGIN
; 841  :             _Ufill(_Newvec + _Whereoff, _Count, _Val);
; 842  :             _Constructed_first = _Newvec + _Whereoff;
; 843  : 
; 844  :             if (_One_at_back) { // provide strong guarantee
; 845  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 846  :             } else { // provide basic guarantee
; 847  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 848  :                 _Constructed_first = _Newvec;
; 849  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 850  :             }
; 851  :             _CATCH_ALL
; 852  :             _Destroy(_Constructed_first, _Constructed_last);
; 853  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 854  :             _RERAISE;
; 855  :             _CATCH_END
; 856  : 
; 857  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 858  :         } else if (_One_at_back) { // provide strong guarantee
; 859  :             _Emplace_back_with_unused_capacity(_Val);
; 860  :         } else { // provide basic guarantee
; 861  :             const _Alloc_temporary<_Alty> _Tmp_storage(_Getal(), _Val); // handle aliasing
; 862  :             const auto& _Tmp              = _Tmp_storage._Storage._Value;
; 863  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 864  :             _Orphan_range(_Whereptr, _Oldlast);
; 865  : 
; 866  :             if (_Count > _Affected_elements) { // new stuff spills off end
; 867  :                 _Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
; 868  :                 _Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
; 869  :                 _STD fill(_Whereptr, _Oldlast, _Tmp);
; 870  :             } else { // new stuff can all be assigned
; 871  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 872  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 873  :                 _STD fill(_Whereptr, _Whereptr + _Count, _Tmp);
; 874  :             }
; 875  :         }
; 876  : 
; 877  :         return _Make_iterator_offset(_Whereoff);
; 878  :     }
; 879  : 
; 880  : private:
; 881  :     template <class _Iter>
; 882  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {
; 883  :         // insert input range [_First, _Last) at _Where
; 884  :         if (_First == _Last) {
; 885  :             return; // nothing to do, avoid invalidating iterators
; 886  :         }
; 887  : 
; 888  :         auto& _My_data       = _Mypair._Myval2;
; 889  :         pointer& _Myfirst    = _My_data._Myfirst;
; 890  :         pointer& _Mylast     = _My_data._Mylast;
; 891  :         const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
; 892  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 893  : 
; 894  :         // For one-at-back, provide strong guarantee.
; 895  :         // Otherwise, provide basic guarantee (despite N4659 26.3.11.5 [vector.modifiers]/1).
; 896  :         // Performance note: except for one-at-back, emplace_back()'s strong guarantee is unnecessary here.
; 897  : 
; 898  :         for (; _First != _Last; ++_First) {
; 899  :             emplace_back(*_First);
; 900  :         }
; 901  : 
; 902  :         _Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);
; 903  : 
; 904  :         _STD rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
; 905  :     }
; 906  : 
; 907  :     template <class _Iter>
; 908  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {
; 909  :         // insert forward range [_First, _Last) at _Where
; 910  :         const pointer _Whereptr = _Where._Ptr;
; 911  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 912  : 
; 913  :         auto& _My_data   = _Mypair._Myval2;
; 914  :         pointer& _Mylast = _My_data._Mylast;
; 915  : 
; 916  :         const pointer _Oldfirst     = _My_data._Myfirst;
; 917  :         const pointer _Oldlast      = _Mylast;
; 918  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 919  : 
; 920  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 921  :         } else if (_Count > _Unused_capacity) { // reallocate
; 922  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 923  : 
; 924  :             if (_Count > max_size() - _Oldsize) {
; 925  :                 _Xlength();
; 926  :             }
; 927  : 
; 928  :             const size_type _Newsize     = _Oldsize + _Count;
; 929  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 930  : 
; 931  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 932  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);
; 933  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 934  :             pointer _Constructed_first      = _Constructed_last;
; 935  : 
; 936  :             _TRY_BEGIN
; 937  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);
; 938  :             _Constructed_first = _Newvec + _Whereoff;
; 939  : 
; 940  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee
; 941  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 942  :             } else { // provide basic guarantee
; 943  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 944  :                 _Constructed_first = _Newvec;
; 945  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 946  :             }
; 947  :             _CATCH_ALL
; 948  :             _Destroy(_Constructed_first, _Constructed_last);
; 949  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 950  :             _RERAISE;
; 951  :             _CATCH_END
; 952  : 
; 953  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 954  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 955  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 956  :                  // (For one-at-back, this provides the strong guarantee.)
; 957  : 
; 958  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 959  : 
; 960  :             if (_Count < _Affected_elements) { // some affected elements must be assigned
; 961  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 962  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 963  :                 _Destroy(_Whereptr, _Whereptr + _Count);
; 964  : 
; 965  :                 _TRY_BEGIN
; 966  :                 _Ucopy(_First, _Last, _Whereptr);
; 967  :                 _CATCH_ALL
; 968  :                 // glue the broken pieces back together
; 969  : 
; 970  :                 _TRY_BEGIN
; 971  :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
; 972  :                 _CATCH_ALL
; 973  :                 // vaporize the detached piece
; 974  :                 _Orphan_range(_Whereptr, _Oldlast);
; 975  :                 _Destroy(_Whereptr + _Count, _Mylast);
; 976  :                 _Mylast = _Whereptr;
; 977  :                 _RERAISE;
; 978  :                 _CATCH_END
; 979  : 
; 980  :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 981  :                 _Destroy(_Oldlast, _Mylast);
; 982  :                 _Mylast = _Oldlast;
; 983  :                 _RERAISE;
; 984  :                 _CATCH_END
; 985  :             } else { // affected elements don't overlap before/after
; 986  :                 const pointer _Relocated = _Whereptr + _Count;
; 987  :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);
; 988  :                 _Destroy(_Whereptr, _Oldlast);
; 989  : 
; 990  :                 _TRY_BEGIN
; 991  :                 _Ucopy(_First, _Last, _Whereptr);
; 992  :                 _CATCH_ALL
; 993  :                 // glue the broken pieces back together
; 994  : 
; 995  :                 _TRY_BEGIN
; 996  :                 _Umove(_Relocated, _Mylast, _Whereptr);
; 997  :                 _CATCH_ALL
; 998  :                 // vaporize the detached piece
; 999  :                 _Orphan_range(_Whereptr, _Oldlast);
; 1000 :                 _Destroy(_Relocated, _Mylast);
; 1001 :                 _Mylast = _Whereptr;
; 1002 :                 _RERAISE;
; 1003 :                 _CATCH_END
; 1004 : 
; 1005 :                 _Destroy(_Relocated, _Mylast);
; 1006 :                 _Mylast = _Oldlast;
; 1007 :                 _RERAISE;
; 1008 :                 _CATCH_END
; 1009 :             }
; 1010 : 
; 1011 :             _Orphan_range(_Whereptr, _Oldlast);
; 1012 :         }
; 1013 :     }
; 1014 : 
; 1015 : public:
; 1016 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1017 :     iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
; 1018 :         const pointer _Whereptr = _Where._Ptr;
; 1019 :         auto& _My_data          = _Mypair._Myval2;
; 1020 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1021 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1022 :         _STL_VERIFY(
; 1023 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1024 :             "vector insert iterator outside range");
; 1025 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1026 : 
; 1027 :         _Adl_verify_range(_First, _Last);
; 1028 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
; 1029 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1030 :         return _Make_iterator_offset(_Whereoff);
; 1031 :     }
; 1032 : 
; 1033 :     iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
; 1034 :         return insert(_Where, _Ilist.begin(), _Ilist.end());
; 1035 :     }
; 1036 : 
; 1037 :     void assign(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) { // assign _Newsize * _Val
; 1038 :         auto& _My_data    = _Mypair._Myval2;
; 1039 :         pointer& _Myfirst = _My_data._Myfirst;
; 1040 :         pointer& _Mylast  = _My_data._Mylast;
; 1041 : 
; 1042 :         _My_data._Orphan_all();
; 1043 : 
; 1044 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1045 :         if (_Newsize > _Oldsize) {
; 1046 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1047 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1048 :                 _Clear_and_reserve_geometric(_Newsize);
; 1049 :                 _Oldsize = 0;
; 1050 :             } else {
; 1051 :                 _STD fill(_Myfirst, _Mylast, _Val);
; 1052 :             }
; 1053 : 
; 1054 :             _Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
; 1055 :         } else {
; 1056 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1057 :             _STD fill(_Myfirst, _Newlast, _Val);
; 1058 :             _Destroy(_Newlast, _Mylast);
; 1059 :             _Mylast = _Newlast;
; 1060 :         }
; 1061 :     }
; 1062 : 
; 1063 : private:
; 1064 :     template <class _Iter>
; 1065 :     void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) { // assign input range [_First, _Last)
; 1066 :         auto& _My_data    = _Mypair._Myval2;
; 1067 :         pointer& _Myfirst = _My_data._Myfirst;
; 1068 :         pointer& _Mylast  = _My_data._Mylast;
; 1069 : 
; 1070 :         _My_data._Orphan_all();
; 1071 : 
; 1072 :         pointer _Next = _Myfirst;
; 1073 : 
; 1074 :         for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
; 1075 :             *_Next = *_First;
; 1076 :         }
; 1077 : 
; 1078 :         // Code size optimization: we've exhausted only the source, only the dest, or both.
; 1079 :         // If we've exhausted only the source: we Trim, then Append does nothing.
; 1080 :         // If we've exhausted only the dest: Trim does nothing, then we Append.
; 1081 :         // If we've exhausted both: Trim does nothing, then Append does nothing.
; 1082 : 
; 1083 :         // Trim.
; 1084 :         _Destroy(_Next, _Mylast);
; 1085 :         _Mylast = _Next;
; 1086 : 
; 1087 :         // Append.
; 1088 :         for (; _First != _Last; ++_First) {
; 1089 :             emplace_back(*_First); // performance note: emplace_back()'s strong guarantee is unnecessary here
; 1090 :         }
; 1091 :     }
; 1092 : 
; 1093 :     template <class _Iter>
; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)
; 1095 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 1096 :         auto& _My_data      = _Mypair._Myval2;
; 1097 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1098 :         pointer& _Mylast    = _My_data._Mylast;
; 1099 :         pointer& _Myend     = _My_data._Myend;
; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 : #if _HAS_IF_CONSTEXPR
; 1104 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1105 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1106 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1108 :             if (_Newsize > _Oldcapacity) {
; 1109 :                 _Clear_and_reserve_geometric(_Newsize);
; 1110 :             }
; 1111 : 
; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
; 1113 :         } else
; 1114 : #endif // _HAS_IF_CONSTEXPR
; 1115 :         {
; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1117 : 
; 1118 :             if (_Newsize > _Oldsize) {
; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate
; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;
; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1129 :             } else {
; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;
; 1131 :                 _Copy_unchecked(_First, _Last, _Myfirst);
; 1132 :                 _Destroy(_Newlast, _Mylast);
; 1133 :                 _Mylast = _Newlast;
; 1134 :             }
; 1135 :         }
; 1136 :     }
; 1137 : 
; 1138 : public:
; 1139 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1140 :     void assign(_Iter _First, _Iter _Last) {
; 1141 :         _Adl_verify_range(_First, _Last);
; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1143 :     }
; 1144 : 
; 1145 :     void assign(initializer_list<_Ty> _Ilist) {
; 1146 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1147 :     }
; 1148 : 
; 1149 : private:
; 1150 :     void _Copy_assign(const vector& _Right, false_type) {
; 1151 :         _Pocca(_Getal(), _Right._Getal());
; 1152 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1153 :         assign(_Right_data._Myfirst, _Right_data._Mylast);
; 1154 :     }
; 1155 : 
; 1156 :     void _Copy_assign(const vector& _Right, true_type) {
; 1157 :         if (_Getal() != _Right._Getal()) {
; 1158 :             _Tidy();
; 1159 :             _Mypair._Myval2._Reload_proxy(
; 1160 :                 _GET_PROXY_ALLOCATOR(_Alty, _Getal()), _GET_PROXY_ALLOCATOR(_Alty, _Right._Getal()));
; 1161 :         }
; 1162 : 
; 1163 :         _Copy_assign(_Right, false_type{});
; 1164 :     }
; 1165 : 
; 1166 : public:
; 1167 :     vector& operator=(const vector& _Right) {
; 1168 :         if (this != _STD addressof(_Right)) {
; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1170 :         }
; 1171 : 
; 1172 :         return *this;
; 1173 :     }
; 1174 : 
; 1175 :     vector& operator=(initializer_list<_Ty> _Ilist) {
; 1176 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1177 :         return *this;
; 1178 :     }
; 1179 : 
; 1180 : private:
; 1181 :     template <class _Ty2>
; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
; 1183 :         if (_Newsize > max_size()) {
; 1184 :             _Xlength();
; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);
; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1196 :         pointer _Appended_last        = _Appended_first;
; 1197 : 
; 1198 :         _TRY_BEGIN
; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);
; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1204 :         _RERAISE;
; 1205 :         _CATCH_END
; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1208 :     }
; 1209 : 
; 1210 :     template <class _Ty2>
; 1211 :     void _Resize(const size_type _Newsize, const _Ty2& _Val) { // trim or append elements, provide strong guarantee
; 1212 :         auto& _My_data      = _Mypair._Myval2;
; 1213 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1214 :         pointer& _Mylast    = _My_data._Mylast;
; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1216 :         if (_Newsize < _Oldsize) { // trim
; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1218 :             _Orphan_range(_Newlast, _Mylast);
; 1219 :             _Destroy(_Newlast, _Mylast);
; 1220 :             _Mylast = _Newlast;
; 1221 :             return;
; 1222 :         }
; 1223 : 
; 1224 :         if (_Newsize > _Oldsize) { // append
; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1227 :                 _Resize_reallocate(_Newsize, _Val);
; 1228 :                 return;
; 1229 :             }
; 1230 : 
; 1231 :             const pointer _Oldlast = _Mylast;
; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
; 1233 :             _Orphan_range(_Oldlast, _Oldlast);
; 1234 :         }
; 1235 : 
; 1236 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1237 :     }
; 1238 : 
; 1239 : public:
; 1240 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1241 :         // trim or append value-initialized elements, provide strong guarantee
; 1242 :         _Resize(_Newsize, _Value_init_tag{});
; 1243 :     }
; 1244 : 
; 1245 :     void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1246 :         // trim or append copies of _Val, provide strong guarantee
; 1247 :         _Resize(_Newsize, _Val);
; 1248 :     }
; 1249 : 
; 1250 : private:
; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {
; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;
; 1254 :         pointer& _Myfirst = _My_data._Myfirst;
; 1255 :         pointer& _Mylast  = _My_data._Mylast;
; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1258 : 
; 1259 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1260 : 
; 1261 :         _TRY_BEGIN
; 1262 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1263 :         _CATCH_ALL
; 1264 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1265 :         _RERAISE;
; 1266 :         _CATCH_END
; 1267 : 
; 1268 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1269 :     }
; 1270 : 
; 1271 :     void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1272 :         auto& _My_data    = _Mypair._Myval2;
; 1273 :         pointer& _Myfirst = _My_data._Myfirst;
; 1274 :         pointer& _Mylast  = _My_data._Mylast;
; 1275 :         pointer& _Myend   = _My_data._Myend;
; 1276 : 
; 1277 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1278 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1279 :         {
; 1280 :             _Lockit _Lock(_LOCK_DEBUG);
; 1281 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter); // asserts that all iterators are orphaned
; 1282 :         } // unlock
; 1283 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1284 : 
; 1285 :         if (_Newsize > max_size()) {
; 1286 :             _Xlength();
; 1287 :         }
; 1288 : 
; 1289 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1290 : 
; 1291 :         if (_Myfirst) { // destroy and deallocate old array
; 1292 :             _Destroy(_Myfirst, _Mylast);
; 1293 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1294 : 
; 1295 :             _Myfirst = pointer();
; 1296 :             _Mylast  = pointer();
; 1297 :             _Myend   = pointer();
; 1298 :         }
; 1299 : 
; 1300 :         _Buy_raw(_Newcapacity);
; 1301 :     }
; 1302 : 
; 1303 : public:
; 1304 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1305 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00076	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
$LN15@SplitLine:

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0007c	50		 push	 eax
  0007d	ff 70 04	 push	 DWORD PTR [eax+4]
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1390 :         _Mylast = _Myfirst;

  00086	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0008f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00096	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	c6 45 d8 00	 mov	 BYTE PTR _strLine$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1390 :         _Mylast = _Myfirst;

  000a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a3	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000a6	8b cf		 mov	 ecx, edi
  000a8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000ab	0f 1f 44 00 00	 npad	 5
$LL291@SplitLine:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL291@SplitLine
  000b7	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b9	51		 push	 ecx
  000ba	57		 push	 edi
  000bb	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  000be	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 544  : 	DWORD basePos = 0;

  000c3	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  000c6	33 ff		 xor	 edi, edi
  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000cf	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
$LL4@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d5	8b b5 b0 fc ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  000db	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000de	66 90		 npad	 2
$LL292@SplitLine:
  000e0	8a 06		 mov	 al, BYTE PTR [esi]
  000e2	46		 inc	 esi
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL292@SplitLine
  000e7	2b f2		 sub	 esi, edx

; 2144 :         const value_type* _Result = _Bx._Buf;

  000e9	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  000ec	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H
  000f0	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]
  000f4	89 85 ac fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  000fa	3b f9		 cmp	 edi, ecx
  000fc	73 65		 jae	 SHORT $LN256@SplitLine
  000fe	68 00 01 00 00	 push	 256			; 00000100H
  00103	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$5[ebp]
  00109	6a 00		 push	 0
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _memset

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00111	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	8b c8		 mov	 ecx, eax
  0011c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 625  :         for (; _First != _Last; ++_First) {

  0011f	3b c2		 cmp	 eax, edx
  00121	74 10		 je	 SHORT $LN58@SplitLine
$LL59@SplitLine:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00123	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00126	41		 inc	 ecx
  00127	c6 84 05 c0 fe
	ff ff 01	 mov	 BYTE PTR __Matches$5[ebp+eax], 1
  0012f	3b ca		 cmp	 ecx, edx
  00131	75 f0		 jne	 SHORT $LL59@SplitLine
$LN58@SplitLine:

; 792  :         const auto _End = _Haystack + _Hay_size;

  00133	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  00139	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _strLine$1$[ebp]
  0013f	03 ca		 add	 ecx, edx

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00141	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  00144	3b f1		 cmp	 esi, ecx
  00146	73 1b		 jae	 SHORT $LN256@SplitLine
  00148	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL49@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00150	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00153	8a 84 05 c0 fe
	ff ff		 mov	 al, BYTE PTR __Matches$5[ebp+eax]

; 794  :             if (!_Matches._Match(*_Match_try)) {

  0015a	84 c0		 test	 al, al
  0015c	74 44		 je	 SHORT $LN251@SplitLine

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0015e	46		 inc	 esi
  0015f	3b f1		 cmp	 esi, ecx
  00161	72 ed		 jb	 SHORT $LL49@SplitLine
$LN256@SplitLine:
  00163	c6 85 bf fc ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
$LN13@SplitLine:

; 2153 :         return _BUF_SIZE <= _Myres;

  0016a	8b 55 ec	 mov	 edx, DWORD PTR _strLine$[ebp+20]
  0016d	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00170	72 0f		 jb	 SHORT $LN234@SplitLine

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00172	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00175	51		 push	 ecx
  00176	ff 75 d8	 push	 DWORD PTR _strLine$[ebp]
  00179	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0017e	83 c4 08	 add	 esp, 8
$LN234@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 573  : 	return true;

  00181	8a 85 bf fc ff
	ff		 mov	 al, BYTE PTR $T2[ebp]

; 574  : }

  00187	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00191	59		 pop	 ecx
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00197	33 cd		 xor	 ecx, ebp
  00199	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
$LN251@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  001a2	2b f2		 sub	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 549  : 		if (beginPos < 0)

  001a4	78 bd		 js	 SHORT $LN256@SplitLine
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2136 :         if (_Large_string_engaged()) {

  001a6	8b 55 ec	 mov	 edx, DWORD PTR _strLine$[ebp+20]
  001a9	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  001ac	8b 4d d8	 mov	 ecx, DWORD PTR _strLine$[ebp]
  001af	83 fa 10	 cmp	 edx, 16			; 00000010H
  001b2	0f 43 c1	 cmovae	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 554  : 		if (strLine[beginPos] == '"')

  001b5	80 3c 06 22	 cmp	 BYTE PTR [esi+eax], 34	; 00000022H
  001b9	75 6d		 jne	 SHORT $LN6@SplitLine

; 555  : 		{
; 556  : 			++beginPos;

  001bb	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  001bc	8d 7d d8	 lea	 edi, DWORD PTR _strLine$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  001bf	83 fa 10	 cmp	 edx, 16			; 00000010H
  001c2	0f 43 f9	 cmovae	 edi, ecx

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  001c5	3b b5 b8 fc ff
	ff		 cmp	 esi, DWORD PTR _strLine$1$[ebp]
  001cb	73 96		 jae	 SHORT $LN256@SplitLine
  001cd	68 00 01 00 00	 push	 256			; 00000100H
  001d2	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR __Matches$4[ebp]
  001d8	6a 00		 push	 0
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _memset

; 697  :                                                                 // fall back to the serial algorithm
; 698  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 699  :         }
; 700  : 
; 701  :         const auto _End = _Haystack + _Hay_size;

  001e0	8b 95 b8 fc ff
	ff		 mov	 edx, DWORD PTR _strLine$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001e6	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  001e9	03 d7		 add	 edx, edi

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  001eb	c6 85 e2 fd ff
	ff 01		 mov	 BYTE PTR __Matches$4[ebp+34], 1
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  001f5	3b ca		 cmp	 ecx, edx
  001f7	0f 83 66 ff ff
	ff		 jae	 $LN256@SplitLine
  001fd	0f 1f 00	 npad	 3
$LL101@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00200	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00203	8a 84 05 c0 fd
	ff ff		 mov	 al, BYTE PTR __Matches$4[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  0020a	84 c0		 test	 al, al
  0020c	75 0a		 jne	 SHORT $LN253@SplitLine

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0020e	41		 inc	 ecx
  0020f	3b ca		 cmp	 ecx, edx
  00211	72 ed		 jb	 SHORT $LL101@SplitLine
  00213	e9 4b ff ff ff	 jmp	 $LN256@SplitLine
$LN253@SplitLine:

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00218	2b cf		 sub	 ecx, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 559  : 			if (endPos < 0)

  0021a	0f 88 43 ff ff
	ff		 js	 $LN256@SplitLine

; 560  : 				return false;
; 561  : 
; 562  : 			basePos = endPos + 1;

  00220	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 563  : 		}

  00223	e9 98 00 00 00	 jmp	 $LN7@SplitLine
$LN6@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00228	8b bd b0 fc ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0022e	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL293@SplitLine:
  00231	8a 07		 mov	 al, BYTE PTR [edi]
  00233	47		 inc	 edi
  00234	84 c0		 test	 al, al
  00236	75 f9		 jne	 SHORT $LL293@SplitLine

; 2145 :         if (_Large_string_engaged()) {

  00238	83 fa 10	 cmp	 edx, 16			; 00000010H
  0023b	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  0023e	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]
  00242	89 85 ac fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00248	2b f9		 sub	 edi, ecx

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0024a	74 6f		 je	 SHORT $LN145@SplitLine
  0024c	3b b5 b8 fc ff
	ff		 cmp	 esi, DWORD PTR _strLine$1$[ebp]
  00252	73 67		 jae	 SHORT $LN145@SplitLine
  00254	68 00 01 00 00	 push	 256			; 00000100H
  00259	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  0025f	6a 00		 push	 0
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _memset

; 695  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 696  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00267	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0026d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00270	8b c8		 mov	 ecx, eax
  00272	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00275	8b fe		 mov	 edi, esi

; 625  :         for (; _First != _Last; ++_First) {

  00277	3b c2		 cmp	 eax, edx
  00279	74 15		 je	 SHORT $LN155@SplitLine
  0027b	0f 1f 44 00 00	 npad	 5
$LL156@SplitLine:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00280	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00283	41		 inc	 ecx
  00284	c6 84 05 c0 fc
	ff ff 01	 mov	 BYTE PTR __Matches$3[ebp+eax], 1
  0028c	3b ca		 cmp	 ecx, edx
  0028e	75 f0		 jne	 SHORT $LL156@SplitLine
$LN155@SplitLine:

; 701  :         const auto _End = _Haystack + _Hay_size;

  00290	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _strLine$1$[ebp]
  00296	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  0029c	03 ca		 add	 ecx, edx

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0029e	03 fa		 add	 edi, edx
  002a0	3b f9		 cmp	 edi, ecx
  002a2	73 17		 jae	 SHORT $LN145@SplitLine
$LL146@SplitLine:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  002a4	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  002a7	8a 84 05 c0 fc
	ff ff		 mov	 al, BYTE PTR __Matches$3[ebp+eax]

; 703  :             if (_Matches._Match(*_Match_try)) {

  002ae	84 c0		 test	 al, al
  002b0	0f 85 7c 00 00
	00		 jne	 $LN255@SplitLine

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  002b6	47		 inc	 edi
  002b7	3b f9		 cmp	 edi, ecx
  002b9	72 e9		 jb	 SHORT $LL146@SplitLine
$LN145@SplitLine:

; 705  :             }
; 706  :         }
; 707  :     }
; 708  : 
; 709  :     return static_cast<size_t>(-1); // no match

  002bb	83 cf ff	 or	 edi, -1
$LN143@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 566  : 			endPos = strLine.find_first_of(c_szDelimeter, beginPos);

  002be	8b cf		 mov	 ecx, edi
$LN7@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2157 :         if (_Mysize < _Off) {

  002c0	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _strLine$1$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  002c6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002cd	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002d4	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 2157 :         if (_Mysize < _Off) {

  002d8	3b c6		 cmp	 eax, esi
  002da	0f 82 96 00 00
	00		 jb	 $LN259@SplitLine

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e0	2b c6		 sub	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  002e2	2b ce		 sub	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  002e4	3b c1		 cmp	 eax, ecx
  002e6	0f 42 c8	 cmovb	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  002e9	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H
  002ed	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  002f0	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  002f4	51		 push	 ecx
  002f5	03 c6		 add	 eax, esi
  002f7	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00300	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  00306	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0030a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0030d	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00310	74 24		 je	 SHORT $LN201@SplitLine
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00312	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00316	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0031a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0031d	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00322	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00327	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  0032c	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00330	eb 11		 jmp	 SHORT $LN200@SplitLine
$LN255@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00332	2b fa		 sub	 edi, edx
  00334	eb 88		 jmp	 SHORT $LN143@SplitLine
$LN201@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00336	8d 55 c0	 lea	 edx, DWORD PTR $T6[ebp]
  00339	52		 push	 edx
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00340	8b 45 d4	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN200@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  00343	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00347	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0034a	72 0d		 jb	 SHORT $LN224@SplitLine

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0034c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0034d	50		 push	 eax
  0034e	ff 75 c0	 push	 DWORD PTR $T6[ebp]
  00351	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00356	83 c4 08	 add	 esp, 8
$LN224@SplitLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 571  : 	} while (basePos < strLine.length());

  00359	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  0035c	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
  00362	3b f9		 cmp	 edi, ecx
  00364	0f 82 6b fd ff
	ff		 jb	 $LL4@SplitLine

; 573  : 	return true;

  0036a	c6 85 bf fc ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00371	e9 f4 fd ff ff	 jmp	 $LN13@SplitLine
$LN259@SplitLine:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2158 :             _Xran();

  00376	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN296@SplitLine:
  0037b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a ac fc ff
	ff		 mov	 ecx, DWORD PTR [edx-852]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; SplitLine
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?RemoveAllDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_c_szDirectoryName$GSCopy$1$ = -348			; size = 4
_remover$3 = -344					; size = 328
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szDirectoryName$ = 8					; size = 4
?RemoveAllDirectory@@YAXPBD@Z PROC			; RemoveAllDirectory, COMDAT

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RemoveAllDirectory@@YAXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _c_szDirectoryName$[ebp]

; 463  : 		CDirRemover()

  00031	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]

; 515  : {

  00037	89 9d a4 fe ff
	ff		 mov	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp], ebx

; 463  : 		CDirRemover()

  0003d	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  00042	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@

; 516  : 	{
; 517  : 		CDirRemover remover;
; 518  : 		remover.Create("*.*", c_szDirectoryName);

  0004c	6a 00		 push	 0
  0004e	53		 push	 ebx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_03EMIMMIHL@?$CK?4?$CK@
  00054	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 255  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00066	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  0006c	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1166 :             _Myproxy = _Parent_proxy;

  0006e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
  00074	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RemoveDirectoryA@4
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL81@RemoveAllD:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 905  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00080	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
  00085	03 c1		 add	 eax, ecx

; 350  :         return this->_Myoff == _Right._Myoff;

  00087	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 499  : 			for (std::deque<std::string>::iterator itor = ms_strDirectoryDeque.begin(); itor != ms_strDirectoryDeque.end(); ++itor)

  00089	74 2a		 je	 SHORT $LN9@RemoveAllD
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1180 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0008b	85 ff		 test	 edi, edi
  0008d	74 04		 je	 SHORT $LN60@RemoveAllD
  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	eb 02		 jmp	 SHORT $LN61@RemoveAllD
$LN60@RemoveAllD:
  00093	33 c0		 xor	 eax, eax
$LN61@RemoveAllD:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00095	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0009b	49		 dec	 ecx
  0009c	23 ce		 and	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  0009e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 2153 :         return _BUF_SIZE <= _Myres;

  000a1	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  000a5	72 02		 jb	 SHORT $LN67@RemoveAllD

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
$LN67@RemoveAllD:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 502  : 				RemoveDirectory(c_rstrDirectory.c_str());

  000a9	50		 push	 eax
  000aa	ff d3		 call	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 283  :         ++_Myoff;

  000ac	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  000b2	46		 inc	 esi
  000b3	eb cb		 jmp	 SHORT $LL81@RemoveAllD
$LN9@RemoveAllD:

; 1325 :         _Tidy();

  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  000ba	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 468  : 		}

  000bf	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  000c5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@
  000cf	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir

; 519  : 		CDirRemover::RemoveAllDirectory();
; 520  : 	}
; 521  : 	RemoveDirectory(c_szDirectoryName);

  000d4	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp]
  000da	ff d3		 call	 ebx

; 522  : }

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0:
  00000	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RemoveAllDirectory@@YAXPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RemoveAllDirectory@@YAXPBD@Z ENDP			; RemoveAllDirectory
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?MyCreateDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_len$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_path$ = 8						; size = 4
?MyCreateDirectory@@YAXPBD@Z PROC			; MyCreateDirectory, COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 428  : 	if (!path || !*path)

  00005	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  00008	85 f6		 test	 esi, esi
  0000a	0f 84 99 00 00
	00		 je	 $LN5@MyCreateDi
  00010	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00013	0f 84 90 00 00
	00		 je	 $LN5@MyCreateDi

; 429  : 		return;
; 430  : 
; 431  : 	char * dir;
; 432  : 	const char * p;
; 433  : 
; 434  : 	if (strlen(path) >= 3)

  00019	8b ce		 mov	 ecx, esi
  0001b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001e	66 90		 npad	 2
$LL16@MyCreateDi:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL16@MyCreateDi
  00027	2b ca		 sub	 ecx, edx
  00029	83 f9 03	 cmp	 ecx, 3
  0002c	72 09		 jb	 SHORT $LN7@MyCreateDi

; 435  : 	{
; 436  : 		if (*(path + 1) == ':')

  0002e	80 7e 01 3a	 cmp	 BYTE PTR [esi+1], 58	; 0000003aH
  00032	75 03		 jne	 SHORT $LN7@MyCreateDi

; 437  : 			path += 3;

  00034	83 c6 03	 add	 esi, 3
$LN7@MyCreateDi:

; 438  : 	}
; 439  : 
; 440  : 	p = path;
; 441  : 
; 442  : 	int len = strlen(path) + 1;

  00037	8b ce		 mov	 ecx, esi
  00039	89 75 08	 mov	 DWORD PTR _p$1$[ebp], esi
  0003c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0003f	90		 npad	 1
$LL17@MyCreateDi:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL17@MyCreateDi
  00047	2b ca		 sub	 ecx, edx
  00049	57		 push	 edi
  0004a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 443  : 	dir = new char[len];

  0004d	50		 push	 eax
  0004e	89 45 fc	 mov	 DWORD PTR _len$1$[ebp], eax
  00051	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 444  : 
; 445  : 	while (*p)

  00056	8a 0e		 mov	 cl, BYTE PTR [esi]
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	84 c9		 test	 cl, cl
  0005f	74 3e		 je	 SHORT $LN3@MyCreateDi

; 446  : 	{
; 447  : 		if (*p == '/' || *p == '\\')

  00061	53		 push	 ebx
  00062	33 db		 xor	 ebx, ebx
  00064	8b c6		 mov	 eax, esi
$LL2@MyCreateDi:
  00066	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00069	74 05		 je	 SHORT $LN14@MyCreateDi
  0006b	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  0006e	75 22		 jne	 SHORT $LN8@MyCreateDi
$LN14@MyCreateDi:

; 448  : 		{
; 449  : 			memset(dir, 0, len);

  00070	ff 75 fc	 push	 DWORD PTR _len$1$[ebp]
  00073	6a 00		 push	 0
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _memset

; 450  : 			strncpy(dir, path, p - path);

  0007b	53		 push	 ebx
  0007c	56		 push	 esi
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 _strncpy
  00083	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 			CreateDirectory(dir, NULL);

  00086	6a 00		 push	 0
  00088	57		 push	 edi
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
  0008f	8b 45 08	 mov	 eax, DWORD PTR _p$1$[ebp]
$LN8@MyCreateDi:

; 452  : 		}
; 453  : 
; 454  : 		++p;

  00092	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00095	40		 inc	 eax
  00096	43		 inc	 ebx
  00097	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  0009a	84 c9		 test	 cl, cl
  0009c	75 c8		 jne	 SHORT $LL2@MyCreateDi
  0009e	5b		 pop	 ebx
$LN3@MyCreateDi:

; 455  : 	}
; 456  : 
; 457  : 	delete [] dir;

  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a5	83 c4 04	 add	 esp, 4
  000a8	5f		 pop	 edi
$LN5@MyCreateDi:
  000a9	5e		 pop	 esi

; 458  : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?MyCreateDirectory@@YAXPBD@Z ENDP			; MyCreateDirectory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?fMINMAX@@YAMMMM@Z
_TEXT	SEGMENT
tv128 = 8						; size = 4
_min$ = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?fMINMAX@@YAMMMM@Z PROC					; fMINMAX, COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 410  :     register float tv;
; 411  : 
; 412  :     tv = (min > value ? min : value);

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _min$[ebp]
  00008	f3 0f 5f 4d 0c	 maxss	 xmm1, DWORD PTR _value$[ebp]

; 413  :     return (max < tv) ? max : tv;

  0000d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _max$[ebp]
  00012	f3 0f 5d c1	 minss	 xmm0, xmm1
  00016	f3 0f 11 45 08	 movss	 DWORD PTR tv128[ebp], xmm0
  0001b	d9 45 08	 fld	 DWORD PTR tv128[ebp]

; 414  : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?fMINMAX@@YAMMMM@Z ENDP					; fMINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?fMAX@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?fMAX@@YAMMM@Z PROC					; fMAX, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  :     return a > b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5f 45 0c	 maxss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 406  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMAX@@YAMMM@Z ENDP					; fMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?fMIN@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?fMIN@@YAMMM@Z PROC					; fMIN, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 400  :     return a < b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5d 45 0c	 minss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 401  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMIN@@YAMMM@Z ENDP					; fMIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?MINMAX@@YAHHHH@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?MINMAX@@YAHHHH@Z PROC					; MINMAX, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  : 	if (max < min)

  00003	8b 55 10	 mov	 edx, DWORD PTR _max$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _min$[ebp]
  00009	3b d1		 cmp	 edx, ecx
  0000b	7d 0e		 jge	 SHORT $LN2@MINMAX

; 391  : 		return MAX(min, value);

  0000d	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?MAX@@YAHHH@Z		; MAX
  00016	83 c4 08	 add	 esp, 8

; 396  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@MINMAX:

; 392  : 
; 393  :     register int tv;
; 394  :     tv = (min > value ? min : value);

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001e	3b c8		 cmp	 ecx, eax
  00020	0f 4f c1	 cmovg	 eax, ecx

; 395  :     return (max < tv) ? max : tv;

  00023	3b d0		 cmp	 edx, eax
  00025	0f 4c c2	 cmovl	 eax, edx

; 396  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?MINMAX@@YAHHHH@Z ENDP					; MINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?MAX@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MAX@@YAHHH@Z PROC					; MAX, COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  :     return a > b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4f 45 08	 cmovg	 eax, DWORD PTR _a$[ebp]

; 386  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MAX@@YAHHH@Z ENDP					; MAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?MIN@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MIN@@YAHHH@Z PROC					; MIN, COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  :     return a < b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4c 45 08	 cmovl	 eax, DWORD PTR _a$[ebp]

; 381  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MIN@@YAHHH@Z ENDP					; MIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?IsGlobalFileName@@YA_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?IsGlobalFileName@@YA_NPBD@Z PROC			; IsGlobalFileName, COMDAT

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 423  : 	return strchr(c_szFileName, ':') != NULL;

  00003	6a 3a		 push	 58			; 0000003aH
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	e8 00 00 00 00	 call	 _strchr
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 95 c0	 setne	 al

; 424  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsGlobalFileName@@YA_NPBD@Z ENDP			; IsGlobalFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?IsFile@@YA_NPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?IsFile@@YA_NPBD@Z PROC					; IsFile, COMDAT

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 418  : 	return _access(filename, 0) == 0 ? true : false;

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00008	e8 00 00 00 00	 call	 __access
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 94 c0	 sete	 al

; 419  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsFile@@YA_NPBD@Z ENDP					; IsFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?PrintAsciiData@@YAXPBXH@Z
_TEXT	SEGMENT
_void_data$ = 8						; size = 4
_bytes$ = 12						; size = 4
?PrintAsciiData@@YAXPBXH@Z PROC				; PrintAsciiData, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 332  :     int                 i, j, k;
; 333  :     const unsigned char* p;
; 334  : 	const unsigned char* data;
; 335  : 
; 336  : 	data = (const unsigned char*) void_data;
; 337  : 
; 338  :     fprintf(stdout, "------------------------------------------------------------------\n");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _fprintf
  00018	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0001b	83 c4 08	 add	 esp, 8
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]

; 339  :     j = bytes;

  00021	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PrintAscii:

; 340  :     while (1)
; 341  :     {
; 342  :         k = j >= 16 ? 16 : j;

  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00033	8b d9		 mov	 ebx, ecx
  00035	0f 4d da	 cmovge	 ebx, edx
  00038	33 f6		 xor	 esi, esi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL6@PrintAscii:

; 346  :         {
; 347  :             if (i >= k)

  00040	3b f3		 cmp	 esi, ebx
  00042	7c 1a		 jl	 SHORT $LN10@PrintAscii

; 348  :                 fprintf(stdout, "   ");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_03NDEAONJP@?5?5?5@
  00049	6a 01		 push	 1
  0004b	e8 00 00 00 00	 call	 ___acrt_iob_func
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _fprintf
  00059	83 c4 08	 add	 esp, 8
  0005c	eb 1d		 jmp	 SHORT $LN11@PrintAscii
$LN10@PrintAscii:

; 349  :             else
; 350  :                 fprintf(stdout, "%02x ", *p);

  0005e	0f b6 04 06	 movzx	 eax, BYTE PTR [esi+eax]
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_05CNDJFPDP@?$CF02x?5@
  00068	6a 01		 push	 1
  0006a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0006f	83 c4 04	 add	 esp, 4
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _fprintf
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@PrintAscii:

; 343  : 
; 344  :         p = data;
; 345  :         for (i = 0; i < 16; ++i)

  0007b	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0007e	46		 inc	 esi
  0007f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00082	7c bc		 jl	 SHORT $LL6@PrintAscii

; 351  :             p++;
; 352  :         }
; 353  : 
; 354  :         fprintf(stdout, "| ");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_02MINBJDHL@?$HM?5@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ___acrt_iob_func
  00090	83 c4 04	 add	 esp, 4
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _fprintf

; 355  : 
; 356  :         p = data;

  00099	8b 75 08	 mov	 esi, DWORD PTR _void_data$[ebp]
  0009c	83 c4 08	 add	 esp, 8
  0009f	33 ff		 xor	 edi, edi

; 357  :         for (i = 0; i < k; ++i)

  000a1	85 db		 test	 ebx, ebx
  000a3	7e 41		 jle	 SHORT $LN8@PrintAscii
$LL9@PrintAscii:

; 358  :         {
; 359  :             if (i >= k)
; 360  :                 fprintf(stdout, " ");
; 361  :             else
; 362  :                 fprintf(stdout, "%c", ishprint(*p) ? *p : '.');

  000a5	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a7	8a c1		 mov	 al, cl
  000a9	24 e0		 and	 al, 224			; 000000e0H
  000ab	3c 90		 cmp	 al, 144			; 00000090H
  000ad	77 15		 ja	 SHORT $LN33@PrintAscii
  000af	0f b6 c1	 movzx	 eax, cl
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _isprint
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000c2	74 03		 je	 SHORT $LN17@PrintAscii
$LN33@PrintAscii:
  000c4	0f b6 06	 movzx	 eax, BYTE PTR [esi]
$LN17@PrintAscii:
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  000cd	6a 01		 push	 1
  000cf	e8 00 00 00 00	 call	 ___acrt_iob_func
  000d4	83 c4 04	 add	 esp, 4
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _fprintf
  000dd	47		 inc	 edi
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  :             p++;

  000e1	46		 inc	 esi
  000e2	3b fb		 cmp	 edi, ebx
  000e4	7c bf		 jl	 SHORT $LL9@PrintAscii
$LN8@PrintAscii:

; 364  :         }
; 365  : 
; 366  :         fprintf(stdout, "\n");

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000eb	6a 01		 push	 1
  000ed	e8 00 00 00 00	 call	 ___acrt_iob_func
  000f2	83 c4 04	 add	 esp, 4
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _fprintf

; 367  : 
; 368  :         j       -= 16;

  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]
  000fe	83 c4 08	 add	 esp, 8

; 369  :         data    += 16;

  00101	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  00104	83 e9 10	 sub	 ecx, 16			; 00000010H
  00107	83 c0 10	 add	 eax, 16			; 00000010H
  0010a	89 4d 0c	 mov	 DWORD PTR _bytes$[ebp], ecx
  0010d	89 45 08	 mov	 DWORD PTR _void_data$[ebp], eax

; 370  : 
; 371  :         if (j <= 0)

  00110	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00115	85 c9		 test	 ecx, ecx
  00117	0f 8f 13 ff ff
	ff		 jg	 $LL2@PrintAscii

; 372  :             break;
; 373  :     }
; 374  : 
; 375  :     fprintf(stdout, "------------------------------------------------------------------\n");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00122	6a 01		 push	 1
  00124	e8 00 00 00 00	 call	 ___acrt_iob_func
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _fprintf
  00132	83 c4 08	 add	 esp, 8
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx

; 376  : }

  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?PrintAsciiData@@YAXPBXH@Z ENDP				; PrintAsciiData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv643 = -12						; size = 4
__Old_size$1$ = -12					; size = 4
__New_ptr$1 = -8					; size = 4
__Old$1$ = -4						; size = 4
_c_szSrc$ = 8						; size = 4
tv649 = 12						; size = 4
tv644 = 12						; size = 4
$T2 = 12						; size = 4
tv75 = 12						; size = 4
_rString$ = 12						; size = 4
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _rString$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000c	8b cf		 mov	 ecx, edi
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 317  : 	rString.resize(strlen(c_szSrc));

  0001a	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
  0001d	8b f2		 mov	 esi, edx
  0001f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL91@StringPath:
  00022	8a 06		 mov	 al, BYTE PTR [esi]
  00024	46		 inc	 esi
  00025	84 c0		 test	 al, al
  00027	75 f9		 jne	 SHORT $LL91@StringPath
  00029	2b f1		 sub	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3700 :         const size_type _Old_size = size();

  0002b	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0002e	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx

; 3701 :         if (_Newsize <= _Old_size) {

  00031	3b f1		 cmp	 esi, ecx
  00033	77 16		 ja	 SHORT $LN15@StringPath

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  00035	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2135 :         value_type* _Result = _Bx._Buf;

  00038	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0003a	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0003e	72 02		 jb	 SHORT $LN21@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 07		 mov	 eax, DWORD PTR [edi]
$LN21@StringPath:

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  00042	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 3703 :         } else {

  00046	e9 00 01 00 00	 jmp	 $LN38@StringPath
$LN15@StringPath:

; 2885 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  0004b	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 3704 :             append(_Newsize - _Old_size, _Ch);

  0004e	8b de		 mov	 ebx, esi

; 2885 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00050	8b c2		 mov	 eax, edx
  00052	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx

; 3704 :             append(_Newsize - _Old_size, _Ch);

  00055	2b d9		 sub	 ebx, ecx

; 2885 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00057	2b c1		 sub	 eax, ecx
  00059	3b d8		 cmp	 ebx, eax
  0005b	77 24		 ja	 SHORT $LN26@StringPath

; 2886 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0005d	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2135 :         value_type* _Result = _Bx._Buf;

  00060	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00062	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00065	72 02		 jb	 SHORT $LN88@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
$LN88@StringPath:

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00069	53		 push	 ebx

; 2888 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0006a	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0006d	6a 00		 push	 0
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _memset
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2889 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00078	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2890 :             return *this;

  0007c	e9 c7 00 00 00	 jmp	 $LN95@StringPath
$LN26@StringPath:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00081	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00086	2b c1		 sub	 eax, ecx
  00088	3b c3		 cmp	 eax, ebx
  0008a	0f 82 1e 01 00
	00		 jb	 $LN99@StringPath

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00090	8b ce		 mov	 ecx, esi
  00092	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00095	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0009b	76 07		 jbe	 SHORT $LN43@StringPath

; 4203 :             return _Max;

  0009d	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000a2	eb 24		 jmp	 SHORT $LN96@StringPath
$LN43@StringPath:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000a4	8b c2		 mov	 eax, edx
  000a6	d1 e8		 shr	 eax, 1
  000a8	89 45 0c	 mov	 DWORD PTR tv649[ebp], eax
  000ab	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000b0	2b 45 0c	 sub	 eax, DWORD PTR tv649[ebp]
  000b3	3b d0		 cmp	 edx, eax
  000b5	76 07		 jbe	 SHORT $LN44@StringPath

; 4207 :             return _Max;

  000b7	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000bc	eb 0a		 jmp	 SHORT $LN96@StringPath
$LN44@StringPath:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000be	8b 45 0c	 mov	 eax, DWORD PTR tv649[ebp]
  000c1	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000c3	3b c8		 cmp	 ecx, eax
  000c5	0f 42 c8	 cmovb	 ecx, eax
$LN96@StringPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000c8	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000cb	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000d4	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d7	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000da	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000de	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000e4	89 77 10	 mov	 DWORD PTR [edi+16], esi
  000e7	89 45 f8	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000ea	51		 push	 ecx
  000eb	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000ee	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f1	89 75 0c	 mov	 DWORD PTR tv644[ebp], esi
  000f4	89 55 f4	 mov	 DWORD PTR tv643[ebp], edx
  000f7	72 2c		 jb	 SHORT $LN37@StringPath

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000f9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000fb	56		 push	 esi
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _memcpy

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00102	53		 push	 ebx
  00103	6a 00		 push	 0
  00105	ff 75 0c	 push	 DWORD PTR tv644[ebp]
  00108	e8 00 00 00 00	 call	 _memset

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0010d	8b 45 f4	 mov	 eax, DWORD PTR tv643[ebp]
  00110	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00113	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  00116	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00117	50		 push	 eax
  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
  00121	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  00123	eb 20		 jmp	 SHORT $LN97@StringPath
$LN37@StringPath:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00125	57		 push	 edi
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _memcpy

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0012c	53		 push	 ebx
  0012d	6a 00		 push	 0
  0012f	56		 push	 esi
  00130	e8 00 00 00 00	 call	 _memset

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00135	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00138	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0013b	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0013e	50		 push	 eax
  0013f	57		 push	 edi
  00140	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN97@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00145	83 c4 20	 add	 esp, 32			; 00000020H
$LN95@StringPath:
  00148	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
$LN38@StringPath:
  0014b	8b ca		 mov	 ecx, edx
  0014d	33 f6		 xor	 esi, esi
  0014f	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL92@StringPath:
  00152	8a 01		 mov	 al, BYTE PTR [ecx]
  00154	41		 inc	 ecx
  00155	84 c0		 test	 al, al
  00157	75 f9		 jne	 SHORT $LL92@StringPath
  00159	2b cb		 sub	 ecx, ebx
  0015b	74 4a		 je	 SHORT $LN3@StringPath
  0015d	0f 1f 00	 npad	 3
$LL4@StringPath:

; 320  : 	{
; 321  : 		if (c_szSrc[i] == '\\')

  00160	8a 04 16	 mov	 al, BYTE PTR [esi+edx]
  00163	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00166	3c 5c		 cmp	 al, 92			; 0000005cH
  00168	75 0f		 jne	 SHORT $LN5@StringPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  0016a	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0016c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0016f	72 02		 jb	 SHORT $LN90@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00171	8b 07		 mov	 eax, DWORD PTR [edi]
$LN90@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 322  : 			rString[i] = '/';

  00173	c6 04 30 2f	 mov	 BYTE PTR [eax+esi], 47	; 0000002fH
  00177	eb 18		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00179	8b df		 mov	 ebx, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0017b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0017e	72 02		 jb	 SHORT $LN89@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00180	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN89@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 324  : 			rString[i] = korean_tolower(c_szSrc[i]);

  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00188	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
  0018b	83 c4 04	 add	 esp, 4
  0018e	88 04 33	 mov	 BYTE PTR [ebx+esi], al
$LN2@StringPath:

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00191	8b c2		 mov	 eax, edx
  00193	46		 inc	 esi
  00194	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL93@StringPath:
  00197	8a 08		 mov	 cl, BYTE PTR [eax]
  00199	40		 inc	 eax
  0019a	84 c9		 test	 cl, cl
  0019c	75 f9		 jne	 SHORT $LL93@StringPath
  0019e	2b c2		 sub	 eax, edx
  001a0	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
  001a3	3b f0		 cmp	 esi, eax
  001a5	72 b9		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  001a7	5f		 pop	 edi

; 326  : }

  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
$LN99@StringPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  001ae	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN94@StringPath:
  001b3	cc		 int	 3
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_c_szSrc$ = 8						; size = 4
_szDest$ = 12						; size = 4
?StringPath@@YAXPBDPAD@Z PROC				; StringPath, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _c_szSrc$[ebp]
  00008	8b cb		 mov	 ecx, ebx
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 33		 je	 SHORT $LN3@StringPath
  0001b	56		 push	 esi
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _szDest$[ebp]
  0001f	2b de		 sub	 ebx, esi
$LL4@StringPath:

; 306  : 	{
; 307  : 		if (c_szSrc[i] == '\\')

  00021	8a 04 33	 mov	 al, BYTE PTR [ebx+esi]
  00024	3c 5c		 cmp	 al, 92			; 0000005cH
  00026	75 04		 jne	 SHORT $LN5@StringPath

; 308  : 			szDest[i] = '/';

  00028	b0 2f		 mov	 al, 47			; 0000002fH
  0002a	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 309  : 		else
; 310  : 			szDest[i] = korean_tolower(c_szSrc[i]);

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00032	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00035	88 06		 mov	 BYTE PTR [esi], al
  00037	47		 inc	 edi
  00038	8b 45 08	 mov	 eax, DWORD PTR _c_szSrc$[ebp]
  0003b	46		 inc	 esi
  0003c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003f	90		 npad	 1
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f8		 cmp	 edi, eax
  0004b	72 d4		 jb	 SHORT $LL4@StringPath
  0004d	5e		 pop	 esi
$LN3@StringPath:
  0004e	5f		 pop	 edi

; 311  : 	}
; 312  : }

  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?StringPath@@YAXPBDPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_pString$ = 8						; size = 4
?StringPath@@YAXPAD@Z PROC				; StringPath, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pString$[ebp]
  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 32		 je	 SHORT $LN3@StringPath
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringPath:

; 295  : 	{
; 296  : 		if (pString[i] == '\\')

  00020	8a 04 3e	 mov	 al, BYTE PTR [esi+edi]
  00023	3c 5c		 cmp	 al, 92			; 0000005cH
  00025	75 04		 jne	 SHORT $LN5@StringPath

; 297  : 			pString[i] = '/';

  00027	b0 2f		 mov	 al, 47			; 0000002fH
  00029	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 298  : 		else
; 299  : 			pString[i] = korean_tolower(pString[i]);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00031	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00034	88 04 3e	 mov	 BYTE PTR [esi+edi], al
  00037	8b c7		 mov	 eax, edi
  00039	46		 inc	 esi
  0003a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003d	0f 1f 00	 npad	 3
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f0		 cmp	 esi, eax
  0004b	72 d3		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  0004d	5f		 pop	 edi

; 300  : 	}
; 301  : }

  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?StringPath@@YAXPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_rString$ = 8						; size = 4
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  00004	8b 75 08	 mov	 esi, DWORD PTR _rString$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0000d	76 46		 jbe	 SHORT $LN3@StringPath
  0000f	53		 push	 ebx
$LL4@StringPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 2135 :         value_type* _Result = _Bx._Buf;

  00013	8b ce		 mov	 ecx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00015	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00018	72 02		 jb	 SHORT $LN47@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN47@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 285  : 		if (rString[i] == '\\')

  0001c	80 3c 39 5c	 cmp	 BYTE PTR [ecx+edi], 92	; 0000005cH
  00020	8b ce		 mov	 ecx, esi
  00022	75 0d		 jne	 SHORT $LN5@StringPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00024	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00027	72 02		 jb	 SHORT $LN44@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN44@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 286  : 			rString[i] = '/';

  0002b	c6 04 39 2f	 mov	 BYTE PTR [ecx+edi], 47	; 0000002fH
  0002f	eb 1d		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00031	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00034	72 02		 jb	 SHORT $LN45@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN45@StringPath:

; 2135 :         value_type* _Result = _Bx._Buf;

  00038	8b de		 mov	 ebx, esi

; 2136 :         if (_Large_string_engaged()) {

  0003a	72 02		 jb	 SHORT $LN46@StringPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0003c	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN46@StringPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 288  : 			rString[i] = korean_tolower(rString[i]);

  0003e	0f b6 04 39	 movzx	 eax, BYTE PTR [ecx+edi]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00048	83 c4 04	 add	 esp, 4
  0004b	88 04 3b	 mov	 BYTE PTR [ebx+edi], al
$LN2@StringPath:

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  0004e	47		 inc	 edi
  0004f	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00052	72 bc		 jb	 SHORT $LL4@StringPath
  00054	5b		 pop	 ebx
$LN3@StringPath:
  00055	5f		 pop	 edi

; 289  : 	}
; 290  : }

  00056	5e		 pop	 esi
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?StringLowers@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_String$ = 8						; size = 4
?StringLowers@@YAXPAD@Z PROC				; StringLowers, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _String$[ebp]
  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL10@StringLowe:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL10@StringLowe
  00017	2b ca		 sub	 ecx, edx
  00019	74 28		 je	 SHORT $LN3@StringLowe
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringLowe:

; 276  : 	{
; 277  : 		String[i] = korean_tolower(String[i]);

  00020	0f b6 04 3e	 movzx	 eax, BYTE PTR [esi+edi]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0002a	88 04 3e	 mov	 BYTE PTR [esi+edi], al
  0002d	83 c4 04	 add	 esp, 4
  00030	8b c7		 mov	 eax, edi
  00032	46		 inc	 esi
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL11@StringLowe:

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL11@StringLowe
  0003d	2b c2		 sub	 eax, edx
  0003f	3b f0		 cmp	 esi, eax
  00041	72 dd		 jb	 SHORT $LL4@StringLowe
$LN3@StringLowe:
  00043	5f		 pop	 edi

; 278  : 	}
; 279  : }

  00044	5e		 pop	 esi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?StringLowers@@YAXPAD@Z ENDP				; StringLowers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_buf$ = -136						; size = 129
__$ArrayPad$ = -4					; size = 4
_strFileName$ = 8					; size = 4
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetWorkingFolder, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _strFileName$[ebp]

; 267  : 	char buf[128+1];
; 268  : 	_getcwd(buf, 128);

  00017	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0001d	57		 push	 edi
  0001e	68 80 00 00 00	 push	 128			; 00000080H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __getcwd

; 269  : 	strcat(buf, "/");

  00029	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  0002f	83 c4 08	 add	 esp, 8
  00032	4f		 dec	 edi
$LL9@GetWorking:
  00033	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00036	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00039	84 c0		 test	 al, al
  0003b	75 f6		 jne	 SHORT $LL9@GetWorking
  0003d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00043	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 269  : 	strcat(buf, "/");

  00049	66 89 07	 mov	 WORD PTR [edi], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004c	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0004f	90		 npad	 1
$LL10@GetWorking:
  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	42		 inc	 edx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL10@GetWorking
  00057	2b d1		 sub	 edx, ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0005f	52		 push	 edx
  00060	50		 push	 eax
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 271  : }

  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006b	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 271  : }

  0006c	33 cd		 xor	 ecx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006e	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 271  : }

  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetWorkingFolder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_sz_Name$ = 8						; size = 4
_OnlyFileName$ = 12					; size = 4
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExceptionPathName, COMDAT

; 205  : 	GetOnlyFileName(sz_Name, OnlyFileName);

  00000	e9 00 00 00 00	 jmp	 ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExceptionPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstrLocalFileName$GSCopy$1$ = -96			; size = 4
_c_szFullPathFileName$GSCopy$1$ = -92			; size = 4
_strLocalFileName$ = -88				; size = 24
_strGlobalPath$ = -64					; size = 24
_strFullPathFileName$ = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szGlobalPath$ = 8					; size = 4
_c_szFullPathFileName$ = 12				; size = 4
_pstrLocalFileName$ = 16				; size = 4
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetLocalFileName, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szFullPathFileName$[ebp]
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _pstrLocalFileName$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR _c_szGlobalPath$[ebp]
  00034	89 5d a4	 mov	 DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp], ebx
  00037	89 4d a0	 mov	 DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00041	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00048	c6 45 a8 00	 mov	 BYTE PTR _strLocalFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 243  : 	std::string strLocalFileName;

  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00053	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005a	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00061	c6 45 c0 00	 mov	 BYTE PTR _strGlobalPath$[ebp], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00065	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0006c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00073	c6 45 d8 00	 mov	 BYTE PTR _strFullPathFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 247  : 	StringPath(c_szGlobalPath, strGlobalPath);

  00077	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  0007a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007e	51		 push	 ecx
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 248  : 	StringPath(c_szFullPathFileName, strFullPathFileName);

  00085	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathFileName$[ebp]
  00088	50		 push	 eax
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 249  : 
; 250  : 	if (strGlobalPath.length() >= strFullPathFileName.length())

  0008f	8b 75 d0	 mov	 esi, DWORD PTR _strGlobalPath$[ebp+16]
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	8b 7d d4	 mov	 edi, DWORD PTR _strGlobalPath$[ebp+20]
  00098	3b 75 e8	 cmp	 esi, DWORD PTR _strFullPathFileName$[ebp+16]
  0009b	73 4b		 jae	 SHORT $LN153@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  0009d	33 d2		 xor	 edx, edx
  0009f	85 f6		 test	 esi, esi
  000a1	74 27		 je	 SHORT $LN3@GetLocalFi
  000a3	8b 5d ec	 mov	 ebx, DWORD PTR _strFullPathFileName$[ebp+20]
$LL4@GetLocalFi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000a6	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  000a9	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPath$[ebp]
  000ac	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  000af	0f 43 45 c0	 cmovae	 eax, DWORD PTR _strGlobalPath$[ebp]

; 2153 :         return _BUF_SIZE <= _Myres;

  000b3	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000b6	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strFullPathFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 256  : 		if (strGlobalPath[dwPos] != strFullPathFileName[dwPos])

  000ba	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000bd	3a 04 11	 cmp	 al, BYTE PTR [ecx+edx]
  000c0	75 26		 jne	 SHORT $LN153@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  000c2	42		 inc	 edx
  000c3	3b d6		 cmp	 edx, esi
  000c5	72 df		 jb	 SHORT $LL4@GetLocalFi
  000c7	8b 5d a4	 mov	 ebx, DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp]
$LN3@GetLocalFi:

; 257  : 			return false;
; 258  : 	}
; 259  : 
; 260  : 	*pstrLocalFileName = &c_szFullPathFileName[length];

  000ca	03 f3		 add	 esi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000cc	8b d6		 mov	 edx, esi
  000ce	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL158@GetLocalFi:
  000d1	8a 02		 mov	 al, BYTE PTR [edx]
  000d3	42		 inc	 edx
  000d4	84 c0		 test	 al, al
  000d6	75 f9		 jne	 SHORT $LL158@GetLocalFi
  000d8	2b d1		 sub	 edx, ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000da	8b 4d a0	 mov	 ecx, DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp]
  000dd	52		 push	 edx
  000de	56		 push	 esi
  000df	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 262  : 	return true;

  000e4	b3 01		 mov	 bl, 1
  000e6	eb 02		 jmp	 SHORT $LN14@GetLocalFi
$LN153@GetLocalFi:
  000e8	32 db		 xor	 bl, bl
$LN14@GetLocalFi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000ea	8b 45 ec	 mov	 eax, DWORD PTR _strFullPathFileName$[ebp+20]
  000ed	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000f0	72 0d		 jb	 SHORT $LN126@GetLocalFi

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000f2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f3	50		 push	 eax
  000f4	ff 75 d8	 push	 DWORD PTR _strFullPathFileName$[ebp]
  000f7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000fc	83 c4 08	 add	 esp, 8
$LN126@GetLocalFi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000ff	83 ff 10	 cmp	 edi, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00102	72 0f		 jb	 SHORT $LN159@GetLocalFi

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00104	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00107	51		 push	 ecx
  00108	ff 75 c0	 push	 DWORD PTR _strGlobalPath$[ebp]
  0010b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00110	83 c4 08	 add	 esp, 8
$LN159@GetLocalFi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 263  : }

  00113	8a c3		 mov	 al, bl
  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00126	33 cd		 xor	 ecx, ebp
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _strLocalFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetLocalFileName
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAPBDPBD@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
?GetOnlyPathName@@YAPBDPBD@Z PROC			; GetOnlyPathName, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	static std::string strPathName;

  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00017	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001d	7f 25		 jg	 SHORT $LN21@GetOnlyPat
$LN2@GetOnlyPat:

; 236  : 	GetOnlyPathName(c_szName, strPathName);

  0001f	68 00 00 00 00	 push	 OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00024	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  00027	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
  0002c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  0002f	b8 00 00 00 00	 mov	 eax, OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2153 :         return _BUF_SIZE <= _Myres;

  00034	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0003b	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 239  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN21@GetOnlyPat:

; 235  : 	static std::string strPathName;

  00044	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00049	e8 00 00 00 00	 call	 __Init_thread_header
  0004e	83 c4 04	 add	 esp, 4
  00051	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA, -1
  00058	75 c5		 jne	 SHORT $LN2@GetOnlyPat
  0005a	68 00 00 00 00	 push	 OFFSET ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
  0005f	e8 00 00 00 00	 call	 _atexit
  00064	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00069	e8 00 00 00 00	 call	 __Init_thread_footer
  0006e	83 c4 08	 add	 esp, 8
  00071	eb ac		 jmp	 SHORT $LN2@GetOnlyPat
?GetOnlyPathName@@YAPBDPBD@Z ENDP			; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv1035 = -20						; size = 4
tv1032 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
_j$1$ = -12						; size = 4
__Old$1$ = -8						; size = 4
__New_ptr$1 = -8					; size = 4
__Old$1$ = -4						; size = 4
_sz_Name$ = 8						; size = 4
__New_ptr$2 = 12					; size = 4
_OnlyPathName$ = 12					; size = 4
__Ch$1$ = 15						; size = 1
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyPathName, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  00003	8b 55 08	 mov	 edx, DWORD PTR _sz_Name$[ebp]
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	8b ca		 mov	 ecx, edx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL150@GetOnlyPat:
  00011	8a 01		 mov	 al, BYTE PTR [ecx]
  00013	41		 inc	 ecx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL150@GetOnlyPat
  00018	2b ce		 sub	 ecx, esi
  0001a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001d	85 c0		 test	 eax, eax
  0001f	78 15		 js	 SHORT $LN3@GetOnlyPat
$LL4@GetOnlyPat:

; 212  : 	{
; 213  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00021	8a 0c 10	 mov	 cl, BYTE PTR [eax+edx]
  00024	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00027	74 0c		 je	 SHORT $LN138@GetOnlyPat
  00029	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0002c	74 07		 je	 SHORT $LN138@GetOnlyPat

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  0002e	83 e8 01	 sub	 eax, 1
  00031	79 ee		 jns	 SHORT $LL4@GetOnlyPat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00033	eb 01		 jmp	 SHORT $LN3@GetOnlyPat
$LN138@GetOnlyPat:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 215  : 			++i;

  00035	40		 inc	 eax
$LN3@GetOnlyPat:

; 223  : 	OnlyPathName.reserve(strlen(sz_Name));

  00036	33 c9		 xor	 ecx, ecx
  00038	8b f2		 mov	 esi, edx
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	0f 45 c8	 cmovne	 ecx, eax
  00040	89 4d f0	 mov	 DWORD PTR tv1032[ebp], ecx
  00043	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL151@GetOnlyPat:
  00046	8a 06		 mov	 al, BYTE PTR [esi]
  00048	46		 inc	 esi
  00049	84 c0		 test	 al, al
  0004b	75 f9		 jne	 SHORT $LL151@GetOnlyPat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3734 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  0004d	8b 7d 0c	 mov	 edi, DWORD PTR _OnlyPathName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 223  : 	OnlyPathName.reserve(strlen(sz_Name));

  00050	2b f1		 sub	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3734 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00052	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00055	89 5d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ebx
  00058	3b de		 cmp	 ebx, esi
  0005a	0f 87 d7 00 00
	00		 ja	 $LN16@GetOnlyPat

; 3735 :             return; // nothing to do
; 3736 :         }
; 3737 : 
; 3738 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  00060	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00063	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  00066	3b d6		 cmp	 edx, esi
  00068	0f 84 c6 00 00
	00		 je	 $LN154@GetOnlyPat

; 3739 :             return; // nothing to do
; 3740 :         }
; 3741 : 
; 3742 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  0006e	0f 83 94 00 00
	00		 jae	 $LN15@GetOnlyPat

; 3743 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3744 :             _Reallocate_grow_by(

  00074	8b ce		 mov	 ecx, esi

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00076	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3744 :             _Reallocate_grow_by(

  0007b	2b cb		 sub	 ecx, ebx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0007d	2b c3		 sub	 eax, ebx
  0007f	3b c1		 cmp	 eax, ecx
  00081	0f 82 dc 01 00
	00		 jb	 $LN139@GetOnlyPat

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00087	8b de		 mov	 ebx, esi
  00089	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0008c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00092	76 07		 jbe	 SHORT $LN26@GetOnlyPat

; 4203 :             return _Max;

  00094	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00099	eb 1e		 jmp	 SHORT $LN25@GetOnlyPat
$LN26@GetOnlyPat:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0009b	8b ca		 mov	 ecx, edx
  0009d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000a2	d1 e9		 shr	 ecx, 1
  000a4	2b c1		 sub	 eax, ecx
  000a6	3b d0		 cmp	 edx, eax
  000a8	76 07		 jbe	 SHORT $LN27@GetOnlyPat

; 4207 :             return _Max;

  000aa	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  000af	eb 08		 jmp	 SHORT $LN25@GetOnlyPat
$LN27@GetOnlyPat:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b1	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b4	3b d8		 cmp	 ebx, eax
  000b6	0f 42 d8	 cmovb	 ebx, eax
$LN25@GetOnlyPat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000b9	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c5	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000c8	89 5f 14	 mov	 DWORD PTR [edi+20], ebx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000cb	41		 inc	 ecx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000cc	8b 5d f8	 mov	 ebx, DWORD PTR __Old$1$[ebp]
  000cf	89 45 0c	 mov	 DWORD PTR __New_ptr$2[ebp], eax
  000d2	89 77 10	 mov	 DWORD PTR [edi+16], esi
  000d5	51		 push	 ecx
  000d6	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000d9	72 1a		 jb	 SHORT $LN20@GetOnlyPat

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000db	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000dd	56		 push	 esi
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _memcpy

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	50		 push	 eax
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ee	8b 45 0c	 mov	 eax, DWORD PTR __New_ptr$2[ebp]
  000f1	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  000f3	eb 3c		 jmp	 SHORT $LN157@GetOnlyPat
$LN20@GetOnlyPat:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000f5	57		 push	 edi
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 _memcpy

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fc	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  000ff	50		 push	 eax
  00100	57		 push	 edi
  00101	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 3750 :             return;

  00106	eb 29		 jmp	 SHORT $LN157@GetOnlyPat
$LN15@GetOnlyPat:

; 3751 :         }
; 3752 : 
; 3753 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  00108	83 fe 10	 cmp	 esi, 16			; 00000010H
  0010b	73 27		 jae	 SHORT $LN154@GetOnlyPat

; 2153 :         return _BUF_SIZE <= _Myres;

  0010d	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3753 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  00110	72 22		 jb	 SHORT $LN154@GetOnlyPat

; 4280 :         const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00112	8b 37		 mov	 esi, DWORD PTR [edi]

; 4281 :         auto& _Al          = _Getal();
; 4282 :         _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4283 :         _Traits::copy(_Mypair._Myval2._Bx._Buf, _Unfancy(_Ptr), _Mypair._Myval2._Mysize + 1);

  00114	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00117	50		 push	 eax
  00118	56		 push	 esi
  00119	57		 push	 edi
  0011a	e8 00 00 00 00	 call	 _memcpy

; 4284 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0011f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00122	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00123	50		 push	 eax
  00124	56		 push	 esi
  00125	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4285 :         _Mypair._Myval2._Myres = _BUF_SIZE - 1;

  0012a	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
$LN157@GetOnlyPat:

; 2135 :         value_type* _Result = _Bx._Buf;

  00131	83 c4 14	 add	 esp, 20			; 00000014H
$LN154@GetOnlyPat:
  00134	8b 55 08	 mov	 edx, DWORD PTR _sz_Name$[ebp]
$LN16@GetOnlyPat:

; 2153 :         return _BUF_SIZE <= _Myres;

  00137	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2135 :         value_type* _Result = _Bx._Buf;

  0013b	8b c7		 mov	 eax, edi

; 2136 :         if (_Large_string_engaged()) {

  0013d	72 02		 jb	 SHORT $LN148@GetOnlyPat

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0013f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN148@GetOnlyPat:

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00141	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00148	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 226  : 	for (int j=0; j<i; ++j)

  0014b	33 c0		 xor	 eax, eax
  0014d	89 45 f4	 mov	 DWORD PTR _j$1$[ebp], eax
  00150	39 45 f0	 cmp	 DWORD PTR tv1032[ebp], eax
  00153	0f 8e f5 00 00
	00		 jle	 $LN6@GetOnlyPat
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@GetOnlyPat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00160	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 2827 :         push_back(_Ch);

  00163	8a 14 10	 mov	 dl, BYTE PTR [eax+edx]

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00166	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 2827 :         push_back(_Ch);

  00169	88 55 0f	 mov	 BYTE PTR __Ch$1$[ebp], dl

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0016c	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  0016f	3b d9		 cmp	 ebx, ecx
  00171	73 1c		 jae	 SHORT $LN96@GetOnlyPat

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00173	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00176	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00179	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0017b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0017e	72 02		 jb	 SHORT $LN149@GetOnlyPat

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00180	8b 07		 mov	 eax, DWORD PTR [edi]
$LN149@GetOnlyPat:

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00182	88 14 18	 mov	 BYTE PTR [eax+ebx], dl

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00185	c6 44 18 01 00	 mov	 BYTE PTR [eax+ebx+1], 0

; 3614 :             return;

  0018a	e9 ac 00 00 00	 jmp	 $LN5@GetOnlyPat
$LN96@GetOnlyPat:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0018f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00194	2b c3		 sub	 eax, ebx
  00196	83 f8 01	 cmp	 eax, 1
  00199	0f 82 c4 00 00
	00		 jb	 $LN139@GetOnlyPat

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0019f	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  001a2	83 ce 0f	 or	 esi, 15			; 0000000fH
  001a5	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  001ab	76 07		 jbe	 SHORT $LN111@GetOnlyPat

; 4203 :             return _Max;

  001ad	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  001b2	eb 1e		 jmp	 SHORT $LN110@GetOnlyPat
$LN111@GetOnlyPat:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001b4	8b d1		 mov	 edx, ecx
  001b6	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001bb	d1 ea		 shr	 edx, 1
  001bd	2b c2		 sub	 eax, edx
  001bf	3b c8		 cmp	 ecx, eax
  001c1	76 07		 jbe	 SHORT $LN112@GetOnlyPat

; 4207 :             return _Max;

  001c3	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  001c8	eb 08		 jmp	 SHORT $LN110@GetOnlyPat
$LN112@GetOnlyPat:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001ca	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  001cd	3b f0		 cmp	 esi, eax
  001cf	0f 42 f0	 cmovb	 esi, eax
$LN110@GetOnlyPat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001d2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  001db	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  001de	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  001e1	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  001e5	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  001e8	89 45 f8	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  001eb	8d 34 18	 lea	 esi, DWORD PTR [eax+ebx]
  001ee	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  001f1	89 75 ec	 mov	 DWORD PTR tv1035[ebp], esi
  001f4	53		 push	 ebx
  001f5	72 27		 jb	 SHORT $LN105@GetOnlyPat

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  001f7	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  001f9	56		 push	 esi
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00200	8b 45 ec	 mov	 eax, DWORD PTR tv1035[ebp]
  00203	8a 4d 0f	 mov	 cl, BYTE PTR __Ch$1$[ebp]
  00206	88 08		 mov	 BYTE PTR [eax], cl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00208	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0020c	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  0020f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00210	50		 push	 eax
  00211	56		 push	 esi
  00212	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00217	8b 45 f8	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
  0021a	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  0021c	eb 1a		 jmp	 SHORT $LN156@GetOnlyPat
$LN105@GetOnlyPat:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0021e	57		 push	 edi
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00225	8a 4d 0f	 mov	 cl, BYTE PTR __Ch$1$[ebp]

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00228	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0022b	50		 push	 eax
  0022c	57		 push	 edi

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0022d	88 0e		 mov	 BYTE PTR [esi], cl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0022f	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00233	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN156@GetOnlyPat:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 226  : 	for (int j=0; j<i; ++j)

  00238	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@GetOnlyPat:
  0023b	8b 45 f4	 mov	 eax, DWORD PTR _j$1$[ebp]
  0023e	8b 55 08	 mov	 edx, DWORD PTR _sz_Name$[ebp]
  00241	40		 inc	 eax
  00242	89 45 f4	 mov	 DWORD PTR _j$1$[ebp], eax
  00245	3b 45 f0	 cmp	 eax, DWORD PTR tv1032[ebp]
  00248	0f 8c 12 ff ff
	ff		 jl	 $LL7@GetOnlyPat
$LN6@GetOnlyPat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0024e	6a 00		 push	 0
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00255	8b cf		 mov	 ecx, edi
  00257	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 231  : }

  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
$LN139@GetOnlyPat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  00263	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN155@GetOnlyPat:
  00268	cc		 int	 3
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv515 = -20						; size = 4
_j$1$ = -16						; size = 4
__New_ptr$1 = -12					; size = 4
__Old$1$ = -8						; size = 4
__Ch$1$ = -1						; size = 1
_sz_Name$ = 8						; size = 4
_strFileName$ = 12					; size = 4
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyFileName, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _strFileName$[ebp]
  0000c	8b cf		 mov	 ecx, edi
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  0001a	8b 55 08	 mov	 edx, DWORD PTR _sz_Name$[ebp]
  0001d	8b ca		 mov	 ecx, edx
  0001f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL74@GetOnlyFil:
  00022	8a 01		 mov	 al, BYTE PTR [ecx]
  00024	41		 inc	 ecx
  00025	84 c0		 test	 al, al
  00027	75 f9		 jne	 SHORT $LL74@GetOnlyFil
  00029	2b ce		 sub	 ecx, esi
  0002b	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0002e	85 c0		 test	 eax, eax
  00030	78 15		 js	 SHORT $LN3@GetOnlyFil
$LL4@GetOnlyFil:

; 184  : 	{
; 185  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00032	8a 0c 10	 mov	 cl, BYTE PTR [eax+edx]
  00035	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00038	74 0c		 je	 SHORT $LN64@GetOnlyFil
  0003a	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003d	74 07		 je	 SHORT $LN64@GetOnlyFil

; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  0003f	83 e8 01	 sub	 eax, 1
  00042	79 ee		 jns	 SHORT $LL4@GetOnlyFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00044	eb 01		 jmp	 SHORT $LN3@GetOnlyFil
$LN64@GetOnlyFil:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 187  : 			++i;

  00046	40		 inc	 eax
$LN3@GetOnlyFil:

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  00047	33 db		 xor	 ebx, ebx
  00049	8b ca		 mov	 ecx, edx
  0004b	83 f8 ff	 cmp	 eax, -1
  0004e	0f 45 d8	 cmovne	 ebx, eax
  00051	89 5d f0	 mov	 DWORD PTR _j$1$[ebp], ebx
  00054	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL75@GetOnlyFil:
  00057	8a 01		 mov	 al, BYTE PTR [ecx]
  00059	41		 inc	 ecx
  0005a	84 c0		 test	 al, al
  0005c	75 f9		 jne	 SHORT $LL75@GetOnlyFil
  0005e	2b ce		 sub	 ecx, esi
  00060	3b d9		 cmp	 ebx, ecx
  00062	0f 83 09 01 00
	00		 jae	 $LN6@GetOnlyFil
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@GetOnlyFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2827 :         push_back(_Ch);

  00070	8a 14 13	 mov	 dl, BYTE PTR [ebx+edx]

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00073	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00076	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 2827 :         push_back(_Ch);

  00079	88 55 ff	 mov	 BYTE PTR __Ch$1$[ebp], dl

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0007c	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  0007f	3b d9		 cmp	 ebx, ecx
  00081	73 1c		 jae	 SHORT $LN21@GetOnlyFil

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00083	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00086	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00089	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0008b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0008e	72 02		 jb	 SHORT $LN73@GetOnlyFil

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00090	8b 07		 mov	 eax, DWORD PTR [edi]
$LN73@GetOnlyFil:

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00092	88 14 18	 mov	 BYTE PTR [eax+ebx], dl

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00095	c6 44 18 01 00	 mov	 BYTE PTR [eax+ebx+1], 0

; 3614 :             return;

  0009a	e9 ac 00 00 00	 jmp	 $LN5@GetOnlyFil
$LN21@GetOnlyFil:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0009f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000a4	2b c3		 sub	 eax, ebx
  000a6	83 f8 01	 cmp	 eax, 1
  000a9	0f 82 d7 00 00
	00		 jb	 $LN65@GetOnlyFil

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  000af	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000b2	83 ce 0f	 or	 esi, 15			; 0000000fH
  000b5	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000bb	76 07		 jbe	 SHORT $LN36@GetOnlyFil

; 4203 :             return _Max;

  000bd	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000c2	eb 1e		 jmp	 SHORT $LN35@GetOnlyFil
$LN36@GetOnlyFil:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000c4	8b d1		 mov	 edx, ecx
  000c6	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000cb	d1 ea		 shr	 edx, 1
  000cd	2b c2		 sub	 eax, edx
  000cf	3b c8		 cmp	 ecx, eax
  000d1	76 07		 jbe	 SHORT $LN37@GetOnlyFil

; 4207 :             return _Max;

  000d3	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000d8	eb 08		 jmp	 SHORT $LN35@GetOnlyFil
$LN37@GetOnlyFil:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000da	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000dd	3b f0		 cmp	 esi, eax
  000df	0f 42 f0	 cmovb	 esi, eax
$LN35@GetOnlyFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000e2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000eb	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000ee	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000f1	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000f5	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  000f8	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000fb	8d 34 18	 lea	 esi, DWORD PTR [eax+ebx]
  000fe	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00101	89 75 ec	 mov	 DWORD PTR tv515[ebp], esi
  00104	53		 push	 ebx
  00105	72 27		 jb	 SHORT $LN30@GetOnlyFil

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00107	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00109	56		 push	 esi
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00110	8b 45 ec	 mov	 eax, DWORD PTR tv515[ebp]
  00113	8a 4d ff	 mov	 cl, BYTE PTR __Ch$1$[ebp]
  00116	88 08		 mov	 BYTE PTR [eax], cl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00118	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0011c	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]
  0011f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00120	50		 push	 eax
  00121	56		 push	 esi
  00122	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00127	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
  0012a	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  0012c	eb 1a		 jmp	 SHORT $LN78@GetOnlyFil
$LN30@GetOnlyFil:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0012e	57		 push	 edi
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _memcpy

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00135	8a 4d ff	 mov	 cl, BYTE PTR __Ch$1$[ebp]

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00138	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0013b	50		 push	 eax
  0013c	57		 push	 edi

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0013d	88 0e		 mov	 BYTE PTR [esi], cl

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0013f	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00143	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN78@GetOnlyFil:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  00148	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@GetOnlyFil:
  0014b	8b 55 08	 mov	 edx, DWORD PTR _sz_Name$[ebp]
  0014e	8b c2		 mov	 eax, edx
  00150	8b 5d f0	 mov	 ebx, DWORD PTR _j$1$[ebp]
  00153	43		 inc	 ebx
  00154	89 5d f0	 mov	 DWORD PTR _j$1$[ebp], ebx
  00157	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0015a	66 0f 1f 44 00
	00		 npad	 6
$LL76@GetOnlyFil:
  00160	8a 08		 mov	 cl, BYTE PTR [eax]
  00162	40		 inc	 eax
  00163	84 c9		 test	 cl, cl
  00165	75 f9		 jne	 SHORT $LL76@GetOnlyFil
  00167	2b c6		 sub	 eax, esi
  00169	3b d8		 cmp	 ebx, eax
  0016b	0f 82 ff fe ff
	ff		 jb	 $LL7@GetOnlyFil
$LN6@GetOnlyFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00171	6a 00		 push	 0
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00178	8b cf		 mov	 ecx, edi
  0017a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp

; 201  : }

  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
$LN65@GetOnlyFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  00186	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN77@GetOnlyFil:
  0018b	cc		 int	 3
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetIndexingName@@YAXPADK@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetIndexingName@@YAXPADK@Z PROC			; GetIndexingName, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	sprintf(szName + strlen(szName), "%u", Index);

  00003	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@GetIndexin:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@GetIndexin
  00017	ff 75 0c	 push	 DWORD PTR _Index$[ebp]
  0001a	2b c6		 sub	 eax, esi
  0001c	03 c2		 add	 eax, edx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _sprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	5e		 pop	 esi

; 176  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetIndexingName@@YAXPADK@Z ENDP			; GetIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetOldIndexingName@@YAXPADH@Z
_TEXT	SEGMENT
_sign$ = -524						; size = 4
_dec$ = -520						; size = 4
_Temp$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetOldIndexingName@@YAXPADH@Z PROC			; GetOldIndexingName, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]

; 164  : 	int dec, sign;
; 165  : 	char Temp[512];
; 166  : 
; 167  : 	strcpy(Temp, _ecvt(Index, 256, &dec, &sign));

  00016	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _sign$[ebp]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _szName$[ebp]
  00021	51		 push	 ecx
  00022	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _dec$[ebp]
  00028	66 0f 6e c0	 movd	 xmm0, eax
  0002c	51		 push	 ecx
  0002d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	83 ec 08	 sub	 esp, 8
  00039	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 __ecvt
  00043	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	2b d0		 sub	 edx, eax
  0004e	66 90		 npad	 2
$LL3@GetOldInde:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00055	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00059	84 c9		 test	 cl, cl
  0005b	75 f3		 jne	 SHORT $LL3@GetOldInde

; 168  : 	Temp[dec] = '\0';

  0005d	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _dec$[ebp]
  00063	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00068	73 4c		 jae	 SHORT $LN4@GetOldInde

; 169  : 
; 170  : 	strcat(szName, Temp);

  0006a	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00070	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _Temp$[ebp+eax], cl
  00077	8b f2		 mov	 esi, edx
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@GetOldInde:
  00080	8a 02		 mov	 al, BYTE PTR [edx]
  00082	42		 inc	 edx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL9@GetOldInde
  00087	2b d6		 sub	 edx, esi
  00089	4f		 dec	 edi
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL10@GetOldInde:
  00090	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00093	47		 inc	 edi
  00094	84 c0		 test	 al, al
  00096	75 f8		 jne	 SHORT $LL10@GetOldInde
  00098	8b ca		 mov	 ecx, edx
  0009a	c1 e9 02	 shr	 ecx, 2
  0009d	f3 a5		 rep movsd
  0009f	8b ca		 mov	 ecx, edx
  000a1	83 e1 03	 and	 ecx, 3
  000a4	f3 a4		 rep movsb

; 171  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	5f		 pop	 edi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5e		 pop	 esi
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN4@GetOldInde:

; 168  : 	Temp[dec] = '\0';

  000b6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN11@GetOldInde:
  000bb	cc		 int	 3
?GetOldIndexingName@@YAXPADH@Z ENDP			; GetOldIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileNameParts@@YAXPBDHPAD11@Z
_TEXT	SEGMENT
tv528 = -4						; size = 4
_c_szFile$ = 8						; size = 4
tv524 = 12						; size = 4
_len$ = 12						; size = 4
_pszPath$ = 16						; size = 4
_pszName$ = 20						; size = 4
_pszExt$ = 24						; size = 4
?GetFileNameParts@@YAXPBDHPAD11@Z PROC			; GetFileNameParts, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 101  : 	assert(pszPath!=NULL);
; 102  : 	assert(pszName!=NULL);
; 103  : 	assert(pszExt!=NULL);
; 104  : 
; 105  : 	int ext=len;

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00008	8b d3		 mov	 edx, ebx

; 106  : 	int pos=len;

  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi

; 107  : 	while (pos>0)

  0000d	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00010	57		 push	 edi
  00011	85 db		 test	 ebx, ebx
  00013	7e 33		 jle	 SHORT $LN51@GetFileNam
$LL2@GetFileNam:

; 108  : 	{
; 109  : 		--pos;
; 110  : 		char c=c_szFile[pos];

  00015	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00019	48		 dec	 eax

; 111  : 		if (ext==len && c=='.')

  0001a	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001d	74 10		 je	 SHORT $LN31@GetFileNam

; 114  : 			break;
; 115  : 		}
; 116  : 
; 117  : 		if (c=='/') break;

  0001f	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00022	74 0d		 je	 SHORT $LN32@GetFileNam

; 118  : 		else if (c=='\\') break;

  00024	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00027	74 08		 je	 SHORT $LN32@GetFileNam

; 107  : 	while (pos>0)

  00029	85 c0		 test	 eax, eax
  0002b	7f e8		 jg	 SHORT $LL2@GetFileNam

; 127  : 		else if (c=='\\') break;

  0002d	eb 19		 jmp	 SHORT $LN51@GetFileNam
$LN31@GetFileNam:

; 112  : 		{
; 113  : 			ext=pos;

  0002f	8b d0		 mov	 edx, eax
$LN32@GetFileNam:

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00031	85 c0		 test	 eax, eax
  00033	7e 15		 jle	 SHORT $LN52@GetFileNam
$LL4@GetFileNam:

; 122  : 	{
; 123  : 		--pos;
; 124  : 		char c=c_szFile[pos];

  00035	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00039	48		 dec	 eax

; 125  : 
; 126  : 		if (c=='/') break;

  0003a	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003d	74 09		 je	 SHORT $LN51@GetFileNam

; 127  : 		else if (c=='\\') break;

  0003f	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00042	74 04		 je	 SHORT $LN51@GetFileNam

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00044	85 c0		 test	 eax, eax
  00046	7f ed		 jg	 SHORT $LL4@GetFileNam
$LN51@GetFileNam:

; 128  : 	}
; 129  : 
; 130  : 	if (pos)

  00048	85 c0		 test	 eax, eax
$LN52@GetFileNam:
  0004a	74 2f		 je	 SHORT $LN22@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  0004c	40		 inc	 eax

; 133  : 		for (int i = 0; i < pos; ++i)

  0004d	85 c0		 test	 eax, eax
  0004f	7e 23		 jle	 SHORT $LN7@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  00051	8b 7d 10	 mov	 edi, DWORD PTR _pszPath$[ebp]
  00054	8b d8		 mov	 ebx, eax
  00056	2b f7		 sub	 esi, edi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL39@GetFileNam:

; 134  : 		{
; 135  : 			pszPath[i] = c_szFile[i];

  00060	8a 0c 3e	 mov	 cl, BYTE PTR [esi+edi]
  00063	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00066	88 4f ff	 mov	 BYTE PTR [edi-1], cl
  00069	83 eb 01	 sub	 ebx, 1
  0006c	75 f2		 jne	 SHORT $LL39@GetFileNam
  0006e	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00071	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
$LN7@GetFileNam:

; 136  : 		}
; 137  : 		pszPath[pos] = '\0';

  00074	8b 4d 10	 mov	 ecx, DWORD PTR _pszPath$[ebp]
  00077	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN22@GetFileNam:

; 138  : 	}
; 139  : 
; 140  : 	if (ext>pos)

  0007b	3b d0		 cmp	 edx, eax
  0007d	7e 26		 jle	 SHORT $LN23@GetFileNam

; 141  : 	{
; 142  : 		int count = 0;
; 143  : 		for (int i = pos; i < ext; ++i)

  0007f	8b 7d 14	 mov	 edi, DWORD PTR _pszName$[ebp]
  00082	8b ca		 mov	 ecx, edx
  00084	2b f8		 sub	 edi, eax
  00086	2b c8		 sub	 ecx, eax
  00088	89 4d 0c	 mov	 DWORD PTR tv524[ebp], ecx
  0008b	0f 1f 44 00 00	 npad	 5
$LL11@GetFileNam:

; 144  : 		{
; 145  : 			pszName[count++] = c_szFile[i];

  00090	8a 0c 30	 mov	 cl, BYTE PTR [eax+esi]
  00093	88 0c 07	 mov	 BYTE PTR [edi+eax], cl
  00096	40		 inc	 eax
  00097	3b c2		 cmp	 eax, edx
  00099	7c f5		 jl	 SHORT $LL11@GetFileNam

; 146  : 		}
; 147  : 		pszName[count] = '\0';

  0009b	8b 45 0c	 mov	 eax, DWORD PTR tv524[ebp]
  0009e	8b 4d 14	 mov	 ecx, DWORD PTR _pszName$[ebp]
  000a1	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN23@GetFileNam:

; 148  : 	}
; 149  : 
; 150  : 	++ext;

  000a5	42		 inc	 edx

; 151  : 	if (len > ext)

  000a6	3b da		 cmp	 ebx, edx
  000a8	7e 1b		 jle	 SHORT $LN24@GetFileNam

; 152  : 	{
; 153  : 		int count = 0;
; 154  : 		for (int i = ext; i < len; ++i)

  000aa	8b 4d 18	 mov	 ecx, DWORD PTR _pszExt$[ebp]
  000ad	8b fb		 mov	 edi, ebx
  000af	2b ca		 sub	 ecx, edx
  000b1	2b fa		 sub	 edi, edx
$LL14@GetFileNam:

; 155  : 		{
; 156  : 			pszExt[count++] = c_szFile[i];

  000b3	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  000b6	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  000b9	42		 inc	 edx
  000ba	3b d3		 cmp	 edx, ebx
  000bc	7c f5		 jl	 SHORT $LL14@GetFileNam

; 157  : 		}
; 158  : 		pszExt[count] = '\0';

  000be	8b 45 18	 mov	 eax, DWORD PTR _pszExt$[ebp]
  000c1	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0
$LN24@GetFileNam:

; 159  : 	}
; 160  : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?GetFileNameParts@@YAXPBDHPAD11@Z ENDP			; GetFileNameParts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstExt$ = 16						; size = 4
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetFileExtension, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   : 	int ext = len;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]

; 79   : 	int pos = len;

  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f2		 mov	 esi, edx
  0000b	57		 push	 edi

; 80   : 	while (pos > 0)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  0000f	85 d2		 test	 edx, edx
  00011	7e 1c		 jle	 SHORT $LN12@GetFileExt
$LL2@GetFileExt:

; 81   : 	{
; 82   : 		--pos;
; 83   : 		char c=c_szFile[pos];

  00013	8a 4c 38 ff	 mov	 cl, BYTE PTR [eax+edi-1]
  00017	48		 dec	 eax

; 84   : 		if (ext==len && c=='.')

  00018	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001b	74 10		 je	 SHORT $LN11@GetFileExt

; 87   : 			break;
; 88   : 		}
; 89   : 
; 90   : 		if (c=='/') break;

  0001d	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00020	74 0d		 je	 SHORT $LN12@GetFileExt

; 91   : 		else if (c=='\\') break;

  00022	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00025	74 08		 je	 SHORT $LN12@GetFileExt

; 80   : 	while (pos > 0)

  00027	85 c0		 test	 eax, eax
  00029	7f e8		 jg	 SHORT $LL2@GetFileExt

; 91   : 		else if (c=='\\') break;

  0002b	eb 02		 jmp	 SHORT $LN12@GetFileExt
$LN11@GetFileExt:

; 85   : 		{
; 86   : 			ext=pos;

  0002d	8b f0		 mov	 esi, eax
$LN12@GetFileExt:

; 92   : 	}
; 93   : 
; 94   : 	++ext;

  0002f	46		 inc	 esi

; 95   : 	if (len>ext)

  00030	3b d6		 cmp	 edx, esi
  00032	7e 0f		 jle	 SHORT $LN8@GetFileExt

; 96   : 		pstExt->append(c_szFile+ext, len-ext);

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00037	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0003a	2b d6		 sub	 edx, esi
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN8@GetFileExt:

; 97   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetFileExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstPath$ = 16						; size = 4
_pstName$ = 20						; size = 4
_pstExt$ = 24						; size = 4
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z PROC ; GetFilePathNameExtension, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	assert(pstPath != NULL);
; 31   : 	assert(pstName != NULL);
; 32   : 	assert(pstExt != NULL);
; 33   : 
; 34   : 	int ext = len;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00006	53		 push	 ebx
  00007	8b d8		 mov	 ebx, eax
  00009	56		 push	 esi

; 35   : 	int pos = len;

  0000a	8b f0		 mov	 esi, eax
  0000c	57		 push	 edi

; 36   : 
; 37   : 	while (pos > 0)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	7e 2e		 jle	 SHORT $LN24@GetFilePat
$LL2@GetFilePat:

; 38   : 	{
; 39   : 		--pos;
; 40   : 		char c = c_szFile[pos];

  00014	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00018	4e		 dec	 esi

; 41   : 
; 42   : 		if (ext == len && c == '.')

  00019	3c 2e		 cmp	 al, 46			; 0000002eH
  0001b	74 0e		 je	 SHORT $LN17@GetFilePat

; 45   : 			break;
; 46   : 		}
; 47   : 
; 48   : 		if (c == '/' || c == '\\')

  0001d	3c 2f		 cmp	 al, 47			; 0000002fH
  0001f	74 0c		 je	 SHORT $LN18@GetFilePat
  00021	3c 5c		 cmp	 al, 92			; 0000005cH
  00023	74 08		 je	 SHORT $LN18@GetFilePat

; 36   : 
; 37   : 	while (pos > 0)

  00025	85 f6		 test	 esi, esi
  00027	7f eb		 jg	 SHORT $LL2@GetFilePat

; 56   : 
; 57   : 		if (c == '/' || c == '\\')

  00029	eb 17		 jmp	 SHORT $LN24@GetFilePat
$LN17@GetFilePat:

; 43   : 		{
; 44   : 			ext = pos;

  0002b	8b de		 mov	 ebx, esi
$LN18@GetFilePat:

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0002d	85 f6		 test	 esi, esi
  0002f	7e 13		 jle	 SHORT $LN25@GetFilePat
$LL4@GetFilePat:

; 53   : 	{
; 54   : 		--pos;
; 55   : 		char c = c_szFile[pos];

  00031	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00035	4e		 dec	 esi

; 56   : 
; 57   : 		if (c == '/' || c == '\\')

  00036	3c 2f		 cmp	 al, 47			; 0000002fH
  00038	74 08		 je	 SHORT $LN24@GetFilePat
  0003a	3c 5c		 cmp	 al, 92			; 0000005cH
  0003c	74 04		 je	 SHORT $LN24@GetFilePat

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0003e	85 f6		 test	 esi, esi
  00040	7f ef		 jg	 SHORT $LL4@GetFilePat
$LN24@GetFilePat:

; 58   : 			break;
; 59   : 	}
; 60   : 
; 61   : 	if (pos)

  00042	85 f6		 test	 esi, esi
$LN25@GetFilePat:
  00044	74 0b		 je	 SHORT $LN11@GetFilePat

; 62   : 	{
; 63   : 		++pos;
; 64   : 		pstPath->append(c_szFile, pos);

  00046	8b 4d 10	 mov	 ecx, DWORD PTR _pstPath$[ebp]
  00049	46		 inc	 esi
  0004a	56		 push	 esi
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN11@GetFilePat:

; 65   : 	}
; 66   : 
; 67   : 	if (ext > pos)

  00051	3b de		 cmp	 ebx, esi
  00053	7e 11		 jle	 SHORT $LN12@GetFilePat

; 68   : 		pstName->append(c_szFile + pos, ext - pos);

  00055	8b 4d 14	 mov	 ecx, DWORD PTR _pstName$[ebp]
  00058	8b c3		 mov	 eax, ebx
  0005a	2b c6		 sub	 eax, esi
  0005c	50		 push	 eax
  0005d	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN12@GetFilePat:

; 69   : 
; 70   : 	++ext;
; 71   : 
; 72   : 	if (len > ext)

  00066	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00069	43		 inc	 ebx
  0006a	3b c3		 cmp	 eax, ebx
  0006c	7e 0f		 jle	 SHORT $LN13@GetFilePat

; 73   : 		pstExt->append(c_szFile + ext, len - ext);

  0006e	8b 4d 18	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00071	2b c3		 sub	 eax, ebx
  00073	50		 push	 eax
  00074	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN13@GetFilePat:

; 74   : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ENDP ; GetFilePathNameExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.cpp
;	COMDAT ?CreateTempFileName@@YAPBDPBD@Z
_TEXT	SEGMENT
_szTempPath$ = -268					; size = 261
__$ArrayPad$ = -4					; size = 4
_c_pszPrefix$ = 8					; size = 4
?CreateTempFileName@@YAPBDPBD@Z PROC			; CreateTempFileName, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _c_pszPrefix$[ebp]

; 15   : 	char szTempPath[MAX_PATH + 1];
; 16   : 	static char szTempName[MAX_PATH + 1];
; 17   : 
; 18   : 	GetTempPath(MAX_PATH, szTempPath);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  0001d	50		 push	 eax
  0001e	68 04 01 00 00	 push	 260			; 00000104H
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8

; 19   : 
; 20   : 	GetTempFileName(szTempPath,									// directory for temp files

  00029	33 c0		 xor	 eax, eax
  0002b	85 f6		 test	 esi, esi
  0002d	68 00 00 00 00	 push	 OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00032	0f 95 c0	 setne	 al
  00035	85 f6		 test	 esi, esi
  00037	50		 push	 eax
  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NGHAOOHL@etb@
  0003d	0f 45 c6	 cmovne	 eax, esi
  00040	50		 push	 eax
  00041	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempFileNameA@16

; 21   : 					c_pszPrefix ? c_pszPrefix : "etb",		    // temp file name prefix
; 22   : 					c_pszPrefix ? true : false,					// create unique name
; 23   : 					szTempName);								// buffer for name
; 24   : 
; 25   : 	return (szTempName);
; 26   : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?CreateTempFileName@@YAPBDPBD@Z ENDP			; CreateTempFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
__Right_size$1$ = -12					; size = 4
__Fancyptr$1 = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$1$ = 12						; size = 4
__Left$ = 12						; size = 4
__New_size$1$ = 16					; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4360 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 4361 :     const auto _Left_size  = _Left.size();
; 4362 :     const auto _Right_size = _Right.size();

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 4363 :     if (_Left.max_size() - _Left_size < _Right_size) {

  0000a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]
  00014	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00017	89 55 f4	 mov	 DWORD PTR __Right_size$1$[ebp], edx
  0001a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0001d	2b c1		 sub	 eax, ecx
  0001f	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  00022	3b c2		 cmp	 eax, edx
  00024	0f 82 ab 00 00
	00		 jb	 $LN41@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0002e	72 02		 jb	 SHORT $LN9@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00030	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN9@operator:

; 2153 :         return _BUF_SIZE <= _Myres;

  00032	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00036	72 02		 jb	 SHORT $LN16@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00038	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN16@operator:

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0003a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2447 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  0003d	03 d1		 add	 edx, ecx

; 2448 :         size_type _New_capacity = _BUF_SIZE - 1;

  0003f	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00044	89 55 10	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 2449 :         auto& _My_data          = _Mypair._Myval2;
; 2450 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00047	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0004a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00051	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2453 :         if (_New_capacity < _New_size) {

  00058	3b d6		 cmp	 edx, esi
  0005a	76 45		 jbe	 SHORT $LN21@operator

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005c	8b f2		 mov	 esi, edx
  0005e	83 ce 0f	 or	 esi, 15			; 0000000fH
  00061	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00067	76 07		 jbe	 SHORT $LN28@operator

; 4203 :             return _Max;

  00069	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0006e	eb 0a		 jmp	 SHORT $LN27@operator
$LN28@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00070	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00075	3b f0		 cmp	 esi, eax
  00077	0f 42 f0	 cmovb	 esi, eax
$LN27@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0007a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00083	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00086	89 45 f8	 mov	 DWORD PTR __Fancyptr$1[ebp], eax

; 2456 :             _Ptr                    = _Unfancy(_Fancyptr);
; 2457 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00089	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$1[ebp]
  0008c	50		 push	 eax
  0008d	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00090	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00095	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0009e	8b 55 10	 mov	 edx, DWORD PTR __New_size$1$[ebp]
$LN21@operator:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000a1	51		 push	 ecx

; 2461 :         _My_data._Myres  = _New_capacity;

  000a2	89 70 14	 mov	 DWORD PTR [eax+20], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000a5	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$1$[ebp]
  000a8	57		 push	 edi
  000a9	56		 push	 esi

; 2460 :         _My_data._Mysize = _New_size;

  000aa	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000ad	e8 00 00 00 00	 call	 _memcpy
  000b2	ff 75 f4	 push	 DWORD PTR __Right_size$1$[ebp]

; 2463 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  000b8	03 ce		 add	 ecx, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000ba	53		 push	 ebx
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _memcpy

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000c1	8b 45 10	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c4	83 c4 18	 add	 esp, 24			; 00000018H

; 4365 :     }
; 4366 : 
; 4367 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right.c_str(), _Right_size};

  000c7	5f		 pop	 edi

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000c8	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 4365 :     }
; 4366 : 
; 4367 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right.c_str(), _Right_size};

  000cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx

; 4368 : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
$LN41@operator:

; 4364 :         _Xlen_string();

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN39@operator:
  000da	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
__Hay_size$1$ = -264					; size = 4
__Matches$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx

; 3952 :     /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00018	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00019	8b fe		 mov	 edi, esi
  0001b	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0001e	66 90		 npad	 2
$LL50@find_first:
  00020	8a 07		 mov	 al, BYTE PTR [edi]
  00022	47		 inc	 edi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL50@find_first
  00027	2b fa		 sub	 edi, edx

; 2144 :         const value_type* _Result = _Bx._Buf;

  00029	8b d9		 mov	 ebx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0002b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0002f	72 02		 jb	 SHORT $LN6@find_first

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00031	8b 19		 mov	 ebx, DWORD PTR [ecx]
$LN6@find_first:

; 3953 :         // look for one of [_Ptr, <null>) at or after _Off
; 3954 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00033	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00036	89 85 f8 fe ff
	ff		 mov	 DWORD PTR __Hay_size$1$[ebp], eax

; 694  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0003c	85 ff		 test	 edi, edi
  0003e	74 55		 je	 SHORT $LN12@find_first
  00040	39 45 0c	 cmp	 DWORD PTR __Off$[ebp], eax
  00043	73 50		 jae	 SHORT $LN12@find_first
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR __Matches$1[ebp]
  00050	6a 00		 push	 0
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memset

; 695  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 696  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00058	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 625  :         for (; _First != _Last; ++_First) {

  0005e	3b f1		 cmp	 esi, ecx
  00060	74 10		 je	 SHORT $LN22@find_first
$LL23@find_first:

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00062	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00065	46		 inc	 esi
  00066	c6 84 05 fc fe
	ff ff 01	 mov	 BYTE PTR __Matches$1[ebp+eax], 1
  0006e	3b f1		 cmp	 esi, ecx
  00070	75 f0		 jne	 SHORT $LL23@find_first
$LN22@find_first:

; 701  :         const auto _End = _Haystack + _Hay_size;

  00072	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR __Hay_size$1$[ebp]

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00078	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0007b	03 d3		 add	 edx, ebx
  0007d	03 cb		 add	 ecx, ebx
  0007f	3b ca		 cmp	 ecx, edx
  00081	73 12		 jae	 SHORT $LN12@find_first
$LL13@find_first:

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00083	0f b6 01	 movzx	 eax, BYTE PTR [ecx]

; 703  :             if (_Matches._Match(*_Match_try)) {

  00086	80 bc 05 fc fe
	ff ff 00	 cmp	 BYTE PTR __Matches$1[ebp+eax], 0
  0008e	75 1b		 jne	 SHORT $LN40@find_first

; 702  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00090	41		 inc	 ecx
  00091	3b ca		 cmp	 ecx, edx
  00093	72 ee		 jb	 SHORT $LL13@find_first
$LN12@find_first:
  00095	5f		 pop	 edi

; 3955 :             _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3956 :     }

  00096	5e		 pop	 esi
  00097	83 c8 ff	 or	 eax, -1
  0009a	5b		 pop	 ebx
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@find_first:

; 704  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000ab	2b cb		 sub	 ecx, ebx

; 3953 :         // look for one of [_Ptr, <null>) at or after _Off
; 3954 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  000ad	8b c1		 mov	 eax, ecx

; 3955 :             _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3956 :     }

  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	33 cd		 xor	 ecx, ebp
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_size$1$ = -16					; size = 4
__New_ptr$1 = -12					; size = 4
tv448 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv452 = 12						; size = 4
tv449 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f0	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 d6 00 00
	00		 jb	 $LN45@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN19@append

; 4203 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN42@append
$LN19@append:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv452[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv452[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN20@append

; 4207 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN42@append
$LN20@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv452[ebp]
  00090	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN42@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv449[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c1	89 4d f8	 mov	 DWORD PTR tv448[ebp], ecx
  000c4	72 3c		 jb	 SHORT $LN13@append

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c6	ff 75 f0	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000e7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f2	83 c4 20	 add	 esp, 32			; 00000020H

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	89 07		 mov	 DWORD PTR [edi], eax

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN13@append:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00102	56		 push	 esi
  00103	57		 push	 edi
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	53		 push	 ebx
  0010b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0010e	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  00111	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00116	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  00119	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011c	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0011f	50		 push	 eax
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00126	83 c4 20	 add	 esp, 32			; 00000020H
  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN45@append:

; 4250 :             _Xlen_string(); // result too long

  00134	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@append:
  00139	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2169 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);
; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 840  :         __crt_va_end(_ArgList);
; 841  :         return _Result;
; 842  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
