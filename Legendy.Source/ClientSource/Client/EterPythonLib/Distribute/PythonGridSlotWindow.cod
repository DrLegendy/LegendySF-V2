; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?OnChangePosition@CWindow@UI@@UAEXXZ		; UI::CWindow::OnChangePosition
PUBLIC	?SetColor@CWindow@UI@@UAEXK@Z			; UI::CWindow::SetColor
PUBLIC	?IsWindow@CWindow@UI@@UAEHXZ			; UI::CWindow::IsWindow
PUBLIC	?Type@CGridSlotWindow@UI@@SAKXZ			; UI::CGridSlotWindow::Type
PUBLIC	??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z	; UI::CGridSlotWindow::CGridSlotWindow
PUBLIC	??1CGridSlotWindow@UI@@UAE@XZ			; UI::CGridSlotWindow::~CGridSlotWindow
PUBLIC	?Destroy@CGridSlotWindow@UI@@QAEXXZ		; UI::CGridSlotWindow::Destroy
PUBLIC	?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ; UI::CGridSlotWindow::ArrangeGridSlot
PUBLIC	?__Initialize@CGridSlotWindow@UI@@IAEXXZ	; UI::CGridSlotWindow::__Initialize
PUBLIC	?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetPickedSlotPointer
PUBLIC	?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
PUBLIC	?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
PUBLIC	?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
PUBLIC	?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
PUBLIC	?OnIsType@CGridSlotWindow@UI@@MAEHK@Z		; UI::CGridSlotWindow::OnIsType
PUBLIC	?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRefreshSlot
PUBLIC	?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRenderPickingSlot
PUBLIC	?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
PUBLIC	??_GCGridSlotWindow@UI@@UAEPAXI@Z		; UI::CGridSlotWindow::`scalar deleting destructor'
PUBLIC	??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>
PUBLIC	??$_Destroy_range@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAXPAPAUSSlot@CSlotWindow@UI@@QAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Destroy_range<std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
PUBLIC	??$_Uninitialized_move@PAPAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0PAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Uninitialized_move<UI::CSlotWindow::SSlot * *,std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`vftable'
PUBLIC	??_C@_0BA@BFEGLPNH@CGridSlotWindow@		; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R1A@?0A@EA@CWindow@UI@@8			; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWindow@UI@@@8				; UI::CWindow `RTTI Type Descriptor'
PUBLIC	??_R3CWindow@UI@@8				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindow@UI@@8				; UI::CWindow::`RTTI Base Class Array'
PUBLIC	??_R4CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGridSlotWindow@UI@@@8			; UI::CGridSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGridSlotWindow@UI@@8		; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSlotWindow@UI@@8			; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSlotWindow@UI@@@8			; UI::CSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?IsAttaching@CWindowManager@UI@@QAEHXZ:PROC	; UI::CWindowManager::IsAttaching
EXTRN	?GetAttachingIndex@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingIndex
EXTRN	?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingSlotNumber
EXTRN	?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z:PROC ; UI::CWindowManager::GetAttachingIconSize
EXTRN	?SetSize@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetSize
EXTRN	?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z:PROC ; UI::CWindow::GetMouseLocalPosition
EXTRN	?OnSetFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnSetFocus
EXTRN	?OnKillFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnKillFocus
EXTRN	?OnMouseDrag@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMouseDrag
EXTRN	?OnMouseOverIn@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverIn
EXTRN	?OnDrop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnDrop
EXTRN	?OnTop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnTop
EXTRN	?OnIMEUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnIMEUpdate
EXTRN	?OnMoveWindow@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMoveWindow
EXTRN	?OnIMETabEvent@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnIMETabEvent
EXTRN	?OnIMEReturnEvent@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEReturnEvent
EXTRN	?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z:PROC	; UI::CWindow::OnIMEKeyDownEvent
EXTRN	?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEChangeCodePage
EXTRN	?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenCandidateListEvent
EXTRN	?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseCandidateListEvent
EXTRN	?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenReadingWndEvent
EXTRN	?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseReadingWndEvent
EXTRN	?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonUp
EXTRN	?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseRightButtonDoubleClick
EXTRN	?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseMiddleButtonDown
EXTRN	?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseMiddleButtonUp
EXTRN	?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z:PROC	; UI::CWindow::OnMouseWheelScroll
EXTRN	?SetScrollable@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::SetScrollable
EXTRN	?OnKeyDown@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyDown
EXTRN	?OnKeyUp@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyUp
EXTRN	?OnPressEscapeKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressEscapeKey
EXTRN	?OnPressExitKey@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnPressExitKey
EXTRN	??0CSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CSlotWindow::CSlotWindow
EXTRN	??1CSlotWindow@UI@@UAE@XZ:PROC			; UI::CSlotWindow::~CSlotWindow
EXTRN	?Destroy@CSlotWindow@UI@@QAEXXZ:PROC		; UI::CSlotWindow::Destroy
EXTRN	?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z:PROC	; UI::CSlotWindow::AppendSlot
EXTRN	?OnUpdate@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnUpdate
EXTRN	?OnRender@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnRender
EXTRN	?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDown
EXTRN	?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonUp
EXTRN	?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseRightButtonDown
EXTRN	?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDoubleClick
EXTRN	?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ:PROC	; UI::CSlotWindow::OnMouseOverOut
EXTRN	?OnMouseOver@CSlotWindow@UI@@MAEXXZ:PROC	; UI::CSlotWindow::OnMouseOver
EXTRN	?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ:PROC ; UI::CSlotWindow::OnRenderSelectedSlot
EXTRN	?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetSlotPointer
EXTRN	?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetPickedSlotPointer
EXTRN	?OnIsType@CSlotWindow@UI@@MAEHK@Z:PROC		; UI::CSlotWindow::OnIsType
EXTRN	??_ECGridSlotWindow@UI@@UAEPAXI@Z:PROC		; UI::CGridSlotWindow::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A DD 01H DUP (?) ; CSingleton<UI::CWindowManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::s_Type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R2CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8 ; UI::CSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CSlotWindow@UI@@8 DD 00H				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSlotWindow@UI@@@8
data$r	SEGMENT
??_R0?AVCSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSlotWindow@UI@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSlotWindow@UI@@8 DD FLAT:??_R0?AVCSlotWindow@UI@@@8 ; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGridSlotWindow@UI@@8 DD FLAT:??_R0?AVCGridSlotWindow@UI@@@8 ; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CGridSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CGridSlotWindow@UI@@8 ; UI::CGridSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CGridSlotWindow@UI@@8 DD 00H			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGridSlotWindow@UI@@@8
data$r	SEGMENT
??_R0?AVCGridSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@ ; UI::CGridSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGridSlotWindow@UI@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGridSlotWindow@UI@@6B@
rdata$r	SEGMENT
??_R4CGridSlotWindow@UI@@6B@ DD 00H			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGridSlotWindow@UI@@@8
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CWindow@UI@@8
rdata$r	SEGMENT
??_R2CWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindow@UI@@8	; UI::CWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWindow@UI@@8
rdata$r	SEGMENT
??_R3CWindow@UI@@8 DD 00H				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindow@UI@@@8
data$r	SEGMENT
??_R0?AVCWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindow@UI@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindow@UI@@8 DD FLAT:??_R0?AVCWindow@UI@@@8 ; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
CONST	SEGMENT
??_C@_0BA@BFEGLPNH@CGridSlotWindow@ DB 'CGridSlotWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGridSlotWindow@UI@@6B@
CONST	SEGMENT
??_7CGridSlotWindow@UI@@6B@ DD FLAT:??_R4CGridSlotWindow@UI@@6B@ ; UI::CGridSlotWindow::`vftable'
	DD	FLAT:??_ECGridSlotWindow@UI@@UAEPAXI@Z
	DD	FLAT:?OnRender@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnUpdate@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnChangePosition@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnSetFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKillFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseDrag@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnMouseOverIn@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnMouseOver@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnDrop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnTop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnIMEUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMoveWindow@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnIMETabEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEReturnEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z
	DD	FLAT:?SetScrollable@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKeyDown@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnKeyUp@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnPressEscapeKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressExitKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?SetColor@CWindow@UI@@UAEXK@Z
	DD	FLAT:?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
	DD	FLAT:?IsWindow@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
	DD	FLAT:?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z$0
__ehfuncinfo$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0
__ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$4
__ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z$0
__ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0
__ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z PROC ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ENDP ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0PAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0PAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z PROC ; std::_Uninitialized_move<UI::CSlotWindow::SSlot * *,std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0PAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ENDP ; std::_Uninitialized_move<UI::CSlotWindow::SSlot * *,std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z PROC ; std::_Zero_range<UI::CSlotWindow::SSlot * *>, COMDAT

; 1814 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1815 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1816 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1817 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1818 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1819 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ENDP ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0000d	56		 push	 esi
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
  00014	83 c4 08	 add	 esp, 8

; 1830 :         return _First + _Count;

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {
; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();
; 1838 :     }
; 1839 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv346 = -4						; size = 4
__Newvec$1$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1183 :         if (_Newsize > max_size()) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00012	0f 87 92 00 00
	00		 ja	 $LN36@Resize_rea

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00018	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00022	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00025	2b 1e		 sub	 ebx, DWORD PTR [esi]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00027	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0002a	8b d1		 mov	 edx, ecx

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002c	c1 fb 02	 sar	 ebx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0002f	d1 ea		 shr	 edx, 1
  00031	2b c2		 sub	 eax, edx
  00033	3b c8		 cmp	 ecx, eax
  00035	77 10		 ja	 SHORT $LN34@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00037	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0003a	3b c7		 cmp	 eax, edi
  0003c	72 09		 jb	 SHORT $LN34@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0003e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00043	77 6a		 ja	 SHORT $LN37@Resize_rea
  00045	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN34@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00047	8b c7		 mov	 eax, edi
$LN18@Resize_rea:
  00049	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0004c	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  0004d	89 45 fc	 mov	 DWORD PTR tv346[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00050	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00055	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00057	89 45 08	 mov	 DWORD PTR __Newvec$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0005a	2b cb		 sub	 ecx, ebx

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  0005c	56		 push	 esi
  0005d	51		 push	 ecx

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0005e	8d 0c 98	 lea	 ecx, DWORD PTR [eax+ebx*4]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<UI::CSlotWindow::SSlot *> >

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Newvec$1$[ebp]
  0006a	56		 push	 esi
  0006b	53		 push	 ebx
  0006c	ff 76 04	 push	 DWORD PTR [esi+4]
  0006f	ff 36		 push	 DWORD PTR [esi]
  00071	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0PAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Uninitialized_move<UI::CSlotWindow::SSlot * *,std::allocator<UI::CSlotWindow::SSlot *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00076	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00078	83 c4 20	 add	 esp, 32			; 00000020H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0007b	85 c9		 test	 ecx, ecx
  0007d	74 12		 je	 SHORT $LN29@Resize_rea

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00082	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00084	83 e0 fc	 and	 eax, -4			; fffffffcH
  00087	50		 push	 eax
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008e	83 c4 08	 add	 esp, 8
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00091	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00094	89 1e		 mov	 DWORD PTR [esi], ebx
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00099	8b 45 fc	 mov	 eax, DWORD PTR tv346[ebp]
  0009c	03 c3		 add	 eax, ebx
  0009e	5f		 pop	 edi
  0009f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx

; 1208 :     }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
$LN36@Resize_rea:

; 1184 :             _Xlength();

  000aa	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
$LN37@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000af	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN33@Resize_rea:
  000b4	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAXPAPAUSSlot@CSlotWindow@UI@@QAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAXPAPAUSSlot@CSlotWindow@UI@@QAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z PROC ; std::_Destroy_range<std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAXPAPAUSSlot@CSlotWindow@UI@@QAPAU123@AAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ PROC ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT
; _this$ = ecx

; 1045 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 328  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1051 :     }

  00036	c3		 ret	 0
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ENDP ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGridSlotWindow@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z PROC			; UI::CGridSlotWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGridSlotWindow@UI@@UAE@XZ ; UI::CGridSlotWindow::~CGridSlotWindow
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 dc 00 00 00	 push	 220			; 000000dcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z ENDP			; UI::CGridSlotWindow::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_SlotList$ = -48					; size = 8
tv849 = -40						; size = 4
tv846 = -36						; size = 4
_Rect$1$sroa$559$1$ = -32				; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_Rect$1$sroa$560$1$ = -20				; size = 4
__Newhead$5 = -20					; size = 4
_pCenterSlot$6 = -20					; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ PROC	; UI::CGridSlotWindow::OnRenderPickingSlot, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 9    : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00035	85 c0		 test	 eax, eax
  00037	0f 84 b7 02 00
	00		 je	 $LN117@OnRenderPi

; 10   : 		return;
; 11   : 
; 12   : 	BYTE byWidth, byHeight;
; 13   : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00043	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00046	50		 push	 eax
  00047	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00050	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00052	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00059	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00060	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  00065	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00067	8d 45 ec	 lea	 eax, DWORD PTR __Newhead$5[ebp]
  0006a	50		 push	 eax
  0006b	56		 push	 esi
  0006c	89 75 ec	 mov	 DWORD PTR __Newhead$5[ebp], esi
  0006f	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00074	8d 45 ec	 lea	 eax, DWORD PTR __Newhead$5[ebp]
  00077	50		 push	 eax
  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>
  00081	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  00084	89 75 d0	 mov	 DWORD PTR _SlotList$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 16   : 	if (GetPickedSlotList(byWidth, byHeight, &SlotList))

  00087	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00091	50		 push	 eax
  00092	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	50		 push	 eax
  00099	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  000a3	85 c0		 test	 eax, eax
  000a5	0f 84 17 02 00
	00		 je	 $LN6@OnRenderPi

; 17   : 	{
; 18   : 		DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  000b1	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 19   : 		DWORD dwItemIndex = UI::CWindowManager::Instance().GetAttachingIndex();

  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  000bc	8b f0		 mov	 esi, eax
  000be	e8 00 00 00 00	 call	 ?GetAttachingIndex@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingIndex

; 20   : 
; 21   : 		if (m_isUseMode)

  000c3	83 bf 98 00 00
	00 00		 cmp	 DWORD PTR [edi+152], 0
  000ca	8b d8		 mov	 ebx, eax
  000cc	0f 84 d1 00 00
	00		 je	 $LN9@OnRenderPi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000d2	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 25   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000d5	8d 45 ec	 lea	 eax, DWORD PTR _pCenterSlot$6[ebp]
  000d8	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000d9	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 23   : 			TSlot * pSlot = *SlotList.begin();

  000db	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 25   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000de	ff 71 08	 push	 DWORD PTR [ecx+8]
  000e1	8b cf		 mov	 ecx, edi
  000e3	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  000e8	85 c0		 test	 eax, eax
  000ea	0f 84 b3 00 00
	00		 je	 $LN9@OnRenderPi

; 26   : 			if (pCenterSlot->isItem)

  000f0	8b 45 ec	 mov	 eax, DWORD PTR _pCenterSlot$6[ebp]
  000f3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000f7	0f 84 a6 00 00
	00		 je	 $LN9@OnRenderPi

; 27   : 			{
; 28   : 				if (m_isUsableItem)

  000fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  00103	83 ec 10	 sub	 esp, 16			; 00000010H
  00106	83 bf 9c 00 00
	00 00		 cmp	 DWORD PTR [edi+156], 0
  0010d	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  00115	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0011d	74 0a		 je	 SHORT $LN10@OnRenderPi

; 29   : 					CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 0.0f, 0.5f);

  0011f	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00127	eb 08		 jmp	 SHORT $LN130@OnRenderPi
$LN10@OnRenderPi:

; 30   : 				else
; 31   : 					CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  00129	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN130@OnRenderPi:

; 32   : 
; 33   : 				CPythonGraphic::Instance().RenderBar2d(	m_rect.left + pCenterSlot->ixPosition,

  00131	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00138	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
  0013d	8b 4d ec	 mov	 ecx, DWORD PTR _pCenterSlot$6[ebp]
  00140	83 ec 14	 sub	 esp, 20			; 00000014H
  00143	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  00146	8b 7f 34	 mov	 edi, DWORD PTR [edi+52]
  00149	0f b6 41 31	 movzx	 eax, BYTE PTR [ecx+49]
  0014d	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00150	8b 59 20	 mov	 ebx, DWORD PTR [ecx+32]
  00153	c1 e0 05	 shl	 eax, 5
  00156	03 c2		 add	 eax, edx
  00158	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00160	03 c6		 add	 eax, esi
  00162	66 0f 6e c0	 movd	 xmm0, eax
  00166	0f b6 41 30	 movzx	 eax, BYTE PTR [ecx+48]
  0016a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0016d	c1 e0 05	 shl	 eax, 5
  00170	03 c7		 add	 eax, edi
  00172	03 c3		 add	 eax, ebx
  00174	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0017a	66 0f 6e c0	 movd	 xmm0, eax
  0017e	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00181	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00184	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0018a	66 0f 6e c0	 movd	 xmm0, eax
  0018e	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00191	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00194	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0019a	66 0f 6e c0	 movd	 xmm0, eax
  0019e	e9 0c 01 00 00	 jmp	 $LN131@OnRenderPi
$LN9@OnRenderPi:

; 34   : 														m_rect.top + pCenterSlot->iyPosition,
; 35   : 														m_rect.left + pCenterSlot->ixPosition + pCenterSlot->byxPlacedItemSize * ITEM_WIDTH,
; 36   : 														m_rect.top + pCenterSlot->iyPosition + pCenterSlot->byyPlacedItemSize * ITEM_HEIGHT);
; 37   : 				return;
; 38   : 			}
; 39   : 		}
; 40   : 
; 41   : 		if (CheckMoving(dwSlotNumber, dwItemIndex, SlotList))

  001a3	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  001a6	8b cf		 mov	 ecx, edi
  001a8	50		 push	 eax
  001a9	53		 push	 ebx
  001aa	56		 push	 esi
  001ab	e8 00 00 00 00	 call	 ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
  001b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  001b6	83 ec 10	 sub	 esp, 16			; 00000010H
  001b9	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  001c1	85 c0		 test	 eax, eax
  001c3	74 12		 je	 SHORT $LN12@OnRenderPi

; 42   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 1.0f, 0.5f);

  001c5	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  001cd	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  001d5	eb 10		 jmp	 SHORT $LN132@OnRenderPi
$LN12@OnRenderPi:

; 43   : 		else
; 44   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  001d7	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  001df	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN132@OnRenderPi:

; 45   : 
; 46   : 		RECT Rect;
; 47   : 		Rect.left = m_rect.right;

  001e7	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  001ee	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001f3	8b 45 d0	 mov	 eax, DWORD PTR _SlotList$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 49   : 		Rect.right = 0;

  001f6	33 f6		 xor	 esi, esi
  001f8	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]

; 50   : 		Rect.bottom = 0;

  001fb	33 d2		 xor	 edx, edx
  001fd	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  00200	89 4d ec	 mov	 DWORD PTR _Rect$1$sroa$560$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00203	8b 00		 mov	 eax, DWORD PTR [eax]

; 199  :         return this->_Ptr == _Right._Ptr;

  00205	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 52   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  00208	74 6f		 je	 SHORT $LN3@OnRenderPi

; 55   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  0020a	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  0020d	89 4d e8	 mov	 DWORD PTR $T4[ebp], ecx

; 56   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  00210	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00213	89 4d e4	 mov	 DWORD PTR $T3[ebp], ecx
  00216	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$560$1$[ebp]
  00219	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@OnRenderPi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 152  :         return this->_Ptr->_Myval;

  00220	89 55 d8	 mov	 DWORD PTR tv849[ebp], edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 54   : 			TSlot * pSlot = *itor;

  00223	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 152  :         return this->_Ptr->_Myval;

  00226	89 75 dc	 mov	 DWORD PTR tv846[ebp], esi
  00229	8b f3		 mov	 esi, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 55   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  0022b	8b 5d e8	 mov	 ebx, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  0022e	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 55   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  00230	8b 7a 20	 mov	 edi, DWORD PTR [edx+32]
  00233	03 df		 add	 ebx, edi

; 56   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  00235	3b cb		 cmp	 ecx, ebx
  00237	0f 4c d9	 cmovl	 ebx, ecx
  0023a	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  0023d	89 5d ec	 mov	 DWORD PTR _Rect$1$sroa$560$1$[ebp], ebx
  00240	8b 5a 24	 mov	 ebx, DWORD PTR [edx+36]
  00243	03 cb		 add	 ecx, ebx

; 57   : 			Rect.right = max(Rect.right, m_rect.left + pSlot->ixPosition + pSlot->byxPlacedItemSize*ITEM_WIDTH);

  00245	3b f1		 cmp	 esi, ecx
  00247	0f 4c ce	 cmovl	 ecx, esi
  0024a	89 4d e0	 mov	 DWORD PTR _Rect$1$sroa$559$1$[ebp], ecx
  0024d	0f b6 4a 30	 movzx	 ecx, BYTE PTR [edx+48]
  00251	c1 e1 05	 shl	 ecx, 5
  00254	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  00257	03 75 e8	 add	 esi, DWORD PTR $T4[ebp]

; 58   : 			Rect.bottom = max(Rect.bottom, m_rect.top + pSlot->iyPosition + pSlot->byxPlacedItemSize*ITEM_HEIGHT);

  0025a	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  0025d	39 75 dc	 cmp	 DWORD PTR tv846[ebp], esi
  00260	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$560$1$[ebp]
  00263	0f 4f 75 dc	 cmovg	 esi, DWORD PTR tv846[ebp]
  00267	03 55 e4	 add	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  0026a	39 55 d8	 cmp	 DWORD PTR tv849[ebp], edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 52   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  0026d	8b 5d e0	 mov	 ebx, DWORD PTR _Rect$1$sroa$559$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  00270	0f 4f 55 d8	 cmovg	 edx, DWORD PTR tv849[ebp]

; 199  :         return this->_Ptr == _Right._Ptr;

  00274	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 52   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  00277	75 a7		 jne	 SHORT $LL4@OnRenderPi
$LN3@OnRenderPi:

; 59   : 		}
; 60   : 
; 61   : 		CPythonGraphic::Instance().RenderBar2d(Rect.left, Rect.top, Rect.right, Rect.bottom);

  00279	83 ec 14	 sub	 esp, 20			; 00000014H
  0027c	66 0f 6e c2	 movd	 xmm0, edx
  00280	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00283	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0028b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00291	66 0f 6e c6	 movd	 xmm0, esi
  00295	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00298	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0029e	66 0f 6e c3	 movd	 xmm0, ebx
  002a2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002a5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002ab	66 0f 6e c1	 movd	 xmm0, ecx
$LN131@OnRenderPi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  002af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  002b5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bd	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN6@OnRenderPi:
  002c2	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]

; 324  :         _Head->_Prev->_Next = nullptr;

  002c5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002c8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  002ce	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002d0	85 c0		 test	 eax, eax
  002d2	74 13		 je	 SHORT $LN107@OnRenderPi
$LL108@OnRenderPi:

; 328  :             _Pnext = _Pnode->_Next;

  002d4	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  002d6	6a 0c		 push	 12			; 0000000cH
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002de	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002e1	8b c6		 mov	 eax, esi
  002e3	85 f6		 test	 esi, esi
  002e5	75 ed		 jne	 SHORT $LL108@OnRenderPi
$LN107@OnRenderPi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  002e7	6a 0c		 push	 12			; 0000000cH
  002e9	ff 75 d0	 push	 DWORD PTR _SlotList$[ebp]
  002ec	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002f1	83 c4 08	 add	 esp, 8
$LN117@OnRenderPi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 63   : }

  002f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002fe	59		 pop	 ecx
  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	5b		 pop	 ebx
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ ENDP	; UI::CGridSlotWindow::OnRenderPickingSlot
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_pSubSlot$1 = -20					; size = 4
_pSlot$2 = -16						; size = 4
_x$2$ = -12						; size = 4
_pSlot$3 = -12						; size = 4
_y$2$ = -8						; size = 4
_this$1$ = -4						; size = 4
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ PROC		; UI::CGridSlotWindow::OnRefreshSlot, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 296  : 	DWORD x, y;
; 297  : 
; 298  : 	for (x = 0; x < m_dwxCount; ++x)

  0000b	33 ff		 xor	 edi, edi
  0000d	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00010	8b 83 c8 00 00
	00		 mov	 eax, DWORD PTR [ebx+200]
  00016	85 c0		 test	 eax, eax
  00018	74 44		 je	 SHORT $LN54@OnRefreshS
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@OnRefreshS:

; 299  : 	for (y = 0; y < m_dwyCount; ++y)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], esi
  00028	76 29		 jbe	 SHORT $LN2@OnRefreshS
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@OnRefreshS:

; 300  : 	{
; 301  : 		TSlot * pSlot;
; 302  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f4	 lea	 eax, DWORD PTR _pSlot$3[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN5@OnRefreshS

; 303  : 			continue;
; 304  : 
; 305  : 		pSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _pSlot$3[ebp]
  00044	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN5@OnRefreshS:

; 299  : 	for (y = 0; y < m_dwyCount; ++y)

  0004a	46		 inc	 esi
  0004b	3b b3 cc 00 00
	00		 cmp	 esi, DWORD PTR [ebx+204]
  00051	72 dd		 jb	 SHORT $LL7@OnRefreshS
$LN2@OnRefreshS:

; 296  : 	DWORD x, y;
; 297  : 
; 298  : 	for (x = 0; x < m_dwxCount; ++x)

  00053	8b 83 c8 00 00
	00		 mov	 eax, DWORD PTR [ebx+200]
  00059	47		 inc	 edi
  0005a	3b f8		 cmp	 edi, eax
  0005c	72 c2		 jb	 SHORT $LL4@OnRefreshS
$LN54@OnRefreshS:

; 306  : 	}
; 307  : 
; 308  : 	for (x = 0; x < m_dwxCount; ++x)

  0005e	33 f6		 xor	 esi, esi
  00060	89 75 f4	 mov	 DWORD PTR _x$2$[ebp], esi
  00063	85 c0		 test	 eax, eax
  00065	0f 84 ab 00 00
	00		 je	 $LN9@OnRefreshS
  0006b	0f 1f 44 00 00	 npad	 5
$LL10@OnRefreshS:

; 309  : 	for (y = 0; y < m_dwyCount; ++y)

  00070	33 c0		 xor	 eax, eax
  00072	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  00075	39 83 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], eax
  0007b	0f 86 85 00 00
	00		 jbe	 $LN8@OnRefreshS
$LL13@OnRefreshS:

; 310  : 	{
; 311  : 		TSlot * pSlot;
; 312  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00081	8d 4d f0	 lea	 ecx, DWORD PTR _pSlot$2[ebp]
  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	56		 push	 esi
  00087	8b cb		 mov	 ecx, ebx
  00089	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0008e	85 c0		 test	 eax, eax
  00090	74 61		 je	 SHORT $LN11@OnRefreshS

; 313  : 			continue;
; 314  : 
; 315  : 		if (pSlot->isItem)

  00092	8b 7d f0	 mov	 edi, DWORD PTR _pSlot$2[ebp]
  00095	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00099	0f 84 7e 00 00
	00		 je	 $LN22@OnRefreshS

; 316  : 		{
; 317  : 			for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  0009f	33 db		 xor	 ebx, ebx
  000a1	38 5f 30	 cmp	 BYTE PTR [edi+48], bl
  000a4	76 4a		 jbe	 SHORT $LN57@OnRefreshS
$LL16@OnRefreshS:

; 318  : 			for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000a6	33 f6		 xor	 esi, esi
  000a8	80 7f 31 00	 cmp	 BYTE PTR [edi+49], 0
  000ac	76 36		 jbe	 SHORT $LN14@OnRefreshS
  000ae	66 90		 npad	 2
$LL19@OnRefreshS:

; 319  : 			{
; 320  : 				TSlot * pSubSlot;
; 321  : 				if (!GetGridSlotPointer(x+xSub, y+ySub, &pSubSlot))

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b3	8d 45 ec	 lea	 eax, DWORD PTR _pSubSlot$1[ebp]
  000b6	50		 push	 eax
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000ba	03 c6		 add	 eax, esi
  000bc	50		 push	 eax
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _x$2$[ebp]
  000c0	03 c3		 add	 eax, ebx
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  000c8	85 c0		 test	 eax, eax
  000ca	74 0f		 je	 SHORT $LN17@OnRefreshS

; 322  : 					continue;
; 323  : 
; 324  : 				pSubSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _pSubSlot$1[ebp]
  000cf	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 325  : 				pSubSlot->dwItemIndex = pSlot->dwItemIndex;

  000d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN17@OnRefreshS:

; 318  : 			for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000db	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  000df	46		 inc	 esi
  000e0	3b f0		 cmp	 esi, eax
  000e2	72 cc		 jb	 SHORT $LL19@OnRefreshS
$LN14@OnRefreshS:

; 316  : 		{
; 317  : 			for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  000e4	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  000e8	43		 inc	 ebx
  000e9	3b d8		 cmp	 ebx, eax
  000eb	72 b9		 jb	 SHORT $LL16@OnRefreshS

; 326  : 			}
; 327  : 		}

  000ed	8b 75 f4	 mov	 esi, DWORD PTR _x$2$[ebp]
$LN57@OnRefreshS:

; 309  : 	for (y = 0; y < m_dwyCount; ++y)

  000f0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN11@OnRefreshS:
  000f3	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000f6	40		 inc	 eax
  000f7	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  000fa	3b 83 cc 00 00
	00		 cmp	 eax, DWORD PTR [ebx+204]
  00100	0f 82 7b ff ff
	ff		 jb	 $LL13@OnRefreshS
$LN8@OnRefreshS:

; 306  : 	}
; 307  : 
; 308  : 	for (x = 0; x < m_dwxCount; ++x)

  00106	46		 inc	 esi
  00107	89 75 f4	 mov	 DWORD PTR _x$2$[ebp], esi
  0010a	3b b3 c8 00 00
	00		 cmp	 esi, DWORD PTR [ebx+200]
  00110	0f 82 5a ff ff
	ff		 jb	 $LL10@OnRefreshS
$LN9@OnRefreshS:
  00116	5f		 pop	 edi

; 331  : 		}
; 332  : 	}
; 333  : }

  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN22@OnRefreshS:

; 328  : 		else
; 329  : 		{
; 330  : 			pSlot->dwItemIndex = 0;

  0011d	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00124	eb cd		 jmp	 SHORT $LN11@OnRefreshS
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ ENDP		; UI::CGridSlotWindow::OnRefreshSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z PROC		; UI::CGridSlotWindow::OnIsType, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 380  : 	if (CGridSlotWindow::Type() == dwType)

  00006	e8 00 00 00 00	 call	 ?Type@CGridSlotWindow@UI@@SAKXZ ; UI::CGridSlotWindow::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwType$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 0a		 jne	 SHORT $LN2@OnIsType

; 381  : 		return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1
  00017	5e		 pop	 esi

; 384  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@OnIsType:

; 382  : 
; 383  : 	return CSlotWindow::OnIsType(dwType);

  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?OnIsType@CSlotWindow@UI@@MAEHK@Z ; UI::CSlotWindow::OnIsType
  00024	5e		 pop	 esi

; 384  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z ENDP		; UI::CGridSlotWindow::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
_dwSlotNumber$ = 8					; size = 4
_dwItemIndex$ = 12					; size = 4
_c_rSlotList$ = 16					; size = 4
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::CheckMoving, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 337  : 	if (m_dwSlotStyle != SLOT_STYLE_PICK_UP)

  00003	83 b9 80 00 00
	00 01		 cmp	 DWORD PTR [ecx+128], 1
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	75 32		 jne	 SHORT $LN37@CheckMovin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1096 :         return const_iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _c_rSlotList$[ebp]
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 340  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  00018	74 27		 je	 SHORT $LN37@CheckMovin
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _dwItemIndex$[ebp]
  0001d	0f 1f 00	 npad	 3
$LL4@CheckMovin:

; 341  : 	{
; 342  : 		TSlot * pSlot = *itor;

  00020	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 343  : 
; 344  : 		if (dwSlotNumber != pSlot->dwCenterSlotNumber)

  00023	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00026	39 75 08	 cmp	 DWORD PTR _dwSlotNumber$[ebp], esi
  00029	74 10		 je	 SHORT $LN2@CheckMovin

; 345  : 		{
; 346  : 			if (0 != pSlot->dwItemIndex || pSlot->dwCenterSlotNumber != pSlot->dwSlotNumber)

  0002b	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
  0002e	85 ff		 test	 edi, edi
  00030	75 05		 jne	 SHORT $LN35@CheckMovin
  00032	3b 72 04	 cmp	 esi, DWORD PTR [edx+4]
  00035	74 04		 je	 SHORT $LN2@CheckMovin
$LN35@CheckMovin:

; 347  : 			{
; 348  : 				if (dwItemIndex != pSlot->dwItemIndex)

  00037	3b df		 cmp	 ebx, edi
  00039	75 12		 jne	 SHORT $LN32@CheckMovin
$LN2@CheckMovin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]

; 199  :         return this->_Ptr == _Right._Ptr;

  0003d	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 340  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  0003f	75 df		 jne	 SHORT $LL4@CheckMovin
$LN37@CheckMovin:
  00041	5f		 pop	 edi

; 349  : 					return false;
; 350  : 			}
; 351  : 		}
; 352  : 	}
; 353  : 
; 354  : 	return true;
; 355  : }

  00042	5e		 pop	 esi
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN32@CheckMovin:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::CheckMoving
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z
_TEXT	SEGMENT
_pSlot$1 = -8						; size = 4
_x$1$ = -4						; size = 4
_ixLocal$ = 8						; size = 4
_iyLocal$ = 12						; size = 4
_pix$ = 16						; size = 4
_piy$ = 20						; size = 4
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z PROC ; UI::CGridSlotWindow::GetPickedGridSlotPosition, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi

; 246  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  0000b	33 ff		 xor	 edi, edi
  0000d	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00010	39 bb c8 00 00
	00		 cmp	 DWORD PTR [ebx+200], edi
  00016	76 68		 jbe	 SHORT $LN26@GetPickedG
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetPickedG:

; 247  : 	for (DWORD y = 0; y < m_dwyCount; ++y)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], esi
  00028	76 4a		 jbe	 SHORT $LN2@GetPickedG
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@GetPickedG:

; 248  : 	{
; 249  : 		TSlot * pSlot;
; 250  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _pSlot$1[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 2a		 je	 SHORT $LN5@GetPickedG

; 251  : 			continue;
; 252  : 
; 253  : 		if (ixLocal >= pSlot->ixPosition)

  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pSlot$1[ebp]
  00044	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00047	39 55 08	 cmp	 DWORD PTR _ixLocal$[ebp], edx
  0004a	7c 1f		 jl	 SHORT $LN5@GetPickedG

; 254  : 		if (iyLocal >= pSlot->iyPosition)

  0004c	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0004f	39 7d 0c	 cmp	 DWORD PTR _iyLocal$[ebp], edi
  00052	7c 14		 jl	 SHORT $LN29@GetPickedG

; 255  : 		if (ixLocal <= pSlot->ixPosition + pSlot->ixCellSize)

  00054	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00057	03 c2		 add	 eax, edx
  00059	39 45 08	 cmp	 DWORD PTR _ixLocal$[ebp], eax
  0005c	7f 0a		 jg	 SHORT $LN29@GetPickedG

; 256  : 		if (iyLocal <= pSlot->iyPosition + pSlot->iyCellSize)

  0005e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00061	03 c7		 add	 eax, edi
  00063	39 45 0c	 cmp	 DWORD PTR _iyLocal$[ebp], eax
  00066	7e 23		 jle	 SHORT $LN16@GetPickedG
$LN29@GetPickedG:

; 247  : 	for (DWORD y = 0; y < m_dwyCount; ++y)

  00068	8b 7d fc	 mov	 edi, DWORD PTR _x$1$[ebp]
$LN5@GetPickedG:
  0006b	46		 inc	 esi
  0006c	3b b3 cc 00 00
	00		 cmp	 esi, DWORD PTR [ebx+204]
  00072	72 bc		 jb	 SHORT $LL7@GetPickedG
$LN2@GetPickedG:

; 246  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  00074	47		 inc	 edi
  00075	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00078	3b bb c8 00 00
	00		 cmp	 edi, DWORD PTR [ebx+200]
  0007e	72 a0		 jb	 SHORT $LL4@GetPickedG
$LN26@GetPickedG:
  00080	5f		 pop	 edi

; 261  : 		}
; 262  : 	}
; 263  : 
; 264  : 	return FALSE;
; 265  : }

  00081	5e		 pop	 esi
  00082	33 c0		 xor	 eax, eax
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
$LN16@GetPickedG:

; 257  : 		{
; 258  : 			*pix = x;

  0008b	8b 45 10	 mov	 eax, DWORD PTR _pix$[ebp]
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _x$1$[ebp]
  00091	5f		 pop	 edi
  00092	89 08		 mov	 DWORD PTR [eax], ecx

; 259  : 			*piy = y;

  00094	8b 45 14	 mov	 eax, DWORD PTR _piy$[ebp]
  00097	89 30		 mov	 DWORD PTR [eax], esi

; 260  : 			return TRUE;

  00099	b8 01 00 00 00	 mov	 eax, 1

; 261  : 		}
; 262  : 	}
; 263  : 
; 264  : 	return FALSE;
; 265  : }

  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 10 00	 ret	 16			; 00000010H
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ENDP ; UI::CGridSlotWindow::GetPickedGridSlotPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
_ppSlot$ = 16						; size = 4
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetGridSlotPointer, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	DWORD dwSlotIndex = ix + iy*m_dwxCount;

  00003	8b 91 c8 00 00
	00		 mov	 edx, DWORD PTR [ecx+200]
  00009	0f af 55 0c	 imul	 edx, DWORD PTR _iy$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 81 d4 00 00
	00		 mov	 eax, DWORD PTR [ecx+212]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 234  : {

  00013	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	8b b1 d0 00 00
	00		 mov	 esi, DWORD PTR [ecx+208]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 235  : 	DWORD dwSlotIndex = ix + iy*m_dwxCount;

  0001f	03 55 08	 add	 edx, DWORD PTR _ix$[ebp]

; 236  : 	if (dwSlotIndex >= m_SlotVector.size())

  00022	3b d0		 cmp	 edx, eax
  00024	72 07		 jb	 SHORT $LN2@GetGridSlo

; 237  : 		return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 242  : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetGridSlo:

; 238  : 
; 239  : 	*ppSlot = m_SlotVector[dwSlotIndex];

  0002d	8b 45 10	 mov	 eax, DWORD PTR _ppSlot$[ebp]
  00030	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00033	5e		 pop	 esi
  00034	89 08		 mov	 DWORD PTR [eax], ecx

; 240  : 
; 241  : 	return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1

; 242  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetGridSlotPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -56						; size = 8
__Op$3 = -56						; size = 8
__Where$1$ = -48					; size = 4
__Where$1$ = -48					; size = 4
_pMainSlot$1$ = -44					; size = 4
__Insert_after$4 = -44					; size = 4
__Insert_before$5 = -40					; size = 4
_pSlot$6 = -36						; size = 4
_iyEnd$2$ = -32						; size = 4
tv1362 = -32						; size = 4
_lx$ = -28						; size = 4
_ly$ = -24						; size = 4
_j$1$ = -20						; size = 4
_iy$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pSlot$1$ = 8						; size = 4
_ixEnd$1$ = 8						; size = 4
tv1360 = 8						; size = 4
__Insert_before$7 = 8					; size = 4
_iWidth$ = 8						; size = 4
_i$1$ = 12						; size = 4
__Insert_after$8 = 12					; size = 4
_iHeight$ = 12						; size = 4
__Result$1$ = 16					; size = 4
_iyEnd$1$ = 16						; size = 4
_iyStart$2$ = 16					; size = 4
_ix$ = 16						; size = 4
_pSlotPointerList$ = 16					; size = 4
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotList, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 133  : 	long lx, ly;
; 134  : 	GetMouseLocalPosition(lx, ly);

  0002d	8d 45 e8	 lea	 eax, DWORD PTR _ly$[ebp]
  00030	50		 push	 eax
  00031	8d 45 e4	 lea	 eax, DWORD PTR _lx$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z ; UI::CWindow::GetMouseLocalPosition

; 135  : 
; 136  : 	if (lx < 0)

  0003a	8b 4d e4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 88 0e 03 00
	00		 js	 $LN29@GetPickedS

; 137  : 		return FALSE;
; 138  : 	if (ly < 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00048	85 c0		 test	 eax, eax
  0004a	0f 88 03 03 00
	00		 js	 $LN29@GetPickedS

; 139  : 		return FALSE;
; 140  : 	if (lx >= GetWidth())

  00050	3b 4e 2c	 cmp	 ecx, DWORD PTR [esi+44]
  00053	0f 8d fa 02 00
	00		 jge	 $LN29@GetPickedS

; 141  : 		return FALSE;
; 142  : 	if (ly >= GetHeight())

  00059	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  0005c	0f 8d f1 02 00
	00		 jge	 $LN29@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00062	8b 7d 10	 mov	 edi, DWORD PTR _pSlotPointerList$[ebp]
  00065	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  00067	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00070	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00072	85 c0		 test	 eax, eax
  00074	74 16		 je	 SHORT $LN35@GetPickedS
$LL36@GetPickedS:

; 328  :             _Pnext = _Pnode->_Next;

  00076	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00078	6a 0c		 push	 12			; 0000000cH
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00080	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00083	8b c6		 mov	 eax, esi
  00085	85 f6		 test	 esi, esi
  00087	75 ed		 jne	 SHORT $LL36@GetPickedS
  00089	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN35@GetPickedS:

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0008c	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 148  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  0008e	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00090	89 00		 mov	 DWORD PTR [eax], eax

; 1431 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00092	8b 07		 mov	 eax, DWORD PTR [edi]
  00094	89 40 04	 mov	 DWORD PTR [eax+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 148  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  00097	8d 45 ec	 lea	 eax, DWORD PTR _iy$[ebp]
  0009a	50		 push	 eax
  0009b	8d 45 10	 lea	 eax, DWORD PTR _ix$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1432 :         _My_data._Mysize        = 0;

  0009e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 148  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  000a5	50		 push	 eax
  000a6	ff 75 e8	 push	 DWORD PTR _ly$[ebp]
  000a9	ff 75 e4	 push	 DWORD PTR _lx$[ebp]
  000ac	e8 00 00 00 00	 call	 ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
  000b1	85 c0		 test	 eax, eax
  000b3	0f 84 9a 02 00
	00		 je	 $LN29@GetPickedS

; 149  : 	{
; 150  : 		int ixHalfStep = (iWidth / 2);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _iWidth$[ebp]
  000bc	99		 cdq
  000bd	2b c2		 sub	 eax, edx
  000bf	d1 f8		 sar	 eax, 1

; 151  : 		//int iyHalfStep = (iHeight / 2);
; 152  : 
; 153  : 		int ixStart = int(ix) - int(ixHalfStep - (ixHalfStep % 2));

  000c1	8b d0		 mov	 edx, eax
  000c3	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  000c9	79 05		 jns	 SHORT $LN238@GetPickedS
  000cb	4a		 dec	 edx
  000cc	83 ca fe	 or	 edx, -2			; fffffffeH
  000cf	42		 inc	 edx
$LN238@GetPickedS:
  000d0	8b 4d 10	 mov	 ecx, DWORD PTR _ix$[ebp]
  000d3	2b d0		 sub	 edx, eax
  000d5	03 c1		 add	 eax, ecx
  000d7	89 45 08	 mov	 DWORD PTR tv1360[ebp], eax

; 154  : 		int ixEnd = int(ix) + int(ixHalfStep);
; 155  : 
; 156  : 		int iyStart = 0, iyEnd = 0;
; 157  : 
; 158  : 		if (1 == iHeight)

  000da	8b 45 0c	 mov	 eax, DWORD PTR _iHeight$[ebp]
  000dd	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]
  000e0	33 c9		 xor	 ecx, ecx
  000e2	33 d2		 xor	 edx, edx
  000e4	89 5d e0	 mov	 DWORD PTR tv1362[ebp], ebx
  000e7	89 4d 10	 mov	 DWORD PTR _iyEnd$1$[ebp], ecx
  000ea	83 f8 01	 cmp	 eax, 1
  000ed	75 07		 jne	 SHORT $LN16@GetPickedS

; 159  : 		{
; 160  : 			iyStart = iy;

  000ef	8b 55 ec	 mov	 edx, DWORD PTR _iy$[ebp]

; 161  : 			iyEnd = iy;

  000f2	8b ca		 mov	 ecx, edx

; 162  : 		}

  000f4	eb 1b		 jmp	 SHORT $LN240@GetPickedS
$LN16@GetPickedS:

; 163  : 		else if (2 == iHeight)

  000f6	83 f8 02	 cmp	 eax, 2
  000f9	75 08		 jne	 SHORT $LN18@GetPickedS

; 164  : 		{
; 165  : 			iyStart = iy;

  000fb	8b 55 ec	 mov	 edx, DWORD PTR _iy$[ebp]
  000fe	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]

; 166  : 			iyEnd = iy + 1;
; 167  : 		}

  00101	eb 0e		 jmp	 SHORT $LN240@GetPickedS
$LN18@GetPickedS:

; 168  : 		else if (3 == iHeight)

  00103	83 f8 03	 cmp	 eax, 3
  00106	75 0c		 jne	 SHORT $LN20@GetPickedS

; 169  : 		{
; 170  : 			iyStart = iy - 1;

  00108	8b 45 ec	 mov	 eax, DWORD PTR _iy$[ebp]
  0010b	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 171  : 			iyEnd = iy + 1;

  0010e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LN240@GetPickedS:

; 172  : 		}
; 173  : 
; 174  : 		if (ixStart < 0)
; 175  : 		{
; 176  : 			ixEnd += -ixStart;
; 177  : 			ixStart = 0;
; 178  : 		}
; 179  : 
; 180  : 		if (iyStart < 0)

  00111	89 4d 10	 mov	 DWORD PTR _iyEnd$1$[ebp], ecx
$LN20@GetPickedS:
  00114	8b 45 08	 mov	 eax, DWORD PTR tv1360[ebp]
  00117	2b c3		 sub	 eax, ebx
  00119	85 db		 test	 ebx, ebx
  0011b	0f 49 45 08	 cmovns	 eax, DWORD PTR tv1360[ebp]
  0011f	33 db		 xor	 ebx, ebx
  00121	89 45 08	 mov	 DWORD PTR _ixEnd$1$[ebp], eax
  00124	8b 45 e0	 mov	 eax, DWORD PTR tv1362[ebp]
  00127	85 c0		 test	 eax, eax
  00129	0f 49 d8	 cmovns	 ebx, eax

; 181  : 		{
; 182  : 			iyEnd += -iyStart;
; 183  : 			iyStart = 0;
; 184  : 		}
; 185  : 
; 186  : 		if (DWORD(ixEnd) >= m_dwxCount)

  0012c	2b ca		 sub	 ecx, edx
  0012e	85 d2		 test	 edx, edx
  00130	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
  00133	0f 49 4d 10	 cmovns	 ecx, DWORD PTR _iyEnd$1$[ebp]
  00137	33 c0		 xor	 eax, eax
  00139	85 d2		 test	 edx, edx
  0013b	89 4d e0	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
  0013e	0f 49 c2	 cmovns	 eax, edx
  00141	8b 55 08	 mov	 edx, DWORD PTR _ixEnd$1$[ebp]
  00144	89 45 10	 mov	 DWORD PTR _iyStart$2$[ebp], eax
  00147	3b 96 c8 00 00
	00		 cmp	 edx, DWORD PTR [esi+200]
  0014d	72 13		 jb	 SHORT $LN23@GetPickedS

; 187  : 		{
; 188  : 			int ixTemporary = DWORD(ixEnd) - m_dwxCount + 1;

  0014f	8b c2		 mov	 eax, edx
  00151	2b 86 c8 00 00
	00		 sub	 eax, DWORD PTR [esi+200]
  00157	40		 inc	 eax

; 189  : 			ixStart -= ixTemporary;

  00158	2b d8		 sub	 ebx, eax

; 190  : 			ixEnd -= ixTemporary;

  0015a	2b d0		 sub	 edx, eax
  0015c	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
  0015f	89 55 08	 mov	 DWORD PTR _ixEnd$1$[ebp], edx
$LN23@GetPickedS:

; 191  : 		}
; 192  : 
; 193  : 		if (DWORD(iyEnd) >= m_dwyCount)

  00162	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00168	3b ca		 cmp	 ecx, edx
  0016a	72 14		 jb	 SHORT $LN236@GetPickedS

; 194  : 		{
; 195  : 			int iyTemporary = DWORD(iyEnd) - m_dwyCount + 1;

  0016c	8b c1		 mov	 eax, ecx
  0016e	2b c2		 sub	 eax, edx

; 196  : 			iyStart -= iyTemporary;

  00170	8b 55 10	 mov	 edx, DWORD PTR _iyStart$2$[ebp]
  00173	40		 inc	 eax
  00174	2b d0		 sub	 edx, eax

; 197  : 			iyEnd -= iyTemporary;

  00176	2b c8		 sub	 ecx, eax
  00178	89 55 10	 mov	 DWORD PTR _iyStart$2$[ebp], edx
  0017b	89 4d e0	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
  0017e	eb 03		 jmp	 SHORT $LN24@GetPickedS
$LN236@GetPickedS:

; 191  : 		}
; 192  : 
; 193  : 		if (DWORD(iyEnd) >= m_dwyCount)

  00180	8b 55 10	 mov	 edx, DWORD PTR _iyStart$2$[ebp]
$LN24@GetPickedS:

; 198  : 		}
; 199  : 
; 200  : 		for (int i = ixStart; i <= ixEnd; ++i)

  00183	3b 5d 08	 cmp	 ebx, DWORD PTR _ixEnd$1$[ebp]
  00186	0f 8f bb 00 00
	00		 jg	 $LN3@GetPickedS
  0018c	0f 1f 40 00	 npad	 4
$LL4@GetPickedS:

; 201  : 		for (int j = iyStart; j <= iyEnd; ++j)

  00190	8b c2		 mov	 eax, edx
  00192	89 45 ec	 mov	 DWORD PTR _j$1$[ebp], eax
  00195	3b d1		 cmp	 edx, ecx
  00197	0f 8f 9d 00 00
	00		 jg	 $LN2@GetPickedS
  0019d	0f 1f 00	 npad	 3
$LL7@GetPickedS:

; 202  : 		{
; 203  : 			TSlot * pSlot;
; 204  : 			if (GetGridSlotPointer(DWORD(i), DWORD(j), &pSlot))

  001a0	8d 4d dc	 lea	 ecx, DWORD PTR _pSlot$6[ebp]
  001a3	51		 push	 ecx
  001a4	50		 push	 eax
  001a5	53		 push	 ebx
  001a6	8b ce		 mov	 ecx, esi
  001a8	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  001ad	85 c0		 test	 eax, eax
  001af	74 74		 je	 SHORT $LN5@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  001b1	81 7f 04 55 55
	55 15		 cmp	 DWORD PTR [edi+4], 357913941 ; 15555555H

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  001b8	8b 37		 mov	 esi, DWORD PTR [edi]
  001ba	89 75 d0	 mov	 DWORD PTR __Where$1$[ebp], esi

; 1014 :         if (_Mysize == max_size()) {

  001bd	0f 84 a6 01 00
	00		 je	 $LN218@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001c3	89 7d c8	 mov	 DWORD PTR __Op$3[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001c6	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001cf	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001d6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001db	8b 4d dc	 mov	 ecx, DWORD PTR _pSlot$6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  001de	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001e0	8d 45 d8	 lea	 eax, DWORD PTR __Insert_before$5[ebp]

; 1020 :         return _Op._Transfer_before(_Where);

  001e3	89 75 d8	 mov	 DWORD PTR __Insert_before$5[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001e6	50		 push	 eax
  001e7	53		 push	 ebx

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001e8	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1019 :         ++_Mysize;

  001eb	ff 47 04	 inc	 DWORD PTR [edi+4]

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  001ee	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 588  :     }

  001f1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  001f8	89 75 d4	 mov	 DWORD PTR __Insert_after$4[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001fb	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00200	8d 45 d4	 lea	 eax, DWORD PTR __Insert_after$4[ebp]
  00203	50		 push	 eax
  00204	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>

; 605  :         _Insert_before->_Prev = _Result;

  0020d	8b 45 d0	 mov	 eax, DWORD PTR __Where$1$[ebp]
  00210	83 c4 14	 add	 esp, 20			; 00000014H
  00213	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0
  0021a	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 606  :         _Insert_after->_Next  = _Result;

  0021d	89 1e		 mov	 DWORD PTR [esi], ebx
  0021f	8b 5d 0c	 mov	 ebx, DWORD PTR _i$1$[ebp]
  00222	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN5@GetPickedS:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 201  : 		for (int j = iyStart; j <= iyEnd; ++j)

  00225	8b 45 ec	 mov	 eax, DWORD PTR _j$1$[ebp]
  00228	8b 4d e0	 mov	 ecx, DWORD PTR _iyEnd$2$[ebp]
  0022b	40		 inc	 eax
  0022c	89 45 ec	 mov	 DWORD PTR _j$1$[ebp], eax
  0022f	3b c1		 cmp	 eax, ecx
  00231	0f 8e 69 ff ff
	ff		 jle	 $LL7@GetPickedS
  00237	8b 55 10	 mov	 edx, DWORD PTR _iyStart$2$[ebp]
$LN2@GetPickedS:

; 198  : 		}
; 199  : 
; 200  : 		for (int i = ixStart; i <= ixEnd; ++i)

  0023a	43		 inc	 ebx
  0023b	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
  0023e	3b 5d 08	 cmp	 ebx, DWORD PTR _ixEnd$1$[ebp]
  00241	0f 8e 49 ff ff
	ff		 jle	 $LL4@GetPickedS
$LN3@GetPickedS:

; 205  : 			{
; 206  : 				pSlotPointerList->push_back(pSlot);
; 207  : 			}
; 208  : 		}
; 209  : 
; 210  : 		if (m_isUseMode && 1 == pSlotPointerList->size())

  00247	83 be 98 00 00
	00 00		 cmp	 DWORD PTR [esi+152], 0
  0024e	0f 84 e0 00 00
	00		 je	 $LN234@GetPickedS
  00254	83 7f 04 01	 cmp	 DWORD PTR [edi+4], 1
  00258	0f 85 d6 00 00
	00		 jne	 $LN234@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0025e	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00260	8b b6 d0 00 00
	00		 mov	 esi, DWORD PTR [esi+208]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00266	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 212  : 			TSlot * pMainSlot = *pSlotPointerList->begin();

  00268	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0026b	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 212  : 			TSlot * pMainSlot = *pSlotPointerList->begin();

  0026e	89 55 d4	 mov	 DWORD PTR _pMainSlot$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00271	3b b0 d4 00 00
	00		 cmp	 esi, DWORD PTR [eax+212]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 215  : 			for (; itor != m_SlotVector.end(); ++itor)

  00277	0f 84 b7 00 00
	00		 je	 $LN234@GetPickedS
  0027d	0f 1f 00	 npad	 3
$LL10@GetPickedS:

; 216  : 			{
; 217  : 				TSlot * pSlot = *itor;

  00280	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00282	89 4d 08	 mov	 DWORD PTR _pSlot$1$[ebp], ecx

; 218  : 				if (pSlot->dwCenterSlotNumber == pMainSlot->dwCenterSlotNumber)

  00285	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00288	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0028b	0f 85 91 00 00
	00		 jne	 $LN8@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00291	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00293	89 5d d0	 mov	 DWORD PTR __Where$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5167 :     return _Find_unchecked1(_First, _Last, _Val, _Memchr_opt{});

  00296	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 74   :         return _Ptr == _Right._Ptr;

  00298	3b d8		 cmp	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5132 :     for (; _First != _Last; ++_First) {

  0029a	74 13		 je	 SHORT $LN242@GetPickedS
  0029c	0f 1f 40 00	 npad	 4
$LL150@GetPickedS:

; 5133 :         if (*_First == _Val) {

  002a0	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  002a3	74 06		 je	 SHORT $LN217@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 52   :         _Ptr = _Ptr->_Next;

  002a5	8b 00		 mov	 eax, DWORD PTR [eax]

; 74   :         return _Ptr == _Right._Ptr;

  002a7	3b c3		 cmp	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5132 :     for (; _First != _Last; ++_First) {

  002a9	75 f5		 jne	 SHORT $LL150@GetPickedS
$LN217@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  002ab	3b d8		 cmp	 ebx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 219  : 				if (pSlotPointerList->end() == std::find(pSlotPointerList->begin(), pSlotPointerList->end(), pSlot))

  002ad	75 73		 jne	 SHORT $LN8@GetPickedS
$LN242@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  002af	81 7f 04 55 55
	55 15		 cmp	 DWORD PTR [edi+4], 357913941 ; 15555555H
  002b6	0f 84 ad 00 00
	00		 je	 $LN218@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  002bc	89 7d c8	 mov	 DWORD PTR __Op$2[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002bf	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  002c1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  002c8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002cf	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  002d4	8b 4d 08	 mov	 ecx, DWORD PTR _pSlot$1$[ebp]

; 1020 :         return _Op._Transfer_before(_Where);

  002d7	89 5d 08	 mov	 DWORD PTR __Insert_before$7[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  002da	89 45 10	 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  002dd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  002e0	8d 4d 08	 lea	 ecx, DWORD PTR __Insert_before$7[ebp]

; 1019 :         ++_Mysize;

  002e3	ff 47 04	 inc	 DWORD PTR [edi+4]

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  002e6	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  002e9	51		 push	 ecx
  002ea	50		 push	 eax

; 588  :     }

  002eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  002f2	89 5d 0c	 mov	 DWORD PTR __Insert_after$8[ebp], ebx

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  002f5	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  002fa	8d 45 0c	 lea	 eax, DWORD PTR __Insert_after$8[ebp]
  002fd	50		 push	 eax
  002fe	8b 45 10	 mov	 eax, DWORD PTR __Result$1$[ebp]
  00301	83 c0 04	 add	 eax, 4
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * const &>

; 605  :         _Insert_before->_Prev = _Result;

  0030a	8b 4d d0	 mov	 ecx, DWORD PTR __Where$1$[ebp]
  0030d	83 c4 14	 add	 esp, 20			; 00000014H
  00310	8b 45 10	 mov	 eax, DWORD PTR __Result$1$[ebp]
  00313	8b 55 d4	 mov	 edx, DWORD PTR _pMainSlot$1$[ebp]

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};

  00316	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 605  :         _Insert_before->_Prev = _Result;

  0031d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 606  :         _Insert_after->_Next  = _Result;

  00320	89 03		 mov	 DWORD PTR [ebx], eax
$LN8@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00322	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 75   :         ++_Ptr;

  00325	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  00328	3b b0 d4 00 00
	00		 cmp	 esi, DWORD PTR [eax+212]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 215  : 			for (; itor != m_SlotVector.end(); ++itor)

  0032e	0f 85 4c ff ff
	ff		 jne	 $LL10@GetPickedS
$LN234@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1200 :         return _Mypair._Myval2._Mysize == 0;

  00334	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 226  : 		if (!pSlotPointerList->empty())

  00338	74 19		 je	 SHORT $LN29@GetPickedS

; 227  : 			return TRUE;

  0033a	b8 01 00 00 00	 mov	 eax, 1

; 231  : }

  0033f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00342	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00349	59		 pop	 ecx
  0034a	5f		 pop	 edi
  0034b	5e		 pop	 esi
  0034c	5b		 pop	 ebx
  0034d	8b e5		 mov	 esp, ebp
  0034f	5d		 pop	 ebp
  00350	c2 0c 00	 ret	 12			; 0000000cH
$LN29@GetPickedS:

; 228  : 	}
; 229  : 
; 230  : 	return FALSE;

  00353	33 c0		 xor	 eax, eax

; 231  : }

  00355	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00358	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035f	59		 pop	 ecx
  00360	5f		 pop	 edi
  00361	5e		 pop	 esi
  00362	5b		 pop	 ebx
  00363	8b e5		 mov	 esp, ebp
  00365	5d		 pop	 ebp
  00366	c2 0c 00	 ret	 12			; 0000000cH
$LN218@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1015 :             _Xlength_error("list too long");

  00369	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0036e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN239@GetPickedS:
  00373	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Op$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$4:
  00008	8d 4d c8	 lea	 ecx, DWORD PTR __Op$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotList
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_SlotList$ = -28					; size = 8
__Newhead$2 = -20					; size = 4
_pCenterSlot$3 = -20					; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_ppSlot$ = 8						; size = 4
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotPointer, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx

; 67   : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00035	85 c0		 test	 eax, eax
  00037	75 1e		 jne	 SHORT $LN5@GetPickedS

; 68   : 		return CSlotWindow::GetPickedSlotPointer(ppSlot);

  00039	ff 75 08	 push	 DWORD PTR _ppSlot$[ebp]
  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetPickedSlotPointer

; 129  : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN5@GetPickedS:

; 69   : 
; 70   : 	BYTE byWidth, byHeight;
; 71   : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0005d	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00060	50		 push	 eax
  00061	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006a	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0006c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00073	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  0007f	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00081	8d 45 ec	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  00084	50		 push	 eax
  00085	56		 push	 esi
  00086	89 75 ec	 mov	 DWORD PTR __Newhead$2[ebp], esi
  00089	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0008e	8d 45 ec	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  00091	50		 push	 eax
  00092	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<UI::CSlotWindow::SSlot *,void *> *,std::_List_node<UI::CSlotWindow::SSlot *,void *> * &>
  0009b	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  0009e	89 75 e4	 mov	 DWORD PTR _SlotList$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 74   : 	if (!GetPickedSlotList(byWidth, byHeight, &SlotList))

  000a1	8d 45 e4	 lea	 eax, DWORD PTR _SlotList$[ebp]
  000a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ab	50		 push	 eax
  000ac	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  000b0	8b cb		 mov	 ecx, ebx
  000b2	50		 push	 eax
  000b3	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 81 00 00
	00		 je	 $LN151@GetPickedS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000c5	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 77   : 	TSlot * pMinSlot = NULL;

  000c8	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000ca	8b 07		 mov	 eax, DWORD PTR [edi]

; 199  :         return this->_Ptr == _Right._Ptr;

  000cc	3b c7		 cmp	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 81   : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000ce	74 79		 je	 SHORT $LN20@GetPickedS
$LL4@GetPickedS:

; 82   : 	{
; 83   : 		TSlot * pSlot = *itor;

  000d0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 84   : 
; 85   : 		if (!pMinSlot)

  000d3	85 f6		 test	 esi, esi
  000d5	75 04		 jne	 SHORT $LN7@GetPickedS

; 86   : 		{
; 87   : 			pMinSlot = pSlot;

  000d7	8b f2		 mov	 esi, edx

; 88   : 		}

  000d9	eb 19		 jmp	 SHORT $LN2@GetPickedS
$LN7@GetPickedS:

; 89   : 		else
; 90   : 		{
; 91   : 			if (pSlot->dwSlotNumber < pMinSlot->dwSlotNumber)

  000db	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000de	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  000e1	73 04		 jae	 SHORT $LN9@GetPickedS

; 92   : 			{
; 93   : 				pMinSlot = pSlot;

  000e3	8b f2		 mov	 esi, edx

; 94   : 			}

  000e5	eb 0d		 jmp	 SHORT $LN2@GetPickedS
$LN9@GetPickedS:

; 95   : 			else
; 96   : 			{
; 97   : 				if (!pMinSlot->isItem && pSlot->isItem)

  000e7	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000eb	75 07		 jne	 SHORT $LN2@GetPickedS
  000ed	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  000f1	0f 45 f2	 cmovne	 esi, edx
$LN2@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  000f4	8b 00		 mov	 eax, DWORD PTR [eax]

; 199  :         return this->_Ptr == _Right._Ptr;

  000f6	3b c7		 cmp	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 81   : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000f8	75 d6		 jne	 SHORT $LL4@GetPickedS

; 98   : 				{
; 99   : 					pMinSlot = pSlot;
; 100  : 				}
; 101  : 			}
; 102  : 		}
; 103  : 	}
; 104  : 
; 105  : 	if (!pMinSlot)

  000fa	85 f6		 test	 esi, esi
  000fc	74 4b		 je	 SHORT $LN20@GetPickedS

; 106  : 	{
; 107  : 		return FALSE;
; 108  : 	}
; 109  : 	else
; 110  : 	{
; 111  : 		TSlot * pCenterSlot;
; 112  : 		if (!GetSlotPointer(pMinSlot->dwCenterSlotNumber, &pCenterSlot))

  000fe	8d 45 ec	 lea	 eax, DWORD PTR _pCenterSlot$3[ebp]
  00101	8b cb		 mov	 ecx, ebx
  00103	50		 push	 eax
  00104	ff 76 08	 push	 DWORD PTR [esi+8]
  00107	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  0010c	85 c0		 test	 eax, eax
  0010e	74 36		 je	 SHORT $LN151@GetPickedS

; 113  : 			return FALSE;
; 114  : 
; 115  : 		*ppSlot = pCenterSlot;

  00110	8b 7d 08	 mov	 edi, DWORD PTR _ppSlot$[ebp]
  00113	8b 45 ec	 mov	 eax, DWORD PTR _pCenterSlot$3[ebp]
  00116	89 07		 mov	 DWORD PTR [edi], eax

; 116  : 
; 117  : 		if (UI::CWindowManager::Instance().IsAttaching())

  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0011e	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00123	85 c0		 test	 eax, eax
  00125	74 15		 je	 SHORT $LN16@GetPickedS

; 118  : 		{
; 119  : 			DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0012d	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 120  : 
; 121  : 			if (dwSlotNumber == pCenterSlot->dwSlotNumber)

  00132	8b 4d ec	 mov	 ecx, DWORD PTR _pCenterSlot$3[ebp]
  00135	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00138	75 02		 jne	 SHORT $LN16@GetPickedS

; 122  : 			{
; 123  : 				*ppSlot = pMinSlot;

  0013a	89 37		 mov	 DWORD PTR [edi], esi
$LN16@GetPickedS:

; 128  : 	return TRUE;

  0013c	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
  0013f	bb 01 00 00 00	 mov	 ebx, 1
  00144	eb 05		 jmp	 SHORT $LN21@GetPickedS
$LN151@GetPickedS:

; 74   : 	if (!GetPickedSlotList(byWidth, byHeight, &SlotList))

  00146	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
$LN20@GetPickedS:
  00149	33 db		 xor	 ebx, ebx
$LN21@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 324  :         _Head->_Prev->_Next = nullptr;

  0014b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0014e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00154	8b 07		 mov	 eax, DWORD PTR [edi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00156	85 c0		 test	 eax, eax
  00158	74 19		 je	 SHORT $LN130@GetPickedS
  0015a	66 0f 1f 44 00
	00		 npad	 6
$LL131@GetPickedS:

; 328  :             _Pnext = _Pnode->_Next;

  00160	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00162	6a 0c		 push	 12			; 0000000cH
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0016a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0016d	8b c6		 mov	 eax, esi
  0016f	85 f6		 test	 esi, esi
  00171	75 ed		 jne	 SHORT $LL131@GetPickedS
$LN130@GetPickedS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00173	6a 0c		 push	 12			; 0000000cH
  00175	ff 75 e4	 push	 DWORD PTR _SlotList$[ebp]
  00178	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0017d	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 128  : 	return TRUE;

  00180	8b c3		 mov	 eax, ebx

; 129  : }

  00182	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00185	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018c	59		 pop	 ecx
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotPointer
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?__Initialize@CGridSlotWindow@UI@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGridSlotWindow@UI@@IAEXXZ PROC		; UI::CGridSlotWindow::__Initialize, COMDAT
; _this$ = ecx

; 368  : 	m_dwxCount = 0;

  00000	c7 81 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+200], 0

; 369  : 	m_dwyCount = 0;

  0000a	c7 81 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+204], 0

; 370  : }

  00014	c3		 ret	 0
?__Initialize@CGridSlotWindow@UI@@IAEXXZ ENDP		; UI::CGridSlotWindow::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z
_TEXT	SEGMENT
tv525 = -28						; size = 4
tv519 = -24						; size = 4
tv526 = -20						; size = 4
_x$1$ = -16						; size = 4
tv529 = -12						; size = 4
_this$1$ = -8						; size = 4
$T1 = -1						; size = 1
_dwStartIndex$ = 8					; size = 4
_dwxCount$ = 12						; size = 4
_dwyCount$ = 16						; size = 4
_ixSlotSize$ = 20					; size = 4
_iySlotSize$ = 24					; size = 4
_ixTemporarySize$ = 28					; size = 4
_iyTemporarySize$ = 32					; size = 4
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z PROC	; UI::CGridSlotWindow::ArrangeGridSlot, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 269  : 	Destroy();

  0000c	e8 00 00 00 00	 call	 ?Destroy@CGridSlotWindow@UI@@QAEXXZ ; UI::CGridSlotWindow::Destroy

; 270  : 
; 271  : 	m_dwxCount = dwxCount;

  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]

; 272  : 	m_dwyCount = dwyCount;
; 273  : 
; 274  : 	m_SlotVector.clear();
; 275  : 	m_SlotVector.resize(dwxCount*dwyCount);

  00014	8b cb		 mov	 ecx, ebx
  00016	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00019	8b 7d 10	 mov	 edi, DWORD PTR _dwyCount$[ebp]
  0001c	8d b2 d0 00 00
	00		 lea	 esi, DWORD PTR [edx+208]
  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	0f af cf	 imul	 ecx, edi
  00027	89 9a c8 00 00
	00		 mov	 DWORD PTR [edx+200], ebx
  0002d	89 ba cc 00 00
	00		 mov	 DWORD PTR [edx+204], edi
  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1224 :         if (_Newsize > _Oldsize) { // append

  00036	85 c9		 test	 ecx, ecx
  00038	74 2d		 je	 SHORT $LN13@ArrangeGri

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0003a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003d	8b 16		 mov	 edx, DWORD PTR [esi]
  0003f	2b c2		 sub	 eax, edx
  00041	c1 f8 02	 sar	 eax, 2

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  00044	3b c8		 cmp	 ecx, eax
  00046	76 0e		 jbe	 SHORT $LN14@ArrangeGri

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  00048	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  00054	eb 0e		 jmp	 SHORT $LN51@ArrangeGri
$LN14@ArrangeGri:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@IAAV?$allocator@PAUSSlot@CSlotWindow@UI@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<UI::CSlotWindow::SSlot *> >
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN51@ArrangeGri:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 277  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00064	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN13@ArrangeGri:
  00067	33 c0		 xor	 eax, eax
  00069	89 45 f0	 mov	 DWORD PTR _x$1$[ebp], eax
  0006c	85 db		 test	 ebx, ebx
  0006e	0f 84 8b 00 00
	00		 je	 $LN3@ArrangeGri
$LL4@ArrangeGri:

; 278  : 	for (DWORD y = 0; y < dwyCount; ++y)

  00074	85 ff		 test	 edi, edi
  00076	74 7b		 je	 SHORT $LN2@ArrangeGri
  00078	8b 4d 14	 mov	 ecx, DWORD PTR _ixSlotSize$[ebp]
  0007b	33 f6		 xor	 esi, esi
  0007d	03 4d 1c	 add	 ecx, DWORD PTR _ixTemporarySize$[ebp]
  00080	8b 7d 18	 mov	 edi, DWORD PTR _iySlotSize$[ebp]
  00083	03 7d 20	 add	 edi, DWORD PTR _iyTemporarySize$[ebp]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00089	c1 e3 02	 shl	 ebx, 2
  0008c	0f af c8	 imul	 ecx, eax
  0008f	89 5d e8	 mov	 DWORD PTR tv519[ebp], ebx
  00092	8b 5d 08	 mov	 ebx, DWORD PTR _dwStartIndex$[ebp]
  00095	89 7d ec	 mov	 DWORD PTR tv526[ebp], edi
  00098	03 d8		 add	 ebx, eax
  0009a	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000a1	8b 45 10	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  000a4	89 4d e4	 mov	 DWORD PTR tv525[ebp], ecx
  000a7	89 45 f4	 mov	 DWORD PTR tv529[ebp], eax
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL7@ArrangeGri:

; 279  : 	{
; 280  : 		DWORD dwIndex = dwStartIndex + x + y * dwxCount;
; 281  : 		int ixPosition = x * (ixSlotSize + ixTemporarySize);
; 282  : 		int iyPosition = y * (iySlotSize + iyTemporarySize);
; 283  : 
; 284  : 		AppendSlot(dwIndex, ixPosition, iyPosition, ixSlotSize, iySlotSize);

  000b0	ff 75 18	 push	 DWORD PTR _iySlotSize$[ebp]
  000b3	ff 75 14	 push	 DWORD PTR _ixSlotSize$[ebp]
  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	53		 push	 ebx
  000b9	8b ca		 mov	 ecx, edx
  000bb	e8 00 00 00 00	 call	 ?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z ; UI::CSlotWindow::AppendSlot
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1832 :         : current(_STD move(_Right)) {}

  000c0	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 278  : 	for (DWORD y = 0; y < dwyCount; ++y)

  000c3	03 75 ec	 add	 esi, DWORD PTR tv526[ebp]
  000c6	03 5d 0c	 add	 ebx, DWORD PTR _dwxCount$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1832 :         : current(_STD move(_Right)) {}

  000c9	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 152  :         return this->_Ptr->_Myval;

  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 286  : 		m_SlotVector[x+y*dwxCount] = &(*m_SlotList.rbegin());

  000d2	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 152  :         return this->_Ptr->_Myval;

  000d8	83 c1 08	 add	 ecx, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 286  : 		m_SlotVector[x+y*dwxCount] = &(*m_SlotList.rbegin());

  000db	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
  000de	03 7d e8	 add	 edi, DWORD PTR tv519[ebp]
  000e1	83 6d f4 01	 sub	 DWORD PTR tv529[ebp], 1
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR tv525[ebp]
  000e8	75 c6		 jne	 SHORT $LL7@ArrangeGri
  000ea	8b 45 f0	 mov	 eax, DWORD PTR _x$1$[ebp]
  000ed	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]
  000f0	8b 7d 10	 mov	 edi, DWORD PTR _dwyCount$[ebp]
$LN2@ArrangeGri:

; 277  : 	for (DWORD x = 0; x < dwxCount; ++x)

  000f3	40		 inc	 eax
  000f4	89 45 f0	 mov	 DWORD PTR _x$1$[ebp], eax
  000f7	3b c3		 cmp	 eax, ebx
  000f9	0f 82 75 ff ff
	ff		 jb	 $LL4@ArrangeGri
$LN3@ArrangeGri:

; 287  : 	}
; 288  : 
; 289  : 	int iWidth = dwxCount * (ixSlotSize + ixTemporarySize);
; 290  : 	int iHeight = dwyCount * (iySlotSize + iyTemporarySize);

  000ff	8b 45 18	 mov	 eax, DWORD PTR _iySlotSize$[ebp]

; 291  : 	SetSize(iWidth, iHeight);

  00102	8b ca		 mov	 ecx, edx
  00104	03 45 20	 add	 eax, DWORD PTR _iyTemporarySize$[ebp]
  00107	0f af c7	 imul	 eax, edi
  0010a	50		 push	 eax
  0010b	8b 45 14	 mov	 eax, DWORD PTR _ixSlotSize$[ebp]
  0010e	03 45 1c	 add	 eax, DWORD PTR _ixTemporarySize$[ebp]
  00111	0f af c3	 imul	 eax, ebx
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?SetSize@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetSize
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx

; 292  : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 1c 00	 ret	 28			; 0000001cH
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ENDP	; UI::CGridSlotWindow::ArrangeGridSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Destroy@CGridSlotWindow@UI@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGridSlotWindow@UI@@QAEXXZ PROC		; UI::CGridSlotWindow::Destroy, COMDAT
; _this$ = ecx

; 358  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 359  : 	CSlotWindow::Destroy();

  00003	e8 00 00 00 00	 call	 ?Destroy@CSlotWindow@UI@@QAEXXZ ; UI::CSlotWindow::Destroy

; 360  : 
; 361  : 	m_SlotVector.clear();

  00008	8b 86 d0 00 00
	00		 mov	 eax, DWORD PTR [esi+208]

; 362  : 
; 363  : 	__Initialize();

  0000e	8b ce		 mov	 ecx, esi
  00010	89 86 d4 00 00
	00		 mov	 DWORD PTR [esi+212], eax
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?__Initialize@CGridSlotWindow@UI@@IAEXXZ ; UI::CGridSlotWindow::__Initialize
?Destroy@CGridSlotWindow@UI@@QAEXXZ ENDP		; UI::CGridSlotWindow::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??1CGridSlotWindow@UI@@UAE@XZ
_TEXT	SEGMENT
??1CGridSlotWindow@UI@@UAE@XZ PROC			; UI::CGridSlotWindow::~CGridSlotWindow, COMDAT
; _this$ = ecx

; 391  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 8e d0 00 00
	00		 mov	 ecx, DWORD PTR [esi+208]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 33		 je	 SHORT $LN6@CGridSlotW

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  00019	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001b	83 e0 fc	 and	 eax, -4			; fffffffcH
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00025	c7 86 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+208], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00032	c7 86 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+212], 0

; 1699 :             _Myend   = pointer();

  0003c	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
$LN6@CGridSlotW:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 392  : }

  00046	8b ce		 mov	 ecx, esi
  00048	5e		 pop	 esi
  00049	e9 00 00 00 00	 jmp	 ??1CSlotWindow@UI@@UAE@XZ ; UI::CSlotWindow::~CSlotWindow
??1CGridSlotWindow@UI@@UAE@XZ ENDP			; UI::CGridSlotWindow::~CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppyObject$ = 8						; size = 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z PROC		; UI::CGridSlotWindow::CGridSlotWindow, COMDAT
; _this$ = ecx

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _ppyObject$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@

; 388  : }

  00018	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 86 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+208], 0
  00024	c7 86 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+212], 0
  0002e	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 388  : }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ENDP		; UI::CGridSlotWindow::CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Type@CGridSlotWindow@UI@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGridSlotWindow@UI@@SAKXZ PROC			; UI::CGridSlotWindow::Type, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 374  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 375  : 	return s_Type;
; 376  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 374  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 0f		 push	 15			; 0000000fH
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGridSlotWindow@UI@@SAKXZ ENDP			; UI::CGridSlotWindow::Type
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?IsWindow@CWindow@UI@@UAEHXZ
_TEXT	SEGMENT
?IsWindow@CWindow@UI@@UAEHXZ PROC			; UI::CWindow::IsWindow, COMDAT
; _this$ = ecx

; 163  : 			virtual BOOL	IsWindow() { return TRUE; }

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?IsWindow@CWindow@UI@@UAEHXZ ENDP			; UI::CWindow::IsWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?SetColor@CWindow@UI@@UAEXK@Z
_TEXT	SEGMENT
_dwColor$ = 8						; size = 4
?SetColor@CWindow@UI@@UAEXK@Z PROC			; UI::CWindow::SetColor, COMDAT
; _this$ = ecx

; 159  : 			virtual void	SetColor(DWORD dwColor){}

  00000	c2 04 00	 ret	 4
?SetColor@CWindow@UI@@UAEXK@Z ENDP			; UI::CWindow::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?OnChangePosition@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnChangePosition@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnChangePosition, COMDAT
; _this$ = ecx

; 105  : 			virtual void	OnChangePosition(){}

  00000	c2 00 00	 ret	 0
?OnChangePosition@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnChangePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
