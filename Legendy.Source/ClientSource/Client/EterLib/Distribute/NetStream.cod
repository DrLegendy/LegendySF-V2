; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	??0CNetworkStream@@QAE@XZ			; CNetworkStream::CNetworkStream
PUBLIC	??1CNetworkStream@@UAE@XZ			; CNetworkStream::~CNetworkStream
PUBLIC	?SetRecvBufferSize@CNetworkStream@@QAEXH@Z	; CNetworkStream::SetRecvBufferSize
PUBLIC	?SetSendBufferSize@CNetworkStream@@QAEXH@Z	; CNetworkStream::SetSendBufferSize
PUBLIC	?IsSecurityMode@CNetworkStream@@QAE_NXZ		; CNetworkStream::IsSecurityMode
PUBLIC	?GetRecvBufferSize@CNetworkStream@@QAEHXZ	; CNetworkStream::GetRecvBufferSize
PUBLIC	?Clear@CNetworkStream@@QAEXXZ			; CNetworkStream::Clear
PUBLIC	?ClearRecvBuffer@CNetworkStream@@QAEXXZ		; CNetworkStream::ClearRecvBuffer
PUBLIC	?Process@CNetworkStream@@QAEXXZ			; CNetworkStream::Process
PUBLIC	?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ; CNetworkStream::Connect
PUBLIC	?Connect@CNetworkStream@@QAE_NPBDHH@Z		; CNetworkStream::Connect
PUBLIC	?Connect@CNetworkStream@@QAE_NKHH@Z		; CNetworkStream::Connect
PUBLIC	?Disconnect@CNetworkStream@@QAEXXZ		; CNetworkStream::Disconnect
PUBLIC	?Peek@CNetworkStream@@QAE_NH@Z			; CNetworkStream::Peek
PUBLIC	?Peek@CNetworkStream@@QAE_NHPAD@Z		; CNetworkStream::Peek
PUBLIC	?Recv@CNetworkStream@@QAE_NH@Z			; CNetworkStream::Recv
PUBLIC	?Recv@CNetworkStream@@QAE_NHPAD@Z		; CNetworkStream::Recv
PUBLIC	?Send@CNetworkStream@@QAE_NHPBD@Z		; CNetworkStream::Send
PUBLIC	?Peek@CNetworkStream@@QAE_NHPAX@Z		; CNetworkStream::Peek
PUBLIC	?Recv@CNetworkStream@@QAE_NHPAX@Z		; CNetworkStream::Recv
PUBLIC	?Send@CNetworkStream@@QAE_NHPBX@Z		; CNetworkStream::Send
PUBLIC	?SendFlush@CNetworkStream@@QAE_NHPBX@Z		; CNetworkStream::SendFlush
PUBLIC	?IsOnline@CNetworkStream@@QAE_NXZ		; CNetworkStream::IsOnline
PUBLIC	?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z	; CNetworkStream::SetPacketSequenceMode
PUBLIC	?SendSequence@CNetworkStream@@QAE_NXZ		; CNetworkStream::SendSequence
PUBLIC	?OnConnectSuccess@CNetworkStream@@MAEXXZ	; CNetworkStream::OnConnectSuccess
PUBLIC	?OnConnectFailure@CNetworkStream@@MAEXXZ	; CNetworkStream::OnConnectFailure
PUBLIC	?OnRemoteDisconnect@CNetworkStream@@MAEXXZ	; CNetworkStream::OnRemoteDisconnect
PUBLIC	?OnDisconnect@CNetworkStream@@MAEXXZ		; CNetworkStream::OnDisconnect
PUBLIC	?OnProcess@CNetworkStream@@MAE_NXZ		; CNetworkStream::OnProcess
PUBLIC	?__SendInternalBuffer@CNetworkStream@@IAE_NXZ	; CNetworkStream::__SendInternalBuffer
PUBLIC	?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ	; CNetworkStream::__RecvInternalBuffer
PUBLIC	?__PopSendBuffer@CNetworkStream@@IAEXXZ		; CNetworkStream::__PopSendBuffer
PUBLIC	?__GetSendBufferSize@CNetworkStream@@IAEHXZ	; CNetworkStream::__GetSendBufferSize
PUBLIC	?Prepare@CNetworkStream@@IAEIPAXPAI@Z		; CNetworkStream::Prepare
PUBLIC	?Activate@CNetworkStream@@IAE_NIPBXI@Z		; CNetworkStream::Activate
PUBLIC	?ActivateCipher@CNetworkStream@@IAEXXZ		; CNetworkStream::ActivateCipher
PUBLIC	??_GCNetworkStream@@UAEPAXI@Z			; CNetworkStream::`scalar deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CNetworkStream@@6B@				; CNetworkStream::`vftable'
PUBLIC	??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK@ ; `string'
PUBLIC	??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@	; `string'
PUBLIC	??_C@_0BE@IJKILDIH@Succeed?5connecting?4@	; `string'
PUBLIC	??_C@_0BD@CIONHGBI@Failed?5to?5connect?4@	; `string'
PUBLIC	??_R4CNetworkStream@@6B@			; CNetworkStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCNetworkStream@@@8			; CNetworkStream `RTTI Type Descriptor'
PUBLIC	??_R3CNetworkStream@@8				; CNetworkStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CNetworkStream@@8				; CNetworkStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CNetworkStream@@8			; CNetworkStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__time64:PROC
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	___WSAFDIsSet@8:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_connect@12:PROC
EXTRN	_ioctlsocket@12:PROC
EXTRN	_recv@16:PROC
EXTRN	_select@20:PROC
EXTRN	_send@16:PROC
EXTRN	_socket@12:PROC
EXTRN	_WSAGetLastError@0:PROC
EXTRN	??0Cipher@@QAE@XZ:PROC				; Cipher::Cipher
EXTRN	??1Cipher@@QAE@XZ:PROC				; Cipher::~Cipher
EXTRN	?CleanUp@Cipher@@QAEXXZ:PROC			; Cipher::CleanUp
EXTRN	?Prepare@Cipher@@QAEIPAXPAI@Z:PROC		; Cipher::Prepare
EXTRN	?Activate@Cipher@@QAE_N_NIPBXI@Z:PROC		; Cipher::Activate
EXTRN	??0CNetworkAddress@@QAE@XZ:PROC			; CNetworkAddress::CNetworkAddress
EXTRN	??1CNetworkAddress@@QAE@XZ:PROC			; CNetworkAddress::~CNetworkAddress
EXTRN	?Set@CNetworkAddress@@QAE_NPBDH@Z:PROC		; CNetworkAddress::Set
EXTRN	?GetSize@CNetworkAddress@@QAEHXZ:PROC		; CNetworkAddress::GetSize
EXTRN	??_ECNetworkStream@@UAEPAXI@Z:PROC		; CNetworkStream::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CNetworkStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CNetworkStream@@8 DD FLAT:??_R0?AVCNetworkStream@@@8 ; CNetworkStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CNetworkStream@@8
rdata$r	SEGMENT
??_R2CNetworkStream@@8 DD FLAT:??_R1A@?0A@EA@CNetworkStream@@8 ; CNetworkStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CNetworkStream@@8
rdata$r	SEGMENT
??_R3CNetworkStream@@8 DD 00H				; CNetworkStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCNetworkStream@@@8
data$r	SEGMENT
??_R0?AVCNetworkStream@@@8 DD FLAT:??_7type_info@@6B@	; CNetworkStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCNetworkStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4CNetworkStream@@6B@
rdata$r	SEGMENT
??_R4CNetworkStream@@6B@ DD 00H				; CNetworkStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCNetworkStream@@@8
	DD	FLAT:??_R3CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@CIONHGBI@Failed?5to?5connect?4@
CONST	SEGMENT
??_C@_0BD@CIONHGBI@Failed?5to?5connect?4@ DB 'Failed to connect.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJKILDIH@Succeed?5connecting?4@
CONST	SEGMENT
??_C@_0BE@IJKILDIH@Succeed?5connecting?4@ DB 'Succeed connecting.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@
CONST	SEGMENT
??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@ DB '%d.%d.%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK@
CONST	SEGMENT
??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK@ DB 'error != WSAEWOUL'
	DB	'DBLOCK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CNetworkStream@@6B@
CONST	SEGMENT
??_7CNetworkStream@@6B@ DD FLAT:??_R4CNetworkStream@@6B@ ; CNetworkStream::`vftable'
	DD	FLAT:??_ECNetworkStream@@UAEPAXI@Z
	DD	FLAT:?OnConnectSuccess@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnConnectFailure@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnRemoteDisconnect@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnDisconnect@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnProcess@CNetworkStream@@MAE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Connect@CNetworkStream@@QAE_NPBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Connect@CNetworkStream@@QAE_NPBDHH@Z$0
__ehfuncinfo$?Connect@CNetworkStream@@QAE_NPBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Connect@CNetworkStream@@QAE_NPBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CNetworkStream@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CNetworkStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetworkStream@@QAE@XZ$0
__ehfuncinfo$??0CNetworkStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CNetworkStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCNetworkStream@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCNetworkStream@@UAEPAXI@Z PROC			; CNetworkStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 70		 push	 112			; 00000070H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCNetworkStream@@UAEPAXI@Z ENDP			; CNetworkStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?ActivateCipher@CNetworkStream@@IAEXXZ
_TEXT	SEGMENT
?ActivateCipher@CNetworkStream@@IAEXXZ PROC		; CNetworkStream::ActivateCipher, COMDAT
; _this$ = ecx

; 3019 : 	return m_cipher.set_activated(true);

  00000	c6 41 4c 01	 mov	 BYTE PTR [ecx+76], 1

; 3020 : }

  00004	c3		 ret	 0
?ActivateCipher@CNetworkStream@@IAEXXZ ENDP		; CNetworkStream::ActivateCipher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Activate@CNetworkStream@@IAE_NIPBXI@Z
_TEXT	SEGMENT
_agreed_length$ = 8					; size = 4
_buffer$ = 12						; size = 4
_length$ = 16						; size = 4
?Activate@CNetworkStream@@IAE_NIPBXI@Z PROC		; CNetworkStream::Activate, COMDAT
; _this$ = ecx

; 3013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3014 : 	return m_cipher.Activate(true, agreed_length, buffer, length);

  00003	ff 75 10	 push	 DWORD PTR _length$[ebp]
  00006	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00009	ff 75 0c	 push	 DWORD PTR _buffer$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _agreed_length$[ebp]
  0000f	6a 01		 push	 1
  00011	e8 00 00 00 00	 call	 ?Activate@Cipher@@QAE_N_NIPBXI@Z ; Cipher::Activate

; 3015 : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?Activate@CNetworkStream@@IAE_NIPBXI@Z ENDP		; CNetworkStream::Activate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Prepare@CNetworkStream@@IAEIPAXPAI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Prepare@CNetworkStream@@IAEIPAXPAI@Z PROC		; CNetworkStream::Prepare, COMDAT
; _this$ = ecx

; 3008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3009 : 	return m_cipher.Prepare(buffer, length);

  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH

; 3010 : }

  00006	5d		 pop	 ebp

; 3009 : 	return m_cipher.Prepare(buffer, length);

  00007	e9 00 00 00 00	 jmp	 ?Prepare@Cipher@@QAEIPAXPAI@Z ; Cipher::Prepare
?Prepare@CNetworkStream@@IAEIPAXPAI@Z ENDP		; CNetworkStream::Prepare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?__GetSendBufferSize@CNetworkStream@@IAEHXZ
_TEXT	SEGMENT
?__GetSendBufferSize@CNetworkStream@@IAEHXZ PROC	; CNetworkStream::__GetSendBufferSize, COMDAT
; _this$ = ecx

; 754  : 	return m_sendBufInputPos-m_sendBufOutputPos;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	2b 41 38	 sub	 eax, DWORD PTR [ecx+56]

; 755  : }

  00006	c3		 ret	 0
?__GetSendBufferSize@CNetworkStream@@IAEHXZ ENDP	; CNetworkStream::__GetSendBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?__PopSendBuffer@CNetworkStream@@IAEXXZ
_TEXT	SEGMENT
?__PopSendBuffer@CNetworkStream@@IAEXXZ PROC		; CNetworkStream::__PopSendBuffer, COMDAT
; _this$ = ecx

; 269  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 270  : 	if (m_sendBufOutputPos<=0)

  00003	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00006	85 c0		 test	 eax, eax
  00008	7e 25		 jle	 SHORT $LN1@PopSendBuf

; 271  : 		return;
; 272  : 
; 273  : 	int sendBufDataSize = m_sendBufInputPos - m_sendBufOutputPos;

  0000a	57		 push	 edi
  0000b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000e	2b f8		 sub	 edi, eax

; 274  : 
; 275  : 	if (sendBufDataSize>0)

  00010	85 ff		 test	 edi, edi
  00012	7e 10		 jle	 SHORT $LN3@PopSendBuf

; 276  : 	{
; 277  : 		memmove(m_sendBuf, m_sendBuf+m_sendBufOutputPos, sendBufDataSize);

  00014	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00017	03 c1		 add	 eax, ecx
  00019	57		 push	 edi
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@PopSendBuf:

; 278  : 	}
; 279  : 
; 280  : 	m_sendBufInputPos = sendBufDataSize;

  00024	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 281  : 	m_sendBufOutputPos = 0;

  00027	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0002e	5f		 pop	 edi
$LN1@PopSendBuf:

; 282  : }

  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?__PopSendBuffer@CNetworkStream@@IAEXXZ ENDP		; CNetworkStream::__PopSendBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\cipher.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ PROC	; CNetworkStream::__RecvInternalBuffer, COMDAT
; _this$ = ecx

; 75   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 76   : 	if (m_recvBufOutputPos>0)

  00004	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00007	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000a	85 c0		 test	 eax, eax
  0000c	7e 2a		 jle	 SHORT $LN2@RecvIntern

; 77   : 	{
; 78   : 		int recvBufDataSize = m_recvBufInputPos - m_recvBufOutputPos;

  0000e	8b d1		 mov	 edx, ecx
  00010	2b d0		 sub	 edx, eax

; 79   : 		if (recvBufDataSize>0)

  00012	85 d2		 test	 edx, edx
  00014	7e 16		 jle	 SHORT $LN3@RecvIntern

; 80   : 		{
; 81   : 			memmove(m_recvBuf, m_recvBuf + m_recvBufOutputPos, recvBufDataSize);

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	03 c1		 add	 eax, ecx
  0001b	52		 push	 edx
  0001c	50		 push	 eax
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _memmove
  00023	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
$LN3@RecvIntern:

; 82   : 		}
; 83   : 
; 84   : 		m_recvBufInputPos -= m_recvBufOutputPos;

  0002c	2b c8		 sub	 ecx, eax

; 85   : 		m_recvBufOutputPos = 0;

  0002e	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00035	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
$LN2@RecvIntern:

; 86   : 	}
; 87   : 
; 88   : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 89   : 	int restSize = m_recvBufSize - m_recvBufInputPos;

  00038	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0003b	2b c1		 sub	 eax, ecx

; 90   : 	if (restSize>0)

  0003d	85 c0		 test	 eax, eax
  0003f	7e 4b		 jle	 SHORT $LN4@RecvIntern

; 91   : 	{
; 92   : 		int recvSize = recv(m_sock, m_recvBuf + m_recvBufInputPos, m_recvBufSize - m_recvBufInputPos, 0);

  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00047	03 c1		 add	 eax, ecx
  00049	50		 push	 eax
  0004a	ff 76 5c	 push	 DWORD PTR [esi+92]
  0004d	e8 00 00 00 00	 call	 _recv@16
  00052	8b f8		 mov	 edi, eax

; 93   : 		//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 94   : 
; 95   : 		if (recvSize < 0)

  00054	85 ff		 test	 edi, edi
  00056	79 39		 jns	 SHORT $LN16@RecvIntern

; 96   : 		{
; 97   : 			int error = WSAGetLastError();

  00058	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 98   : 
; 99   : 			if (error != WSAEWOULDBLOCK)

  0005d	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00062	75 2f		 jne	 SHORT $LN15@RecvIntern
$LN8@RecvIntern:

; 107  : 		}
; 108  : 
; 109  : 		if (IsSecurityMode()) {

  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?IsSecurityMode@CNetworkStream@@QAE_NXZ ; CNetworkStream::IsSecurityMode
  0006b	84 c0		 test	 al, al
  0006d	74 1a		 je	 SHORT $LN11@RecvIntern

; 110  : 			m_cipher.Decrypt(m_recvBuf + m_recvBufInputPos, recvSize);

  0006f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00072	03 56 24	 add	 edx, DWORD PTR [esi+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\cipher.h

; 40   :     if (!activated_) {

  00075	80 7e 4c 00	 cmp	 BYTE PTR [esi+76], 0
  00079	74 0e		 je	 SHORT $LN11@RecvIntern

; 41   :       return;
; 42   :     }
; 43   :     decoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  0007b	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0007e	83 c1 04	 add	 ecx, 4
  00081	57		 push	 edi
  00082	52		 push	 edx
  00083	52		 push	 edx
  00084	8b 01		 mov	 eax, DWORD PTR [ecx]
  00086	ff 50 20	 call	 DWORD PTR [eax+32]
$LN11@RecvIntern:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp

; 113  : 		m_recvBufInputPos += recvSize;

  00089	01 7e 24	 add	 DWORD PTR [esi+36], edi
$LN4@RecvIntern:
  0008c	5f		 pop	 edi

; 114  : 	}
; 115  : #else
; 116  : 	if (IsSecurityMode())
; 117  : 	{
; 118  : 		int restSize = min(m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 119  : 
; 120  : 		if (restSize > 0)
; 121  : 		{
; 122  : 			int recvSize = recv(m_sock, m_recvTEABuf + m_recvTEABufInputPos, restSize, 0);
; 123  : 			//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 124  : 
; 125  : 			if (recvSize < 0)
; 126  : 			{
; 127  : 				int error = WSAGetLastError();
; 128  : 
; 129  : 				if (error != WSAEWOULDBLOCK)
; 130  : 				{
; 131  : 					return false;
; 132  : 				}
; 133  : 			}
; 134  : 			else if (recvSize == 0)
; 135  : 			{
; 136  : 				return false;
; 137  : 			}
; 138  : 
; 139  : 			m_recvTEABufInputPos += recvSize;
; 140  : 
; 141  : 			int decodeSize = m_recvTEABufInputPos;
; 142  : 
; 143  : 			if (decodeSize >= 8)
; 144  : 			{
; 145  : 				decodeSize >>= 3;
; 146  : 				decodeSize <<= 3;
; 147  : 
; 148  : 				/*int decodeDstSize = tea_decrypt((DWORD *) (m_recvBuf + m_recvBufInputPos),
; 149  : 												 (DWORD *) m_recvTEABuf,
; 150  : 												 (const DWORD *) m_szDecryptKey,
; 151  : 												 decodeSize);
; 152  : 												 */
; 153  : 				int decodeDstSize = tea_decrypt((DWORD *) (m_recvBuf + m_recvBufInputPos),
; 154  : 												(DWORD *) m_recvTEABuf,
; 155  : 												(const DWORD *) m_szDecryptKey,
; 156  : 												decodeSize);
; 157  : 
; 158  : 				m_recvBufInputPos += decodeDstSize;
; 159  : 
; 160  : 				if (m_recvTEABufInputPos>decodeSize)
; 161  : 					memmove(m_recvTEABuf, m_recvTEABuf+decodeSize, m_recvTEABufInputPos-decodeSize);
; 162  : 
; 163  : 				m_recvTEABufInputPos -= decodeSize;
; 164  : 
; 165  : 
; 166  : 				//Tracenf("!!!!!! decrypt decodeSrcSize %d -> decodeDstSize %d (recvOutputPos %d, recvInputPos %d, teaInputPos %d)",
; 167  : 				//		decodeSize, decodeDstSize, m_recvBufOutputPos, m_recvBufInputPos, m_recvTEABufInputPos);
; 168  : 			}
; 169  : 		}
; 170  : 	}
; 171  : 	else
; 172  : 	{
; 173  : 		int restSize = m_recvBufSize - m_recvBufInputPos;
; 174  : 		if (restSize>0)
; 175  : 		{
; 176  : 			int recvSize = recv(m_sock, m_recvBuf + m_recvBufInputPos, m_recvBufSize - m_recvBufInputPos, 0);
; 177  : 			//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 178  : 
; 179  : 			if (recvSize < 0)
; 180  : 			{
; 181  : 				int error = WSAGetLastError();
; 182  : 
; 183  : 				if (error != WSAEWOULDBLOCK)
; 184  : 				{
; 185  : 					return false;
; 186  : 				}
; 187  : 			}
; 188  : 			else if (recvSize == 0)
; 189  : 			{
; 190  : 				return false;
; 191  : 			}
; 192  : 
; 193  : 			m_recvBufInputPos += recvSize;
; 194  : 		}
; 195  : 	}
; 196  : #endif // _IMPROVED_PACKET_ENCRYPTION_
; 197  : 
; 198  : 	//Tracef("recvSize: %d input pos %d output pos %d\n", recvSize, m_recvBufInputPos, m_recvBufOutputPos);
; 199  : 
; 200  : 	return true;

  0008d	b0 01		 mov	 al, 1

; 201  : }

  0008f	5e		 pop	 esi
  00090	c3		 ret	 0
$LN16@RecvIntern:

; 100  : 			{
; 101  : 				return false;
; 102  : 			}
; 103  : 		}
; 104  : 		else if (recvSize == 0)

  00091	75 d1		 jne	 SHORT $LN8@RecvIntern
$LN15@RecvIntern:
  00093	5f		 pop	 edi

; 105  : 		{
; 106  : 			return false;

  00094	32 c0		 xor	 al, al

; 201  : }

  00096	5e		 pop	 esi
  00097	c3		 ret	 0
?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ ENDP	; CNetworkStream::__RecvInternalBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\cipher.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
?__SendInternalBuffer@CNetworkStream@@IAE_NXZ PROC	; CNetworkStream::__SendInternalBuffer, COMDAT
; _this$ = ecx

; 205  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 206  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 207  : 	int dataSize=__GetSendBufferSize();

  00004	e8 00 00 00 00	 call	 ?__GetSendBufferSize@CNetworkStream@@IAEHXZ ; CNetworkStream::__GetSendBufferSize
  00009	8b f8		 mov	 edi, eax

; 208  : 	if (dataSize<=0)

  0000b	85 ff		 test	 edi, edi
  0000d	7e 4a		 jle	 SHORT $LN9@SendIntern

; 209  : 		return true;
; 210  : 
; 211  : 	if (IsSecurityMode()) {

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?IsSecurityMode@CNetworkStream@@QAE_NXZ ; CNetworkStream::IsSecurityMode
  00016	84 c0		 test	 al, al
  00018	74 1a		 je	 SHORT $LN6@SendIntern

; 212  : 		m_cipher.Encrypt(m_sendBuf + m_sendBufOutputPos, dataSize);

  0001a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0001d	03 56 2c	 add	 edx, DWORD PTR [esi+44]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\cipher.h

; 32   :     if (!activated_) {

  00020	80 7e 4c 00	 cmp	 BYTE PTR [esi+76], 0
  00024	74 0e		 je	 SHORT $LN6@SendIntern

; 33   :       return;
; 34   :     }
; 35   :     encoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  00026	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00029	83 c1 04	 add	 ecx, 4
  0002c	57		 push	 edi
  0002d	52		 push	 edx
  0002e	52		 push	 edx
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	ff 50 20	 call	 DWORD PTR [eax+32]
$LN6@SendIntern:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp

; 215  : 	int sendSize = send(m_sock, m_sendBuf+m_sendBufOutputPos, dataSize, 0);

  00034	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00037	03 46 38	 add	 eax, DWORD PTR [esi+56]
  0003a	6a 00		 push	 0
  0003c	57		 push	 edi
  0003d	50		 push	 eax
  0003e	ff 76 5c	 push	 DWORD PTR [esi+92]
  00041	e8 00 00 00 00	 call	 _send@16

; 216  : 	if (sendSize < 0)

  00046	85 c0		 test	 eax, eax
  00048	79 05		 jns	 SHORT $LN4@SendIntern

; 217  : 		return false;

  0004a	5f		 pop	 edi
  0004b	32 c0		 xor	 al, al

; 222  : #else
; 223  : 	if (IsSecurityMode())
; 224  : 	{
; 225  : 		int encodeSize=__GetSendBufferSize();
; 226  : 		if (encodeSize<=0)
; 227  : 			return true;
; 228  : 
; 229  : 		m_sendTEABufInputPos += tea_encrypt((DWORD *) (m_sendTEABuf + m_sendTEABufInputPos),
; 230  : 												 (DWORD *) (m_sendBuf + m_sendBufOutputPos),
; 231  : 												 (const DWORD *) m_szEncryptKey,
; 232  : 												 encodeSize);
; 233  : 		m_sendBufOutputPos += encodeSize;
; 234  : 
; 235  : 		if (m_sendTEABufInputPos>0)
; 236  : 		{
; 237  : 			int sendSize = send(m_sock, m_sendTEABuf, m_sendTEABufInputPos, 0);
; 238  : 			if (sendSize < 0)
; 239  : 				return false;
; 240  : 
; 241  : 			if (m_sendTEABufInputPos>sendSize)
; 242  : 				memmove(m_sendTEABuf, m_sendTEABuf+sendSize, m_sendTEABufInputPos-sendSize);
; 243  : 
; 244  : 			m_sendTEABufInputPos-=sendSize;
; 245  : 		}
; 246  : 
; 247  : 		__PopSendBuffer();
; 248  : 	}
; 249  : 	else
; 250  : 	{
; 251  : 		int dataSize=__GetSendBufferSize();
; 252  : 		if (dataSize<=0)
; 253  : 			return true;
; 254  : 
; 255  : 		int sendSize = send(m_sock, m_sendBuf+m_sendBufOutputPos, dataSize, 0);
; 256  : 		if (sendSize < 0)
; 257  : 			return false;
; 258  : 
; 259  : 		m_sendBufOutputPos+=sendSize;
; 260  : 
; 261  : 		__PopSendBuffer();
; 262  : 	}
; 263  : #endif // _IMPROVED_PACKET_ENCRYPTION_
; 264  : 
; 265  : 	return true;
; 266  : }

  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
$LN4@SendIntern:

; 218  : 
; 219  : 	m_sendBufOutputPos+=sendSize;

  0004f	01 46 38	 add	 DWORD PTR [esi+56], eax

; 220  : 
; 221  : 	__PopSendBuffer();

  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?__PopSendBuffer@CNetworkStream@@IAEXXZ ; CNetworkStream::__PopSendBuffer
$LN9@SendIntern:

; 222  : #else
; 223  : 	if (IsSecurityMode())
; 224  : 	{
; 225  : 		int encodeSize=__GetSendBufferSize();
; 226  : 		if (encodeSize<=0)
; 227  : 			return true;
; 228  : 
; 229  : 		m_sendTEABufInputPos += tea_encrypt((DWORD *) (m_sendTEABuf + m_sendTEABufInputPos),
; 230  : 												 (DWORD *) (m_sendBuf + m_sendBufOutputPos),
; 231  : 												 (const DWORD *) m_szEncryptKey,
; 232  : 												 encodeSize);
; 233  : 		m_sendBufOutputPos += encodeSize;
; 234  : 
; 235  : 		if (m_sendTEABufInputPos>0)
; 236  : 		{
; 237  : 			int sendSize = send(m_sock, m_sendTEABuf, m_sendTEABufInputPos, 0);
; 238  : 			if (sendSize < 0)
; 239  : 				return false;
; 240  : 
; 241  : 			if (m_sendTEABufInputPos>sendSize)
; 242  : 				memmove(m_sendTEABuf, m_sendTEABuf+sendSize, m_sendTEABufInputPos-sendSize);
; 243  : 
; 244  : 			m_sendTEABufInputPos-=sendSize;
; 245  : 		}
; 246  : 
; 247  : 		__PopSendBuffer();
; 248  : 	}
; 249  : 	else
; 250  : 	{
; 251  : 		int dataSize=__GetSendBufferSize();
; 252  : 		if (dataSize<=0)
; 253  : 			return true;
; 254  : 
; 255  : 		int sendSize = send(m_sock, m_sendBuf+m_sendBufOutputPos, dataSize, 0);
; 256  : 		if (sendSize < 0)
; 257  : 			return false;
; 258  : 
; 259  : 		m_sendBufOutputPos+=sendSize;
; 260  : 
; 261  : 		__PopSendBuffer();
; 262  : 	}
; 263  : #endif // _IMPROVED_PACKET_ENCRYPTION_
; 264  : 
; 265  : 	return true;
; 266  : }

  00059	5f		 pop	 edi
  0005a	b0 01		 mov	 al, 1
  0005c	5e		 pop	 esi
  0005d	c3		 ret	 0
?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ENDP	; CNetworkStream::__SendInternalBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?OnProcess@CNetworkStream@@MAE_NXZ
_TEXT	SEGMENT
?OnProcess@CNetworkStream@@MAE_NXZ PROC			; CNetworkStream::OnProcess, COMDAT
; _this$ = ecx

; 858  : 	return true;

  00000	b0 01		 mov	 al, 1

; 859  : }

  00002	c3		 ret	 0
?OnProcess@CNetworkStream@@MAE_NXZ ENDP			; CNetworkStream::OnProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?OnDisconnect@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnDisconnect@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnDisconnect, COMDAT
; _this$ = ecx

; 867  : }

  00000	c2 00 00	 ret	 0
?OnDisconnect@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnDisconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?OnRemoteDisconnect@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnRemoteDisconnect@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnRemoteDisconnect, COMDAT
; _this$ = ecx

; 863  : }

  00000	c2 00 00	 ret	 0
?OnRemoteDisconnect@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnRemoteDisconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?OnConnectFailure@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnConnectFailure@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnConnectFailure, COMDAT
; _this$ = ecx

; 876  : 	Tracen("Failed to connect.");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CIONHGBI@Failed?5to?5connect?4@
  00005	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0000a	59		 pop	 ecx

; 877  : }

  0000b	c3		 ret	 0
?OnConnectFailure@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnConnectFailure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?OnConnectSuccess@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnConnectSuccess@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnConnectSuccess, COMDAT
; _this$ = ecx

; 871  : 	Tracen("Succeed connecting.");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IJKILDIH@Succeed?5connecting?4@
  00005	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0000a	59		 pop	 ecx

; 872  : }

  0000b	c3		 ret	 0
?OnConnectSuccess@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnConnectSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?SendSequence@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
?SendSequence@CNetworkStream@@QAE_NXZ PROC		; CNetworkStream::SendSequence, COMDAT
; _this$ = ecx

; 840  : #ifdef ENABLE_SEQUENCE_SYSTEM
; 841  : 	if (!m_bUseSequence)
; 842  : 		return true;
; 843  : 
; 844  : 	BYTE bSeq = m_kVec_bSequenceTable[m_iSequence++];
; 845  : 
; 846  : 	bool bRet = Send(sizeof(BYTE), &bSeq);
; 847  : 	if (m_iSequence == SEQUENCE_TABLE_SIZE)
; 848  : 		m_iSequence = 0;
; 849  : 
; 850  : 	return bRet;
; 851  : #else
; 852  : 	return true;

  00000	b0 01		 mov	 al, 1

; 853  : #endif
; 854  : }

  00002	c3		 ret	 0
?SendSequence@CNetworkStream@@QAE_NXZ ENDP		; CNetworkStream::SendSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z
_TEXT	SEGMENT
_isOn$ = 8						; size = 1
?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z PROC	; CNetworkStream::SetPacketSequenceMode, COMDAT
; _this$ = ecx

; 833  : #ifdef ENABLE_SEQUENCE_SYSTEM
; 834  : 	m_bUseSequence = isOn;
; 835  : #endif
; 836  : }

  00000	c2 04 00	 ret	 4
?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z ENDP	; CNetworkStream::SetPacketSequenceMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?IsOnline@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
?IsOnline@CNetworkStream@@QAE_NXZ PROC			; CNetworkStream::IsOnline, COMDAT
; _this$ = ecx

; 828  : 	return m_isOnline;

  00000	8a 41 48	 mov	 al, BYTE PTR [ecx+72]

; 829  : }

  00003	c3		 ret	 0
?IsOnline@CNetworkStream@@QAE_NXZ ENDP			; CNetworkStream::IsOnline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?SendFlush@CNetworkStream@@QAE_NHPBX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?SendFlush@CNetworkStream@@QAE_NHPBX@Z PROC		; CNetworkStream::SendFlush, COMDAT
; _this$ = ecx

; 814  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 815  : 	if (!Send(len, pSrcBuf))

  00004	ff 75 0c	 push	 DWORD PTR _pSrcBuf$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _len$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00011	84 c0		 test	 al, al
  00013	75 05		 jne	 SHORT $LN2@SendFlush
  00015	5e		 pop	 esi

; 819  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN2@SendFlush:

; 816  : 		return false;
; 817  : 
; 818  : 	return __SendInternalBuffer();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__SendInternalBuffer
  00021	5e		 pop	 esi

; 819  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SendFlush@CNetworkStream@@QAE_NHPBX@Z ENDP		; CNetworkStream::SendFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Send@CNetworkStream@@QAE_NHPBX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?Send@CNetworkStream@@QAE_NHPBX@Z PROC			; CNetworkStream::Send, COMDAT
; _this$ = ecx

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 824  : }

  00003	5d		 pop	 ebp

; 823  : 	return Send(len, (const char*)pSrcBuf);

  00004	e9 00 00 00 00	 jmp	 ?Send@CNetworkStream@@QAE_NHPBD@Z ; CNetworkStream::Send
?Send@CNetworkStream@@QAE_NHPBX@Z ENDP			; CNetworkStream::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NHPAX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Recv@CNetworkStream@@QAE_NHPAX@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 811  : }

  00003	5d		 pop	 ebp

; 810  : 	return Recv(len, (char*)pDestBuf);

  00004	e9 00 00 00 00	 jmp	 ?Recv@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Recv
?Recv@CNetworkStream@@QAE_NHPAX@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NHPAX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Peek@CNetworkStream@@QAE_NHPAX@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 806  : }

  00003	5d		 pop	 ebp

; 805  : 	return Peek(len, (char*)pDestBuf);

  00004	e9 00 00 00 00	 jmp	 ?Peek@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Peek
?Peek@CNetworkStream@@QAE_NHPAX@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Send@CNetworkStream@@QAE_NHPBD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?Send@CNetworkStream@@QAE_NHPBD@Z PROC			; CNetworkStream::Send, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 760  : 	int sendBufRestSize = m_sendBufSize - m_sendBufInputPos;
; 761  : 	if ((size + 1) > sendBufRestSize)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  0000a	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0000d	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00010	2b d1		 sub	 edx, ecx
  00012	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00015	3b c2		 cmp	 eax, edx
  00017	7e 08		 jle	 SHORT $LN2@Send

; 762  : 		return false;

  00019	5f		 pop	 edi
  0001a	32 c0		 xor	 al, al

; 784  : 	/*
; 785  : 	if (size > 0)
; 786  : 	{
; 787  : 		if (IsSecurityMode())
; 788  : 		{
; 789  : 			m_sendBufInputPos += TEA_Encrypt((DWORD *) (m_sendBuf + m_sendBufInputPos),
; 790  : 											 (DWORD *) (m_sendBuf + m_sendBufInputPos),
; 791  : 											 (const DWORD *) gs_szTeaKey,
; 792  : 											 size);
; 793  : 		}
; 794  : 		else
; 795  : 		{
; 796  : 		}
; 797  : 	}
; 798  : 
; 799  : 	return __SendInternalBuffer();
; 800  : 	*/
; 801  : }

  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN2@Send:

; 763  : 
; 764  : 	memcpy(m_sendBuf + m_sendBufInputPos, pSrcBuf, size);

  00021	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00024	57		 push	 edi
  00025	ff 75 0c	 push	 DWORD PTR _pSrcBuf$[ebp]
  00028	03 c1		 add	 eax, ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 765  : 	m_sendBufInputPos += size;
; 766  : 
; 767  : #ifdef _PACKETDUMP
; 768  : 	if (*pSrcBuf != 0 )
; 769  : 	{
; 770  : 		TraceError("SEND> %s (%d)", GetSendHeaderName(*pSrcBuf), size);
; 771  : 		string contents;
; 772  : 		char buf[10];
; 773  : 		for(int i = 1; i < size; i++)
; 774  : 		{
; 775  : 			sprintf(buf," %02x", (unsigned char)(pSrcBuf[i]));
; 776  : 			contents.append(buf);
; 777  : 		}
; 778  : 		TraceError(contents.c_str());
; 779  : 
; 780  : 	}
; 781  : #endif
; 782  : 
; 783  : 	return true;

  00033	b0 01		 mov	 al, 1
  00035	01 7e 34	 add	 DWORD PTR [esi+52], edi
  00038	5f		 pop	 edi

; 784  : 	/*
; 785  : 	if (size > 0)
; 786  : 	{
; 787  : 		if (IsSecurityMode())
; 788  : 		{
; 789  : 			m_sendBufInputPos += TEA_Encrypt((DWORD *) (m_sendBuf + m_sendBufInputPos),
; 790  : 											 (DWORD *) (m_sendBuf + m_sendBufInputPos),
; 791  : 											 (const DWORD *) gs_szTeaKey,
; 792  : 											 size);
; 793  : 		}
; 794  : 		else
; 795  : 		{
; 796  : 		}
; 797  : 	}
; 798  : 
; 799  : 	return __SendInternalBuffer();
; 800  : 	*/
; 801  : }

  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?Send@CNetworkStream@@QAE_NHPBD@Z ENDP			; CNetworkStream::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NHPAD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Recv@CNetworkStream@@QAE_NHPAD@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 728  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 729  : 	if (!Peek(size, pDestBuf))

  00005	ff 75 0c	 push	 DWORD PTR _pDestBuf$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 ?Peek@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Peek
  00013	84 c0		 test	 al, al
  00015	75 06		 jne	 SHORT $LN2@Recv

; 750  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN2@Recv:

; 730  : 		return false;
; 731  : 
; 732  : #ifdef _PACKETDUMP
; 733  : 	if (*pDestBuf != 0 )
; 734  : 	{
; 735  : 		TraceError("RECV< %s (%d)", GetRecvHeaderName(*pDestBuf), size);
; 736  : 		string contents;
; 737  : 		char buf[10];
; 738  : 		for(int i = 1; i < size; i++)
; 739  : 		{
; 740  : 			sprintf(buf," %02x", (unsigned char)(pDestBuf[i]));
; 741  : 			contents.append(buf);
; 742  : 		}
; 743  : 		TraceError(contents.c_str());
; 744  : 	}
; 745  : 
; 746  : #endif
; 747  : 
; 748  : 	m_recvBufOutputPos += size;

  0001d	01 7e 28	 add	 DWORD PTR [esi+40], edi

; 749  : 	return true;

  00020	b0 01		 mov	 al, 1
  00022	5f		 pop	 edi

; 750  : }

  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?Recv@CNetworkStream@@QAE_NHPAD@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?Recv@CNetworkStream@@QAE_NH@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 720  : 	if (!Peek(size))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 ?Peek@CNetworkStream@@QAE_NH@Z ; CNetworkStream::Peek
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN2@Recv

; 725  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@Recv:

; 721  : 		return false;
; 722  : 
; 723  : 	m_recvBufOutputPos += size;

  0001a	01 7e 28	 add	 DWORD PTR [esi+40], edi

; 724  : 	return true;

  0001d	b0 01		 mov	 al, 1
  0001f	5f		 pop	 edi

; 725  : }

  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?Recv@CNetworkStream@@QAE_NH@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NHPAD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Peek@CNetworkStream@@QAE_NHPAD@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 482  : 	if (GetRecvBufferSize() < size)

  00006	e8 00 00 00 00	 call	 ?GetRecvBufferSize@CNetworkStream@@QAEHXZ ; CNetworkStream::GetRecvBufferSize
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	3b c1		 cmp	 eax, ecx
  00010	7d 07		 jge	 SHORT $LN2@Peek

; 483  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	5e		 pop	 esi

; 487  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@Peek:

; 484  : 
; 485  : 	memcpy(pDestBuf, m_recvBuf + m_recvBufOutputPos, size);

  00019	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001c	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	ff 75 0c	 push	 DWORD PTR _pDestBuf$[ebp]
  00024	e8 00 00 00 00	 call	 _memcpy
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 486  : 	return true;

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 487  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?Peek@CNetworkStream@@QAE_NHPAD@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?Peek@CNetworkStream@@QAE_NH@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  : 	if (GetRecvBufferSize() < size)

  00003	e8 00 00 00 00	 call	 ?GetRecvBufferSize@CNetworkStream@@QAEHXZ ; CNetworkStream::GetRecvBufferSize
  00008	3b 45 08	 cmp	 eax, DWORD PTR _size$[ebp]
  0000b	0f 9d c0	 setge	 al

; 475  : 		return false;
; 476  : 
; 477  : 	return true;
; 478  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?Peek@CNetworkStream@@QAE_NH@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Disconnect@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?Disconnect@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Disconnect, COMDAT
; _this$ = ecx

; 359  : 	if (m_sock == INVALID_SOCKET)

  00000	83 79 5c ff	 cmp	 DWORD PTR [ecx+92], -1
  00004	0f 85 00 00 00
	00		 jne	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 360  : 		return;
; 361  : 
; 362  : 	//OnDisconnect();
; 363  : 
; 364  : 	Clear();
; 365  : }

  0000a	c3		 ret	 0
?Disconnect@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Disconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NKHH@Z
_TEXT	SEGMENT
_szAddr$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_dwAddr$ = 8						; size = 4
_port$ = 12						; size = 4
_limitSec$ = 16						; size = 4
?Connect@CNetworkStream@@QAE_NKHH@Z PROC		; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 440  : 	char szAddr[256];
; 441  : 	{
; 442  : 		BYTE ip[4];
; 443  : 		ip[0]=dwAddr&0xff;dwAddr>>=8;

  00013	8b 55 08	 mov	 edx, DWORD PTR _dwAddr$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8a da		 mov	 bl, dl
  0001a	8b f1		 mov	 esi, ecx
  0001c	c1 ea 08	 shr	 edx, 8

; 444  : 		ip[1]=dwAddr&0xff;dwAddr>>=8;

  0001f	8a ca		 mov	 cl, dl
  00021	c1 ea 08	 shr	 edx, 8

; 445  : 		ip[2]=dwAddr&0xff;dwAddr>>=8;

  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 08	 shr	 eax, 8

; 446  : 		ip[3]=dwAddr&0xff;dwAddr>>=8;
; 447  : 
; 448  : 		sprintf(szAddr, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);

  00029	50		 push	 eax
  0002a	0f b6 c2	 movzx	 eax, dl
  0002d	50		 push	 eax
  0002e	0f b6 c1	 movzx	 eax, cl
  00031	50		 push	 eax
  00032	0f b6 c3	 movzx	 eax, bl
  00035	50		 push	 eax
  00036	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAddr$[ebp]
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd@
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _sprintf
  00047	83 c4 18	 add	 esp, 24			; 00000018H

; 449  : 	}
; 450  : 
; 451  : 	return Connect(szAddr, port, limitSec);

  0004a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAddr$[ebp]
  00050	8b ce		 mov	 ecx, esi
  00052	ff 75 10	 push	 DWORD PTR _limitSec$[ebp]
  00055	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NPBDHH@Z ; CNetworkStream::Connect

; 452  : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	5e		 pop	 esi
  00062	33 cd		 xor	 ecx, ebp
  00064	5b		 pop	 ebx
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
?Connect@CNetworkStream@@QAE_NKHH@Z ENDP		; CNetworkStream::Connect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NPBDHH@Z
_TEXT	SEGMENT
_kNetAddr$ = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szAddr$ = 8						; size = 4
_port$ = 12						; size = 4
___formal$ = 16						; size = 4
?Connect@CNetworkStream@@QAE_NPBDHH@Z PROC		; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Connect@CNetworkStream@@QAE_NPBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _c_szAddr$[ebp]

; 456  : 	CNetworkAddress kNetAddr;

  00030	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  00033	e8 00 00 00 00	 call	 ??0CNetworkAddress@@QAE@XZ ; CNetworkAddress::CNetworkAddress

; 457  : 	kNetAddr.Set(c_szAddr, port);

  00038	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  0003b	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?Set@CNetworkAddress@@QAE_NPBDH@Z ; CNetworkAddress::Set

; 458  : 
; 459  : 	return Connect(kNetAddr);

  0004b	6a 03		 push	 3
  0004d	8d 45 e0	 lea	 eax, DWORD PTR _kNetAddr$[ebp]
  00050	8b cf		 mov	 ecx, edi
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ; CNetworkStream::Connect
  00058	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  0005b	8a d8		 mov	 bl, al
  0005d	e8 00 00 00 00	 call	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
  00062	8a c3		 mov	 al, bl

; 460  : }

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Connect@CNetworkStream@@QAE_NPBDHH@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Connect@CNetworkStream@@QAE_NPBDHH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Connect@CNetworkStream@@QAE_NPBDHH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Connect@CNetworkStream@@QAE_NPBDHH@Z ENDP		; CNetworkStream::Connect
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z
_TEXT	SEGMENT
_arg$ = -4						; size = 4
_c_rkNetAddr$ = 8					; size = 4
_limitSec$ = 12						; size = 4
?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z PROC ; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 405  : 	Clear();

  00008	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 406  : 
; 407  : 	m_addr = c_rkNetAddr;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _c_rkNetAddr$[ebp]
  00010	8d 77 60	 lea	 esi, DWORD PTR [edi+96]

; 408  : 
; 409  : 	m_sock = socket(AF_INET, SOCK_STREAM, 0);

  00013	6a 00		 push	 0
  00015	6a 01		 push	 1
  00017	6a 02		 push	 2
  00019	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0001c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0001f	e8 00 00 00 00	 call	 _socket@12
  00024	89 47 5c	 mov	 DWORD PTR [edi+92], eax

; 410  : 
; 411  : 	if (m_sock == INVALID_SOCKET)

  00027	83 f8 ff	 cmp	 eax, -1
  0002a	74 45		 je	 SHORT $LN8@Connect

; 412  : 	{
; 413  : 		Clear();
; 414  : 		OnConnectFailure();
; 415  : 		return false;
; 416  : 	}
; 417  : 
; 418  : 	DWORD arg = 1;
; 419  : 	ioctlsocket(m_sock, FIONBIO, &arg);	// Non-blocking mode

  0002c	8d 4d fc	 lea	 ecx, DWORD PTR _arg$[ebp]
  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _arg$[ebp], 1
  00036	51		 push	 ecx
  00037	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _ioctlsocket@12

; 420  : 
; 421  : 	if (connect(m_sock, (PSOCKADDR)&m_addr, m_addr.GetSize()) == SOCKET_ERROR)

  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?GetSize@CNetworkAddress@@QAEHXZ ; CNetworkAddress::GetSize
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	ff 77 5c	 push	 DWORD PTR [edi+92]
  0004e	e8 00 00 00 00	 call	 _connect@12
  00053	83 f8 ff	 cmp	 eax, -1
  00056	75 31		 jne	 SHORT $LN4@Connect

; 422  : 	{
; 423  : 		int error = WSAGetLastError();

  00058	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 424  : 
; 425  : 		if (error != WSAEWOULDBLOCK)

  0005d	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00062	74 25		 je	 SHORT $LN4@Connect

; 426  : 		{
; 427  : 			Tracen("error != WSAEWOULDBLOCK");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK@
  00069	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0006e	83 c4 04	 add	 esp, 4
$LN8@Connect:

; 436  : }

  00071	8b cf		 mov	 ecx, edi
  00073	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear
  00078	8b 07		 mov	 eax, DWORD PTR [edi]
  0007a	8b cf		 mov	 ecx, edi
  0007c	ff 50 08	 call	 DWORD PTR [eax+8]
  0007f	5f		 pop	 edi
  00080	32 c0		 xor	 al, al
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 08 00	 ret	 8
$LN4@Connect:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00089	6a 00		 push	 0
  0008b	e8 00 00 00 00	 call	 __time64
  00090	8b c8		 mov	 ecx, eax
  00092	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp

; 434  : 	m_connectLimitTime = time(NULL) + limitSec;

  00095	8b 45 0c	 mov	 eax, DWORD PTR _limitSec$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00098	8b f2		 mov	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp

; 434  : 	m_connectLimitTime = time(NULL) + limitSec;

  0009a	99		 cdq
  0009b	03 c8		 add	 ecx, eax

; 435  : 	return true;

  0009d	b0 01		 mov	 al, 1
  0009f	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  000a2	13 f2		 adc	 esi, edx
  000a4	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  000a7	5f		 pop	 edi

; 436  : }

  000a8	5e		 pop	 esi
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8
?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ENDP ; CNetworkStream::Connect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Process@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
_delay$ = -532						; size = 8
_fdsRecv$ = -524					; size = 260
_fdsSend$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?Process@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Process, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 288  : 	if (m_sock == INVALID_SOCKET)

  00016	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	0f 84 27 01 00
	00		 je	 $LN21@Process

; 289  : 		return;
; 290  : 
; 291  : 	fd_set fdsRecv;
; 292  : 	fd_set fdsSend;
; 293  : 
; 294  : 	FD_ZERO(&fdsRecv);
; 295  : 	FD_ZERO(&fdsSend);
; 296  : 
; 297  : 	FD_SET(m_sock, &fdsRecv);

  00022	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _fdsRecv$[ebp+4], eax

; 298  : 	FD_SET(m_sock, &fdsSend);

  00028	89 85 fc fe ff
	ff		 mov	 DWORD PTR _fdsSend$[ebp+4], eax

; 299  : 
; 300  : 	TIMEVAL delay;
; 301  : 
; 302  : 	delay.tv_sec = 0;
; 303  : 	delay.tv_usec = 0;
; 304  : 
; 305  : 	if (select(0, &fdsRecv, &fdsSend, NULL, &delay) == SOCKET_ERROR)

  0002e	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _delay$[ebp]
  00034	50		 push	 eax
  00035	6a 00		 push	 0
  00037	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _fdsSend$[ebp]
  0003d	c7 85 f4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _fdsRecv$[ebp], 1
  00047	50		 push	 eax
  00048	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _fdsRecv$[ebp]
  0004e	c7 85 f8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _fdsSend$[ebp], 1
  00058	50		 push	 eax
  00059	6a 00		 push	 0
  0005b	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _delay$[ebp], 0
  00065	c7 85 f0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _delay$[ebp+4], 0
  0006f	e8 00 00 00 00	 call	 _select@20
  00074	83 f8 ff	 cmp	 eax, -1
  00077	0f 84 cc 00 00
	00		 je	 $LN21@Process

; 306  : 		return;
; 307  : 
; 308  : 	if (!m_isOnline)

  0007d	80 7e 48 00	 cmp	 BYTE PTR [esi+72], 0
  00081	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _fdsSend$[ebp]
  00087	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0008a	51		 push	 ecx
  0008b	50		 push	 eax
  0008c	75 5a		 jne	 SHORT $LN12@Process

; 309  : 	{
; 310  : 		if (FD_ISSET(m_sock, &fdsSend))

  0008e	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  00093	85 c0		 test	 eax, eax
  00095	74 1a		 je	 SHORT $LN13@Process

; 311  : 		{
; 312  : 			m_isOnline = true;
; 313  : 			OnConnectSuccess();

  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	8b ce		 mov	 ecx, esi
  0009b	c6 46 48 01	 mov	 BYTE PTR [esi+72], 1
  0009f	ff 50 04	 call	 DWORD PTR [eax+4]
  000a2	5e		 pop	 esi

; 350  : 	{
; 351  : 		OnRemoteDisconnect();
; 352  : 		Clear();
; 353  : 	}
; 354  : }

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	33 cd		 xor	 ecx, ebp
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN13@Process:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __time64
  000b8	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp

; 315  : 		else if (time(NULL) > m_connectLimitTime)

  000bb	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  000be	0f 8c 85 00 00
	00		 jl	 $LN21@Process
  000c4	7f 05		 jg	 SHORT $LN25@Process
  000c6	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000c9	76 7e		 jbe	 SHORT $LN21@Process
$LN25@Process:

; 316  : 		{
; 317  : 			Clear();

  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 318  : 			OnConnectFailure();

  000d2	8b 06		 mov	 eax, DWORD PTR [esi]
  000d4	8b ce		 mov	 ecx, esi
  000d6	ff 50 08	 call	 DWORD PTR [eax+8]
  000d9	5e		 pop	 esi

; 350  : 	{
; 351  : 		OnRemoteDisconnect();
; 352  : 		Clear();
; 353  : 	}
; 354  : }

  000da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dd	33 cd		 xor	 ecx, ebp
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN12@Process:

; 319  : 		}
; 320  : 
; 321  : 		return;
; 322  : 	}
; 323  : 
; 324  : 	if (FD_ISSET(m_sock, &fdsSend) && (m_sendBufInputPos > m_sendBufOutputPos))

  000e8	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  000ed	85 c0		 test	 eax, eax
  000ef	74 1f		 je	 SHORT $LN18@Process
  000f1	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000f4	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  000f7	7e 17		 jle	 SHORT $LN18@Process

; 325  : 	{
; 326  : 		if (!__SendInternalBuffer())

  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__SendInternalBuffer
  00100	84 c0		 test	 al, al
  00102	75 0c		 jne	 SHORT $LN18@Process

; 327  : 		{
; 328  : 			int error = WSAGetLastError();

  00104	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 329  : 
; 330  : 			if (error != WSAEWOULDBLOCK)

  00109	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0010e	75 2b		 jne	 SHORT $LN26@Process
$LN18@Process:

; 331  : 			{
; 332  : 				OnRemoteDisconnect();
; 333  : 				Clear();
; 334  : 				return;
; 335  : 			}
; 336  : 		}
; 337  : 	}
; 338  : 
; 339  : 	if (FD_ISSET(m_sock, &fdsRecv))

  00110	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _fdsRecv$[ebp]
  00116	50		 push	 eax
  00117	ff 76 5c	 push	 DWORD PTR [esi+92]
  0011a	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  0011f	85 c0		 test	 eax, eax
  00121	74 0b		 je	 SHORT $LN20@Process

; 340  : 	{
; 341  : 		if (!__RecvInternalBuffer())

  00123	8b ce		 mov	 ecx, esi
  00125	e8 00 00 00 00	 call	 ?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__RecvInternalBuffer
  0012a	84 c0		 test	 al, al
  0012c	74 0d		 je	 SHORT $LN26@Process
$LN20@Process:

; 342  : 		{
; 343  : 			OnRemoteDisconnect();
; 344  : 			Clear();
; 345  : 			return;
; 346  : 		}
; 347  : 	}
; 348  : 
; 349  : 	if (!OnProcess())

  0012e	8b 06		 mov	 eax, DWORD PTR [esi]
  00130	8b ce		 mov	 ecx, esi
  00132	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00135	ff d0		 call	 eax
  00137	84 c0		 test	 al, al
  00139	75 0e		 jne	 SHORT $LN21@Process
$LN26@Process:

; 350  : 	{
; 351  : 		OnRemoteDisconnect();
; 352  : 		Clear();
; 353  : 	}
; 354  : }

  0013b	8b 06		 mov	 eax, DWORD PTR [esi]
  0013d	8b ce		 mov	 ecx, esi
  0013f	ff 50 0c	 call	 DWORD PTR [eax+12]
  00142	8b ce		 mov	 ecx, esi
  00144	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear
$LN21@Process:
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
?Process@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?ClearRecvBuffer@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?ClearRecvBuffer@CNetworkStream@@QAEXXZ PROC		; CNetworkStream::ClearRecvBuffer, COMDAT
; _this$ = ecx

; 464  : 	m_recvBufOutputPos = m_recvBufInputPos = 0;

  00000	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00007	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 465  : }

  0000e	c3		 ret	 0
?ClearRecvBuffer@CNetworkStream@@QAEXXZ ENDP		; CNetworkStream::ClearRecvBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?Clear@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?Clear@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Clear, COMDAT
; _this$ = ecx

; 368  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 369  : 	if (m_sock == INVALID_SOCKET)

  00003	83 7e 5c ff	 cmp	 DWORD PTR [esi+92], -1
  00007	74 53		 je	 SHORT $LN1@Clear

; 370  : 		return;
; 371  : 
; 372  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 373  : 	m_cipher.CleanUp();

  00009	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0000c	e8 00 00 00 00	 call	 ?CleanUp@Cipher@@QAEXXZ	; Cipher::CleanUp

; 374  : #endif
; 375  : 
; 376  : 	closesocket(m_sock);

  00011	ff 76 5c	 push	 DWORD PTR [esi+92]
  00014	e8 00 00 00 00	 call	 _closesocket@4

; 377  : 	m_sock = INVALID_SOCKET;

  00019	c7 46 5c ff ff
	ff ff		 mov	 DWORD PTR [esi+92], -1

; 378  : 
; 379  : #ifndef _IMPROVED_PACKET_ENCRYPTION_
; 380  : 	memset(m_szEncryptKey, 0, sizeof(m_szEncryptKey));
; 381  : 	memset(m_szDecryptKey, 0, sizeof(m_szDecryptKey));
; 382  : 
; 383  : 	m_isSecurityMode = false;
; 384  : #endif
; 385  : 
; 386  : 	m_isOnline = false;

  00020	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0

; 387  : 	m_connectLimitTime = 0;

  00024	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 388  : 
; 389  : 	m_recvTEABufInputPos = 0;

  00032	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 390  : 	m_sendTEABufInputPos = 0;

  00039	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 391  : 
; 392  : 	m_recvBufInputPos = 0;

  00040	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 393  : 	m_recvBufOutputPos = 0;

  00047	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 394  : 
; 395  : 	m_sendBufInputPos = 0;

  0004e	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 396  : 	m_sendBufOutputPos = 0;

  00055	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
$LN1@Clear:

; 397  : 
; 398  : #ifdef ENABLE_SEQUENCE_SYSTEM
; 399  : 	m_iSequence = 0;
; 400  : #endif
; 401  : }

  0005c	5e		 pop	 esi
  0005d	c3		 ret	 0
?Clear@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?GetRecvBufferSize@CNetworkStream@@QAEHXZ
_TEXT	SEGMENT
?GetRecvBufferSize@CNetworkStream@@QAEHXZ PROC		; CNetworkStream::GetRecvBufferSize, COMDAT
; _this$ = ecx

; 469  : 	return m_recvBufInputPos - m_recvBufOutputPos;

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]

; 470  : }

  00006	c3		 ret	 0
?GetRecvBufferSize@CNetworkStream@@QAEHXZ ENDP		; CNetworkStream::GetRecvBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?IsSecurityMode@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
?IsSecurityMode@CNetworkStream@@QAE_NXZ PROC		; CNetworkStream::IsSecurityMode, COMDAT
; _this$ = ecx

; 30   : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 31   : 	return m_cipher.activated();

  00000	8a 41 4c	 mov	 al, BYTE PTR [ecx+76]

; 32   : #else
; 33   : 	return m_isSecurityMode;
; 34   : #endif
; 35   : }

  00003	c3		 ret	 0
?IsSecurityMode@CNetworkStream@@QAE_NXZ ENDP		; CNetworkStream::IsSecurityMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?SetSendBufferSize@CNetworkStream@@QAEXH@Z
_TEXT	SEGMENT
_sendBufSize$ = 8					; size = 4
?SetSendBufferSize@CNetworkStream@@QAEXH@Z PROC		; CNetworkStream::SetSendBufferSize, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 57   : 	if (m_sendBuf)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _sendBufSize$[ebp]
  0000a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1e		 je	 SHORT $LN4@SetSendBuf

; 58   : 	{
; 59   : 		if (m_sendBufSize > sendBufSize)

  00011	39 7e 30	 cmp	 DWORD PTR [esi+48], edi
  00014	7f 3d		 jg	 SHORT $LN1@SetSendBuf

; 60   : 			return;
; 61   : 
; 62   : 		delete [] m_sendBuf;

  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 63   : 
; 64   : 		if (m_sendTEABuf)

  0001c	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 09		 je	 SHORT $LN4@SetSendBuf

; 65   : 			delete [] m_sendTEABuf;

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN4@SetSendBuf:

; 66   : 	}
; 67   : 
; 68   : 	m_sendBufSize = sendBufSize;
; 69   : 	m_sendBuf = new char[m_sendBufSize];

  0002f	57		 push	 edi
  00030	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00033	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00038	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 70   : 	m_sendTEABufSize = ((m_sendBufSize>>3)+1)<<3;

  0003b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0003e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00041	83 c0 08	 add	 eax, 8

; 71   : 	m_sendTEABuf = new char[m_sendTEABufSize];

  00044	50		 push	 eax
  00045	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	83 c4 08	 add	 esp, 8
  00050	89 46 3c	 mov	 DWORD PTR [esi+60], eax
$LN1@SetSendBuf:

; 72   : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?SetSendBufferSize@CNetworkStream@@QAEXH@Z ENDP		; CNetworkStream::SetSendBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ?SetRecvBufferSize@CNetworkStream@@QAEXH@Z
_TEXT	SEGMENT
_recvBufSize$ = 8					; size = 4
?SetRecvBufferSize@CNetworkStream@@QAEXH@Z PROC		; CNetworkStream::SetRecvBufferSize, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 39   : 	if (m_recvBuf)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _recvBufSize$[ebp]
  0000a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1e		 je	 SHORT $LN4@SetRecvBuf

; 40   : 	{
; 41   : 		if (m_recvBufSize>recvBufSize)

  00011	39 7e 20	 cmp	 DWORD PTR [esi+32], edi
  00014	7f 3d		 jg	 SHORT $LN1@SetRecvBuf

; 42   : 			return;
; 43   : 
; 44   : 		delete [] m_recvBuf;

  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 45   : 
; 46   : 		if (m_recvTEABuf)

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 09		 je	 SHORT $LN4@SetRecvBuf

; 47   : 			delete [] m_recvTEABuf;

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN4@SetRecvBuf:

; 48   : 	}
; 49   : 	m_recvBufSize = recvBufSize;
; 50   : 	m_recvBuf = new char[m_recvBufSize];

  0002f	57		 push	 edi
  00030	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00033	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00038	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 51   : 	m_recvTEABufSize = ((m_recvBufSize>>3)+1)<<3;

  0003b	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0003e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00041	83 c0 08	 add	 eax, 8

; 52   : 	m_recvTEABuf = new char[m_recvTEABufSize];

  00044	50		 push	 eax
  00045	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	83 c4 08	 add	 esp, 8
  00050	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN1@SetRecvBuf:

; 53   : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?SetRecvBufferSize@CNetworkStream@@QAEXH@Z ENDP		; CNetworkStream::SetRecvBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ??1CNetworkStream@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CNetworkStream@@UAE@XZ PROC				; CNetworkStream::~CNetworkStream, COMDAT
; _this$ = ecx

; 2978 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CNetworkStream@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CNetworkStream@@6B@

; 2979 : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 2980 : 
; 2981 : 	if (m_sendTEABuf)

  00030	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00033	85 c0		 test	 eax, eax
  00035	74 10		 je	 SHORT $LN2@CNetworkSt

; 2982 : 	{
; 2983 : 		delete [] m_sendTEABuf;

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003d	83 c4 04	 add	 esp, 4

; 2984 : 		m_sendTEABuf=NULL;

  00040	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN2@CNetworkSt:

; 2985 : 	}
; 2986 : 
; 2987 : 	if (m_recvTEABuf)

  00047	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004a	85 c0		 test	 eax, eax
  0004c	74 10		 je	 SHORT $LN3@CNetworkSt

; 2988 : 	{
; 2989 : 		delete [] m_recvTEABuf;

  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00054	83 c4 04	 add	 esp, 4

; 2990 : 		m_recvTEABuf=NULL;

  00057	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN3@CNetworkSt:

; 2991 : 	}
; 2992 : 
; 2993 : 	if (m_recvBuf)

  0005e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00061	85 c0		 test	 eax, eax
  00063	74 10		 je	 SHORT $LN4@CNetworkSt

; 2994 : 	{
; 2995 : 		delete [] m_recvBuf;

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0006b	83 c4 04	 add	 esp, 4

; 2996 : 		m_recvBuf=NULL;

  0006e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN4@CNetworkSt:

; 2997 : 	}
; 2998 : 
; 2999 : 	if (m_sendBuf)

  00075	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00078	85 c0		 test	 eax, eax
  0007a	74 10		 je	 SHORT $LN5@CNetworkSt

; 3000 : 	{
; 3001 : 		delete [] m_sendBuf;

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00082	83 c4 04	 add	 esp, 4

; 3002 : 		m_sendBuf=NULL;

  00085	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
$LN5@CNetworkSt:

; 3003 : 	}
; 3004 : }

  0008c	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  0008f	e8 00 00 00 00	 call	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
  00094	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00097	e8 00 00 00 00	 call	 ??1Cipher@@QAE@XZ	; Cipher::~Cipher
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
  000ac	cc		 int	 3
  000ad	cc		 int	 3
  000ae	cc		 int	 3
  000af	cc		 int	 3
  000b0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CNetworkStream@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CNetworkStream@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CNetworkStream@@UAE@XZ ENDP				; CNetworkStream::~CNetworkStream
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\NetStream.cpp
;	COMDAT ??0CNetworkStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CNetworkStream@@QAE@XZ PROC				; CNetworkStream::CNetworkStream, COMDAT
; _this$ = ecx

; 2942 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CNetworkStream@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CNetworkStream@@6B@
  00032	e8 00 00 00 00	 call	 ??0Cipher@@QAE@XZ	; Cipher::Cipher
  00037	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	e8 00 00 00 00	 call	 ??0CNetworkAddress@@QAE@XZ ; CNetworkAddress::CNetworkAddress

; 2943 : 	m_sock = INVALID_SOCKET;

  00046	c7 46 5c ff ff
	ff ff		 mov	 DWORD PTR [esi+92], -1

; 2944 : 
; 2945 : #ifndef _IMPROVED_PACKET_ENCRYPTION_
; 2946 : 	m_isSecurityMode = false;
; 2947 : #endif
; 2948 : 	m_isOnline = false;
; 2949 : 	m_connectLimitTime = 0;
; 2950 : 
; 2951 : 	m_recvTEABuf = NULL;
; 2952 : 	m_recvTEABufSize = 0;
; 2953 : 	m_recvTEABufInputPos = 0;
; 2954 : 
; 2955 : 	m_recvBuf = NULL;
; 2956 : 	m_recvBufSize = 0;
; 2957 : 	m_recvBufOutputPos = 0;
; 2958 : 	m_recvBufInputPos = 0;
; 2959 : 
; 2960 : 	m_sendTEABuf = NULL;
; 2961 : 	m_sendTEABuf = 0;
; 2962 : 	m_sendTEABufInputPos = 0;
; 2963 : 
; 2964 : 	m_sendBuf = NULL;
; 2965 : 	m_sendBufSize = 0;
; 2966 : 	m_sendBufOutputPos = 0;
; 2967 : 	m_sendBufInputPos = 0;
; 2968 : 
; 2969 : #ifdef ENABLE_SEQUENCE_SYSTEM
; 2970 : 	m_iSequence = 0;
; 2971 : 	m_bUseSequence = false;
; 2972 : 	m_kVec_bSequenceTable.resize(SEQUENCE_TABLE_SIZE);
; 2973 : 	memcpy(&m_kVec_bSequenceTable[0], s_bSequenceTable, sizeof(BYTE) * SEQUENCE_TABLE_SIZE);
; 2974 : #endif
; 2975 : }

  0004d	8b c6		 mov	 eax, esi
  0004f	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0
  00053	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0005a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00061	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00068	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0006f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00076	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0007d	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00084	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0008b	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00092	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00099	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000a0	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  000a7	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  000ae	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  000b5	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5e		 pop	 esi
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CNetworkStream@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00006	e9 00 00 00 00	 jmp	 ??1Cipher@@QAE@XZ	; Cipher::~Cipher
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CNetworkStream@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CNetworkStream@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CNetworkStream@@QAE@XZ ENDP				; CNetworkStream::CNetworkStream
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
