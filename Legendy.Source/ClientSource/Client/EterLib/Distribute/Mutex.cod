; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Mutex.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0Mutex@@QAE@XZ				; Mutex::Mutex
PUBLIC	??1Mutex@@QAE@XZ				; Mutex::~Mutex
PUBLIC	?Lock@Mutex@@QAEXXZ				; Mutex::Lock
PUBLIC	?Unlock@Mutex@@QAEXXZ				; Mutex::Unlock
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Mutex.cpp
;	COMDAT ?Unlock@Mutex@@QAEXXZ
_TEXT	SEGMENT
?Unlock@Mutex@@QAEXXZ PROC				; Mutex::Unlock, COMDAT
; _this$ = ecx

; 21   : 	LeaveCriticalSection(&lock);

  00000	51		 push	 ecx
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 22   : }

  00007	c3		 ret	 0
?Unlock@Mutex@@QAEXXZ ENDP				; Mutex::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Mutex.cpp
;	COMDAT ?Lock@Mutex@@QAEXXZ
_TEXT	SEGMENT
?Lock@Mutex@@QAEXXZ PROC				; Mutex::Lock, COMDAT
; _this$ = ecx

; 16   : 	EnterCriticalSection(&lock);

  00000	51		 push	 ecx
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 17   : }

  00007	c3		 ret	 0
?Lock@Mutex@@QAEXXZ ENDP				; Mutex::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Mutex.cpp
;	COMDAT ??1Mutex@@QAE@XZ
_TEXT	SEGMENT
??1Mutex@@QAE@XZ PROC					; Mutex::~Mutex, COMDAT
; _this$ = ecx

; 11   : 	DeleteCriticalSection(&lock);

  00000	51		 push	 ecx
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 12   : }

  00007	c3		 ret	 0
??1Mutex@@QAE@XZ ENDP					; Mutex::~Mutex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Mutex.cpp
;	COMDAT ??0Mutex@@QAE@XZ
_TEXT	SEGMENT
??0Mutex@@QAE@XZ PROC					; Mutex::Mutex, COMDAT
; _this$ = ecx

; 5    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 6    : 	InitializeCriticalSection(&lock);

  00003	56		 push	 esi
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 7    : }

  0000a	8b c6		 mov	 eax, esi
  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
??0Mutex@@QAE@XZ ENDP					; Mutex::Mutex
_TEXT	ENDS
END
