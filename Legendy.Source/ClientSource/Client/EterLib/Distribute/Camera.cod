; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CCamera@@QAE@XZ				; CCamera::CCamera
PUBLIC	??1CCamera@@UAE@XZ				; CCamera::~CCamera
PUBLIC	?SetCameraMaxDistance@CCamera@@SAXM@Z		; CCamera::SetCameraMaxDistance
PUBLIC	?Lock@CCamera@@QAEXXZ				; CCamera::Lock
PUBLIC	?Unlock@CCamera@@QAEXXZ				; CCamera::Unlock
PUBLIC	?IsLock@CCamera@@QAE_NXZ			; CCamera::IsLock
PUBLIC	?Wheel@CCamera@@QAEXH@Z				; CCamera::Wheel
PUBLIC	?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z		; CCamera::Drag
PUBLIC	?EndDrag@CCamera@@QAE_NXZ			; CCamera::EndDrag
PUBLIC	?BeginDrag@CCamera@@QAEXHH@Z			; CCamera::BeginDrag
PUBLIC	?IsDraging@CCamera@@QAE_NXZ			; CCamera::IsDraging
PUBLIC	?SetResistance@CCamera@@QAEXM@Z			; CCamera::SetResistance
PUBLIC	?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z ; CCamera::SetCameraState
PUBLIC	?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ	; CCamera::IncreaseNumSrcreenBuilding
PUBLIC	?ResetNumScreenBuilding@CCamera@@QAEXXZ		; CCamera::ResetNumScreenBuilding
PUBLIC	?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams
PUBLIC	?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::SetEye
PUBLIC	?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z	; CCamera::SetTarget
PUBLIC	?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::SetUp
PUBLIC	?Pitch@CCamera@@QAEXM@Z				; CCamera::Pitch
PUBLIC	?Roll@CCamera@@QAEXM@Z				; CCamera::Roll
PUBLIC	?SetDistance@CCamera@@QAEXM@Z			; CCamera::SetDistance
PUBLIC	?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::Move
PUBLIC	?Zoom@CCamera@@QAEXM@Z				; CCamera::Zoom
PUBLIC	?MoveAlongView@CCamera@@QAEXM@Z			; CCamera::MoveAlongView
PUBLIC	?MoveAlongCross@CCamera@@QAEXM@Z		; CCamera::MoveAlongCross
PUBLIC	?MoveAlongUp@CCamera@@QAEXM@Z			; CCamera::MoveAlongUp
PUBLIC	?MoveLateral@CCamera@@QAEXM@Z			; CCamera::MoveLateral
PUBLIC	?MoveFront@CCamera@@QAEXM@Z			; CCamera::MoveFront
PUBLIC	?MoveVertical@CCamera@@QAEXM@Z			; CCamera::MoveVertical
PUBLIC	?RotateEyeAroundTarget@CCamera@@QAEXMM@Z	; CCamera::RotateEyeAroundTarget
PUBLIC	?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z ; CCamera::RotateEyeAroundPoint
PUBLIC	?SetViewMatrix@CCamera@@IAEXXZ			; CCamera::SetViewMatrix
PUBLIC	?CalculateRoll@CCamera@@IAEXXZ			; CCamera::CalculateRoll
PUBLIC	?GetTargetHeight@CCamera@@QAEMXZ		; CCamera::GetTargetHeight
PUBLIC	?SetTargetHeight@CCamera@@QAEXM@Z		; CCamera::SetTargetHeight
PUBLIC	??_GCCamera@@UAEPAXI@Z				; CCamera::`scalar deleting destructor'
PUBLIC	??1?$CSingleton@VCCameraManager@@@@UAE@XZ	; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
PUBLIC	??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z	; CSingleton<CCameraManager>::`scalar deleting destructor'
PUBLIC	??0CCameraManager@@QAE@XZ			; CCameraManager::CCameraManager
PUBLIC	??1CCameraManager@@UAE@XZ			; CCameraManager::~CCameraManager
PUBLIC	?AddCamera@CCameraManager@@QAE_NE@Z		; CCameraManager::AddCamera
PUBLIC	?RemoveCamera@CCameraManager@@QAE_NE@Z		; CCameraManager::RemoveCamera
PUBLIC	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
PUBLIC	?SetCurrentCamera@CCameraManager@@QAEXE@Z	; CCameraManager::SetCurrentCamera
PUBLIC	?ResetToPreviousCamera@CCameraManager@@QAEXXZ	; CCameraManager::ResetToPreviousCamera
PUBLIC	?isCurrentCamera@CCameraManager@@QAE_NE@Z	; CCameraManager::isCurrentCamera
PUBLIC	?GetCurrentCameraNum@CCameraManager@@QAEEXZ	; CCameraManager::GetCurrentCameraNum
PUBLIC	?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ ; CCameraManager::isTerrainCollisionEnable
PUBLIC	?SetTerrainCollision@CCameraManager@@QAEX_N@Z	; CCameraManager::SetTerrainCollision
PUBLIC	??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
PUBLIC	??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
PUBLIC	??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >
PUBLIC	??_GCCameraManager@@UAEPAXI@Z			; CCameraManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
PUBLIC	??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>
PUBLIC	??$?0ABE$$Z$$V@?$pair@$$CBEPAVCCamera@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABE@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><unsigned char const &>
PUBLIC	??$?0V?$tuple@ABE@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBEPAVCCamera@@@std@@QAE@AAV?$tuple@ABE@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><std::tuple<unsigned char const &>,std::tuple<>,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CCamera@@6B@				; CCamera::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCCameraManager@@@@6B@		; CSingleton<CCameraManager>::`vftable'
PUBLIC	??_7CCameraManager@@6B@				; CCameraManager::`vftable'
PUBLIC	?aCameraManager@@3VCCameraManager@@A		; aCameraManager
PUBLIC	??_R4CCamera@@6B@				; CCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCamera@@@8				; CCamera `RTTI Type Descriptor'
PUBLIC	??_R3CCamera@@8					; CCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCamera@@8					; CCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCamera@@8			; CCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCameraManager@@6B@			; CCameraManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCameraManager@@@8			; CCameraManager `RTTI Type Descriptor'
PUBLIC	??_R3CCameraManager@@8				; CCameraManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCameraManager@@8				; CCameraManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCameraManager@@8			; CCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8	; CSingleton<CCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCCameraManager@@@@@8	; CSingleton<CCameraManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCCameraManager@@@@8		; CSingleton<CCameraManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCCameraManager@@@@8		; CSingleton<CCameraManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCCameraManager@@@@6B@	; CSingleton<CCameraManager>::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3e99999a
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@42652ee0
PUBLIC	__real@42a00000
PUBLIC	__real@43b40000
PUBLIC	__real@bf800000
PUBLIC	__real@c2a00000
PUBLIC	__real@c3b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXVec2Normalize@8:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixfDeterminant@4:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXMatrixRotationAxis@12:PROC
EXTRN	_D3DXMatrixLookAtRH@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?fMIN@@YAMMM@Z:PROC				; fMIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	??_ECCamera@@UAEPAXI@Z:PROC			; CCamera::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCCameraManager@@@@UAEPAXI@Z:PROC ; CSingleton<CCameraManager>::`vector deleting destructor'
EXTRN	??_ECCameraManager@@UAEPAXI@Z:PROC		; CCameraManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?CAMERA_MAX_DISTANCE@CCamera@@0MA:DWORD		; CCamera::CAMERA_MAX_DISTANCE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?aCameraManager@@3VCCameraManager@@A DB 014H DUP (?)	; aCameraManager
_BSS	ENDS
CRT$XCU	SEGMENT
?aCameraManager$initializer$@@3P6AXXZA DD FLAT:??__EaCameraManager@@YAXXZ ; aCameraManager$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3b40000
CONST	SEGMENT
__real@c3b40000 DD 0c3b40000r			; -360
CONST	ENDS
;	COMDAT __real@c2a00000
CONST	SEGMENT
__real@c2a00000 DD 0c2a00000r			; -80
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCCameraManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCCameraManager@@@@6B@ DD 00H		; CSingleton<CCameraManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCCameraManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCCameraManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8 ; CSingleton<CCameraManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCCameraManager@@@@8 DD 00H		; CSingleton<CCameraManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCCameraManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCCameraManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CCameraManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCCameraManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCCameraManager@@@@@8 ; CSingleton<CCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCameraManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCameraManager@@8 DD FLAT:??_R0?AVCCameraManager@@@8 ; CCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CCameraManager@@8
rdata$r	SEGMENT
??_R2CCameraManager@@8 DD FLAT:??_R1A@?0A@EA@CCameraManager@@8 ; CCameraManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CCameraManager@@8
rdata$r	SEGMENT
??_R3CCameraManager@@8 DD 00H				; CCameraManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCameraManager@@@8
data$r	SEGMENT
??_R0?AVCCameraManager@@@8 DD FLAT:??_7type_info@@6B@	; CCameraManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCameraManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCameraManager@@6B@
rdata$r	SEGMENT
??_R4CCameraManager@@6B@ DD 00H				; CCameraManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCameraManager@@@8
	DD	FLAT:??_R3CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCamera@@8 DD FLAT:??_R0?AVCCamera@@@8	; CCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CCamera@@8
rdata$r	SEGMENT
??_R2CCamera@@8 DD FLAT:??_R1A@?0A@EA@CCamera@@8	; CCamera::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCamera@@8
rdata$r	SEGMENT
??_R3CCamera@@8 DD 00H					; CCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCamera@@@8
data$r	SEGMENT
??_R0?AVCCamera@@@8 DD FLAT:??_7type_info@@6B@		; CCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCamera@@6B@
rdata$r	SEGMENT
??_R4CCamera@@6B@ DD 00H				; CCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCamera@@@8
	DD	FLAT:??_R3CCamera@@8
rdata$r	ENDS
;	COMDAT ??_7CCameraManager@@6B@
CONST	SEGMENT
??_7CCameraManager@@6B@ DD FLAT:??_R4CCameraManager@@6B@ ; CCameraManager::`vftable'
	DD	FLAT:??_ECCameraManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCCameraManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCCameraManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCCameraManager@@@@6B@ ; CSingleton<CCameraManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCCameraManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CCamera@@6B@
CONST	SEGMENT
??_7CCamera@@6B@ DD FLAT:??_R4CCamera@@6B@		; CCamera::`vftable'
	DD	FLAT:??_ECCamera@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z$2
__ehfuncinfo$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z$2
__ehfuncinfo$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddCamera@CCameraManager@@QAE_NE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCamera@CCameraManager@@QAE_NE@Z$3
__ehfuncinfo$?AddCamera@CCameraManager@@QAE_NE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddCamera@CCameraManager@@QAE_NE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCameraManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCameraManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCameraManager@@QAE@XZ$1
__ehfuncinfo$??0CCameraManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCameraManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0V?$tuple@ABE@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBEPAVCCamera@@@std@@QAE@AAV?$tuple@ABE@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABE@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBEPAVCCamera@@@std@@QAE@AAV?$tuple@ABE@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><std::tuple<unsigned char const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 975  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8a 00		 mov	 al, BYTE PTR [eax]
  0000a	88 01		 mov	 BYTE PTR [ecx], al
  0000c	8b c1		 mov	 eax, ecx
  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABE@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBEPAVCCamera@@@std@@QAE@AAV?$tuple@ABE@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><std::tuple<unsigned char const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0ABE$$Z$$V@?$pair@$$CBEPAVCCamera@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABE@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -4						; size = 1
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABE$$Z$$V@?$pair@$$CBEPAVCCamera@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABE@1@V?$tuple@$$V@1@@Z PROC ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><unsigned char const &>, COMDAT
; _this$ = ecx

; 981  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000b	8d 45 10	 lea	 eax, DWORD PTR __Val2$[ebp]
  0000e	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00011	c6 45 f8 00	 mov	 BYTE PTR $T1[ebp], 0
  00015	8b f1		 mov	 esi, ecx
  00017	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABE@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBEPAVCCamera@@@std@@QAE@AAV?$tuple@ABE@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><std::tuple<unsigned char const &>,std::tuple<>,0>
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABE$$Z$$V@?$pair@$$CBEPAVCCamera@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABE@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><unsigned char const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	53		 push	 ebx
  00021	8a 19		 mov	 bl, BYTE PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00025	38 58 10	 cmp	 BYTE PTR [eax+16], bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1708 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00044	5b		 pop	 ebx
$LN12@Find_lower:

; 1716 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 64   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 64   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FaCameraManager@@YAXXZ
text$yd	SEGMENT
??__FaCameraManager@@YAXXZ PROC				; `dynamic atexit destructor for 'aCameraManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?aCameraManager@@3VCCameraManager@@A ; aCameraManager
  00005	e9 00 00 00 00	 jmp	 ??1CCameraManager@@UAE@XZ ; CCameraManager::~CCameraManager
??__FaCameraManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'aCameraManager''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ??__EaCameraManager@@YAXXZ
text$di	SEGMENT
??__EaCameraManager@@YAXXZ PROC				; `dynamic initializer for 'aCameraManager'', COMDAT

; 11   : CCameraManager aCameraManager;	// CCameraManager Instance

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?aCameraManager@@3VCCameraManager@@A ; aCameraManager
  00005	e8 00 00 00 00	 call	 ??0CCameraManager@@QAE@XZ ; CCameraManager::CCameraManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__FaCameraManager@@YAXXZ ; `dynamic atexit destructor for 'aCameraManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EaCameraManager@@YAXXZ ENDP				; `dynamic initializer for 'aCameraManager''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCameraManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCameraManager@@UAEPAXI@Z PROC			; CCameraManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCameraManager@@UAE@XZ ; CCameraManager::~CCameraManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCCameraManager@@UAEPAXI@Z ENDP			; CCameraManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
;	COMDAT ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
_TEXT	SEGMENT
__Loc$3 = -32						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Myhead$ = 8						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z PROC ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[], COMDAT
; _this$ = ecx

; 324  :     mapped_type& operator[](const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002a	8b 5d 08	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  0002d	8d 45 e0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 55 e8	 mov	 edx, DWORD PTR __Loc$3[ebp+8]
  0003a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003e	75 07		 jne	 SHORT $LN4@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00040	8a 03		 mov	 al, BYTE PTR [ebx]
  00042	3a 42 10	 cmp	 al, BYTE PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00045	73 7e		 jae	 SHORT $LN3@operator
$LN4@operator:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00047	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0004e	0f 84 88 00 00
	00		 je	 $LN73@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 184  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00054	8b 07		 mov	 eax, DWORD PTR [edi]
  00056	89 45 08	 mov	 DWORD PTR __Myhead$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00059	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005c	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  00071	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00073	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00076	51		 push	 ecx
  00077	8b c4		 mov	 eax, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

  00079	89 18		 mov	 DWORD PTR [eax], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0007b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$?0ABE$$Z$$V@?$pair@$$CBEPAVCCamera@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABE@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned char const ,CCamera *>::pair<unsigned char const ,CCamera *><unsigned char const &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00088	8d 45 08	 lea	 eax, DWORD PTR __Myhead$[ebp]
  0008b	50		 push	 eax
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00092	8d 45 08	 lea	 eax, DWORD PTR __Myhead$[ebp]
  00095	50		 push	 eax
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0009f	8d 45 08	 lea	 eax, DWORD PTR __Myhead$[ebp]
  000a2	50		 push	 eax
  000a3	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>
  000ac	83 c4 18	 add	 esp, 24			; 00000018H

; 810  :         this->_Ptr->_Color = _Red;

  000af	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 190  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b5	8b cf		 mov	 ecx, edi
  000b7	56		 push	 esi
  000b8	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]
  000bb	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]
  000be	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
  000c3	8b d0		 mov	 edx, eax
$LN3@operator:

; 325  :         return _Try_emplace(_Keyval).first->_Myval.second;

  000c5	8d 42 14	 lea	 eax, DWORD PTR [edx+20]

; 326  :     }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
$LN73@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  000dc	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN71@operator:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ENDP ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1186 = -8						; size = 4
tv1182 = -8						; size = 4
tv1149 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 504  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	75 18		 jne	 SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00027	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002b	74 04		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002d	8b f8		 mov	 edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0002f	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	3b ca		 cmp	 ecx, edx

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00039	0f 85 8b 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00046	75 03		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00050	75 05		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00052	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00055	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00057	39 16		 cmp	 DWORD PTR [esi], edx
  00059	75 04		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005b	89 3e		 mov	 DWORD PTR [esi], edi

; 529  :             } else {

  0005d	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  00062	8b 03		 mov	 eax, DWORD PTR [ebx]
  00064	39 10		 cmp	 DWORD PTR [eax], edx
  00066	75 2b		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00068	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006c	74 04		 je	 SHORT $LN42@Extract
  0006e	8b d6		 mov	 edx, esi
  00070	eb 1c		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00072	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00074	8b d7		 mov	 edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00076	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007a	75 12		 jne	 SHORT $LN48@Extract
  0007c	0f 1f 40 00	 npad	 4
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008e	89 10		 mov	 DWORD PTR [eax], edx
  00090	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00098	75 2b		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@Extract
  000a0	8b ce		 mov	 ecx, esi
  000a2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000a8	eb 7c		 jmp	 SHORT $LN55@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000ad	8b cf		 mov	 ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

  000b5	8b c8		 mov	 ecx, eax
  000b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000c2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000c5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000c8	eb 5c		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  000d1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000d4	75 04		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000d6	8b f1		 mov	 esi, ecx

; 548  :             } else { // successor further down, link in place of erased

  000d8	eb 1a		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

  000da	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000de	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e1	75 03		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000e3	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000e6	89 3e		 mov	 DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000e8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f6	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  000f9	75 05		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000fe	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00100	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00103	39 10		 cmp	 DWORD PTR [eax], edx
  00105	75 04		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00109	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00111	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00117	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0011a	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 108  :     _Right   = _STD move(_Tmp);

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00123	88 50 0c	 mov	 BYTE PTR [eax+12], dl
$LN55@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00126	80 fa 01	 cmp	 dl, 1
  00129	0f 85 46 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 37 01 00
	00		 je	 $LN3@Extract
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Extract:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f8	 mov	 DWORD PTR tv1186[ebp], esi
  00147	0f 85 24 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	3b f9		 cmp	 edi, ecx
  00151	0f 85 a2 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  00157	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0015a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0015e	75 43		 jne	 SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

  00160	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

  00167	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00176	75 03		 jne	 SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00178	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00181	8b 03		 mov	 eax, DWORD PTR [ebx]
  00183	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00186	75 05		 jne	 SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

  00188	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0018b	eb 0e		 jmp	 SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0018d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00190	3b 30		 cmp	 esi, DWORD PTR [eax]
  00192	75 04		 jne	 SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00194	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00196	eb 03		 jmp	 SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  0019b	89 31		 mov	 DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  0019d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

  001a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  001a3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a7	0f 85 b1 00 00
	00		 jne	 $LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  001b3	75 0d		 jne	 SHORT $LN89@Extract
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001bc	0f 84 98 00 00
	00		 je	 $LN93@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c5	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001c9	75 13		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  001cb	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  001cf	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

  001d3	51		 push	 ecx
  001d4	8b cb		 mov	 ecx, ebx
  001d6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  001db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  001de	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001e1	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

  001e4	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  001e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

  001eb	8b cb		 mov	 ecx, ebx
  001ed	56		 push	 esi
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  001f7	eb 78		 jmp	 SHORT $LN3@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  001f9	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001fd	75 44		 jne	 SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

  001ff	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00203	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

  00205	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00209	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020c	89 06		 mov	 DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0020e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	75 03		 jne	 SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00217	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0021a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	75 05		 jne	 SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

  00227	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0022a	eb 0f		 jmp	 SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0022c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0022f	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00232	75 05		 jne	 SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00237	eb 02		 jmp	 SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00239	89 08		 mov	 DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0023b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

  0023e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

  00241	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  00243	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00247	75 15		 jne	 SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  00250	75 3a		 jne	 SHORT $LN90@Extract
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00258	75 32		 jne	 SHORT $LN90@Extract
$LN93@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0025a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  0025e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00260	8b 4d f8	 mov	 ecx, DWORD PTR tv1186[ebp]
  00263	8b f9		 mov	 edi, ecx
  00265	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00268	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026b	0f 85 cf fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00271	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  00275	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00278	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0027b	85 c9		 test	 ecx, ecx
  0027d	74 04		 je	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  0027f	49		 dec	 ecx
  00280	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  0028c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028e	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00292	75 12		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00294	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  00298	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

  0029c	51		 push	 ecx
  0029d	8b cb		 mov	 ecx, ebx
  0029f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002a6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002a9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

  002ac	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  002b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

  002b2	8b cb		 mov	 ecx, ebx
  002b4	56		 push	 esi
  002b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
  002be	eb b1		 jmp	 SHORT $LN3@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetTerrainCollision@CCameraManager@@QAEX_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?SetTerrainCollision@CCameraManager@@QAEX_N@Z PROC	; CCameraManager::SetTerrainCollision, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 629  : 	m_pCurrentCamera->SetTerrainCollision(bEnable);

  00003	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00006	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]
  00009	88 81 34 03 00
	00		 mov	 BYTE PTR [ecx+820], al

; 630  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetTerrainCollision@CCameraManager@@QAEX_N@Z ENDP	; CCameraManager::SetTerrainCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ
_TEXT	SEGMENT
?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ PROC	; CCameraManager::isTerrainCollisionEnable, COMDAT
; _this$ = ecx

; 624  : 	return m_pCurrentCamera->isTerrainCollisionEnable();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8a 80 34 03 00
	00		 mov	 al, BYTE PTR [eax+820]

; 625  : }

  00009	c3		 ret	 0
?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ ENDP	; CCameraManager::isTerrainCollisionEnable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?GetCurrentCameraNum@CCameraManager@@QAEEXZ
_TEXT	SEGMENT
_itor$1 = -4						; size = 4
?GetCurrentCameraNum@CCameraManager@@QAEEXZ PROC	; CCameraManager::GetCurrentCameraNum, COMDAT
; _this$ = ecx

; 613  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 614  : 	if (!m_pCurrentCamera)

  00006	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  00009	85 ff		 test	 edi, edi
  0000b	74 27		 je	 SHORT $LN3@GetCurrent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  00015	3b c6		 cmp	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 616  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00017	74 1b		 je	 SHORT $LN3@GetCurrent
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetCurrent:

; 617  : 		if(m_pCurrentCamera == (*itor).second)

  00020	3b 78 14	 cmp	 edi, DWORD PTR [eax+20]
  00023	74 17		 je	 SHORT $LN41@GetCurrent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 198  :         _Mybase::operator++();

  00025	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  00028	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  00030	3b c6		 cmp	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 616  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00032	75 ec		 jne	 SHORT $LL4@GetCurrent
$LN3@GetCurrent:
  00034	5f		 pop	 edi

; 619  : 	return NO_CURRENT_CAMERA;

  00035	32 c0		 xor	 al, al

; 620  : }

  00037	5e		 pop	 esi
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN41@GetCurrent:

; 618  : 			return (*itor).first;

  0003c	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  0003f	5f		 pop	 edi

; 620  : }

  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?GetCurrentCameraNum@CCameraManager@@QAEEXZ ENDP	; CCameraManager::GetCurrentCameraNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?isCurrentCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
_ucCameraNum$ = 8					; size = 1
?isCurrentCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::isCurrentCamera, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 590  : 	if (m_CameraMap[ucCameraNum] == m_pCurrentCamera)

  00006	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00009	50		 push	 eax
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00017	5e		 pop	 esi
  00018	0f 94 c0	 sete	 al

; 591  : 		return true;
; 592  : 	return false;
; 593  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?isCurrentCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::isCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?ResetToPreviousCamera@CCameraManager@@QAEXXZ
_TEXT	SEGMENT
?ResetToPreviousCamera@CCameraManager@@QAEXXZ PROC	; CCameraManager::ResetToPreviousCamera, COMDAT
; _this$ = ecx

; 582  : 	if (!m_pPreviousCamera)
; 583  : 		assert(false);
; 584  : 	m_pCurrentCamera = m_pPreviousCamera;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 585  : 	m_pPreviousCamera = NULL;

  00006	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 586  : }

  0000d	c3		 ret	 0
?ResetToPreviousCamera@CCameraManager@@QAEXXZ ENDP	; CCameraManager::ResetToPreviousCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetCurrentCamera@CCameraManager@@QAEXE@Z
_TEXT	SEGMENT
_ucCameraNum$ = 8					; size = 1
?SetCurrentCamera@CCameraManager@@QAEXE@Z PROC		; CCameraManager::SetCurrentCamera, COMDAT
; _this$ = ecx

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 574  : 	if (m_pCurrentCamera != m_CameraMap[ucCameraNum])

  00006	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000e	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00013	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00016	3b 10		 cmp	 edx, DWORD PTR [eax]
  00018	74 03		 je	 SHORT $LN2@SetCurrent

; 575  : 		m_pPreviousCamera = m_pCurrentCamera;

  0001a	89 56 10	 mov	 DWORD PTR [esi+16], edx
$LN2@SetCurrent:

; 576  : 
; 577  : 	m_pCurrentCamera = m_CameraMap[ucCameraNum];

  0001d	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00020	50		 push	 eax
  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00029	5f		 pop	 edi
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002f	5e		 pop	 esi

; 578  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetCurrentCamera@CCameraManager@@QAEXE@Z ENDP		; CCameraManager::SetCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ PROC ; CCameraManager::GetCurrentCamera, COMDAT
; _this$ = ecx

; 567  : 	if (!m_pCurrentCamera)
; 568  : 		assert(false);
; 569  : 	return m_pCurrentCamera;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 570  : }

  00003	c3		 ret	 0
?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ENDP ; CCameraManager::GetCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?RemoveCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_ucCameraNum$ = 8					; size = 1
?RemoveCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::RemoveCamera, COMDAT
; _this$ = ecx

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  0000a	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 605  : 	TCameraMap::iterator itor = m_CameraMap.find(ucCameraNum);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 28		 jne	 SHORT $LN54@RemoveCame
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00022	8a 45 08	 mov	 al, BYTE PTR _ucCameraNum$[ebp]
  00025	3a 41 10	 cmp	 al, BYTE PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 20		 jb	 SHORT $LN54@RemoveCame

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 606  : 	if(m_CameraMap.end() == itor)

  0002c	74 1c		 je	 SHORT $LN54@RemoveCame
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1389 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0002e	51		 push	 ecx
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00036	6a 18		 push	 24			; 00000018H
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003e	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 609  : 	return true;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 610  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN54@RemoveCame:

; 607  : 		return false;

  0004a	32 c0		 xor	 al, al
  0004c	5e		 pop	 esi

; 610  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?RemoveCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::RemoveCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?AddCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
__Loc$2 = -48						; size = 12
__Loc$3 = -48						; size = 12
$T4 = -36						; size = 12
$T5 = -32						; size = 8
$T6 = -24						; size = 8
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Myhead$8 = 8						; size = 4
$T9 = 8							; size = 4
_ucCameraNum$ = 8					; size = 1
?AddCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::AddCamera, COMDAT
; _this$ = ecx

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddCamera@CCameraManager@@QAE_NE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  0002b	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 597  : 	if(m_CameraMap.end() != m_CameraMap.find(ucCameraNum))

  0002c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002f	8d 45 d0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00032	8b cf		 mov	 ecx, edi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 45 d8	 mov	 eax, DWORD PTR __Loc$3[ebp+8]
  0003d	8a 5d 08	 mov	 bl, BYTE PTR _ucCameraNum$[ebp]
  00040	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00044	75 05		 jne	 SHORT $LN10@AddCamera
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00046	3a 58 10	 cmp	 bl, BYTE PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00049	73 02		 jae	 SHORT $LN9@AddCamera
$LN10@AddCamera:

; 1463 :         return _Get_scary()->_Myhead;

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@AddCamera:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004d	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 597  : 	if(m_CameraMap.end() != m_CameraMap.find(ucCameraNum))

  0004f	74 16		 je	 SHORT $LN2@AddCamera

; 598  : 		return false;

  00051	32 c0		 xor	 al, al

; 601  : }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
$LN2@AddCamera:

; 599  : 	m_CameraMap.insert(TCameraMap::value_type(ucCameraNum, new CCamera));

  00067	68 38 03 00 00	 push	 824			; 00000338H
  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00071	83 c4 04	 add	 esp, 4
  00074	89 45 08	 mov	 DWORD PTR $T9[ebp], eax
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN4@AddCamera
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ??0CCamera@@QAE@XZ	; CCamera::CCamera
  00082	eb 02		 jmp	 SHORT $LN107@AddCamera
$LN4@AddCamera:
  00084	33 c0		 xor	 eax, eax
$LN107@AddCamera:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00086	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  00089	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0008b	89 45 ec	 mov	 DWORD PTR $T6[ebp+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  0008e	8d 45 e8	 lea	 eax, DWORD PTR $T6[ebp]
  00091	50		 push	 eax
  00092	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00095	88 5d e8	 mov	 BYTE PTR $T6[ebp], bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
  0009e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000a2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a5	66 0f d6 45 d0	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 05		 jne	 SHORT $LN46@AddCamera
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  000b0	3a 58 10	 cmp	 bl, BYTE PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000b3	73 6f		 jae	 SHORT $LN92@AddCamera
$LN46@AddCamera:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  000b5	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  000bc	74 7c		 je	 SHORT $LN109@AddCamera

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	89 45 08	 mov	 DWORD PTR __Myhead$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000c3	89 7d e0	 mov	 DWORD PTR $T5[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c6	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000cf	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000db	8b 4d e8	 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  000de	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000e0	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  000e3	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000e6	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000e9	8d 45 08	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  000ec	50		 push	 eax
  000ed	56		 push	 esi
  000ee	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000f3	8d 45 08	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  000f6	50		 push	 eax
  000f7	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00100	8d 45 08	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  00103	50		 push	 eax
  00104	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * &>
  0010d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 810  :         this->_Ptr->_Color = _Red;

  00110	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00116	8b cf		 mov	 ecx, edi
  00118	56		 push	 esi
  00119	ff 75 d4	 push	 DWORD PTR __Loc$2[ebp+4]
  0011c	ff 75 d0	 push	 DWORD PTR __Loc$2[ebp]
  0011f	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
$LN92@AddCamera:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 600  : 	return true;

  00124	b0 01		 mov	 al, 1

; 601  : }

  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 04 00	 ret	 4
$LN109@AddCamera:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  0013a	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN106@AddCamera:
  0013f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddCamera@CCameraManager@@QAE_NE@Z$3:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddCamera@CCameraManager@@QAE_NE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddCamera@CCameraManager@@QAE_NE@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::AddCamera
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ??1CCameraManager@@UAE@XZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_itor$1 = -4						; size = 4
??1CCameraManager@@UAE@XZ PROC				; CCameraManager::~CCameraManager, COMDAT
; _this$ = ecx

; 557  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00009	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 557  : {

  0000c	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCameraManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00016	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 557  : {

  00018	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  0001e	3b c6		 cmp	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 558  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00020	74 1e		 je	 SHORT $LN3@CCameraMan
$LL4@CCameraMan:

; 559  : 	{
; 560  : 		delete (*itor).second;

  00022	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00025	85 c9		 test	 ecx, ecx
  00027	74 06		 je	 SHORT $LN2@CCameraMan
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	6a 01		 push	 1
  0002d	ff 10		 call	 DWORD PTR [eax]
$LN2@CCameraMan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 198  :         _Mybase::operator++();

  0002f	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  00032	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00037	8b 33		 mov	 esi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  0003c	3b c6		 cmp	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 558  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  0003e	75 e2		 jne	 SHORT $LL4@CCameraMan
$LN3@CCameraMan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00040	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00043	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00047	75 27		 jne	 SHORT $LN40@CCameraMan
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@CCameraMan:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00050	ff 77 08	 push	 DWORD PTR [edi+8]
  00053	8b cb		 mov	 ecx, ebx
  00055	53		 push	 ebx
  00056	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0005b	8b c7		 mov	 eax, edi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0005d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0005f	6a 18		 push	 24			; 00000018H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00067	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0006a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006e	74 e0		 je	 SHORT $LL39@CCameraMan
$LN40@CCameraMan:

; 1449 :         _Head->_Parent  = _Head;

  00070	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00073	8b cb		 mov	 ecx, ebx

; 1450 :         _Head->_Left    = _Head;

  00075	89 36		 mov	 DWORD PTR [esi], esi

; 1451 :         _Head->_Right   = _Head;

  00077	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1452 :         _Scary->_Mysize = 0;

  0007a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00081	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 19   : 	{

  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@
  00092	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 563  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
??1CCameraManager@@UAE@XZ ENDP				; CCameraManager::~CCameraManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ??0CCameraManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Pnode$2 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCameraManager@@QAE@XZ PROC				; CCameraManager::CCameraManager, COMDAT
; _this$ = ecx

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCameraManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, ebx ; CSingleton<CCameraManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 549  : {

  00033	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00036	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CCameraManager@@6B@
  0003c	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003f	6a 18		 push	 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 549  : {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00048	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0004e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00055	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  0005a	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0005f	50		 push	 eax
  00060	56		 push	 esi
  00061	89 75 f0	 mov	 DWORD PTR __Pnode$2[ebp], esi
  00064	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00069	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0006c	50		 push	 eax
  0006d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00076	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  00079	50		 push	 eax
  0007a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> *,std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  00083	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H
  00089	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0008c	89 37		 mov	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 550  : 	AddCamera(DEFAULT_PERSPECTIVE_CAMERA);

  0008e	6a 01		 push	 1
  00090	8b cb		 mov	 ecx, ebx
  00092	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00096	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  0009d	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  000a4	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 551  : 	AddCamera(DEFAULT_ORTHO_CAMERA);

  000a9	6a 02		 push	 2
  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 552  : 
; 553  : 	SetCurrentCamera(DEFAULT_PERSPECTIVE_CAMERA);

  000b2	6a 01		 push	 1
  000b4	8b cb		 mov	 ecx, ebx
  000b6	e8 00 00 00 00	 call	 ?SetCurrentCamera@CCameraManager@@QAEXE@Z ; CCameraManager::SetCurrentCamera

; 554  : }

  000bb	8b c3		 mov	 eax, ebx
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCameraManager@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCCameraManager@@@@UAE@XZ ; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
__unwindfunclet$??0CCameraManager@@QAE@XZ$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CCameraManager@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCameraManager@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCameraManager@@QAE@XZ ENDP				; CCameraManager::CCameraManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z PROC	; CSingleton<CCameraManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z ENDP	; CSingleton<CCameraManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCCameraManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCCameraManager@@@@UAE@XZ PROC		; CSingleton<CCameraManager>::~CSingleton<CCameraManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCCameraManager@@@@UAE@XZ ENDP		; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCamera@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCamera@@UAEPAXI@Z PROC				; CCamera::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCamera@@UAE@XZ	; CCamera::~CCamera
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 38 03 00 00	 push	 824			; 00000338H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCamera@@UAEPAXI@Z ENDP				; CCamera::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetTargetHeight@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fTarget$ = 8						; size = 4
?SetTargetHeight@CCamera@@QAEXM@Z PROC			; CCamera::SetTargetHeight, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	m_fTarget_=fTarget;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTarget$[ebp]
  00008	f3 0f 11 81 f8
	02 00 00	 movss	 DWORD PTR [ecx+760], xmm0

; 26   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetTargetHeight@CCamera@@QAEXM@Z ENDP			; CCamera::SetTargetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?GetTargetHeight@CCamera@@QAEMXZ
_TEXT	SEGMENT
?GetTargetHeight@CCamera@@QAEMXZ PROC			; CCamera::GetTargetHeight, COMDAT
; _this$ = ecx

; 20   : 	return m_fTarget_;

  00000	d9 81 f8 02 00
	00		 fld	 DWORD PTR [ecx+760]

; 21   : }

  00006	c3		 ret	 0
?GetTargetHeight@CCamera@@QAEMXZ ENDP			; CCamera::GetTargetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?CalculateRoll@CCamera@@IAEXXZ
_TEXT	SEGMENT
_v2ViewXY$ = -8						; size = 8
?CalculateRoll@CCamera@@IAEXXZ PROC			; CCamera::CalculateRoll, COMDAT
; _this$ = ecx

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 521  : 	D3DXVECTOR2 v2ViewXY;
; 522  : 	v2ViewXY.x = m_v3View.x;
; 523  : 	v2ViewXY.y = m_v3View.y;
; 524  :  	D3DXVec2Normalize(&v2ViewXY, &v2ViewXY);

  00009	8d 45 f8	 lea	 eax, DWORD PTR _v2ViewXY$[ebp]
  0000c	50		 push	 eax
  0000d	50		 push	 eax
  0000e	f3 0f 10 46 54	 movss	 xmm0, DWORD PTR [esi+84]
  00013	f3 0f 11 45 f8	 movss	 DWORD PTR _v2ViewXY$[ebp], xmm0
  00018	f3 0f 10 46 58	 movss	 xmm0, DWORD PTR [esi+88]
  0001d	f3 0f 11 45 fc	 movss	 DWORD PTR _v2ViewXY$[ebp+4], xmm0
  00022	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1132 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  00027	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2ViewXY$[ebp]
  0002c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@00000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 526  : 	if (fDot >= 1)

  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1132 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  0003c	f3 0f 58 4d fc	 addss	 xmm1, DWORD PTR _v2ViewXY$[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 526  : 	if (fDot >= 1)

  00041	0f 2f c8	 comiss	 xmm1, xmm0
  00044	73 0c		 jae	 SHORT $LN4@CalculateR

; 527  : 		fDot = 1;
; 528  : 	else if (fDot <= -1)

  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004e	f3 0f 5f c1	 maxss	 xmm0, xmm1
$LN4@CalculateR:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  00052	0f 5a c0	 cvtps2pd xmm0, xmm0
  00055	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1143 :     return pV1->x * pV2->y - pV1->y * pV2->x;

  0005a	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _v2ViewXY$[ebp+4]
  0005f	0f 57 db	 xorps	 xmm3, xmm3
  00062	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2ViewXY$[ebp]
  00067	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  0006b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1143 :     return pV1->x * pV2->y - pV1->y * pV2->x;

  0006f	f3 0f 5c ca	 subss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 531  : 	fDot *= (180.0f / D3DX_PI);

  00073	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0

; 532  : 	float fCross = D3DXVec2CCW (&v2ViewXY, &D3DXVECTOR2(0.0f, 1.0f));
; 533  : 	if ( 0 > fCross)

  0007b	0f 2f d9	 comiss	 xmm3, xmm1
  0007e	76 07		 jbe	 SHORT $LN17@CalculateR

; 534  : 	{
; 535  : 		fDot = -fDot;

  00080	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
$LN17@CalculateR:

; 536  : 	}
; 537  : 
; 538  : 	m_fRoll = fDot;
; 539  : 
; 540  : }

  00087	f3 0f 11 86 30
	01 00 00	 movss	 DWORD PTR [esi+304], xmm0
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?CalculateRoll@CCamera@@IAEXXZ ENDP			; CCamera::CalculateRoll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetViewMatrix@CCamera@@IAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
tv4839 = -48						; size = 4
$T2 = -44						; size = 4
_fRayRange$1$ = -44					; size = 4
_fRayRange$1$ = -44					; size = 4
_fRayRange$1$ = -44					; size = 4
_fRayRange$1$ = -44					; size = 4
_fRayRange$1$ = -44					; size = 4
_fRayRange$1$ = -44					; size = 4
_this$1$ = -44						; size = 4
tv4843 = -44						; size = 4
tv4816 = -44						; size = 4
tv4789 = -44						; size = 4
tv4759 = -44						; size = 4
_fDeterminantD3DMatView$ = -40				; size = 4
$T3 = -36						; size = 4
$T4 = -36						; size = 4
$T5 = -36						; size = 4
$T6 = -36						; size = 4
tv4842 = -36						; size = 4
$T7 = -32						; size = 4
$T8 = -32						; size = 4
$T9 = -32						; size = 4
tv4844 = -32						; size = 4
tv4724 = -32						; size = 4
$T10 = -28						; size = 12
$T11 = -28						; size = 12
$T12 = -28						; size = 12
$T13 = -28						; size = 12
$T14 = -28						; size = 12
$T15 = -28						; size = 12
$T16 = -28						; size = 12
$T17 = -28						; size = 12
$T18 = -28						; size = 12
$T19 = -28						; size = 12
$T20 = -28						; size = 12
$T21 = -28						; size = 12
$T22 = -28						; size = 12
$T23 = -28						; size = 12
$T24 = -28						; size = 12
$T25 = -28						; size = 12
$T26 = -28						; size = 12
$T27 = -28						; size = 12
$T28 = -28						; size = 12
_v3CenterRay$ = -28					; size = 12
$T29 = -28						; size = 12
tv4967 = -16						; size = 16
?SetViewMatrix@CCamera@@IAEXXZ PROC			; CCamera::SetViewMatrix, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 38	 sub	 esp, 56			; 00000038H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 257  : 	m_v3View = m_v3Target - m_v3Eye;

  0000d	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00010	89 7c 24 14	 mov	 DWORD PTR _this$1$[esp+64], edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00014	f3 0f 10 57 3c	 movss	 xmm2, DWORD PTR [edi+60]
  00019	f3 0f 10 4f 40	 movss	 xmm1, DWORD PTR [edi+64]
  0001e	f3 0f 5c 4f 34	 subss	 xmm1, DWORD PTR [edi+52]
  00023	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  00028	f3 0f 5c 57 30	 subss	 xmm2, DWORD PTR [edi+48]
  0002d	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 257  : 	m_v3View = m_v3Target - m_v3Eye;

  00032	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00035	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T29[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 257  : 	m_v3View = m_v3Target - m_v3Eye;

  0003b	8b 44 24 2c	 mov	 eax, DWORD PTR $T29[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 257  : 	m_v3View = m_v3Target - m_v3Eye;

  00047	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  0004b	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0004e	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00052	0f 57 c8	 xorps	 xmm1, xmm0
  00055	0f 11 4c 24 30	 movups	 XMMWORD PTR tv4967[esp+64], xmm1

; 180  :     x = fx;

  0005a	f3 0f 11 4c 24
	24		 movss	 DWORD PTR _v3CenterRay$[esp+64], xmm1

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00060	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00065	0f 57 c8	 xorps	 xmm1, xmm0
  00068	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR $T1[esp+64], xmm1

; 181  :     y = fy;

  0006e	f3 0f 11 4c 24
	28		 movss	 DWORD PTR _v3CenterRay$[esp+68], xmm1

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00074	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00079	0f 57 c8	 xorps	 xmm1, xmm0
  0007c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR tv4839[esp+64], xmm1

; 182  :     z = fz;

  00082	f3 0f 11 4c 24
	2c		 movss	 DWORD PTR _v3CenterRay$[esp+72], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 259  :  	CalculateRoll();

  00088	e8 00 00 00 00	 call	 ?CalculateRoll@CCamera@@IAEXXZ ; CCamera::CalculateRoll
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0008d	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00092	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  00096	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0009b	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0009f	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a3	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a7	f3 0f 58 d1	 addss	 xmm2, xmm1
  000ab	0f 57 c9	 xorps	 xmm1, xmm1
  000ae	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000b2	0f 5a c2	 cvtps2pd xmm0, xmm2
  000b5	66 0f 2e c8	 ucomisd xmm1, xmm0
  000b9	77 06		 ja	 SHORT $LN273@SetViewMat
  000bb	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000bf	eb 05		 jmp	 SHORT $LN274@SetViewMat
$LN273@SetViewMat:
  000c1	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN274@SetViewMat:
  000c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 262  : 	D3DXVec3Normalize(&m_v3View , &m_v3View);

  000ca	56		 push	 esi
  000cb	56		 push	 esi
  000cc	f3 0f 11 87 34
	01 00 00	 movss	 DWORD PTR [edi+308], xmm0
  000d4	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000d9	f3 0f 10 6f 48	 movss	 xmm5, DWORD PTR [edi+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 264  :     D3DXVec3Cross(&m_v3Cross, &m_v3Up, &m_v3View);

  000de	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000e1	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000e6	0f 28 c5	 movaps	 xmm0, xmm5
  000e9	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  000ee	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  000f2	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000f6	0f 28 d1	 movaps	 xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 265  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  000f9	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000fa	f3 0f 59 7f 4c	 mulss	 xmm7, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 265  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  000ff	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00100	f3 0f 59 57 50	 mulss	 xmm2, DWORD PTR [edi+80]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00105	f3 0f 59 4f 4c	 mulss	 xmm1, DWORD PTR [edi+76]
  0010a	f3 0f 59 eb	 mulss	 xmm5, xmm3
  0010e	f3 0f 5c d0	 subss	 xmm2, xmm0
  00112	f3 0f 59 5f 50	 mulss	 xmm3, DWORD PTR [edi+80]
  00117	f3 0f 5c e9	 subss	 xmm5, xmm1
  0011b	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  0011f	f3 0f 11 38	 movss	 DWORD PTR [eax], xmm7
  00123	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00128	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 265  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  0012d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00132	f3 0f 10 2e	 movss	 xmm5, DWORD PTR [esi]
  00136	f3 0f 10 7f 68	 movss	 xmm7, DWORD PTR [edi+104]
  0013b	0f 28 c5	 movaps	 xmm0, xmm5
  0013e	f3 0f 10 5f 64	 movss	 xmm3, DWORD PTR [edi+100]
  00143	f3 0f 10 4f 60	 movss	 xmm1, DWORD PTR [edi+96]
  00148	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0014c	0f 28 d1	 movaps	 xmm2, xmm1
  0014f	f3 0f 59 7e 04	 mulss	 xmm7, DWORD PTR [esi+4]
  00154	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00159	f3 0f 59 4e 04	 mulss	 xmm1, DWORD PTR [esi+4]
  0015e	f3 0f 59 eb	 mulss	 xmm5, xmm3
  00162	f3 0f 5c d0	 subss	 xmm2, xmm0
  00166	f3 0f 59 5e 08	 mulss	 xmm3, DWORD PTR [esi+8]

; 1280 : 
; 1281 :     *pOut = v;

  0016b	8d 77 48	 lea	 esi, DWORD PTR [edi+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 268  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  0016e	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0016f	f3 0f 5c e9	 subss	 xmm5, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 268  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  00173	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00174	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  00178	f3 0f 11 3e	 movss	 DWORD PTR [esi], xmm7
  0017c	f3 0f 11 56 04	 movss	 DWORD PTR [esi+4], xmm2
  00181	f3 0f 11 6e 08	 movss	 DWORD PTR [esi+8], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 268  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  00186	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0018b	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0018f	0f 57 d2	 xorps	 xmm2, xmm2
  00192	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00197	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0019b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0019f	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 271  : 	if (m_fPitch >= 1)

  001a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001ab	f3 0f 58 4e 08	 addss	 xmm1, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 271  : 	if (m_fPitch >= 1)

  001b0	0f 2f c8	 comiss	 xmm1, xmm0
  001b3	73 13		 jae	 SHORT $LN4@SetViewMat

; 272  : 		m_fPitch = 1;
; 273  : 	else if (m_fPitch <= -1)

  001b5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  001bd	0f 28 c1	 movaps	 xmm0, xmm1
  001c0	0f 2f d1	 comiss	 xmm2, xmm1
  001c3	72 03		 jb	 SHORT $LN4@SetViewMat

; 274  : 		m_fPitch = -1;

  001c5	0f 28 c2	 movaps	 xmm0, xmm2
$LN4@SetViewMat:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  001c8	0f 5a c0	 cvtps2pd xmm0, xmm0
  001cb	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  001d0	0f 57 c9	 xorps	 xmm1, xmm1
  001d3	0f 57 d2	 xorps	 xmm2, xmm2
  001d6	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 277  : 	if ( 0 < m_v3View.z )

  001da	f3 0f 10 47 5c	 movss	 xmm0, DWORD PTR [edi+92]
  001df	0f 2f c2	 comiss	 xmm0, xmm2
  001e2	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42652ee0
  001ea	f3 0f 11 8f 2c
	01 00 00	 movss	 DWORD PTR [edi+300], xmm1
  001f2	76 0f		 jbe	 SHORT $LN5@SetViewMat

; 278  : 		m_fPitch = -m_fPitch;

  001f4	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  001fb	f3 0f 11 8f 2c
	01 00 00	 movss	 DWORD PTR [edi+300], xmm1
$LN5@SetViewMat:

; 279  : 
; 280  : 	D3DXMatrixLookAtRH(&m_matView, &m_v3Eye, &m_v3Target, &m_v3Up);

  00203	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00206	50		 push	 eax
  00207	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  0020a	50		 push	 eax
  0020b	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  0020e	50		 push	 eax
  0020f	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  00212	56		 push	 esi
  00213	e8 00 00 00 00	 call	 _D3DXMatrixLookAtRH@16

; 281  : 
; 282  : 	float fDeterminantD3DMatView = D3DXMatrixfDeterminant(&m_matView);

  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 _D3DXMatrixfDeterminant@4

; 283  :     D3DXMatrixInverse(&m_matInverseView, &fDeterminantD3DMatView, &m_matView);

  0021e	56		 push	 esi
  0021f	8d 44 24 1c	 lea	 eax, DWORD PTR _fDeterminantD3DMatView$[esp+68]
  00223	81 c7 ac 00 00
	00		 add	 edi, 172		; 000000acH
  00229	50		 push	 eax
  0022a	57		 push	 edi
  0022b	d9 5c 24 24	 fstp	 DWORD PTR _fDeterminantD3DMatView$[esp+76]
  0022f	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12

; 285  : 	m_matBillboard = m_matInverseView;

  00234	8b 44 24 14	 mov	 eax, DWORD PTR _this$1$[esp+64]
  00238	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0023b	0f 11 80 ec 00
	00 00		 movups	 XMMWORD PTR [eax+236], xmm0
  00242	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00246	0f 11 80 fc 00
	00 00		 movups	 XMMWORD PTR [eax+252], xmm0
  0024d	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  00251	0f 11 80 0c 01
	00 00		 movups	 XMMWORD PTR [eax+268], xmm0
  00258	0f 10 47 30	 movups	 xmm0, XMMWORD PTR [edi+48]
  0025c	8b f8		 mov	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  0025e	8d b7 40 02 00
	00		 lea	 esi, DWORD PTR [edi+576]

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00264	56		 push	 esi
  00265	56		 push	 esi

; 22   : 			m_v3Start = v3Start;

  00266	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 285  : 	m_matBillboard = m_matInverseView;

  00269	0f 11 87 1c 01
	00 00		 movups	 XMMWORD PTR [edi+284], xmm0

; 286  :     m_matBillboard._41 = 0.0f;

  00270	c7 87 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+284], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  0027a	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  0027f	66 0f d6 87 28
	02 00 00	 movq	 QWORD PTR [edi+552], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 291  : 	m_ViewRay.SetDirection(v3CenterRay, m_fDistance);

  00287	f3 0f 10 87 34
	01 00 00	 movss	 xmm0, DWORD PTR [edi+308]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  0028f	89 87 30 02 00
	00		 mov	 DWORD PTR [edi+560], eax

; 28   : 			m_v3Direction = v3Dir;

  00295	8b 44 24 34	 mov	 eax, DWORD PTR _v3CenterRay$[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 291  : 	m_ViewRay.SetDirection(v3CenterRay, m_fDistance);

  00299	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  0029f	f3 0f 7e 44 24
	2c		 movq	 xmm0, QWORD PTR _v3CenterRay$[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 287  :     m_matBillboard._42 = 0.0f;

  002a5	c7 87 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+288], 0

; 288  :     m_matBillboard._43 = 0.0f;

  002af	c7 87 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+292], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  002b9	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  002bd	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  002c0	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  002c5	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  002cb	f3 0f 11 9f 4c
	02 00 00	 movss	 DWORD PTR [edi+588], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002d3	0f 28 d3	 movaps	 xmm2, xmm3
  002d6	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  002db	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  002e0	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  002e4	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002e8	f3 0f 58 97 28
	02 00 00	 addss	 xmm2, DWORD PTR [edi+552]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002f0	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002f4	f3 0f 58 87 30
	02 00 00	 addss	 xmm0, DWORD PTR [edi+560]
  002fc	f3 0f 58 8f 2c
	02 00 00	 addss	 xmm1, DWORD PTR [edi+556]

; 182  :     z = fz;

  00304	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T20[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0030a	8b 44 24 2c	 mov	 eax, DWORD PTR $T20[esp+72]
  0030e	0f 14 d1	 unpcklps xmm2, xmm1
  00311	66 0f d6 97 34
	02 00 00	 movq	 QWORD PTR [edi+564], xmm2
  00319	89 87 3c 02 00
	00		 mov	 DWORD PTR [edi+572], eax

; 22   : 			m_v3Start = v3Start;

  0031f	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00324	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00327	66 0f d6 87 38
	01 00 00	 movq	 QWORD PTR [edi+312], xmm0
  0032f	f3 0f 7e c0	 movq	 xmm0, xmm0
  00333	66 0f d6 87 60
	01 00 00	 movq	 QWORD PTR [edi+352], xmm0
  0033b	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00340	66 0f d6 87 88
	01 00 00	 movq	 QWORD PTR [edi+392], xmm0
  00348	f3 0f 7e c0	 movq	 xmm0, xmm0
  0034c	66 0f d6 87 b0
	01 00 00	 movq	 QWORD PTR [edi+432], xmm0
  00354	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00359	66 0f d6 87 d8
	01 00 00	 movq	 QWORD PTR [edi+472], xmm0
  00361	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  00366	89 87 40 01 00
	00		 mov	 DWORD PTR [edi+320], eax
  0036c	89 87 68 01 00
	00		 mov	 DWORD PTR [edi+360], eax
  00372	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax
  00378	89 87 b8 01 00
	00		 mov	 DWORD PTR [edi+440], eax
  0037e	89 87 e0 01 00
	00		 mov	 DWORD PTR [edi+480], eax
  00384	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00387	66 0f d6 87 00
	02 00 00	 movq	 QWORD PTR [edi+512], xmm0
  0038f	89 87 08 02 00
	00		 mov	 DWORD PTR [edi+520], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00395	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  0039a	8d b7 50 01 00
	00		 lea	 esi, DWORD PTR [edi+336]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  003a0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
  003a8	f3 0f 10 57 48	 movss	 xmm2, DWORD PTR [edi+72]
  003ad	0f 57 c3	 xorps	 xmm0, xmm3
  003b0	f3 0f 10 4f 4c	 movss	 xmm1, DWORD PTR [edi+76]
  003b5	0f 57 d3	 xorps	 xmm2, xmm3

; 182  :     z = fz;

  003b8	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T28[esp+72], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  003be	0f 57 cb	 xorps	 xmm1, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 300  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003c1	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  003c9	8b 44 24 2c	 mov	 eax, DWORD PTR $T28[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 300  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003cd	f3 0f 58 c0	 addss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  003d1	0f 14 d1	 unpcklps xmm2, xmm1

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  003d4	56		 push	 esi
  003d5	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  003d9	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 300  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003da	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  003e0	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  003e3	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  003e8	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  003ee	f3 0f 11 9f 5c
	01 00 00	 movss	 DWORD PTR [edi+348], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  003f6	0f 28 d3	 movaps	 xmm2, xmm3
  003f9	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  003fe	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00403	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00407	8d b7 78 01 00
	00		 lea	 esi, DWORD PTR [edi+376]

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0040d	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0040e	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00412	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00413	f3 0f 58 97 38
	01 00 00	 addss	 xmm2, DWORD PTR [edi+312]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0041b	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0041f	f3 0f 58 87 40
	01 00 00	 addss	 xmm0, DWORD PTR [edi+320]
  00427	f3 0f 58 8f 3c
	01 00 00	 addss	 xmm1, DWORD PTR [edi+316]

; 182  :     z = fz;

  0042f	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T19[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00435	8b 44 24 34	 mov	 eax, DWORD PTR $T19[esp+80]
  00439	0f 14 d1	 unpcklps xmm2, xmm1
  0043c	66 0f d6 97 44
	01 00 00	 movq	 QWORD PTR [edi+324], xmm2
  00444	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 301  : 	m_kCameraFrontToTerrainRay.SetDirection(m_v3View, 4.0f * m_fTerrainCollisionRadius);

  0044a	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  00452	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  0045a	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00460	f3 0f 7e 47 54	 movq	 xmm0, QWORD PTR [edi+84]
  00465	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00469	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  0046c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0046f	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  00474	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  0047a	f3 0f 11 9f 84
	01 00 00	 movss	 DWORD PTR [edi+388], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00482	0f 28 d3	 movaps	 xmm2, xmm3
  00485	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  00489	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0048e	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00493	8d b7 a0 01 00
	00		 lea	 esi, DWORD PTR [edi+416]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00499	f3 0f 58 97 60
	01 00 00	 addss	 xmm2, DWORD PTR [edi+352]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004a1	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  004a5	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004a6	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  004aa	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004ab	f3 0f 58 8f 64
	01 00 00	 addss	 xmm1, DWORD PTR [edi+356]

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  004b3	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004bb	f3 0f 58 87 68
	01 00 00	 addss	 xmm0, DWORD PTR [edi+360]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  004c3	0f 14 d1	 unpcklps xmm2, xmm1
  004c6	66 0f d6 97 6c
	01 00 00	 movq	 QWORD PTR [edi+364], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  004ce	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T18[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  004d4	8b 44 24 34	 mov	 eax, DWORD PTR $T18[esp+80]
  004d8	89 87 74 01 00
	00		 mov	 DWORD PTR [edi+372], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  004de	f3 0f 10 57 54	 movss	 xmm2, DWORD PTR [edi+84]
  004e3	f3 0f 10 47 5c	 movss	 xmm0, DWORD PTR [edi+92]
  004e8	0f 57 d3	 xorps	 xmm2, xmm3
  004eb	f3 0f 10 4f 58	 movss	 xmm1, DWORD PTR [edi+88]
  004f0	0f 57 c3	 xorps	 xmm0, xmm3
  004f3	0f 57 cb	 xorps	 xmm1, xmm3

; 182  :     z = fz;

  004f6	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T27[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 302  : 	m_kCameraBackToTerrainRay.SetDirection(-m_v3View, m_fTerrainCollisionRadius);

  004fc	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00504	8b 44 24 34	 mov	 eax, DWORD PTR $T27[esp+80]
  00508	0f 14 d1	 unpcklps xmm2, xmm1
  0050b	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 302  : 	m_kCameraBackToTerrainRay.SetDirection(-m_v3View, m_fTerrainCollisionRadius);

  0050f	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00515	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00518	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  0051d	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  00523	f3 0f 11 9f ac
	01 00 00	 movss	 DWORD PTR [edi+428], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0052b	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  0052f	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00534	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00539	8d b7 c8 01 00
	00		 lea	 esi, DWORD PTR [edi+456]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0053f	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00543	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00544	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00548	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00549	f3 0f 58 97 88
	01 00 00	 addss	 xmm2, DWORD PTR [edi+392]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00551	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00555	f3 0f 58 87 90
	01 00 00	 addss	 xmm0, DWORD PTR [edi+400]

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0055d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00565	f3 0f 58 8f 8c
	01 00 00	 addss	 xmm1, DWORD PTR [edi+396]

; 182  :     z = fz;

  0056d	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T17[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00573	8b 44 24 34	 mov	 eax, DWORD PTR $T17[esp+80]
  00577	0f 14 d1	 unpcklps xmm2, xmm1
  0057a	66 0f d6 97 94
	01 00 00	 movq	 QWORD PTR [edi+404], xmm2
  00582	89 87 9c 01 00
	00		 mov	 DWORD PTR [edi+412], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00588	f3 0f 10 47 68	 movss	 xmm0, DWORD PTR [edi+104]
  0058d	f3 0f 10 57 60	 movss	 xmm2, DWORD PTR [edi+96]
  00592	0f 57 c3	 xorps	 xmm0, xmm3
  00595	f3 0f 10 4f 64	 movss	 xmm1, DWORD PTR [edi+100]
  0059a	0f 57 d3	 xorps	 xmm2, xmm3

; 182  :     z = fz;

  0059d	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T26[esp+80], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  005a3	0f 57 cb	 xorps	 xmm1, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 303  : 	m_kCameraLeftToTerrainRay.SetDirection(-m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  005a6	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  005ae	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  005b6	8b 44 24 34	 mov	 eax, DWORD PTR $T26[esp+80]
  005ba	0f 14 d1	 unpcklps xmm2, xmm1
  005bd	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 303  : 	m_kCameraLeftToTerrainRay.SetDirection(-m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  005c1	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  005c7	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  005ca	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  005cf	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  005d5	f3 0f 11 9f d4
	01 00 00	 movss	 DWORD PTR [edi+468], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005dd	0f 28 d3	 movaps	 xmm2, xmm3
  005e0	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  005e5	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  005ea	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  005ee	8d b7 f0 01 00
	00		 lea	 esi, DWORD PTR [edi+496]

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  005f4	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005f5	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  005f9	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  005fa	f3 0f 58 97 b0
	01 00 00	 addss	 xmm2, DWORD PTR [edi+432]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00602	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00606	f3 0f 58 87 b8
	01 00 00	 addss	 xmm0, DWORD PTR [edi+440]
  0060e	f3 0f 58 8f b4
	01 00 00	 addss	 xmm1, DWORD PTR [edi+436]

; 182  :     z = fz;

  00616	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T16[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0061c	8b 44 24 34	 mov	 eax, DWORD PTR $T16[esp+80]
  00620	0f 14 d1	 unpcklps xmm2, xmm1
  00623	66 0f d6 97 bc
	01 00 00	 movq	 QWORD PTR [edi+444], xmm2
  0062b	89 87 c4 01 00
	00		 mov	 DWORD PTR [edi+452], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 304  : 	m_kCameraRightToTerrainRay.SetDirection(m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  00631	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  00639	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  00641	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00647	f3 0f 7e 47 60	 movq	 xmm0, QWORD PTR [edi+96]
  0064c	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00650	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00653	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00656	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  0065b	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _fRayRange$1$[esp+64]
  00661	f3 0f 11 9f fc
	01 00 00	 movss	 DWORD PTR [edi+508], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00669	0f 28 d3	 movaps	 xmm2, xmm3
  0066c	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00671	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00676	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  0067a	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0067e	f3 0f 58 97 d8
	01 00 00	 addss	 xmm2, DWORD PTR [edi+472]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00686	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0068a	f3 0f 58 8f dc
	01 00 00	 addss	 xmm1, DWORD PTR [edi+476]

; 182  :     z = fz;

  00692	f3 0f 10 5c 24
	30		 movss	 xmm3, DWORD PTR tv4967[esp+64]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00698	f3 0f 58 87 e0
	01 00 00	 addss	 xmm0, DWORD PTR [edi+480]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  006a0	0f 14 d1	 unpcklps xmm2, xmm1
  006a3	66 0f d6 97 e4
	01 00 00	 movq	 QWORD PTR [edi+484], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  006ab	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T15[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  006b1	8b 44 24 2c	 mov	 eax, DWORD PTR $T15[esp+72]
  006b5	89 87 ec 01 00
	00		 mov	 DWORD PTR [edi+492], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 305  : 	m_kTargetToCameraBottomRay.SetDirection(v3CenterRay - m_fTerrainCollisionRadius * m_v3Up,

  006bb	f3 0f 10 8f f0
	02 00 00	 movss	 xmm1, DWORD PTR [edi+752]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006c3	0f 28 c1	 movaps	 xmm0, xmm1
  006c6	f3 0f 59 47 48	 mulss	 xmm0, DWORD PTR [edi+72]

; 180  :     x = fx;

  006cb	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR $T1[esp+64]

; 182  :     z = fz;

  006d1	f3 0f 5c d8	 subss	 xmm3, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006d5	f3 0f 10 47 4c	 movss	 xmm0, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  006da	8d b7 18 02 00
	00		 lea	 esi, DWORD PTR [edi+536]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006e0	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  006e4	56		 push	 esi
  006e5	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  006e6	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR $T2[esp+72], xmm3

; 180  :     x = fx;

  006ec	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006f0	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
  006f5	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 181  :     y = fy;

  006f9	f3 0f 10 4c 24
	18		 movss	 xmm1, DWORD PTR tv4839[esp+72]
  006ff	f3 0f 5c c8	 subss	 xmm1, xmm0
  00703	f3 0f 11 54 24
	24		 movss	 DWORD PTR $T6[esp+72], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00709	0f 28 c3	 movaps	 xmm0, xmm3
  0070c	0f 14 c2	 unpcklps xmm0, xmm2
  0070f	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00713	f3 0f 11 4c 24
	34		 movss	 DWORD PTR $T25[esp+80], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00719	8b 44 24 34	 mov	 eax, DWORD PTR $T25[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0071d	f3 0f 11 4c 24
	28		 movss	 DWORD PTR tv4724[esp+72], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00723	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00726	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0072b	f3 0f 10 4c 24
	14		 movss	 xmm1, DWORD PTR $T2[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00731	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR $T6[esp+64]
  00737	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0073b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0073f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00743	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv4724[esp+64]
  00749	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0074d	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00751	0f 5a c1	 cvtps2pd xmm0, xmm1
  00754	0f 57 c9	 xorps	 xmm1, xmm1
  00757	66 0f 2e c8	 ucomisd xmm1, xmm0
  0075b	77 06		 ja	 SHORT $LN275@SetViewMat
  0075d	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00761	eb 05		 jmp	 SHORT $LN276@SetViewMat
$LN275@SetViewMat:
  00763	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN276@SetViewMat:
  00768	0f 57 d2	 xorps	 xmm2, xmm2
  0076b	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  0076f	f3 0f 11 97 24
	02 00 00	 movss	 DWORD PTR [edi+548], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00777	0f 28 da	 movaps	 xmm3, xmm2
  0077a	f3 0f 59 1e	 mulss	 xmm3, DWORD PTR [esi]
  0077e	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00783	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00788	8d b7 68 02 00
	00		 lea	 esi, DWORD PTR [edi+616]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0078e	f3 0f 58 9f 00
	02 00 00	 addss	 xmm3, DWORD PTR [edi+512]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00796	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0079a	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0079b	f3 0f 59 ca	 mulss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0079f	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007a0	f3 0f 58 87 08
	02 00 00	 addss	 xmm0, DWORD PTR [edi+520]
  007a8	f3 0f 58 8f 04
	02 00 00	 addss	 xmm1, DWORD PTR [edi+516]

; 182  :     z = fz;

  007b0	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T14[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  007b6	8b 44 24 34	 mov	 eax, DWORD PTR $T14[esp+80]
  007ba	0f 14 d9	 unpcklps xmm3, xmm1
  007bd	66 0f d6 9f 0c
	02 00 00	 movq	 QWORD PTR [edi+524], xmm3
  007c5	89 87 14 02 00
	00		 mov	 DWORD PTR [edi+532], eax

; 22   : 			m_v3Start = v3Start;

  007cb	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  007d0	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  007d3	66 0f d6 87 50
	02 00 00	 movq	 QWORD PTR [edi+592], xmm0
  007db	f3 0f 7e c0	 movq	 xmm0, xmm0
  007df	66 0f d6 87 78
	02 00 00	 movq	 QWORD PTR [edi+632], xmm0
  007e7	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  007ec	66 0f d6 87 a0
	02 00 00	 movq	 QWORD PTR [edi+672], xmm0
  007f4	f3 0f 7e c0	 movq	 xmm0, xmm0
  007f8	66 0f d6 87 c8
	02 00 00	 movq	 QWORD PTR [edi+712], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 313  : 	m_kLeftObjectCollisionRay.SetDirection(v3CenterRay + m_fObjectCollisionRadius * m_v3Cross,

  00800	f3 0f 10 87 f4
	02 00 00	 movss	 xmm0, DWORD PTR [edi+756]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  00808	89 87 58 02 00
	00		 mov	 DWORD PTR [edi+600], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0080e	0f 28 d8	 movaps	 xmm3, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  00811	89 87 80 02 00
	00		 mov	 DWORD PTR [edi+640], eax
  00817	89 87 a8 02 00
	00		 mov	 DWORD PTR [edi+680], eax
  0081d	89 87 d0 02 00
	00		 mov	 DWORD PTR [edi+720], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00823	f3 0f 59 5f 60	 mulss	 xmm3, DWORD PTR [edi+96]
  00828	f3 0f 10 57 64	 movss	 xmm2, DWORD PTR [edi+100]
  0082d	f3 0f 10 4f 68	 movss	 xmm1, DWORD PTR [edi+104]

; 182  :     z = fz;

  00832	f3 0f 58 5c 24
	38		 addss	 xmm3, DWORD PTR tv4967[esp+72]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00838	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0083c	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 180  :     x = fx;

  00840	f3 0f 58 54 24
	14		 addss	 xmm2, DWORD PTR $T1[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00846	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00849	f3 0f 11 5c 24
	28		 movss	 DWORD PTR $T9[esp+72], xmm3

; 181  :     y = fy;

  0084f	f3 0f 58 4c 24
	18		 addss	 xmm1, DWORD PTR tv4839[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00855	0f 14 c2	 unpcklps xmm0, xmm2
  00858	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0085c	f3 0f 11 4c 24
	34		 movss	 DWORD PTR $T24[esp+80], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00862	8b 44 24 34	 mov	 eax, DWORD PTR $T24[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00866	f3 0f 11 54 24
	24		 movss	 DWORD PTR $T5[esp+72], xmm2

; 181  :     y = fy;

  0086c	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR tv4759[esp+72], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00872	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00875	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0087a	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR $T9[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00880	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR $T5[esp+64]
  00886	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0088a	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0088e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00892	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR tv4759[esp+64]
  00898	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0089c	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  008a0	0f 5a c1	 cvtps2pd xmm0, xmm1
  008a3	0f 57 c9	 xorps	 xmm1, xmm1
  008a6	66 0f 2e c8	 ucomisd xmm1, xmm0
  008aa	77 06		 ja	 SHORT $LN277@SetViewMat
  008ac	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  008b0	eb 05		 jmp	 SHORT $LN278@SetViewMat
$LN277@SetViewMat:
  008b2	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN278@SetViewMat:
  008b7	0f 57 d2	 xorps	 xmm2, xmm2
  008ba	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  008be	f3 0f 11 97 74
	02 00 00	 movss	 DWORD PTR [edi+628], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008c6	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]
  008ca	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  008cf	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  008d4	8d b7 b8 02 00
	00		 lea	 esi, DWORD PTR [edi+696]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008da	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  008de	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008df	f3 0f 59 da	 mulss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  008e3	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008e4	f3 0f 58 87 58
	02 00 00	 addss	 xmm0, DWORD PTR [edi+600]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008ec	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008f0	f3 0f 58 9f 50
	02 00 00	 addss	 xmm3, DWORD PTR [edi+592]

; 180  :     x = fx;

  008f8	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR $T1[esp+72]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008fe	f3 0f 58 8f 54
	02 00 00	 addss	 xmm1, DWORD PTR [edi+596]

; 182  :     z = fz;

  00906	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T13[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0090c	8b 44 24 34	 mov	 eax, DWORD PTR $T13[esp+80]
  00910	0f 14 d9	 unpcklps xmm3, xmm1
  00913	66 0f d6 9f 5c
	02 00 00	 movq	 QWORD PTR [edi+604], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0091b	f3 0f 10 5c 24
	38		 movss	 xmm3, DWORD PTR tv4967[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00921	89 87 64 02 00
	00		 mov	 DWORD PTR [edi+612], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 315  : 	m_kRightObjectCollisionRay.SetDirection(v3CenterRay - m_fObjectCollisionRadius * m_v3Cross,

  00927	f3 0f 10 8f f4
	02 00 00	 movss	 xmm1, DWORD PTR [edi+756]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0092f	0f 28 c1	 movaps	 xmm0, xmm1
  00932	f3 0f 59 47 60	 mulss	 xmm0, DWORD PTR [edi+96]

; 182  :     z = fz;

  00937	f3 0f 5c d8	 subss	 xmm3, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0093b	f3 0f 10 47 64	 movss	 xmm0, DWORD PTR [edi+100]
  00940	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 180  :     x = fx;

  00944	f3 0f 5c d0	 subss	 xmm2, xmm0

; 182  :     z = fz;

  00948	f3 0f 11 5c 24
	28		 movss	 DWORD PTR $T8[esp+72], xmm3

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0094e	f3 0f 10 47 68	 movss	 xmm0, DWORD PTR [edi+104]
  00953	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 181  :     y = fy;

  00957	f3 0f 10 4c 24
	18		 movss	 xmm1, DWORD PTR tv4839[esp+72]
  0095d	f3 0f 11 54 24
	24		 movss	 DWORD PTR $T4[esp+72], xmm2
  00963	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00967	0f 28 c3	 movaps	 xmm0, xmm3
  0096a	0f 14 c2	 unpcklps xmm0, xmm2
  0096d	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00971	f3 0f 11 4c 24
	34		 movss	 DWORD PTR $T23[esp+80], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00977	8b 44 24 34	 mov	 eax, DWORD PTR $T23[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0097b	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR tv4789[esp+72], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00981	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00984	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00989	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR $T8[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0098f	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR $T4[esp+64]
  00995	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00999	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0099d	f3 0f 58 c8	 addss	 xmm1, xmm0
  009a1	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR tv4789[esp+64]
  009a7	f3 0f 59 c0	 mulss	 xmm0, xmm0
  009ab	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  009af	0f 5a c1	 cvtps2pd xmm0, xmm1
  009b2	0f 57 c9	 xorps	 xmm1, xmm1
  009b5	66 0f 2e c8	 ucomisd xmm1, xmm0
  009b9	77 06		 ja	 SHORT $LN279@SetViewMat
  009bb	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  009bf	eb 05		 jmp	 SHORT $LN280@SetViewMat
$LN279@SetViewMat:
  009c1	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN280@SetViewMat:
  009c6	0f 57 d2	 xorps	 xmm2, xmm2
  009c9	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  009cd	f3 0f 11 97 c4
	02 00 00	 movss	 DWORD PTR [edi+708], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009d5	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]
  009d9	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  009de	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  009e3	8d b7 90 02 00
	00		 lea	 esi, DWORD PTR [edi+656]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009e9	f3 0f 59 da	 mulss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  009ed	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009ee	f3 0f 59 ca	 mulss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  009f2	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009f3	f3 0f 58 9f a0
	02 00 00	 addss	 xmm3, DWORD PTR [edi+672]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009fb	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009ff	f3 0f 58 8f a4
	02 00 00	 addss	 xmm1, DWORD PTR [edi+676]
  00a07	f3 0f 58 87 a8
	02 00 00	 addss	 xmm0, DWORD PTR [edi+680]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00a0f	0f 14 d9	 unpcklps xmm3, xmm1
  00a12	66 0f d6 9f ac
	02 00 00	 movq	 QWORD PTR [edi+684], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00a1a	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T12[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00a20	8b 44 24 34	 mov	 eax, DWORD PTR $T12[esp+80]
  00a24	89 87 b4 02 00
	00		 mov	 DWORD PTR [edi+692], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 317  : 	m_kTopObjectCollisionRay.SetDirection(v3CenterRay + m_fObjectCollisionRadius * m_v3Up,

  00a2a	f3 0f 10 87 f4
	02 00 00	 movss	 xmm0, DWORD PTR [edi+756]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a32	f3 0f 10 5f 48	 movss	 xmm3, DWORD PTR [edi+72]
  00a37	f3 0f 10 57 4c	 movss	 xmm2, DWORD PTR [edi+76]
  00a3c	f3 0f 10 4f 50	 movss	 xmm1, DWORD PTR [edi+80]
  00a41	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00a45	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 182  :     z = fz;

  00a49	f3 0f 58 5c 24
	38		 addss	 xmm3, DWORD PTR tv4967[esp+72]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a4f	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 180  :     x = fx;

  00a53	f3 0f 58 54 24
	14		 addss	 xmm2, DWORD PTR $T1[esp+72]

; 181  :     y = fy;

  00a59	f3 0f 58 4c 24
	18		 addss	 xmm1, DWORD PTR tv4839[esp+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00a5f	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00a62	f3 0f 11 5c 24
	28		 movss	 DWORD PTR $T7[esp+72], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00a68	0f 14 c2	 unpcklps xmm0, xmm2
  00a6b	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00a6f	f3 0f 11 4c 24
	34		 movss	 DWORD PTR $T22[esp+80], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00a75	8b 44 24 34	 mov	 eax, DWORD PTR $T22[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00a79	f3 0f 11 54 24
	24		 movss	 DWORD PTR $T3[esp+72], xmm2

; 181  :     y = fy;

  00a7f	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR tv4816[esp+72], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00a85	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00a88	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00a8d	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR $T7[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00a93	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR $T3[esp+64]
  00a99	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00a9d	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00aa1	f3 0f 58 c8	 addss	 xmm1, xmm0
  00aa5	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR tv4816[esp+64]
  00aab	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00aaf	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00ab3	0f 5a c1	 cvtps2pd xmm0, xmm1
  00ab6	0f 57 c9	 xorps	 xmm1, xmm1
  00ab9	66 0f 2e c8	 ucomisd xmm1, xmm0
  00abd	77 06		 ja	 SHORT $LN281@SetViewMat
  00abf	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00ac3	eb 05		 jmp	 SHORT $LN282@SetViewMat
$LN281@SetViewMat:
  00ac5	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN282@SetViewMat:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00aca	0f 10 64 24 30	 movups	 xmm4, XMMWORD PTR tv4967[esp+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00acf	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00ad2	f3 0f 10 6c 24
	0c		 movss	 xmm5, DWORD PTR $T1[esp+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00ad8	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00adc	f3 0f 10 74 24
	10		 movss	 xmm6, DWORD PTR tv4839[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  00ae2	f3 0f 11 97 9c
	02 00 00	 movss	 DWORD PTR [edi+668], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00aea	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]
  00aee	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00af3	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00af8	8d b7 e0 02 00
	00		 lea	 esi, DWORD PTR [edi+736]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00afe	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00b02	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b03	f3 0f 59 da	 mulss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00b07	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b08	f3 0f 58 87 80
	02 00 00	 addss	 xmm0, DWORD PTR [edi+640]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b10	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b14	f3 0f 58 9f 78
	02 00 00	 addss	 xmm3, DWORD PTR [edi+632]
  00b1c	f3 0f 58 8f 7c
	02 00 00	 addss	 xmm1, DWORD PTR [edi+636]

; 182  :     z = fz;

  00b24	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T11[esp+80], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00b2a	8b 44 24 34	 mov	 eax, DWORD PTR $T11[esp+80]
  00b2e	0f 14 d9	 unpcklps xmm3, xmm1
  00b31	66 0f d6 9f 84
	02 00 00	 movq	 QWORD PTR [edi+644], xmm3
  00b39	89 87 8c 02 00
	00		 mov	 DWORD PTR [edi+652], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 319  : 	m_kBottomObjectCollisionRay.SetDirection(v3CenterRay - m_fObjectCollisionRadius * m_v3Up,

  00b3f	f3 0f 10 87 f4
	02 00 00	 movss	 xmm0, DWORD PTR [edi+756]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b47	f3 0f 10 4f 48	 movss	 xmm1, DWORD PTR [edi+72]
  00b4c	f3 0f 10 57 4c	 movss	 xmm2, DWORD PTR [edi+76]
  00b51	f3 0f 10 5f 50	 movss	 xmm3, DWORD PTR [edi+80]
  00b56	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00b5a	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00b5e	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 182  :     z = fz;

  00b62	0f 28 c4	 movaps	 xmm0, xmm4
  00b65	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b69	f3 0f 5c e1	 subss	 xmm4, xmm1
  00b6d	f3 0f 11 44 24
	28		 movss	 DWORD PTR tv4844[esp+72], xmm0

; 180  :     x = fx;

  00b73	0f 28 c5	 movaps	 xmm0, xmm5
  00b76	f3 0f 58 c2	 addss	 xmm0, xmm2
  00b7a	f3 0f 5c ea	 subss	 xmm5, xmm2
  00b7e	f3 0f 11 44 24
	24		 movss	 DWORD PTR tv4842[esp+72], xmm0

; 181  :     y = fy;

  00b84	0f 28 c6	 movaps	 xmm0, xmm6
  00b87	f3 0f 5c f3	 subss	 xmm6, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00b8b	0f 14 e5	 unpcklps xmm4, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00b8e	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00b92	66 0f d6 26	 movq	 QWORD PTR [esi], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00b96	f3 0f 11 74 24
	34		 movss	 DWORD PTR $T21[esp+80], xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00b9c	8b 44 24 34	 mov	 eax, DWORD PTR $T21[esp+80]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00ba0	f3 0f 11 44 24
	1c		 movss	 DWORD PTR tv4843[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  00ba6	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00ba9	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00bae	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR tv4844[esp+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00bb4	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv4842[esp+64]
  00bba	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00bbe	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00bc2	f3 0f 58 c8	 addss	 xmm1, xmm0
  00bc6	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR tv4843[esp+64]
  00bcc	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00bd0	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00bd4	0f 5a c1	 cvtps2pd xmm0, xmm1
  00bd7	0f 57 c9	 xorps	 xmm1, xmm1
  00bda	66 0f 2e c8	 ucomisd xmm1, xmm0
  00bde	77 06		 ja	 SHORT $LN283@SetViewMat
  00be0	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00be4	eb 05		 jmp	 SHORT $LN284@SetViewMat
$LN283@SetViewMat:
  00be6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN284@SetViewMat:
  00beb	0f 57 d2	 xorps	 xmm2, xmm2
  00bee	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  00bf2	f3 0f 11 97 ec
	02 00 00	 movss	 DWORD PTR [edi+748], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00bfa	0f 28 da	 movaps	 xmm3, xmm2
  00bfd	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00c02	f3 0f 59 1e	 mulss	 xmm3, DWORD PTR [esi]
  00c06	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00c0b	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00c0f	f3 0f 58 9f c8
	02 00 00	 addss	 xmm3, DWORD PTR [edi+712]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c17	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00c1b	f3 0f 58 8f cc
	02 00 00	 addss	 xmm1, DWORD PTR [edi+716]
  00c23	f3 0f 58 87 d0
	02 00 00	 addss	 xmm0, DWORD PTR [edi+720]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00c2b	0f 14 d9	 unpcklps xmm3, xmm1
  00c2e	66 0f d6 9f d4
	02 00 00	 movq	 QWORD PTR [edi+724], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00c36	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T10[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00c3c	8b 44 24 2c	 mov	 eax, DWORD PTR $T10[esp+72]
  00c40	89 87 dc 02 00
	00		 mov	 DWORD PTR [edi+732], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 321  : }

  00c46	5f		 pop	 edi
  00c47	5e		 pop	 esi
  00c48	8b e5		 mov	 esp, ebp
  00c4a	5d		 pop	 ebp
  00c4b	c3		 ret	 0
?SetViewMatrix@CCamera@@IAEXXZ ENDP			; CCamera::SetViewMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z
_TEXT	SEGMENT
_v3Point$GSCopy$1$ = -292				; size = 4
_this$GSCopy$1$ = -288					; size = 4
_matRotPitch$ = -284					; size = 64
_matRotRoll$ = -220					; size = 64
$T1 = -156						; size = 64
_matRot$ = -92						; size = 64
$T2 = -28						; size = 12
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_v3Point$ = 8						; size = 4
_fPitchDegree$ = 12					; size = 4
_fRollDegree$ = 16					; size = 4
?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z PROC ; CCamera::RotateEyeAroundPoint, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 471  : //	if (IsLock())
; 472  : //		return;
; 473  : 
; 474  : 	D3DXMATRIX matRot, matRotPitch, matRotRoll;
; 475  : 
; 476  : 	D3DXMatrixRotationAxis(&matRotPitch, &m_v3Cross, D3DXToRadian(fPitchDegree));

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fPitchDegree$[ebp]
  00018	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00020	56		 push	 esi
  00021	8b 75 08	 mov	 esi, DWORD PTR _v3Point$[ebp]
  00024	57		 push	 edi
  00025	8b f9		 mov	 edi, ecx
  00027	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _v3Point$GSCopy$1$[ebp], esi
  0002d	51		 push	 ecx
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00039	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
  0003c	50		 push	 eax
  0003d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _D3DXMatrixRotationAxis@12

; 477  : 
; 478  : 	D3DXMatrixRotationZ(&matRotRoll, -D3DXToRadian(fRollDegree));

  00049	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRollDegree$[ebp]
  0004e	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00054	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0005c	51		 push	 ecx
  0005d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0006f	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00075	50		 push	 eax
  00076	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  0007c	50		 push	 eax
  0007d	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 479  : 	matRot = matRotPitch * matRotRoll;

  00089	0f 10 85 64 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]

; 480  : 
; 481  : 	D3DXVECTOR3 v3Temp = m_v3Eye - v3Point;

  00090	83 c7 30	 add	 edi, 48			; 00000030H

; 482  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  00093	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
  00096	50		 push	 eax
  00097	0f 11 45 a4	 movups	 XMMWORD PTR _matRot$[ebp], xmm0
  0009b	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  0009e	0f 10 85 74 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+16]
  000a5	50		 push	 eax
  000a6	57		 push	 edi
  000a7	0f 11 45 b4	 movups	 XMMWORD PTR _matRot$[ebp+16], xmm0
  000ab	0f 10 45 84	 movups	 xmm0, XMMWORD PTR $T1[ebp+32]
  000af	0f 11 45 c4	 movups	 XMMWORD PTR _matRot$[ebp+32], xmm0
  000b3	0f 10 45 94	 movups	 xmm0, XMMWORD PTR $T1[ebp+48]
  000b7	0f 11 45 d4	 movups	 XMMWORD PTR _matRot$[ebp+48], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000bb	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  000bf	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]

; 180  :     x = fx;

  000c3	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000c8	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  000cd	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 181  :     y = fy;

  000d2	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000d7	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000dc	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 182  :     z = fz;

  000e1	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 482  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  000e6	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000eb	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 485  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  000ef	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000f2	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 485  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  000f6	50		 push	 eax
  000f7	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000fa	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000fb	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 205  :     y += v.y;

  000ff	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00104	f3 0f 58 47 04	 addss	 xmm0, DWORD PTR [edi+4]
  00109	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0

; 206  :     z += v.z;

  0010e	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00113	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 485  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  00118	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0011e	83 c6 48	 add	 esi, 72			; 00000048H
  00121	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  00122	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00127	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0012b	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _v3Temp$[ebp]

; 180  :     x = fx;

  00130	f3 0f 11 45 e4	 movss	 DWORD PTR $T2[ebp], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00135	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0013a	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _v3Temp$[ebp+4]

; 181  :     y = fy;

  0013f	f3 0f 11 45 e8	 movss	 DWORD PTR $T2[ebp+4], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00144	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00149	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _v3Temp$[ebp+8]

; 182  :     z = fz;

  0014e	f3 0f 11 45 ec	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 485  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  00153	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00158	f3 0f 10 67 04	 movss	 xmm4, DWORD PTR [edi+4]
  0015d	f3 0f 10 6f 08	 movss	 xmm5, DWORD PTR [edi+8]
  00162	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00166	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _v3Point$GSCopy$1$[ebp]
  0016c	8b f8		 mov	 edi, eax

; 213  :     x -= v.x;

  0016e	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00172	f3 0f 5c 0f	 subss	 xmm1, DWORD PTR [edi]
  00176	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0017b	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00180	f3 0f 5c e2	 subss	 xmm4, xmm2
  00184	f3 0f 5c eb	 subss	 xmm5, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 489  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  00188	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  0018b	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 489  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  0018f	50		 push	 eax
  00190	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  00193	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  00194	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 214  :     y -= v.y;

  00198	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0019d	f3 0f 5c c4	 subss	 xmm0, xmm4
  001a1	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 215  :     z -= v.z;

  001a6	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001ab	f3 0f 5c c5	 subss	 xmm0, xmm5
  001af	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 488  : 	v3Temp = m_v3Target - v3Point;

  001b4	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  001ba	83 c6 3c	 add	 esi, 60			; 0000003cH

; 489  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  001bd	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001be	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001c2	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 488  : 	v3Temp = m_v3Target - v3Point;

  001c6	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001cb	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001d0	f3 0f 5c 47 04	 subss	 xmm0, DWORD PTR [edi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 488  : 	v3Temp = m_v3Target - v3Point;

  001d5	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001da	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001df	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 488  : 	v3Temp = m_v3Target - v3Point;

  001e4	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0

; 489  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  001e9	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  001ee	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001f2	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 492  : 	SetViewMatrix();

  001f6	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  001fc	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 205  :     y += v.y;

  00200	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00205	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  0020a	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 206  :     z += v.z;

  0020f	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00214	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00219	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 492  : 	SetViewMatrix();

  0021e	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix

; 493  : }

  00223	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00226	5f		 pop	 edi
  00227	33 cd		 xor	 ecx, ebp
  00229	5e		 pop	 esi
  0022a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c2 0c 00	 ret	 12			; 0000000cH
?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z ENDP ; CCamera::RotateEyeAroundPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z
_TEXT	SEGMENT
$T1 = -284						; size = 12
_matRotPitch$ = -272					; size = 64
_matRotRoll$ = -208					; size = 64
_matRot$ = -144						; size = 64
$T2 = -80						; size = 64
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fPitchDegree$ = 8					; size = 4
_fRollDegree$ = 12					; size = 4
?RotateEyeAroundTarget@CCamera@@QAEXMM@Z PROC		; CCamera::RotateEyeAroundTarget, COMDAT
; _this$ = ecx

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b f9		 mov	 edi, ecx

; 436  : 	if (IsLock())

  00016	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0001b	84 c0		 test	 al, al
  0001d	0f 85 8d 01 00
	00		 jne	 $LN8@RotateEyeA

; 437  : 		return;
; 438  : 
; 439  : 	D3DXMATRIX matRot, matRotPitch, matRotRoll;
; 440  : 
; 441  : 	if (m_fPitch + fPitchDegree > 80.0f)

  00023	f3 0f 10 97 2c
	01 00 00	 movss	 xmm2, DWORD PTR [edi+300]
  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fPitchDegree$[ebp]
  00030	0f 28 ca	 movaps	 xmm1, xmm2
  00033	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42a00000
  0003b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0003f	0f 2f cb	 comiss	 xmm1, xmm3
  00042	77 0d		 ja	 SHORT $LN20@RotateEyeA

; 442  : 	{
; 443  : 		fPitchDegree = 80.0f - m_fPitch;
; 444  : 	}
; 445  : 	else if( m_fPitch + fPitchDegree < -80.0f)

  00044	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@c2a00000
  0004c	0f 2f d9	 comiss	 xmm3, xmm1
  0004f	76 07		 jbe	 SHORT $LN5@RotateEyeA
$LN20@RotateEyeA:

; 446  : 	{
; 447  : 		fPitchDegree = -80.0f - m_fPitch;
; 448  : 	}
; 449  : 
; 450  : 	D3DXMatrixRotationAxis(&matRotPitch, &m_v3Cross, D3DXToRadian(fPitchDegree));

  00051	0f 28 c3	 movaps	 xmm0, xmm3
  00054	f3 0f 5c c2	 subss	 xmm0, xmm2
$LN5@RotateEyeA:
  00058	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00060	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
  00063	56		 push	 esi
  00064	51		 push	 ecx
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	50		 push	 eax
  0006b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _D3DXMatrixRotationAxis@12

; 451  : 
; 452  : 	D3DXMatrixRotationZ(&matRotRoll, -D3DXToRadian(fRollDegree));

  00077	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fRollDegree$[ebp]
  0007c	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00082	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0008a	51		 push	 ecx
  0008b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0009d	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  000a3	50		 push	 eax
  000a4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  000aa	50		 push	 eax
  000ab	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 453  : 	matRot = matRotPitch * matRotRoll;

  000b4	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 454  : 
; 455  : 	D3DXVECTOR3 v3Temp = m_v3Eye - m_v3Target;

  000b8	8d 77 30	 lea	 esi, DWORD PTR [edi+48]

; 456  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  000bb	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _matRot$[ebp]
  000c1	0f 11 85 70 ff
	ff ff		 movups	 XMMWORD PTR _matRot$[ebp], xmm0
  000c8	50		 push	 eax
  000c9	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T2[ebp+16]
  000cd	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  000d0	50		 push	 eax
  000d1	0f 11 45 80	 movups	 XMMWORD PTR _matRot$[ebp+16], xmm0
  000d5	56		 push	 esi
  000d6	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T2[ebp+32]
  000da	0f 11 45 90	 movups	 XMMWORD PTR _matRot$[ebp+32], xmm0
  000de	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T2[ebp+48]
  000e2	0f 11 45 a0	 movups	 XMMWORD PTR _matRot$[ebp+48], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000e6	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000ea	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 180  :     x = fx;

  000ef	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000f4	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000f9	f3 0f 5c 47 40	 subss	 xmm0, DWORD PTR [edi+64]

; 181  :     y = fy;

  000fe	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00103	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00108	f3 0f 5c 47 44	 subss	 xmm0, DWORD PTR [edi+68]

; 182  :     z = fz;

  0010d	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 456  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  00112	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00117	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 459  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0011b	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00121	f3 0f 58 47 3c	 addss	 xmm0, DWORD PTR [edi+60]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 459  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00126	50		 push	 eax
  00127	8b cf		 mov	 ecx, edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00129	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 181  :     y = fy;

  00133	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+4], 0

; 182  :     z = fz;

  0013d	c7 85 ec fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T1[ebp+8], 1065353216 ; 3f800000H

; 204  :     x += v.x;

  00147	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 205  :     y += v.y;

  0014b	f3 0f 10 47 40	 movss	 xmm0, DWORD PTR [edi+64]
  00150	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  00155	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 206  :     z += v.z;

  0015a	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  0015f	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00164	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 459  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00169	e8 00 00 00 00	 call	 ?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z ; CCamera::SetUp

; 460  : 
; 461  : 	m_fRoll += fRollDegree;

  0016e	f3 0f 10 8f 30
	01 00 00	 movss	 xmm1, DWORD PTR [edi+304]
  00176	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fRollDegree$[ebp]

; 462  : 
; 463  : 	if (m_fRoll > 360.0f)

  0017b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43b40000
  00183	5e		 pop	 esi
  00184	0f 2f ca	 comiss	 xmm1, xmm2
  00187	f3 0f 11 8f 30
	01 00 00	 movss	 DWORD PTR [edi+304], xmm1
  0018f	76 06		 jbe	 SHORT $LN6@RotateEyeA

; 464  : 		m_fRoll -= 360.0f;

  00191	f3 0f 5c ca	 subss	 xmm1, xmm2
  00195	eb 11		 jmp	 SHORT $LN21@RotateEyeA
$LN6@RotateEyeA:

; 465  : 	else if (m_fRoll < -360.0f)

  00197	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3b40000
  0019f	0f 2f c1	 comiss	 xmm0, xmm1
  001a2	76 0c		 jbe	 SHORT $LN8@RotateEyeA

; 466  : 		m_fRoll += 360.0f;

  001a4	f3 0f 58 ca	 addss	 xmm1, xmm2
$LN21@RotateEyeA:

; 467  : }

  001a8	f3 0f 11 8f 30
	01 00 00	 movss	 DWORD PTR [edi+304], xmm1
$LN8@RotateEyeA:
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b3	33 cd		 xor	 ecx, ebp
  001b5	5f		 pop	 edi
  001b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 08 00	 ret	 8
?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ENDP		; CCamera::RotateEyeAroundTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveVertical@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?MoveVertical@CCamera@@QAEXM@Z PROC			; CCamera::MoveVertical, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 413  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 25		 jne	 SHORT $LN1@MoveVertic

; 414  : 		return;
; 415  : 
; 416  : 	m_v3Eye.z += fDistance;

  0000f	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]

; 417  : 	m_v3Target.z += fDistance;
; 418  : 
; 419  : 	SetViewMatrix();

  00014	8b ce		 mov	 ecx, esi
  00016	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fDistance$[ebp]
  0001b	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  00020	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  00025	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fDistance$[ebp]
  0002a	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
  0002f	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveVertic:
  00034	5e		 pop	 esi

; 420  : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?MoveVertical@CCamera@@QAEXM@Z ENDP			; CCamera::MoveVertical
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveFront@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveFront@CCamera@@QAEXM@Z PROC			; CCamera::MoveFront, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 399  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	0f 85 9d 00 00
	00		 jne	 $LN1@MoveFront
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0002a	f3 0f 10 46 54	 movss	 xmm0, DWORD PTR [esi+84]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 403  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0002f	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00032	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 181  :     y = fy;

  00037	f3 0f 10 46 58	 movss	 xmm0, DWORD PTR [esi+88]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 403  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0003c	50		 push	 eax
  0003d	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0003e	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 182  :     z = fz;

  00043	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _v3Temp$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 403  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0004a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0004f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 408  : 	SetViewMatrix();

  00054	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00056	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+8]
  0005b	0f 28 c8	 movaps	 xmm1, xmm0
  0005e	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _v3Temp$[ebp]
  00063	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+4]
  00068	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0006c	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 204  :     x += v.x;

  00070	0f 28 c1	 movaps	 xmm0, xmm1
  00073	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  00078	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 205  :     y += v.y;

  0007d	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00082	f3 0f 58 c2	 addss	 xmm0, xmm2
  00086	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 206  :     z += v.z;

  0008b	0f 28 c3	 movaps	 xmm0, xmm3
  0008e	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  00093	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0

; 204  :     x += v.x;

  00098	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  0009d	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a1	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 205  :     y += v.y;

  000a6	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  000ab	f3 0f 58 c2	 addss	 xmm0, xmm2
  000af	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0

; 206  :     z += v.z;

  000b4	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  000b9	f3 0f 58 c3	 addss	 xmm0, xmm3
  000bd	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 408  : 	SetViewMatrix();

  000c2	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveFront:

; 409  : }

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	33 cd		 xor	 ecx, ebp
  000cc	5e		 pop	 esi
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
?MoveFront@CCamera@@QAEXM@Z ENDP			; CCamera::MoveFront
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveLateral@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?MoveLateral@CCamera@@QAEXM@Z PROC			; CCamera::MoveLateral, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 391  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 12		 jne	 SHORT $LN1@MoveLatera

; 392  : 		return;
; 393  : 
; 394  : 	MoveAlongCross(fDistance);

  0000f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00014	51		 push	 ecx
  00015	8b ce		 mov	 ecx, esi
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	e8 00 00 00 00	 call	 ?MoveAlongCross@CCamera@@QAEXM@Z ; CCamera::MoveAlongCross
$LN1@MoveLatera:
  00021	5e		 pop	 esi

; 395  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?MoveLateral@CCamera@@QAEXM@Z ENDP			; CCamera::MoveLateral
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveAlongUp@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongUp@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongUp, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 379  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	0f 85 83 00 00
	00		 jne	 $LN1@MoveAlongU

; 380  : 		return;
; 381  : 
; 382  : 	D3DXVECTOR3 v3Temp ;
; 383  : 	D3DXVec3Normalize(&v3Temp, &m_v3Up);

  0002a	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  0002d	50		 push	 eax
  0002e	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00037	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 386  : 	SetViewMatrix();

  0003c	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003e	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  00043	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+4]
  00048	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+8]
  0004d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00055	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 204  :     x += v.x;

  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	f3 0f 58 46 3c	 addss	 xmm0, DWORD PTR [esi+60]
  00061	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 205  :     y += v.y;

  00066	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  0006b	f3 0f 58 c3	 addss	 xmm0, xmm3
  0006f	f3 0f 58 5e 34	 addss	 xmm3, DWORD PTR [esi+52]
  00074	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0

; 206  :     z += v.z;

  00079	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  0007e	f3 0f 58 c2	 addss	 xmm0, xmm2

; 205  :     y += v.y;

  00082	f3 0f 11 5e 34	 movss	 DWORD PTR [esi+52], xmm3

; 206  :     z += v.z;

  00087	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0

; 204  :     x += v.x;

  0008c	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00091	f3 0f 58 c1	 addss	 xmm0, xmm1
  00095	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 206  :     z += v.z;

  0009a	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  0009f	f3 0f 58 c2	 addss	 xmm0, xmm2
  000a3	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 386  : 	SetViewMatrix();

  000a8	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongU:

; 387  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	5e		 pop	 esi
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?MoveAlongUp@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveAlongCross@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongCross@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongCross, COMDAT
; _this$ = ecx

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 365  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	0f 85 83 00 00
	00		 jne	 $LN1@MoveAlongC

; 366  : 		return;
; 367  : 
; 368  : 	D3DXVECTOR3 v3Temp;
; 369  : 	D3DXVec3Normalize(&v3Temp, &m_v3Cross);

  0002a	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  0002d	50		 push	 eax
  0002e	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00037	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 374  : 	SetViewMatrix();

  0003c	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003e	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  00043	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+4]
  00048	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+8]
  0004d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00055	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 204  :     x += v.x;

  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  00061	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 205  :     y += v.y;

  00066	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  0006b	f3 0f 58 c3	 addss	 xmm0, xmm3
  0006f	f3 0f 58 5e 40	 addss	 xmm3, DWORD PTR [esi+64]
  00074	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 206  :     z += v.z;

  00079	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  0007e	f3 0f 58 c2	 addss	 xmm0, xmm2

; 205  :     y += v.y;

  00082	f3 0f 11 5e 40	 movss	 DWORD PTR [esi+64], xmm3

; 206  :     z += v.z;

  00087	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0

; 204  :     x += v.x;

  0008c	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00091	f3 0f 58 c1	 addss	 xmm0, xmm1
  00095	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 206  :     z += v.z;

  0009a	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  0009f	f3 0f 58 c2	 addss	 xmm0, xmm2
  000a3	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 374  : 	SetViewMatrix();

  000a8	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongC:

; 375  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	5e		 pop	 esi
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?MoveAlongCross@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongCross
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?MoveAlongView@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongView@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongView, COMDAT
; _this$ = ecx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 351  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	0f 85 83 00 00
	00		 jne	 $LN1@MoveAlongV

; 352  : 		return;
; 353  : 
; 354  : 	D3DXVECTOR3 v3Temp;
; 355  : 	D3DXVec3Normalize(&v3Temp, &m_v3View);

  0002a	8d 46 54	 lea	 eax, DWORD PTR [esi+84]
  0002d	50		 push	 eax
  0002e	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00037	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 360  : 	SetViewMatrix();

  0003c	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003e	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  00043	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+4]
  00048	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+8]
  0004d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00055	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 204  :     x += v.x;

  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  00061	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 205  :     y += v.y;

  00066	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  0006b	f3 0f 58 c3	 addss	 xmm0, xmm3
  0006f	f3 0f 58 5e 40	 addss	 xmm3, DWORD PTR [esi+64]
  00074	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 206  :     z += v.z;

  00079	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  0007e	f3 0f 58 c2	 addss	 xmm0, xmm2

; 205  :     y += v.y;

  00082	f3 0f 11 5e 40	 movss	 DWORD PTR [esi+64], xmm3

; 206  :     z += v.z;

  00087	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0

; 204  :     x += v.x;

  0008c	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00091	f3 0f 58 c1	 addss	 xmm0, xmm1
  00095	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 206  :     z += v.z;

  0009a	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  0009f	f3 0f 58 c2	 addss	 xmm0, xmm2
  000a3	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 360  : 	SetViewMatrix();

  000a8	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongV:

; 361  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	5e		 pop	 esi
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?MoveAlongView@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Zoom@CCamera@@QAEXM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_fRatio$ = 8						; size = 4
?Zoom@CCamera@@QAEXM@Z PROC				; CCamera::Zoom, COMDAT
; _this$ = ecx

; 335  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 336  : 	if (IsLock())

  00009	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000e	84 c0		 test	 al, al
  00010	75 65		 jne	 SHORT $LN1@Zoom

; 337  : 		return;
; 338  : 
; 339  : 	if (fRatio == 1.0f)

  00012	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _fRatio$[ebp]
  00017	0f 2e 2d 00 00
	00 00		 ucomiss xmm5, DWORD PTR __real@3f800000
  0001e	9f		 lahf
  0001f	f6 c4 44	 test	 ah, 68			; 00000044H
  00022	7b 53		 jnp	 SHORT $LN1@Zoom
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 66 30	 movss	 xmm4, DWORD PTR [esi+48]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 346  : 	SetViewMatrix();

  00029	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0002b	f3 0f 5c 66 3c	 subss	 xmm4, DWORD PTR [esi+60]
  00030	f3 0f 10 4e 34	 movss	 xmm1, DWORD PTR [esi+52]
  00035	f3 0f 5c 4e 40	 subss	 xmm1, DWORD PTR [esi+64]
  0003a	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  0003f	f3 0f 5c 46 44	 subss	 xmm0, DWORD PTR [esi+68]

; 182  :     z = fz;

  00044	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 222  :     x *= f;

  00048	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0004c	f3 0f 58 66 3c	 addss	 xmm4, DWORD PTR [esi+60]

; 223  :     y *= f;

  00051	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00055	f3 0f 58 4e 40	 addss	 xmm1, DWORD PTR [esi+64]
  0005a	f3 0f 58 46 44	 addss	 xmm0, DWORD PTR [esi+68]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 344  : 	m_v3Eye = v3Temp + m_v3Target;

  0005f	0f 14 e1	 unpcklps xmm4, xmm1
  00062	66 0f d6 66 30	 movq	 QWORD PTR [esi+48], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00067	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 344  : 	m_v3Eye = v3Temp + m_v3Target;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  0006f	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 346  : 	SetViewMatrix();

  00072	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@Zoom:
  00077	5e		 pop	 esi

; 347  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?Zoom@CCamera@@QAEXM@Z ENDP				; CCamera::Zoom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Displacement$ = 8					; size = 4
?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::Move, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 325  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 62		 jne	 SHORT $LN1@Move
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Displacement$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 331  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00014	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00019	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0001d	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 205  :     y += v.y;

  00022	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00027	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0002c	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 206  :     z += v.z;

  00031	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00036	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  0003b	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0

; 204  :     x += v.x;

  00040	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00045	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00049	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 205  :     y += v.y;

  0004e	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00053	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00058	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0

; 206  :     z += v.z;

  0005d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00062	f3 0f 58 46 44	 addss	 xmm0, DWORD PTR [esi+68]
  00067	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 331  : 	SetViewMatrix();

  0006c	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@Move:
  00071	5e		 pop	 esi

; 332  : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::Move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetDistance@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fdistance$ = 8						; size = 4
?SetDistance@CCamera@@QAEXM@Z PROC			; CCamera::SetDistance, COMDAT
; _this$ = ecx

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 513  : //	if (IsLock())
; 514  : //		return;
; 515  : 
; 516  : 	Zoom(fdistance/m_fDistance);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fdistance$[ebp]
  00008	f3 0f 5e 81 34
	01 00 00	 divss	 xmm0, DWORD PTR [ecx+308]
  00010	51		 push	 ecx
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 ?Zoom@CCamera@@QAEXM@Z	; CCamera::Zoom

; 517  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?SetDistance@CCamera@@QAEXM@Z ENDP			; CCamera::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Roll@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fRollDelta$ = 8					; size = 4
?Roll@CCamera@@QAEXM@Z PROC				; CCamera::Roll, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  : //	if (IsLock())
; 506  : //		return;
; 507  : 
; 508  : 	RotateEyeAroundTarget(0.0f, fRollDelta);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRollDelta$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00011	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00018	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 509  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?Roll@CCamera@@QAEXM@Z ENDP				; CCamera::Roll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Pitch@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fPitchDelta$ = 8					; size = 4
?Pitch@CCamera@@QAEXM@Z PROC				; CCamera::Pitch, COMDAT
; _this$ = ecx

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 497  : //	if (IsLock())
; 498  : //		return;
; 499  : 
; 500  : 	RotateEyeAroundTarget(fPitchDelta, 0.0f);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fPitchDelta$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 501  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?Pitch@CCamera@@QAEXM@Z ENDP				; CCamera::Pitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Up$ = 8						; size = 4
?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetUp, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 247  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetUp

; 248  : 		return;
; 249  : 
; 250  :     m_v3Up = v3Up;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Up$[ebp]

; 251  : 
; 252  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 48	 movq	 QWORD PTR [esi+72], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetUp:
  00028	5e		 pop	 esi

; 253  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Target$ = 8						; size = 4
?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetTarget, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 237  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetTarget

; 238  : 		return;
; 239  : 
; 240  :     m_v3Target = v3Target;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Target$[ebp]

; 241  : 
; 242  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 3c	 movq	 QWORD PTR [esi+60], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetTarget:
  00028	5e		 pop	 esi

; 243  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Eye$ = 8						; size = 4
?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetEye, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 227  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetEye

; 228  : 		return;
; 229  : 
; 230  :     m_v3Eye = v3Eye;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Eye$[ebp]

; 231  : 
; 232  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetEye:
  00028	5e		 pop	 esi

; 233  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetEye
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
_v3Eye$ = 8						; size = 4
_v3Target$ = 12						; size = 4
_v3Up$ = 16						; size = 4
?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z PROC	; CCamera::SetViewParams, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 214  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 3d		 jne	 SHORT $LN1@SetViewPar

; 215  : 		return;
; 216  : 
; 217  :     // Set attributes for the view matrix
; 218  :     m_v3Eye = v3Eye;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Eye$[ebp]

; 219  :     m_v3Target = v3Target;
; 220  :     m_v3Up = v3Up;
; 221  : 
; 222  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR _v3Target$[ebp]
  00026	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0002a	66 0f d6 46 3c	 movq	 QWORD PTR [esi+60], xmm0
  0002f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00032	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00035	8b 45 10	 mov	 eax, DWORD PTR _v3Up$[ebp]
  00038	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003c	66 0f d6 46 48	 movq	 QWORD PTR [esi+72], xmm0
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00047	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetViewPar:
  0004c	5e		 pop	 esi

; 223  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ENDP	; CCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?ResetNumScreenBuilding@CCamera@@QAEXXZ
_TEXT	SEGMENT
?ResetNumScreenBuilding@CCamera@@QAEXXZ PROC		; CCamera::ResetNumScreenBuilding, COMDAT
; _this$ = ecx

; 207  : 	m_ulNumScreenBuilding = 0;

  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 208  : }

  00007	c3		 ret	 0
?ResetNumScreenBuilding@CCamera@@QAEXXZ ENDP		; CCamera::ResetNumScreenBuilding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ
_TEXT	SEGMENT
?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ PROC	; CCamera::IncreaseNumSrcreenBuilding, COMDAT
; _this$ = ecx

; 202  : 	++m_ulNumScreenBuilding;

  00000	ff 41 28	 inc	 DWORD PTR [ecx+40]

; 203  : }

  00003	c3		 ret	 0
?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ ENDP	; CCamera::IncreaseNumSrcreenBuilding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z
_TEXT	SEGMENT
_eNewCameraState$ = 8					; size = 4
?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z PROC	; CCamera::SetCameraState, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	if (eNewCameraState == m_eCameraState)

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 55 08	 mov	 edx, DWORD PTR _eNewCameraState$[ebp]
  00009	3b d0		 cmp	 edx, eax
  0000b	74 06		 je	 SHORT $LN1@SetCameraS

; 181  : 		return;
; 182  : 
; 183  : 	m_eCameraStatePrev = m_eCameraState;

  0000d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 184  : 	m_eCameraState = eNewCameraState;

  00010	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN1@SetCameraS:

; 185  : 
; 186  : /*
; 187  : 	if ((CAMERA_STATE_NORMAL == m_eCameraStatePrev))
; 188  : 	{
; 189  : 		m_fDistanceBackup = m_fDistance;
; 190  : 		m_fPitchBackup = m_fPitch;
; 191  : 		m_fRollBackup = m_fRoll;
; 192  : 	}
; 193  : 	else if ((CAMERA_STATE_CANTGODOWN == m_eCameraStatePrev) && (CAMERA_STATE_CANTGODOWN == m_eCameraState) )
; 194  : 	{
; 195  : 		m_v3EyeBackup = m_v3Eye;
; 196  : 	}
; 197  : */
; 198  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z ENDP	; CCamera::SetCameraState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetResistance@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fResistance$ = 8					; size = 4
?SetResistance@CCamera@@QAEXM@Z PROC			; CCamera::SetResistance, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	m_fResistance = c_fDefaultResistance * fResistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fResistance$[ebp]
  00008	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  00010	f3 0f 11 81 30
	03 00 00	 movss	 DWORD PTR [ecx+816], xmm0

; 88   : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetResistance@CCamera@@QAEXM@Z ENDP			; CCamera::SetResistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?IsDraging@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?IsDraging@CCamera@@QAE_NXZ PROC			; CCamera::IsDraging, COMDAT
; _this$ = ecx

; 111  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 112  : 	if (IsLock())

  00003	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00008	84 c0		 test	 al, al
  0000a	74 04		 je	 SHORT $LN2@IsDraging

; 113  : 		return false;

  0000c	32 c0		 xor	 al, al
  0000e	5e		 pop	 esi

; 116  : }

  0000f	c3		 ret	 0
$LN2@IsDraging:

; 114  : 
; 115  : 	return m_bDrag;

  00010	8a 86 14 03 00
	00		 mov	 al, BYTE PTR [esi+788]
  00016	5e		 pop	 esi

; 116  : }

  00017	c3		 ret	 0
?IsDraging@CCamera@@QAE_NXZ ENDP			; CCamera::IsDraging
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?BeginDrag@CCamera@@QAEXHH@Z
_TEXT	SEGMENT
_nMouseX$ = 8						; size = 4
_nMouseY$ = 12						; size = 4
?BeginDrag@CCamera@@QAEXHH@Z PROC			; CCamera::BeginDrag, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 100  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 2d		 jne	 SHORT $LN1@BeginDrag

; 101  : 		return;
; 102  : 
; 103  : 	m_bDrag = true;
; 104  : 	m_lMousePosX = nMouseX;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nMouseX$[ebp]
  00012	89 86 0c 03 00
	00		 mov	 DWORD PTR [esi+780], eax

; 105  : 	m_lMousePosY = nMouseY;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _nMouseY$[ebp]
  0001b	c6 86 14 03 00
	00 01		 mov	 BYTE PTR [esi+788], 1
  00022	89 86 10 03 00
	00		 mov	 DWORD PTR [esi+784], eax

; 106  : 	m_fPitchSum = 0.0f;

  00028	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0

; 107  : 	m_fRollSum = 0.0f;

  00032	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
$LN1@BeginDrag:
  0003c	5e		 pop	 esi

; 108  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?BeginDrag@CCamera@@QAEXHH@Z ENDP			; CCamera::BeginDrag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?EndDrag@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?EndDrag@CCamera@@QAE_NXZ PROC				; CCamera::EndDrag, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 120  : 	if (IsLock())

  0000a	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000f	84 c0		 test	 al, al
  00011	75 68		 jne	 SHORT $LN5@EndDrag

; 121  : 		return false;
; 122  : 
; 123  : 	m_bDrag = false;
; 124  : 
; 125  : 	float fSum=sqrt(m_fPitchSum*m_fPitchSum+m_fRollSum*m_fRollSum);

  00013	f3 0f 10 8e 04
	03 00 00	 movss	 xmm1, DWORD PTR [esi+772]
  0001b	f3 0f 10 96 08
	03 00 00	 movss	 xmm2, DWORD PTR [esi+776]
  00023	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00027	88 86 14 03 00
	00		 mov	 BYTE PTR [esi+788], al
  0002d	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 126  : 
; 127  : 	m_fPitchSum = 0.0f;

  00031	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0

; 128  : 	m_fRollSum = 0.0f;

  0003b	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  00045	f3 0f 58 ca	 addss	 xmm1, xmm2
  00049	0f 5a c1	 cvtps2pd xmm0, xmm1
  0004c	0f 57 c9	 xorps	 xmm1, xmm1
  0004f	66 0f 2e c8	 ucomisd xmm1, xmm0
  00053	77 06		 ja	 SHORT $LN6@EndDrag

; 121  : 		return false;
; 122  : 
; 123  : 	m_bDrag = false;
; 124  : 
; 125  : 	float fSum=sqrt(m_fPitchSum*m_fPitchSum+m_fRollSum*m_fRollSum);

  00055	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00059	eb 05		 jmp	 SHORT $LN7@EndDrag
$LN6@EndDrag:
  0005b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN7@EndDrag:
  00060	0f 57 c9	 xorps	 xmm1, xmm1
  00063	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 129  : 
; 130  : 	if (fSum<1.0f)

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006f	0f 2f c1	 comiss	 xmm0, xmm1
  00072	77 07		 ja	 SHORT $LN5@EndDrag

; 132  : 
; 133  : 	return true;

  00074	b0 01		 mov	 al, 1

; 134  : }

  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN5@EndDrag:

; 131  : 		return false;

  0007b	32 c0		 xor	 al, al

; 134  : }

  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?EndDrag@CCamera@@QAE_NXZ ENDP				; CCamera::EndDrag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_fNewPitchVelocity$1$ = -4				; size = 4
_fNewPitchVelocity$ = 8					; size = 4
_nMouseX$ = 8						; size = 4
_fNewRotationVelocity$1$ = 12				; size = 4
_fNewRotationVelocity$ = 12				; size = 4
_nMouseY$ = 12						; size = 4
_lpReturnPoint$ = 16					; size = 4
?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z PROC		; CCamera::Drag, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 138  : 	if (IsLock())

  00007	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000c	84 c0		 test	 al, al
  0000e	75 29		 jne	 SHORT $LN9@Drag

; 139  : 		return false;
; 140  : 
; 141  : 	if (!m_bDrag)

  00010	80 be 14 03 00
	00 00		 cmp	 BYTE PTR [esi+788], 0
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nMouseY$[ebp]
  0001a	75 26		 jne	 SHORT $LN3@Drag

; 142  : 	{
; 143  : 		m_lMousePosX = nMouseX;
; 144  : 		m_lMousePosY = nMouseY;
; 145  : 		lpReturnPoint->x = m_lMousePosX;

  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _lpReturnPoint$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _nMouseX$[ebp]
  00022	89 86 10 03 00
	00		 mov	 DWORD PTR [esi+784], eax
  00028	89 96 0c 03 00
	00		 mov	 DWORD PTR [esi+780], edx
  0002e	89 11		 mov	 DWORD PTR [ecx], edx

; 146  : 		lpReturnPoint->y = m_lMousePosY;

  00030	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN9@Drag:

; 173  : }

  00039	32 c0		 xor	 al, al
  0003b	5e		 pop	 esi
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Drag:

; 147  : 		return false;
; 148  : 	}
; 149  : 
; 150  : 	long lMouseX = nMouseX;
; 151  : 	long lMouseY = nMouseY;
; 152  : 
; 153  : 	float fNewPitchVelocity = (float)(lMouseY - m_lMousePosY) * m_fResistance;

  00042	2b 86 10 03 00
	00		 sub	 eax, DWORD PTR [esi+784]
  00048	f3 0f 10 86 30
	03 00 00	 movss	 xmm0, DWORD PTR [esi+816]
  00050	66 0f 6e d0	 movd	 xmm2, eax

; 154  : 	float fNewRotationVelocity = (float)(lMouseX - m_lMousePosX) * m_fResistance;

  00054	8b 45 08	 mov	 eax, DWORD PTR _nMouseX$[ebp]
  00057	2b 86 0c 03 00
	00		 sub	 eax, DWORD PTR [esi+780]
  0005d	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00060	66 0f 6e c8	 movd	 xmm1, eax

; 155  : 
; 156  : 	m_fPitchSum += fNewPitchVelocity;
; 157  : 	m_fRollSum += fNewRotationVelocity;
; 158  : 
; 159  : 
; 160  : 	if (CAMERA_STATE_CANTGOLEFT == GetCameraState())

  00064	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00067	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0006b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0006e	f3 0f 11 55 fc	 movss	 DWORD PTR _fNewPitchVelocity$1$[ebp], xmm2
  00073	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00077	0f 28 c2	 movaps	 xmm0, xmm2
  0007a	f3 0f 58 86 04
	03 00 00	 addss	 xmm0, DWORD PTR [esi+772]
  00082	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
  00087	f3 0f 11 86 04
	03 00 00	 movss	 DWORD PTR [esi+772], xmm0
  0008f	0f 28 c1	 movaps	 xmm0, xmm1
  00092	f3 0f 58 86 08
	03 00 00	 addss	 xmm0, DWORD PTR [esi+776]
  0009a	f3 0f 11 86 08
	03 00 00	 movss	 DWORD PTR [esi+776], xmm0
  000a2	83 f8 03	 cmp	 eax, 3
  000a5	75 28		 jne	 SHORT $LN4@Drag

; 161  : 		fNewRotationVelocity = fMAX(0.0f, fNewRotationVelocity);

  000a7	83 ec 08	 sub	 esp, 8
  000aa	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000b0	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000b7	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  000bc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bf	83 c4 08	 add	 esp, 8
  000c2	d9 5d 0c	 fstp	 DWORD PTR _fNewRotationVelocity$[ebp]
  000c5	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$[ebp]
  000ca	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
$LN4@Drag:

; 162  : 	if (CAMERA_STATE_CANTGORIGHT == GetCameraState())

  000cf	83 f8 02	 cmp	 eax, 2
  000d2	75 28		 jne	 SHORT $LN5@Drag

; 163  : 		fNewRotationVelocity = fMIN(0.0f, fNewRotationVelocity);

  000d4	83 ec 08	 sub	 esp, 8
  000d7	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000dd	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000e4	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	83 c4 08	 add	 esp, 8
  000ef	d9 5d 0c	 fstp	 DWORD PTR _fNewRotationVelocity$[ebp]
  000f2	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$[ebp]
  000f7	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
$LN5@Drag:

; 164  : 	if (CAMERA_STATE_CANTGODOWN == GetCameraState())

  000fc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fNewPitchVelocity$1$[ebp]
  00101	83 f8 01	 cmp	 eax, 1
  00104	75 25		 jne	 SHORT $LN6@Drag

; 165  : 		fNewPitchVelocity = fMAX(0.0f, fNewPitchVelocity);

  00106	83 ec 08	 sub	 esp, 8
  00109	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0010f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00116	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  0011b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$1$[ebp]
  00120	83 c4 08	 add	 esp, 8
  00123	d9 5d 08	 fstp	 DWORD PTR _fNewPitchVelocity$[ebp]
  00126	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fNewPitchVelocity$[ebp]
$LN6@Drag:

; 166  : 
; 167  : 	m_v3AngularVelocity.x = fNewRotationVelocity;
; 168  : 	m_v3AngularVelocity.z = fNewPitchVelocity;
; 169  : 
; 170  : 	lpReturnPoint->x = m_lMousePosX;

  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _lpReturnPoint$[ebp]
  0012e	8b 86 0c 03 00
	00		 mov	 eax, DWORD PTR [esi+780]
  00134	f3 0f 11 8e 24
	03 00 00	 movss	 DWORD PTR [esi+804], xmm1
  0013c	f3 0f 11 86 2c
	03 00 00	 movss	 DWORD PTR [esi+812], xmm0
  00144	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 	lpReturnPoint->y = m_lMousePosY;

  00146	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
  0014c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 172  : 	return true;

  0014f	b0 01		 mov	 al, 1
  00151	5e		 pop	 esi

; 173  : }

  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 0c 00	 ret	 12			; 0000000cH
?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z ENDP		; CCamera::Drag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Wheel@CCamera@@QAEXH@Z
_TEXT	SEGMENT
_nLen$ = 8						; size = 4
?Wheel@CCamera@@QAEXH@Z PROC				; CCamera::Wheel, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 92   : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 18		 jne	 SHORT $LN1@Wheel

; 93   : 		return;
; 94   : 
; 95   : 	m_v3AngularVelocity.y = (float)(nLen) * m_fResistance;

  0000f	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _nLen$[ebp]
  00014	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00017	f3 0f 59 86 30
	03 00 00	 mulss	 xmm0, DWORD PTR [esi+816]
  0001f	f3 0f 11 86 28
	03 00 00	 movss	 DWORD PTR [esi+808], xmm0
$LN1@Wheel:
  00027	5e		 pop	 esi

; 96   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?Wheel@CCamera@@QAEXH@Z ENDP				; CCamera::Wheel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?IsLock@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?IsLock@CCamera@@QAE_NXZ PROC				; CCamera::IsLock, COMDAT
; _this$ = ecx

; 82   : 	return m_isLock;

  00000	8a 41 2c	 mov	 al, BYTE PTR [ecx+44]

; 83   : }

  00003	c3		 ret	 0
?IsLock@CCamera@@QAE_NXZ ENDP				; CCamera::IsLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Unlock@CCamera@@QAEXXZ
_TEXT	SEGMENT
?Unlock@CCamera@@QAEXXZ PROC				; CCamera::Unlock, COMDAT
; _this$ = ecx

; 77   : 	m_isLock = false;

  00000	c6 41 2c 00	 mov	 BYTE PTR [ecx+44], 0

; 78   : }

  00004	c3		 ret	 0
?Unlock@CCamera@@QAEXXZ ENDP				; CCamera::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?Lock@CCamera@@QAEXXZ
_TEXT	SEGMENT
?Lock@CCamera@@QAEXXZ PROC				; CCamera::Lock, COMDAT
; _this$ = ecx

; 72   : 	m_isLock = true;

  00000	c6 41 2c 01	 mov	 BYTE PTR [ecx+44], 1

; 73   : }

  00004	c3		 ret	 0
?Lock@CCamera@@QAEXXZ ENDP				; CCamera::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ?SetCameraMaxDistance@CCamera@@SAXM@Z
_TEXT	SEGMENT
_fMax$ = 8						; size = 4
?SetCameraMaxDistance@CCamera@@SAXM@Z PROC		; CCamera::SetCameraMaxDistance, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   : 	CAMERA_MAX_DISTANCE = fMax;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fMax$[ebp]
  00008	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?CAMERA_MAX_DISTANCE@CCamera@@0MA, xmm0

; 16   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?SetCameraMaxDistance@CCamera@@SAXM@Z ENDP		; CCamera::SetCameraMaxDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ??1CCamera@@UAE@XZ
_TEXT	SEGMENT
??1CCamera@@UAE@XZ PROC					; CCamera::~CCamera, COMDAT
; _this$ = ecx

; 67   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCamera@@6B@

; 68   : }

  00006	c3		 ret	 0
??1CCamera@@UAE@XZ ENDP					; CCamera::~CCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp
;	COMDAT ??0CCamera@@QAE@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 12
$T2 = -36						; size = 12
$T3 = -36						; size = 12
$T4 = -24						; size = 12
$T5 = -12						; size = 12
??0CCamera@@QAE@XZ PROC					; CCamera::CCamera, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 58   : 	m_v3AngularAcceleration			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00010	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp+8]
  00013	0f 57 c9	 xorps	 xmm1, xmm1
  00016	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00019	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 58   : 	m_v3AngularAcceleration			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00020	0f 14 c1	 unpcklps xmm0, xmm1
  00023	66 0f d6 86 18
	03 00 00	 movq	 QWORD PTR [esi+792], xmm0
  0002b	89 86 20 03 00
	00		 mov	 DWORD PTR [esi+800], eax

; 59   : 	m_v3AngularVelocity				= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00031	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp+8]
  00034	0f 14 c9	 unpcklps xmm1, xmm1
  00037	66 0f d6 8e 24
	03 00 00	 movq	 QWORD PTR [esi+804], xmm1
  0003f	89 86 2c 03 00
	00		 mov	 DWORD PTR [esi+812], eax

; 63   :     SetViewParams(D3DXVECTOR3(0.0f,0.0f,1.0f), D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f,1.0f,0.0f));

  00045	8d 45 f4	 lea	 eax, DWORD PTR $T5[ebp]
  00048	50		 push	 eax
  00049	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  0004c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCamera@@6B@
  00052	50		 push	 eax
  00053	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  00056	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
  0005a	50		 push	 eax
  0005b	c7 86 fc 02 00
	00 9a 99 99 3e	 mov	 DWORD PTR [esi+764], 1050253722 ; 3e99999aH
  00065	c7 86 00 03 00
	00 00 00 00 40	 mov	 DWORD PTR [esi+768], 1073741824 ; 40000000H
  0006f	c7 86 30 03 00
	00 9a 99 99 3e	 mov	 DWORD PTR [esi+816], 1050253722 ; 3e99999aH
  00079	c7 86 34 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+308], 1065353216 ; 3f800000H
  00083	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0008a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00091	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00098	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0
  000a2	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  000ac	c7 86 f0 02 00
	00 00 00 48 42	 mov	 DWORD PTR [esi+752], 1112014848 ; 42480000H
  000b6	c7 86 f4 02 00
	00 00 00 48 42	 mov	 DWORD PTR [esi+756], 1112014848 ; 42480000H
  000c0	c6 86 14 03 00
	00 00		 mov	 BYTE PTR [esi+788], 0
  000c7	c7 86 0c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+780], -1
  000d1	c7 86 10 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+784], -1
  000db	c7 86 f8 02 00
	00 00 00 c8 42	 mov	 DWORD PTR [esi+760], 1120403456 ; 42c80000H
  000e5	c6 86 34 03 00
	00 01		 mov	 BYTE PTR [esi+820], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000ec	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 181  :     y = fy;

  000f3	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T5[ebp+4], 1065353216 ; 3f800000H

; 182  :     z = fz;

  000fa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0

; 180  :     x = fx;

  00101	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0

; 181  :     y = fy;

  00108	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 182  :     z = fz;

  0010f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+8], 0

; 180  :     x = fx;

  00116	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 181  :     y = fy;

  0011d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 182  :     z = fz;

  00124	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR $T1[ebp+8], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Camera.cpp

; 63   :     SetViewParams(D3DXVECTOR3(0.0f,0.0f,1.0f), D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f,1.0f,0.0f));

  0012b	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 64   : }

  00130	8b c6		 mov	 eax, esi
  00132	5e		 pop	 esi
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
??0CCamera@@QAE@XZ ENDP					; CCamera::CCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
