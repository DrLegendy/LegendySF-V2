; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_szAttributeDataFileHeader@@3QBDB DB 'AttributeData', 00H ; c_szAttributeDataFileHeader
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	?Type@CAttributeData@@SAKXZ			; CAttributeData::Type
PUBLIC	??0CAttributeData@@QAE@PBD@Z			; CAttributeData::CAttributeData
PUBLIC	??1CAttributeData@@UAE@XZ			; CAttributeData::~CAttributeData
PUBLIC	?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ; CAttributeData::GetCollisionDataVector
PUBLIC	?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ; CAttributeData::GetHeightDataVector
PUBLIC	?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ; CAttributeData::AddCollisionData
PUBLIC	?GetHeightDataCount@CAttributeData@@QBEKXZ	; CAttributeData::GetHeightDataCount
PUBLIC	?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ; CAttributeData::GetHeightDataPointer
PUBLIC	?GetMaximizeRadius@CAttributeData@@QAEMXZ	; CAttributeData::GetMaximizeRadius
PUBLIC	?OnLoad@CAttributeData@@MAE_NHPBX@Z		; CAttributeData::OnLoad
PUBLIC	?OnClear@CAttributeData@@MAEXXZ			; CAttributeData::OnClear
PUBLIC	?OnIsEmpty@CAttributeData@@MBE_NXZ		; CAttributeData::OnIsEmpty
PUBLIC	?OnIsType@CAttributeData@@MAE_NK@Z		; CAttributeData::OnIsType
PUBLIC	?OnSelfDestruct@CAttributeData@@MAEXXZ		; CAttributeData::OnSelfDestruct
PUBLIC	?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
PUBLIC	?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
PUBLIC	?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
PUBLIC	??_GCAttributeData@@UAEPAXI@Z			; CAttributeData::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
PUBLIC	??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >
PUBLIC	??$_Destroy_range@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAXPAVCStaticCollisionData@@QAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Destroy_range<std::allocator<CStaticCollisionData> >
PUBLIC	??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@QAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
PUBLIC	??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CStaticCollisionData> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@IAAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR3> >
PUBLIC	??$_Uninitialized_move@PAUSHeightData@@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@QAU1@0PAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_move<SHeightData *,std::allocator<SHeightData> >
PUBLIC	??$_Uninitialized_move@PAUD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CAttributeData@@6B@				; CAttributeData::`vftable'
PUBLIC	??_C@_0P@COGNDLAI@CAttributeData@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CAttributeData@@6B@			; CAttributeData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAttributeData@@@8			; CAttributeData `RTTI Type Descriptor'
PUBLIC	??_R3CAttributeData@@8				; CAttributeData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAttributeData@@8				; CAttributeData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAttributeData@@8			; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CResource@@8			; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCResource@@@8				; CResource `RTTI Type Descriptor'
PUBLIC	??_R3CResource@@8				; CResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResource@@8				; CResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CReferenceObject@@8		; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCReferenceObject@@@8			; CReferenceObject `RTTI Type Descriptor'
PUBLIC	??_R3CReferenceObject@@8			; CReferenceObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CReferenceObject@@8			; CReferenceObject::`RTTI Base Class Array'
PUBLIC	__real@4049000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?Clear@CResource@@QAEXXZ:PROC			; CResource::Clear
EXTRN	?StringToType@CResource@@SAKPBD@Z:PROC		; CResource::StringToType
EXTRN	?CreateDeviceObjects@CResource@@UAE_NXZ:PROC	; CResource::CreateDeviceObjects
EXTRN	?DestroyDeviceObjects@CResource@@UAEXXZ:PROC	; CResource::DestroyDeviceObjects
EXTRN	??0CResource@@QAE@PBD@Z:PROC			; CResource::CResource
EXTRN	??1CResource@@UAE@XZ:PROC			; CResource::~CResource
EXTRN	?OnIsType@CResource@@MAE_NK@Z:PROC		; CResource::OnIsType
EXTRN	?OnConstruct@CResource@@MAEXXZ:PROC		; CResource::OnConstruct
EXTRN	??_ECAttributeData@@UAEPAXI@Z:PROC		; CAttributeData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
_BSS	SEGMENT
?s_type@?1??Type@CAttributeData@@SAKXZ@4KA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::s_type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT ??_R2CReferenceObject@@8
rdata$r	SEGMENT
??_R2CReferenceObject@@8 DD FLAT:??_R1A@?0A@EA@CReferenceObject@@8 ; CReferenceObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CReferenceObject@@8
rdata$r	SEGMENT
??_R3CReferenceObject@@8 DD 00H				; CReferenceObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCReferenceObject@@@8
data$r	SEGMENT
??_R0?AVCReferenceObject@@@8 DD FLAT:??_7type_info@@6B@	; CReferenceObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCReferenceObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CReferenceObject@@8 DD FLAT:??_R0?AVCReferenceObject@@@8 ; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CResource@@8
rdata$r	SEGMENT
??_R2CResource@@8 DD FLAT:??_R1A@?0A@EA@CResource@@8	; CResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CResource@@8
rdata$r	SEGMENT
??_R3CResource@@8 DD 00H				; CResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResource@@@8
data$r	SEGMENT
??_R0?AVCResource@@@8 DD FLAT:??_7type_info@@6B@	; CResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResource@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResource@@8 DD FLAT:??_R0?AVCResource@@@8 ; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAttributeData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAttributeData@@8 DD FLAT:??_R0?AVCAttributeData@@@8 ; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R2CAttributeData@@8
rdata$r	SEGMENT
??_R2CAttributeData@@8 DD FLAT:??_R1A@?0A@EA@CAttributeData@@8 ; CAttributeData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CAttributeData@@8
rdata$r	SEGMENT
??_R3CAttributeData@@8 DD 00H				; CAttributeData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAttributeData@@@8
data$r	SEGMENT
??_R0?AVCAttributeData@@@8 DD FLAT:??_7type_info@@6B@	; CAttributeData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAttributeData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAttributeData@@6B@
rdata$r	SEGMENT
??_R4CAttributeData@@6B@ DD 00H				; CAttributeData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAttributeData@@@8
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COGNDLAI@CAttributeData@
CONST	SEGMENT
??_C@_0P@COGNDLAI@CAttributeData@ DB 'CAttributeData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CAttributeData@@6B@
CONST	SEGMENT
??_7CAttributeData@@6B@ DD FLAT:??_R4CAttributeData@@6B@ ; CAttributeData::`vftable'
	DD	FLAT:??_ECAttributeData@@UAEPAXI@Z
	DD	FLAT:?OnConstruct@CResource@@MAEXXZ
	DD	FLAT:?OnSelfDestruct@CAttributeData@@MAEXXZ
	DD	FLAT:?CreateDeviceObjects@CResource@@UAE_NXZ
	DD	FLAT:?DestroyDeviceObjects@CResource@@UAEXXZ
	DD	FLAT:?OnLoad@CAttributeData@@MAE_NHPBX@Z
	DD	FLAT:?OnClear@CAttributeData@@MAEXXZ
	DD	FLAT:?OnIsEmpty@CAttributeData@@MBE_NXZ
	DD	FLAT:?OnIsType@CAttributeData@@MAE_NK@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CAttributeData@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CAttributeData@@SAKXZ$0
__ehfuncinfo$?Type@CAttributeData@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CAttributeData@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Uninitialized_move<D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00009	56		 push	 esi

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 18		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00011	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1509 :         ++_Last;

  0001c	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0001f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1509 :         ++_Last;

  00022	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00025	3b ce		 cmp	 ecx, esi
  00027	75 e8		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:
  00029	5e		 pop	 esi

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Uninitialized_move@PAUD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Uninitialized_move<D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSHeightData@@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@QAU1@0PAU1@AAV?$allocator@USHeightData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSHeightData@@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@QAU1@0PAU1@AAV?$allocator@USHeightData@@@0@@Z PROC ; std::_Uninitialized_move<SHeightData *,std::allocator<SHeightData> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  0000a	57		 push	 edi

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b c7		 cmp	 eax, edi
  00010	74 6e		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00012	8b d6		 mov	 edx, esi
  00014	8d 48 2c	 lea	 ecx, DWORD PTR [eax+44]
  00017	2b d0		 sub	 edx, eax
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Uninitiali:
  00020	0f 10 41 d4	 movups	 xmm0, XMMWORD PTR [ecx-44]

; 1509 :         ++_Last;

  00024	8d 49 30	 lea	 ecx, DWORD PTR [ecx+48]
  00027	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0002a	0f 10 41 b4	 movups	 xmm0, XMMWORD PTR [ecx-76]
  0002e	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00032	8a 41 c4	 mov	 al, BYTE PTR [ecx-60]
  00035	88 46 20	 mov	 BYTE PTR [esi+32], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00038	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0003f	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00046	c7 44 0a d0 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-48], 0

; 386  :         _Myfirst = _Right._Myfirst;

  0004e	8b 41 c8	 mov	 eax, DWORD PTR [ecx-56]
  00051	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 387  :         _Mylast  = _Right._Mylast;

  00054	8b 41 cc	 mov	 eax, DWORD PTR [ecx-52]
  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0005a	83 c6 30	 add	 esi, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 388  :         _Myend   = _Right._Myend;

  0005d	8b 41 d0	 mov	 eax, DWORD PTR [ecx-48]
  00060	89 44 0a d0	 mov	 DWORD PTR [edx+ecx-48], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00064	8d 41 d4	 lea	 eax, DWORD PTR [ecx-44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 390  :         _Right._Myfirst = pointer();

  00067	c7 41 c8 00 00
	00 00		 mov	 DWORD PTR [ecx-56], 0

; 391  :         _Right._Mylast  = pointer();

  0006e	c7 41 cc 00 00
	00 00		 mov	 DWORD PTR [ecx-52], 0

; 392  :         _Right._Myend   = pointer();

  00075	c7 41 d0 00 00
	00 00		 mov	 DWORD PTR [ecx-48], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0007c	3b c7		 cmp	 eax, edi
  0007e	75 a0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00080	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00083	56		 push	 esi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  0008d	8b c6		 mov	 eax, esi
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
??$_Uninitialized_move@PAUSHeightData@@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@QAU1@0PAU1@AAV?$allocator@USHeightData@@@0@@Z ENDP ; std::_Uninitialized_move<SHeightData *,std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@IAAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@IAAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR3> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN16@Uninitiali
  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1838 :     }
; 1839 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN16@Uninitiali:

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  00015	8b c1		 mov	 eax, ecx

; 1838 :     }
; 1839 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@IAAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<CStaticCollisionData> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	57		 push	 edi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 1a		 je	 SHORT $LN18@Uninitiali
  0000e	56		 push	 esi
  0000f	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00012	c1 e6 04	 shl	 esi, 4
  00015	56		 push	 esi
  00016	6a 00		 push	 0
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _memset
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  00024	5e		 pop	 esi
  00025	5f		 pop	 edi

; 1838 :     }
; 1839 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN18@Uninitiali:

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  00028	8b c7		 mov	 eax, edi
  0002a	5f		 pop	 edi

; 1838 :     }
; 1839 : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<CStaticCollisionData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z PROC ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 30		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00010	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00013	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00016	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0001a	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0001e	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  00022	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  00026	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
  0002a	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  0002e	0f 10 41 40	 movups	 xmm0, XMMWORD PTR [ecx+64]

; 1509 :         ++_Last;

  00032	83 c1 50	 add	 ecx, 80			; 00000050H

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00035	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0

; 1509 :         ++_Last;

  00039	83 c0 50	 add	 eax, 80			; 00000050H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0003c	3b ca		 cmp	 ecx, edx
  0003e	75 d0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ENDP ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  0000b	85 db		 test	 ebx, ebx
  0000d	74 31		 je	 SHORT $LN3@Uninitiali
  0000f	56		 push	 esi
  00010	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
$LL4@Uninitiali:

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00013	6a 30		 push	 48			; 00000030H
  00015	6a 00		 push	 0
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00020	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00027	83 c7 30	 add	 edi, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00037	8d 76 30	 lea	 esi, DWORD PTR [esi+48]

; 1825 :     // value-initialize _Count objects to raw _First, using _Al
; 1826 :     using _Ptrty = typename _Alloc::value_type*;
; 1827 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1828 :         auto _PFirst = _Unfancy(_First);
; 1829 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1830 :         return _First + _Count;
; 1831 :     } else {
; 1832 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1833 :         for (; 0 < _Count; --_Count) {

  0003a	83 eb 01	 sub	 ebx, 1
  0003d	75 d4		 jne	 SHORT $LL4@Uninitiali
  0003f	5e		 pop	 esi
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00040	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  00043	57		 push	 edi
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  0004d	8b c7		 mov	 eax, edi
  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx

; 1838 :     }
; 1839 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv319 = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1183 :         if (_Newsize > max_size()) {

  00005	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  00011	0f 87 9c 00 00
	00		 ja	 $LN36@Resize_rea

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00021	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00023	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	d1 fa		 sar	 edx, 1
  0002a	8b ca		 mov	 ecx, edx
  0002c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0002f	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00031	8b d1		 mov	 edx, ecx
  00033	d1 ea		 shr	 edx, 1
  00035	2b c2		 sub	 eax, edx
  00037	3b c8		 cmp	 ecx, eax
  00039	77 10		 ja	 SHORT $LN34@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0003b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0003e	3b c6		 cmp	 eax, esi
  00040	72 09		 jb	 SHORT $LN34@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00042	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00047	77 6f		 ja	 SHORT $LN37@Resize_rea
  00049	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN34@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0004b	8b c6		 mov	 eax, esi
$LN18@Resize_rea:
  0004d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00050	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00053	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00054	89 45 08	 mov	 DWORD PTR tv319[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00057	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0005c	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005d	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0005f	53		 push	 ebx
  00060	ff 77 04	 push	 DWORD PTR [edi+4]
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@QAU1@0PAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_move<D3DXVECTOR3 *,std::allocator<D3DXVECTOR3> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0006a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0006c	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0006f	85 c0		 test	 eax, eax
  00071	74 26		 je	 SHORT $LN29@Resize_rea

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00076	2b c8		 sub	 ecx, eax
  00078	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007d	f7 e9		 imul	 ecx
  0007f	d1 fa		 sar	 edx, 1
  00081	8b c2		 mov	 eax, edx
  00083	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00086	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00088	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0008b	c1 e0 02	 shl	 eax, 2
  0008e	50		 push	 eax
  0008f	ff 37		 push	 DWORD PTR [edi]
  00091	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00096	83 c4 08	 add	 esp, 8
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00099	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0009c	89 1f		 mov	 DWORD PTR [edi], ebx
  0009e	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000a1	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000a4	8b 45 08	 mov	 eax, DWORD PTR tv319[ebp]
  000a7	03 c3		 add	 eax, ebx
  000a9	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx

; 1208 :     }

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN36@Resize_rea:

; 1184 :             _Xlength();

  000b3	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN37@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000b8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN33@Resize_rea:
  000bd	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1183 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  0000f	81 fb 33 33 33
	03		 cmp	 ebx, 53687091		; 03333333H
  00015	0f 87 a1 00 00
	00		 ja	 $LN31@Resize_rea

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00023	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00025	f7 e9		 imul	 ecx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00027	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002a	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002c	c1 fa 05	 sar	 edx, 5
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx
  00036	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00039	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0003e	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00040	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00045	c1 fa 05	 sar	 edx, 5
  00048	8b ca		 mov	 ecx, edx
  0004a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004d	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0004f	8b d1		 mov	 edx, ecx
  00051	d1 ea		 shr	 edx, 1
  00053	2b c2		 sub	 eax, edx
  00055	3b c8		 cmp	 ecx, eax
  00057	76 4f		 jbe	 SHORT $LN10@Resize_rea
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 65   :     return _Count * _Ty_size;

  00059	8b fb		 mov	 edi, ebx
$LN18@Resize_rea:
  0005b	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0005e	c1 e0 04	 shl	 eax, 4

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00067	ff 75 fc	 push	 DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006a	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0006c	8b cb		 mov	 ecx, ebx
  0006e	8b 45 08	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00071	2b c8		 sub	 ecx, eax

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00073	51		 push	 ecx

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00074	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00077	c1 e1 04	 shl	 ecx, 4
  0007a	03 ce		 add	 ecx, esi

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CStaticCollisionData> >

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00085	50		 push	 eax
  00086	56		 push	 esi
  00087	ff 70 04	 push	 DWORD PTR [eax+4]
  0008a	ff 30		 push	 DWORD PTR [eax]
  0008c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);
; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1204 :         _RERAISE;
; 1205 :         _CATCH_END
; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00094	83 c4 20	 add	 esp, 32			; 00000020H

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);
; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1204 :         _RERAISE;
; 1205 :         _CATCH_END
; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00097	57		 push	 edi
  00098	53		 push	 ebx
  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1208 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 08 00	 ret	 8
$LN10@Resize_rea:

; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000a8	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000ab	3b fb		 cmp	 edi, ebx
  000ad	72 aa		 jb	 SHORT $LN29@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000af	81 ff 33 33 33
	03		 cmp	 edi, 53687091		; 03333333H
  000b5	76 a4		 jbe	 SHORT $LN18@Resize_rea

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000b7	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN31@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1184 :             _Xlength();

  000bc	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN28@Resize_rea:
  000c1	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv302 = -8						; size = 4
__Newvec$1$ = -4					; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1183 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	81 fb 55 55 55
	05		 cmp	 ebx, 89478485		; 05555555H
  00014	0f 87 e7 00 00
	00		 ja	 $LN38@Resize_rea

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00022	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00024	f7 e9		 imul	 ecx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00026	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00029	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002b	c1 fa 03	 sar	 edx, 3
  0002e	8b c2		 mov	 eax, edx
  00030	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00033	03 c2		 add	 eax, edx
  00035	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00038	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003d	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0003f	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00044	c1 fa 03	 sar	 edx, 3
  00047	8b ca		 mov	 ecx, edx
  00049	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004c	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0004e	8b d1		 mov	 edx, ecx
  00050	d1 ea		 shr	 edx, 1
  00052	2b c2		 sub	 eax, edx
  00054	3b c8		 cmp	 ecx, eax
  00056	77 14		 ja	 SHORT $LN36@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00058	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0005b	3b c3		 cmp	 eax, ebx
  0005d	72 0d		 jb	 SHORT $LN36@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005f	3d 55 55 55 05	 cmp	 eax, 89478485		; 05555555H
  00064	0f 87 9c 00 00
	00		 ja	 $LN39@Resize_rea
  0006a	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN36@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0006c	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
  0006e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00071	c1 e0 04	 shl	 eax, 4

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00074	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00075	89 45 f8	 mov	 DWORD PTR tv302[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00078	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00080	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00082	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00084	89 75 fc	 mov	 DWORD PTR __Newvec$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00087	2b c1		 sub	 eax, ecx

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00089	57		 push	 edi
  0008a	50		 push	 eax

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0008b	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0008e	c1 e0 04	 shl	 eax, 4
  00091	03 c6		 add	 eax, esi

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00099	57		 push	 edi
  0009a	56		 push	 esi
  0009b	ff 77 04	 push	 DWORD PTR [edi+4]
  0009e	ff 37		 push	 DWORD PTR [edi]
  000a0	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSHeightData@@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@QAU1@0PAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_move<SHeightData *,std::allocator<SHeightData> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000a5	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a7	83 c4 20	 add	 esp, 32			; 00000020H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000aa	85 c9		 test	 ecx, ecx
  000ac	74 35		 je	 SHORT $LN29@Resize_rea

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000ae	57		 push	 edi
  000af	ff 77 04	 push	 DWORD PTR [edi+4]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b8	8b 37		 mov	 esi, DWORD PTR [edi]
  000ba	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000bf	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000c2	2b ce		 sub	 ecx, esi
  000c4	f7 e9		 imul	 ecx
  000c6	c1 fa 03	 sar	 edx, 3
  000c9	8b c2		 mov	 eax, edx
  000cb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ce	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d3	c1 e0 04	 shl	 eax, 4
  000d6	50		 push	 eax
  000d7	56		 push	 esi
  000d8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000dd	8b 75 fc	 mov	 esi, DWORD PTR __Newvec$1$[ebp]
  000e0	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000e3	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000e6	89 37		 mov	 DWORD PTR [edi], esi
  000e8	c1 e0 04	 shl	 eax, 4
  000eb	03 c6		 add	 eax, esi
  000ed	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR tv302[ebp]
  000f3	03 c6		 add	 eax, esi
  000f5	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx

; 1208 :     }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
$LN38@Resize_rea:

; 1184 :             _Xlength();

  00101	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
$LN39@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00106	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Resize_rea:
  0010b	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@QAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@QAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z PROC ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@QAU1@AAV?$allocator@UD3DXVECTOR3@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAXPAVCStaticCollisionData@@QAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAXPAVCStaticCollisionData@@QAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CStaticCollisionData> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAXPAVCStaticCollisionData@@QAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CStaticCollisionData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SHeightData> >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 4e		 je	 SHORT $LN3@Destroy_ra
  0000f	83 c6 2c	 add	 esi, 44			; 0000002cH
  00012	57		 push	 edi
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00013	8b 7e f8	 mov	 edi, DWORD PTR [esi-8]
  00016	85 ff		 test	 edi, edi
  00018	74 38		 je	 SHORT $LN25@Destroy_ra

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	d1 fa		 sar	 edx, 1
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00031	c1 e0 02	 shl	 eax, 2
  00034	50		 push	 eax
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0003b	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00045	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 1699 :             _Myend   = pointer();

  0004c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN25@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00052	83 c6 30	 add	 esi, 48			; 00000030H
  00055	8d 46 d4	 lea	 eax, DWORD PTR [esi-44]
  00058	3b c3		 cmp	 eax, ebx
  0005a	75 b7		 jne	 SHORT $LL4@Destroy_ra
  0005c	5f		 pop	 edi
$LN3@Destroy_ra:
  0005d	5e		 pop	 esi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0005e	5b		 pop	 ebx
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAEPAVCStaticCollisionData@@QAV2@ABV2@@Z
_TEXT	SEGMENT
__Newvec$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv290 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAEPAVCStaticCollisionData@@QAV2@ABV2@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 37		 mov	 esi, DWORD PTR [edi]
  00015	2b d6		 sub	 edx, esi

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 05	 sar	 edx, 5
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 05	 sar	 edx, 5
  00035	8b da		 mov	 ebx, edx
  00037	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0003a	03 da		 add	 ebx, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0003c	81 fb 33 33 33
	03		 cmp	 ebx, 53687091		; 03333333H
  00042	0f 84 d1 00 00
	00		 je	 $LN36@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00050	2b ce		 sub	 ecx, esi

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00052	43		 inc	 ebx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00055	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005a	c1 fa 05	 sar	 edx, 5
  0005d	8b ca		 mov	 ecx, edx
  0005f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00062	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00064	8b d1		 mov	 edx, ecx
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0006e	8b f3		 mov	 esi, ebx
  00070	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00072	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00075	3b f3		 cmp	 esi, ebx
  00077	0f 42 f3	 cmovb	 esi, ebx
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007a	81 fe 33 33 33
	03		 cmp	 esi, 53687091		; 03333333H
  00080	0f 87 98 00 00
	00		 ja	 $LN37@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00086	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00089	c1 e0 04	 shl	 eax, 4

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00095	8b d0		 mov	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00097	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009a	83 c4 04	 add	 esp, 4
  0009d	89 55 f8	 mov	 DWORD PTR __Newvec$1$[ebp], edx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000a0	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000a6	c1 e0 04	 shl	 eax, 4
  000a9	03 c2		 add	 eax, edx
  000ab	89 45 fc	 mov	 DWORD PTR tv290[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000ae	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  000b1	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  000b5	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  000b9	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  000bd	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  000c1	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
  000c5	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  000c9	0f 10 41 40	 movups	 xmm0, XMMWORD PTR [ecx+64]
  000cd	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d4	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d6	39 45 08	 cmp	 DWORD PTR __Whereptr$[ebp], eax
  000d9	74 1a		 je	 SHORT $LN5@Emplace_re

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000db	57		 push	 edi
  000dc	52		 push	 edx
  000dd	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000e6	8b 55 fc	 mov	 edx, DWORD PTR tv290[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000ef	83 c2 50	 add	 edx, 80			; 00000050H

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000f2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000f5	57		 push	 edi
  000f6	52		 push	 edx
  000f7	50		 push	 eax
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@QAV1@0PAV1@AAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_move<CStaticCollisionData *,std::allocator<CStaticCollisionData> >
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00101	8b cf		 mov	 ecx, edi
  00103	56		 push	 esi
  00104	53		 push	 ebx
  00105	ff 75 f8	 push	 DWORD PTR __Newvec$1$[ebp]
  00108	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR tv290[ebp]
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx

; 767  :     }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN36@Emplace_re:

; 738  :             _Xlength();

  00119	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN37@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0011e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN34@Emplace_re:
  00123	cc		 int	 3
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCAttributeData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCAttributeData@@UAEPAXI@Z PROC			; CAttributeData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CAttributeData@@UAE@XZ ; CAttributeData::~CAttributeData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 48		 push	 72			; 00000048H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCAttributeData@@UAEPAXI@Z ENDP			; CAttributeData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;
; 1669 :         pointer& _Myfirst = _My_data._Myfirst;
; 1670 :         pointer& _Mylast  = _My_data._Mylast;
; 1671 :         pointer& _Myend   = _My_data._Myend;
; 1672 : 
; 1673 :         _My_data._Orphan_all();
; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 3e		 mov	 edi, DWORD PTR [esi]
  00009	85 ff		 test	 edi, edi
  0000b	74 26		 je	 SHORT $LN2@Change_arr

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00010	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00015	2b cf		 sub	 ecx, edi
  00017	f7 e9		 imul	 ecx
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00026	c1 e0 04	 shl	 eax, 4
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00030	83 c4 08	 add	 esp, 8
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00033	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00039	89 0e		 mov	 DWORD PTR [esi], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0003b	5f		 pop	 edi
  0003c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0003f	c1 e0 04	 shl	 eax, 4
  00042	03 c1		 add	 eax, ecx
  00044	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00047	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0004a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0004d	c1 e0 04	 shl	 eax, 4
  00050	03 c1		 add	 eax, ecx
  00052	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00055	5e		 pop	 esi

; 1683 :     }

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnSelfDestruct@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnSelfDestruct@CAttributeData@@MAEXXZ PROC		; CAttributeData::OnSelfDestruct, COMDAT
; _this$ = ecx

; 189  : 	Clear();

  00000	e9 00 00 00 00	 jmp	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
?OnSelfDestruct@CAttributeData@@MAEXXZ ENDP		; CAttributeData::OnSelfDestruct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnIsType@CAttributeData@@MAE_NK@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?OnIsType@CAttributeData@@MAE_NK@Z PROC			; CAttributeData::OnIsType, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 175  : 	if (CAttributeData::Type() == type)

  00006	e8 00 00 00 00	 call	 ?Type@CAttributeData@@SAKXZ ; CAttributeData::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 07		 jne	 SHORT $LN2@OnIsType

; 176  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 179  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@OnIsType:

; 177  : 
; 178  : 	return CResource::OnIsType(type);

  00019	52		 push	 edx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?OnIsType@CResource@@MAE_NK@Z ; CResource::OnIsType
  00021	5e		 pop	 esi

; 179  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?OnIsType@CAttributeData@@MAE_NK@Z ENDP			; CAttributeData::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnIsEmpty@CAttributeData@@MBE_NXZ
_TEXT	SEGMENT
?OnIsEmpty@CAttributeData@@MBE_NXZ PROC			; CAttributeData::OnIsEmpty, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	3b 41 34	 cmp	 eax, DWORD PTR [ecx+52]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 165  : 	if (!m_StaticCollisionDataVector.empty())

  00006	75 0b		 jne	 SHORT $LN9@OnIsEmpty
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00008	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0000b	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 167  : 	if (!m_HeightDataVector.empty())

  0000e	75 03		 jne	 SHORT $LN9@OnIsEmpty

; 169  : 
; 170  : 	return true;

  00010	b0 01		 mov	 al, 1

; 171  : }

  00012	c3		 ret	 0
$LN9@OnIsEmpty:

; 168  : 		return false;

  00013	32 c0		 xor	 al, al

; 171  : }

  00015	c3		 ret	 0
?OnIsEmpty@CAttributeData@@MBE_NXZ ENDP			; CAttributeData::OnIsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnClear@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnClear@CAttributeData@@MAEXXZ PROC			; CAttributeData::OnClear, COMDAT
; _this$ = ecx

; 159  : 	m_StaticCollisionDataVector.clear();

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	56		 push	 esi

; 160  : 	m_HeightDataVector.clear();

  00004	8d 71 3c	 lea	 esi, DWORD PTR [ecx+60]
  00007	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >

; 1390 :         _Mylast = _Myfirst;

  00015	8b 06		 mov	 eax, DWORD PTR [esi]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001d	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 161  : }

  0001e	c3		 ret	 0
?OnClear@CAttributeData@@MAEXXZ ENDP			; CAttributeData::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnLoad@CAttributeData@@MAE_NHPBX@Z
_TEXT	SEGMENT
_szHeader$ = -36					; size = 14
_dwCollisionDataCount$1$ = -20				; size = 4
tv750 = -20						; size = 4
__My_data$2$ = -16					; size = 4
__Oldsize$1$ = -16					; size = 4
tv270 = -16						; size = 4
tv251 = -16						; size = 4
__Oldlast$1$ = -12					; size = 4
_dwPrimitiveCount$1$ = -12				; size = 4
_c_pbBuf$1$ = -12					; size = 4
_dwHeightDataCount$1$ = -8				; size = 4
_this$1$ = -4						; size = 4
___formal$ = 8						; size = 4
_k$1$ = 12						; size = 4
tv773 = 12						; size = 4
tv758 = 12						; size = 4
_c_pvBuf$ = 12						; size = 4
$T1 = 15						; size = 1
$T2 = 15						; size = 1
$T3 = 15						; size = 1
?OnLoad@CAttributeData@@MAE_NHPBX@Z PROC		; CAttributeData::OnLoad, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	57		 push	 edi

; 62   : 	if (!c_pvBuf)

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _c_pvBuf$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 ff		 test	 edi, edi
  0000f	0f 84 b3 03 00
	00		 je	 $LN8@OnLoad

; 63   : 	{
; 64   : 		return true;
; 65   : 	}
; 66   : 
; 67   : 	const BYTE * c_pbBuf = static_cast<const BYTE *> (c_pvBuf);
; 68   : 
; 69   : 	char szHeader[c_iAttributeDataFileHeaderLength+1];
; 70   : 	memcpy(szHeader, c_pbBuf, c_iAttributeDataFileHeaderLength+1);

  00015	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 71   : 	c_pbBuf += c_iAttributeDataFileHeaderLength+1;
; 72   : 	if (strcmp(szHeader, c_szAttributeDataFileHeader))

  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?c_szAttributeDataFileHeader@@3QBDB
  0001d	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00021	89 45 e4	 mov	 DWORD PTR _szHeader$[ebp+8], eax
  00024	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  00028	66 89 45 e8	 mov	 WORD PTR _szHeader$[ebp+12], ax
  0002c	8d 45 dc	 lea	 eax, DWORD PTR _szHeader$[ebp]
  0002f	66 0f d6 45 dc	 movq	 QWORD PTR _szHeader$[ebp], xmm0
$LL81@OnLoad:
  00034	8a 10		 mov	 dl, BYTE PTR [eax]
  00036	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00038	75 1a		 jne	 SHORT $LN82@OnLoad
  0003a	84 d2		 test	 dl, dl
  0003c	74 12		 je	 SHORT $LN83@OnLoad
  0003e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00041	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00044	75 0e		 jne	 SHORT $LN82@OnLoad
  00046	83 c0 02	 add	 eax, 2
  00049	83 c1 02	 add	 ecx, 2
  0004c	84 d2		 test	 dl, dl
  0004e	75 e4		 jne	 SHORT $LL81@OnLoad
$LN83@OnLoad:
  00050	33 c0		 xor	 eax, eax
  00052	eb 05		 jmp	 SHORT $LN84@OnLoad
$LN82@OnLoad:
  00054	1b c0		 sbb	 eax, eax
  00056	83 c8 01	 or	 eax, 1
$LN84@OnLoad:
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN14@OnLoad

; 73   : 		return FALSE;

  0005d	32 c0		 xor	 al, al
  0005f	5f		 pop	 edi

; 155  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN14@OnLoad:

; 74   : 
; 75   : 	DWORD dwCollisionDataCount;
; 76   : 	DWORD dwHeightDataCount;
; 77   : 	memcpy(&dwCollisionDataCount, c_pbBuf, sizeof(DWORD));
; 78   : 	c_pbBuf += sizeof(DWORD);
; 79   : 	memcpy(&dwHeightDataCount, c_pbBuf, sizeof(DWORD));

  00066	8b 47 12	 mov	 eax, DWORD PTR [edi+18]
  00069	89 45 f8	 mov	 DWORD PTR _dwHeightDataCount$1$[ebp], eax

; 80   : 	c_pbBuf += sizeof(DWORD);
; 81   : 
; 82   : 	m_StaticCollisionDataVector.clear();

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006f	56		 push	 esi
  00070	8b 77 0e	 mov	 esi, DWORD PTR [edi+14]
  00073	83 c7 16	 add	 edi, 22			; 00000016H
  00076	89 75 ec	 mov	 DWORD PTR _dwCollisionDataCount$1$[ebp], esi
  00079	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0007c	89 50 34	 mov	 DWORD PTR [eax+52], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1224 :         if (_Newsize > _Oldsize) { // append

  0007f	85 f6		 test	 esi, esi
  00081	74 44		 je	 SHORT $LN26@OnLoad

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00083	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00086	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0008b	2b ca		 sub	 ecx, edx
  0008d	f7 e9		 imul	 ecx
  0008f	c1 fa 05	 sar	 edx, 5
  00092	8b c2		 mov	 eax, edx
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	03 c2		 add	 eax, edx

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  00099	3b f0		 cmp	 esi, eax
  0009b	76 12		 jbe	 SHORT $LN27@OnLoad

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a0	8d 45 0f	 lea	 eax, DWORD PTR $T3[ebp]
  000a3	50		 push	 eax
  000a4	56		 push	 esi
  000a5	8d 49 30	 lea	 ecx, DWORD PTR [ecx+48]
  000a8	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  000ad	eb 18		 jmp	 SHORT $LN26@OnLoad
$LN27@OnLoad:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000b2	83 c0 30	 add	 eax, 48			; 00000030H
  000b5	50		 push	 eax
  000b6	56		 push	 esi
  000b7	ff 30		 push	 DWORD PTR [eax]
  000b9	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@VCStaticCollisionData@@@std@@@std@@YAPAVCStaticCollisionData@@PAV1@IAAV?$allocator@VCStaticCollisionData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CStaticCollisionData> >

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000c4	89 41 34	 mov	 DWORD PTR [ecx+52], eax
$LN26@OnLoad:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 84   : 	m_HeightDataVector.clear();

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ca	83 c0 3c	 add	 eax, 60			; 0000003cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000cd	50		 push	 eax
  000ce	ff 70 04	 push	 DWORD PTR [eax+4]
  000d1	ff 30		 push	 DWORD PTR [eax]
  000d3	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >

; 1390 :         _Mylast = _Myfirst;

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  000de	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000e1	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000e4	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 1390 :         _Mylast = _Myfirst;

  000e7	89 4d f4	 mov	 DWORD PTR __Oldlast$1$[ebp], ecx

; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000ea	2b c8		 sub	 ecx, eax
  000ec	89 45 0c	 mov	 DWORD PTR tv773[ebp], eax
  000ef	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000f4	f7 e9		 imul	 ecx

; 1216 :         if (_Newsize < _Oldsize) { // trim

  000f6	8b 45 f8	 mov	 eax, DWORD PTR _dwHeightDataCount$1$[ebp]
  000f9	c1 fa 03	 sar	 edx, 3
  000fc	8b ca		 mov	 ecx, edx
  000fe	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00101	03 ca		 add	 ecx, edx
  00103	89 4d f0	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx
  00106	3b c1		 cmp	 eax, ecx
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010b	73 21		 jae	 SHORT $LN38@OnLoad

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0010d	83 c1 3c	 add	 ecx, 60			; 0000003cH

; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;

  00110	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00113	51		 push	 ecx
  00114	ff 75 f4	 push	 DWORD PTR __Oldlast$1$[ebp]

; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;

  00117	c1 e6 04	 shl	 esi, 4
  0011a	03 75 0c	 add	 esi, DWORD PTR tv773[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >

; 1220 :             _Mylast = _Newlast;

  00123	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00126	89 71 40	 mov	 DWORD PTR [ecx+64], esi

; 1221 :             return;

  00129	8b 75 ec	 mov	 esi, DWORD PTR _dwCollisionDataCount$1$[ebp]
  0012c	eb 50		 jmp	 SHORT $LN90@OnLoad
$LN38@OnLoad:

; 1224 :         if (_Newsize > _Oldsize) { // append

  0012e	76 51		 jbe	 SHORT $LN39@OnLoad

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00130	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00133	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00138	2b 4d 0c	 sub	 ecx, DWORD PTR tv773[ebp]
  0013b	f7 e9		 imul	 ecx

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  0013d	8b 4d f8	 mov	 ecx, DWORD PTR _dwHeightDataCount$1$[ebp]
  00140	c1 fa 03	 sar	 edx, 3
  00143	8b c2		 mov	 eax, edx
  00145	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00148	03 c2		 add	 eax, edx
  0014a	3b c8		 cmp	 ecx, eax
  0014c	76 15		 jbe	 SHORT $LN40@OnLoad

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  0014e	8d 45 0f	 lea	 eax, DWORD PTR $T2[ebp]
  00151	50		 push	 eax
  00152	51		 push	 ecx
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00156	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  00159	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00161	eb 1e		 jmp	 SHORT $LN39@OnLoad
$LN40@OnLoad:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00163	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00166	2b 4d f0	 sub	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00169	83 c0 3c	 add	 eax, 60			; 0000003cH
  0016c	50		 push	 eax
  0016d	51		 push	 ecx
  0016e	ff 75 f4	 push	 DWORD PTR __Oldlast$1$[ebp]
  00171	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00176	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00179	8b ca		 mov	 ecx, edx
  0017b	89 42 40	 mov	 DWORD PTR [edx+64], eax
$LN90@OnLoad:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 87   : 	for (DWORD i = 0; i < dwCollisionDataCount; ++i)

  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@OnLoad:
  00181	85 f6		 test	 esi, esi
  00183	0f 84 86 00 00
	00		 je	 $LN3@OnLoad
  00189	33 c0		 xor	 eax, eax
  0018b	89 45 0c	 mov	 DWORD PTR tv758[ebp], eax
  0018e	66 90		 npad	 2
$LL4@OnLoad:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00190	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 90   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  00193	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00195	03 c8		 add	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 90   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  00197	89 11		 mov	 DWORD PTR [ecx], edx

; 91   : 		c_pbBuf += sizeof(DWORD);
; 92   : 		memcpy(rCollisionData.szName, c_pbBuf, 32);

  00199	0f 10 47 04	 movups	 xmm0, XMMWORD PTR [edi+4]
  0019d	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  001a1	0f 10 47 14	 movups	 xmm0, XMMWORD PTR [edi+20]
  001a5	0f 11 41 14	 movups	 XMMWORD PTR [ecx+20], xmm0

; 93   : 		c_pbBuf += 32;
; 94   : 		memcpy(&rCollisionData.v3Position, c_pbBuf, sizeof(D3DXVECTOR3));

  001a9	f3 0f 7e 47 24	 movq	 xmm0, QWORD PTR [edi+36]
  001ae	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  001b3	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 95   : 		c_pbBuf += sizeof(D3DXVECTOR3);

  001b6	83 c7 30	 add	 edi, 48			; 00000030H
  001b9	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 96   : 
; 97   : 		switch(rCollisionData.dwType)

  001bc	83 fa 05	 cmp	 edx, 5
  001bf	77 33		 ja	 SHORT $LN5@OnLoad
  001c1	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN85@OnLoad[edx*4]
$LN15@OnLoad:

; 111  : 			case COLLISION_TYPE_CYLINDER:
; 112  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 2*sizeof(float));
; 113  : 				c_pbBuf += 2*sizeof(float);
; 114  : 				break;
; 115  : 			case COLLISION_TYPE_AABB:
; 116  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 117  : 				c_pbBuf += 3*sizeof(float);
; 118  : 				break;
; 119  : 			case COLLISION_TYPE_OBB:
; 120  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 121  : 				c_pbBuf += 3*sizeof(float);
; 122  : 				break;
; 123  : 		}
; 124  : 
; 125  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  001c8	8b 07		 mov	 eax, DWORD PTR [edi]
  001ca	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  001cd	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001d0	83 c7 08	 add	 edi, 8
  001d3	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  001d6	eb 1c		 jmp	 SHORT $LN5@OnLoad
$LN17@OnLoad:

; 98   : 		{
; 99   : 			case COLLISION_TYPE_PLANE:
; 100  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 2*sizeof(float));
; 101  : 				c_pbBuf += 2*sizeof(float);
; 102  : 				break;
; 103  : 			case COLLISION_TYPE_BOX:
; 104  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 105  : 				c_pbBuf += 3*sizeof(float);
; 106  : 				break;
; 107  : 			case COLLISION_TYPE_SPHERE:
; 108  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, sizeof(float));

  001d8	8b 07		 mov	 eax, DWORD PTR [edi]

; 109  : 				c_pbBuf += sizeof(float);

  001da	83 c7 04	 add	 edi, 4
  001dd	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 110  : 				break;

  001e0	eb 12		 jmp	 SHORT $LN5@OnLoad
$LN20@OnLoad:

; 111  : 			case COLLISION_TYPE_CYLINDER:
; 112  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 2*sizeof(float));
; 113  : 				c_pbBuf += 2*sizeof(float);
; 114  : 				break;
; 115  : 			case COLLISION_TYPE_AABB:
; 116  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 117  : 				c_pbBuf += 3*sizeof(float);
; 118  : 				break;
; 119  : 			case COLLISION_TYPE_OBB:
; 120  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 121  : 				c_pbBuf += 3*sizeof(float);
; 122  : 				break;
; 123  : 		}
; 124  : 
; 125  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  001e2	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  001e6	66 0f d6 41 34	 movq	 QWORD PTR [ecx+52], xmm0
  001eb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001ee	83 c7 0c	 add	 edi, 12			; 0000000cH
  001f1	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN5@OnLoad:
  001f4	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  001f7	8b 45 0c	 mov	 eax, DWORD PTR tv758[ebp]

; 126  : 		c_pbBuf += sizeof(D3DXQUATERNION);

  001fa	83 c7 10	 add	 edi, 16			; 00000010H
  001fd	83 c0 50	 add	 eax, 80			; 00000050H
  00200	89 45 0c	 mov	 DWORD PTR tv758[ebp], eax
  00203	0f 11 41 40	 movups	 XMMWORD PTR [ecx+64], xmm0
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0020a	83 ee 01	 sub	 esi, 1
  0020d	75 81		 jne	 SHORT $LL4@OnLoad
$LN3@OnLoad:

; 127  : 	}
; 128  : 
; 129  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  0020f	83 7d f8 00	 cmp	 DWORD PTR _dwHeightDataCount$1$[ebp], 0
  00213	0f 84 ae 01 00
	00		 je	 $LN87@OnLoad
  00219	33 c9		 xor	 ecx, ecx
  0021b	89 4d ec	 mov	 DWORD PTR tv750[ebp], ecx
  0021e	66 90		 npad	 2
$LL9@OnLoad:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00220	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 132  : 		memcpy(rHeightData.szName, c_pbBuf, 32);

  00223	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00226	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00229	03 c1		 add	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 139  : 		rHeightData.v3VertexVector.clear();

  0022b	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  0022e	89 75 f0	 mov	 DWORD PTR __My_data$2$[ebp], esi
  00231	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00234	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00238	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0023c	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0023f	83 c7 24	 add	 edi, 36			; 00000024H
  00242	8b 06		 mov	 eax, DWORD PTR [esi]
  00244	89 4d f4	 mov	 DWORD PTR _dwPrimitiveCount$1$[ebp], ecx
  00247	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1224 :         if (_Newsize > _Oldsize) { // append

  0024a	85 c9		 test	 ecx, ecx
  0024c	74 3c		 je	 SHORT $LN54@OnLoad

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0024e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00251	2b c8		 sub	 ecx, eax
  00253	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00258	f7 e9		 imul	 ecx

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  0025a	8b 4d f4	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  0025d	d1 fa		 sar	 edx, 1
  0025f	8b c2		 mov	 eax, edx
  00261	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00264	03 c2		 add	 eax, edx
  00266	3b c8		 cmp	 ecx, eax
  00268	76 0e		 jbe	 SHORT $LN55@OnLoad

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  0026a	8d 45 0f	 lea	 eax, DWORD PTR $T1[ebp]
  0026d	50		 push	 eax
  0026e	51		 push	 ecx
  0026f	8b ce		 mov	 ecx, esi
  00271	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  00276	eb 0f		 jmp	 SHORT $LN89@OnLoad
$LN55@OnLoad:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00278	56		 push	 esi
  00279	51		 push	 ecx
  0027a	ff 36		 push	 DWORD PTR [esi]
  0027c	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAPAUD3DXVECTOR3@@PAU1@IAAV?$allocator@UD3DXVECTOR3@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<D3DXVECTOR3> >
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00284	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN89@OnLoad:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 141  : 		memcpy(&rHeightData.v3VertexVector[0], c_pbBuf, dwPrimitiveCount*sizeof(D3DXVECTOR3));

  00287	8b 4d f4	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
$LN54@OnLoad:
  0028a	8b 45 f0	 mov	 eax, DWORD PTR __My_data$2$[ebp]
  0028d	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  00290	c1 e6 02	 shl	 esi, 2
  00293	56		 push	 esi
  00294	57		 push	 edi
  00295	ff 30		 push	 DWORD PTR [eax]
  00297	e8 00 00 00 00	 call	 _memcpy

; 142  : 		c_pbBuf += dwPrimitiveCount*sizeof(D3DXVECTOR3);

  0029c	03 fe		 add	 edi, esi

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  0029e	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002a0	8b 75 f0	 mov	 esi, DWORD PTR __My_data$2$[ebp]
  002a3	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  002a8	89 4d 0c	 mov	 DWORD PTR _k$1$[ebp], ecx
  002ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ae	89 7d f4	 mov	 DWORD PTR _c_pbBuf$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002b1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002b4	2b 0e		 sub	 ecx, DWORD PTR [esi]
  002b6	f7 e9		 imul	 ecx
  002b8	d1 fa		 sar	 edx, 1
  002ba	8b c2		 mov	 eax, edx
  002bc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002bf	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  002c1	0f 84 ed 00 00
	00		 je	 $LN7@OnLoad

; 141  : 		memcpy(&rHeightData.v3VertexVector[0], c_pbBuf, dwPrimitiveCount*sizeof(D3DXVECTOR3));

  002c7	33 ff		 xor	 edi, edi
  002c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@OnLoad:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  002d0	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 147  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].x)+50.0f);

  002d2	83 ec 08	 sub	 esp, 8
  002d5	f3 0f 10 04 38	 movss	 xmm0, DWORD PTR [eax+edi]
  002da	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  002dd	0f 5a c0	 cvtps2pd xmm0, xmm0
  002e0	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  002e7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  002ef	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002f3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002f9	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00308	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0030b	d9 5d f0	 fstp	 DWORD PTR tv251[ebp]
  0030e	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR tv251[ebp]
  00313	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00318	8b 06		 mov	 eax, DWORD PTR [esi]
  0031a	f3 0f 10 44 38
	04		 movss	 xmm0, DWORD PTR [eax+edi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 148  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].y)+50.0f);

  00320	0f 5a c0	 cvtps2pd xmm0, xmm0
  00323	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0032a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  00332	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00336	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0033c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00341	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00346	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00349	d9 5d f0	 fstp	 DWORD PTR tv270[ebp]
  0034c	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR tv270[ebp]
  00351	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00356	8b 06		 mov	 eax, DWORD PTR [esi]
  00358	f3 0f 10 44 38
	08		 movss	 xmm0, DWORD PTR [eax+edi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 149  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].z)+50.0f);

  0035e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00361	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00368	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  00370	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00374	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0037a	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0037f	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00384	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00387	83 c4 08	 add	 esp, 8
  0038a	ff 45 0c	 inc	 DWORD PTR _k$1$[ebp]
  0038d	83 c7 0c	 add	 edi, 12			; 0000000cH
  00390	d9 58 2c	 fstp	 DWORD PTR [eax+44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00393	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00396	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0039b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0039d	f7 e9		 imul	 ecx
  0039f	d1 fa		 sar	 edx, 1
  003a1	8b c2		 mov	 eax, edx
  003a3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003a6	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  003a8	39 45 0c	 cmp	 DWORD PTR _k$1$[ebp], eax
  003ab	0f 82 1f ff ff
	ff		 jb	 $LL12@OnLoad
  003b1	8b 7d f4	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
$LN7@OnLoad:

; 127  : 	}
; 128  : 
; 129  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  003b4	8b 4d ec	 mov	 ecx, DWORD PTR tv750[ebp]
  003b7	83 c1 30	 add	 ecx, 48			; 00000030H
  003ba	83 6d f8 01	 sub	 DWORD PTR _dwHeightDataCount$1$[ebp], 1
  003be	89 4d ec	 mov	 DWORD PTR tv750[ebp], ecx
  003c1	0f 85 59 fe ff
	ff		 jne	 $LL9@OnLoad
$LN87@OnLoad:
  003c7	5e		 pop	 esi
$LN8@OnLoad:

; 150  : 		}
; 151  : 		// Getting Maximize Radius
; 152  : 	}
; 153  : 
; 154  : 	return true;

  003c8	b0 01		 mov	 al, 1
  003ca	5f		 pop	 edi

; 155  : }

  003cb	8b e5		 mov	 esp, ebp
  003cd	5d		 pop	 ebp
  003ce	c2 08 00	 ret	 8
  003d1	0f 1f 00	 npad	 3
$LN85@OnLoad:
  003d4	00 00 00 00	 DD	 $LN15@OnLoad
  003d8	00 00 00 00	 DD	 $LN20@OnLoad
  003dc	00 00 00 00	 DD	 $LN17@OnLoad
  003e0	00 00 00 00	 DD	 $LN15@OnLoad
  003e4	00 00 00 00	 DD	 $LN20@OnLoad
  003e8	00 00 00 00	 DD	 $LN20@OnLoad
?OnLoad@CAttributeData@@MAE_NHPBX@Z ENDP		; CAttributeData::OnLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetMaximizeRadius@CAttributeData@@QAEMXZ
_TEXT	SEGMENT
?GetMaximizeRadius@CAttributeData@@QAEMXZ PROC		; CAttributeData::GetMaximizeRadius, COMDAT
; _this$ = ecx

; 51   : 	return m_fMaximizeRadius;

  00000	d9 41 2c	 fld	 DWORD PTR [ecx+44]

; 52   : }

  00003	c3		 ret	 0
?GetMaximizeRadius@CAttributeData@@QAEMXZ ENDP		; CAttributeData::GetMaximizeRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppHeightData$ = 12					; size = 4
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z PROC ; CAttributeData::GetHeightDataPointer, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 41   : 	if (dwIndex >= GetHeightDataCount())

  00006	e8 00 00 00 00	 call	 ?GetHeightDataCount@CAttributeData@@QBEKXZ ; CAttributeData::GetHeightDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetHeightD

; 42   : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 47   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetHeightD:

; 44   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppHeightData$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1514 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 4e 3c	 add	 ecx, DWORD PTR [esi+60]
  00025	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 44   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 45   : 
; 46   : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 47   : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ENDP ; CAttributeData::GetHeightDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataCount@CAttributeData@@QBEKXZ
_TEXT	SEGMENT
?GetHeightDataCount@CAttributeData@@QBEKXZ PROC		; CAttributeData::GetHeightDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 3c	 sub	 edx, DWORD PTR [ecx+60]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 37   : }

  00017	c3		 ret	 0
?GetHeightDataCount@CAttributeData@@QBEKXZ ENDP		; CAttributeData::GetHeightDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z PROC ; CAttributeData::AddCollisionData, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 56   : 	m_StaticCollisionDataVector.push_back(data);

  00004	8d 71 30	 lea	 esi, DWORD PTR [ecx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00007	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000d	74 2f		 je	 SHORT $LN6@AddCollisi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00018	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001c	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00020	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00024	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  00028	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0002c	0f 11 41 30	 movups	 XMMWORD PTR [ecx+48], xmm0
  00030	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
  00034	0f 11 41 40	 movups	 XMMWORD PTR [ecx+64], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00038	83 46 04 50	 add	 DWORD PTR [esi+4], 80	; 00000050H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0003c	eb 0b		 jmp	 SHORT $LN14@AddCollisi
$LN6@AddCollisi:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00041	51		 push	 ecx
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
$LN14@AddCollisi:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00049	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00051	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00053	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 57   : 	return m_StaticCollisionDataVector.size();

  00055	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00056	c1 fa 05	 sar	 edx, 5
  00059	8b c2		 mov	 eax, edx
  0005b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005e	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 58   : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ENDP ; CAttributeData::AddCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ PROC ; CAttributeData::GetHeightDataVector, COMDAT
; _this$ = ecx

; 31   : 	return m_HeightDataVector;

  00000	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]

; 32   : }

  00003	c3		 ret	 0
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ENDP ; CAttributeData::GetHeightDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ PROC ; CAttributeData::GetCollisionDataVector, COMDAT
; _this$ = ecx

; 26   : 	return m_StaticCollisionDataVector;

  00000	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]

; 27   : }

  00003	c3		 ret	 0
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ENDP ; CAttributeData::GetCollisionDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ??1CAttributeData@@UAE@XZ
_TEXT	SEGMENT
??1CAttributeData@@UAE@XZ PROC				; CAttributeData::~CAttributeData, COMDAT
; _this$ = ecx

; 198  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 199  : }

  00005	8d 5f 3c	 lea	 ebx, DWORD PTR [edi+60]
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CAttributeData@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	85 c0		 test	 eax, eax
  00012	74 46		 je	 SHORT $LN6@CAttribute

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00014	53		 push	 ebx
  00015	ff 73 04	 push	 DWORD PTR [ebx+4]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHeightData@@@std@@@std@@YAXPAUSHeightData@@QAU1@AAV?$allocator@USHeightData@@@0@@Z ; std::_Destroy_range<std::allocator<SHeightData> >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0001e	8b 33		 mov	 esi, DWORD PTR [ebx]
  00020	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00025	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00028	2b ce		 sub	 ecx, esi
  0002a	f7 e9		 imul	 ecx
  0002c	c1 fa 03	 sar	 edx, 3
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00036	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00039	c1 e0 04	 shl	 eax, 4
  0003c	50		 push	 eax
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00043	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  0004c	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1699 :             _Myend   = pointer();

  00053	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN6@CAttribute:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0005a	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0005d	85 f6		 test	 esi, esi
  0005f	74 3b		 je	 SHORT $LN15@CAttribute

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00061	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00064	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00069	2b ce		 sub	 ecx, esi
  0006b	f7 e9		 imul	 ecx
  0006d	c1 fa 05	 sar	 edx, 5
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00077	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0007a	c1 e0 04	 shl	 eax, 4
  0007d	50		 push	 eax
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00084	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  0008e	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 1699 :             _Myend   = pointer();

  00095	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN15@CAttribute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 199  : }

  0009c	8b cf		 mov	 ecx, edi
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	e9 00 00 00 00	 jmp	 ??1CResource@@UAE@XZ	; CResource::~CResource
??1CAttributeData@@UAE@XZ ENDP				; CAttributeData::~CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ??0CAttributeData@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
??0CAttributeData@@QAE@PBD@Z PROC			; CAttributeData::CAttributeData, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CResource@@QAE@PBD@Z	; CResource::CResource
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeData@@6B@

; 195  : }

  00018	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00021	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00028	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0002f	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00036	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0003d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp

; 194  : 	m_fMaximizeRadius = 0.0f;

  00044	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 195  : }

  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
??0CAttributeData@@QAE@PBD@Z ENDP			; CAttributeData::CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\AttributeData.cpp
;	COMDAT ?Type@CAttributeData@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CAttributeData@@SAKXZ PROC			; CAttributeData::Type, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CAttributeData@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 183  : 	static TType s_type = StringToType("CAttributeData");

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 184  : 	return s_type;
; 185  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 183  : 	static TType s_type = StringToType("CAttributeData");

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0P@COGNDLAI@CAttributeData@
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ?StringToType@CResource@@SAKPBD@Z ; CResource::StringToType
  00079	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA, eax
  00083	e8 00 00 00 00	 call	 __Init_thread_footer
  00088	83 c4 08	 add	 esp, 8
  0008b	eb b1		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CAttributeData@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CAttributeData@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CAttributeData@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CAttributeData@@SAKXZ ENDP			; CAttributeData::Type
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
