; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CDibBar@@QAE@XZ				; CDibBar::CDibBar
PUBLIC	??1CDibBar@@UAE@XZ				; CDibBar::~CDibBar
PUBLIC	?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z		; CDibBar::Create
PUBLIC	?Invalidate@CDibBar@@QAEXXZ			; CDibBar::Invalidate
PUBLIC	?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z	; CDibBar::SetClipRect
PUBLIC	?ClearBar@CDibBar@@QAEXXZ			; CDibBar::ClearBar
PUBLIC	?Render@CDibBar@@QAEXHH@Z			; CDibBar::Render
PUBLIC	?__NearTextureSize@CDibBar@@IAEKK@Z		; CDibBar::__NearTextureSize
PUBLIC	?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z	; CDibBar::__DivideTextureSize
PUBLIC	?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
PUBLIC	?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z	; CDibBar::__BuildTextureBlockList
PUBLIC	?OnCreate@CDibBar@@MAEXXZ			; CDibBar::OnCreate
PUBLIC	?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
PUBLIC	??_GCDibBar@@UAEPAXI@Z				; CDibBar::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CBlockTexture *> >
PUBLIC	??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
PUBLIC	??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CDibBar@@6B@				; CDibBar::`vftable'
PUBLIC	??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CDibBar@@6B@				; CDibBar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDibBar@@@8				; CDibBar `RTTI Type Descriptor'
PUBLIC	??_R3CDibBar@@8					; CDibBar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDibBar@@8					; CDibBar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDibBar@@8			; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	??0CGraphicDib@@QAE@XZ:PROC			; CGraphicDib::CGraphicDib
EXTRN	??1CGraphicDib@@UAE@XZ:PROC			; CGraphicDib::~CGraphicDib
EXTRN	?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z:PROC	; CGraphicDib::Create
EXTRN	?GetWidth@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetWidth
EXTRN	?GetHeight@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetHeight
EXTRN	?GetPointer@CGraphicDib@@QAEPAXXZ:PROC		; CGraphicDib::GetPointer
EXTRN	??_ECDibBar@@UAEPAXI@Z:PROC			; CDibBar::`vector deleting destructor'
EXTRN	??0CBlockTexture@@QAE@XZ:PROC			; CBlockTexture::CBlockTexture
EXTRN	?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z:PROC ; CBlockTexture::Create
EXTRN	?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z:PROC ; CBlockTexture::SetClipRect
EXTRN	?Render@CBlockTexture@@QAEXHH@Z:PROC		; CBlockTexture::Render
EXTRN	?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z:PROC ; CBlockTexture::InvalidateRect
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDibBar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDibBar@@8 DD FLAT:??_R0?AVCDibBar@@@8	; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R2CDibBar@@8
rdata$r	SEGMENT
??_R2CDibBar@@8 DD FLAT:??_R1A@?0A@EA@CDibBar@@8	; CDibBar::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDibBar@@8
rdata$r	SEGMENT
??_R3CDibBar@@8 DD 00H					; CDibBar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDibBar@@@8
data$r	SEGMENT
??_R0?AVCDibBar@@@8 DD FLAT:??_7type_info@@6B@		; CDibBar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDibBar@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDibBar@@6B@
rdata$r	SEGMENT
??_R4CDibBar@@6B@ DD 00H				; CDibBar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDibBar@@@8
	DD	FLAT:??_R3CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@
CONST	SEGMENT
??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@ DB ' Failed to create'
	DB	' CDibBar', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CDibBar@@6B@
CONST	SEGMENT
??_7CDibBar@@6B@ DD FLAT:??_R4CDibBar@@6B@		; CDibBar::`vftable'
	DD	FLAT:??_ECDibBar@@UAEPAXI@Z
	DD	FLAT:?OnCreate@CDibBar@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z$0
__ehfuncinfo$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z PROC ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ENDP ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CBlockTexture *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CBlockTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDibBar@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDibBar@@UAEPAXI@Z PROC				; CDibBar::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDibBar@@UAE@XZ	; CDibBar::~CDibBar
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 5c		 push	 92			; 0000005cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCDibBar@@UAEPAXI@Z ENDP				; CDibBar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.h
;	COMDAT ?OnCreate@CDibBar@@MAEXXZ
_TEXT	SEGMENT
?OnCreate@CDibBar@@MAEXXZ PROC				; CDibBar::OnCreate, COMDAT
; _this$ = ecx

; 25   : 		virtual void OnCreate(){}

  00000	c2 00 00	 ret	 0
?OnCreate@CDibBar@@MAEXXZ ENDP				; CDibBar::OnCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z
_TEXT	SEGMENT
tv574 = -40						; size = 4
_pTexture$1 = -40					; size = 4
tv572 = -36						; size = 4
_pTexture$2 = -36					; size = 4
_pTexture$3 = -36					; size = 4
_dwxTexRest$1$ = -32					; size = 4
_dwyTexRest$1$ = -28					; size = 4
tv578 = -24						; size = 4
_dwxStep$ = -24						; size = 4
tv576 = -20						; size = 4
_dwyRest$ = -16						; size = 4
_dwxRest$ = -12						; size = 4
_dwyCount$ = -8						; size = 4
_dwxCount$ = -4						; size = 4
_dwyStep$ = 8						; size = 4
_dwWidth$ = 8						; size = 4
tv577 = 12						; size = 4
tv563 = 12						; size = 4
_dwHeight$ = 12						; size = 4
tv562 = 16						; size = 4
_pTexture$4 = 16					; size = 4
_dwMax$ = 16						; size = 4
?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z PROC	; CDibBar::__BuildTextureBlockList, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 95   : 	DWORD dwxStep, dwyStep;
; 96   : 	DWORD dwxCount, dwyCount;
; 97   : 	DWORD dwxRest, dwyRest;
; 98   : 	__DivideTextureSize(dwWidth, dwMax, &dwxStep, &dwxCount, &dwxRest);

  00008	8b 75 10	 mov	 esi, DWORD PTR _dwMax$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR _dwxRest$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	8d 45 fc	 lea	 eax, DWORD PTR _dwxCount$[ebp]
  00013	8b f9		 mov	 edi, ecx
  00015	50		 push	 eax
  00016	8d 45 e8	 lea	 eax, DWORD PTR _dwxStep$[ebp]
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	ff 75 08	 push	 DWORD PTR _dwWidth$[ebp]
  0001e	e8 00 00 00 00	 call	 ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ; CDibBar::__DivideTextureSize

; 99   : 	__DivideTextureSize(dwHeight, dwMax, &dwyStep, &dwyCount, &dwyRest);

  00023	8d 45 f0	 lea	 eax, DWORD PTR _dwyRest$[ebp]
  00026	8b cf		 mov	 ecx, edi
  00028	50		 push	 eax
  00029	8d 45 f8	 lea	 eax, DWORD PTR _dwyCount$[ebp]
  0002c	50		 push	 eax
  0002d	8d 45 08	 lea	 eax, DWORD PTR _dwyStep$[ebp]
  00030	50		 push	 eax
  00031	56		 push	 esi
  00032	ff 75 0c	 push	 DWORD PTR _dwHeight$[ebp]
  00035	e8 00 00 00 00	 call	 ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ; CDibBar::__DivideTextureSize

; 100  : 	DWORD dwxTexRest = __NearTextureSize(dwxRest);

  0003a	ff 75 f4	 push	 DWORD PTR _dwxRest$[ebp]
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?__NearTextureSize@CDibBar@@IAEKK@Z ; CDibBar::__NearTextureSize

; 101  : 	DWORD dwyTexRest = __NearTextureSize(dwyRest);

  00044	ff 75 f0	 push	 DWORD PTR _dwyRest$[ebp]
  00047	8b cf		 mov	 ecx, edi
  00049	89 45 e0	 mov	 DWORD PTR _dwxTexRest$1$[ebp], eax
  0004c	e8 00 00 00 00	 call	 ?__NearTextureSize@CDibBar@@IAEKK@Z ; CDibBar::__NearTextureSize

; 103  : 	for (DWORD y = 0; y < dwyCount; ++y)

  00051	8b 5d e8	 mov	 ebx, DWORD PTR _dwxStep$[ebp]
  00054	8b 55 08	 mov	 edx, DWORD PTR _dwyStep$[ebp]
  00057	89 45 e4	 mov	 DWORD PTR _dwyTexRest$1$[ebp], eax
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 c2 00 00
	00		 je	 $LN3@BuildTextu

; 95   : 	DWORD dwxStep, dwyStep;
; 96   : 	DWORD dwxCount, dwyCount;
; 97   : 	DWORD dwxRest, dwyRest;
; 98   : 	__DivideTextureSize(dwWidth, dwMax, &dwxStep, &dwxCount, &dwxRest);

  00065	8b 45 fc	 mov	 eax, DWORD PTR _dwxCount$[ebp]
  00068	8b cb		 mov	 ecx, ebx
  0006a	8b 75 f8	 mov	 esi, DWORD PTR _dwyCount$[ebp]
  0006d	0f af c8	 imul	 ecx, eax
  00070	89 75 e8	 mov	 DWORD PTR tv578[ebp], esi
  00073	8b 75 10	 mov	 esi, DWORD PTR _dwMax$[ebp]
  00076	89 4d d8	 mov	 DWORD PTR tv574[ebp], ecx
  00079	33 c9		 xor	 ecx, ecx
  0007b	89 4d 0c	 mov	 DWORD PTR tv563[ebp], ecx
  0007e	66 90		 npad	 2
$LL4@BuildTextu:

; 105  : 		for (DWORD x = 0; x < dwxCount; ++x)

  00080	85 c0		 test	 eax, eax
  00082	74 51		 je	 SHORT $LN6@BuildTextu
  00084	33 f6		 xor	 esi, esi
  00086	89 45 ec	 mov	 DWORD PTR tv576[ebp], eax
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@BuildTextu:

; 106  : 		{
; 107  : 			CBlockTexture * pTexture = __BuildTextureBlock(x*dwxStep, y*dwyStep,

  00090	8b 45 10	 mov	 eax, DWORD PTR _dwMax$[ebp]
  00093	50		 push	 eax
  00094	50		 push	 eax
  00095	52		 push	 edx
  00096	53		 push	 ebx
  00097	51		 push	 ecx
  00098	56		 push	 esi
  00099	8b cf		 mov	 ecx, edi
  0009b	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  000a0	89 45 dc	 mov	 DWORD PTR _pTexture$3[ebp], eax

; 108  : 														   dwxStep, dwyStep,
; 109  : 														   dwMax, dwMax);
; 110  : 			if (pTexture)

  000a3	85 c0		 test	 eax, eax
  000a5	74 1d		 je	 SHORT $LN5@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000a7	8b 57 4c	 mov	 edx, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 111  : 				m_kVec_pkBlockTexture.push_back(pTexture);

  000aa	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000ad	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b0	74 08		 je	 SHORT $LN20@BuildTextu

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000b2	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  000b4	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000b8	eb 0a		 jmp	 SHORT $LN5@BuildTextu
$LN20@BuildTextu:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000ba	8d 45 dc	 lea	 eax, DWORD PTR _pTexture$3[ebp]
  000bd	50		 push	 eax
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
$LN5@BuildTextu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 105  : 		for (DWORD x = 0; x < dwxCount; ++x)

  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR tv563[ebp]
  000c7	03 f3		 add	 esi, ebx
  000c9	83 6d ec 01	 sub	 DWORD PTR tv576[ebp], 1
  000cd	8b 55 08	 mov	 edx, DWORD PTR _dwyStep$[ebp]
  000d0	75 be		 jne	 SHORT $LL7@BuildTextu
  000d2	8b 75 10	 mov	 esi, DWORD PTR _dwMax$[ebp]
$LN6@BuildTextu:

; 112  : 		}
; 113  : 
; 114  : 		CBlockTexture * pTexture = __BuildTextureBlock(dwxCount*dwxStep, y*dwyStep,

  000d5	56		 push	 esi
  000d6	ff 75 e0	 push	 DWORD PTR _dwxTexRest$1$[ebp]
  000d9	52		 push	 edx
  000da	ff 75 f4	 push	 DWORD PTR _dwxRest$[ebp]
  000dd	51		 push	 ecx
  000de	ff 75 d8	 push	 DWORD PTR tv574[ebp]
  000e1	8b cf		 mov	 ecx, edi
  000e3	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  000e8	89 45 dc	 mov	 DWORD PTR _pTexture$2[ebp], eax

; 115  : 													   dwxRest, dwyStep,
; 116  : 													   dwxTexRest, dwMax);
; 117  : 
; 118  : 		if (pTexture)

  000eb	85 c0		 test	 eax, eax
  000ed	74 1d		 je	 SHORT $LN2@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000ef	8b 57 4c	 mov	 edx, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 119  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  000f2	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000f5	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000f8	74 08		 je	 SHORT $LN27@BuildTextu

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000fa	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  000fc	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00100	eb 0a		 jmp	 SHORT $LN2@BuildTextu
$LN27@BuildTextu:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00102	8d 45 dc	 lea	 eax, DWORD PTR _pTexture$2[ebp]
  00105	50		 push	 eax
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
$LN2@BuildTextu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 103  : 	for (DWORD y = 0; y < dwyCount; ++y)

  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR tv563[ebp]
  0010f	8b 55 08	 mov	 edx, DWORD PTR _dwyStep$[ebp]
  00112	03 ca		 add	 ecx, edx
  00114	83 6d e8 01	 sub	 DWORD PTR tv578[ebp], 1
  00118	8b 45 fc	 mov	 eax, DWORD PTR _dwxCount$[ebp]
  0011b	89 4d 0c	 mov	 DWORD PTR tv563[ebp], ecx
  0011e	0f 85 5c ff ff
	ff		 jne	 $LL4@BuildTextu
  00124	8b 45 f8	 mov	 eax, DWORD PTR _dwyCount$[ebp]
$LN3@BuildTextu:

; 122  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00127	8b 4d fc	 mov	 ecx, DWORD PTR _dwxCount$[ebp]
  0012a	85 c9		 test	 ecx, ecx
  0012c	74 5c		 je	 SHORT $LN9@BuildTextu
  0012e	8b ca		 mov	 ecx, edx
  00130	8b 55 fc	 mov	 edx, DWORD PTR _dwxCount$[ebp]
  00133	0f af c8	 imul	 ecx, eax
  00136	33 c0		 xor	 eax, eax
  00138	89 45 10	 mov	 DWORD PTR tv562[ebp], eax
  0013b	89 55 0c	 mov	 DWORD PTR tv577[ebp], edx
  0013e	89 4d dc	 mov	 DWORD PTR tv572[ebp], ecx
$LL10@BuildTextu:

; 123  : 	{
; 124  : 		CBlockTexture * pTexture = __BuildTextureBlock(x*dwxStep, dwyCount*dwyStep,

  00141	ff 75 e4	 push	 DWORD PTR _dwyTexRest$1$[ebp]
  00144	56		 push	 esi
  00145	ff 75 f0	 push	 DWORD PTR _dwyRest$[ebp]
  00148	53		 push	 ebx
  00149	51		 push	 ecx
  0014a	50		 push	 eax
  0014b	8b cf		 mov	 ecx, edi
  0014d	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  00152	89 45 d8	 mov	 DWORD PTR _pTexture$1[ebp], eax

; 125  : 													   dwxStep, dwyRest,
; 126  : 													   dwMax, dwyTexRest);
; 127  : 		if (pTexture)

  00155	85 c0		 test	 eax, eax
  00157	74 1d		 je	 SHORT $LN8@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00159	8b 57 4c	 mov	 edx, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 128  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  0015c	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0015f	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00162	74 08		 je	 SHORT $LN34@BuildTextu

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00164	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00166	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016a	eb 0a		 jmp	 SHORT $LN8@BuildTextu
$LN34@BuildTextu:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0016c	8d 45 d8	 lea	 eax, DWORD PTR _pTexture$1[ebp]
  0016f	50		 push	 eax
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
$LN8@BuildTextu:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 122  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00176	8b 45 10	 mov	 eax, DWORD PTR tv562[ebp]
  00179	8b 4d dc	 mov	 ecx, DWORD PTR tv572[ebp]
  0017c	03 c3		 add	 eax, ebx
  0017e	83 6d 0c 01	 sub	 DWORD PTR tv577[ebp], 1
  00182	89 45 10	 mov	 DWORD PTR tv562[ebp], eax
  00185	75 ba		 jne	 SHORT $LL10@BuildTextu
  00187	8b 4d fc	 mov	 ecx, DWORD PTR _dwxCount$[ebp]
$LN9@BuildTextu:

; 129  : 	}
; 130  : 
; 131  : 	if (dwxRest > 0 && dwyRest > 0)

  0018a	8b 45 f4	 mov	 eax, DWORD PTR _dwxRest$[ebp]
  0018d	85 c0		 test	 eax, eax
  0018f	74 4d		 je	 SHORT $LN40@BuildTextu
  00191	8b 55 f0	 mov	 edx, DWORD PTR _dwyRest$[ebp]
  00194	85 d2		 test	 edx, edx
  00196	74 46		 je	 SHORT $LN40@BuildTextu

; 132  : 	{
; 133  : 		CBlockTexture * pTexture = __BuildTextureBlock(dwxCount*dwxStep, dwyCount*dwyStep,

  00198	ff 75 e4	 push	 DWORD PTR _dwyTexRest$1$[ebp]
  0019b	0f af d9	 imul	 ebx, ecx
  0019e	8b cf		 mov	 ecx, edi
  001a0	ff 75 e0	 push	 DWORD PTR _dwxTexRest$1$[ebp]
  001a3	52		 push	 edx
  001a4	50		 push	 eax
  001a5	8b 45 08	 mov	 eax, DWORD PTR _dwyStep$[ebp]
  001a8	0f af 45 f8	 imul	 eax, DWORD PTR _dwyCount$[ebp]
  001ac	50		 push	 eax
  001ad	53		 push	 ebx
  001ae	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  001b3	89 45 10	 mov	 DWORD PTR _pTexture$4[ebp], eax

; 134  : 													   dwxRest, dwyRest,
; 135  : 													   dwxTexRest, dwyTexRest);
; 136  : 		if (pTexture)

  001b6	85 c0		 test	 eax, eax
  001b8	74 24		 je	 SHORT $LN40@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001ba	8b 57 4c	 mov	 edx, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 137  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  001bd	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001c0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  001c3	74 0f		 je	 SHORT $LN41@BuildTextu
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 139  : }

  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  001c7	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  001c9	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 139  : }

  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 0c 00	 ret	 12			; 0000000cH
$LN41@BuildTextu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001d4	8d 45 10	 lea	 eax, DWORD PTR _pTexture$4[ebp]
  001d7	50		 push	 eax
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
$LN40@BuildTextu:
  001de	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 139  : }

  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 0c 00	 ret	 12			; 0000000cH
?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z ENDP	; CDibBar::__BuildTextureBlockList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
_posRect$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwxPos$ = 8						; size = 4
_dwyPos$ = 12						; size = 4
_dwImageWidth$ = 16					; size = 4
_dwImageHeight$ = 20					; size = 4
_dwTextureWidth$ = 24					; size = 4
_dwTextureHeight$ = 28					; size = 4
?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z PROC ; CDibBar::__BuildTextureBlock, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 4d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 78   : 	if (dwTextureWidth == 0 || dwTextureHeight == 0)

  0002c	83 7d 18 00	 cmp	 DWORD PTR _dwTextureWidth$[ebp], 0
  00030	74 76		 je	 SHORT $LN3@BuildTextu
  00032	83 7d 1c 00	 cmp	 DWORD PTR _dwTextureHeight$[ebp], 0
  00036	74 70		 je	 SHORT $LN3@BuildTextu

; 80   : 
; 81   : 	RECT posRect = {dwxPos, dwyPos, dwxPos+dwImageWidth, dwyPos+dwImageHeight};

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _dwxPos$[ebp]
  0003b	8b 45 10	 mov	 eax, DWORD PTR _dwImageWidth$[ebp]
  0003e	8b 55 0c	 mov	 edx, DWORD PTR _dwyPos$[ebp]
  00041	03 c1		 add	 eax, ecx
  00043	89 45 e8	 mov	 DWORD PTR _posRect$[ebp+8], eax
  00046	8b 45 14	 mov	 eax, DWORD PTR _dwImageHeight$[ebp]
  00049	03 c2		 add	 eax, edx
  0004b	89 4d e0	 mov	 DWORD PTR _posRect$[ebp], ecx

; 82   : 
; 83   : 	CBlockTexture * pBlockTexture = new CBlockTexture;

  0004e	6a 38		 push	 56			; 00000038H
  00050	89 55 e4	 mov	 DWORD PTR _posRect$[ebp+4], edx
  00053	89 45 ec	 mov	 DWORD PTR _posRect$[ebp+12], eax
  00056	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005b	83 c4 04	 add	 esp, 4
  0005e	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	85 c0		 test	 eax, eax
  0006a	74 0b		 je	 SHORT $LN6@BuildTextu
  0006c	8b c8		 mov	 ecx, eax
  0006e	e8 00 00 00 00	 call	 ??0CBlockTexture@@QAE@XZ ; CBlockTexture::CBlockTexture
  00073	8b f0		 mov	 esi, eax
  00075	eb 02		 jmp	 SHORT $LN7@BuildTextu
$LN6@BuildTextu:
  00077	33 f6		 xor	 esi, esi
$LN7@BuildTextu:

; 84   : 	if (!pBlockTexture->Create(&m_dib, posRect, dwTextureWidth, dwTextureHeight))

  00079	ff 75 1c	 push	 DWORD PTR _dwTextureHeight$[ebp]
  0007c	8d 45 e0	 lea	 eax, DWORD PTR _posRect$[ebp]
  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	ff 75 18	 push	 DWORD PTR _dwTextureWidth$[ebp]
  00089	8b ce		 mov	 ecx, esi
  0008b	50		 push	 eax
  0008c	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0008f	83 c0 04	 add	 eax, 4
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z ; CBlockTexture::Create
  00098	84 c0		 test	 al, al
  0009a	75 2a		 jne	 SHORT $LN4@BuildTextu

; 85   : 	{
; 86   : 		delete pBlockTexture;

  0009c	85 f6		 test	 esi, esi
  0009e	74 08		 je	 SHORT $LN3@BuildTextu
  000a0	8b 06		 mov	 eax, DWORD PTR [esi]
  000a2	8b ce		 mov	 ecx, esi
  000a4	6a 01		 push	 1
  000a6	ff 10		 call	 DWORD PTR [eax]
$LN3@BuildTextu:

; 79   : 		return NULL;

  000a8	33 c0		 xor	 eax, eax
$LN1@BuildTextu:

; 91   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 18 00	 ret	 24			; 00000018H
$LN4@BuildTextu:

; 87   : 		return NULL;
; 88   : 	}
; 89   : 
; 90   : 	return pBlockTexture;

  000c6	8b c6		 mov	 eax, esi
  000c8	eb e0		 jmp	 SHORT $LN1@BuildTextu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z$0:
  00000	6a 38		 push	 56			; 00000038H
  00002	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ENDP ; CDibBar::__BuildTextureBlock
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z
_TEXT	SEGMENT
_dwSize$ = 8						; size = 4
_dwMax$ = 12						; size = 4
_pdwxStep$ = 16						; size = 4
_pdwxCount$ = 20					; size = 4
_pdwxRest$ = 24						; size = 4
?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z PROC	; CDibBar::__DivideTextureSize, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _dwMax$[ebp]

; 63   : 	if (dwSize<dwMax)
; 64   : 	{
; 65   : 		*pdwxStep = dwMax;
; 66   : 		*pdwxCount = 0;
; 67   : 		*pdwxRest = dwSize%dwMax;
; 68   : 		return;
; 69   : 	}
; 70   : 
; 71   : 	*pdwxStep = dwMax;
; 72   : 	*pdwxCount = dwSize/dwMax;
; 73   : 	*pdwxRest = dwSize%dwMax;
; 74   : }

  0000c	33 c9		 xor	 ecx, ecx
  0000e	f7 f7		 div	 edi
  00010	39 7d 08	 cmp	 DWORD PTR _dwSize$[ebp], edi
  00013	0f 43 c8	 cmovae	 ecx, eax
  00016	8b 45 10	 mov	 eax, DWORD PTR _pdwxStep$[ebp]
  00019	89 38		 mov	 DWORD PTR [eax], edi
  0001b	8b 45 14	 mov	 eax, DWORD PTR _pdwxCount$[ebp]
  0001e	5f		 pop	 edi
  0001f	89 08		 mov	 DWORD PTR [eax], ecx
  00021	8b 45 18	 mov	 eax, DWORD PTR _pdwxRest$[ebp]
  00024	89 10		 mov	 DWORD PTR [eax], edx
  00026	5d		 pop	 ebp
  00027	c2 14 00	 ret	 20			; 00000014H
?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ENDP	; CDibBar::__DivideTextureSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?__NearTextureSize@CDibBar@@IAEKK@Z
_TEXT	SEGMENT
_dwSize$ = 8						; size = 4
?__NearTextureSize@CDibBar@@IAEKK@Z PROC		; CDibBar::__NearTextureSize, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	if ((dwSize & (dwSize-1)) == 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwSize$[ebp]
  00006	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00009	85 ca		 test	 ecx, edx
  0000b	75 06		 jne	 SHORT $LN4@NearTextur

; 50   : 		return dwSize;

  0000d	8b c2		 mov	 eax, edx

; 56   : 	}
; 57   : 
; 58   : 	return dwRet;
; 59   : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN4@NearTextur:

; 51   : 
; 52   : 	DWORD dwRet = 2;

  00013	b8 02 00 00 00	 mov	 eax, 2

; 53   : 	while (dwRet < dwSize)

  00018	3b d0		 cmp	 edx, eax
  0001a	76 0a		 jbe	 SHORT $LN1@NearTextur
  0001c	0f 1f 40 00	 npad	 4
$LL2@NearTextur:

; 54   : 	{
; 55   : 		dwRet <<= 1;

  00020	03 c0		 add	 eax, eax
  00022	3b c2		 cmp	 eax, edx
  00024	72 fa		 jb	 SHORT $LL2@NearTextur
$LN1@NearTextur:

; 56   : 	}
; 57   : 
; 58   : 	return dwRet;
; 59   : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?__NearTextureSize@CDibBar@@IAEKK@Z ENDP		; CDibBar::__NearTextureSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?Render@CDibBar@@QAEXHH@Z
_TEXT	SEGMENT
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
?Render@CDibBar@@QAEXHH@Z PROC				; CDibBar::Render, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00007	8b 77 48	 mov	 esi, DWORD PTR [edi+72]
  0000a	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 40   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  0000d	74 18		 je	 SHORT $LN3@Render
  0000f	53		 push	 ebx
  00010	8b 5d 0c	 mov	 ebx, DWORD PTR _iy$[ebp]
$LL4@Render:

; 41   : 	{
; 42   : 		CBlockTexture * pTexture = *itor;
; 43   : 		pTexture->Render(ix, iy);

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	53		 push	 ebx
  00016	ff 75 08	 push	 DWORD PTR _ix$[ebp]
  00019	e8 00 00 00 00	 call	 ?Render@CBlockTexture@@QAEXHH@Z ; CBlockTexture::Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  0001e	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  00021	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 40   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00024	75 ed		 jne	 SHORT $LL4@Render
  00026	5b		 pop	 ebx
$LN3@Render:
  00027	5f		 pop	 edi

; 44   : 	}
; 45   : }

  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?Render@CDibBar@@QAEXHH@Z ENDP				; CDibBar::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?ClearBar@CDibBar@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?ClearBar@CDibBar@@QAEXXZ PROC				; CDibBar::ClearBar, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 32   : 	DWORD  * pdwBuf = (DWORD *)m_dib.GetPointer();

  00009	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	8b cf		 mov	 ecx, edi
  00011	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer

; 33   : 	memset(pdwBuf, 0, m_dib.GetWidth()*m_dib.GetHeight()*4);

  00016	8b cf		 mov	 ecx, edi
  00018	8b d8		 mov	 ebx, eax
  0001a	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight
  00028	0f af c6	 imul	 eax, esi
  0002b	c1 e0 02	 shl	 eax, 2
  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 _memset

; 34   : 	Invalidate();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	e8 00 00 00 00	 call	 ?Invalidate@CDibBar@@QAEXXZ ; CDibBar::Invalidate
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 35   : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?ClearBar@CDibBar@@QAEXXZ ENDP				; CDibBar::ClearBar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_c_rRect$ = 8						; size = 4
?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z PROC		; CDibBar::SetClipRect, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00007	8b 77 48	 mov	 esi, DWORD PTR [edi+72]
  0000a	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 20   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  0000d	74 19		 je	 SHORT $LN3@SetClipRec
  0000f	53		 push	 ebx
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _c_rRect$[ebp]
$LL4@SetClipRec:

; 21   : 	{
; 22   : 		CBlockTexture * pTexture = *itor;

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 23   : 		assert(pTexture);
; 24   : 		if (!pTexture)

  00015	85 c9		 test	 ecx, ecx
  00017	74 06		 je	 SHORT $LN2@SetClipRec

; 25   : 			continue;
; 26   : 		pTexture->SetClipRect(c_rRect);

  00019	53		 push	 ebx
  0001a	e8 00 00 00 00	 call	 ?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z ; CBlockTexture::SetClipRect
$LN2@SetClipRec:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  0001f	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  00022	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 20   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00025	75 ec		 jne	 SHORT $LL4@SetClipRec
  00027	5b		 pop	 ebx
$LN3@SetClipRec:
  00028	5f		 pop	 edi

; 27   : 	}
; 28   : }

  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z ENDP		; CDibBar::SetClipRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?Invalidate@CDibBar@@QAEXXZ
_TEXT	SEGMENT
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Invalidate@CDibBar@@QAEXXZ PROC			; CDibBar::Invalidate, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 7    : 	RECT rect = {0, 0, m_dwWidth, m_dwHeight};

  00014	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rect$[ebp], 0
  0001b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rect$[ebp+4], 0
  00022	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00025	8b 77 48	 mov	 esi, DWORD PTR [edi+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 7    : 	RECT rect = {0, 0, m_dwWidth, m_dwHeight};

  00028	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax
  0002b	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  0002e	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00031	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 10   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00034	74 13		 je	 SHORT $LN3@Invalidate
$LL4@Invalidate:

; 11   : 	{
; 12   : 		CBlockTexture * pTexture = *itor;
; 13   : 		pTexture->InvalidateRect(rect);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z ; CBlockTexture::InvalidateRect
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00041	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  00044	3b 77 4c	 cmp	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 10   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00047	75 ed		 jne	 SHORT $LL4@Invalidate
$LN3@Invalidate:

; 14   : 	}
; 15   : }

  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	5f		 pop	 edi
  0004d	33 cd		 xor	 ecx, ebp
  0004f	5e		 pop	 esi
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?Invalidate@CDibBar@@QAEXXZ ENDP			; CDibBar::Invalidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z
_TEXT	SEGMENT
_hdc$ = 8						; size = 4
_dwWidth$ = 12						; size = 4
_dwHeight$ = 16						; size = 4
?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z PROC		; CDibBar::Create, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 143  : 	if (!m_dib.Create(hdc, dwWidth, dwHeight))

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _dwWidth$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 10	 mov	 edi, DWORD PTR _dwHeight$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	ff 75 08	 push	 DWORD PTR _hdc$[ebp]
  00013	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00016	e8 00 00 00 00	 call	 ?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z ; CGraphicDib::Create
  0001b	84 c0		 test	 al, al
  0001d	75 16		 jne	 SHORT $LN2@Create

; 144  : 	{
; 145  : 		Tracef(" Failed to create CDibBar\n");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@
  00024	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00029	83 c4 04	 add	 esp, 4

; 146  : 		return false;

  0002c	32 c0		 xor	 al, al
  0002e	5f		 pop	 edi

; 154  : 
; 155  : 	return true;
; 156  : }

  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Create:

; 147  : 	}
; 148  : 
; 149  : 	m_dwWidth = dwWidth;
; 150  : 	m_dwHeight = dwHeight;
; 151  : 
; 152  : 	__BuildTextureBlockList(dwWidth, dwHeight);

  00035	68 00 01 00 00	 push	 256			; 00000100H
  0003a	57		 push	 edi
  0003b	53		 push	 ebx
  0003c	8b ce		 mov	 ecx, esi
  0003e	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00041	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00044	e8 00 00 00 00	 call	 ?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z ; CDibBar::__BuildTextureBlockList

; 153  : 	OnCreate();

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b ce		 mov	 ecx, esi
  0004d	ff 50 04	 call	 DWORD PTR [eax+4]
  00050	5f		 pop	 edi

; 154  : 
; 155  : 	return true;
; 156  : }

  00051	5e		 pop	 esi
  00052	b0 01		 mov	 al, 1
  00054	5b		 pop	 ebx
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z ENDP		; CDibBar::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ??1CDibBar@@UAE@XZ
_TEXT	SEGMENT
??1CDibBar@@UAE@XZ PROC					; CDibBar::~CDibBar, COMDAT
; _this$ = ecx

; 162  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDibBar@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDibBar

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
$LN6@CDibBar:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 163  : }

  00037	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003a	5e		 pop	 esi
  0003b	e9 00 00 00 00	 jmp	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
??1CDibBar@@UAE@XZ ENDP					; CDibBar::~CDibBar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp
;	COMDAT ??0CDibBar@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDibBar@@QAE@XZ PROC					; CDibBar::CDibBar, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDibBar@@6B@
  00013	e8 00 00 00 00	 call	 ??0CGraphicDib@@QAE@XZ	; CGraphicDib::CGraphicDib
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00018	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 160  : }

  0001f	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00021	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00028	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\DibBar.cpp

; 160  : }

  0002f	5e		 pop	 esi
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0CDibBar@@QAE@XZ ENDP					; CDibBar::CDibBar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
