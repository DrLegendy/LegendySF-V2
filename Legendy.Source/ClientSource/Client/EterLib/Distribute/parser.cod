; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SArgumet@script@@QAE@ABU01@@Z		; script::SArgumet::SArgumet
PUBLIC	??1SArgumet@script@@QAE@XZ			; script::SArgumet::~SArgumet
PUBLIC	?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
PUBLIC	??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
PUBLIC	??1SCmd@script@@QAE@XZ				; script::SCmd::~SCmd
PUBLIC	??0Group@script@@QAE@XZ				; script::Group::Group
PUBLIC	??1Group@script@@QAE@XZ				; script::Group::~Group
PUBLIC	?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; script::Group::Create
PUBLIC	?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z		; script::Group::GetCmd
PUBLIC	?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z	; script::Group::ReadCmd
PUBLIC	?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; script::Group::GetError
PUBLIC	?SetError@Group@script@@AAEXPBD@Z		; script::Group::SetError
PUBLIC	?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
PUBLIC	?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
PUBLIC	?LocaleString_FindChar@@YAPBDPBDHD@Z		; LocaleString_FindChar
PUBLIC	?LocaleString_RightTrim@@YAHPADH@Z		; LocaleString_RightTrim
PUBLIC	?LocaleString_RightTrim@@YAXPAD@Z		; LocaleString_RightTrim
PUBLIC	?OLD_rtrim@@YAXPAD@Z				; OLD_rtrim
PUBLIC	?LocaleString_Skip@@YAPBDKPBD@Z			; LocaleString_Skip
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * &>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>
PUBLIC	??$_Pocca@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@0@ABV10@@Z ; std::_Pocca<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<script::SCmd,void *> *>
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<script::SArgumet,void *> *>
PUBLIC	??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * const &>
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ ; `string'
PUBLIC	??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ ; `string'
PUBLIC	??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ ; `string'
PUBLIC	??_C@_0BB@DGGADPCI@no?5argument?5name@		; `string'
PUBLIC	??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ ; `string'
PUBLIC	??_C@_06MJINCFFA@LETTER@			; `string'
PUBLIC	??_C@_05MFEJDJP@value@				; `string'
PUBLIC	??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ ; `string'
PUBLIC	??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ ; `string'
PUBLIC	??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isspace:PROC
EXTRN	__imp__CharNextExA@12:PROC
EXTRN	__imp__CharPrevExA@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `script::Group::Create'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
CONST	SEGMENT
??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ DB ' !! '
	DB	'PARSING ERROR - Unknown Arguments : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
CONST	SEGMENT
??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ DB ' !! '
	DB	'PARSING ERROR - Buffer Overflow : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
CONST	SEGMENT
??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ DB ' !! '
	DB	'PARSING ERROR - Syntax Error : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value@
CONST	SEGMENT
??_C@_05MFEJDJP@value@ DB 'value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJINCFFA@LETTER@
CONST	SEGMENT
??_C@_06MJINCFFA@LETTER@ DB 'LETTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
CONST	SEGMENT
??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ DB 'Source file has no'
	DB	' content', 00H				; `string'
CONST	ENDS
;	COMDAT ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
_DATA	SEGMENT
?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A DB 00H ; `script::Group::Create'::`2'::stLetter
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0BB@DGGADPCI@no?5argument?5name@
CONST	SEGMENT
??_C@_0BB@DGGADPCI@no?5argument?5name@ DB 'no argument name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
CONST	SEGMENT
??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ DB 'argument nam'
	DB	'e overflow: must be shorter than 32 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
CONST	SEGMENT
??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ DB 'argument val'
	DB	'ue overflow: must be shorter than 64 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
CONST	SEGMENT
??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ DB 'Infinite loop '
	DB	'in LocaleString_Skip [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$1
__ehfuncinfo$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
__ehfuncinfo$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z$0
__ehfuncinfo$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$2
__ehfuncinfo$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$3
__ehfuncinfo$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3
__ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4
	DD	07H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$18
	DD	08H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19
	DD	07H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	05H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$14
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	07H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$26
	DD	08H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$27
	DD	07H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
	DD	0aH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$31
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Group@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Group@script@@QAE@XZ$0
__ehfuncinfo$??0Group@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Group@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SCmd@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@XZ$0
__ehfuncinfo$??0SCmd@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
$T2 = -4						; size = 4
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 734  :     ~_List_node_insert_op2() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 735  :         if (_Added == 0) {

  00007	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0000b	0f 84 97 00 00
	00		 je	 $LN3@List_node_

; 736  :             return;
; 737  :         }
; 738  : 
; 739  :         _Construct_in_place(_Head->_Prev, pointer{});

  00011	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0001b	50		 push	 eax
  0001c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001f	83 c0 04	 add	 eax, 4
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> *>

; 740  :         _Construct_in_place(_Tail->_Next, pointer{});

  00028	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00032	50		 push	 eax
  00033	ff 77 08	 push	 DWORD PTR [edi+8]
  00036	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@PAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@$$QAPAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> *>

; 741  :         pointer _Subject = _Head;

  0003b	8b 7f 0c	 mov	 edi, DWORD PTR [edi+12]
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 742  :         while (_Subject) {

  00041	85 ff		 test	 edi, edi
  00043	74 63		 je	 SHORT $LN3@List_node_
  00045	56		 push	 esi
$LL2@List_node_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00046	8b f7		 mov	 esi, edi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00048	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0004a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0004d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00050	72 0d		 jb	 SHORT $LN22@List_node_

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00052	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00053	50		 push	 eax
  00054	ff 76 20	 push	 DWORD PTR [esi+32]
  00057	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005c	83 c4 08	 add	 esp, 8
$LN22@List_node_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0005f	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00066	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0006d	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00071	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00074	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00077	72 0d		 jb	 SHORT $LN32@List_node_

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00079	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007a	50		 push	 eax
  0007b	ff 76 08	 push	 DWORD PTR [esi+8]
  0007e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00083	83 c4 08	 add	 esp, 8
$LN32@List_node_:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00086	6a 38		 push	 56			; 00000038H
  00088	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00089	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00090	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00097	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0009b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a0	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 742  :         while (_Subject) {

  000a3	85 ff		 test	 edi, edi
  000a5	75 9f		 jne	 SHORT $LL2@List_node_
  000a7	5e		 pop	 esi
$LN3@List_node_:
  000a8	5f		 pop	 edi

; 743  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 744  :         }
; 745  :     }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
_TEXT	SEGMENT
__Op$2 = -52						; size = 16
__Newnode$3 = -36					; size = 8
__Insert_before$1$ = -32				; size = 4
__Insert_before$ = -28					; size = 4
_this$1$ = -24						; size = 4
__Op$2$ = -20						; size = 4
__Erasures$1$ = -20					; size = 4
__Myend$1$ = -20					; size = 4
__Op$3$ = -16						; size = 4
__Insert_after$4 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__UFirst$ = 8						; size = 4
__ULast$ = 12						; size = 4
??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >, COMDAT
; _this$ = ecx

; 1265 :     void _Assign_cast(_UIter _UFirst, const _UIter _ULast) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 1266 :         // assign [_UFirst, _ULast), casting existing nodes to _Target_ref
; 1267 :         const auto _Myend = _Mypair._Myval2._Myhead;

  0002d	8b 18		 mov	 ebx, DWORD PTR [eax]

; 1268 :         auto _Old         = _Myend->_Next;
; 1269 :         for (;;) { // attempt to reuse a node
; 1270 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  0002f	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
  00032	89 5d ec	 mov	 DWORD PTR __Myend$1$[ebp], ebx
  00035	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00037	3b fb		 cmp	 edi, ebx
  00039	74 64		 je	 SHORT $LN186@Assign_cas
  0003b	0f 1f 44 00 00	 npad	 5
$LL2@Assign_cas:

; 74   :         return _Ptr == _Right._Ptr;

  00040	3b 75 0c	 cmp	 esi, DWORD PTR __ULast$[ebp]

; 1273 :                 _Op._Attach_at_end(_Mypair._Myval2);
; 1274 :                 return;
; 1275 :             }
; 1276 : 
; 1277 :             if (_UFirst == _ULast) {

  00043	0f 84 6b 01 00
	00		 je	 $LN187@Assign_cas

; 44   :         return _Ptr->_Myval;

  00049	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]

; 1278 :                 // input sequence was shorter than existing list, destroy and deallocate what's left
; 1279 :                 _Unchecked_erase(_Old, _Myend);
; 1280 :                 return;
; 1281 :             }
; 1282 : 
; 1283 :             // reuse the node
; 1284 :             reinterpret_cast<_Target_ref>(_Old->_Myval) = *_UFirst;

  0004c	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  0004f	3b c3		 cmp	 eax, ebx
  00051	74 1b		 je	 SHORT $LN160@Assign_cas

; 2145 :         if (_Large_string_engaged()) {

  00053	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00057	8b cb		 mov	 ecx, ebx
  00059	72 02		 jb	 SHORT $LN165@Assign_cas

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0005b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN165@Assign_cas:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0005d	ff 73 10	 push	 DWORD PTR [ebx+16]
  00060	51		 push	 ecx
  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00068	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
  0006b	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
$LN160@Assign_cas:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 24   : 			strValue = c_arg.strValue;

  0006e	83 c3 18	 add	 ebx, 24			; 00000018H
  00071	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00074	3b cb		 cmp	 ecx, ebx
  00076	74 16		 je	 SHORT $LN170@Assign_cas

; 2145 :         if (_Large_string_engaged()) {

  00078	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0007c	8b c3		 mov	 eax, ebx
  0007e	72 02		 jb	 SHORT $LN175@Assign_cas

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00080	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN175@Assign_cas:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00082	ff 73 10	 push	 DWORD PTR [ebx+16]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008b	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
$LN170@Assign_cas:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1285 :             _Old                                        = _Old->_Next;

  0008e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00090	8b 5d ec	 mov	 ebx, DWORD PTR __Myend$1$[ebp]

; 52   :         _Ptr = _Ptr->_Next;

  00093	8b 36		 mov	 esi, DWORD PTR [esi]
  00095	89 75 08	 mov	 DWORD PTR __UFirst$[ebp], esi

; 1268 :         auto _Old         = _Myend->_Next;
; 1269 :         for (;;) { // attempt to reuse a node
; 1270 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  00098	3b fb		 cmp	 edi, ebx
  0009a	75 a4		 jne	 SHORT $LL2@Assign_cas
  0009c	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN186@Assign_cas:

; 620  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  0009f	33 db		 xor	 ebx, ebx
  000a1	89 45 cc	 mov	 DWORD PTR __Op$2[ebp], eax
  000a4	89 5d d0	 mov	 DWORD PTR __Op$2[ebp+4], ebx

; 1271 :                 _List_node_insert_op2<_Alnode> _Op(_Getal());
; 1272 :                 _Op._Append_range_unchecked(_UFirst, _ULast);

  000a7	8b 7d 0c	 mov	 edi, DWORD PTR __ULast$[ebp]
  000aa	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 74   :         return _Ptr == _Right._Ptr;

  000ad	3b f7		 cmp	 esi, edi

; 657  :         if (_First == _Last) { // throws

  000af	0f 84 94 01 00
	00		 je	 $LN200@Assign_cas
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000b5	89 45 dc	 mov	 DWORD PTR __Newnode$3[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b8	6a 38		 push	 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 661  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  000ba	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000be	89 5d e0	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c1	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  000c6	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 44   :         return _Ptr->_Myval;

  000c8	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000cb	83 c4 04	 add	 esp, 4

; 1048 :         _Ptr = _Al.allocate(1);

  000ce	89 5d ec	 mov	 DWORD PTR __Op$2$[ebp], ebx
  000d1	89 5d e0	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d4	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 664  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  000d5	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d8	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 52   :         _Ptr = _Ptr->_Next;

  000dd	8b 36		 mov	 esi, DWORD PTR [esi]

; 667  :             _Tail               = _Newhead;

  000df	8b c3		 mov	 eax, ebx
  000e1	89 5d d8	 mov	 DWORD PTR __Op$2[ebp+12], ebx

; 668  :             ++_Added;

  000e4	bb 01 00 00 00	 mov	 ebx, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  000e9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 667  :             _Tail               = _Newhead;

  000f0	89 45 f0	 mov	 DWORD PTR __Op$3$[ebp], eax
  000f3	89 45 d4	 mov	 DWORD PTR __Op$2[ebp+8], eax

; 668  :             ++_Added;

  000f6	89 5d d0	 mov	 DWORD PTR __Op$2[ebp+4], ebx

; 74   :         return _Ptr == _Right._Ptr;

  000f9	3b f7		 cmp	 esi, edi

; 672  :         while (_First != _Last) { // throws

  000fb	74 5d		 je	 SHORT $LN201@Assign_cas
  000fd	0f 1f 00	 npad	 3
$LL12@Assign_cas:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00100	6a 38		 push	 56			; 00000038H

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00102	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00109	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 44   :         return _Ptr->_Myval;

  00111	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  00114	8b d8		 mov	 ebx, eax
  00116	89 5d e0	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00119	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 674  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  0011a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0011d	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 675  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);

  00122	8d 45 e0	 lea	 eax, DWORD PTR __Newnode$3[ebp+4]
  00125	50		 push	 eax
  00126	ff 75 f0	 push	 DWORD PTR __Op$3$[ebp]
  00129	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>

; 676  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Tail);

  0012e	8d 45 d4	 lea	 eax, DWORD PTR __Op$2[ebp+8]
  00131	50		 push	 eax
  00132	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>

; 52   :         _Ptr = _Ptr->_Next;

  0013b	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0013d	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 678  :             ++_Added;

  0013f	8b 5d d0	 mov	 ebx, DWORD PTR __Op$2[ebp+4]
  00142	83 c4 10	 add	 esp, 16			; 00000010H
  00145	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00146	89 45 f0	 mov	 DWORD PTR __Op$3$[ebp], eax

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00149	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 677  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00150	89 45 d4	 mov	 DWORD PTR __Op$2[ebp+8], eax

; 678  :             ++_Added;

  00153	89 5d d0	 mov	 DWORD PTR __Op$2[ebp+4], ebx

; 74   :         return _Ptr == _Right._Ptr;

  00156	3b f7		 cmp	 esi, edi

; 672  :         while (_First != _Last) { // throws

  00158	75 a6		 jne	 SHORT $LL12@Assign_cas
$LN201@Assign_cas:

; 710  :         _Attach_before(_List_data, _List_data._Myhead);

  0015a	8b 45 ec	 mov	 eax, DWORD PTR __Op$2$[ebp]
  0015d	8b 7d f0	 mov	 edi, DWORD PTR __Op$3$[ebp]
$LN62@Assign_cas:
  00160	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00163	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00165	89 4d e0	 mov	 DWORD PTR __Insert_before$1$[ebp], ecx
  00168	89 4d e4	 mov	 DWORD PTR __Insert_before$[ebp], ecx

; 690  :         if (_Local_added == 0) {

  0016b	85 db		 test	 ebx, ebx
  0016d	74 31		 je	 SHORT $LL115@Assign_cas

; 691  :             return _Insert_before;
; 692  :         }
; 693  : 
; 694  :         const auto _Local_head   = _Head;
; 695  :         const auto _Local_tail   = _Tail;
; 696  :         const auto _Insert_after = _Insert_before->_Prev;

  0016f	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 697  : 
; 698  :         _Construct_in_place(_Local_head->_Prev, _Insert_after);

  00172	83 c0 04	 add	 eax, 4
  00175	8d 4d f0	 lea	 ecx, DWORD PTR __Insert_after$4[ebp]
  00178	89 75 f0	 mov	 DWORD PTR __Insert_after$4[ebp], esi
  0017b	51		 push	 ecx
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 699  :         _Insert_after->_Next = _Local_head;

  00182	8b 45 ec	 mov	 eax, DWORD PTR __Op$2$[ebp]
  00185	89 06		 mov	 DWORD PTR [esi], eax

; 700  :         _Construct_in_place(_Local_tail->_Next, _Insert_before);

  00187	8d 45 e4	 lea	 eax, DWORD PTR __Insert_before$[ebp]
  0018a	50		 push	 eax
  0018b	57		 push	 edi
  0018c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 701  :         _Insert_before->_Prev = _Local_tail;

  00191	8b 45 e0	 mov	 eax, DWORD PTR __Insert_before$1$[ebp]
  00194	83 c4 10	 add	 esp, 16			; 00000010H
  00197	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 702  : 
; 703  :         _List_data._Mysize += _Local_added;

  0019a	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0019d	01 58 04	 add	 DWORD PTR [eax+4], ebx
$LL115@Assign_cas:

; 1286 :             ++_UFirst;
; 1287 :         }
; 1288 :     }

  001a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001aa	59		 pop	 ecx
  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	5b		 pop	 ebx
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 08 00	 ret	 8
$LN187@Assign_cas:

; 1377 :         if (_First == _Last) {

  001b4	3b fb		 cmp	 edi, ebx
  001b6	74 e8		 je	 SHORT $LL115@Assign_cas

; 1378 :             return _Last;
; 1379 :         }
; 1380 : 
; 1381 :         const auto _Predecessor = _First->_Prev;

  001b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 1382 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1383 :         const auto _Head = _Mypair._Myval2._Myhead;
; 1384 :         if (_First == _Head->_Next && _Last == _Head) { // orphan all non-end iterators
; 1385 :             _Mypair._Myval2._Orphan_non_end();
; 1386 :         } else { // orphan erased iterators
; 1387 :             _Lockit _Lock(_LOCK_DEBUG);
; 1388 :             for (auto _Marked = _First; _Marked != _Last; _Marked = _Marked->_Next) { // mark erased nodes
; 1389 :                 _Marked->_Prev = nullptr;
; 1390 :             }
; 1391 : 
; 1392 :             _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1393 :             while (*_Pnext) {
; 1394 :                 _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;
; 1395 :                 if (static_cast<const_iterator&>(**_Pnext)._Ptr->_Prev) { // node still has a _Prev, skip
; 1396 :                     _Pnext = _Pnextnext;
; 1397 :                 } else { // orphan the iterator
; 1398 :                     (*_Pnext)->_Myproxy = nullptr;
; 1399 :                     *_Pnext             = *_Pnextnext;
; 1400 :                 }
; 1401 :             }
; 1402 : 
; 1403 :             // _Prev pointers not restored because we're about to delete the nodes of which they are a member anyway
; 1404 :         }
; 1405 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1406 : 
; 1407 :         // snip out the removed range
; 1408 :         _Predecessor->_Next = _Last;
; 1409 :         _Last->_Prev        = _Predecessor;
; 1410 : 
; 1411 :         // count and deallocate the removed nodes
; 1412 :         auto& _Al           = _Getal();
; 1413 :         size_type _Erasures = 0;

  001bb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Erasures$1$[ebp], 0
  001c2	89 18		 mov	 DWORD PTR [eax], ebx
  001c4	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LL118@Assign_cas:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001c7	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1415 :             const auto _Next = _First->_Next;

  001ca	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001cc	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001cf	72 0d		 jb	 SHORT $LN135@Assign_cas

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001d1	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d2	50		 push	 eax
  001d3	ff 77 20	 push	 DWORD PTR [edi+32]
  001d6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001db	83 c4 08	 add	 esp, 8
$LN135@Assign_cas:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  001de	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001e5	c7 47 34 0f 00
	00 00		 mov	 DWORD PTR [edi+52], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001ec	c6 47 20 00	 mov	 BYTE PTR [edi+32], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  001f0	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  001f3	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001f6	72 0d		 jb	 SHORT $LN145@Assign_cas

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001f8	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f9	50		 push	 eax
  001fa	ff 77 08	 push	 DWORD PTR [edi+8]
  001fd	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00202	83 c4 08	 add	 esp, 8
$LN145@Assign_cas:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00205	6a 38		 push	 56			; 00000038H
  00207	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00208	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0020f	c7 47 1c 0f 00
	00 00		 mov	 DWORD PTR [edi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00216	c6 47 08 00	 mov	 BYTE PTR [edi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0021a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1418 :             ++_Erasures;

  0021f	8b 4d ec	 mov	 ecx, DWORD PTR __Erasures$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00222	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1418 :             ++_Erasures;

  00225	41		 inc	 ecx
  00226	8b fe		 mov	 edi, esi
  00228	89 4d ec	 mov	 DWORD PTR __Erasures$1$[ebp], ecx

; 1419 :         } while (_First != _Last);

  0022b	3b f3		 cmp	 esi, ebx
  0022d	75 98		 jne	 SHORT $LL118@Assign_cas

; 1420 : 
; 1421 :         _Mypair._Myval2._Mysize -= _Erasures;

  0022f	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00232	29 4a 04	 sub	 DWORD PTR [edx+4], ecx

; 1286 :             ++_UFirst;
; 1287 :         }
; 1288 :     }

  00235	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00238	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023f	59		 pop	 ecx
  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c2 08 00	 ret	 8
$LN200@Assign_cas:

; 657  :         if (_First == _Last) { // throws

  00249	8b 45 d8	 mov	 eax, DWORD PTR __Op$2[ebp+12]
  0024c	8b 7d d4	 mov	 edi, DWORD PTR __Op$2[ebp+8]
  0024f	89 45 ec	 mov	 DWORD PTR __Op$2$[ebp], eax

; 669  :             ++_First; // throws
; 670  :         }
; 671  : 
; 672  :         while (_First != _Last) { // throws

  00252	e9 09 ff ff ff	 jmp	 $LN62@Assign_cas
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Newnode$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<script::SArgumet,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<script::SArgumet,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<script::SCmd,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<script::SCmd,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 28		 push	 40			; 00000028H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 63		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
$LL4@Free_non_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 328  :             _Pnext = _Pnode->_Next;

  0001a	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0001c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0001f	72 0d		 jb	 SHORT $LN20@Free_non_h

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00021	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	50		 push	 eax
  00023	ff 76 20	 push	 DWORD PTR [esi+32]
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
$LN20@Free_non_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0002e	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00035	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003c	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00040	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00043	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00046	72 0d		 jb	 SHORT $LN30@Free_non_h

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00048	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	50		 push	 eax
  0004a	ff 76 08	 push	 DWORD PTR [esi+8]
  0004d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00052	83 c4 08	 add	 esp, 8
$LN30@Free_non_h:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00055	6a 38		 push	 56			; 00000038H
  00057	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00058	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005f	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00066	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0006a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0006f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00072	8b f7		 mov	 esi, edi
  00074	85 ff		 test	 edi, edi
  00076	75 9f		 jne	 SHORT $LL4@Free_non_h
  00078	5f		 pop	 edi
$LN3@Free_non_h:
  00079	5e		 pop	 esi

; 329  :             _Freenode(_Al, _Pnode);
; 330  :         }
; 331  :     }

  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 56		 je	 SHORT $LN3@Free_non_h
  00016	53		 push	 ebx
  00017	57		 push	 edi
$LL4@Free_non_h:

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00018	ff 76 20	 push	 DWORD PTR [esi+32]

; 328  :             _Pnext = _Pnode->_Next;

  0001b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001d	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00026	6a 38		 push	 56			; 00000038H
  00028	ff 37		 push	 DWORD PTR [edi]
  0002a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00035	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00038	72 0d		 jb	 SHORT $LN28@Free_non_h

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0003a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	50		 push	 eax
  0003c	ff 76 08	 push	 DWORD PTR [esi+8]
  0003f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00044	83 c4 08	 add	 esp, 8
$LN28@Free_non_h:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00047	6a 28		 push	 40			; 00000028H
  00049	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00051	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00058	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0005c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00061	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00064	8b f3		 mov	 esi, ebx
  00066	85 db		 test	 ebx, ebx
  00068	75 ae		 jne	 SHORT $LL4@Free_non_h
  0006a	5f		 pop	 edi
  0006b	5b		 pop	 ebx
$LN3@Free_non_h:
  0006c	5e		 pop	 esi

; 329  :             _Freenode(_Al, _Pnode);
; 330  :         }
; 331  :     }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter'', COMDAT

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 16 ; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00007	72 22		 jb	 SHORT $LN7@dynamic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00010	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00015	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>

; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
  0001f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	5e		 pop	 esi
$LN7@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0002b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00035	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, 0
  00046	c3		 ret	 0
??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_Skip@@YAPBDKPBD@Z
_TEXT	SEGMENT
_codePage$ = 8						; size = 4
_cur$ = 12						; size = 4
?LocaleString_Skip@@YAPBDKPBD@Z PROC			; LocaleString_Skip, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 123  : 	int loopCount = 0;
; 124  : 
; 125  : 	while (*cur)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cur$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000e	74 59		 je	 SHORT $LN7@LocaleStri
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _codePage$[ebp]
$LL2@LocaleStri:

; 126  : 	{
; 127  : 		if (++loopCount > 9216)

  00013	47		 inc	 edi
  00014	81 ff 00 24 00
	00		 cmp	 edi, 9216		; 00002400H
  0001a	7f 3f		 jg	 SHORT $LN12@LocaleStri

; 130  : 			break;
; 131  : 		}
; 132  : 
; 133  : 		const char* next = CharNextExA(codePage, cur, 0);

  0001c	6a 00		 push	 0
  0001e	56		 push	 esi
  0001f	53		 push	 ebx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00026	8b c8		 mov	 ecx, eax

; 134  : 		int cur_len = next - cur;

  00028	2b c6		 sub	 eax, esi

; 135  : 		if (cur_len > 1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	7e 04		 jle	 SHORT $LN5@LocaleStri

; 136  : 		{
; 137  : 			cur = next;

  0002f	8b f1		 mov	 esi, ecx

; 138  : 		}

  00031	eb 1c		 jmp	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 139  : 		else if (1 == cur_len)

  00033	75 34		 jne	 SHORT $LN7@LocaleStri

; 140  : 		{
; 141  : 			if (!isspace((unsigned char) *cur) && *cur != '\n' && *cur != '\r')

  00035	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _isspace
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 0a		 jne	 SHORT $LN9@LocaleStri
  00045	8a 06		 mov	 al, BYTE PTR [esi]
  00047	3c 0a		 cmp	 al, 10			; 0000000aH
  00049	74 04		 je	 SHORT $LN9@LocaleStri
  0004b	3c 0d		 cmp	 al, 13			; 0000000dH
  0004d	75 1a		 jne	 SHORT $LN7@LocaleStri
$LN9@LocaleStri:

; 123  : 	int loopCount = 0;
; 124  : 
; 125  : 	while (*cur)

  0004f	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00052	75 bf		 jne	 SHORT $LL2@LocaleStri

; 142  : 				return cur;
; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			break;
; 147  : 		}
; 148  : 	}
; 149  : 	return cur;
; 150  : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN12@LocaleStri:

; 128  : 		{
; 129  : 			TraceError("Infinite loop in LocaleString_Skip [%s]", cur);

  0005b	56		 push	 esi
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
  00061	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00066	83 c4 08	 add	 esp, 8
$LN7@LocaleStri:

; 142  : 				return cur;
; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			break;
; 147  : 		}
; 148  : 	}
; 149  : 	return cur;
; 150  : }

  00069	5f		 pop	 edi
  0006a	8b c6		 mov	 eax, esi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?LocaleString_Skip@@YAPBDKPBD@Z ENDP			; LocaleString_Skip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?OLD_rtrim@@YAXPAD@Z
_TEXT	SEGMENT
_codePage$1$ = 8					; size = 4
_base$ = 8						; size = 4
?OLD_rtrim@@YAXPAD@Z PROC				; OLD_rtrim, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 80   : 	if (!base)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _base$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	0f 84 d6 00 00
	00		 je	 $LN30@OLD_rtrim

; 81   : 		return;
; 82   : 
; 83   : 	DWORD codePage = GetDefaultCodePage();

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00016	8b d0		 mov	 edx, eax
  00018	89 55 08	 mov	 DWORD PTR _codePage$1$[ebp], edx

; 84   : 
; 85   : 	if (949 == codePage || 936 == codePage)

  0001b	81 fa b5 03 00
	00		 cmp	 edx, 949		; 000003b5H
  00021	74 64		 je	 SHORT $LN9@OLD_rtrim
  00023	81 fa a8 03 00
	00		 cmp	 edx, 936		; 000003a8H
  00029	74 5c		 je	 SHORT $LN9@OLD_rtrim

; 97   : 		}
; 98   : 	}
; 99   : 	else
; 100  : 	{
; 101  : 		char* end = base + strlen(base);

  0002b	8b cb		 mov	 ecx, ebx
  0002d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL28@OLD_rtrim:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL28@OLD_rtrim
  00037	2b ce		 sub	 ecx, esi
  00039	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]

; 102  : 
; 103  : 		while (end != base)

  0003c	3b fb		 cmp	 edi, ebx
  0003e	0f 84 9f 00 00
	00		 je	 $LN31@OLD_rtrim
$LL4@OLD_rtrim:

; 104  : 		{
; 105  : 			char* prev = CharPrevExA(codePage, base, end, 0);

  00044	6a 00		 push	 0
  00046	57		 push	 edi
  00047	53		 push	 ebx
  00048	52		 push	 edx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0004f	8b f0		 mov	 esi, eax

; 106  : 
; 107  : 			int prev_len = end - prev;

  00051	2b fe		 sub	 edi, esi

; 108  : 			if (prev_len != 1)

  00053	83 ff 01	 cmp	 edi, 1
  00056	0f 85 87 00 00
	00		 jne	 $LN31@OLD_rtrim

; 109  : 				break;
; 110  : 
; 111  : 			if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  0005c	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _isspace
  00065	83 c4 04	 add	 esp, 4
  00068	85 c0		 test	 eax, eax
  0006a	75 0a		 jne	 SHORT $LN15@OLD_rtrim
  0006c	8a 06		 mov	 al, BYTE PTR [esi]
  0006e	3c 0a		 cmp	 al, 10			; 0000000aH
  00070	74 04		 je	 SHORT $LN15@OLD_rtrim
  00072	3c 0d		 cmp	 al, 13			; 0000000dH
  00074	75 6d		 jne	 SHORT $LN31@OLD_rtrim
$LN15@OLD_rtrim:

; 102  : 
; 103  : 		while (end != base)

  00076	8b 55 08	 mov	 edx, DWORD PTR _codePage$1$[ebp]

; 112  : 				break;
; 113  : 
; 114  : 			*prev = '\0';
; 115  : 
; 116  : 			end = prev;

  00079	8b fe		 mov	 edi, esi
  0007b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0007e	3b f3		 cmp	 esi, ebx
  00080	75 c2		 jne	 SHORT $LL4@OLD_rtrim
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 117  : 		}
; 118  : 	}
; 119  : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN9@OLD_rtrim:

; 86   : 	{
; 87   : 		char* end = base + strlen(base) - 1;

  00087	8b cb		 mov	 ecx, ebx
  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL29@OLD_rtrim:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL29@OLD_rtrim
  00097	2b ca		 sub	 ecx, edx
  00099	8d 73 ff	 lea	 esi, DWORD PTR [ebx-1]
  0009c	03 f1		 add	 esi, ecx

; 88   : 
; 89   : 		while (end != base)

  0009e	3b f3		 cmp	 esi, ebx
  000a0	74 41		 je	 SHORT $LN31@OLD_rtrim
  000a2	8b 7d 08	 mov	 edi, DWORD PTR _codePage$1$[ebp]
$LL2@OLD_rtrim:

; 90   : 		{
; 91   : 			if (!isnhspace((unsigned char) *end) && *end != '\n' && *end != '\r' || (end!=base && *((unsigned char*)end-1)>0xa0))

  000a5	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a7	8a c1		 mov	 al, cl
  000a9	24 e0		 and	 al, 224			; 000000e0H
  000ab	3c 90		 cmp	 al, 144			; 00000090H
  000ad	77 10		 ja	 SHORT $LN13@OLD_rtrim
  000af	0f b6 c1	 movzx	 eax, cl
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _isspace
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	75 0a		 jne	 SHORT $LN12@OLD_rtrim
$LN13@OLD_rtrim:
  000bf	8a 06		 mov	 al, BYTE PTR [esi]
  000c1	3c 0a		 cmp	 al, 10			; 0000000aH
  000c3	74 04		 je	 SHORT $LN12@OLD_rtrim
  000c5	3c 0d		 cmp	 al, 13			; 0000000dH
  000c7	75 1a		 jne	 SHORT $LN31@OLD_rtrim
$LN12@OLD_rtrim:
  000c9	80 7e ff a0	 cmp	 BYTE PTR [esi-1], 160	; 000000a0H
  000cd	77 14		 ja	 SHORT $LN31@OLD_rtrim

; 92   : 				break;
; 93   : 
; 94   : 			*end = '\0';
; 95   : 
; 96   : 			end = CharPrevExA(codePage, base, end, 0);

  000cf	6a 00		 push	 0
  000d1	56		 push	 esi
  000d2	53		 push	 ebx
  000d3	57		 push	 edi
  000d4	c6 06 00	 mov	 BYTE PTR [esi], 0
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  000dd	8b f0		 mov	 esi, eax
  000df	3b f3		 cmp	 esi, ebx
  000e1	75 c2		 jne	 SHORT $LL2@OLD_rtrim
$LN31@OLD_rtrim:
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
$LN30@OLD_rtrim:
  000e5	5b		 pop	 ebx

; 117  : 		}
; 118  : 	}
; 119  : }

  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
?OLD_rtrim@@YAXPAD@Z ENDP				; OLD_rtrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAXPAD@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
?LocaleString_RightTrim@@YAXPAD@Z PROC			; LocaleString_RightTrim, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	LocaleString_RightTrim(base, strlen(base));

  00003	8b 55 08	 mov	 edx, DWORD PTR _base$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@LocaleStri:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@LocaleStri
  00017	2b c6		 sub	 eax, esi
  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi

; 76   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?LocaleString_RightTrim@@YAXPAD@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAHPADH@Z
_TEXT	SEGMENT
_codePage$1$ = -4					; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
?LocaleString_RightTrim@@YAHPADH@Z PROC			; LocaleString_RightTrim, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 46   : 	DWORD codePage = GetDefaultCodePage();

  00007	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 47   : 
; 48   : 	int pos = len;

  0000c	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  0000f	8b c8		 mov	 ecx, eax
  00011	89 4d fc	 mov	 DWORD PTR _codePage$1$[ebp], ecx

; 49   : 
; 50   : 	while (pos > 0)

  00014	85 f6		 test	 esi, esi
  00016	7e 47		 jle	 SHORT $LN6@LocaleStri

; 46   : 	DWORD codePage = GetDefaultCodePage();

  00018	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  0001b	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]
  0001e	66 90		 npad	 2
$LL2@LocaleStri:

; 51   : 	{
; 52   : 		char* cur = base + pos;
; 53   : 		char* prev = CharPrevExA(codePage, base, cur , 0);

  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0002b	8b f8		 mov	 edi, eax

; 54   : 
; 55   : 		int prev_len = cur - prev;

  0002d	8b cb		 mov	 ecx, ebx
  0002f	2b cf		 sub	 ecx, edi

; 56   : 		if (prev_len != 1)

  00031	83 f9 01	 cmp	 ecx, 1
  00034	75 32		 jne	 SHORT $LN14@LocaleStri

; 57   : 			break;
; 58   : 
; 59   : 		if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  00036	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _isspace
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 0a		 jne	 SHORT $LN5@LocaleStri
  00046	8a 07		 mov	 al, BYTE PTR [edi]
  00048	3c 0a		 cmp	 al, 10			; 0000000aH
  0004a	74 04		 je	 SHORT $LN5@LocaleStri
  0004c	3c 0d		 cmp	 al, 13			; 0000000dH
  0004e	75 18		 jne	 SHORT $LN14@LocaleStri
$LN5@LocaleStri:

; 49   : 
; 50   : 	while (pos > 0)

  00050	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]

; 60   : 			break;
; 61   : 
; 62   : 		*prev = '\0';
; 63   : 
; 64   : 		pos -= prev_len;

  00053	4e		 dec	 esi
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _codePage$1$[ebp]
  00057	4b		 dec	 ebx
  00058	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005b	85 f6		 test	 esi, esi
  0005d	7f c1		 jg	 SHORT $LL2@LocaleStri
$LN6@LocaleStri:
  0005f	5f		 pop	 edi

; 69   : 
; 70   : 	return 0;
; 71   : }

  00060	5e		 pop	 esi
  00061	33 c0		 xor	 eax, eax
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN14@LocaleStri:
  00068	5f		 pop	 edi

; 65   : 	}
; 66   : 
; 67   : 	if (pos > 0)
; 68   : 		return pos;

  00069	8b c6		 mov	 eax, esi

; 69   : 
; 70   : 	return 0;
; 71   : }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?LocaleString_RightTrim@@YAHPADH@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_FindChar@@YAPBDPBDHD@Z
_TEXT	SEGMENT
_codePage$1$ = -4					; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
_test$ = 16						; size = 1
?LocaleString_FindChar@@YAPBDPBDHD@Z PROC		; LocaleString_FindChar, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 14   : 	if (!base)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	74 3f		 je	 SHORT $LN7@LocaleStri

; 15   : 		return NULL;
; 16   : 
; 17   : 	DWORD codePage = GetDefaultCodePage();

  0000e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 18   : 
; 19   : 	int pos = 0;
; 20   : 	while (pos < len)

  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00016	33 f6		 xor	 esi, esi
  00018	89 45 fc	 mov	 DWORD PTR _codePage$1$[ebp], eax
  0001b	85 db		 test	 ebx, ebx
  0001d	7e 2e		 jle	 SHORT $LN7@LocaleStri
  0001f	90		 npad	 1
$LL2@LocaleStri:

; 21   : 	{
; 22   : 		const char* cur = base + pos;
; 23   : 		const char* next = CharNextExA(codePage, cur, 0);

  00020	6a 00		 push	 0
  00022	03 fe		 add	 edi, esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 24   : 		int cur_len = next - cur;

  0002c	2b c7		 sub	 eax, edi

; 25   : 		if (cur_len > 1)

  0002e	83 f8 01	 cmp	 eax, 1
  00031	7f 0e		 jg	 SHORT $LN8@LocaleStri

; 26   : 		{
; 27   : 			pos += cur_len;
; 28   : 		}
; 29   : 		else if (1 == cur_len)

  00033	75 18		 jne	 SHORT $LN7@LocaleStri

; 30   : 		{
; 31   : 			if (*cur == test)

  00035	8a 45 10	 mov	 al, BYTE PTR _test$[ebp]
  00038	38 07		 cmp	 BYTE PTR [edi], al
  0003a	74 1a		 je	 SHORT $LN12@LocaleStri

; 33   : 
; 34   : 			++pos;

  0003c	b8 01 00 00 00	 mov	 eax, 1
$LN8@LocaleStri:

; 18   : 
; 19   : 	int pos = 0;
; 20   : 	while (pos < len)

  00041	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00044	03 f0		 add	 esi, eax
  00046	8b 45 fc	 mov	 eax, DWORD PTR _codePage$1$[ebp]
  00049	3b f3		 cmp	 esi, ebx
  0004b	7c d3		 jl	 SHORT $LL2@LocaleStri
$LN7@LocaleStri:
  0004d	5f		 pop	 edi

; 35   : 		}
; 36   : 		else
; 37   : 		{
; 38   : 			break;
; 39   : 		}
; 40   : 	}
; 41   : 	return NULL;
; 42   : }

  0004e	5e		 pop	 esi
  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN12@LocaleStri:

; 32   : 				return cur;

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi

; 35   : 		}
; 36   : 		else
; 37   : 		{
; 38   : 			break;
; 39   : 		}
; 40   : 	}
; 41   : 	return NULL;
; 42   : }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?LocaleString_FindChar@@YAPBDPBDHD@Z ENDP		; LocaleString_FindChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
_TEXT	SEGMENT
__Op$2 = -36						; size = 8
$T3 = -28						; size = 4
__Where$1$ = -24					; size = 4
__Insert_after$4 = -24					; size = 4
_this$1$ = -20						; size = 4
__Newhead$5 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Insert_before$ = 8					; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z PROC ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back, COMDAT
; _this$ = ecx

; 1251 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1014 :         if (_Mysize == max_size()) {

  0002a	81 7f 04 66 66
	66 06		 cmp	 DWORD PTR [edi+4], 107374182 ; 06666666H

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00031	8b 07		 mov	 eax, DWORD PTR [edi]
  00033	89 45 e8	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1014 :         if (_Mysize == max_size()) {

  00036	0f 84 ed 00 00
	00		 je	 $LN122@push_back
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003c	89 7d dc	 mov	 DWORD PTR __Op$2[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003f	6a 28		 push	 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00048	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0004f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  00054	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00056	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  00059	89 5d e0	 mov	 DWORD PTR __Op$2[ebp+4], ebx

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0005c	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0005f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00066	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0006d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 39   : 		SCmd(const SCmd& c_cmd)

  00070	83 c0 18	 add	 eax, 24			; 00000018H
  00073	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00077	6a 38		 push	 56			; 00000038H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 39   : 		SCmd(const SCmd& c_cmd)

  00079	89 45 ec	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00082	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00089	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  0008e	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00090	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$5[ebp]
  00093	50		 push	 eax
  00094	56		 push	 esi
  00095	89 75 f0	 mov	 DWORD PTR __Newhead$5[ebp], esi
  00098	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0009d	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$5[ebp]
  000a0	50		 push	 eax
  000a1	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ad	83 c4 18	 add	 esp, 24			; 00000018H
  000b0	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  000b2	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  000b5	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 39   : 		SCmd(const SCmd& c_cmd)

  000b8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  000bc	3b ce		 cmp	 ecx, esi
  000be	74 13		 je	 SHORT $LN55@push_back

; 2153 :         return _BUF_SIZE <= _Myres;

  000c0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  000c4	8b c6		 mov	 eax, esi

; 2145 :         if (_Large_string_engaged()) {

  000c6	72 02		 jb	 SHORT $LN60@push_back

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
$LN60@push_back:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000ca	ff 76 10	 push	 DWORD PTR [esi+16]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN55@push_back:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1084 :         if (this != _STD addressof(_Right)) {

  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 42   : 			argList = c_cmd.argList;

  000d6	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1084 :         if (this != _STD addressof(_Right)) {

  000d9	3b c8		 cmp	 ecx, eax
  000db	74 0a		 je	 SHORT $LN65@push_back

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000dd	8b 00		 mov	 eax, DWORD PTR [eax]

; 1293 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  000df	50		 push	 eax
  000e0	ff 30		 push	 DWORD PTR [eax]
  000e2	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN65@push_back:

; 1019 :         ++_Mysize;

  000e7	ff 47 04	 inc	 DWORD PTR [edi+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000ea	8d 45 08	 lea	 eax, DWORD PTR __Insert_before$[ebp]

; 1020 :         return _Op._Transfer_before(_Where);

  000ed	8b 7d e8	 mov	 edi, DWORD PTR __Where$1$[ebp]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000f0	50		 push	 eax
  000f1	53		 push	 ebx

; 1020 :         return _Op._Transfer_before(_Where);

  000f2	89 7d 08	 mov	 DWORD PTR __Insert_before$[ebp], edi

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  000f5	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  000f8	89 75 e8	 mov	 DWORD PTR __Insert_after$4[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000fb	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00100	8d 45 e8	 lea	 eax, DWORD PTR __Insert_after$4[ebp]
  00103	50		 push	 eax
  00104	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  0010d	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 606  :         _Insert_after->_Next  = _Result;

  00113	89 1e		 mov	 DWORD PTR [esi], ebx

; 1253 :     }

  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 04 00	 ret	 4
$LN122@push_back:

; 1015 :             _Xlength_error("list too long");

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0012e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN120@push_back:
  00133	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2:
  00008	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3:
  00010	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ENDP ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -260						; size = 8
_c_arg_base$GSCopy$1$ = -252				; size = 4
_argList$GSCopy$1$ = -248				; size = 4
__Result$2$ = -244					; size = 4
__Result$2$ = -244					; size = 4
_codePage$1$ = -244					; size = 4
_pos$1$ = -240						; size = 4
__New_ptr$3 = -240					; size = 4
__Result$2$ = -236					; size = 4
__New_ptr$4 = -236					; size = 4
__Insert_after$5 = -236					; size = 4
__Result$2$ = -232					; size = 4
__New_ptr$6 = -232					; size = 4
__Insert_before$7 = -232				; size = 4
__New_ptr$8 = -232					; size = 4
_c$1$ = -225						; size = 1
_iCharLen$1$ = -224					; size = 4
_isValue$1$ = -217					; size = 1
$T9 = -216						; size = 24
$T10 = -216						; size = 24
$T11 = -192						; size = 24
$T12 = -192						; size = 24
$T13 = -168						; size = 48
$T14 = -168						; size = 48
_szValue$ = -120					; size = 65
_szName$ = -52						; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_arg_base$ = 8					; size = 4
_arg_len$ = 12						; size = 4
_argList$ = 16						; size = 4
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z PROC ; script::Group::GetArg, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 08	 mov	 eax, DWORD PTR _c_arg_base$[ebp]

; 154  :     char szName[32 + 1];
; 155  :     char szValue[64 + 1];
; 156  : 
; 157  :     int iNameLen = 0;
; 158  :     int iValueLen = 0;
; 159  : 	int iCharLen = 0;
; 160  : 
; 161  : 	int pos = 0;

  00031	33 db		 xor	 ebx, ebx
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _argList$[ebp]
  00036	33 f6		 xor	 esi, esi
  00038	89 85 04 ff ff
	ff		 mov	 DWORD PTR _c_arg_base$GSCopy$1$[ebp], eax
  0003e	33 ff		 xor	 edi, edi
  00040	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _argList$GSCopy$1$[ebp], ecx
  00046	89 9d 10 ff ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ebx

; 162  : 
; 163  :     bool isValue = false;

  0004c	88 9d 27 ff ff
	ff		 mov	 BYTE PTR _isValue$1$[ebp], bl

; 164  : 
; 165  : 	DWORD codePage = GetDefaultCodePage();

  00052	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00057	8b c8		 mov	 ecx, eax
  00059	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], ecx

; 166  : 
; 167  :     while (pos < arg_len)

  0005f	39 5d 0c	 cmp	 DWORD PTR _arg_len$[ebp], ebx
  00062	0f 8e d4 07 00
	00		 jle	 $LN406@GetArg
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@GetArg:

; 168  :     {
; 169  : 		const char* cur = c_arg_base + pos;

  00070	03 9d 04 ff ff
	ff		 add	 ebx, DWORD PTR _c_arg_base$GSCopy$1$[ebp]

; 170  : 		const char* next = CharNextExA(codePage, cur, 0);

  00076	6a 00		 push	 0
  00078	53		 push	 ebx
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 171  : 		iCharLen = next - cur;

  00080	2b c3		 sub	 eax, ebx
  00082	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iCharLen$1$[ebp], eax

; 172  : 
; 173  : 		if (iCharLen > 1)

  00088	83 f8 01	 cmp	 eax, 1
  0008b	7e 71		 jle	 SHORT $LN4@GetArg

; 174  : 		{
; 175  : 			if (isValue)

  0008d	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR _isValue$1$[ebp], 0
  00094	74 34		 je	 SHORT $LN6@GetArg

; 176  : 			{
; 177  : 				if (iValueLen >= 64)

  00096	83 ff 40	 cmp	 edi, 64			; 00000040H
  00099	0f 8d a7 04 00
	00		 jge	 $LN419@GetArg

; 178  : 				{
; 179  : 					TraceError("argument value overflow: must be shorter than 64 letters");
; 180  : 					return false;
; 181  : 				}
; 182  : 
; 183  : 				memcpy(szValue+iValueLen, cur, iCharLen);

  0009f	50		 push	 eax
  000a0	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  000a3	03 c7		 add	 eax, edi
  000a5	53		 push	 ebx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _memcpy

; 184  : 				iValueLen += iCharLen;

  000ac	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	03 f8		 add	 edi, eax

; 185  : 				szValue[iValueLen] = '\0';

  000b7	83 ff 41	 cmp	 edi, 65			; 00000041H
  000ba	0f 83 ab 07 00
	00		 jae	 $LN34@GetArg
  000c0	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 186  : 			}

  000c5	e9 4a 04 00 00	 jmp	 $LN21@GetArg
$LN6@GetArg:

; 187  : 			else
; 188  : 			{
; 189  : 				if (iNameLen >= 32)

  000ca	83 fe 20	 cmp	 esi, 32			; 00000020H
  000cd	0f 8d 87 04 00
	00		 jge	 $LN420@GetArg

; 190  : 				{
; 191  : 					TraceError("argument name overflow: must be shorter than 32 letters");
; 192  : 					return false;
; 193  : 				}
; 194  : 				memcpy(szName+iNameLen, cur, iCharLen);

  000d3	50		 push	 eax
  000d4	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  000d7	03 c6		 add	 eax, esi
  000d9	53		 push	 ebx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _memcpy

; 195  : 				iNameLen += iCharLen;

  000e0	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	03 f0		 add	 esi, eax

; 196  : 				szName[iNameLen] = '\0';

  000eb	83 fe 21	 cmp	 esi, 33			; 00000021H
  000ee	0f 83 77 07 00
	00		 jae	 $LN34@GetArg
  000f4	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0

; 197  : 			}
; 198  : 		}

  000f9	e9 16 04 00 00	 jmp	 $LN21@GetArg
$LN4@GetArg:

; 199  : 		else if (iCharLen == 1)

  000fe	0f 85 6a 04 00
	00		 jne	 $LN425@GetArg

; 200  : 		{
; 201  : 			const char c = *cur;

  00104	8a 03		 mov	 al, BYTE PTR [ebx]
  00106	88 85 1f ff ff
	ff		 mov	 BYTE PTR _c$1$[ebp], al

; 202  : 			if (c == '|')

  0010c	3c 7c		 cmp	 al, 124			; 0000007cH
  0010e	0f 85 81 03 00
	00		 jne	 $LN12@GetArg

; 203  : 			{
; 204  : 				if (iNameLen == 0)

  00114	85 f6		 test	 esi, esi
  00116	0f 84 16 04 00
	00		 je	 $LN415@GetArg

; 208  : 				}
; 209  : 
; 210  : 				isValue = false;
; 211  : 
; 212  : 				iNameLen = LocaleString_RightTrim(szName, iNameLen);

  0011c	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  0011f	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0
  00126	56		 push	 esi
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 213  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0012d	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  00130	57		 push	 edi
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00137	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0013a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 213  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  00144	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00147	c7 85 3c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00151	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00158	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0015b	0f 1f 44 00 00	 npad	 5
$LL426@GetArg:
  00160	8a 01		 mov	 al, BYTE PTR [ecx]
  00162	41		 inc	 ecx
  00163	84 c0		 test	 al, al
  00165	75 f9		 jne	 SHORT $LL426@GetArg
  00167	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00169	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  0016c	51		 push	 ecx
  0016d	50		 push	 eax
  0016e	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00174	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00179	8d 4d cc	 lea	 ecx, DWORD PTR _szName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  0017c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00183	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0018d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00190	c7 85 54 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0019a	c6 85 40 ff ff
	ff 00		 mov	 BYTE PTR $T12[ebp], 0
$LL427@GetArg:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  001a1	8a 01		 mov	 al, BYTE PTR [ecx]
  001a3	41		 inc	 ecx
  001a4	84 c0		 test	 al, al
  001a6	75 f9		 jne	 SHORT $LL427@GetArg
  001a8	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001aa	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  001ad	51		 push	 ecx
  001ae	50		 push	 eax
  001af	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  001b5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4293 :         _Mypair._Myval2._Mysize = 0;

  001ba	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001c4	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001ce	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR $T14[ebp], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  001d5	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+40], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001dc	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp+44], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001e3	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR $T14[ebp+24], 0

; 2145 :         if (_Large_string_engaged()) {

  001ea	83 bd 54 ff ff
	ff 10		 cmp	 DWORD PTR $T12[ebp+20], 16 ; 00000010H
  001f1	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  001f7	8b 9d 50 ff ff
	ff		 mov	 ebx, DWORD PTR $T12[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  001fd	0f 43 85 40 ff
	ff ff		 cmovae	 eax, DWORD PTR $T12[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 11   :         SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00204	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00208	89 85 14 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0020e	83 fb 0f	 cmp	 ebx, 15			; 0000000fH

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00211	77 21		 ja	 SHORT $LN99@GetArg

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00213	53		 push	 ebx
  00214	50		 push	 eax
  00215	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0021b	89 9d 68 ff ff
	ff		 mov	 DWORD PTR $T14[ebp+16], ebx

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _memmove
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0022a	c6 84 1d 58 ff
	ff ff 00	 mov	 BYTE PTR $T14[ebp+ebx], 0

; 2971 :             return *this;

  00232	eb 6f		 jmp	 SHORT $LN111@GetArg
$LN99@GetArg:

; 4221 :         if (_New_size > max_size()) {

  00234	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  0023a	0f 87 26 06 00
	00		 ja	 $LN417@GetArg

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00240	8b fb		 mov	 edi, ebx
  00242	83 cf 0f	 or	 edi, 15			; 0000000fH
  00245	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0024b	76 07		 jbe	 SHORT $LN116@GetArg

; 4203 :             return _Max;

  0024d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00252	eb 0b		 jmp	 SHORT $LN115@GetArg
$LN116@GetArg:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00254	83 ff 16	 cmp	 edi, 22			; 00000016H
  00257	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0025c	0f 42 f8	 cmovb	 edi, eax
$LN115@GetArg:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0025f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00268	53		 push	 ebx
  00269	ff b5 14 ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0026f	8b f0		 mov	 esi, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00271	89 9d 68 ff ff
	ff		 mov	 DWORD PTR $T14[ebp+16], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00277	56		 push	 esi

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00278	89 b5 18 ff ff
	ff		 mov	 DWORD PTR __New_ptr$8[ebp], esi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0027e	89 bd 6c ff ff
	ff		 mov	 DWORD PTR $T14[ebp+20], edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00284	e8 00 00 00 00	 call	 _memcpy

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00289	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR __New_ptr$8[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0028f	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00293	50		 push	 eax
  00294	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  002a0	83 c4 18	 add	 esp, 24			; 00000018H
$LN111@GetArg:

; 2145 :         if (_Large_string_engaged()) {

  002a3	83 bd 3c ff ff
	ff 10		 cmp	 DWORD PTR $T10[ebp+20], 16 ; 00000010H
  002aa	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  002b0	8b bd 38 ff ff
	ff		 mov	 edi, DWORD PTR $T10[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  002b6	0f 43 85 28 ff
	ff ff		 cmovae	 eax, DWORD PTR $T10[ebp]

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  002bd	8b 5d 84	 mov	 ebx, DWORD PTR $T14[ebp+44]

; 2145 :         if (_Large_string_engaged()) {

  002c0	89 85 18 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  002c6	3b fb		 cmp	 edi, ebx
  002c8	77 27		 ja	 SHORT $LN144@GetArg

; 2136 :         if (_Large_string_engaged()) {

  002ca	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  002cd	89 7d 80	 mov	 DWORD PTR $T14[ebp+40], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002d0	57		 push	 edi

; 2135 :         value_type* _Result = _Bx._Buf;

  002d1	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR $T14[ebp+24]

; 2136 :         if (_Large_string_engaged()) {

  002d7	0f 43 b5 70 ff
	ff ff		 cmovae	 esi, DWORD PTR $T14[ebp+24]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002de	50		 push	 eax
  002df	56		 push	 esi
  002e0	e8 00 00 00 00	 call	 _memmove
  002e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002e8	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 2971 :             return *this;

  002ec	e9 9f 00 00 00	 jmp	 $LN156@GetArg
$LN144@GetArg:

; 4221 :         if (_New_size > max_size()) {

  002f1	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  002f7	0f 87 69 05 00
	00		 ja	 $LN417@GetArg

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  002fd	8b f7		 mov	 esi, edi
  002ff	83 ce 0f	 or	 esi, 15			; 0000000fH
  00302	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00308	76 07		 jbe	 SHORT $LN161@GetArg

; 4203 :             return _Max;

  0030a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0030f	eb 1e		 jmp	 SHORT $LN160@GetArg
$LN161@GetArg:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00311	8b cb		 mov	 ecx, ebx
  00313	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00318	d1 e9		 shr	 ecx, 1
  0031a	2b c1		 sub	 eax, ecx
  0031c	3b d8		 cmp	 ebx, eax
  0031e	76 07		 jbe	 SHORT $LN162@GetArg

; 4207 :             return _Max;

  00320	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00325	eb 08		 jmp	 SHORT $LN160@GetArg
$LN162@GetArg:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00327	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  0032a	3b f0		 cmp	 esi, eax
  0032c	0f 42 f0	 cmovb	 esi, eax
$LN160@GetArg:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0032f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00338	57		 push	 edi
  00339	ff b5 18 ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0033f	89 85 14 ff ff
	ff		 mov	 DWORD PTR __New_ptr$4[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00345	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00346	89 7d 80	 mov	 DWORD PTR $T14[ebp+40], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00349	89 75 84	 mov	 DWORD PTR $T14[ebp+44], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0034c	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00351	8b b5 14 ff ff
	ff		 mov	 esi, DWORD PTR __New_ptr$4[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00357	83 c4 10	 add	 esp, 16			; 00000010H

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0035a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0035e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00361	72 17		 jb	 SHORT $LN155@GetArg

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00363	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00366	50		 push	 eax
  00367	ff b5 70 ff ff
	ff		 push	 DWORD PTR $T14[ebp+24]
  0036d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00372	89 b5 70 ff ff
	ff		 mov	 DWORD PTR $T14[ebp+24], esi

; 4236 :         } else {

  00378	eb 13		 jmp	 SHORT $LN435@GetArg
$LN155@GetArg:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0037a	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR __New_ptr$4[ebp]
  00380	50		 push	 eax
  00381	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp+24]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN435@GetArg:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  0038d	83 c4 08	 add	 esp, 8
$LN156@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 973  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00390	8b b5 08 ff ff
	ff		 mov	 esi, DWORD PTR _argList$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00396	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  0039a	81 7e 04 24 49
	92 04		 cmp	 DWORD PTR [esi+4], 76695844 ; 04924924H

; 973  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  003a1	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1014 :         if (_Mysize == max_size()) {

  003a3	0f 84 b3 04 00
	00		 je	 $LN418@GetArg
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  003a9	89 b5 fc fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  003af	6a 38		 push	 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  003b1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  003b5	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  003bf	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  003c4	8b f8		 mov	 edi, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  003c6	83 c4 04	 add	 esp, 4

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  003c9	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]

; 1048 :         _Ptr = _Al.allocate(1);

  003cf	89 bd 00 ff ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  003d5	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1019 :         ++_Mysize;

  003de	ff 46 04	 inc	 DWORD PTR [esi+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  003e1	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR __Insert_before$7[ebp]
  003e7	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  003ea	50		 push	 eax
  003eb	57		 push	 edi

; 1020 :         return _Op._Transfer_before(_Where);

  003ec	89 9d 18 ff ff
	ff		 mov	 DWORD PTR __Insert_before$7[ebp], ebx

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  003f2	89 b5 14 ff ff
	ff		 mov	 DWORD PTR __Insert_after$5[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  003f8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  003fd	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR __Insert_after$5[ebp]
  00403	50		 push	 eax
  00404	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00407	50		 push	 eax
  00408	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0040d	8b 45 84	 mov	 eax, DWORD PTR $T14[ebp+44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00410	83 c4 10	 add	 esp, 16			; 00000010H

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  00413	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00416	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 606  :         _Insert_after->_Next  = _Result;

  00420	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00422	83 f8 10	 cmp	 eax, 16			; 00000010H
  00425	72 10		 jb	 SHORT $LN221@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00427	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00428	50		 push	 eax
  00429	ff b5 70 ff ff
	ff		 push	 DWORD PTR $T14[ebp+24]
  0042f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00434	83 c4 08	 add	 esp, 8
$LN221@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00437	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T14[ebp+20]
  0043d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00440	72 10		 jb	 SHORT $LN231@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00442	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00443	50		 push	 eax
  00444	ff b5 58 ff ff
	ff		 push	 DWORD PTR $T14[ebp]
  0044a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0044f	83 c4 08	 add	 esp, 8
$LN231@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00452	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+20]
  00458	83 f8 10	 cmp	 eax, 16			; 00000010H
  0045b	72 10		 jb	 SHORT $LN241@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0045d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0045e	50		 push	 eax
  0045f	ff b5 40 ff ff
	ff		 push	 DWORD PTR $T12[ebp]
  00465	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0046a	83 c4 08	 add	 esp, 8
$LN241@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0046d	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T10[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00473	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0047a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0047d	72 10		 jb	 SHORT $LN251@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0047f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00480	50		 push	 eax
  00481	ff b5 28 ff ff
	ff		 push	 DWORD PTR $T10[ebp]
  00487	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0048c	83 c4 08	 add	 esp, 8
$LN251@GetArg:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 216  : 				iNameLen = 0;

  0048f	33 f6		 xor	 esi, esi

; 217  : 				iValueLen = 0;

  00491	33 ff		 xor	 edi, edi

; 218  : 			}

  00493	eb 79		 jmp	 SHORT $LN432@GetArg
$LN12@GetArg:

; 219  : 			else if (c == ';')

  00495	3c 3b		 cmp	 al, 59			; 0000003bH
  00497	75 09		 jne	 SHORT $LN15@GetArg

; 220  : 			{
; 221  : 				isValue = true;

  00499	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR _isValue$1$[ebp], 1

; 222  : 			}

  004a0	eb 6c		 jmp	 SHORT $LN432@GetArg
$LN15@GetArg:

; 223  : 			else if (!isValue && iNameLen == 0 && isspace((unsigned char) c))

  004a2	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR _isValue$1$[ebp]
  004a8	84 c9		 test	 cl, cl
  004aa	75 20		 jne	 SHORT $LN17@GetArg
  004ac	85 f6		 test	 esi, esi
  004ae	75 1c		 jne	 SHORT $LN17@GetArg
  004b0	0f b6 c0	 movzx	 eax, al
  004b3	50		 push	 eax
  004b4	e8 00 00 00 00	 call	 _isspace
  004b9	83 c4 04	 add	 esp, 4
  004bc	85 c0		 test	 eax, eax
  004be	75 4e		 jne	 SHORT $LN432@GetArg
  004c0	8a 85 1f ff ff
	ff		 mov	 al, BYTE PTR _c$1$[ebp]
  004c6	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR _isValue$1$[ebp]
$LN17@GetArg:

; 224  : 			{
; 225  : 			}
; 226  : 			else if (c == '\r' || c == '\n')

  004cc	3c 0d		 cmp	 al, 13			; 0000000dH
  004ce	74 3e		 je	 SHORT $LN432@GetArg
  004d0	3c 0a		 cmp	 al, 10			; 0000000aH
  004d2	74 3a		 je	 SHORT $LN432@GetArg

; 227  : 			{
; 228  : 			}
; 229  : 			else
; 230  : 			{
; 231  : 				if (isValue)

  004d4	84 c9		 test	 cl, cl
  004d6	74 1c		 je	 SHORT $LN22@GetArg

; 232  : 				{
; 233  : 					if (iValueLen >= 64)

  004d8	83 ff 40	 cmp	 edi, 64			; 00000040H
  004db	7d 69		 jge	 SHORT $LN419@GetArg

; 237  : 					}
; 238  : 
; 239  : 					memcpy(szValue+iValueLen, cur, iCharLen);

  004dd	8a 03		 mov	 al, BYTE PTR [ebx]
  004df	88 44 3d 88	 mov	 BYTE PTR _szValue$[ebp+edi], al

; 240  : 					iValueLen += iCharLen;

  004e3	47		 inc	 edi

; 241  : 					szValue[iValueLen]        = '\0';

  004e4	83 ff 41	 cmp	 edi, 65			; 00000041H
  004e7	0f 83 7e 03 00
	00		 jae	 $LN34@GetArg
  004ed	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 242  : 				}

  004f2	eb 1a		 jmp	 SHORT $LN432@GetArg
$LN22@GetArg:

; 243  : 				else
; 244  : 				{
; 245  : 					if (iNameLen >= 32)

  004f4	83 fe 20	 cmp	 esi, 32			; 00000020H
  004f7	7d 61		 jge	 SHORT $LN420@GetArg

; 249  : 					}
; 250  : 					memcpy(szName+iNameLen, cur, iCharLen);

  004f9	8a 03		 mov	 al, BYTE PTR [ebx]
  004fb	88 44 35 cc	 mov	 BYTE PTR _szName$[ebp+esi], al

; 251  : 					iNameLen += iCharLen;

  004ff	46		 inc	 esi

; 252  : 					szName[iNameLen]        = '\0';

  00500	83 fe 21	 cmp	 esi, 33			; 00000021H
  00503	0f 83 62 03 00
	00		 jae	 $LN34@GetArg
  00509	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0
$LN432@GetArg:

; 253  : 				}
; 254  : 			}
; 255  : 		}
; 256  : 		else
; 257  : 		{
; 258  : 			break;
; 259  : 		}
; 260  : 
; 261  : 		pos += iCharLen;

  0050e	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
$LN21@GetArg:
  00514	8b 9d 10 ff ff
	ff		 mov	 ebx, DWORD PTR _pos$1$[ebp]
  0051a	03 d8		 add	 ebx, eax
  0051c	89 9d 10 ff ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ebx
  00522	3b 5d 0c	 cmp	 ebx, DWORD PTR _arg_len$[ebp]
  00525	7d 47		 jge	 SHORT $LN425@GetArg

; 166  : 
; 167  :     while (pos < arg_len)

  00527	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _codePage$1$[ebp]
  0052d	e9 3e fb ff ff	 jmp	 $LL2@GetArg
$LN415@GetArg:

; 205  : 				{
; 206  : 					TraceError("no argument name");

  00532	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DGGADPCI@no?5argument?5name@
  00537	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0053c	83 c4 04	 add	 esp, 4

; 207  : 					return false;

  0053f	32 c0		 xor	 al, al
  00541	e9 f8 02 00 00	 jmp	 $LN1@GetArg
$LN419@GetArg:

; 234  : 					{
; 235  : 						TraceError("argument value overflow: must be shorter than 64 letters");

  00546	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
  0054b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00550	83 c4 04	 add	 esp, 4

; 236  : 						return false;

  00553	32 c0		 xor	 al, al
  00555	e9 e4 02 00 00	 jmp	 $LN1@GetArg
$LN420@GetArg:

; 246  : 					{
; 247  : 						TraceError("argument name overflow: must be shorter than 32 letters");

  0055a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
  0055f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00564	83 c4 04	 add	 esp, 4

; 248  : 						return false;

  00567	32 c0		 xor	 al, al
  00569	e9 d0 02 00 00	 jmp	 $LN1@GetArg
$LN425@GetArg:

; 262  :     }
; 263  : 
; 264  :     if (iNameLen != 0 && iValueLen != 0)

  0056e	85 f6		 test	 esi, esi
  00570	0f 84 c6 02 00
	00		 je	 $LN406@GetArg
  00576	85 ff		 test	 edi, edi
  00578	0f 84 be 02 00
	00		 je	 $LN406@GetArg

; 265  :     {
; 266  : 		iNameLen = LocaleString_RightTrim(szName, iNameLen);

  0057e	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00581	56		 push	 esi
  00582	50		 push	 eax
  00583	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 267  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  00588	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  0058b	57		 push	 edi
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00592	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00595	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 267  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0059f	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  005a2	c7 85 54 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  005ac	c6 85 40 ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005b3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL428@GetArg:
  005b6	8a 01		 mov	 al, BYTE PTR [ecx]
  005b8	41		 inc	 ecx
  005b9	84 c0		 test	 al, al
  005bb	75 f9		 jne	 SHORT $LL428@GetArg
  005bd	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005bf	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  005c2	51		 push	 ecx
  005c3	50		 push	 eax
  005c4	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  005ca	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005cf	8d 4d cc	 lea	 ecx, DWORD PTR _szName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 268  :         argList.push_back(TArg(szName, szValue));

  005d2	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  005d9	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005e3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  005e6	c7 85 3c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  005f0	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR $T9[ebp], 0
$LL429@GetArg:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005f7	8a 01		 mov	 al, BYTE PTR [ecx]
  005f9	41		 inc	 ecx
  005fa	84 c0		 test	 al, al
  005fc	75 f9		 jne	 SHORT $LL429@GetArg
  005fe	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00600	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00603	51		 push	 ecx
  00604	50		 push	 eax
  00605	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0060b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00610	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0061a	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00624	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0062b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+40], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00632	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T13[ebp+44], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00639	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR $T13[ebp+24], 0

; 2145 :         if (_Large_string_engaged()) {

  00640	83 bd 3c ff ff
	ff 10		 cmp	 DWORD PTR $T9[ebp+20], 16 ; 00000010H
  00647	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0064d	8b 9d 38 ff ff
	ff		 mov	 ebx, DWORD PTR $T9[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  00653	0f 43 85 28 ff
	ff ff		 cmovae	 eax, DWORD PTR $T9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 11   :         SArgumet(const std::string& c_stName, const std::string& c_stValue)

  0065a	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0065e	89 85 0c ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00664	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00667	77 21		 ja	 SHORT $LN314@GetArg

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00669	53		 push	 ebx
  0066a	50		 push	 eax
  0066b	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00671	89 9d 68 ff ff
	ff		 mov	 DWORD PTR $T13[ebp+16], ebx

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00677	50		 push	 eax
  00678	e8 00 00 00 00	 call	 _memmove
  0067d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00680	c6 84 1d 58 ff
	ff ff 00	 mov	 BYTE PTR $T13[ebp+ebx], 0

; 2971 :             return *this;

  00688	eb 6f		 jmp	 SHORT $LN326@GetArg
$LN314@GetArg:

; 4221 :         if (_New_size > max_size()) {

  0068a	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00690	0f 87 d0 01 00
	00		 ja	 $LN417@GetArg

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00696	8b fb		 mov	 edi, ebx
  00698	83 cf 0f	 or	 edi, 15			; 0000000fH
  0069b	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  006a1	76 07		 jbe	 SHORT $LN331@GetArg

; 4203 :             return _Max;

  006a3	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  006a8	eb 0b		 jmp	 SHORT $LN330@GetArg
$LN331@GetArg:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  006aa	83 ff 16	 cmp	 edi, 22			; 00000016H
  006ad	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  006b2	0f 42 f8	 cmovb	 edi, eax
$LN330@GetArg:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  006b5	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  006b8	50		 push	 eax
  006b9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  006be	53		 push	 ebx
  006bf	ff b5 0c ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  006c5	8b f0		 mov	 esi, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  006c7	89 9d 68 ff ff
	ff		 mov	 DWORD PTR $T13[ebp+16], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  006cd	56		 push	 esi

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  006ce	89 b5 18 ff ff
	ff		 mov	 DWORD PTR __New_ptr$6[ebp], esi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  006d4	89 bd 6c ff ff
	ff		 mov	 DWORD PTR $T13[ebp+20], edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  006da	e8 00 00 00 00	 call	 _memcpy

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  006df	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR __New_ptr$6[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  006e5	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  006e9	50		 push	 eax
  006ea	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  006f0	50		 push	 eax
  006f1	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  006f6	83 c4 18	 add	 esp, 24			; 00000018H
$LN326@GetArg:

; 2145 :         if (_Large_string_engaged()) {

  006f9	83 bd 54 ff ff
	ff 10		 cmp	 DWORD PTR $T11[ebp+20], 16 ; 00000010H
  00700	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00706	8b bd 50 ff ff
	ff		 mov	 edi, DWORD PTR $T11[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  0070c	0f 43 85 40 ff
	ff ff		 cmovae	 eax, DWORD PTR $T11[ebp]

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00713	8b 5d 84	 mov	 ebx, DWORD PTR $T13[ebp+44]

; 2145 :         if (_Large_string_engaged()) {

  00716	89 85 0c ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0071c	3b fb		 cmp	 edi, ebx
  0071e	77 27		 ja	 SHORT $LN359@GetArg

; 2136 :         if (_Large_string_engaged()) {

  00720	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00723	89 7d 80	 mov	 DWORD PTR $T13[ebp+40], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00726	57		 push	 edi

; 2135 :         value_type* _Result = _Bx._Buf;

  00727	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR $T13[ebp+24]

; 2136 :         if (_Large_string_engaged()) {

  0072d	0f 43 b5 70 ff
	ff ff		 cmovae	 esi, DWORD PTR $T13[ebp+24]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00734	50		 push	 eax
  00735	56		 push	 esi
  00736	e8 00 00 00 00	 call	 _memmove
  0073b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0073e	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 2971 :             return *this;

  00742	e9 9e 00 00 00	 jmp	 $LN371@GetArg
$LN359@GetArg:

; 4221 :         if (_New_size > max_size()) {

  00747	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0074d	0f 87 13 01 00
	00		 ja	 $LN417@GetArg

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00753	8b f7		 mov	 esi, edi
  00755	83 ce 0f	 or	 esi, 15			; 0000000fH
  00758	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0075e	76 07		 jbe	 SHORT $LN376@GetArg

; 4203 :             return _Max;

  00760	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00765	eb 1d		 jmp	 SHORT $LN375@GetArg
$LN376@GetArg:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00767	8b c3		 mov	 eax, ebx
  00769	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0076e	d1 e8		 shr	 eax, 1
  00770	2b c8		 sub	 ecx, eax
  00772	3b d9		 cmp	 ebx, ecx
  00774	76 07		 jbe	 SHORT $LN377@GetArg

; 4207 :             return _Max;

  00776	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0077b	eb 07		 jmp	 SHORT $LN375@GetArg
$LN377@GetArg:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0077d	03 c3		 add	 eax, ebx
  0077f	3b f0		 cmp	 esi, eax
  00781	0f 42 f0	 cmovb	 esi, eax
$LN375@GetArg:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00784	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00787	50		 push	 eax
  00788	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0078d	57		 push	 edi
  0078e	ff b5 0c ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00794	89 85 10 ff ff
	ff		 mov	 DWORD PTR __New_ptr$3[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0079a	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0079b	89 7d 80	 mov	 DWORD PTR $T13[ebp+40], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0079e	89 75 84	 mov	 DWORD PTR $T13[ebp+44], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  007a1	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  007a6	8b b5 10 ff ff
	ff		 mov	 esi, DWORD PTR __New_ptr$3[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  007ac	83 c4 10	 add	 esp, 16			; 00000010H

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  007af	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  007b3	83 fb 10	 cmp	 ebx, 16			; 00000010H
  007b6	72 17		 jb	 SHORT $LN370@GetArg

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  007b8	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007bb	50		 push	 eax
  007bc	ff b5 70 ff ff
	ff		 push	 DWORD PTR $T13[ebp+24]
  007c2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  007c7	89 b5 70 ff ff
	ff		 mov	 DWORD PTR $T13[ebp+24], esi

; 4236 :         } else {

  007cd	eb 13		 jmp	 SHORT $LN436@GetArg
$LN370@GetArg:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  007cf	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR __New_ptr$3[ebp]
  007d5	50		 push	 eax
  007d6	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp+24]
  007dc	50		 push	 eax
  007dd	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN436@GetArg:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 268  :         argList.push_back(TArg(szName, szValue));

  007e2	83 c4 08	 add	 esp, 8
$LN371@GetArg:
  007e5	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _argList$GSCopy$1$[ebp]
  007eb	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  007f1	50		 push	 eax
  007f2	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  007f6	e8 00 00 00 00	 call	 ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
  007fb	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00801	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00806	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T9[ebp+20]
  0080c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0080f	72 10		 jb	 SHORT $LN396@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00811	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00812	50		 push	 eax
  00813	ff b5 28 ff ff
	ff		 push	 DWORD PTR $T9[ebp]
  00819	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0081e	83 c4 08	 add	 esp, 8
$LN396@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00821	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T11[ebp+20]
  00827	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0082a	72 10		 jb	 SHORT $LN406@GetArg

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0082c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0082d	50		 push	 eax
  0082e	ff b5 40 ff ff
	ff		 push	 DWORD PTR $T11[ebp]
  00834	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00839	83 c4 08	 add	 esp, 8
$LN406@GetArg:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 271  :     return true;

  0083c	b0 01		 mov	 al, 1
$LN1@GetArg:

; 272  : }

  0083e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00841	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00848	59		 pop	 ecx
  00849	5f		 pop	 edi
  0084a	5e		 pop	 esi
  0084b	5b		 pop	 ebx
  0084c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0084f	33 cd		 xor	 ecx, ebp
  00851	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00856	8b e5		 mov	 esp, ebp
  00858	5d		 pop	 ebp
  00859	c2 0c 00	 ret	 12			; 0000000cH
$LN418@GetArg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1015 :             _Xlength_error("list too long");

  0085c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00861	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN417@GetArg:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 272  : }

  00866	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN34@GetArg:

; 252  : 					szName[iNameLen]        = '\0';

  0086b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN434@GetArg:
  00870	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1:
  0000b	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$6:
  00016	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$7:
  00021	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp+24]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2:
  0002c	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11:
  00037	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3:
  00042	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4:
  0004d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$18:
  00058	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19:
  00063	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp+24]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5:
  0006e	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
__ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z:
  0007e	90		 npad	 1
  0007f	90		 npad	 1
  00080	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00084	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00087	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  0008d	33 c8		 xor	 ecx, eax
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00097	33 c8		 xor	 ecx, eax
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  000a3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ENDP ; script::Group::GetArg
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?SetError@Group@script@@AAEXPBD@Z
_TEXT	SEGMENT
_c_pszError$ = 8					; size = 4
?SetError@Group@script@@AAEXPBD@Z PROC			; script::Group::SetError, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszError$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 431  : {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@SetError:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@SetError
  00017	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 433  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetError@Group@script@@AAEXPBD@Z ENDP			; script::Group::SetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; script::Group::GetError, COMDAT
; _this$ = ecx

; 427  :     return m_stError;

  00000	8b c1		 mov	 eax, ecx

; 428  : }

  00002	c3		 ret	 0
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; script::Group::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::ReadCmd, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1200 :         return _Mypair._Myval2._Mysize == 0;

  00003	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 418  :     if (m_cmdList.empty())

  00007	75 06		 jne	 SHORT $LN2@ReadCmd

; 419  :         return false;

  00009	32 c0		 xor	 al, al

; 423  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN2@ReadCmd:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1212 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0000f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00012	56		 push	 esi
  00013	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00014	8b 7d 08	 mov	 edi, DWORD PTR _cmd$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1212 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00017	8b 30		 mov	 esi, DWORD PTR [eax]
  00019	83 c6 08	 add	 esi, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  0001c	3b fe		 cmp	 edi, esi
  0001e	74 15		 je	 SHORT $LN11@ReadCmd

; 2153 :         return _BUF_SIZE <= _Myres;

  00020	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00024	8b c6		 mov	 eax, esi

; 2145 :         if (_Large_string_engaged()) {

  00026	72 02		 jb	 SHORT $LN16@ReadCmd

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@ReadCmd:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002a	ff 76 10	 push	 DWORD PTR [esi+16]
  0002d	8b cf		 mov	 ecx, edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN11@ReadCmd:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 47   : 			argList = c_cmd.argList;

  00035	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00038	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1084 :         if (this != _STD addressof(_Right)) {

  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 0a		 je	 SHORT $LN21@ReadCmd

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00041	8b 00		 mov	 eax, DWORD PTR [eax]

; 1293 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00043	50		 push	 eax
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN21@ReadCmd:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 422  :     return true;

  0004b	b0 01		 mov	 al, 1

; 423  : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::ReadCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::GetCmd, COMDAT
; _this$ = ecx

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1200 :         return _Mypair._Myval2._Mysize == 0;

  00006	83 7b 1c 00	 cmp	 DWORD PTR [ebx+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 408  :     if (m_cmdList.empty())

  0000a	75 07		 jne	 SHORT $LN2@GetCmd

; 409  :         return false;

  0000c	32 c0		 xor	 al, al
  0000e	5b		 pop	 ebx

; 414  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetCmd:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1212 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00013	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00016	56		 push	 esi
  00017	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00018	8b 7d 08	 mov	 edi, DWORD PTR _cmd$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1212 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0001b	8b 30		 mov	 esi, DWORD PTR [eax]
  0001d	83 c6 08	 add	 esi, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00020	3b fe		 cmp	 edi, esi
  00022	74 15		 je	 SHORT $LN11@GetCmd

; 2153 :         return _BUF_SIZE <= _Myres;

  00024	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00028	8b c6		 mov	 eax, esi

; 2145 :         if (_Large_string_engaged()) {

  0002a	72 02		 jb	 SHORT $LN16@GetCmd

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@GetCmd:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	ff 76 10	 push	 DWORD PTR [esi+16]
  00031	8b cf		 mov	 ecx, edi
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN11@GetCmd:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 47   : 			argList = c_cmd.argList;

  00039	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0003c	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1084 :         if (this != _STD addressof(_Right)) {

  0003f	3b c8		 cmp	 ecx, eax
  00041	74 0a		 je	 SHORT $LN21@GetCmd

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00043	8b 00		 mov	 eax, DWORD PTR [eax]

; 1293 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00045	50		 push	 eax
  00046	ff 30		 push	 DWORD PTR [eax]
  00048	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN21@GetCmd:

; 1248 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Next);

  0004d	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00050	8b 38		 mov	 edi, DWORD PTR [eax]
  00052	8d 77 20	 lea	 esi, DWORD PTR [edi+32]

; 1360 :         const auto _Result = _Pnode->_Next;

  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1361 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1362 :         --_Mypair._Myval2._Mysize;

  00057	ff 4b 1c	 dec	 DWORD PTR [ebx+28]

; 1363 :         _Pnode->_Prev->_Next = _Result;

  0005a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx

; 1364 :         _Result->_Prev       = _Pnode->_Prev;

  0005f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00065	ff 36		 push	 DWORD PTR [esi]
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0006d	6a 38		 push	 56			; 00000038H
  0006f	ff 36		 push	 DWORD PTR [esi]
  00071	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00076	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00079	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0007c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0007f	72 0d		 jb	 SHORT $LN61@GetCmd

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00081	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00082	50		 push	 eax
  00083	ff 77 08	 push	 DWORD PTR [edi+8]
  00086	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008b	83 c4 08	 add	 esp, 8
$LN61@GetCmd:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0008e	6a 28		 push	 40			; 00000028H
  00090	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00091	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00098	c7 47 1c 0f 00
	00 00		 mov	 DWORD PTR [edi+28], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009f	c6 47 08 00	 mov	 BYTE PTR [edi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  000a3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a8	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 413  :     return true;

  000ab	b0 01		 mov	 al, 1
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 414  : }

  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::GetCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -1204						; size = 8
__Op$3 = -1196						; size = 8
_str_len$1$ = -1184					; size = 4
tv4337 = -1180						; size = 4
_codePage$1$ = -1176					; size = 4
_this$GSCopy$1$ = -1172					; size = 4
__Result$2$ = -1168					; size = 4
__Insert_after$4 = -1168				; size = 4
__Insert_before$5 = -1168				; size = 4
__Result$1$ = -1164					; size = 4
$T6 = -1160						; size = 4
__Result$2$ = -1160					; size = 4
__Insert_before$7 = -1160				; size = 4
__New_ptr$8 = -1160					; size = 4
_str_pos$1$ = -1156					; size = 4
__Newhead$9 = -1156					; size = 4
__New_ptr$10 = -1152					; size = 4
__New_ptr$11 = -1152					; size = 4
__New_ptr$12 = -1152					; size = 4
__Insert_after$13 = -1152				; size = 4
__New_ptr$14 = -1152					; size = 4
$T15 = -1148						; size = 24
$T16 = -1148						; size = 24
$T17 = -1124						; size = 48
$T18 = -1124						; size = 48
_cmd$19 = -1076						; size = 32
_box_data$ = -1044					; size = 1025
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stSource$ = 8						; size = 4
?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; script::Group::Create, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 04 00
	00		 sub	 esp, 1192		; 000004a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d 6c fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00034	ff 71 18	 push	 DWORD PTR [ecx+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 276  : {

  00037	8b 45 08	 mov	 eax, DWORD PTR _stSource$[ebp]

; 277  : 	m_cmdList.clear();

  0003a	8d 59 18	 lea	 ebx, DWORD PTR [ecx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0003d	53		 push	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 276  : {

  0003e	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00044	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	83 c4 08	 add	 esp, 8
  0004e	89 00		 mov	 DWORD PTR [eax], eax

; 1431 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]
  00052	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1432 :         _My_data._Mysize        = 0;

  00055	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3764 :         return size() == 0;

  0005c	8b 9d 74 fb ff
	ff		 mov	 ebx, DWORD PTR __Result$1$[ebp]
  00062	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00065	89 b5 60 fb ff
	ff		 mov	 DWORD PTR _str_len$1$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 279  : 	if (stSource.empty())

  0006b	85 f6		 test	 esi, esi
  0006d	0f 84 c2 0a 00
	00		 je	 $LN403@Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00073	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00077	72 08		 jb	 SHORT $LN37@Create

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0007b	89 9d 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ebx
$LN37@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 283  :     if (!str_base || !*str_base)

  00081	85 db		 test	 ebx, ebx
  00083	0f 84 9f 0a 00
	00		 je	 $LN7@Create
  00089	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  0008c	0f 84 96 0a 00
	00		 je	 $LN7@Create

; 286  :         return false;//return true;//return false;
; 287  :     }
; 288  : 	int str_len = stSource.length();
; 289  : 	int str_pos = 0;

  00092	33 ff		 xor	 edi, edi

; 290  : 
; 291  : 	DWORD codePage = GetDefaultCodePage();

  00094	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 292  : 
; 293  :     char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  00099	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  000a6	89 85 68 fb ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], eax
  000ac	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000b5	3b 8a 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[edx]
  000bb	0f 8f 94 0a 00
	00		 jg	 $LN787@Create
  000c1	eb 06		 jmp	 SHORT $LN2@Create
$LN773@Create:

; 297  :     while (str_pos < str_len)

  000c3	8b 85 68 fb ff
	ff		 mov	 eax, DWORD PTR _codePage$1$[ebp]
$LN2@Create:
  000c9	85 f6		 test	 esi, esi
  000cb	0f 8e 53 0a 00
	00		 jle	 $LN725@Create
  000d1	0f b7 c0	 movzx	 eax, ax
  000d4	89 85 64 fb ff
	ff		 mov	 DWORD PTR tv4337[ebp], eax
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL3@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000e0	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000ea	c7 85 e0 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000f4	c6 85 cc fb ff
	ff 00		 mov	 BYTE PTR _cmd$19[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000fb	6a 38		 push	 56			; 00000038H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 37   : 		SCmd()

  000fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00104	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+24], 0
  0010e	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00118	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  0011d	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0011f	8d 85 7c fb ff
	ff		 lea	 eax, DWORD PTR __Newhead$9[ebp]
  00125	50		 push	 eax
  00126	56		 push	 esi
  00127	89 b5 7c fb ff
	ff		 mov	 DWORD PTR __Newhead$9[ebp], esi
  0012d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00132	8d 85 7c fb ff
	ff		 lea	 eax, DWORD PTR __Newhead$9[ebp]
  00138	50		 push	 eax
  00139	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * &>
  00142	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  00145	89 b5 e4 fb ff
	ff		 mov	 DWORD PTR _cmd$19[ebp+24], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 302  : 		const char* word_next = CharNextExA(codePage, word, 0);

  0014b	6a 00		 push	 0
  0014d	8d 34 3b	 lea	 esi, DWORD PTR [ebx+edi]
  00150	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00157	56		 push	 esi
  00158	ff b5 64 fb ff
	ff		 push	 DWORD PTR tv4337[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 303  : 
; 304  : 		int word_len = word_next - word;

  00164	2b c6		 sub	 eax, esi

; 305  : 
; 306  : 		if (word_len > 1)

  00166	83 f8 01	 cmp	 eax, 1
  00169	0f 8e 01 03 00
	00		 jle	 $LN8@Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3012 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0016f	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 308  : 			str_pos += word_len;

  00170	03 f8		 add	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3012 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00172	b9 00 00 00 00	 mov	 ecx, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00177	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 308  : 			str_pos += word_len;

  00178	89 bd 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3012 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0017e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00183	8b bd e0 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$19[ebp+20]
  00189	83 ff 06	 cmp	 edi, 6
  0018c	72 33		 jb	 SHORT $LN769@Create

; 2136 :         if (_Large_string_engaged()) {

  0018e	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00191	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+16], 6

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0019b	6a 06		 push	 6

; 2135 :         value_type* _Result = _Bx._Buf;

  0019d	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$19[ebp]

; 2136 :         if (_Large_string_engaged()) {

  001a3	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$19[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 _memmove
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001b8	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 2971 :             return *this;

  001bc	e9 90 00 00 00	 jmp	 $LN100@Create
$LN769@Create:

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001c1	8b cf		 mov	 ecx, edi

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001c3	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001c8	d1 e9		 shr	 ecx, 1

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001ca	2b c1		 sub	 eax, ecx
  001cc	3b f8		 cmp	 edi, eax
  001ce	76 07		 jbe	 SHORT $LN106@Create

; 4207 :             return _Max;

  001d0	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  001d5	eb 0d		 jmp	 SHORT $LN104@Create
$LN106@Create:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001d7	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  001da	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  001df	3b c6		 cmp	 eax, esi
  001e1	0f 47 f0	 cmova	 esi, eax
$LN104@Create:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001e4	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  001ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001f3	8b d8		 mov	 ebx, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  001f5	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+16], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001ff	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00202	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$19[ebp+20], esi
  00208	89 9d 80 fb ff
	ff		 mov	 DWORD PTR __New_ptr$14[ebp], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0020e	89 0b		 mov	 DWORD PTR [ebx], ecx
  00210	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  00217	66 89 4b 04	 mov	 WORD PTR [ebx+4], cx

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0021b	c6 43 06 00	 mov	 BYTE PTR [ebx+6], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0021f	83 ff 10	 cmp	 edi, 16			; 00000010H
  00222	72 17		 jb	 SHORT $LN99@Create

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00224	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00227	50		 push	 eax
  00228	ff b5 cc fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp]
  0022e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00233	89 9d cc fb ff
	ff		 mov	 DWORD PTR _cmd$19[ebp], ebx

; 4236 :         } else {

  00239	eb 13		 jmp	 SHORT $LN776@Create
$LN99@Create:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0023b	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR __New_ptr$14[ebp]
  00241	50		 push	 eax
  00242	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN776@Create:

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0024e	83 c4 08	 add	 esp, 8
$LN100@Create:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00251	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_05MFEJDJP@value@

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00257	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0025c	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05MFEJDJP@value@+4

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00261	be 05 00 00 00	 mov	 esi, 5

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00266	89 95 98 fb ff
	ff		 mov	 DWORD PTR $T16[ebp+20], edx

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0026c	89 b5 94 fb ff
	ff		 mov	 DWORD PTR $T16[ebp+16], esi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00272	89 8d 78 fb ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00278	89 8d 84 fb ff
	ff		 mov	 DWORD PTR $T16[ebp], ecx
  0027e	88 85 88 fb ff
	ff		 mov	 BYTE PTR $T16[ebp+4], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00284	c6 85 89 fb ff
	ff 00		 mov	 BYTE PTR $T16[ebp+5], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0028b	c7 85 ac fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00295	89 95 b0 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+20], edx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0029b	c6 85 9c fb ff
	ff 00		 mov	 BYTE PTR $T18[ebp], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  002a2	c7 85 c4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp+40], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002ac	89 95 c8 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+44], edx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002b2	c6 85 b4 fb ff
	ff 00		 mov	 BYTE PTR $T18[ebp+24], 0

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002b9	56		 push	 esi

; 2144 :         const value_type* _Result = _Bx._Buf;

  002ba	8d 9d 84 fb ff
	ff		 lea	 ebx, DWORD PTR $T16[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 11   :         SArgumet(const std::string& c_stName, const std::string& c_stValue)

  002c0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002c4	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  002ca	89 b5 ac fb ff
	ff		 mov	 DWORD PTR $T18[ebp+16], esi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002d0	53		 push	 ebx
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 _memmove

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002d7	c6 84 35 9c fb
	ff ff 00	 mov	 BYTE PTR $T18[ebp+esi], 0

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  002df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2145 :         if (_Large_string_engaged()) {

  002e2	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 16 ; 00000010H
  002e9	b8 00 00 00 00	 mov	 eax, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  002ee	8b 3d 10 00 00
	00		 mov	 edi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16

; 2145 :         if (_Large_string_engaged()) {

  002f4	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  002fb	8b 9d c8 fb ff
	ff		 mov	 ebx, DWORD PTR $T18[ebp+44]

; 2145 :         if (_Large_string_engaged()) {

  00301	89 85 70 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00307	3b fb		 cmp	 edi, ebx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00309	77 2a		 ja	 SHORT $LN244@Create

; 2136 :         if (_Large_string_engaged()) {

  0030b	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0030e	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+40], edi
  00314	57		 push	 edi

; 2135 :         value_type* _Result = _Bx._Buf;

  00315	8d b5 b4 fb ff
	ff		 lea	 esi, DWORD PTR $T18[ebp+24]

; 2136 :         if (_Large_string_engaged()) {

  0031b	0f 43 b5 b4 fb
	ff ff		 cmovae	 esi, DWORD PTR $T18[ebp+24]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00322	50		 push	 eax
  00323	56		 push	 esi
  00324	e8 00 00 00 00	 call	 _memmove
  00329	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0032c	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 2971 :             return *this;

  00330	e9 a5 00 00 00	 jmp	 $LN256@Create
$LN244@Create:

; 4221 :         if (_New_size > max_size()) {

  00335	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0033b	0f 87 54 08 00
	00		 ja	 $LN756@Create

; 4222 :             _Xlen_string(); // result too long
; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00341	8b f7		 mov	 esi, edi
  00343	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00346	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0034c	76 07		 jbe	 SHORT $LN261@Create

; 4203 :             return _Max;

  0034e	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00353	eb 1e		 jmp	 SHORT $LN260@Create
$LN261@Create:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00355	8b cb		 mov	 ecx, ebx
  00357	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0035c	d1 e9		 shr	 ecx, 1
  0035e	2b c1		 sub	 eax, ecx
  00360	3b d8		 cmp	 ebx, eax
  00362	76 07		 jbe	 SHORT $LN262@Create

; 4207 :             return _Max;

  00364	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00369	eb 08		 jmp	 SHORT $LN260@Create
$LN262@Create:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0036b	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  0036e	3b f0		 cmp	 esi, eax
  00370	0f 42 f0	 cmovb	 esi, eax
$LN260@Create:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00373	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0037c	57		 push	 edi
  0037d	ff b5 70 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00383	89 85 80 fb ff
	ff		 mov	 DWORD PTR __New_ptr$12[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00389	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0038a	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+40], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00390	89 b5 c8 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+44], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00396	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0039b	8b b5 80 fb ff
	ff		 mov	 esi, DWORD PTR __New_ptr$12[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  003a1	83 c4 10	 add	 esp, 16			; 00000010H

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  003a4	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  003a8	83 fb 10	 cmp	 ebx, 16			; 00000010H
  003ab	72 17		 jb	 SHORT $LN255@Create

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  003ad	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b0	50		 push	 eax
  003b1	ff b5 b4 fb ff
	ff		 push	 DWORD PTR $T18[ebp+24]
  003b7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  003bc	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR $T18[ebp+24], esi

; 4236 :         } else {

  003c2	eb 13		 jmp	 SHORT $LN777@Create
$LN255@Create:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  003c4	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR __New_ptr$12[ebp]
  003ca	50		 push	 eax
  003cb	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T18[ebp+24]
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN777@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  003d7	83 c4 08	 add	 esp, 8
$LN256@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  003da	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$19[ebp+28], 76695844 ; 04924924H

; 973  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  003e4	8b 9d e4 fb ff
	ff		 mov	 ebx, DWORD PTR _cmd$19[ebp+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  003ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  003ee	0f 84 97 07 00
	00		 je	 $LN757@Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  003f4	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  003fa	89 85 54 fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00400	6a 38		 push	 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00402	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00406	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00410	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  00415	8b f8		 mov	 edi, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00417	83 c4 04	 add	 esp, 4

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0041a	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]

; 1048 :         _Ptr = _Al.allocate(1);

  00420	89 bd 58 fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00426	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00429	50		 push	 eax
  0042a	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1019 :         ++_Mysize;

  0042f	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$19[ebp+28]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00435	8d 85 70 fb ff
	ff		 lea	 eax, DWORD PTR __Insert_before$5[ebp]
  0043b	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0043e	50		 push	 eax
  0043f	57		 push	 edi

; 1020 :         return _Op._Transfer_before(_Where);

  00440	89 9d 70 fb ff
	ff		 mov	 DWORD PTR __Insert_before$5[ebp], ebx

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  00446	89 b5 80 fb ff
	ff		 mov	 DWORD PTR __Insert_after$13[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0044c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00451	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR __Insert_after$13[ebp]
  00457	50		 push	 eax
  00458	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0045b	50		 push	 eax
  0045c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};

  00461	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 319  : 		}

  0046b	e9 52 05 00 00	 jmp	 $LN785@Create
$LN8@Create:

; 320  : 		else if (word_len == 1)

  00470	0f 85 71 06 00
	00		 jne	 $LN10@Create

; 321  : 		{
; 322  : 			const char cur = *word;

  00476	8a 1e		 mov	 bl, BYTE PTR [esi]

; 323  : 
; 324  : 			if ('[' == cur)

  00478	80 fb 5b	 cmp	 bl, 91			; 0000005bH
  0047b	0f 85 7d 01 00
	00		 jne	 $LN12@Create

; 325  : 			{
; 326  : 				++str_pos;
; 327  : 
; 328  : 				const char* box_begin = str_base + str_pos;
; 329  : 				const char* box_end = LocaleString_FindChar(box_begin, str_len - str_pos, ']');

  00481	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _str_len$1$[ebp]
  00487	47		 inc	 edi
  00488	89 bd 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
  0048e	8b 9d 7c fb ff
	ff		 mov	 ebx, DWORD PTR _str_pos$1$[ebp]
  00494	2b c3		 sub	 eax, ebx
  00496	03 bd 74 fb ff
	ff		 add	 edi, DWORD PTR __Result$1$[ebp]
  0049c	6a 5d		 push	 93			; 0000005dH
  0049e	50		 push	 eax
  0049f	57		 push	 edi
  004a0	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  004a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a8	8b f0		 mov	 esi, eax

; 330  : 				if (!box_end)

  004aa	57		 push	 edi
  004ab	85 f6		 test	 esi, esi
  004ad	0f 84 06 06 00
	00		 je	 $LN758@Create

; 333  : 					return false;
; 334  : 				}
; 335  : 				str_pos += box_end - box_begin + 1;

  004b3	8b ce		 mov	 ecx, esi
  004b5	43		 inc	 ebx
  004b6	2b cf		 sub	 ecx, edi
  004b8	03 d9		 add	 ebx, ecx
  004ba	89 9d 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], ebx

; 336  : 
; 337  : 
; 338  : 				int data_len = 0;
; 339  : 				{
; 340  : 					const char* data_begin = LocaleString_Skip(codePage, box_begin);

  004c0	8b 9d 68 fb ff
	ff		 mov	 ebx, DWORD PTR _codePage$1$[ebp]
  004c6	53		 push	 ebx
  004c7	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 341  : 					const char* data_end = box_end;
; 342  : 					data_len = data_end - data_begin;

  004cc	2b f0		 sub	 esi, eax
  004ce	83 c4 08	 add	 esp, 8

; 343  : 					if (data_len >= 1024)

  004d1	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  004d7	0f 8d 88 05 00
	00		 jge	 $LN759@Create

; 346  : 						return false;
; 347  : 					}
; 348  : 					memcpy(box_data, data_begin, data_len);

  004dd	56		 push	 esi
  004de	50		 push	 eax
  004df	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  004e5	50		 push	 eax
  004e6	e8 00 00 00 00	 call	 _memcpy
  004eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 349  : 					box_data[data_len] = '\0';

  004ee	81 fe 01 04 00
	00		 cmp	 esi, 1025		; 00000401H
  004f4	0f 83 a0 06 00
	00		 jae	 $LN23@Create

; 350  : 
; 351  : 					data_len = LocaleString_RightTrim(box_data, data_len);

  004fa	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00500	c6 84 35 ec fb
	ff ff 00	 mov	 BYTE PTR _box_data$[ebp+esi], 0
  00508	56		 push	 esi
  00509	50		 push	 eax
  0050a	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  0050f	8b f0		 mov	 esi, eax

; 352  : 				}
; 353  : 
; 354  : 				{
; 355  : 					const char* space = LocaleString_FindChar(box_data, data_len, ' ');

  00511	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00517	6a 20		 push	 32			; 00000020H
  00519	56		 push	 esi
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  00520	8b f8		 mov	 edi, eax
  00522	83 c4 14	 add	 esp, 20			; 00000014H

; 356  : 					if (space)

  00525	85 ff		 test	 edi, edi
  00527	74 60		 je	 SHORT $LN16@Create

; 357  : 					{
; 358  : 						int name_len = space - box_data;

  00529	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0052f	8b cf		 mov	 ecx, edi
  00531	2b c8		 sub	 ecx, eax

; 359  : 						cmd.name.assign(box_data, name_len);

  00533	51		 push	 ecx
  00534	50		 push	 eax
  00535	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$19[ebp]
  0053b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 360  : 
; 361  : 						const char* space_next = CharNextExA(codePage, space, 0);

  00540	6a 00		 push	 0
  00542	57		 push	 edi
  00543	ff b5 64 fb ff
	ff		 push	 DWORD PTR tv4337[ebp]
  00549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 362  : 						const char* arg = LocaleString_Skip(codePage, space_next);

  0054f	50		 push	 eax
  00550	53		 push	 ebx
  00551	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 363  : 
; 364  : 						int arg_len = data_len - (arg - box_data);
; 365  : 
; 366  : 						if (!GetArg(arg, arg_len, cmd.argList))

  00556	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0055c	8b f8		 mov	 edi, eax
  0055e	83 c4 08	 add	 esp, 8
  00561	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00567	2b f7		 sub	 esi, edi
  00569	03 f0		 add	 esi, eax
  0056b	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  00571	50		 push	 eax
  00572	56		 push	 esi
  00573	57		 push	 edi
  00574	e8 00 00 00 00	 call	 ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
  00579	84 c0		 test	 al, al
  0057b	75 61		 jne	 SHORT $LN414@Create

; 367  : 						{
; 368  : 							TraceError(" !! PARSING ERROR - Unknown Arguments : %d, %s\n", arg_len, arg);

  0057d	57		 push	 edi
  0057e	56		 push	 esi
  0057f	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00584	e9 e8 04 00 00	 jmp	 $LN781@Create
$LN16@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00589	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _box_data$[ebp]
  0058f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL772@Create:
  00592	8a 01		 mov	 al, BYTE PTR [ecx]
  00594	41		 inc	 ecx
  00595	84 c0		 test	 al, al
  00597	75 f9		 jne	 SHORT $LL772@Create
  00599	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0059b	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  005a1	51		 push	 ecx
  005a2	50		 push	 eax
  005a3	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$19[ebp]
  005a9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  005ae	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  005b4	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  005c0	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$19[ebp+24]
  005c6	83 c4 08	 add	 esp, 8
  005c9	89 00		 mov	 DWORD PTR [eax], eax

; 1431 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  005cb	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$19[ebp+24]
  005d1	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1432 :         _My_data._Mysize        = 0;

  005d4	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+28], 0
$LN414@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 401  :     }

  005de	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  005e4	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp]
  005ea	50		 push	 eax
  005eb	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  005ee	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
  005f3	8b bd 7c fb ff
	ff		 mov	 edi, DWORD PTR _str_pos$1$[ebp]
  005f9	e9 0c 04 00 00	 jmp	 $LN20@Create
$LN12@Create:

; 369  : 							return false;
; 370  : 						}
; 371  : 					}
; 372  : 					else
; 373  : 					{
; 374  : 						cmd.name.assign(box_data);
; 375  : 						cmd.argList.clear();
; 376  : 					}
; 377  : 
; 378  : 					m_cmdList.push_back(cmd);
; 379  : 				}
; 380  : 			}
; 381  : 			else if (cur == '\r' || cur == '\n')

  005fe	80 fb 0d	 cmp	 bl, 13			; 0000000dH
  00601	0f 84 02 04 00
	00		 je	 $LN21@Create
  00607	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  0060a	0f 84 f9 03 00
	00		 je	 $LN21@Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2988 :         if (_Count <= _Mypair._Myval2._Myres) {

  00610	8b 35 14 00 00
	00		 mov	 esi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 387  : 				++str_pos;

  00616	47		 inc	 edi
  00617	89 bd 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2988 :         if (_Count <= _Mypair._Myval2._Myres) {

  0061d	83 fe 01	 cmp	 esi, 1
  00620	72 31		 jb	 SHORT $LN416@Create

; 2136 :         if (_Large_string_engaged()) {

  00622	83 fe 10	 cmp	 esi, 16			; 00000010H

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00625	0f be cb	 movsx	 ecx, bl

; 2135 :         value_type* _Result = _Bx._Buf;

  00628	ba 00 00 00 00	 mov	 edx, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0062d	0f b6 c1	 movzx	 eax, cl

; 2136 :         if (_Large_string_engaged()) {

  00630	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00637	66 c1 e1 08	 shl	 cx, 8

; 2990 :             _Mypair._Myval2._Mysize = _Count;

  0063b	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00645	66 0b c8	 or	 cx, ax
  00648	88 0a		 mov	 BYTE PTR [edx], cl

; 2992 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0064a	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0

; 2993 :             return *this;

  0064e	e9 8d 00 00 00	 jmp	 $LN428@Create
$LN416@Create:

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00653	8b ce		 mov	 ecx, esi

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00655	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0065a	d1 e9		 shr	 ecx, 1

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0065c	2b c1		 sub	 eax, ecx
  0065e	3b f0		 cmp	 esi, eax
  00660	76 07		 jbe	 SHORT $LN434@Create

; 4207 :             return _Max;

  00662	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00667	eb 0d		 jmp	 SHORT $LN432@Create
$LN434@Create:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00669	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0066c	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00671	3b c7		 cmp	 eax, edi
  00673	0f 47 f8	 cmova	 edi, eax
$LN432@Create:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00676	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00679	50		 push	 eax
  0067a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0067f	0f be d3	 movsx	 edx, bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00682	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00685	0f b6 ca	 movzx	 ecx, dl
  00688	66 c1 e2 08	 shl	 dx, 8
  0068c	66 0b d1	 or	 dx, cx

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0068f	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00699	89 3d 14 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, edi

; 369  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0069f	88 10		 mov	 BYTE PTR [eax], dl

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  006a1	89 85 80 fb ff
	ff		 mov	 DWORD PTR __New_ptr$11[ebp], eax

; 3000 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  006a7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  006ab	83 fe 10	 cmp	 esi, 16			; 00000010H
  006ae	72 1c		 jb	 SHORT $LN427@Create

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  006b0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006b3	50		 push	 eax
  006b4	ff 35 00 00 00
	00		 push	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  006ba	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  006bf	8b 85 80 fb ff
	ff		 mov	 eax, DWORD PTR __New_ptr$11[ebp]
  006c5	a3 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, eax

; 4236 :         } else {

  006ca	eb 11		 jmp	 SHORT $LN778@Create
$LN427@Create:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  006cc	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR __New_ptr$11[ebp]
  006d2	50		 push	 eax
  006d3	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  006d8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN778@Create:

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  006dd	83 c4 08	 add	 esp, 8
$LN428@Create:
  006e0	8b bd e0 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$19[ebp+20]
  006e6	83 ff 06	 cmp	 edi, 6
  006e9	72 33		 jb	 SHORT $LN770@Create

; 2136 :         if (_Large_string_engaged()) {

  006eb	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  006ee	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+16], 6

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  006f8	6a 06		 push	 6

; 2135 :         value_type* _Result = _Bx._Buf;

  006fa	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$19[ebp]

; 2136 :         if (_Large_string_engaged()) {

  00700	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$19[ebp]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00707	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  0070c	56		 push	 esi
  0070d	e8 00 00 00 00	 call	 _memmove
  00712	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00715	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 2971 :             return *this;

  00719	e9 90 00 00 00	 jmp	 $LN464@Create
$LN770@Create:

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0071e	8b cf		 mov	 ecx, edi

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00720	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00725	d1 e9		 shr	 ecx, 1

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00727	2b c1		 sub	 eax, ecx
  00729	3b f8		 cmp	 edi, eax
  0072b	76 07		 jbe	 SHORT $LN470@Create

; 4207 :             return _Max;

  0072d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00732	eb 0d		 jmp	 SHORT $LN468@Create
$LN470@Create:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00734	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00737	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  0073c	3b c6		 cmp	 eax, esi
  0073e	0f 47 f0	 cmova	 esi, eax
$LN468@Create:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00741	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00744	50		 push	 eax
  00745	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0074a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00750	8b d8		 mov	 ebx, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00752	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$19[ebp+16], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0075c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0075f	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$19[ebp+20], esi
  00765	89 9d 78 fb ff
	ff		 mov	 DWORD PTR __New_ptr$8[ebp], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0076b	89 0b		 mov	 DWORD PTR [ebx], ecx
  0076d	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  00774	66 89 4b 04	 mov	 WORD PTR [ebx+4], cx

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00778	c6 43 06 00	 mov	 BYTE PTR [ebx+6], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0077c	83 ff 10	 cmp	 edi, 16			; 00000010H
  0077f	72 17		 jb	 SHORT $LN463@Create

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00781	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00784	50		 push	 eax
  00785	ff b5 cc fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp]
  0078b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00790	89 9d cc fb ff
	ff		 mov	 DWORD PTR _cmd$19[ebp], ebx

; 4236 :         } else {

  00796	eb 13		 jmp	 SHORT $LN779@Create
$LN463@Create:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00798	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR __New_ptr$8[ebp]
  0079e	50		 push	 eax
  0079f	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp]
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN779@Create:

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  007ab	83 c4 08	 add	 esp, 8
$LN464@Create:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  007ae	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05MFEJDJP@value@+4

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  007b3	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  007b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_05MFEJDJP@value@

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  007be	be 05 00 00 00	 mov	 esi, 5

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  007c3	89 95 98 fb ff
	ff		 mov	 DWORD PTR $T15[ebp+20], edx

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  007c9	89 b5 94 fb ff
	ff		 mov	 DWORD PTR $T15[ebp+16], esi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  007cf	89 8d 84 fb ff
	ff		 mov	 DWORD PTR $T15[ebp], ecx
  007d5	88 85 88 fb ff
	ff		 mov	 BYTE PTR $T15[ebp+4], al

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  007db	c6 85 89 fb ff
	ff 00		 mov	 BYTE PTR $T15[ebp+5], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  007e2	c7 85 ac fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  007ec	89 95 b0 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+20], edx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  007f2	c6 85 9c fb ff
	ff 00		 mov	 BYTE PTR $T17[ebp], 0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  007f9	c7 85 c4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+40], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00803	89 95 c8 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+44], edx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00809	c6 85 b4 fb ff
	ff 00		 mov	 BYTE PTR $T17[ebp+24], 0

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00810	56		 push	 esi

; 2144 :         const value_type* _Result = _Bx._Buf;

  00811	8d 9d 84 fb ff
	ff		 lea	 ebx, DWORD PTR $T15[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 11   :         SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00817	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0081b	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00821	89 b5 ac fb ff
	ff		 mov	 DWORD PTR $T17[ebp+16], esi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00827	53		 push	 ebx
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 _memmove

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0082e	c6 84 35 9c fb
	ff ff 00	 mov	 BYTE PTR $T17[ebp+esi], 0

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00836	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2145 :         if (_Large_string_engaged()) {

  00839	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 16 ; 00000010H
  00840	b8 00 00 00 00	 mov	 eax, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00845	8b 3d 10 00 00
	00		 mov	 edi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16

; 2145 :         if (_Large_string_engaged()) {

  0084b	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00852	8b 9d c8 fb ff
	ff		 mov	 ebx, DWORD PTR $T17[ebp+44]

; 2145 :         if (_Large_string_engaged()) {

  00858	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0085e	3b fb		 cmp	 edi, ebx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00860	77 2a		 ja	 SHORT $LN608@Create

; 2136 :         if (_Large_string_engaged()) {

  00862	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00865	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+40], edi
  0086b	57		 push	 edi

; 2135 :         value_type* _Result = _Bx._Buf;

  0086c	8d b5 b4 fb ff
	ff		 lea	 esi, DWORD PTR $T17[ebp+24]

; 2136 :         if (_Large_string_engaged()) {

  00872	0f 43 b5 b4 fb
	ff ff		 cmovae	 esi, DWORD PTR $T17[ebp+24]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00879	50		 push	 eax
  0087a	56		 push	 esi
  0087b	e8 00 00 00 00	 call	 _memmove
  00880	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00883	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 2971 :             return *this;

  00887	e9 a5 00 00 00	 jmp	 $LN620@Create
$LN608@Create:

; 4221 :         if (_New_size > max_size()) {

  0088c	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00892	0f 87 fd 02 00
	00		 ja	 $LN756@Create

; 4222 :             _Xlen_string(); // result too long
; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00898	8b f7		 mov	 esi, edi
  0089a	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0089d	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  008a3	76 07		 jbe	 SHORT $LN625@Create

; 4203 :             return _Max;

  008a5	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  008aa	eb 1e		 jmp	 SHORT $LN624@Create
$LN625@Create:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  008ac	8b cb		 mov	 ecx, ebx
  008ae	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  008b3	d1 e9		 shr	 ecx, 1
  008b5	2b c1		 sub	 eax, ecx
  008b7	3b d8		 cmp	 ebx, eax
  008b9	76 07		 jbe	 SHORT $LN626@Create

; 4207 :             return _Max;

  008bb	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  008c0	eb 08		 jmp	 SHORT $LN624@Create
$LN626@Create:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  008c2	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  008c5	3b f0		 cmp	 esi, eax
  008c7	0f 42 f0	 cmovb	 esi, eax
$LN624@Create:

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  008ca	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  008cd	50		 push	 eax
  008ce	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  008d3	57		 push	 edi
  008d4	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  008da	89 85 80 fb ff
	ff		 mov	 DWORD PTR __New_ptr$10[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  008e0	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  008e1	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+40], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  008e7	89 b5 c8 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+44], esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  008ed	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  008f2	8b b5 80 fb ff
	ff		 mov	 esi, DWORD PTR __New_ptr$10[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  008f8	83 c4 10	 add	 esp, 16			; 00000010H

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  008fb	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  008ff	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00902	72 17		 jb	 SHORT $LN619@Create

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00904	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00907	50		 push	 eax
  00908	ff b5 b4 fb ff
	ff		 push	 DWORD PTR $T17[ebp+24]
  0090e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00913	89 b5 b4 fb ff
	ff		 mov	 DWORD PTR $T17[ebp+24], esi

; 4236 :         } else {

  00919	eb 13		 jmp	 SHORT $LN780@Create
$LN619@Create:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0091b	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR __New_ptr$10[ebp]
  00921	50		 push	 eax
  00922	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T17[ebp+24]
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN780@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  0092e	83 c4 08	 add	 esp, 8
$LN620@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  00931	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$19[ebp+28], 76695844 ; 04924924H

; 973  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0093b	8b 9d e4 fb ff
	ff		 mov	 ebx, DWORD PTR _cmd$19[ebp+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  00941	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1014 :         if (_Mysize == max_size()) {

  00945	0f 84 40 02 00
	00		 je	 $LN757@Create
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0094b	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  00951	89 85 4c fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00957	6a 38		 push	 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00959	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0095d	c7 85 50 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00967	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  0096c	8b f8		 mov	 edi, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0096e	83 c4 04	 add	 esp, 4

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00971	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]

; 1048 :         _Ptr = _Al.allocate(1);

  00977	89 bd 50 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0097d	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00980	50		 push	 eax
  00981	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1019 :         ++_Mysize;

  00986	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$19[ebp+28]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0098c	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR __Insert_before$7[ebp]
  00992	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00995	50		 push	 eax
  00996	57		 push	 edi

; 1020 :         return _Op._Transfer_before(_Where);

  00997	89 9d 78 fb ff
	ff		 mov	 DWORD PTR __Insert_before$7[ebp], ebx

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  0099d	89 b5 70 fb ff
	ff		 mov	 DWORD PTR __Insert_after$4[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  009a3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  009a8	8d 85 70 fb ff
	ff		 lea	 eax, DWORD PTR __Insert_after$4[ebp]
  009ae	50		 push	 eax
  009af	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  009b2	50		 push	 eax
  009b3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};

  009b8	c7 85 50 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0
$LN785@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 401  :     }

  009c2	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR $T17[ebp+44]
  009c8	83 c4 10	 add	 esp, 16			; 00000010H
  009cb	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  009ce	89 3e		 mov	 DWORD PTR [esi], edi
  009d0	83 f8 10	 cmp	 eax, 16			; 00000010H
  009d3	72 10		 jb	 SHORT $LN684@Create
  009d5	40		 inc	 eax
  009d6	50		 push	 eax
  009d7	ff b5 b4 fb ff
	ff		 push	 DWORD PTR $T17[ebp+24]
  009dd	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  009e2	83 c4 08	 add	 esp, 8
$LN684@Create:
  009e5	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR $T17[ebp+20]
  009eb	83 f8 10	 cmp	 eax, 16			; 00000010H
  009ee	72 10		 jb	 SHORT $LN694@Create
  009f0	40		 inc	 eax
  009f1	50		 push	 eax
  009f2	ff b5 9c fb ff
	ff		 push	 DWORD PTR $T17[ebp]
  009f8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  009fd	83 c4 08	 add	 esp, 8
$LN694@Create:
  00a00	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00a04	e9 d5 fb ff ff	 jmp	 $LN414@Create
$LN21@Create:

; 382  : 			{
; 383  : 				++str_pos;

  00a09	47		 inc	 edi
$LN20@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a0a	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00a10	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 401  :     }

  00a16	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a1d	50		 push	 eax
  00a1e	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00a23	6a 38		 push	 56			; 00000038H
  00a25	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00a2b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00a30	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$19[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00a36	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00a39	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00a3c	72 10		 jb	 SHORT $LN746@Create

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00a3e	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a3f	50		 push	 eax
  00a40	ff b5 cc fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp]
  00a46	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00a4b	83 c4 08	 add	 esp, 8
$LN746@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 297  :     while (str_pos < str_len)

  00a4e	3b bd 60 fb ff
	ff		 cmp	 edi, DWORD PTR _str_len$1$[ebp]
  00a54	0f 8d ca 00 00
	00		 jge	 $LN725@Create
  00a5a	8b 9d 74 fb ff
	ff		 mov	 ebx, DWORD PTR __Result$1$[ebp]
  00a60	e9 7b f6 ff ff	 jmp	 $LL3@Create
$LN759@Create:

; 344  : 					{
; 345  : 						TraceError(" !! PARSING ERROR - Buffer Overflow : %d, %s\n", data_len, str_base);

  00a65	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00a6b	56		 push	 esi
  00a6c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
$LN781@Create:

; 404  : }

  00a71	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00a76	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00a7c	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  00a82	50		 push	 eax
  00a83	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00a88	6a 38		 push	 56			; 00000038H
  00a8a	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00a90	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00a95	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN782@Create:
  00a98	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$19[ebp+20]
  00a9e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00aa1	0f 82 8e 00 00
	00		 jb	 $LN403@Create
  00aa7	40		 inc	 eax
  00aa8	50		 push	 eax
  00aa9	ff b5 cc fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp]
  00aaf	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00ab4	83 c4 08	 add	 esp, 8
  00ab7	eb 7c		 jmp	 SHORT $LN403@Create
$LN758@Create:

; 331  : 				{
; 332  : 					TraceError(" !! PARSING ERROR - Syntax Error : %s\n", box_begin);

  00ab9	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
  00abe	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00ac3	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00ac9	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  00acf	50		 push	 eax
  00ad0	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00ad5	6a 38		 push	 56			; 00000038H
  00ad7	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00add	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00ae2	83 c4 18	 add	 esp, 24			; 00000018H

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ae5	eb b1		 jmp	 SHORT $LN782@Create
$LN10@Create:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00ae7	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00aed	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$19[ebp+24]
  00af3	50		 push	 eax
  00af4	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00af9	6a 38		 push	 56			; 00000038H
  00afb	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp+24]
  00b01	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00b06	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$19[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00b0c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00b0f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00b12	72 10		 jb	 SHORT $LN725@Create

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00b14	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00b15	50		 push	 eax
  00b16	ff b5 cc fb ff
	ff		 push	 DWORD PTR _cmd$19[ebp]
  00b1c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00b21	83 c4 08	 add	 esp, 8
$LN725@Create:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 403  :     return true;

  00b24	b0 01		 mov	 al, 1
  00b26	eb 0f		 jmp	 SHORT $LN1@Create
$LN7@Create:

; 284  :     {
; 285  :         TraceError("Source file has no content");

  00b28	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
  00b2d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00b32	83 c4 04	 add	 esp, 4
$LN403@Create:

; 404  : }

  00b35	32 c0		 xor	 al, al
$LN1@Create:
  00b37	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b3a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b41	59		 pop	 ecx
  00b42	5f		 pop	 edi
  00b43	5e		 pop	 esi
  00b44	5b		 pop	 ebx
  00b45	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b48	33 cd		 xor	 ecx, ebp
  00b4a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b4f	8b e5		 mov	 esp, ebp
  00b51	5d		 pop	 ebp
  00b52	c2 04 00	 ret	 4
$LN787@Create:

; 292  : 
; 293  :     char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  00b55	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00b5a	e8 00 00 00 00	 call	 __Init_thread_header
  00b5f	83 c4 04	 add	 esp, 4
  00b62	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  00b69	0f 85 54 f5 ff
	ff		 jne	 $LN773@Create
  00b6f	68 00 00 00 00	 push	 OFFSET ??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
  00b74	e8 00 00 00 00	 call	 _atexit
  00b79	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00b7e	e8 00 00 00 00	 call	 __Init_thread_footer
  00b83	83 c4 08	 add	 esp, 8
  00b86	e9 38 f5 ff ff	 jmp	 $LN773@Create
$LN757@Create:

; 404  : }

  00b8b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00b90	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN756@Create:
  00b95	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN23@Create:

; 349  : 					box_data[data_len] = '\0';

  00b9a	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN775@Create:
  00b9f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$6:
  00000	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$19[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  0000b	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$19[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SCmd@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00016	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$9:
  00021	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$10:
  0002c	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp+24]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00037	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$14:
  00042	8d 8d 54 fb ff
	ff		 lea	 ecx, DWORD PTR __Op$3[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  0004d	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$26:
  00058	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$27:
  00063	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp+24]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  0006e	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$31:
  00079	8d 8d 4c fb ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
  00088	cc		 int	 3
__ehhandler$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00089	90		 npad	 1
  0008a	90		 npad	 1
  0008b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0008f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00092	8b 8a 48 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1208]
  00098	33 c8		 xor	 ecx, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a2	33 c8		 xor	 ecx, eax
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  000ae	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; script::Group::Create
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ??1Group@script@@QAE@XZ
_TEXT	SEGMENT
??1Group@script@@QAE@XZ PROC				; script::Group::~Group, COMDAT
; _this$ = ecx

; 440  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00004	ff 77 18	 push	 DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 441  : }

  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00010	6a 28		 push	 40			; 00000028H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0001f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00022	72 0c		 jb	 SHORT $LN15@Group

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00024	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00025	50		 push	 eax
  00026	ff 37		 push	 DWORD PTR [edi]
  00028	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002d	83 c4 08	 add	 esp, 8
$LN15@Group:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00030	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00037	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003e	c6 07 00	 mov	 BYTE PTR [edi], 0
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 441  : }

  00043	c3		 ret	 0
??1Group@script@@QAE@XZ ENDP				; script::Group::~Group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp
;	COMDAT ??0Group@script@@QAE@XZ
_TEXT	SEGMENT
__Newhead$2 = -16					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Group@script@@QAE@XZ PROC				; script::Group::Group, COMDAT
; _this$ = ecx

; 436  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Group@script@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0002a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00031	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00038	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003b	6a 28		 push	 40			; 00000028H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 436  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00044	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0004b	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00052	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  00057	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00059	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	89 75 f0	 mov	 DWORD PTR __Newhead$2[ebp], esi
  00061	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00066	8d 45 f0	 lea	 eax, DWORD PTR __Newhead$2[ebp]
  00069	50		 push	 eax
  0006a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USCmd@script@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USCmd@script@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<script::SCmd,void *> *,std::_List_node<script::SCmd,void *> * &>
  00073	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  00076	89 77 18	 mov	 DWORD PTR [edi+24], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.cpp

; 437  : }

  00079	8b c7		 mov	 eax, edi
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Group@script@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Group@script@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Group@script@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Group@script@@QAE@XZ ENDP				; script::Group::Group
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1SCmd@script@@QAE@XZ
_TEXT	SEGMENT
??1SCmd@script@@QAE@XZ PROC				; script::SCmd::~SCmd, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	ff 77 18	 push	 DWORD PTR [edi+24]
  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00010	6a 38		 push	 56			; 00000038H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0001f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00022	72 0c		 jb	 SHORT $LN15@SCmd

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00024	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00025	50		 push	 eax
  00026	ff 37		 push	 DWORD PTR [edi]
  00028	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002d	83 c4 08	 add	 esp, 8
$LN15@SCmd:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00030	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00037	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003e	c6 07 00	 mov	 BYTE PTR [edi], 0
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c3		 ret	 0
??1SCmd@script@@QAE@XZ ENDP				; script::SCmd::~SCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >, COMDAT
; _this$ = ecx

; 1045 :     ~list() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	56		 push	 esi
  00006	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0000b	6a 38		 push	 56			; 00000038H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 10	 add	 esp, 16			; 00000010H
  00017	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1051 :     }

  00018	c3		 ret	 0
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list
;	COMDAT ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__Insert_after$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Insert_before$ = 8					; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back, COMDAT
; _this$ = ecx

; 972  :     void push_back(_Ty&& _Val) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 1014 :         if (_Mysize == max_size()) {

  0002a	81 7e 04 24 49
	92 04		 cmp	 DWORD PTR [esi+4], 76695844 ; 04924924H

; 973  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00031	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1014 :         if (_Mysize == max_size()) {

  00033	74 6a		 je	 SHORT $LN40@push_back
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00035	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00038	6a 38		 push	 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00048	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004d	83 c4 04	 add	 esp, 4

; 1048 :         _Ptr = _Al.allocate(1);

  00050	8b f8		 mov	 edi, eax
  00052	89 7d f0	 mov	 DWORD PTR __Op$2[ebp+4], edi

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00055	ff 75 08	 push	 DWORD PTR __Val$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00058	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0005b	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list

; 1019 :         ++_Mysize;

  00060	ff 46 04	 inc	 DWORD PTR [esi+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00063	8d 45 08	 lea	 eax, DWORD PTR __Insert_before$[ebp]
  00066	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00069	50		 push	 eax
  0006a	57		 push	 edi

; 1020 :         return _Op._Transfer_before(_Where);

  0006b	89 5d 08	 mov	 DWORD PTR __Insert_before$[ebp], ebx

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  0006e	89 75 f0	 mov	 DWORD PTR __Insert_after$3[ebp], esi

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00076	8d 45 f0	 lea	 eax, DWORD PTR __Insert_after$3[ebp]
  00079	50		 push	 eax
  0007a	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@USArgumet@script@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USArgumet@script@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<script::SArgumet,void *> *,std::_List_node<script::SArgumet,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  00083	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 606  :         _Insert_after->_Next  = _Result;

  00089	89 3e		 mov	 DWORD PTR [esi], edi

; 974  :     }

  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN40@push_back:

; 1015 :             _Xlength_error("list too long");

  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  000a4	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN38@push_back:
  000a9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1SArgumet@script@@QAE@XZ
_TEXT	SEGMENT
??1SArgumet@script@@QAE@XZ PROC				; script::SArgumet::~SArgumet, COMDAT
; _this$ = ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0d		 jb	 SHORT $LN7@SArgumet

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 76 18	 push	 DWORD PTR [esi+24]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8
$LN7@SArgumet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00018	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001f	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00026	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00030	72 0c		 jb	 SHORT $LN17@SArgumet

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00032	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00033	50		 push	 eax
  00034	ff 36		 push	 DWORD PTR [esi]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003b	83 c4 08	 add	 esp, 8
$LN17@SArgumet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004f	5e		 pop	 esi
  00050	c3		 ret	 0
??1SArgumet@script@@QAE@XZ ENDP				; script::SArgumet::~SArgumet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_arg$ = 8						; size = 4
??0SArgumet@script@@QAE@ABU01@@Z PROC			; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 16   : 		SArgumet(const SArgumet& c_arg)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0002b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00032	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00039	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 16   : 		SArgumet(const SArgumet& c_arg)

  0003c	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00046	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004d	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00054	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 2785 :         if (this != _STD addressof(_Right)) {

  00057	8b 7d 08	 mov	 edi, DWORD PTR _c_arg$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 16   : 		SArgumet(const SArgumet& c_arg)

  0005a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  0005e	3b f7		 cmp	 esi, edi
  00060	74 15		 je	 SHORT $LN24@SArgumet

; 2153 :         return _BUF_SIZE <= _Myres;

  00062	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00066	8b c7		 mov	 eax, edi

; 2145 :         if (_Large_string_engaged()) {

  00068	72 02		 jb	 SHORT $LN29@SArgumet

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
$LN29@SArgumet:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006c	ff 77 10	 push	 DWORD PTR [edi+16]
  0006f	8b ce		 mov	 ecx, esi
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN24@SArgumet:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 19   : 			strValue = c_arg.strValue;

  00077	83 c7 18	 add	 edi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  0007a	3b df		 cmp	 ebx, edi
  0007c	74 15		 je	 SHORT $LN43@SArgumet

; 2153 :         return _BUF_SIZE <= _Myres;

  0007e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00082	8b c7		 mov	 eax, edi

; 2145 :         if (_Large_string_engaged()) {

  00084	72 02		 jb	 SHORT $LN39@SArgumet

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00086	8b 07		 mov	 eax, DWORD PTR [edi]
$LN39@SArgumet:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00088	ff 77 10	 push	 DWORD PTR [edi+16]
  0008b	8b cb		 mov	 ecx, ebx
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN43@SArgumet:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\parser.h

; 20   : 		}

  00093	8b c6		 mov	 eax, esi
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABU01@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABU01@@Z ENDP			; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
