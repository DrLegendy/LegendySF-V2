; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CGraphicIndexBuffer@@QAE@XZ			; CGraphicIndexBuffer::CGraphicIndexBuffer
PUBLIC	??1CGraphicIndexBuffer@@UAE@XZ			; CGraphicIndexBuffer::~CGraphicIndexBuffer
PUBLIC	?Destroy@CGraphicIndexBuffer@@QAEXXZ		; CGraphicIndexBuffer::Destroy
PUBLIC	?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
PUBLIC	?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z	; CGraphicIndexBuffer::Create
PUBLIC	?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ; CGraphicIndexBuffer::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::DestroyDeviceObjects
PUBLIC	?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z		; CGraphicIndexBuffer::Copy
PUBLIC	?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z		; CGraphicIndexBuffer::Lock
PUBLIC	?Unlock@CGraphicIndexBuffer@@QBEXXZ		; CGraphicIndexBuffer::Unlock
PUBLIC	?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z		; CGraphicIndexBuffer::Lock
PUBLIC	?Unlock@CGraphicIndexBuffer@@QAEXXZ		; CGraphicIndexBuffer::Unlock
PUBLIC	?SetIndices@CGraphicIndexBuffer@@QBEXH@Z	; CGraphicIndexBuffer::SetIndices
PUBLIC	?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ ; CGraphicIndexBuffer::GetD3DIndexBuffer
PUBLIC	?Initialize@CGraphicIndexBuffer@@IAEXXZ		; CGraphicIndexBuffer::Initialize
PUBLIC	??_GCGraphicIndexBuffer@@UAEPAXI@Z		; CGraphicIndexBuffer::`scalar deleting destructor'
PUBLIC	??_7CGraphicIndexBuffer@@6B@			; CGraphicIndexBuffer::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_R4CGraphicIndexBuffer@@6B@			; CGraphicIndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicIndexBuffer@@@8			; CGraphicIndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicIndexBuffer@@8			; CGraphicIndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicIndexBuffer@@8			; CGraphicIndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicIndexBuffer@@8		; CGraphicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECGraphicIndexBuffer@@UAEPAXI@Z:PROC		; CGraphicIndexBuffer::`vector deleting destructor'
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicIndexBuffer@@8 DD FLAT:??_R0?AVCGraphicIndexBuffer@@@8 ; CGraphicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R2CGraphicIndexBuffer@@8 DD FLAT:??_R1A@?0A@EA@CGraphicIndexBuffer@@8 ; CGraphicIndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R3CGraphicIndexBuffer@@8 DD 00H			; CGraphicIndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicIndexBuffer@@@8
data$r	SEGMENT
??_R0?AVCGraphicIndexBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicIndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicIndexBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicIndexBuffer@@6B@
rdata$r	SEGMENT
??_R4CGraphicIndexBuffer@@6B@ DD 00H			; CGraphicIndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicIndexBuffer@@@8
	DD	FLAT:??_R3CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7CGraphicIndexBuffer@@6B@
CONST	SEGMENT
??_7CGraphicIndexBuffer@@6B@ DD FLAT:??_R4CGraphicIndexBuffer@@6B@ ; CGraphicIndexBuffer::`vftable'
	DD	FLAT:??_ECGraphicIndexBuffer@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicIndexBuffer@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicIndexBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicIndexBuffer@@UAEPAXI@Z PROC			; CGraphicIndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicIndexBuffer@@UAE@XZ ; CGraphicIndexBuffer::~CGraphicIndexBuffer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicIndexBuffer@@UAEPAXI@Z ENDP			; CGraphicIndexBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Initialize@CGraphicIndexBuffer@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicIndexBuffer@@IAEXXZ PROC		; CGraphicIndexBuffer::Initialize, COMDAT
; _this$ = ecx

; 128  : 	m_lpd3dIdxBuf=NULL;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 129  : }

  00007	c3		 ret	 0
?Initialize@CGraphicIndexBuffer@@IAEXXZ ENDP		; CGraphicIndexBuffer::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ
_TEXT	SEGMENT
?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ PROC ; CGraphicIndexBuffer::GetD3DIndexBuffer, COMDAT
; _this$ = ecx

; 8    : 	assert(m_lpd3dIdxBuf!=NULL);
; 9    : 	return m_lpd3dIdxBuf;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 10   : }

  00003	c3		 ret	 0
?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ ENDP ; CGraphicIndexBuffer::GetD3DIndexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?SetIndices@CGraphicIndexBuffer@@QBEXH@Z
_TEXT	SEGMENT
_startIndex$ = 8					; size = 4
?SetIndices@CGraphicIndexBuffer@@QBEXH@Z PROC		; CGraphicIndexBuffer::SetIndices, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 14   : 	assert(ms_lpd3dDevice!=NULL);
; 15   : 	STATEMANAGER.SetIndices(m_lpd3dIdxBuf, startIndex);

  00003	ff 75 08	 push	 DWORD PTR _startIndex$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000f	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 16   : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetIndices@CGraphicIndexBuffer@@QBEXH@Z ENDP		; CGraphicIndexBuffer::SetIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Unlock@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
?Unlock@CGraphicIndexBuffer@@QAEXXZ PROC		; CGraphicIndexBuffer::Unlock, COMDAT
; _this$ = ecx

; 48   : 	assert(m_lpd3dIdxBuf!=NULL);
; 49   : 
; 50   : 	m_lpd3dIdxBuf->Unlock();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	ff 51 30	 call	 DWORD PTR [ecx+48]

; 51   : }

  00009	c3		 ret	 0
?Unlock@CGraphicIndexBuffer@@QAEXXZ ENDP		; CGraphicIndexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z
_TEXT	SEGMENT
_pretIndices$ = 8					; size = 4
?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z PROC		; CGraphicIndexBuffer::Lock, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	assert(m_lpd3dIdxBuf!=NULL);
; 39   : 
; 40   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)pretIndices, 0)))

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR _pretIndices$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	ff 51 2c	 call	 DWORD PTR [ecx+44]
  00015	85 c0		 test	 eax, eax
  00017	0f 99 c0	 setns	 al

; 41   : 		return false;
; 42   : 
; 43   : 	return true;
; 44   : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z ENDP		; CGraphicIndexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Unlock@CGraphicIndexBuffer@@QBEXXZ
_TEXT	SEGMENT
?Unlock@CGraphicIndexBuffer@@QBEXXZ PROC		; CGraphicIndexBuffer::Unlock, COMDAT
; _this$ = ecx

; 31   : 	assert(m_lpd3dIdxBuf!=NULL);
; 32   : 
; 33   : 	m_lpd3dIdxBuf->Unlock();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	ff 51 30	 call	 DWORD PTR [ecx+48]

; 34   : }

  00009	c3		 ret	 0
?Unlock@CGraphicIndexBuffer@@QBEXXZ ENDP		; CGraphicIndexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z
_TEXT	SEGMENT
_pretIndices$ = 8					; size = 4
?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z PROC		; CGraphicIndexBuffer::Lock, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 	assert(m_lpd3dIdxBuf!=NULL);
; 22   : 
; 23   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)pretIndices, 0)))

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR _pretIndices$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	ff 51 2c	 call	 DWORD PTR [ecx+44]
  00015	85 c0		 test	 eax, eax
  00017	0f 99 c0	 setns	 al

; 24   : 		return false;
; 25   : 
; 26   : 	return true;
; 27   : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z ENDP		; CGraphicIndexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z
_TEXT	SEGMENT
_dstIndices$ = -4					; size = 4
_bufSize$ = 8						; size = 4
_srcIndices$ = 12					; size = 4
?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z PROC		; CGraphicIndexBuffer::Copy, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 55   : 	assert(m_lpd3dIdxBuf!=NULL);
; 56   : 
; 57   : 	BYTE* dstIndices;
; 58   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, &dstIndices, 0)))

  00007	8d 4d fc	 lea	 ecx, DWORD PTR _dstIndices$[ebp]
  0000a	6a 00		 push	 0
  0000c	51		 push	 ecx
  0000d	6a 00		 push	 0
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	6a 00		 push	 0
  00014	50		 push	 eax
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	ff 52 2c	 call	 DWORD PTR [edx+44]
  0001a	85 c0		 test	 eax, eax
  0001c	79 09		 jns	 SHORT $LN2@Copy

; 59   : 		return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 66   : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN2@Copy:

; 60   : 
; 61   : 	memcpy(dstIndices, srcIndices, bufSize);

  00027	ff 75 08	 push	 DWORD PTR _bufSize$[ebp]
  0002a	ff 75 0c	 push	 DWORD PTR _srcIndices$[ebp]
  0002d	ff 75 fc	 push	 DWORD PTR _dstIndices$[ebp]
  00030	e8 00 00 00 00	 call	 _memcpy

; 62   : 
; 63   : 	m_lpd3dIdxBuf->Unlock();

  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	50		 push	 eax
  0003e	ff 51 30	 call	 DWORD PTR [ecx+48]

; 64   : 
; 65   : 	return true;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 66   : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z ENDP		; CGraphicIndexBuffer::Copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ PROC	; CGraphicIndexBuffer::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 106  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 138  : 	if (!rpObject)

  00003	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@DestroyDev

; 139  : 		return;
; 140  : 
; 141  : 	rpObject->Release();

  0000a	8b 02		 mov	 eax, DWORD PTR [edx]
  0000c	52		 push	 edx
  0000d	ff 50 08	 call	 DWORD PTR [eax+8]

; 142  : 	rpObject = NULL;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@DestroyDev:
  00017	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp

; 108  : }

  00018	c3		 ret	 0
?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ENDP	; CGraphicIndexBuffer::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ PROC	; CGraphicIndexBuffer::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 93   : 	if (FAILED(ms_lpd3dDevice->CreateIndexBuffer(

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	6a 01		 push	 1
  0000d	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00010	8b 32		 mov	 esi, DWORD PTR [edx]
  00012	6a 08		 push	 8
  00014	ff 71 08	 push	 DWORD PTR [ecx+8]
  00017	52		 push	 edx
  00018	ff 56 60	 call	 DWORD PTR [esi+96]
  0001b	85 c0		 test	 eax, eax
  0001d	5e		 pop	 esi
  0001e	0f 99 c0	 setns	 al

; 94   : 		m_dwBufferSize,
; 95   : 		D3DUSAGE_WRITEONLY,
; 96   : 		m_d3dFmt,
; 97   : 		D3DPOOL_MANAGED,
; 98   : 		&m_lpd3dIdxBuf)
; 99   : 		))
; 100  : 		return false;
; 101  : 
; 102  : 	return true;
; 103  : }

  00021	c3		 ret	 0
?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ENDP	; CGraphicIndexBuffer::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z
_TEXT	SEGMENT
_dstIndices$ = 8					; size = 4
_faceCount$ = 8						; size = 4
_faces$ = 12						; size = 4
?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z PROC	; CGraphicIndexBuffer::Create, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 70   : 	int idxCount = faceCount * 3;

  00004	8b 75 08	 mov	 esi, DWORD PTR _faceCount$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 71   : 	m_iidxCount = idxCount;
; 72   : 	if (!Create(idxCount, D3DFMT_INDEX16))

  0000a	6a 65		 push	 101			; 00000065H
  0000c	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0000f	50		 push	 eax
  00010	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00013	e8 00 00 00 00	 call	 ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
  00018	84 c0		 test	 al, al
  0001a	74 63		 je	 SHORT $LN12@Create

; 73   : 		return false;
; 74   : 
; 75   : 	WORD* dstIndices;
; 76   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)&dstIndices, 0)))

  0001c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001f	8d 55 08	 lea	 edx, DWORD PTR _dstIndices$[ebp]
  00022	6a 00		 push	 0
  00024	52		 push	 edx
  00025	6a 00		 push	 0
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	ff 51 2c	 call	 DWORD PTR [ecx+44]
  0002f	85 c0		 test	 eax, eax
  00031	78 4c		 js	 SHORT $LN12@Create

; 78   : 
; 79   : 	for (int i = 0; i<faceCount; ++i, dstIndices+=3)

  00033	85 f6		 test	 esi, esi
  00035	7e 37		 jle	 SHORT $LN3@Create
  00037	8b 55 0c	 mov	 edx, DWORD PTR _faces$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _dstIndices$[ebp]
  0003d	83 c2 04	 add	 edx, 4
$LL4@Create:

; 80   : 	{
; 81   : 		TFace * curFace=faces+i;
; 82   : 		dstIndices[0]=curFace->indices[0];

  00040	66 8b 42 fc	 mov	 ax, WORD PTR [edx-4]
  00044	8d 52 06	 lea	 edx, DWORD PTR [edx+6]
  00047	66 89 01	 mov	 WORD PTR [ecx], ax

; 83   : 		dstIndices[1]=curFace->indices[1];

  0004a	8b 45 08	 mov	 eax, DWORD PTR _dstIndices$[ebp]
  0004d	0f b7 4a f8	 movzx	 ecx, WORD PTR [edx-8]
  00051	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 84   : 		dstIndices[2]=curFace->indices[2];

  00055	8b 45 08	 mov	 eax, DWORD PTR _dstIndices$[ebp]
  00058	0f b7 4a fa	 movzx	 ecx, WORD PTR [edx-6]
  0005c	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _dstIndices$[ebp]
  00063	83 c1 06	 add	 ecx, 6
  00066	89 4d 08	 mov	 DWORD PTR _dstIndices$[ebp], ecx
  00069	83 ee 01	 sub	 esi, 1
  0006c	75 d2		 jne	 SHORT $LL4@Create
$LN3@Create:

; 85   : 	}
; 86   : 
; 87   : 	m_lpd3dIdxBuf->Unlock();

  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	50		 push	 eax
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	ff 51 30	 call	 DWORD PTR [ecx+48]
  00077	5f		 pop	 edi

; 88   : 	return true;

  00078	b0 01		 mov	 al, 1

; 89   : }

  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN12@Create:
  0007f	5f		 pop	 edi

; 77   : 		return false;

  00080	32 c0		 xor	 al, al

; 89   : }

  00082	5e		 pop	 esi
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z ENDP	; CGraphicIndexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_idxCount$ = 8						; size = 4
_d3dFmt$ = 12						; size = 4
?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z PROC ; CGraphicIndexBuffer::Create, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 112  : 	Destroy();

  00006	e8 00 00 00 00	 call	 ?Destroy@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Destroy

; 113  : 
; 114  : 	m_iidxCount = idxCount;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _idxCount$[ebp]

; 115  : 	m_dwBufferSize = sizeof(WORD) * idxCount;
; 116  : 	m_d3dFmt = d3dFmt;
; 117  : 
; 118  : 	return CreateDeviceObjects();

  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00013	03 c0		 add	 eax, eax
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	8b 45 0c	 mov	 eax, DWORD PTR _d3dFmt$[ebp]
  0001b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001e	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ; CGraphicIndexBuffer::CreateDeviceObjects
  00023	5e		 pop	 esi

; 119  : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ENDP ; CGraphicIndexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Destroy@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicIndexBuffer@@QAEXXZ PROC		; CGraphicIndexBuffer::Destroy, COMDAT
; _this$ = ecx

; 123  : 	DestroyDeviceObjects();

  00000	e9 00 00 00 00	 jmp	 ?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::DestroyDeviceObjects
?Destroy@CGraphicIndexBuffer@@QAEXXZ ENDP		; CGraphicIndexBuffer::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ??1CGraphicIndexBuffer@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicIndexBuffer@@UAE@XZ PROC			; CGraphicIndexBuffer::~CGraphicIndexBuffer, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicIndexBuffer@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicIndexBuffer@@6B@

; 138  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Destroy

; 139  : }

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicIndexBuffer@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicIndexBuffer@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicIndexBuffer@@UAE@XZ ENDP			; CGraphicIndexBuffer::~CGraphicIndexBuffer
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ??0CGraphicIndexBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGraphicIndexBuffer@@QAE@XZ PROC			; CGraphicIndexBuffer::CGraphicIndexBuffer, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase

; 133  : 	Initialize();

  0000f	8b ce		 mov	 ecx, esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicIndexBuffer@@6B@
  00017	e8 00 00 00 00	 call	 ?Initialize@CGraphicIndexBuffer@@IAEXXZ ; CGraphicIndexBuffer::Initialize

; 134  : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CGraphicIndexBuffer@@QAE@XZ ENDP			; CGraphicIndexBuffer::CGraphicIndexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
