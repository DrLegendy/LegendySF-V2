; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA	; D3D_CDeviceInfo::msc_aszD3DDevDesc
PUBLIC	?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B ; D3D_CDeviceInfo::msc_aeD3DDevType
PUBLIC	??_C@_03KNIPLHMP@HAL@				; `string'
PUBLIC	??_C@_03GPMNEAGC@REF@				; `string'
;	COMDAT ??_C@_03GPMNEAGC@REF@
CONST	SEGMENT
??_C@_03GPMNEAGC@REF@ DB 'REF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNIPLHMP@HAL@
CONST	SEGMENT
??_C@_03KNIPLHMP@HAL@ DB 'HAL', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B DD 01H ; D3D_CDeviceInfo::msc_aeD3DDevType
	DD	02H
CONST	ENDS
_DATA	SEGMENT
?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA DD FLAT:??_C@_03KNIPLHMP@HAL@ ; D3D_CDeviceInfo::msc_aszD3DDevDesc
	DD	FLAT:??_C@_03GPMNEAGC@REF@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_SModeInfo::GetString
PUBLIC	?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D8@@W4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::Build
PUBLIC	?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
PUBLIC	?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
PUBLIC	?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ; D3D_CAdapterDisplayModeList::GetDisplayModer
PUBLIC	?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr
PUBLIC	??0D3D_CDeviceInfo@@QAE@XZ			; D3D_CDeviceInfo::D3D_CDeviceInfo
PUBLIC	??1D3D_CDeviceInfo@@QAE@XZ			; D3D_CDeviceInfo::~D3D_CDeviceInfo
PUBLIC	?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDeviceInfo::Build
PUBLIC	?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z		; D3D_CDeviceInfo::Find
PUBLIC	?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ	; D3D_CDeviceInfo::GetD3DModeInfoNum
PUBLIC	?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDeviceInfo::GetString
PUBLIC	?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ; D3D_CDeviceInfo::FindDepthStencilFormat
PUBLIC	?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop
PUBLIC	??0D3D_CAdapterInfo@@QAE@XZ			; D3D_CAdapterInfo::D3D_CAdapterInfo
PUBLIC	??1D3D_CAdapterInfo@@QAE@XZ			; D3D_CAdapterInfo::~D3D_CAdapterInfo
PUBLIC	?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z		; D3D_CAdapterInfo::Find
PUBLIC	?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D8@@IP6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CAdapterInfo::Build
PUBLIC	?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CAdapterInfo::GetString
PUBLIC	?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
PUBLIC	?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep
PUBLIC	?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop
PUBLIC	?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z ; D3D_CAdapterInfo::GetD3DModeInfop
PUBLIC	??0D3D_CDisplayModeAutoDetector@@QAE@XZ		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
PUBLIC	??1D3D_CDisplayModeAutoDetector@@QAE@XZ		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
PUBLIC	?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z ; D3D_CDisplayModeAutoDetector::Find
PUBLIC	?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDisplayModeAutoDetector::Build
PUBLIC	?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
PUBLIC	?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop
PUBLIC	?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDisplayModeAutoDetector::GetString
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN@			; `string'
PUBLIC	??_C@_04NFAOCDCH@HWVP@				; `string'
PUBLIC	??_C@_04EFINLMAB@MXVP@				; `string'
PUBLIC	??_C@_04MCDOIFLE@SWVP@				; `string'
PUBLIC	??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@ ; `string'
PUBLIC	??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_04CDOPIHIK@?$CFd?4?5@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@		; `string'
PUBLIC	??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@		; `string'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_qsort:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@
CONST	SEGMENT
??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@ DB 'Adapter %d', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@
CONST	SEGMENT
??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@ DB 'Device %d', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CDOPIHIK@?$CFd?4?5@
CONST	SEGMENT
??_C@_04CDOPIHIK@?$CFd?4?5@ DB '%d. ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '%'
	DB	's', 0dH, 0aH, '========================================', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@
CONST	SEGMENT
??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@ DB '%dx%dx%d %s', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCDOIFLE@SWVP@
CONST	SEGMENT
??_C@_04MCDOIFLE@SWVP@ DB 'SWVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFINLMAB@MXVP@
CONST	SEGMENT
??_C@_04EFINLMAB@MXVP@ DB 'MXVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFAOCDCH@HWVP@
CONST	SEGMENT
??_C@_04NFAOCDCH@HWVP@ DB 'HWVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA
_DATA	SEGMENT
?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA DD FLAT:??_C@_07NFANNNEC@UNKNOWN@ ; `D3D_SModeInfo::GetString'::`2'::szVP
	DD	FLAT:??_C@_04NFAOCDCH@HWVP@
	DD	FLAT:??_C@_04EFINLMAB@MXVP@
	DD	FLAT:??_C@_04MCDOIFLE@SWVP@
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1D3D_CDisplayModeAutoDetector@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1D3D_CAdapterInfo@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?CompareD3DDisplayModeOrder@@YAHPBX0@Z
_TEXT	SEGMENT
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
?CompareD3DDisplayModeOrder@@YAHPBX0@Z PROC		; CompareD3DDisplayModeOrder, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   :     D3DDISPLAYMODE* p1 = (D3DDISPLAYMODE*)arg1;
; 31   :     D3DDISPLAYMODE* p2 = (D3DDISPLAYMODE*)arg2;
; 32   : 
; 33   :     if( p1->Format > p2->Format )   return -1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _arg1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _arg2$[ebp]
  00009	56		 push	 esi
  0000a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0000d	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00010	7f 23		 jg	 SHORT $LN10@CompareD3D

; 34   :     if( p1->Format < p2->Format )   return +1;

  00012	7c 19		 jl	 SHORT $LN9@CompareD3D

; 35   :     if( p1->Width  < p2->Width )    return -1;

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00018	72 1b		 jb	 SHORT $LN10@CompareD3D

; 36   :     if( p1->Width  > p2->Width )    return +1;

  0001a	77 11		 ja	 SHORT $LN9@CompareD3D

; 37   :     if( p1->Height < p2->Height )   return -1;

  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	3b c1		 cmp	 eax, ecx
  00024	72 0f		 jb	 SHORT $LN10@CompareD3D

; 38   :     if( p1->Height > p2->Height )   return +1;

  00026	77 05		 ja	 SHORT $LN9@CompareD3D

; 39   : 
; 40   :     return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	5e		 pop	 esi

; 41   : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN9@CompareD3D:

; 38   :     if( p1->Height > p2->Height )   return +1;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	5e		 pop	 esi

; 41   : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN10@CompareD3D:

; 37   :     if( p1->Height < p2->Height )   return -1;

  00035	83 c8 ff	 or	 eax, -1
  00038	5e		 pop	 esi

; 41   : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?CompareD3DDisplayModeOrder@@YAHPBX0@Z ENDP		; CompareD3DDisplayModeOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv147 = -1036						; size = 4
_szText$1 = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CDisplayModeAutoDetector::GetString, COMDAT
; _this$ = ecx

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pstEnumList$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx

; 638  : 	for (UINT iD3DAdapterInfo=0; iD3DAdapterInfo<m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  0001b	33 f6		 xor	 esi, esi
  0001d	8d 87 70 19 03
	00		 lea	 eax, DWORD PTR [edi+203120]
  00023	89 85 f4 fb ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
  00029	39 30		 cmp	 DWORD PTR [eax], esi
  0002b	76 57		 jbe	 SHORT $LN3@GetString
  0002d	0f 1f 00	 npad	 3
$LL4@GetString:

; 641  : 		_snprintf(szText, sizeof(szText), "Adapter %d\r\n", iD3DAdapterInfo);

  00030	56		 push	 esi
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@
  00036	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0003c	68 01 04 00 00	 push	 1025			; 00000401H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 641  : 		_snprintf(szText, sizeof(szText), "Adapter %d\r\n", iD3DAdapterInfo);

  0004d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00050	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL14@GetString:
  00053	8a 08		 mov	 cl, BYTE PTR [eax]
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f9		 jne	 SHORT $LL14@GetString
  0005a	2b c2		 sub	 eax, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005c	8b cb		 mov	 ecx, ebx
  0005e	50		 push	 eax
  0005f	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 645  : 		rkAdapterInfo.GetString(pstEnumList);

  0006b	53		 push	 ebx
  0006c	8b cf		 mov	 ecx, edi
  0006e	e8 00 00 00 00	 call	 ?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CAdapterInfo::GetString
  00073	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  00079	46		 inc	 esi
  0007a	81 c7 58 4f 00
	00		 add	 edi, 20312		; 00004f58H
  00080	3b 30		 cmp	 esi, DWORD PTR [eax]
  00082	72 ac		 jb	 SHORT $LL4@GetString
$LN3@GetString:

; 646  : 	}
; 647  : }

  00084	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	33 cd		 xor	 ecx, ebp
  0008b	5b		 pop	 ebx
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CDisplayModeAutoDetector::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z
_TEXT	SEGMENT
_iD3DAdapterInfo$ = 8					; size = 4
_iD3DDevInfo$ = 12					; size = 4
_iD3D_SModeInfo$ = 16					; size = 4
?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z PROC ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 	D3D_CAdapterInfo* pkD3DAdapterInfo=GetD3DAdapterInfop(iD3DAdapterInfo);

  00003	ff 75 08	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop

; 589  : 	if (pkD3DAdapterInfo)

  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN4@GetD3DMode

; 590  : 	{
; 591  : 		D3D_CDeviceInfo* pkD3DDevInfo=pkD3DAdapterInfo->GetD3DDeviceInfop(iD3DDevInfo);

  0000f	ff 75 0c	 push	 DWORD PTR _iD3DDevInfo$[ebp]
  00012	8b c8		 mov	 ecx, eax
  00014	e8 00 00 00 00	 call	 ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop

; 592  : 		if (pkD3DDevInfo)

  00019	85 c0		 test	 eax, eax
  0001b	74 0e		 je	 SHORT $LN4@GetD3DMode

; 593  : 		{
; 594  : 			D3D_SModeInfo* pkD3D_SModeInfo=pkD3DDevInfo->GetD3DModeInfop(iD3D_SModeInfo);

  0001d	ff 75 10	 push	 DWORD PTR _iD3D_SModeInfo$[ebp]
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop

; 595  : 			if (pkD3D_SModeInfo)

  00027	85 c0		 test	 eax, eax
  00029	75 02		 jne	 SHORT $LN1@GetD3DMode
$LN4@GetD3DMode:

; 596  : 				return pkD3D_SModeInfo;
; 597  : 		}
; 598  : 	}
; 599  : 	return NULL;

  0002b	33 c0		 xor	 eax, eax
$LN1@GetD3DMode:

; 600  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z ENDP ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z
_TEXT	SEGMENT
_iD3DAdapterInfo$ = 8					; size = 4
?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z PROC ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop, COMDAT
; _this$ = ecx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 580  : 	if (iD3DAdapterInfo >= m_uD3DAdapterInfoCount)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DAdapterInfo$[ebp]
  00006	3b 81 70 19 03
	00		 cmp	 eax, DWORD PTR [ecx+203120]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DAdap

; 581  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 584  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DAdap:

; 582  : 
; 583  : 	return &m_akD3DAdapterInfo[iD3DAdapterInfo];

  00014	69 c0 58 4f 00
	00		 imul	 eax, eax, 20312
  0001a	03 c1		 add	 eax, ecx

; 584  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ENDP ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
_rkD3D$ = 8						; size = 4
_pfnConfirmDevice$ = 12					; size = 4
?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CDisplayModeAutoDetector::Build, COMDAT
; _this$ = ecx

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 618  : 	m_uD3DAdapterInfoCount=0;
; 619  : 
; 620  : 	UINT uTotalAdapterCount=rkD3D.GetAdapterCount();

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _rkD3D$[ebp]
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	c7 86 70 19 03
	00 00 00 00 00	 mov	 DWORD PTR [esi+203120], 0
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	ff 50 10	 call	 DWORD PTR [eax+16]

; 621  : 	uTotalAdapterCount=min(uTotalAdapterCount, D3DADAPTERINFO_NUM);

  0001b	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  00020	3b c3		 cmp	 eax, ebx
  00022	0f 42 d8	 cmovb	 ebx, eax
  00025	33 ff		 xor	 edi, edi

; 622  : 
; 623  : 	for (UINT iD3DAdapterInfo=0; iD3DAdapterInfo<uTotalAdapterCount; ++iD3DAdapterInfo)

  00027	85 db		 test	 ebx, ebx
  00029	74 40		 je	 SHORT $LN12@Build
  0002b	8b 86 70 19 03
	00		 mov	 eax, DWORD PTR [esi+203120]
$LL4@Build:

; 624  : 	{
; 625  : 		D3D_CAdapterInfo& rkAdapterInfo=m_akD3DAdapterInfo[m_uD3DAdapterInfoCount];
; 626  : 		if (rkAdapterInfo.Build(rkD3D, iD3DAdapterInfo, pfnConfirmDevice))

  00031	ff 75 0c	 push	 DWORD PTR _pfnConfirmDevice$[ebp]
  00034	69 c8 58 4f 00
	00		 imul	 ecx, eax, 20312
  0003a	57		 push	 edi
  0003b	ff 75 08	 push	 DWORD PTR _rkD3D$[ebp]
  0003e	03 ce		 add	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D8@@IP6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CAdapterInfo::Build
  00045	85 c0		 test	 eax, eax
  00047	74 06		 je	 SHORT $LN11@Build

; 627  : 			++m_uD3DAdapterInfoCount;

  00049	ff 86 70 19 03
	00		 inc	 DWORD PTR [esi+203120]
$LN11@Build:

; 622  : 
; 623  : 	for (UINT iD3DAdapterInfo=0; iD3DAdapterInfo<uTotalAdapterCount; ++iD3DAdapterInfo)

  0004f	8b 86 70 19 03
	00		 mov	 eax, DWORD PTR [esi+203120]
  00055	47		 inc	 edi
  00056	8b c8		 mov	 ecx, eax
  00058	3b fb		 cmp	 edi, ebx
  0005a	72 d5		 jb	 SHORT $LL4@Build

; 628  : 	}
; 629  : 
; 630  : 	if (m_uD3DAdapterInfoCount>0)

  0005c	33 c0		 xor	 eax, eax
  0005e	3b c1		 cmp	 eax, ecx
  00060	5f		 pop	 edi
  00061	1b c0		 sbb	 eax, eax
  00063	5e		 pop	 esi
  00064	f7 d8		 neg	 eax
  00066	5b		 pop	 ebx

; 631  : 		return TRUE;
; 632  : 
; 633  : 	return FALSE;
; 634  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN12@Build:
  0006b	8b 8e 70 19 03
	00		 mov	 ecx, DWORD PTR [esi+203120]

; 628  : 	}
; 629  : 
; 630  : 	if (m_uD3DAdapterInfoCount>0)

  00071	33 c0		 xor	 eax, eax
  00073	3b c1		 cmp	 eax, ecx
  00075	5f		 pop	 edi
  00076	1b c0		 sbb	 eax, eax
  00078	5e		 pop	 esi
  00079	f7 d8		 neg	 eax
  0007b	5b		 pop	 ebx

; 631  : 		return TRUE;
; 632  : 
; 633  : 	return FALSE;
; 634  : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CDisplayModeAutoDetector::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
_piD3DDevInfo$ = 28					; size = 4
_piD3DAdapterInfo$ = 32					; size = 4
?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z PROC ; D3D_CDisplayModeAutoDetector::Find, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 604  : 	for (UINT iD3DAdapterInfo=0; iD3DAdapterInfo<m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  00008	33 f6		 xor	 esi, esi
  0000a	39 b7 70 19 03
	00		 cmp	 DWORD PTR [edi+203120], esi
  00010	8d 9f 70 19 03
	00		 lea	 ebx, DWORD PTR [edi+203120]
  00016	76 28		 jbe	 SHORT $LN3@Find
$LL4@Find:

; 605  : 	{
; 606  : 		D3D_CAdapterInfo& rkAdapterInfo=m_akD3DAdapterInfo[iD3DAdapterInfo];
; 607  : 		if (rkAdapterInfo.Find(uScrWidth, uScrHeight, uScrDepthBits, isWindowed, piD3DModeInfo, piD3DDevInfo))

  00018	ff 75 1c	 push	 DWORD PTR _piD3DDevInfo$[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	ff 75 18	 push	 DWORD PTR _piD3DModeInfo$[ebp]
  00020	ff 75 14	 push	 DWORD PTR _isWindowed$[ebp]
  00023	ff 75 10	 push	 DWORD PTR _uScrDepthBits$[ebp]
  00026	ff 75 0c	 push	 DWORD PTR _uScrHeight$[ebp]
  00029	ff 75 08	 push	 DWORD PTR _uScrWidth$[ebp]
  0002c	e8 00 00 00 00	 call	 ?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z ; D3D_CAdapterInfo::Find
  00031	85 c0		 test	 eax, eax
  00033	75 14		 jne	 SHORT $LN8@Find

; 604  : 	for (UINT iD3DAdapterInfo=0; iD3DAdapterInfo<m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  00035	46		 inc	 esi
  00036	81 c7 58 4f 00
	00		 add	 edi, 20312		; 00004f58H
  0003c	3b 33		 cmp	 esi, DWORD PTR [ebx]
  0003e	72 d8		 jb	 SHORT $LL4@Find
$LN3@Find:
  00040	5f		 pop	 edi

; 611  : 		}
; 612  : 	}
; 613  : 	return FALSE;
; 614  : }

  00041	5e		 pop	 esi
  00042	33 c0		 xor	 eax, eax
  00044	5b		 pop	 ebx
  00045	5d		 pop	 ebp
  00046	c2 1c 00	 ret	 28			; 0000001cH
$LN8@Find:

; 608  : 		{
; 609  : 			*piD3DAdapterInfo=iD3DAdapterInfo;

  00049	8b 45 20	 mov	 eax, DWORD PTR _piD3DAdapterInfo$[ebp]
  0004c	5f		 pop	 edi
  0004d	89 30		 mov	 DWORD PTR [eax], esi

; 610  : 			return TRUE;

  0004f	b8 01 00 00 00	 mov	 eax, 1

; 611  : 		}
; 612  : 	}
; 613  : 	return FALSE;
; 614  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 1c 00	 ret	 28			; 0000001cH
?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z ENDP ; D3D_CDisplayModeAutoDetector::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ??1D3D_CDisplayModeAutoDetector@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1D3D_CDisplayModeAutoDetector@@QAE@XZ PROC		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector, COMDAT
; _this$ = ecx

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1D3D_CDisplayModeAutoDetector@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 576  : }

  00022	68 00 00 00 00	 push	 OFFSET ??1D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::~D3D_CAdapterInfo
  00027	6a 0a		 push	 10			; 0000000aH
  00029	68 58 4f 00 00	 push	 20312			; 00004f58H
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1D3D_CDisplayModeAutoDetector@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1D3D_CDisplayModeAutoDetector@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1D3D_CDisplayModeAutoDetector@@QAE@XZ ENDP		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ??0D3D_CDisplayModeAutoDetector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D_CDisplayModeAutoDetector@@QAE@XZ PROC		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector, COMDAT
; _this$ = ecx

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::~D3D_CAdapterInfo
  0000a	68 00 00 00 00	 push	 OFFSET ??0D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::D3D_CAdapterInfo
  0000f	6a 0a		 push	 10			; 0000000aH
  00011	8b f1		 mov	 esi, ecx
  00013	68 58 4f 00 00	 push	 20312			; 00004f58H
  00018	56		 push	 esi
  00019	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0001c	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 571  : 	m_uD3DAdapterInfoCount=0;

  00021	c7 86 70 19 03
	00 00 00 00 00	 mov	 DWORD PTR [esi+203120], 0

; 572  : }

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0D3D_CDisplayModeAutoDetector@@QAE@XZ ENDP		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z
_TEXT	SEGMENT
_iD3DDevInfo$ = 8					; size = 4
_iD3D_SModeInfo$ = 12					; size = 4
?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z PROC ; D3D_CAdapterInfo::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 502  : 	D3D_CDeviceInfo* pkD3DDevInfo=GetD3DDeviceInfop(iD3DDevInfo);

  00003	ff 75 08	 push	 DWORD PTR _iD3DDevInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop

; 503  : 	if (pkD3DDevInfo)

  0000b	85 c0		 test	 eax, eax
  0000d	74 0e		 je	 SHORT $LN3@GetD3DMode

; 504  : 	{
; 505  : 		D3D_SModeInfo* pkD3DModeInfo=pkD3DDevInfo->GetD3DModeInfop(iD3D_SModeInfo);

  0000f	ff 75 0c	 push	 DWORD PTR _iD3D_SModeInfo$[ebp]
  00012	8b c8		 mov	 ecx, eax
  00014	e8 00 00 00 00	 call	 ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop

; 506  : 		if (pkD3DModeInfo)

  00019	85 c0		 test	 eax, eax
  0001b	75 02		 jne	 SHORT $LN1@GetD3DMode
$LN3@GetD3DMode:

; 507  : 			return pkD3DModeInfo;
; 508  : 	}
; 509  : 	return NULL;

  0001d	33 c0		 xor	 eax, eax
$LN1@GetD3DMode:

; 510  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z ENDP ; D3D_CAdapterInfo::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z
_TEXT	SEGMENT
_iD3DDevInfo$ = 8					; size = 4
?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z PROC ; D3D_CAdapterInfo::GetD3DDeviceInfop, COMDAT
; _this$ = ecx

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 494  : 	if (iD3DDevInfo >= m_uD3DDevInfoNum)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DDevInfo$[ebp]
  00006	3b 81 40 04 00
	00		 cmp	 eax, DWORD PTR [ecx+1088]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DDevi

; 495  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 498  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DDevi:

; 496  : 
; 497  : 	return &m_akD3DDevInfo[iD3DDevInfo];

  00014	69 c0 04 0f 00
	00		 imul	 eax, eax, 3844
  0001a	05 44 04 00 00	 add	 eax, 1092		; 00000444H
  0001f	03 c1		 add	 eax, ecx

; 498  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ENDP ; D3D_CAdapterInfo::GetD3DDeviceInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT
?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep, COMDAT
; _this$ = ecx

; 489  : 	return &m_kD3DDMDesktop;

  00000	8d 81 2c 04 00
	00		 lea	 eax, DWORD PTR [ecx+1068]

; 490  : }

  00006	c3		 ret	 0
?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ ENDP ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT
?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer, COMDAT
; _this$ = ecx

; 484  : 	return m_kD3DDMDesktop;

  00000	8d 81 2c 04 00
	00		 lea	 eax, DWORD PTR [ecx+1068]

; 485  : }

  00006	c3		 ret	 0
?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ENDP ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstEnumList$GSCopy$1$ = -1036				; size = 4
_szText$1 = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CAdapterInfo::GetString, COMDAT
; _this$ = ecx

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _pstEnumList$[ebp]
  00016	53		 push	 ebx
  00017	8b d9		 mov	 ebx, ecx
  00019	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _pstEnumList$GSCopy$1$[ebp], eax
  0001f	56		 push	 esi

; 556  : 	for (UINT iDevInfo=0; iDevInfo<m_uD3DDevInfoNum; ++iDevInfo)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 40 04 00
	00		 cmp	 DWORD PTR [ebx+1088], esi
  00028	76 63		 jbe	 SHORT $LN3@GetString

; 555  : {

  0002a	57		 push	 edi
  0002b	8d bb 44 04 00
	00		 lea	 edi, DWORD PTR [ebx+1092]
$LL4@GetString:

; 559  : 		_snprintf(szText, sizeof(szText), "Device %d\r\n", iDevInfo);

  00031	56		 push	 esi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@
  00037	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0003d	68 01 04 00 00	 push	 1025			; 00000401H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00048	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 559  : 		_snprintf(szText, sizeof(szText), "Device %d\r\n", iDevInfo);

  0004e	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL14@GetString:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	40		 inc	 eax
  00057	84 c9		 test	 cl, cl
  00059	75 f9		 jne	 SHORT $LL14@GetString

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005b	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _pstEnumList$GSCopy$1$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00061	2b c2		 sub	 eax, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00063	50		 push	 eax
  00064	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 563  : 		rkD3DDevInfo.GetString(pstEnumList);

  00070	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _pstEnumList$GSCopy$1$[ebp]
  00076	8b cf		 mov	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDeviceInfo::GetString
  0007d	46		 inc	 esi
  0007e	81 c7 04 0f 00
	00		 add	 edi, 3844		; 00000f04H
  00084	3b b3 40 04 00
	00		 cmp	 esi, DWORD PTR [ebx+1088]
  0008a	72 a5		 jb	 SHORT $LL4@GetString
  0008c	5f		 pop	 edi
$LN3@GetString:

; 564  : 	}
; 565  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	5e		 pop	 esi
  00091	33 cd		 xor	 ecx, ebp
  00093	5b		 pop	 ebx
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CAdapterInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D8@@IP6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
_pfnConfirmDevice$GSCopy$1$ = -1696			; size = 4
_kD3DADMList$ = -1692					; size = 1688
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_pfnConfirmDevice$ = 16					; size = 4
?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D8@@IP6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CAdapterInfo::Build, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 06 00
	00		 sub	 esp, 1696		; 000006a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _pfnConfirmDevice$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _rkD3D$[ebp]
  0001a	56		 push	 esi
  0001b	8b f1		 mov	 esi, ecx
  0001d	89 85 60 f9 ff
	ff		 mov	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp], eax
  00023	57		 push	 edi

; 528  : 	D3DDISPLAYMODE& rkD3DDMDesktop=m_kD3DDMDesktop;
; 529  : 	if (FAILED(rkD3D.GetAdapterDisplayMode(iD3DAdapterInfo, &rkD3DDMDesktop)))

  00024	8b 13		 mov	 edx, DWORD PTR [ebx]
  00026	8b 7d 0c	 mov	 edi, DWORD PTR _iD3DAdapterInfo$[ebp]
  00029	8d 86 2c 04 00
	00		 lea	 eax, DWORD PTR [esi+1068]
  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	53		 push	 ebx
  00032	ff 52 20	 call	 DWORD PTR [edx+32]
  00035	85 c0		 test	 eax, eax
  00037	79 15		 jns	 SHORT $LN5@Build

; 552  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	33 c0		 xor	 eax, eax
  0003d	5b		 pop	 ebx
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Build:

; 530  : 		return FALSE;
; 531  : 
; 532  : 	rkD3D.GetAdapterIdentifier(iD3DAdapterInfo, D3DENUM_NO_WHQL_LEVEL, &m_kD3DAdapterIdentifier);

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	56		 push	 esi
  00051	6a 02		 push	 2
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	ff 50 14	 call	 DWORD PTR [eax+20]

; 533  : 
; 534  : 	m_iCurD3DDevInfo=0;
; 535  : 	m_uD3DDevInfoNum=0;
; 536  : 
; 537  : 	D3D_CAdapterDisplayModeList kD3DADMList;
; 538  : 	kD3DADMList.Build(rkD3D, m_kD3DDMDesktop.Format, iD3DAdapterInfo);

  00058	57		 push	 edi
  00059	ff b6 38 04 00
	00		 push	 DWORD PTR [esi+1080]
  0005f	8d 8d 64 f9 ff
	ff		 lea	 ecx, DWORD PTR _kD3DADMList$[ebp]
  00065	c7 86 3c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1084], 0
  0006f	53		 push	 ebx
  00070	c7 86 40 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1088], 0
  0007a	e8 00 00 00 00	 call	 ?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D8@@W4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::Build
  0007f	8b 86 40 04 00
	00		 mov	 eax, DWORD PTR [esi+1088]

; 539  : 
; 540  : 	D3D_CDeviceInfo* akD3DDevInfo=m_akD3DDevInfo;

  00085	8d 96 44 04 00
	00		 lea	 edx, DWORD PTR [esi+1092]
  0008b	33 ff		 xor	 edi, edi
  0008d	0f 1f 00	 npad	 3
$LL4@Build:

; 542  : 	{
; 543  :         D3D_CDeviceInfo& rkD3DDevInfo=akD3DDevInfo[m_uD3DDevInfoNum];
; 544  : 		if (rkD3DDevInfo.Build(rkD3D, iD3DAdapterInfo, iDevType, kD3DADMList, pfnConfirmDevice))

  00090	ff b5 60 f9 ff
	ff		 push	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00096	69 c8 04 0f 00
	00		 imul	 ecx, eax, 3844
  0009c	8d 85 64 f9 ff
	ff		 lea	 eax, DWORD PTR _kD3DADMList$[ebp]
  000a2	50		 push	 eax
  000a3	57		 push	 edi
  000a4	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000a7	03 ca		 add	 ecx, edx
  000a9	53		 push	 ebx
  000aa	e8 00 00 00 00	 call	 ?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDeviceInfo::Build
  000af	85 c0		 test	 eax, eax
  000b1	74 06		 je	 SHORT $LN13@Build

; 545  : 			++m_uD3DDevInfoNum;

  000b3	ff 86 40 04 00
	00		 inc	 DWORD PTR [esi+1088]
$LN13@Build:

; 541  : 	for (UINT iDevType=0; iDevType<D3DDEVICETYPE_NUM; ++iDevType)

  000b9	8b 86 40 04 00
	00		 mov	 eax, DWORD PTR [esi+1088]
  000bf	8d 96 44 04 00
	00		 lea	 edx, DWORD PTR [esi+1092]
  000c5	47		 inc	 edi
  000c6	8b c8		 mov	 ecx, eax
  000c8	83 ff 02	 cmp	 edi, 2
  000cb	72 c3		 jb	 SHORT $LL4@Build

; 546  : 	}
; 547  : 
; 548  : 	if (m_uD3DDevInfoNum>0)
; 549  : 		return TRUE;
; 550  : 
; 551  : 	return FALSE;

  000cd	33 c0		 xor	 eax, eax
  000cf	3b c1		 cmp	 eax, ecx

; 552  : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	5f		 pop	 edi
  000d5	1b c0		 sbb	 eax, eax
  000d7	33 cd		 xor	 ecx, ebp
  000d9	5e		 pop	 esi
  000da	f7 d8		 neg	 eax
  000dc	5b		 pop	 ebx
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 0c 00	 ret	 12			; 0000000cH
?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D8@@IP6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CAdapterInfo::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
_piD3DDevInfo$ = 28					; size = 4
?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z PROC		; D3D_CAdapterInfo::Find, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 514  : 	for (UINT iDevInfo=0; iDevInfo<m_uD3DDevInfoNum; ++iDevInfo)

  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	39 b3 40 04 00
	00		 cmp	 DWORD PTR [ebx+1088], esi
  00010	76 2f		 jbe	 SHORT $LN3@Find
  00012	8d bb 44 04 00
	00		 lea	 edi, DWORD PTR [ebx+1092]
$LL4@Find:

; 515  : 	{
; 516  :         D3D_CDeviceInfo& rkD3DDevInfo=m_akD3DDevInfo[iDevInfo];
; 517  : 		if (rkD3DDevInfo.Find(uScrWidth, uScrHeight, uScrDepthBits, isWindowed, piD3DModeInfo))

  00018	ff 75 18	 push	 DWORD PTR _piD3DModeInfo$[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	ff 75 14	 push	 DWORD PTR _isWindowed$[ebp]
  00020	ff 75 10	 push	 DWORD PTR _uScrDepthBits$[ebp]
  00023	ff 75 0c	 push	 DWORD PTR _uScrHeight$[ebp]
  00026	ff 75 08	 push	 DWORD PTR _uScrWidth$[ebp]
  00029	e8 00 00 00 00	 call	 ?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z ; D3D_CDeviceInfo::Find
  0002e	85 c0		 test	 eax, eax
  00030	75 18		 jne	 SHORT $LN8@Find

; 514  : 	for (UINT iDevInfo=0; iDevInfo<m_uD3DDevInfoNum; ++iDevInfo)

  00032	46		 inc	 esi
  00033	81 c7 04 0f 00
	00		 add	 edi, 3844		; 00000f04H
  00039	3b b3 40 04 00
	00		 cmp	 esi, DWORD PTR [ebx+1088]
  0003f	72 d7		 jb	 SHORT $LL4@Find
$LN3@Find:
  00041	5f		 pop	 edi

; 521  : 		}
; 522  : 	}
; 523  : 	return FALSE;
; 524  : }

  00042	5e		 pop	 esi
  00043	33 c0		 xor	 eax, eax
  00045	5b		 pop	 ebx
  00046	5d		 pop	 ebp
  00047	c2 18 00	 ret	 24			; 00000018H
$LN8@Find:

; 518  : 		{
; 519  : 			*piD3DDevInfo=iDevInfo;

  0004a	8b 45 1c	 mov	 eax, DWORD PTR _piD3DDevInfo$[ebp]
  0004d	5f		 pop	 edi
  0004e	89 30		 mov	 DWORD PTR [eax], esi

; 520  : 			return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 521  : 		}
; 522  : 	}
; 523  : 	return FALSE;
; 524  : }

  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	5d		 pop	 ebp
  00058	c2 18 00	 ret	 24			; 00000018H
?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z ENDP		; D3D_CAdapterInfo::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.h
;	COMDAT ??1D3D_CAdapterInfo@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1D3D_CAdapterInfo@@QAE@XZ PROC			; D3D_CAdapterInfo::~D3D_CAdapterInfo, COMDAT
; _this$ = ecx

; 110  : 		~D3D_CAdapterInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1D3D_CAdapterInfo@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	68 00 00 00 00	 push	 OFFSET ??1D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::~D3D_CDeviceInfo
  00027	6a 05		 push	 5
  00029	68 04 0f 00 00	 push	 3844			; 00000f04H
  0002e	8d 81 44 04 00
	00		 lea	 eax, DWORD PTR [ecx+1092]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1D3D_CAdapterInfo@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1D3D_CAdapterInfo@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1D3D_CAdapterInfo@@QAE@XZ ENDP			; D3D_CAdapterInfo::~D3D_CAdapterInfo
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.h
;	COMDAT ??0D3D_CAdapterInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D_CAdapterInfo@@QAE@XZ PROC			; D3D_CAdapterInfo::D3D_CAdapterInfo, COMDAT
; _this$ = ecx

; 109  : 		D3D_CAdapterInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::~D3D_CDeviceInfo
  0000a	8b f1		 mov	 esi, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??0D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::D3D_CDeviceInfo
  00011	6a 05		 push	 5
  00013	68 04 0f 00 00	 push	 3844			; 00000f04H
  00018	8d 86 44 04 00
	00		 lea	 eax, DWORD PTR [esi+1092]
  0001e	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??0D3D_CAdapterInfo@@QAE@XZ ENDP			; D3D_CAdapterInfo::D3D_CAdapterInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z
_TEXT	SEGMENT
_iD3D_SModeInfo$ = 8					; size = 4
?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z PROC ; D3D_CDeviceInfo::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	if (iD3D_SModeInfo >= m_uD3DModeInfoNum)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3D_SModeInfo$[ebp]
  00006	3b 81 e4 00 00
	00		 cmp	 eax, DWORD PTR [ecx+228]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DMode

; 176  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 179  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DMode:

; 177  : 
; 178  : 	return &m_akD3DModeInfo[iD3D_SModeInfo];

  00014	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00017	8d 40 1d	 lea	 eax, DWORD PTR [eax+29]
  0001a	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 179  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ENDP ; D3D_CDeviceInfo::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z
_TEXT	SEGMENT
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_DeviceType$ = 16					; size = 4
_TargetFormat$ = 20					; size = 4
_pDepthStencilFormat$ = 24				; size = 4
?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z PROC ; D3D_CDeviceInfo::FindDepthStencilFormat, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 183  :     UINT m_dwMinDepthBits    = 16;
; 184  :     UINT m_dwMinStencilBits  = 0;
; 185  : 
; 186  :     if( m_dwMinDepthBits <= 16 && m_dwMinStencilBits == 0 )
; 187  :     {
; 188  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _DeviceType$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _rkD3D$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _TargetFormat$[ebp]
  0000f	6a 50		 push	 80			; 00000050H
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	6a 01		 push	 1
  00015	6a 02		 push	 2
  00017	57		 push	 edi
  00018	53		 push	 ebx
  00019	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0001c	56		 push	 esi
  0001d	ff 50 28	 call	 DWORD PTR [eax+40]
  00020	85 c0		 test	 eax, eax
  00022	78 27		 js	 SHORT $LN23@FindDepthS

; 189  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D16 ) ) )
; 190  :         {
; 191  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	6a 50		 push	 80			; 00000050H
  00028	57		 push	 edi
  00029	57		 push	 edi
  0002a	53		 push	 ebx
  0002b	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0002e	56		 push	 esi
  0002f	ff 50 30	 call	 DWORD PTR [eax+48]
  00032	85 c0		 test	 eax, eax
  00034	78 15		 js	 SHORT $LN23@FindDepthS

; 192  :                 TargetFormat, TargetFormat, D3DFMT_D16 ) ) )
; 193  :             {
; 194  :                 *pDepthStencilFormat = D3DFMT_D16;

  00036	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00039	5f		 pop	 edi

; 265  :                 return TRUE;
; 266  :             }
; 267  :         }
; 268  :     }
; 269  : 
; 270  :     return FALSE;
; 271  : }

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c7 00 50 00 00
	00		 mov	 DWORD PTR [eax], 80	; 00000050H
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
$LN23@FindDepthS:

; 195  :                 return TRUE;
; 196  :             }
; 197  :         }
; 198  :     }
; 199  : 
; 200  :     if( m_dwMinDepthBits <= 15 && m_dwMinStencilBits <= 1 )
; 201  :     {
; 202  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,
; 203  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D15S1 ) ) )
; 204  :         {
; 205  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,
; 206  :                 TargetFormat, TargetFormat, D3DFMT_D15S1 ) ) )
; 207  :             {
; 208  :                 *pDepthStencilFormat = D3DFMT_D15S1;
; 209  :                 return TRUE;
; 210  :             }
; 211  :         }
; 212  :     }
; 213  : 
; 214  :     if( m_dwMinDepthBits <= 24 && m_dwMinStencilBits == 0 )
; 215  :     {
; 216  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	6a 4d		 push	 77			; 0000004dH
  0004f	6a 01		 push	 1
  00051	6a 02		 push	 2
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00058	56		 push	 esi
  00059	ff 50 28	 call	 DWORD PTR [eax+40]
  0005c	85 c0		 test	 eax, eax
  0005e	78 27		 js	 SHORT $LN25@FindDepthS

; 217  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24X8 ) ) )
; 218  :         {
; 219  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	6a 4d		 push	 77			; 0000004dH
  00064	57		 push	 edi
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0006a	56		 push	 esi
  0006b	ff 50 30	 call	 DWORD PTR [eax+48]
  0006e	85 c0		 test	 eax, eax
  00070	78 15		 js	 SHORT $LN25@FindDepthS

; 220  :                 TargetFormat, TargetFormat, D3DFMT_D24X8 ) ) )
; 221  :             {
; 222  :                 *pDepthStencilFormat = D3DFMT_D24X8;

  00072	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00075	5f		 pop	 edi

; 265  :                 return TRUE;
; 266  :             }
; 267  :         }
; 268  :     }
; 269  : 
; 270  :     return FALSE;
; 271  : }

  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	c7 00 4d 00 00
	00		 mov	 DWORD PTR [eax], 77	; 0000004dH
  0007e	b8 01 00 00 00	 mov	 eax, 1
  00083	5d		 pop	 ebp
  00084	c2 14 00	 ret	 20			; 00000014H
$LN25@FindDepthS:

; 223  :                 return TRUE;
; 224  :             }
; 225  :         }
; 226  :     }
; 227  : 
; 228  :     if( m_dwMinDepthBits <= 24 && m_dwMinStencilBits <= 8 )
; 229  :     {
; 230  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	6a 4b		 push	 75			; 0000004bH
  0008b	6a 01		 push	 1
  0008d	6a 02		 push	 2
  0008f	57		 push	 edi
  00090	53		 push	 ebx
  00091	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00094	56		 push	 esi
  00095	ff 50 28	 call	 DWORD PTR [eax+40]
  00098	85 c0		 test	 eax, eax
  0009a	78 27		 js	 SHORT $LN27@FindDepthS

; 231  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24S8 ) ) )
; 232  :         {
; 233  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	6a 4b		 push	 75			; 0000004bH
  000a0	57		 push	 edi
  000a1	57		 push	 edi
  000a2	53		 push	 ebx
  000a3	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000a6	56		 push	 esi
  000a7	ff 50 30	 call	 DWORD PTR [eax+48]
  000aa	85 c0		 test	 eax, eax
  000ac	78 15		 js	 SHORT $LN27@FindDepthS

; 234  :                 TargetFormat, TargetFormat, D3DFMT_D24S8 ) ) )
; 235  :             {
; 236  :                 *pDepthStencilFormat = D3DFMT_D24S8;

  000ae	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  000b1	5f		 pop	 edi

; 265  :                 return TRUE;
; 266  :             }
; 267  :         }
; 268  :     }
; 269  : 
; 270  :     return FALSE;
; 271  : }

  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	c7 00 4b 00 00
	00		 mov	 DWORD PTR [eax], 75	; 0000004bH
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	5d		 pop	 ebp
  000c0	c2 14 00	 ret	 20			; 00000014H
$LN27@FindDepthS:

; 237  :                 return TRUE;
; 238  :             }
; 239  :         }
; 240  :     }
; 241  : 
; 242  :     if( m_dwMinDepthBits <= 24 && m_dwMinStencilBits <= 4 )
; 243  :     {
; 244  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  000c3	8b 06		 mov	 eax, DWORD PTR [esi]
  000c5	6a 4f		 push	 79			; 0000004fH
  000c7	6a 01		 push	 1
  000c9	6a 02		 push	 2
  000cb	57		 push	 edi
  000cc	53		 push	 ebx
  000cd	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000d0	56		 push	 esi
  000d1	ff 50 28	 call	 DWORD PTR [eax+40]
  000d4	85 c0		 test	 eax, eax
  000d6	78 27		 js	 SHORT $LN29@FindDepthS

; 245  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24X4S4 ) ) )
; 246  :         {
; 247  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  000d8	8b 06		 mov	 eax, DWORD PTR [esi]
  000da	6a 4f		 push	 79			; 0000004fH
  000dc	57		 push	 edi
  000dd	57		 push	 edi
  000de	53		 push	 ebx
  000df	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000e2	56		 push	 esi
  000e3	ff 50 30	 call	 DWORD PTR [eax+48]
  000e6	85 c0		 test	 eax, eax
  000e8	78 15		 js	 SHORT $LN29@FindDepthS

; 248  :                 TargetFormat, TargetFormat, D3DFMT_D24X4S4 ) ) )
; 249  :             {
; 250  :                 *pDepthStencilFormat = D3DFMT_D24X4S4;

  000ea	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  000ed	5f		 pop	 edi

; 265  :                 return TRUE;
; 266  :             }
; 267  :         }
; 268  :     }
; 269  : 
; 270  :     return FALSE;
; 271  : }

  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	c7 00 4f 00 00
	00		 mov	 DWORD PTR [eax], 79	; 0000004fH
  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	5d		 pop	 ebp
  000fc	c2 14 00	 ret	 20			; 00000014H
$LN29@FindDepthS:

; 251  :                 return TRUE;
; 252  :             }
; 253  :         }
; 254  :     }
; 255  : 
; 256  :     if( m_dwMinDepthBits <= 32 && m_dwMinStencilBits == 0 )
; 257  :     {
; 258  :         if( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	6a 47		 push	 71			; 00000047H
  00103	6a 01		 push	 1
  00105	6a 02		 push	 2
  00107	57		 push	 edi
  00108	53		 push	 ebx
  00109	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0010c	56		 push	 esi
  0010d	ff 50 28	 call	 DWORD PTR [eax+40]
  00110	85 c0		 test	 eax, eax
  00112	78 27		 js	 SHORT $LN19@FindDepthS

; 259  :             TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D32 ) ) )
; 260  :         {
; 261  :             if( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00114	8b 06		 mov	 eax, DWORD PTR [esi]
  00116	6a 47		 push	 71			; 00000047H
  00118	57		 push	 edi
  00119	57		 push	 edi
  0011a	53		 push	 ebx
  0011b	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0011e	56		 push	 esi
  0011f	ff 50 30	 call	 DWORD PTR [eax+48]
  00122	85 c0		 test	 eax, eax
  00124	78 15		 js	 SHORT $LN19@FindDepthS

; 262  :                 TargetFormat, TargetFormat, D3DFMT_D32 ) ) )
; 263  :             {
; 264  :                 *pDepthStencilFormat = D3DFMT_D32;

  00126	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00129	5f		 pop	 edi

; 265  :                 return TRUE;
; 266  :             }
; 267  :         }
; 268  :     }
; 269  : 
; 270  :     return FALSE;
; 271  : }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	c7 00 47 00 00
	00		 mov	 DWORD PTR [eax], 71	; 00000047H
  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	5d		 pop	 ebp
  00138	c2 14 00	 ret	 20			; 00000014H
$LN19@FindDepthS:
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	33 c0		 xor	 eax, eax
  0013f	5b		 pop	 ebx
  00140	5d		 pop	 ebp
  00141	c2 14 00	 ret	 20			; 00000014H
?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ENDP ; D3D_CDeviceInfo::FindDepthStencilFormat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -1036					; size = 4
_szText$ = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CDeviceInfo::GetString, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pstEnumList$[ebp]

; 465  : 	_snprintf(szText, sizeof(szText), "%s\r\n========================================\r\n", m_szDevDesc);

  00017	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b f9		 mov	 edi, ecx
  00021	89 bd f4 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00027	ff 37		 push	 DWORD PTR [edi]
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0002e	68 01 04 00 00	 push	 1025			; 00000401H
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00039	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 465  : 	_snprintf(szText, sizeof(szText), "%s\r\n========================================\r\n", m_szDevDesc);

  0003f	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL22@GetString:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL22@GetString
  0004c	2b ca		 sub	 ecx, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004e	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00054	51		 push	 ecx
  00055	50		 push	 eax
  00056	8b cb		 mov	 ecx, ebx
  00058	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 468  : 	for (UINT iD3D_SModeInfo=0; iD3D_SModeInfo<m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  0005d	33 f6		 xor	 esi, esi
  0005f	39 b7 e4 00 00
	00		 cmp	 DWORD PTR [edi+228], esi
  00065	76 5e		 jbe	 SHORT $LN3@GetString

; 463  : {

  00067	81 c7 e8 00 00
	00		 add	 edi, 232		; 000000e8H
  0006d	0f 1f 00	 npad	 3
$LL4@GetString:

; 470  : 		_snprintf(szText, sizeof(szText), "%d. ", iD3D_SModeInfo);

  00070	56		 push	 esi
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_04CDOPIHIK@?$CFd?4?5@
  00076	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0007c	68 01 04 00 00	 push	 1025			; 00000401H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00087	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 470  : 		_snprintf(szText, sizeof(szText), "%d. ", iD3D_SModeInfo);

  0008d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00090	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL23@GetString:
  00093	8a 08		 mov	 cl, BYTE PTR [eax]
  00095	40		 inc	 eax
  00096	84 c9		 test	 cl, cl
  00098	75 f9		 jne	 SHORT $LL23@GetString
  0009a	2b c2		 sub	 eax, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009c	8b cb		 mov	 ecx, ebx
  0009e	50		 push	 eax
  0009f	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 474  : 		rkModeInfo.GetString(pstEnumList);

  000ab	53		 push	 ebx
  000ac	8b cf		 mov	 ecx, edi
  000ae	e8 00 00 00 00	 call	 ?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_SModeInfo::GetString
  000b3	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000b9	46		 inc	 esi
  000ba	83 c7 18	 add	 edi, 24			; 00000018H
  000bd	3b b0 e4 00 00
	00		 cmp	 esi, DWORD PTR [eax+228]
  000c3	72 ab		 jb	 SHORT $LL4@GetString
$LN3@GetString:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c5	6a 02		 push	 2
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  000cc	8b cb		 mov	 ecx, ebx
  000ce	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 478  : }

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 478  : }

  000d8	33 cd		 xor	 ecx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000da	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 478  : }

  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CDeviceInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ
_TEXT	SEGMENT
?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ PROC		; D3D_CDeviceInfo::GetD3DModeInfoNum, COMDAT
; _this$ = ecx

; 170  : 	return m_uD3DModeInfoNum;

  00000	8b 81 e4 00 00
	00		 mov	 eax, DWORD PTR [ecx+228]

; 171  : }

  00006	c3		 ret	 0
?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ ENDP		; D3D_CDeviceInfo::GetD3DModeInfoNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z PROC		; D3D_CDeviceInfo::Find, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 424  : 	if (isWindowed)

  00003	83 7d 14 00	 cmp	 DWORD PTR _isWindowed$[ebp], 0
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	74 09		 je	 SHORT $LN10@Find

; 425  : 		if (!m_isWindowed)

  0000c	83 b9 f8 0e 00
	00 00		 cmp	 DWORD PTR [ecx+3832], 0
  00013	74 49		 je	 SHORT $LN21@Find
$LN10@Find:

; 426  : 			return FALSE;
; 427  : 
; 428  : 	for (UINT iD3D_SModeInfo=0; iD3D_SModeInfo<m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  00015	8b b1 e4 00 00
	00		 mov	 esi, DWORD PTR [ecx+228]
  0001b	33 d2		 xor	 edx, edx
  0001d	85 f6		 test	 esi, esi
  0001f	74 3d		 je	 SHORT $LN21@Find
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _uScrHeight$[ebp]
  00024	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  0002a	8b 5d 08	 mov	 ebx, DWORD PTR _uScrWidth$[ebp]
  0002d	0f 1f 00	 npad	 3
$LL4@Find:

; 429  : 	{
; 430  : 		D3D_SModeInfo& rkModeInfo=m_akD3DModeInfo[iD3D_SModeInfo];
; 431  : 		if (rkModeInfo.m_uScrWidth==uScrWidth && rkModeInfo.m_uScrHeight==uScrHeight)

  00030	39 59 f0	 cmp	 DWORD PTR [ecx-16], ebx
  00033	75 21		 jne	 SHORT $LN2@Find
  00035	39 79 f4	 cmp	 DWORD PTR [ecx-12], edi
  00038	75 1c		 jne	 SHORT $LN2@Find

; 432  : 		{
; 433  : 			if (uScrDepthBits==16)

  0003a	83 7d 10 10	 cmp	 DWORD PTR _uScrDepthBits$[ebp], 16 ; 00000010H
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	75 0a		 jne	 SHORT $LN12@Find

; 434  : 			{
; 435  : 				switch (rkModeInfo.m_eD3DFmtPixel)

  00042	83 f8 17	 cmp	 eax, 23			; 00000017H
  00045	7c 0f		 jl	 SHORT $LN2@Find
  00047	83 f8 19	 cmp	 eax, 25			; 00000019H

; 436  : 				{
; 437  : 					case D3DFMT_R5G6B5:
; 438  : 					case D3DFMT_X1R5G5B5:
; 439  : 					case D3DFMT_A1R5G5B5:
; 440  : 						*piD3DModeInfo=iD3D_SModeInfo;
; 441  : 						return TRUE;
; 442  : 						break;
; 443  : 				}
; 444  : 			}

  0004a	eb 08		 jmp	 SHORT $LN22@Find
$LN12@Find:

; 445  : 			else
; 446  : 			{
; 447  : 				switch (rkModeInfo.m_eD3DFmtPixel)

  0004c	83 f8 14	 cmp	 eax, 20			; 00000014H
  0004f	7c 05		 jl	 SHORT $LN2@Find
  00051	83 f8 16	 cmp	 eax, 22			; 00000016H
$LN22@Find:

; 426  : 			return FALSE;
; 427  : 
; 428  : 	for (UINT iD3D_SModeInfo=0; iD3D_SModeInfo<m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  00054	7e 11		 jle	 SHORT $LN15@Find
$LN2@Find:
  00056	42		 inc	 edx
  00057	83 c1 18	 add	 ecx, 24			; 00000018H
  0005a	3b d6		 cmp	 edx, esi
  0005c	72 d2		 jb	 SHORT $LL4@Find
$LN21@Find:
  0005e	5f		 pop	 edi

; 453  : 						return TRUE;
; 454  : 						break;
; 455  : 				}
; 456  : 			}
; 457  : 		}
; 458  : 	}
; 459  : 	return FALSE;
; 460  : }

  0005f	5e		 pop	 esi
  00060	33 c0		 xor	 eax, eax
  00062	5b		 pop	 ebx
  00063	5d		 pop	 ebp
  00064	c2 14 00	 ret	 20			; 00000014H
$LN15@Find:

; 448  : 				{
; 449  : 					case D3DFMT_X8R8G8B8:
; 450  : 					case D3DFMT_A8R8G8B8:
; 451  : 					case D3DFMT_R8G8B8:
; 452  : 						*piD3DModeInfo=iD3D_SModeInfo;

  00067	8b 45 18	 mov	 eax, DWORD PTR _piD3DModeInfo$[ebp]
  0006a	5f		 pop	 edi

; 453  : 						return TRUE;
; 454  : 						break;
; 455  : 				}
; 456  : 			}
; 457  : 		}
; 458  : 	}
; 459  : 	return FALSE;
; 460  : }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	b8 01 00 00 00	 mov	 eax, 1
  00074	5d		 pop	 ebp
  00075	c2 14 00	 ret	 20			; 00000014H
?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z ENDP		; D3D_CDeviceInfo::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
tv632 = -280						; size = 4
_isFormatConfirmed$2$ = -276				; size = 4
tv631 = -272						; size = 4
_uD3DDMNum$1$ = -268					; size = 4
_uD3DFmtNum$1$ = -268					; size = 4
_rkD3DADMList$GSCopy$1$ = -264				; size = 4
_iFmt$1$ = -260						; size = 4
_pfnConfirmDevice$GSCopy$1$ = -256			; size = 4
_rkD3D$GSCopy$1$ = -252					; size = 4
_uD3DFmtNum$1$ = -252					; size = 4
_iD3DDM$1$ = -248					; size = 4
_c_eD3DDevType$1$ = -248				; size = 4
_aeD3DFmtDepthStencil$ = -244				; size = 80
_adwD3DBehavior$ = -164					; size = 80
_aisFormatConfirmed$ = -84				; size = 80
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_iDevType$ = 16						; size = 4
_rkD3DADMList$ = 20					; size = 4
_pfnConfirmDevice$ = 24					; size = 4
?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CDeviceInfo::Build, COMDAT
; _this$ = ecx

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _iDevType$[ebp]
  00016	8b 55 08	 mov	 edx, DWORD PTR _rkD3D$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx
  0001c	89 95 04 ff ff
	ff		 mov	 DWORD PTR _rkD3D$GSCopy$1$[ebp], edx
  00022	8b 4d 18	 mov	 ecx, DWORD PTR _pfnConfirmDevice$[ebp]
  00025	56		 push	 esi

; 275  : 	assert(pfnConfirmDevice!=NULL && "D3D_CDeviceInfo::Build");
; 276  : 
; 277  : 	const D3DDEVTYPE	c_eD3DDevType=msc_aeD3DDevType[iDevType];
; 278  : 	const TCHAR*		c_szD3DDevDesc=msc_aszD3DDevDesc[iDevType];

  00026	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA[eax*4]
  0002d	57		 push	 edi
  0002e	8b 7d 14	 mov	 edi, DWORD PTR _rkD3DADMList$[ebp]
  00031	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp], ecx
  00037	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B[eax*4]
  0003e	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _c_eD3DDevType$1$[ebp], ecx

; 279  : 
; 280  :     m_eD3DDevType = c_eD3DDevType;

  00044	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 281  :     rkD3D.GetDeviceCaps(iD3DAdapterInfo, c_eD3DDevType, &m_kD3DCaps);

  00047	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004a	8b 02		 mov	 eax, DWORD PTR [edx]
  0004c	51		 push	 ecx
  0004d	ff b5 08 ff ff
	ff		 push	 DWORD PTR _c_eD3DDevType$1$[ebp]
  00053	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _rkD3DADMList$GSCopy$1$[ebp], edi
  00059	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0005c	52		 push	 edx
  0005d	ff 50 34	 call	 DWORD PTR [eax+52]

; 282  : 
; 283  :     m_szDevDesc = c_szD3DDevDesc;
; 284  :     m_uD3DModeInfoNum=0;
; 285  :     m_canDoWindowed = FALSE;
; 286  :     m_isWindowed = FALSE;
; 287  :     m_eD3DMSTFullscreen = D3DMULTISAMPLE_NONE;
; 288  :     m_eD3DMSTWindowed = D3DMULTISAMPLE_NONE;
; 289  : 
; 290  : 	BOOL  aisFormatConfirmed[20];
; 291  : 	DWORD adwD3DBehavior[20];
; 292  : 	D3DFORMAT aeD3DFmtDepthStencil[20];
; 293  : 
; 294  :     BOOL isHALExists = FALSE;
; 295  :     BOOL isHALWindowedCompatible = FALSE;
; 296  :     BOOL isHALDesktopCompatible = FALSE;
; 297  :     BOOL isHALSampleCompatible = FALSE;
; 298  : 
; 299  : 	// GetFlagInfo
; 300  : 	{
; 301  : 		UINT uD3DFmtNum=rkD3DADMList.GetPixelFormatNum();

  00060	8b cf		 mov	 ecx, edi
  00062	89 33		 mov	 DWORD PTR [ebx], esi
  00064	c7 83 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+228], 0
  0006e	c7 83 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+220], 0
  00078	c7 83 f8 0e 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3832], 0
  00082	c7 83 00 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3840], 0
  0008c	c7 83 fc 0e 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3836], 0
  00096	e8 00 00 00 00	 call	 ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
  0009b	8b c8		 mov	 ecx, eax
  0009d	33 c0		 xor	 eax, eax
  0009f	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], ecx
  000a5	89 85 fc fe ff
	ff		 mov	 DWORD PTR _iFmt$1$[ebp], eax

; 302  : 
; 303  : 		for (DWORD iFmt=0; iFmt<uD3DFmtNum; ++iFmt)

  000ab	85 c9		 test	 ecx, ecx
  000ad	0f 84 26 01 00
	00		 je	 $LN3@Build
$LL4@Build:

; 304  : 		{
; 305  : 			D3DFORMAT eD3DFmtPixel=rkD3DADMList.GetPixelFormatr(iFmt);

  000b3	50		 push	 eax
  000b4	8b cf		 mov	 ecx, edi
  000b6	e8 00 00 00 00	 call	 ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr

; 306  : 			DWORD dwD3DBehavior=0;
; 307  : 			BOOL isFormatConfirmed=FALSE;
; 308  : 
; 309  : 			aeD3DFmtDepthStencil[iFmt] = D3DFMT_UNKNOWN;
; 310  : 
; 311  : 			// SkipNoRenderTargetFormat;
; 312  : 			if (FAILED(rkD3D.CheckDeviceType(iD3DAdapterInfo, m_eD3DDevType, eD3DFmtPixel, eD3DFmtPixel, FALSE)))

  000bb	6a 00		 push	 0
  000bd	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _aeD3DFmtDepthStencil$[ebp]
  000c3	8b 30		 mov	 esi, DWORD PTR [eax]
  000c5	33 c0		 xor	 eax, eax
  000c7	89 85 ec fe ff
	ff		 mov	 DWORD PTR _isFormatConfirmed$2$[ebp], eax
  000cd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _iFmt$1$[ebp]
  000d3	c1 e0 02	 shl	 eax, 2
  000d6	56		 push	 esi
  000d7	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv632[ebp], eax
  000dd	03 c1		 add	 eax, ecx
  000df	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  000e5	56		 push	 esi
  000e6	ff 73 04	 push	 DWORD PTR [ebx+4]
  000e9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv631[ebp], eax
  000ef	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000f2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000f8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fa	51		 push	 ecx
  000fb	ff 50 24	 call	 DWORD PTR [eax+36]
  000fe	85 c0		 test	 eax, eax
  00100	0f 88 ba 00 00
	00		 js	 $LN2@Build

; 313  : 				continue;
; 314  : 
; 315  : 			if (D3DDEVTYPE_HAL==m_eD3DDevType)
; 316  : 			{
; 317  : 				isHALExists=TRUE;
; 318  : 
; 319  : 				if (m_kD3DCaps.Caps2 & D3DCAPS2_CANRENDERWINDOWED)
; 320  : 				{
; 321  : 					isHALWindowedCompatible=TRUE;
; 322  : 
; 323  : 					if (iFmt==0)
; 324  : 						isHALDesktopCompatible=TRUE;
; 325  : 
; 326  : 				}
; 327  : 			}
; 328  : 
; 329  : 			// Confirm the device/format for HW vertex processing
; 330  : 			if (m_kD3DCaps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)

  00106	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  00109	a9 00 00 01 00	 test	 eax, 65536		; 00010000H
  0010e	74 4f		 je	 SHORT $LN44@Build

; 331  : 			{
; 332  : 				if (m_kD3DCaps.DevCaps & D3DDEVCAPS_PUREDEVICE)

  00110	a9 00 00 10 00	 test	 eax, 1048576		; 00100000H
  00115	74 18		 je	 SHORT $LN45@Build

; 333  : 				{
; 334  : 					dwD3DBehavior=D3DCREATE_HARDWARE_VERTEXPROCESSING|D3DCREATE_PUREDEVICE;
; 335  : 
; 336  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  00117	56		 push	 esi
  00118	bf 50 00 00 00	 mov	 edi, 80			; 00000050H
  0011d	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00120	57		 push	 edi
  00121	50		 push	 eax
  00122	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	85 c0		 test	 eax, eax
  0012d	75 48		 jne	 SHORT $LN46@Build
$LN45@Build:

; 337  : 						isFormatConfirmed = TRUE;
; 338  : 				}
; 339  : 
; 340  : 				if (FALSE == isFormatConfirmed)
; 341  : 				{
; 342  : 					dwD3DBehavior = D3DCREATE_HARDWARE_VERTEXPROCESSING;
; 343  : 
; 344  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  0012f	56		 push	 esi
  00130	bf 40 00 00 00	 mov	 edi, 64			; 00000040H
  00135	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00138	57		 push	 edi
  00139	50		 push	 eax
  0013a	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
  00143	85 c0		 test	 eax, eax
  00145	75 30		 jne	 SHORT $LN46@Build

; 345  : 						isFormatConfirmed = TRUE;
; 346  : 				}
; 347  : 
; 348  : 				if (FALSE == isFormatConfirmed)
; 349  : 				{
; 350  : 					dwD3DBehavior = D3DCREATE_MIXED_VERTEXPROCESSING;
; 351  : 
; 352  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  00147	56		 push	 esi
  00148	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
  0014d	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00150	57		 push	 edi
  00151	50		 push	 eax
  00152	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	85 c0		 test	 eax, eax
  0015d	75 18		 jne	 SHORT $LN46@Build
$LN44@Build:

; 353  : 						isFormatConfirmed = TRUE;
; 354  : 				}
; 355  : 			}
; 356  : 
; 357  : 			// Confirm the device/format for SW vertex processing
; 358  : 			if (FALSE == isFormatConfirmed)
; 359  : 			{
; 360  : 				dwD3DBehavior = D3DCREATE_SOFTWARE_VERTEXPROCESSING;
; 361  : 
; 362  : 				if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  0015f	56		 push	 esi
  00160	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  00165	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00168	57		 push	 edi
  00169	50		 push	 eax
  0016a	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
  00173	85 c0		 test	 eax, eax
  00175	74 2c		 je	 SHORT $LN48@Build
$LN46@Build:

; 363  : 					isFormatConfirmed = TRUE;
; 364  : 			}
; 365  : 
; 366  : 			if (isFormatConfirmed)
; 367  : 			{
; 368  : 				if (!FindDepthStencilFormat(rkD3D, iD3DAdapterInfo, c_eD3DDevType, eD3DFmtPixel, &aeD3DFmtDepthStencil[iFmt]))

  00177	ff b5 f0 fe ff
	ff		 push	 DWORD PTR tv631[ebp]
  0017d	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  00183	8b cb		 mov	 ecx, ebx
  00185	56		 push	 esi
  00186	ff b5 08 ff ff
	ff		 push	 DWORD PTR _c_eD3DDevType$1$[ebp]
  0018c	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 ?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ; D3D_CDeviceInfo::FindDepthStencilFormat
  00195	85 c0		 test	 eax, eax
  00197	b8 01 00 00 00	 mov	 eax, 1
  0019c	8b c8		 mov	 ecx, eax
  0019e	0f 44 c1	 cmove	 eax, ecx
  001a1	eb 06		 jmp	 SHORT $LN25@Build
$LN48@Build:

; 353  : 						isFormatConfirmed = TRUE;
; 354  : 				}
; 355  : 			}
; 356  : 
; 357  : 			// Confirm the device/format for SW vertex processing
; 358  : 			if (FALSE == isFormatConfirmed)
; 359  : 			{
; 360  : 				dwD3DBehavior = D3DCREATE_SOFTWARE_VERTEXPROCESSING;
; 361  : 
; 362  : 				if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  001a3	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _isFormatConfirmed$2$[ebp]
$LN25@Build:

; 369  : 					isFormatConfirmed = TRUE;
; 370  : 
; 371  : 			}
; 372  : 
; 373  : 			adwD3DBehavior[iFmt]=dwD3DBehavior;

  001a9	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv632[ebp]
  001af	89 bc 0d 5c ff
	ff ff		 mov	 DWORD PTR _adwD3DBehavior$[ebp+ecx], edi
  001b6	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]

; 374  : 			aisFormatConfirmed[iFmt]=isFormatConfirmed;

  001bc	89 44 0d ac	 mov	 DWORD PTR _aisFormatConfirmed$[ebp+ecx], eax
$LN2@Build:

; 302  : 
; 303  : 		for (DWORD iFmt=0; iFmt<uD3DFmtNum; ++iFmt)

  001c0	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _iFmt$1$[ebp]
  001c6	40		 inc	 eax
  001c7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _iFmt$1$[ebp], eax
  001cd	3b 85 f4 fe ff
	ff		 cmp	 eax, DWORD PTR _uD3DFmtNum$1$[ebp]
  001d3	0f 82 da fe ff
	ff		 jb	 $LL4@Build
$LN3@Build:

; 375  : 		}
; 376  : 	}
; 377  : 
; 378  : 	// BuildModeInfoList
; 379  : 	{
; 380  : 		UINT uD3DDMNum=rkD3DADMList.GetDisplayModeNum();

  001d9	8b cf		 mov	 ecx, edi
  001db	e8 00 00 00 00	 call	 ?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
  001e0	8b f0		 mov	 esi, eax

; 381  : 		UINT uD3DFmtNum=rkD3DADMList.GetPixelFormatNum();

  001e2	8b cf		 mov	 ecx, edi
  001e4	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _uD3DDMNum$1$[ebp], esi
  001ea	e8 00 00 00 00	 call	 ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
  001ef	89 85 04 ff ff
	ff		 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], eax
  001f5	33 c0		 xor	 eax, eax
  001f7	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iD3DDM$1$[ebp], eax

; 382  : 
; 383  : 
; 384  : 		for (UINT iD3DDM=0; iD3DDM<uD3DDMNum; ++iD3DDM)

  001fd	85 f6		 test	 esi, esi
  001ff	0f 84 a6 00 00
	00		 je	 $LN6@Build
$LL7@Build:

; 385  : 		{
; 386  : 			const D3DDISPLAYMODE& c_rkD3DDM=rkD3DADMList.GetDisplayModer(iD3DDM);

  00205	50		 push	 eax
  00206	8b cf		 mov	 ecx, edi
  00208	e8 00 00 00 00	 call	 ?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ; D3D_CAdapterDisplayModeList::GetDisplayModer
  0020d	33 f6		 xor	 esi, esi
  0020f	8b f8		 mov	 edi, eax

; 387  : 			for (DWORD iFmt=0; iFmt<uD3DFmtNum; ++iFmt)

  00211	39 b5 04 ff ff
	ff		 cmp	 DWORD PTR _uD3DFmtNum$1$[ebp], esi
  00217	76 73		 jbe	 SHORT $LN5@Build
  00219	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@Build:

; 388  : 			{
; 389  : 				if (rkD3DADMList.GetPixelFormatr(iFmt)==c_rkD3DDM.Format)

  00220	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]
  00226	56		 push	 esi
  00227	e8 00 00 00 00	 call	 ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr
  0022c	8b 00		 mov	 eax, DWORD PTR [eax]
  0022e	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  00231	75 50		 jne	 SHORT $LN8@Build

; 390  : 				{
; 391  : 					if (aisFormatConfirmed[iFmt] == TRUE )

  00233	83 7c b5 ac 01	 cmp	 DWORD PTR _aisFormatConfirmed$[ebp+esi*4], 1
  00238	75 49		 jne	 SHORT $LN8@Build

; 392  : 					{
; 393  : 						D3D_SModeInfo& rkModeInfo=m_akD3DModeInfo[m_uD3DModeInfoNum++];

  0023a	8b 8b e4 00 00
	00		 mov	 ecx, DWORD PTR [ebx+228]
  00240	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00243	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  00246	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00249	89 83 e4 00 00
	00		 mov	 DWORD PTR [ebx+228], eax

; 394  : 						rkModeInfo.m_uScrWidth=c_rkD3DDM.Width;

  0024f	8b 07		 mov	 eax, DWORD PTR [edi]
  00251	89 82 e8 00 00
	00		 mov	 DWORD PTR [edx+232], eax

; 395  : 						rkModeInfo.m_uScrHeight=c_rkD3DDM.Height;

  00257	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0025a	89 82 ec 00 00
	00		 mov	 DWORD PTR [edx+236], eax

; 396  : 						rkModeInfo.m_eD3DFmtPixel=c_rkD3DDM.Format;

  00260	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00263	89 82 f8 00 00
	00		 mov	 DWORD PTR [edx+248], eax

; 397  : 						rkModeInfo.m_dwD3DBehavior=adwD3DBehavior[iFmt];

  00269	8b 84 b5 5c ff
	ff ff		 mov	 eax, DWORD PTR _adwD3DBehavior$[ebp+esi*4]
  00270	89 82 f4 00 00
	00		 mov	 DWORD PTR [edx+244], eax

; 398  : 						rkModeInfo.m_eD3DFmtDepthStencil=aeD3DFmtDepthStencil[iFmt];

  00276	8b 84 b5 0c ff
	ff ff		 mov	 eax, DWORD PTR _aeD3DFmtDepthStencil$[ebp+esi*4]
  0027d	89 82 fc 00 00
	00		 mov	 DWORD PTR [edx+252], eax
$LN8@Build:

; 387  : 			for (DWORD iFmt=0; iFmt<uD3DFmtNum; ++iFmt)

  00283	46		 inc	 esi
  00284	3b b5 04 ff ff
	ff		 cmp	 esi, DWORD PTR _uD3DFmtNum$1$[ebp]
  0028a	72 94		 jb	 SHORT $LL10@Build
$LN5@Build:

; 382  : 
; 383  : 
; 384  : 		for (UINT iD3DDM=0; iD3DDM<uD3DDMNum; ++iD3DDM)

  0028c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iD3DDM$1$[ebp]
  00292	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]
  00298	40		 inc	 eax
  00299	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iD3DDM$1$[ebp], eax
  0029f	3b 85 f4 fe ff
	ff		 cmp	 eax, DWORD PTR _uD3DDMNum$1$[ebp]
  002a5	0f 82 5a ff ff
	ff		 jb	 $LL7@Build
$LN6@Build:

; 399  : 
; 400  : 						if( m_eD3DDevType == D3DDEVTYPE_HAL )
; 401  : 							isHALSampleCompatible = TRUE;
; 402  : 					}
; 403  : 				}
; 404  : 			}
; 405  : 		}
; 406  : 	}
; 407  : 
; 408  : 	// Check if the device is compatible with the desktop display mode
; 409  : 	// (which was added initially as formats[0])
; 410  : 	if (aisFormatConfirmed[0] && (m_kD3DCaps.Caps2 & D3DCAPS2_CANRENDERWINDOWED) )

  002ab	83 7d ac 00	 cmp	 DWORD PTR _aisFormatConfirmed$[ebp], 0
  002af	74 1d		 je	 SHORT $LN29@Build
  002b1	f7 43 14 00 00
	08 00		 test	 DWORD PTR [ebx+20], 524288 ; 00080000H
  002b8	74 14		 je	 SHORT $LN29@Build

; 411  : 	{
; 412  : 		m_canDoWindowed=TRUE;

  002ba	c7 83 dc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+220], 1

; 413  : 		m_isWindowed=TRUE;

  002c4	c7 83 f8 0e 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+3832], 1
$LN29@Build:

; 414  : 	}
; 415  : 
; 416  : 	if (m_uD3DModeInfoNum>0)
; 417  : 		return TRUE;
; 418  : 
; 419  : 	return FALSE;
; 420  : }

  002ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d1	33 c0		 xor	 eax, eax
  002d3	3b 83 e4 00 00
	00		 cmp	 eax, DWORD PTR [ebx+228]
  002d9	5f		 pop	 edi
  002da	1b c0		 sbb	 eax, eax
  002dc	33 cd		 xor	 ecx, ebp
  002de	5e		 pop	 esi
  002df	f7 d8		 neg	 eax
  002e1	5b		 pop	 ebx
  002e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e7	8b e5		 mov	 esp, ebp
  002e9	5d		 pop	 ebp
  002ea	c2 14 00	 ret	 20			; 00000014H
?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D8@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CDeviceInfo::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.h
;	COMDAT ??1D3D_CDeviceInfo@@QAE@XZ
_TEXT	SEGMENT
??1D3D_CDeviceInfo@@QAE@XZ PROC				; D3D_CDeviceInfo::~D3D_CDeviceInfo, COMDAT
; _this$ = ecx

; 63   : 		~D3D_CDeviceInfo() {}

  00000	c2 00 00	 ret	 0
??1D3D_CDeviceInfo@@QAE@XZ ENDP				; D3D_CDeviceInfo::~D3D_CDeviceInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.h
;	COMDAT ??0D3D_CDeviceInfo@@QAE@XZ
_TEXT	SEGMENT
??0D3D_CDeviceInfo@@QAE@XZ PROC				; D3D_CDeviceInfo::D3D_CDeviceInfo, COMDAT
; _this$ = ecx

; 62   : 		D3D_CDeviceInfo() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3D_CDeviceInfo@@QAE@XZ ENDP				; D3D_CDeviceInfo::D3D_CDeviceInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z
_TEXT	SEGMENT
_iD3DFmt$ = 8						; size = 4
?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z PROC ; D3D_CAdapterDisplayModeList::GetPixelFormatr, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	assert(iD3DFmt<m_uD3DFmtNum);
; 67   : 	return m_aeD3DFmt[iD3DFmt];

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DFmt$[ebp]
  00006	05 90 01 00 00	 add	 eax, 400		; 00000190H
  0000b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 68   : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ENDP ; D3D_CAdapterDisplayModeList::GetPixelFormatr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z
_TEXT	SEGMENT
_iD3DDM$ = 8						; size = 4
?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z PROC ; D3D_CAdapterDisplayModeList::GetDisplayModer, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	assert(iD3DDM<m_uD3DDMNum);
; 61   : 	return m_akD3DDM[iD3DDM];

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DDM$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 c1		 add	 eax, ecx

; 62   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ENDP ; D3D_CAdapterDisplayModeList::GetDisplayModer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ
_TEXT	SEGMENT
?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ PROC ; D3D_CAdapterDisplayModeList::GetPixelFormatNum, COMDAT
; _this$ = ecx

; 54   : 	return m_uD3DFmtNum;

  00000	8b 81 94 06 00
	00		 mov	 eax, DWORD PTR [ecx+1684]

; 55   : }

  00006	c3		 ret	 0
?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ENDP ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ
_TEXT	SEGMENT
?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ PROC ; D3D_CAdapterDisplayModeList::GetDisplayModeNum, COMDAT
; _this$ = ecx

; 49   : 	return m_uD3DDMNum;

  00000	8b 81 90 06 00
	00		 mov	 eax, DWORD PTR [ecx+1680]

; 50   : }

  00006	c3		 ret	 0
?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ENDP ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D8@@W4_D3DFORMAT@@I@Z
_TEXT	SEGMENT
_uAdapterModeNum$1$ = -48				; size = 4
_aeD3DFmt$1$ = -44					; size = 4
_rkD3D$GSCopy$1$ = -40					; size = 4
_this$GSCopy$1$ = -36					; size = 4
_iD3DAdapterInfoMode$1$ = -32				; size = 4
_uD3DDMNum$1$ = -28					; size = 4
_uD3DFmtNum$1$ = -24					; size = 4
_kD3DDMCur$1 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_eD3DFmtDefault$ = 12					; size = 4
_iD3DAdapterInfo$ = 16					; size = 4
?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D8@@W4_D3DFORMAT@@I@Z PROC ; D3D_CAdapterDisplayModeList::Build, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _rkD3D$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi

; 72   : 	D3DDISPLAYMODE* akD3DDM=m_akD3DDM;
; 73   : 	D3DFORMAT* aeD3DFmt=m_aeD3DFmt;
; 74   : 
; 75   : 	UINT uD3DDMNum=0;
; 76   : 	UINT uD3DFmtNum=0;
; 77   : 
; 78   : 	aeD3DFmt[uD3DFmtNum++]=eD3DFmtDefault;
; 79   : 
; 80   : 	UINT uAdapterModeNum=rkD3D.GetAdapterModeCount(iD3DAdapterInfo);

  00018	ff 75 10	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0001b	8d 83 40 06 00
	00		 lea	 eax, DWORD PTR [ebx+1600]
  00021	89 5d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00024	89 45 d4	 mov	 DWORD PTR _aeD3DFmt$1$[ebp], eax
  00027	33 f6		 xor	 esi, esi
  00029	8b 45 0c	 mov	 eax, DWORD PTR _eD3DFmtDefault$[ebp]
  0002c	bf 01 00 00 00	 mov	 edi, 1
  00031	89 83 40 06 00
	00		 mov	 DWORD PTR [ebx+1600], eax
  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	51		 push	 ecx
  0003a	89 4d d8	 mov	 DWORD PTR _rkD3D$GSCopy$1$[ebp], ecx
  0003d	89 75 e4	 mov	 DWORD PTR _uD3DDMNum$1$[ebp], esi
  00040	89 7d e8	 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], edi
  00043	ff 50 18	 call	 DWORD PTR [eax+24]
  00046	33 c9		 xor	 ecx, ecx
  00048	89 45 d0	 mov	 DWORD PTR _uAdapterModeNum$1$[ebp], eax
  0004b	89 4d e0	 mov	 DWORD PTR _iD3DAdapterInfoMode$1$[ebp], ecx

; 81   : 	for (UINT iD3DAdapterInfoMode=0; iD3DAdapterInfoMode<uAdapterModeNum; iD3DAdapterInfoMode++)

  0004e	85 c0		 test	 eax, eax
  00050	0f 84 a4 00 00
	00		 je	 $LN3@Build

; 71   : {

  00056	8d b3 44 06 00
	00		 lea	 esi, DWORD PTR [ebx+1604]
  0005c	0f 1f 40 00	 npad	 4
$LL4@Build:

; 82   : 	{
; 83   : 		D3DDISPLAYMODE kD3DDMCur;
; 84   : 		rkD3D.EnumAdapterModes(iD3DAdapterInfo, iD3DAdapterInfoMode, &kD3DDMCur);

  00060	8b 55 d8	 mov	 edx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  00063	8d 7d ec	 lea	 edi, DWORD PTR _kD3DDMCur$1[ebp]
  00066	57		 push	 edi
  00067	51		 push	 ecx
  00068	ff 75 10	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	52		 push	 edx
  0006e	ff 50 1c	 call	 DWORD PTR [eax+28]

; 85   : 
; 86   : 		// IsFilterOutLowResolutionMode
; 87   : 		if( kD3DDMCur.Width  < FILTEROUT_LOWRESOLUTION_WIDTH || kD3DDMCur.Height < FILTEROUT_LOWRESOLUTION_HEIGHT )

  00071	8b 7d ec	 mov	 edi, DWORD PTR _kD3DDMCur$1[ebp]
  00074	81 ff 80 02 00
	00		 cmp	 edi, 640		; 00000280H
  0007a	72 65		 jb	 SHORT $LN55@Build
  0007c	8b 55 f0	 mov	 edx, DWORD PTR _kD3DDMCur$1[ebp+4]
  0007f	81 fa e0 01 00
	00		 cmp	 edx, 480		; 000001e0H
  00085	72 5a		 jb	 SHORT $LN55@Build
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5664 :     auto _UFirst      = _Get_unwrapped(_First);

  00087	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 5666 :     for (; _UFirst != _ULast; ++_UFirst) {

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _kD3DDMCur$1[ebp+12]
  0008d	3b c3		 cmp	 eax, ebx
  0008f	74 15		 je	 SHORT $LN47@Build
$LL15@Build:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 13   : 		if (rkD3DDMTest.Width!=m_pkD3DDMChk->Width)

  00091	39 38		 cmp	 DWORD PTR [eax], edi
  00093	75 0a		 jne	 SHORT $LN49@Build

; 14   : 			return FALSE;
; 15   : 
; 16   : 		if (rkD3DDMTest.Height!=m_pkD3DDMChk->Height)

  00095	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00098	75 05		 jne	 SHORT $LN49@Build

; 17   : 			return FALSE;
; 18   : 
; 19   : 		if (rkD3DDMTest.Format!=m_pkD3DDMChk->Format)

  0009a	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  0009d	74 42		 je	 SHORT $LN55@Build
$LN49@Build:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5666 :     for (; _UFirst != _ULast; ++_UFirst) {

  0009f	83 c0 10	 add	 eax, 16			; 00000010H
  000a2	3b c3		 cmp	 eax, ebx
  000a4	75 eb		 jne	 SHORT $LL15@Build
$LN47@Build:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 95   : 		if (pkD3DDMFind==pkD3DDMEnd && uD3DDMNum<D3DDISPLAYMODE_MAX)

  000a6	83 7d e4 64	 cmp	 DWORD PTR _uD3DDMNum$1$[ebp], 100 ; 00000064H
  000aa	73 35		 jae	 SHORT $LN55@Build

; 96   : 		{
; 97   : 			D3DDISPLAYMODE& rkD3DDMNew=akD3DDM[uD3DDMNum++];

  000ac	ff 45 e4	 inc	 DWORD PTR _uD3DDMNum$1$[ebp]
  000af	8b c3		 mov	 eax, ebx
  000b1	83 c3 10	 add	 ebx, 16			; 00000010H

; 98   : 			rkD3DDMNew.Width=kD3DDMCur.Width;

  000b4	89 38		 mov	 DWORD PTR [eax], edi

; 99   : 			rkD3DDMNew.Height=kD3DDMCur.Height;

  000b6	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 100  : 			rkD3DDMNew.Format=kD3DDMCur.Format;

  000b9	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5167 :     return _Find_unchecked1(_First, _Last, _Val, _Memchr_opt{});

  000bc	8b 45 d4	 mov	 eax, DWORD PTR _aeD3DFmt$1$[ebp]

; 5132 :     for (; _First != _Last; ++_First) {

  000bf	3b c6		 cmp	 eax, esi
  000c1	74 0b		 je	 SHORT $LN48@Build
$LL30@Build:

; 5133 :         if (*_First == _Val) {

  000c3	39 08		 cmp	 DWORD PTR [eax], ecx
  000c5	74 1a		 je	 SHORT $LN55@Build

; 5132 :     for (; _First != _Last; ++_First) {

  000c7	83 c0 04	 add	 eax, 4
  000ca	3b c6		 cmp	 eax, esi
  000cc	75 f5		 jne	 SHORT $LL30@Build
$LN48@Build:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 107  : 			if (peD3DFmtFind==peD3DFmtEnd && uD3DFmtNum<D3DFORMAT_MAX)

  000ce	8b 7d e8	 mov	 edi, DWORD PTR _uD3DFmtNum$1$[ebp]
  000d1	83 ff 14	 cmp	 edi, 20			; 00000014H
  000d4	73 0e		 jae	 SHORT $LN2@Build

; 108  : 			{
; 109  : 				aeD3DFmt[uD3DFmtNum++]=kD3DDMCur.Format;

  000d6	47		 inc	 edi
  000d7	89 0e		 mov	 DWORD PTR [esi], ecx
  000d9	89 7d e8	 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], edi
  000dc	83 c6 04	 add	 esi, 4

; 19   : 		if (rkD3DDMTest.Format!=m_pkD3DDMChk->Format)

  000df	eb 03		 jmp	 SHORT $LN2@Build
$LN55@Build:

; 81   : 	for (UINT iD3DAdapterInfoMode=0; iD3DAdapterInfoMode<uAdapterModeNum; iD3DAdapterInfoMode++)

  000e1	8b 7d e8	 mov	 edi, DWORD PTR _uD3DFmtNum$1$[ebp]
$LN2@Build:
  000e4	8b 4d e0	 mov	 ecx, DWORD PTR _iD3DAdapterInfoMode$1$[ebp]
  000e7	41		 inc	 ecx
  000e8	89 4d e0	 mov	 DWORD PTR _iD3DAdapterInfoMode$1$[ebp], ecx
  000eb	3b 4d d0	 cmp	 ecx, DWORD PTR _uAdapterModeNum$1$[ebp]
  000ee	0f 82 6c ff ff
	ff		 jb	 $LL4@Build
  000f4	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000f7	8b 75 e4	 mov	 esi, DWORD PTR _uD3DDMNum$1$[ebp]
$LN3@Build:

; 110  : 			}
; 111  : 		}
; 112  : 	}
; 113  : 
; 114  : 	qsort(akD3DDM, uD3DDMNum, sizeof(D3DDISPLAYMODE), CompareD3DDisplayModeOrder);

  000fa	68 00 00 00 00	 push	 OFFSET ?CompareD3DDisplayModeOrder@@YAHPBX0@Z ; CompareD3DDisplayModeOrder
  000ff	6a 10		 push	 16			; 00000010H
  00101	56		 push	 esi
  00102	53		 push	 ebx
  00103	e8 00 00 00 00	 call	 _qsort

; 115  : 
; 116  : 	m_uD3DFmtNum=uD3DFmtNum;
; 117  : 	m_uD3DDMNum=uD3DDMNum;
; 118  : }

  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	89 bb 94 06 00
	00		 mov	 DWORD PTR [ebx+1684], edi
  00114	33 cd		 xor	 ecx, ebp
  00116	89 b3 90 06 00
	00		 mov	 DWORD PTR [ebx+1680], esi
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D8@@W4_D3DFORMAT@@I@Z ENDP ; D3D_CAdapterDisplayModeList::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szText$ = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_SModeInfo::GetString, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b d1		 mov	 edx, ecx

; 124  : 	UINT uScrDepthBits=16;
; 125  : 	switch (m_eD3DFmtPixel)

  00015	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001a	56		 push	 esi
  0001b	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00020	57		 push	 edi
  00021	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00024	8b 7d 08	 mov	 edi, DWORD PTR _pstEnumList$[ebp]
  00027	83 c0 ec	 add	 eax, -20		; ffffffecH
  0002a	83 f8 02	 cmp	 eax, 2

; 126  : 	{
; 127  : 		case D3DFMT_X8R8G8B8:
; 128  : 		case D3DFMT_A8R8G8B8:
; 129  : 		case D3DFMT_R8G8B8:
; 130  : 			uScrDepthBits=32;
; 131  : 			break;
; 132  : 	}
; 133  : 
; 134  : 	int iVP=0;
; 135  : 
; 136  : 	switch (m_dwD3DBehavior)

  0002d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00030	0f 46 f1	 cmovbe	 esi, ecx
  00033	33 c9		 xor	 ecx, ecx
  00035	83 e8 20	 sub	 eax, 32			; 00000020H
  00038	74 16		 je	 SHORT $LN9@GetString
  0003a	83 e8 20	 sub	 eax, 32			; 00000020H
  0003d	74 0a		 je	 SHORT $LN7@GetString
  0003f	83 e8 40	 sub	 eax, 64			; 00000040H
  00042	75 11		 jne	 SHORT $LN4@GetString

; 141  : 		case D3DCREATE_MIXED_VERTEXPROCESSING:
; 142  : 			iVP=2;

  00044	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]

; 143  : 			break;

  00047	eb 0c		 jmp	 SHORT $LN4@GetString
$LN7@GetString:

; 137  : 	{
; 138  : 		case D3DCREATE_HARDWARE_VERTEXPROCESSING:
; 139  : 			iVP=1;

  00049	b9 01 00 00 00	 mov	 ecx, 1

; 140  : 			break;

  0004e	eb 05		 jmp	 SHORT $LN4@GetString
$LN9@GetString:

; 144  : 		case D3DCREATE_SOFTWARE_VERTEXPROCESSING:
; 145  : 			iVP=3;

  00050	b9 03 00 00 00	 mov	 ecx, 3
$LN4@GetString:

; 158  : 	_snprintf(szText, sizeof(szText), "%dx%dx%d %s\r\n", m_uScrWidth, m_uScrHeight, uScrDepthBits, szVP[iVP]);

  00055	ff 34 8d 00 00
	00 00		 push	 DWORD PTR ?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA[ecx*4]
  0005c	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00062	56		 push	 esi
  00063	ff 72 04	 push	 DWORD PTR [edx+4]
  00066	ff 32		 push	 DWORD PTR [edx]
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@
  0006d	68 01 04 00 00	 push	 1025			; 00000401H
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00078	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 158  : 	_snprintf(szText, sizeof(szText), "%dx%dx%d %s\r\n", m_uScrWidth, m_uScrHeight, uScrDepthBits, szVP[iVP]);

  0007e	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00081	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL15@GetString:
  00084	8a 08		 mov	 cl, BYTE PTR [eax]
  00086	40		 inc	 eax
  00087	84 c9		 test	 cl, cl
  00089	75 f9		 jne	 SHORT $LL15@GetString
  0008b	2b c2		 sub	 eax, edx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008d	8b cf		 mov	 ecx, edi
  0008f	50		 push	 eax
  00090	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 160  : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 160  : }

  000a0	33 cd		 xor	 ecx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a2	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpDetector.cpp

; 160  : }

  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_SModeInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_size$1$ = -16					; size = 4
__New_ptr$1 = -12					; size = 4
tv448 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv452 = 12						; size = 4
tv449 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f0	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 d6 00 00
	00		 jb	 $LN45@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN19@append

; 4203 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN42@append
$LN19@append:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv452[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv452[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN20@append

; 4207 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN42@append
$LN20@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv452[ebp]
  00090	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN42@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv449[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c1	89 4d f8	 mov	 DWORD PTR tv448[ebp], ecx
  000c4	72 3c		 jb	 SHORT $LN13@append

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c6	ff 75 f0	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000e7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f2	83 c4 20	 add	 esp, 32			; 00000020H

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	89 07		 mov	 DWORD PTR [edi], eax

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN13@append:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00102	56		 push	 esi
  00103	57		 push	 edi
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	53		 push	 ebx
  0010b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0010e	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  00111	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00116	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  00119	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011c	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0011f	50		 push	 eax
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00126	83 c4 20	 add	 esp, 32			; 00000020H
  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN45@append:

; 4250 :             _Xlen_string(); // result too long

  00134	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@append:
  00139	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);
; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1975 :         __crt_va_end(_ArgList);
; 1976 :         return _Result;
; 1977 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
