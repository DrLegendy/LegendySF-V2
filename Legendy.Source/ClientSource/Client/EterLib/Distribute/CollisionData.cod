; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 ; CDynamicPool<CSphereCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 ; CDynamicPool<CCylinderCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 ; CDynamicPool<CPlaneCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 ; CDynamicPool<CAABBCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 ; CDynamicPool<COBBCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8	; CDynamicPool<COBBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8	; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CSphereCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CCylinderCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CPlaneCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CAABBCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<COBBCollisionInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD 00H	; CDynamicPool<COBBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<COBBCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCOBBCollisionInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<COBBCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD 00H	; CDynamicPool<CAABBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CAABBCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCAABBCollisionInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CAABBCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD 00H ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CPlaneCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD 00H ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CCylinderCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD 00H ; CDynamicPool<CSphereCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CSphereCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCSphereCollisionInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CSphereCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?DestroyCollisionInstanceSystem@@YAXXZ		; DestroyCollisionInstanceSystem
PUBLIC	?Destroy@CBaseCollisionInstance@@QAEXXZ		; CBaseCollisionInstance::Destroy
PUBLIC	?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CBaseCollisionInstance::BuildCollisionInstance
PUBLIC	?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
PUBLIC	?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CSphereCollisionInstance::Render
PUBLIC	?OnDestroy@CSphereCollisionInstance@@MAEXXZ	; CSphereCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute
PUBLIC	?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CPlaneCollisionInstance::Render
PUBLIC	?OnDestroy@CPlaneCollisionInstance@@MAEXXZ	; CPlaneCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute
PUBLIC	?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CAABBCollisionInstance::Render
PUBLIC	?OnDestroy@CAABBCollisionInstance@@MAEXXZ	; CAABBCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute
PUBLIC	?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; COBBCollisionInstance::Render
PUBLIC	?OnDestroy@COBBCollisionInstance@@MAEXXZ	; COBBCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute
PUBLIC	?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CCylinderCollisionInstance::Render
PUBLIC	?OnDestroy@CCylinderCollisionInstance@@MAEXXZ	; CCylinderCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
PUBLIC	??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z ; CDynamicPool<CSphereCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z ; CDynamicPool<CCylinderCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z ; CDynamicPool<CPlaneCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z ; CDynamicPool<CAABBCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z ; CDynamicPool<COBBCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAXPAPAVCOBBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ; std::_Destroy_range<std::allocator<COBBCollisionInstance *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAXPAPAVCAABBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CAABBCollisionInstance *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAXPAPAVCPlaneCollisionInstance@@QAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CPlaneCollisionInstance *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAXPAPAVCCylinderCollisionInstance@@QAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CCylinderCollisionInstance *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAXPAPAVCSphereCollisionInstance@@QAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CSphereCollisionInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<COBBCollisionInstance * *,std::allocator<COBBCollisionInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CAABBCollisionInstance * *,std::allocator<CAABBCollisionInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CPlaneCollisionInstance * *,std::allocator<CPlaneCollisionInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CCylinderCollisionInstance * *,std::allocator<CCylinderCollisionInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CSphereCollisionInstance * *,std::allocator<CSphereCollisionInstance *> >
PUBLIC	??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CBaseCollisionInstance@@6B@			; CBaseCollisionInstance::`vftable'
PUBLIC	??_7CSphereCollisionInstance@@6B@		; CSphereCollisionInstance::`vftable'
PUBLIC	??_7CPlaneCollisionInstance@@6B@		; CPlaneCollisionInstance::`vftable'
PUBLIC	??_7CAABBCollisionInstance@@6B@			; CAABBCollisionInstance::`vftable'
PUBLIC	??_7COBBCollisionInstance@@6B@			; COBBCollisionInstance::`vftable'
PUBLIC	??_7CCylinderCollisionInstance@@6B@		; CCylinderCollisionInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A ; gs_sci
PUBLIC	?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A ; gs_cci
PUBLIC	?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A ; gs_pci
PUBLIC	?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A ; gs_aci
PUBLIC	?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A ; gs_oci
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CBaseCollisionInstance@@6B@		; CBaseCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseCollisionInstance@@@8		; CBaseCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCollisionInstance@@8			; CBaseCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCollisionInstance@@8			; CBaseCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseCollisionInstance@@8		; CBaseCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSphereCollisionInstance@@6B@		; CSphereCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSphereCollisionInstance@@@8		; CSphereCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CSphereCollisionInstance@@8		; CSphereCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSphereCollisionInstance@@8		; CSphereCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSphereCollisionInstance@@8	; CSphereCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPlaneCollisionInstance@@6B@		; CPlaneCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPlaneCollisionInstance@@@8		; CPlaneCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CPlaneCollisionInstance@@8			; CPlaneCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPlaneCollisionInstance@@8			; CPlaneCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPlaneCollisionInstance@@8	; CPlaneCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CAABBCollisionInstance@@6B@		; CAABBCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAABBCollisionInstance@@@8		; CAABBCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CAABBCollisionInstance@@8			; CAABBCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAABBCollisionInstance@@8			; CAABBCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAABBCollisionInstance@@8		; CAABBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4COBBCollisionInstance@@6B@			; COBBCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOBBCollisionInstance@@@8		; COBBCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3COBBCollisionInstance@@8			; COBBCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COBBCollisionInstance@@8			; COBBCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COBBCollisionInstance@@8		; COBBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCylinderCollisionInstance@@6B@		; CCylinderCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCylinderCollisionInstance@@@8		; CCylinderCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CCylinderCollisionInstance@@8		; CCylinderCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCylinderCollisionInstance@@8		; CCylinderCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCylinderCollisionInstance@@8	; CCylinderCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3f000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f800000
PUBLIC	__real@40800000
PUBLIC	__real@bf1a36e2eb1c432d
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z:PROC ; CScreen::RenderBar3d
EXTRN	?RenderCube@CScreen@@QAEXMMMMMM@Z:PROC		; CScreen::RenderCube
EXTRN	?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z:PROC ; CScreen::RenderCube
EXTRN	?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z:PROC ; CScreen::RenderSphere
EXTRN	?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z:PROC ; CScreen::RenderCylinder
EXTRN	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z:PROC ; IntersectLineSegments
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CSphereCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CSphereCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CPlaneCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CPlaneCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CCylinderCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CCylinderCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CAABBCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CAABBCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `COBBCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `COBBCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_sci$initializer$@@3P6AXXZA DD FLAT:??__Egs_sci@@YAXXZ ; gs_sci$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bf1a36e2eb1c432d
CONST	SEGMENT
__real@bf1a36e2eb1c432d DQ 0bf1a36e2eb1c432dr	; -0.0001
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCylinderCollisionInstance@@8 DD FLAT:??_R0?AVCCylinderCollisionInstance@@@8 ; CCylinderCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R2CCylinderCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CCylinderCollisionInstance@@8 ; CCylinderCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R3CCylinderCollisionInstance@@8 DD 00H		; CCylinderCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCylinderCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCCylinderCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CCylinderCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCylinderCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCylinderCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CCylinderCollisionInstance@@6B@ DD 00H		; CCylinderCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCylinderCollisionInstance@@@8
	DD	FLAT:??_R3CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COBBCollisionInstance@@8 DD FLAT:??_R0?AVCOBBCollisionInstance@@@8 ; COBBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R2COBBCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@COBBCollisionInstance@@8 ; COBBCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R3COBBCollisionInstance@@8 DD 00H			; COBBCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOBBCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCOBBCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; COBBCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOBBCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4COBBCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4COBBCollisionInstance@@6B@ DD 00H			; COBBCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOBBCollisionInstance@@@8
	DD	FLAT:??_R3COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAABBCollisionInstance@@8 DD FLAT:??_R0?AVCAABBCollisionInstance@@@8 ; CAABBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R2CAABBCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CAABBCollisionInstance@@8 ; CAABBCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R3CAABBCollisionInstance@@8 DD 00H			; CAABBCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAABBCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCAABBCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CAABBCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAABBCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAABBCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CAABBCollisionInstance@@6B@ DD 00H			; CAABBCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAABBCollisionInstance@@@8
	DD	FLAT:??_R3CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPlaneCollisionInstance@@8 DD FLAT:??_R0?AVCPlaneCollisionInstance@@@8 ; CPlaneCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R2CPlaneCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CPlaneCollisionInstance@@8 ; CPlaneCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R3CPlaneCollisionInstance@@8 DD 00H			; CPlaneCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPlaneCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCPlaneCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CPlaneCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPlaneCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPlaneCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CPlaneCollisionInstance@@6B@ DD 00H		; CPlaneCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPlaneCollisionInstance@@@8
	DD	FLAT:??_R3CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSphereCollisionInstance@@8 DD FLAT:??_R0?AVCSphereCollisionInstance@@@8 ; CSphereCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R2CSphereCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CSphereCollisionInstance@@8 ; CSphereCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R3CSphereCollisionInstance@@8 DD 00H			; CSphereCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSphereCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCSphereCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CSphereCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSphereCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSphereCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CSphereCollisionInstance@@6B@ DD 00H		; CSphereCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSphereCollisionInstance@@@8
	DD	FLAT:??_R3CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCollisionInstance@@8 DD FLAT:??_R0?AVCBaseCollisionInstance@@@8 ; CBaseCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R2CBaseCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8 ; CBaseCollisionInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R3CBaseCollisionInstance@@8 DD 00H			; CBaseCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCollisionInstance@@@8
data$r	SEGMENT
??_R0?AVCBaseCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CBaseCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCollisionInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CBaseCollisionInstance@@6B@ DD 00H			; CBaseCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCollisionInstance@@@8
	DD	FLAT:??_R3CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; gs_sci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; gs_cci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; gs_pci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; gs_aci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; gs_oci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CCylinderCollisionInstance@@6B@
CONST	SEGMENT
??_7CCylinderCollisionInstance@@6B@ DD FLAT:??_R4CCylinderCollisionInstance@@6B@ ; CCylinderCollisionInstance::`vftable'
	DD	FLAT:?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CCylinderCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7COBBCollisionInstance@@6B@
CONST	SEGMENT
??_7COBBCollisionInstance@@6B@ DD FLAT:??_R4COBBCollisionInstance@@6B@ ; COBBCollisionInstance::`vftable'
	DD	FLAT:?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@COBBCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CAABBCollisionInstance@@6B@
CONST	SEGMENT
??_7CAABBCollisionInstance@@6B@ DD FLAT:??_R4CAABBCollisionInstance@@6B@ ; CAABBCollisionInstance::`vftable'
	DD	FLAT:?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CAABBCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CPlaneCollisionInstance@@6B@
CONST	SEGMENT
??_7CPlaneCollisionInstance@@6B@ DD FLAT:??_R4CPlaneCollisionInstance@@6B@ ; CPlaneCollisionInstance::`vftable'
	DD	FLAT:?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CPlaneCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CSphereCollisionInstance@@6B@
CONST	SEGMENT
??_7CSphereCollisionInstance@@6B@ DD FLAT:??_R4CSphereCollisionInstance@@6B@ ; CSphereCollisionInstance::`vftable'
	DD	FLAT:?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CSphereCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CBaseCollisionInstance@@6B@
CONST	SEGMENT
??_7CBaseCollisionInstance@@6B@ DD FLAT:??_R4CBaseCollisionInstance@@6B@ ; CBaseCollisionInstance::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?gs_cci$initializer$@@3P6AXXZA DD FLAT:??__Egs_cci@@YAXXZ ; gs_cci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_pci$initializer$@@3P6AXXZA DD FLAT:??__Egs_pci@@YAXXZ ; gs_pci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_aci$initializer$@@3P6AXXZA DD FLAT:??__Egs_aci@@YAXXZ ; gs_aci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_oci$initializer$@@3P6AXXZA DD FLAT:??__Egs_oci@@YAXXZ ; gs_oci$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z PROC ; std::_Uninitialized_move<CSphereCollisionInstance * *,std::allocator<CSphereCollisionInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CSphereCollisionInstance * *,std::allocator<CSphereCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z PROC ; std::_Uninitialized_move<CCylinderCollisionInstance * *,std::allocator<CCylinderCollisionInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CCylinderCollisionInstance * *,std::allocator<CCylinderCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z PROC ; std::_Uninitialized_move<CPlaneCollisionInstance * *,std::allocator<CPlaneCollisionInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CPlaneCollisionInstance * *,std::allocator<CPlaneCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z PROC ; std::_Uninitialized_move<CAABBCollisionInstance * *,std::allocator<CAABBCollisionInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CAABBCollisionInstance * *,std::allocator<CAABBCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z PROC ; std::_Uninitialized_move<COBBCollisionInstance * *,std::allocator<COBBCollisionInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ENDP ; std::_Uninitialized_move<COBBCollisionInstance * *,std::allocator<COBBCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAXPAPAVCSphereCollisionInstance@@QAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAXPAPAVCSphereCollisionInstance@@QAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CSphereCollisionInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAXPAPAVCSphereCollisionInstance@@QAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CSphereCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAXPAPAVCCylinderCollisionInstance@@QAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAXPAPAVCCylinderCollisionInstance@@QAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CCylinderCollisionInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAXPAPAVCCylinderCollisionInstance@@QAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CCylinderCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAXPAPAVCPlaneCollisionInstance@@QAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAXPAPAVCPlaneCollisionInstance@@QAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CPlaneCollisionInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAXPAPAVCPlaneCollisionInstance@@QAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CPlaneCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAXPAPAVCAABBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAXPAPAVCAABBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CAABBCollisionInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAXPAPAVCAABBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CAABBCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAXPAPAVCOBBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAXPAPAVCOBBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<COBBCollisionInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAXPAPAVCOBBCollisionInstance@@QAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<COBBCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CSphereCollisionInstance * *,std::allocator<CSphereCollisionInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@YAPAPAVCSphereCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSphereCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CSphereCollisionInstance * *,std::allocator<CSphereCollisionInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CCylinderCollisionInstance * *,std::allocator<CCylinderCollisionInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@YAPAPAVCCylinderCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCCylinderCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CCylinderCollisionInstance * *,std::allocator<CCylinderCollisionInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CPlaneCollisionInstance * *,std::allocator<CPlaneCollisionInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@YAPAPAVCPlaneCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCPlaneCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CPlaneCollisionInstance * *,std::allocator<CPlaneCollisionInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CAABBCollisionInstance * *,std::allocator<CAABBCollisionInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@YAPAPAVCAABBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCAABBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<CAABBCollisionInstance * *,std::allocator<CAABBCollisionInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<COBBCollisionInstance * *,std::allocator<COBBCollisionInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@YAPAPAVCOBBCollisionInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCOBBCollisionInstance@@@0@@Z ; std::_Uninitialized_move<COBBCollisionInstance * *,std::allocator<COBBCollisionInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_oci@@YAXXZ
text$yd	SEGMENT
??__Fgs_oci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_oci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A ; gs_oci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
??__Fgs_oci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_oci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_oci@@YAXXZ
text$di	SEGMENT
??__Egs_oci@@YAXXZ PROC					; `dynamic initializer for 'gs_oci'', COMDAT

; 22   : CDynamicPool<COBBCollisionInstance> gs_oci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_oci@@YAXXZ ; `dynamic atexit destructor for 'gs_oci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_oci@@YAXXZ ENDP					; `dynamic initializer for 'gs_oci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z PROC ; CDynamicPool<COBBCollisionInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	6a 5c		 push	 92			; 0000005cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z ENDP ; CDynamicPool<COBBCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ PROC	; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ENDP	; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_aci@@YAXXZ
text$yd	SEGMENT
??__Fgs_aci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_aci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A ; gs_aci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
??__Fgs_aci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_aci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_aci@@YAXXZ
text$di	SEGMENT
??__Egs_aci@@YAXXZ PROC					; `dynamic initializer for 'gs_aci'', COMDAT

; 21   : CDynamicPool<CAABBCollisionInstance> gs_aci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_aci@@YAXXZ ; `dynamic atexit destructor for 'gs_aci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_aci@@YAXXZ ENDP					; `dynamic initializer for 'gs_aci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z PROC ; CDynamicPool<CAABBCollisionInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	6a 1c		 push	 28			; 0000001cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z ENDP ; CDynamicPool<CAABBCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_pci@@YAXXZ
text$yd	SEGMENT
??__Fgs_pci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_pci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A ; gs_pci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
??__Fgs_pci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_pci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_pci@@YAXXZ
text$di	SEGMENT
??__Egs_pci@@YAXXZ PROC					; `dynamic initializer for 'gs_pci'', COMDAT

; 20   : CDynamicPool<CPlaneCollisionInstance> gs_pci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_pci@@YAXXZ ; `dynamic atexit destructor for 'gs_pci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_pci@@YAXXZ ENDP					; `dynamic initializer for 'gs_pci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z PROC ; CDynamicPool<CPlaneCollisionInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	6a 7c		 push	 124			; 0000007cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z ENDP ; CDynamicPool<CPlaneCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_cci@@YAXXZ
text$yd	SEGMENT
??__Fgs_cci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_cci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A ; gs_cci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
??__Fgs_cci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_cci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_cci@@YAXXZ
text$di	SEGMENT
??__Egs_cci@@YAXXZ PROC					; `dynamic initializer for 'gs_cci'', COMDAT

; 19   : CDynamicPool<CCylinderCollisionInstance> gs_cci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_cci@@YAXXZ ; `dynamic atexit destructor for 'gs_cci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_cci@@YAXXZ ENDP					; `dynamic initializer for 'gs_cci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z PROC ; CDynamicPool<CCylinderCollisionInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	6a 18		 push	 24			; 00000018H
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z ENDP ; CDynamicPool<CCylinderCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_sci@@YAXXZ
text$yd	SEGMENT
??__Fgs_sci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_sci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A ; gs_sci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
??__Fgs_sci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_sci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_sci@@YAXXZ
text$di	SEGMENT
??__Egs_sci@@YAXXZ PROC					; `dynamic initializer for 'gs_sci'', COMDAT

; 18   : CDynamicPool<CSphereCollisionInstance> gs_sci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_sci@@YAXXZ ; `dynamic atexit destructor for 'gs_sci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_sci@@YAXXZ ENDP					; `dynamic initializer for 'gs_sci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z PROC ; CDynamicPool<CSphereCollisionInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	6a 14		 push	 20			; 00000014H
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z ENDP ; CDynamicPool<CSphereCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_ob$ = -40						; size = 12
_oa$ = -28						; size = 12
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rattribute$ = 8					; size = 4
_s$ = 12						; size = 4
?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _c_rattribute$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]

; 451  : 	if (s.v3Position.z + s.fRadius < c_rattribute.v3Position.z)

  00018	f3 0f 10 66 08	 movss	 xmm4, DWORD PTR [esi+8]
  0001d	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00022	f3 0f 10 5f 18	 movss	 xmm3, DWORD PTR [edi+24]
  00027	0f 28 c1	 movaps	 xmm0, xmm1
  0002a	f3 0f 58 c3	 addss	 xmm0, xmm3
  0002e	0f 2f e0	 comiss	 xmm4, xmm0
  00031	0f 87 a0 00 00
	00		 ja	 $LN13@CollideCyl

; 452  : 		return false;
; 453  : 
; 454  : 	if (s.v3Position.z - s.fRadius > c_rattribute.v3Position.z + c_rattribute.fHeight)

  00037	f3 0f 10 56 10	 movss	 xmm2, DWORD PTR [esi+16]
  0003c	f3 0f 5c cb	 subss	 xmm1, xmm3
  00040	f3 0f 58 d4	 addss	 xmm2, xmm4
  00044	0f 2f ca	 comiss	 xmm1, xmm2
  00047	0f 87 8a 00 00
	00		 ja	 $LN13@CollideCyl
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0004d	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 464  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x,c_rattribute.v3Position.y,c_rattribute.v3Position.z+c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00051	8d 45 d8	 lea	 eax, DWORD PTR _ob$[ebp]
  00054	50		 push	 eax
  00055	8d 45 e4	 lea	 eax, DWORD PTR _oa$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00058	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 181  :     y = fy;

  0005d	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 464  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x,c_rattribute.v3Position.y,c_rattribute.v3Position.z+c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00062	50		 push	 eax
  00063	57		 push	 edi
  00064	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00067	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 464  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x,c_rattribute.v3Position.y,c_rattribute.v3Position.z+c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  0006c	50		 push	 eax
  0006d	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00070	f3 0f 11 55 f8	 movss	 DWORD PTR $T1[ebp+8], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 464  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x,c_rattribute.v3Position.y,c_rattribute.v3Position.z+c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00075	50		 push	 eax
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007c	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _oa$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 464  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x,c_rattribute.v3Position.y,c_rattribute.v3Position.z+c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00081	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00084	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _oa$[ebp+4]
  00089	f3 0f 5c 5d dc	 subss	 xmm3, DWORD PTR _ob$[ebp+4]
  0008e	f3 0f 5c 55 d8	 subss	 xmm2, DWORD PTR _ob$[ebp]
  00093	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _oa$[ebp+8]
  00098	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _ob$[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 465  : 	return (D3DXVec3LengthSq(&(oa-ob))<=(c_rattribute.fRadius+s.fRadius)*(c_rattribute.fRadius+s.fRadius));

  0009d	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  000a2	f3 0f 58 4f 18	 addss	 xmm1, DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000a7	f3 0f 59 db	 mulss	 xmm3, xmm3
  000ab	5f		 pop	 edi

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000ac	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 466  : }

  000b0	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b1	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b5	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 465  : 	return (D3DXVec3LengthSq(&(oa-ob))<=(c_rattribute.fRadius+s.fRadius)*(c_rattribute.fRadius+s.fRadius));

  000b9	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000bd	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 465  : 	return (D3DXVec3LengthSq(&(oa-ob))<=(c_rattribute.fRadius+s.fRadius)*(c_rattribute.fRadius+s.fRadius));

  000c1	0f 2f cb	 comiss	 xmm1, xmm3
  000c4	0f 93 c0	 setae	 al

; 466  : }

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	33 cd		 xor	 ecx, ebp
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 08 00	 ret	 8
$LN13@CollideCyl:
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	32 c0		 xor	 al, al
  000dc	5f		 pop	 edi
  000dd	33 cd		 xor	 ecx, ebp
  000df	5e		 pop	 esi
  000e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 08 00	 ret	 8
?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1063 = -28						; size = 4
tv1064 = -24						; size = 4
tv1065 = -20						; size = 4
tv1021 = -20						; size = 4
tv1023 = -16						; size = 4
_sum$1$ = -16						; size = 4
_v3Position$ = -12					; size = 12
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 513  : 	v3Position.z = s.v3Position.z;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  0000c	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00011	66 0f d6 44 24
	10		 movq	 QWORD PTR _v3Position$[esp+28], xmm0
  00017	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00018	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0001c	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]
  00021	0f 28 da	 movaps	 xmm3, xmm2
  00024	f3 0f 5c 5c 24
	14		 subss	 xmm3, DWORD PTR _v3Position$[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 513  : 	v3Position.z = s.v3Position.z;

  0002a	f3 0f 10 78 08	 movss	 xmm7, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0002f	0f 28 cc	 movaps	 xmm1, xmm4
  00032	f3 0f 5c 4c 24
	18		 subss	 xmm1, DWORD PTR _v3Position$[esp+36]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 514  : 	if (D3DXVec3LengthSq(&(s.v3Position-v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0003b	f3 0f 5c ff	 subss	 xmm7, xmm7

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0003f	0f 28 c3	 movaps	 xmm0, xmm3

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00042	f3 0f 11 5c 24
	10		 movss	 DWORD PTR tv1023[esp+32], xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00048	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 514  : 	if (D3DXVec3LengthSq(&(s.v3Position-v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  0004c	f3 0f 10 58 18	 movss	 xmm3, DWORD PTR [eax+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00051	0f 28 f1	 movaps	 xmm6, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 514  : 	if (D3DXVec3LengthSq(&(s.v3Position-v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00054	f3 0f 58 59 10	 addss	 xmm3, DWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00059	f3 0f 59 f1	 mulss	 xmm6, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0005d	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 514  : 	if (D3DXVec3LengthSq(&(s.v3Position-v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00061	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00065	0f 28 c7	 movaps	 xmm0, xmm7
  00068	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0006c	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 514  : 	if (D3DXVec3LengthSq(&(s.v3Position-v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00070	0f 2f f3	 comiss	 xmm6, xmm3
  00073	72 1d		 jb	 SHORT $LN2@OnGetColli
$LN49@OnGetColli:

; 550  : }

  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0007b	8b c6		 mov	 eax, esi
  0007d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00084	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN2@OnGetColli:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00092	f3 0f 5c 60 10	 subss	 xmm4, DWORD PTR [eax+16]
  00097	f3 0f 5c 50 0c	 subss	 xmm2, DWORD PTR [eax+12]
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 522  : 	float mul = (s.fRadius+m_attribute.fRadius)*(s.fRadius+m_attribute.fRadius)-D3DXVec3LengthSq(&(s.v3Position-v3Position));

  0009f	f3 0f 5c de	 subss	 xmm3, xmm6
  000a3	0f 57 ed	 xorps	 xmm5, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a6	f3 0f 11 64 24
	0c		 movss	 DWORD PTR tv1021[esp+32], xmm4

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000ac	f3 0f 5c e0	 subss	 xmm4, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000b0	f3 0f 5c ea	 subss	 xmm5, xmm2
  000b4	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 524  : 	if (sum*sum-4*mul<=0)

  000b8	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@40800000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000c0	f3 0f 11 64 24
	04		 movss	 DWORD PTR tv1063[esp+32], xmm4

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000c6	f3 0f 10 64 24
	0c		 movss	 xmm4, DWORD PTR tv1021[esp+32]

; 182  :     z = fz;

  000cc	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000d0	f3 0f 59 e0	 mulss	 xmm4, xmm0
  000d4	f3 0f 11 6c 24
	08		 movss	 DWORD PTR tv1064[esp+32], xmm5

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000da	f3 0f 10 6c 24
	10		 movss	 xmm5, DWORD PTR tv1023[esp+32]
  000e0	f3 0f 59 6c 24
	04		 mulss	 xmm5, DWORD PTR tv1063[esp+32]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000e6	f3 0f 5c d4	 subss	 xmm2, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000ea	f3 0f 58 cd	 addss	 xmm1, xmm5
  000ee	f3 0f 59 fa	 mulss	 xmm7, xmm2

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000f2	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv1065[esp+32], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000f8	f3 0f 58 cf	 addss	 xmm1, xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 521  : 	float sum = - D3DXVec3Dot(&c,&(s.v3Position-v3Position));

  000fc	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 524  : 	if (sum*sum-4*mul<=0)

  00103	0f 28 d1	 movaps	 xmm2, xmm1
  00106	f3 0f 11 4c 24
	10		 movss	 DWORD PTR _sum$1$[esp+32], xmm1
  0010c	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00110	f3 0f 5c d3	 subss	 xmm2, xmm3
  00114	0f 2f c2	 comiss	 xmm0, xmm2
  00117	0f 83 58 ff ff
	ff		 jae	 $LN49@OnGetColli

; 525  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 526  : 	float sq = sqrt(sum*sum-4*mul);

  0011d	0f 57 c0	 xorps	 xmm0, xmm0
  00120	0f 57 c9	 xorps	 xmm1, xmm1
  00123	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
  00127	66 0f 2e c8	 ucomisd xmm1, xmm0
  0012b	77 06		 ja	 SHORT $LN45@OnGetColli
  0012d	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00131	eb 05		 jmp	 SHORT $LN46@OnGetColli
$LN45@OnGetColli:
  00133	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN46@OnGetColli:

; 527  : 	float t1=-sum-sq, t2=-sum+sq;

  00138	f3 0f 10 5c 24
	10		 movss	 xmm3, DWORD PTR _sum$1$[esp+32]
  0013e	0f 57 e4	 xorps	 xmm4, xmm4
  00141	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 528  : 	t1*=0.5f;
; 529  : 	t2*=0.5f;
; 530  : 
; 531  : 
; 532  : 	if (fabs(t1)<=fabs(t2))

  00148	0f 57 d2	 xorps	 xmm2, xmm2
  0014b	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  00153	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
  00157	f3 0f 5c dc	 subss	 xmm3, xmm4
  0015b	f3 0f 5c 64 24
	10		 subss	 xmm4, DWORD PTR _sum$1$[esp+32]
  00161	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00165	f3 0f 59 e5	 mulss	 xmm4, xmm5
  00169	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  0016d	0f 5a c4	 cvtps2pd xmm0, xmm4
  00170	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00177	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0017e	66 0f 2f c2	 comisd	 xmm0, xmm2
  00182	72 33		 jb	 SHORT $LN4@OnGetColli

; 533  : 	{
; 534  : 		return (gc_fReduceMove*t1)*c;

  00184	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 550  : }

  00188	8b c6		 mov	 eax, esi
  0018a	0f 28 c3	 movaps	 xmm0, xmm3
  0018d	f3 0f 59 44 24
	04		 mulss	 xmm0, DWORD PTR tv1063[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00193	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00197	0f 28 c3	 movaps	 xmm0, xmm3

; 181  :     y = fy;

  0019a	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR tv1065[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 550  : }

  001a0	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1064[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001a6	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 550  : }

  001ab	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001b0	5e		 pop	 esi
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
$LN4@OnGetColli:

; 535  : 	}
; 536  : 	else
; 537  : 		return (gc_fReduceMove*t2)*c;

  001b7	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 550  : }

  001bb	8b c6		 mov	 eax, esi
  001bd	0f 28 c4	 movaps	 xmm0, xmm4
  001c0	f3 0f 59 44 24
	04		 mulss	 xmm0, DWORD PTR tv1063[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001c6	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001ca	0f 28 c4	 movaps	 xmm0, xmm4

; 181  :     y = fy;

  001cd	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR tv1065[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 550  : }

  001d3	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1064[esp+32]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001d9	f3 0f 11 66 08	 movss	 DWORD PTR [esi+8], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 550  : }

  001de	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001e3	5e		 pop	 esi
  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  : 	//Tracef("OnCollisionDynamicSphere\n");
; 506  : 
; 507  : 	return (CollideCylinderVSDynamicSphere(m_attribute, s));

  00003	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere

; 508  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Step$1$sroa$292$1$ = -40				; size = 4
_v3Step$1$sroa$291$1$ = -36				; size = 4
_v3Step$1$sroa$290$1$ = -32				; size = 4
_iStep$1$ = -28						; size = 4
_cylinder$2 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+44], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	8b d9		 mov	 ebx, ecx
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]

; 470  : 	if (CollideCylinderVSDynamicSphere(m_attribute, s))

  0001c	57		 push	 edi
  0001d	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
  00026	84 c0		 test	 al, al
  00028	74 46		 je	 SHORT $LN35@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0002a	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  0002f	f3 0f 10 27	 movss	 xmm4, DWORD PTR [edi]
  00033	f3 0f 10 57 10	 movss	 xmm2, DWORD PTR [edi+16]
  00038	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  0003d	f3 0f 5c 26	 subss	 xmm4, DWORD PTR [esi]
  00041	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]
  00045	f3 0f 5c 5e 04	 subss	 xmm3, DWORD PTR [esi+4]
  0004a	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  0004f	f3 0f 59 e4	 mulss	 xmm4, xmm4
  00053	f3 0f 59 db	 mulss	 xmm3, xmm3
  00057	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0005b	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0005f	f3 0f 58 e3	 addss	 xmm4, xmm3
  00063	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 472  : 		if (GetVector3Distance(s.v3Position, m_attribute.v3Position) <

  00067	0f 2f cc	 comiss	 xmm1, xmm4
  0006a	0f 87 7c 01 00
	00		 ja	 $LN30@OnMovement
$LN35@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00070	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00075	f3 0f 5c 47 10	 subss	 xmm0, DWORD PTR [edi+16]
  0007a	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  0007e	f3 0f 5c 57 0c	 subss	 xmm2, DWORD PTR [edi+12]
  00083	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  00088	f3 0f 5c 5f 14	 subss	 xmm3, DWORD PTR [edi+20]

; 182  :     z = fz;

  0008d	0f 28 c8	 movaps	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00090	f3 0f 11 44 24
	14		 movss	 DWORD PTR _v3Step$1$sroa$291$1$[esp+56], xmm0

; 182  :     z = fz;

  00096	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0009a	0f 28 c2	 movaps	 xmm0, xmm2

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0009d	f3 0f 11 54 24
	10		 movss	 DWORD PTR _v3Step$1$sroa$292$1$[esp+56], xmm2

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000a3	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a7	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _v3Step$1$sroa$290$1$[esp+56], xmm3

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000ad	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b1	0f 28 c3	 movaps	 xmm0, xmm3
  000b4	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000b8	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000bc	0f 5a c1	 cvtps2pd xmm0, xmm1
  000bf	0f 57 c9	 xorps	 xmm1, xmm1
  000c2	66 0f 2e c8	 ucomisd xmm1, xmm0
  000c6	77 06		 ja	 SHORT $LN36@OnMovement
  000c8	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000cc	eb 05		 jmp	 SHORT $LN37@OnMovement
$LN36@OnMovement:
  000ce	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN37@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 480  : 	if (s.fRadius<=0.0001f)

  000d3	f3 0f 10 4f 18	 movss	 xmm1, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000d8	0f 57 d2	 xorps	 xmm2, xmm2
  000db	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 480  : 	if (s.fRadius<=0.0001f)

  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@38d1b717
  000e7	0f 2f c1	 comiss	 xmm0, xmm1
  000ea	0f 83 e6 00 00
	00		 jae	 $LN3@OnMovement

; 481  : 		return false;
; 482  : 	if (fDistance >= s.fRadius*2.0f)

  000f0	0f 28 c1	 movaps	 xmm0, xmm1
  000f3	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f7	0f 2f d0	 comiss	 xmm2, xmm0
  000fa	0f 82 d6 00 00
	00		 jb	 $LN3@OnMovement

; 488  : 		int iStep = fDistance / s.fRadius*2.0f;

  00100	f3 0f 5e d1	 divss	 xmm2, xmm1
  00104	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00107	89 44 24 30	 mov	 DWORD PTR _cylinder$2[esp+72], eax
  0010b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0010e	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 491  : 		for (int i = 0; i < iStep; ++i)

  00111	33 f6		 xor	 esi, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 275  :     FLOAT fInv = 1.0f / f;

  00113	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 488  : 		int iStep = fDistance / s.fRadius*2.0f;

  0011b	f3 0f 58 d2	 addss	 xmm2, xmm2
  0011f	0f 11 44 24 20	 movups	 XMMWORD PTR _cylinder$2[esp+56], xmm0
  00124	89 44 24 28	 mov	 DWORD PTR _cylinder$2[esp+64], eax
  00128	f3 0f 7e 47 0c	 movq	 xmm0, QWORD PTR [edi+12]
  0012d	66 0f d6 44 24
	20		 movq	 QWORD PTR _cylinder$2[esp+56], xmm0
  00133	f3 0f 2c c2	 cvttss2si eax, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00137	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _v3Step$1$sroa$291$1$[esp+56]

; 181  :     y = fy;

  0013d	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _v3Step$1$sroa$290$1$[esp+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 488  : 		int iStep = fDistance / s.fRadius*2.0f;

  00143	89 44 24 1c	 mov	 DWORD PTR _iStep$1$[esp+56], eax
  00147	66 0f 6e c0	 movd	 xmm0, eax

; 489  : 		D3DXVECTOR3 v3Step = v3Distance / float(iStep);

  0014b	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 275  :     FLOAT fInv = 1.0f / f;

  0014e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00152	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _v3Step$1$sroa$292$1$[esp+56]
  00158	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 180  :     x = fx;

  0015c	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 181  :     y = fy;

  00160	f3 0f 59 d9	 mulss	 xmm3, xmm1

; 275  :     FLOAT fInv = 1.0f / f;

  00164	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Step$1$sroa$292$1$[esp+56], xmm0

; 180  :     x = fx;

  0016a	f3 0f 11 54 24
	14		 movss	 DWORD PTR _v3Step$1$sroa$291$1$[esp+56], xmm2

; 181  :     y = fy;

  00170	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _v3Step$1$sroa$290$1$[esp+56], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 491  : 		for (int i = 0; i < iStep; ++i)

  00176	85 c0		 test	 eax, eax
  00178	7e 5c		 jle	 SHORT $LN3@OnMovement
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL4@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00180	f3 0f 58 44 24
	20		 addss	 xmm0, DWORD PTR _cylinder$2[esp+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 494  : 			if (CollideCylinderVSDynamicSphere(cylinder, s))

  00186	57		 push	 edi
  00187	8d 44 24 24	 lea	 eax, DWORD PTR _cylinder$2[esp+60]
  0018b	8b cb		 mov	 ecx, ebx
  0018d	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0018e	f3 0f 11 44 24
	28		 movss	 DWORD PTR _cylinder$2[esp+64], xmm0

; 205  :     y += v.y;

  00194	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR _cylinder$2[esp+68]
  0019a	f3 0f 58 c2	 addss	 xmm0, xmm2
  0019e	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _cylinder$2[esp+68], xmm0

; 206  :     z += v.z;

  001a4	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR _cylinder$2[esp+72]
  001aa	f3 0f 58 c3	 addss	 xmm0, xmm3
  001ae	f3 0f 11 44 24
	30		 movss	 DWORD PTR _cylinder$2[esp+72], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 494  : 			if (CollideCylinderVSDynamicSphere(cylinder, s))

  001b4	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
  001b9	84 c0		 test	 al, al
  001bb	75 2f		 jne	 SHORT $LN30@OnMovement

; 491  : 		for (int i = 0; i < iStep; ++i)

  001bd	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _v3Step$1$sroa$292$1$[esp+56]
  001c3	46		 inc	 esi
  001c4	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _v3Step$1$sroa$291$1$[esp+56]
  001ca	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _v3Step$1$sroa$290$1$[esp+56]
  001d0	3b 74 24 1c	 cmp	 esi, DWORD PTR _iStep$1$[esp+56]
  001d4	7c aa		 jl	 SHORT $LL4@OnMovement
$LN3@OnMovement:

; 495  : 				return true;
; 496  : 
; 497  : 		}
; 498  : 	}
; 499  : 
; 500  : 	return false;

  001d6	32 c0		 xor	 al, al

; 501  : }

  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  001df	33 cc		 xor	 ecx, esp
  001e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 04 00	 ret	 4
$LN30@OnMovement:
  001ec	8b 4c 24 34	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+56]
  001f0	b0 01		 mov	 al, 1
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
  001f5	33 cc		 xor	 ecx, esp
  001f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CCylinderCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CCylinderCollisionInstance@@MAEXXZ PROC	; CCylinderCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 561  : 	gs_cci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 562  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 562  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CCylinderCollisionInstance@@MAEXXZ ENDP	; CCylinderCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CCylinderCollisionInstance::Render, COMDAT
; _this$ = ecx

; 553  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 554  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 71		 jg	 SHORT $LN7@Render
$LN2@Render:

; 555  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 556  : 	s.RenderCylinder(NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z+m_attribute.fHeight/2, m_attribute.fRadius, m_attribute.fHeight, d3dFillMode);

  00050	ff 75 08	 push	 DWORD PTR _d3dFillMode$[ebp]
  00053	f3 0f 10 4e 14	 movss	 xmm1, DWORD PTR [esi+20]
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005d	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00062	83 ec 14	 sub	 esp, 20			; 00000014H
  00065	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  0006b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00073	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00079	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0007e	f3 0f 58 4e 0c	 addss	 xmm1, DWORD PTR [esi+12]
  00083	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00089	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008f	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 ?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderCylinder

; 557  : }

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
$LN7@Render:

; 554  : 	static CScreen s;

  000b2	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b7	e8 00 00 00 00	 call	 __Init_thread_header
  000bc	83 c4 04	 add	 esp, 4
  000bf	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000c6	0f 85 75 ff ff
	ff		 jne	 $LN2@Render
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000d1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d8	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000dd	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000e2	e8 00 00 00 00	 call	 _atexit
  000e7	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f3	e8 00 00 00 00	 call	 __Init_thread_footer
  000f8	83 c4 08	 add	 esp, 8
  000fb	e9 41 ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CCylinderCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ
_TEXT	SEGMENT
?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ PROC ; CCylinderCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 446  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 447  : }

  00003	c3		 ret	 0
?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ ENDP ; CCylinderCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ
_TEXT	SEGMENT
?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ PROC ; CCylinderCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 441  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 442  : }

  00003	c3		 ret	 0
?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ENDP ; CCylinderCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 808  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :     y = fy;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 182  :     z = fz;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 812  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Point$ = -40						; size = 12
_v3Center$$sroa$746$1$ = -28				; size = 4
_v3Sphere$4$ = -24					; size = 4
_v3Sphere$2$ = -20					; size = 4
_v3Sphere$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00018	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00023	f3 0f 10 4e 10	 movss	 xmm1, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00028	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0002b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00030	f3 0f 10 56 14	 movss	 xmm2, DWORD PTR [esi+20]
  00035	f3 0f 10 5e 18	 movss	 xmm3, DWORD PTR [esi+24]
  0003a	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]
  0003f	f3 0f 58 5e 0c	 addss	 xmm3, DWORD PTR [esi+12]

; 182  :     z = fz;

  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00048	53		 push	 ebx
  00049	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0004a	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0004e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0004f	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00053	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00057	f3 0f 5c c1	 subss	 xmm0, xmm1

; 182  :     z = fz;

  0005b	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Sphere$2$[ebp], xmm1

; 180  :     x = fx;

  00060	f3 0f 11 55 e8	 movss	 DWORD PTR _v3Sphere$4$[ebp], xmm2

; 181  :     y = fy;

  00065	f3 0f 11 5d e4	 movss	 DWORD PTR _v3Center$$sroa$746$1$[ebp], xmm3

; 180  :     x = fx;

  0006a	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006f	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00074	f3 0f 5c c2	 subss	 xmm0, xmm2

; 181  :     y = fy;

  00078	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00082	f3 0f 5c c3	 subss	 xmm0, xmm3

; 182  :     z = fz;

  00086	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0008b	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00090	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00095	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _v3Sphere$2$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0009a	f3 0f 10 6d e4	 movss	 xmm5, DWORD PTR _v3Center$$sroa$746$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 776  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0009f	0f 28 f3	 movaps	 xmm6, xmm3
  000a2	f3 0f 58 75 f0	 addss	 xmm6, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000a7	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR _v3Sphere$[ebp+4]

; 181  :     y = fy;

  000ac	f3 0f 58 c5	 addss	 xmm0, xmm5
  000b0	f3 0f 10 65 e8	 movss	 xmm4, DWORD PTR _v3Sphere$4$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 780  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000b5	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000ba	f3 0f 58 fc	 addss	 xmm7, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 780  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000be	0f 2f d6	 comiss	 xmm2, xmm6
  000c1	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
  000c6	0f 28 c6	 movaps	 xmm0, xmm6
  000c9	0f 14 c7	 unpcklps xmm0, xmm7
  000cc	66 0f d6 45 f0	 movq	 QWORD PTR _v3Sphere$[ebp], xmm0
  000d1	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  000d6	77 05		 ja	 SHORT $LN2@OnCollisio
  000d8	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN2@OnCollisio:

; 781  : 	if(v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  000dd	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  000e2	0f 2f d0	 comiss	 xmm2, xmm0
  000e5	76 03		 jbe	 SHORT $LN3@OnCollisio
  000e7	0f 28 d0	 movaps	 xmm2, xmm0
$LN3@OnCollisio:

; 782  : 	if(v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  000ea	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ef	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _v3Point$[ebp+4]
  000f4	0f 2f c1	 comiss	 xmm0, xmm1
  000f7	76 03		 jbe	 SHORT $LN4@OnCollisio
  000f9	0f 28 c8	 movaps	 xmm1, xmm0
$LN4@OnCollisio:

; 783  : 	if(v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  000fc	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00101	0f 2f c8	 comiss	 xmm1, xmm0
  00104	76 03		 jbe	 SHORT $LN5@OnCollisio
  00106	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@OnCollisio:

; 787  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00109	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0010e	f3 0f 5c d6	 subss	 xmm2, xmm6
  00112	f3 0f 5c cf	 subss	 xmm1, xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 787  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00116	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0011a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0011e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00122	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 787  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00126	0f 2f c2	 comiss	 xmm0, xmm2
  00129	0f 83 d8 00 00
	00		 jae	 $LN45@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0012f	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 790  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00134	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00137	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 790  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0013b	53		 push	 ebx
  0013c	50		 push	 eax
  0013d	50		 push	 eax
  0013e	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00143	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00148	f3 0f 5c c4	 subss	 xmm0, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 789  : 	v3Sphere = s.v3LastPosition - v3Center;

  0014c	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00151	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00156	f3 0f 5c c5	 subss	 xmm0, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 789  : 	v3Sphere = s.v3LastPosition - v3Center;

  0015a	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 790  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0015f	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00164	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3Center$$sroa$746$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 790  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00169	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _v3Sphere$2$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016e	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 790  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00173	f3 0f 58 5d f0	 addss	 xmm3, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00178	f3 0f 10 65 e8	 movss	 xmm4, DWORD PTR _v3Sphere$4$[ebp]
  0017d	f3 0f 58 65 f4	 addss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 794  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  00182	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00187	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
  0018c	0f 2f cb	 comiss	 xmm1, xmm3
  0018f	8b 45 f8	 mov	 eax, DWORD PTR _v3Sphere$[ebp+8]
  00192	0f 28 c3	 movaps	 xmm0, xmm3
  00195	0f 14 c4	 unpcklps xmm0, xmm4
  00198	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  0019d	77 05		 ja	 SHORT $LN9@OnCollisio
  0019f	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _v3Point$[ebp]
$LN9@OnCollisio:

; 795  : 	if(v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  001a4	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001a9	0f 2f c8	 comiss	 xmm1, xmm0
  001ac	76 03		 jbe	 SHORT $LN10@OnCollisio
  001ae	0f 28 c8	 movaps	 xmm1, xmm0
$LN10@OnCollisio:

; 796  : 	if(v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  001b1	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001b6	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _v3Point$[ebp+4]
  001bb	0f 2f c2	 comiss	 xmm0, xmm2
  001be	76 03		 jbe	 SHORT $LN11@OnCollisio
  001c0	0f 28 d0	 movaps	 xmm2, xmm0
$LN11@OnCollisio:

; 797  : 	if(v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  001c3	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  001c8	0f 2f d0	 comiss	 xmm2, xmm0
  001cb	76 03		 jbe	 SHORT $LN12@OnCollisio
  001cd	0f 28 d0	 movaps	 xmm2, xmm0
$LN12@OnCollisio:

; 801  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001d0	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  001d5	f3 0f 5c cb	 subss	 xmm1, xmm3
  001d9	f3 0f 5c d4	 subss	 xmm2, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 801  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001dd	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  001e1	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001e5	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001e9	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 801  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001ed	0f 2f c1	 comiss	 xmm0, xmm1
  001f0	73 15		 jae	 SHORT $LN45@OnCollisio

; 802  : 
; 803  : 
; 804  : 	return false;
; 805  : }

  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	32 c0		 xor	 al, al
  001f6	5b		 pop	 ebx
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fa	33 cd		 xor	 ecx, ebp
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 04 00	 ret	 4
$LN45@OnCollisio:
  00207	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020a	b0 01		 mov	 al, 1
  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	33 cd		 xor	 ecx, ebp
  00210	5b		 pop	 ebx
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	8b e5		 mov	 esp, ebp
  00218	5d		 pop	 ebp
  00219	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Point$ = -40						; size = 12
_v3Center$$sroa$746$1$ = -28				; size = 4
_v3Sphere$4$ = -24					; size = 4
_v3Sphere$2$ = -20					; size = 4
_v3Sphere$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00018	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00023	f3 0f 10 4e 10	 movss	 xmm1, DWORD PTR [esi+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00028	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0002b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00030	f3 0f 10 56 14	 movss	 xmm2, DWORD PTR [esi+20]
  00035	f3 0f 10 5e 18	 movss	 xmm3, DWORD PTR [esi+24]
  0003a	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]
  0003f	f3 0f 58 5e 0c	 addss	 xmm3, DWORD PTR [esi+12]

; 182  :     z = fz;

  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00048	53		 push	 ebx
  00049	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0004a	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0004e	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0004f	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00053	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00057	f3 0f 5c c1	 subss	 xmm0, xmm1

; 182  :     z = fz;

  0005b	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Sphere$2$[ebp], xmm1

; 180  :     x = fx;

  00060	f3 0f 11 55 e8	 movss	 DWORD PTR _v3Sphere$4$[ebp], xmm2

; 181  :     y = fy;

  00065	f3 0f 11 5d e4	 movss	 DWORD PTR _v3Center$$sroa$746$1$[ebp], xmm3

; 180  :     x = fx;

  0006a	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006f	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00074	f3 0f 5c c2	 subss	 xmm0, xmm2

; 181  :     y = fy;

  00078	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00082	f3 0f 5c c3	 subss	 xmm0, xmm3

; 182  :     z = fz;

  00086	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0008b	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00090	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00095	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _v3Sphere$2$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0009a	f3 0f 10 6d e4	 movss	 xmm5, DWORD PTR _v3Center$$sroa$746$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 741  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0009f	0f 28 f3	 movaps	 xmm6, xmm3
  000a2	f3 0f 58 75 f0	 addss	 xmm6, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000a7	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR _v3Sphere$[ebp+4]

; 181  :     y = fy;

  000ac	f3 0f 58 c5	 addss	 xmm0, xmm5
  000b0	f3 0f 10 65 e8	 movss	 xmm4, DWORD PTR _v3Sphere$4$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 745  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000b5	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000ba	f3 0f 58 fc	 addss	 xmm7, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 745  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000be	0f 2f d6	 comiss	 xmm2, xmm6
  000c1	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
  000c6	0f 28 c6	 movaps	 xmm0, xmm6
  000c9	0f 14 c7	 unpcklps xmm0, xmm7
  000cc	66 0f d6 45 f0	 movq	 QWORD PTR _v3Sphere$[ebp], xmm0
  000d1	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  000d6	77 05		 ja	 SHORT $LN2@OnMovement
  000d8	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN2@OnMovement:

; 746  : 	if(v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  000dd	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  000e2	0f 2f d0	 comiss	 xmm2, xmm0
  000e5	76 03		 jbe	 SHORT $LN3@OnMovement
  000e7	0f 28 d0	 movaps	 xmm2, xmm0
$LN3@OnMovement:

; 747  : 	if(v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  000ea	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ef	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _v3Point$[ebp+4]
  000f4	0f 2f c1	 comiss	 xmm0, xmm1
  000f7	76 03		 jbe	 SHORT $LN4@OnMovement
  000f9	0f 28 c8	 movaps	 xmm1, xmm0
$LN4@OnMovement:

; 748  : 	if(v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  000fc	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00101	0f 2f c8	 comiss	 xmm1, xmm0
  00104	76 03		 jbe	 SHORT $LN5@OnMovement
  00106	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@OnMovement:

; 752  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00109	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0010e	f3 0f 5c d6	 subss	 xmm2, xmm6
  00112	f3 0f 5c cf	 subss	 xmm1, xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 752  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00116	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0011a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0011e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00122	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 752  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00126	0f 2f c2	 comiss	 xmm0, xmm2
  00129	0f 83 d8 00 00
	00		 jae	 $LN45@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0012f	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 755  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00134	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00137	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 755  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0013b	53		 push	 ebx
  0013c	50		 push	 eax
  0013d	50		 push	 eax
  0013e	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00143	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00148	f3 0f 5c c4	 subss	 xmm0, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 754  : 	v3Sphere = s.v3LastPosition - v3Center;

  0014c	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00151	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00156	f3 0f 5c c5	 subss	 xmm0, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 754  : 	v3Sphere = s.v3LastPosition - v3Center;

  0015a	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 755  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0015f	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00164	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3Center$$sroa$746$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 755  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00169	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _v3Sphere$2$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016e	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 755  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00173	f3 0f 58 5d f0	 addss	 xmm3, DWORD PTR _v3Sphere$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00178	f3 0f 10 65 e8	 movss	 xmm4, DWORD PTR _v3Sphere$4$[ebp]
  0017d	f3 0f 58 65 f4	 addss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 759  : 	if(v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  00182	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00187	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
  0018c	0f 2f cb	 comiss	 xmm1, xmm3
  0018f	8b 45 f8	 mov	 eax, DWORD PTR _v3Sphere$[ebp+8]
  00192	0f 28 c3	 movaps	 xmm0, xmm3
  00195	0f 14 c4	 unpcklps xmm0, xmm4
  00198	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  0019d	77 05		 ja	 SHORT $LN9@OnMovement
  0019f	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _v3Point$[ebp]
$LN9@OnMovement:

; 760  : 	if(v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  001a4	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001a9	0f 2f c8	 comiss	 xmm1, xmm0
  001ac	76 03		 jbe	 SHORT $LN10@OnMovement
  001ae	0f 28 c8	 movaps	 xmm1, xmm0
$LN10@OnMovement:

; 761  : 	if(v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  001b1	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001b6	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _v3Point$[ebp+4]
  001bb	0f 2f c2	 comiss	 xmm0, xmm2
  001be	76 03		 jbe	 SHORT $LN11@OnMovement
  001c0	0f 28 d0	 movaps	 xmm2, xmm0
$LN11@OnMovement:

; 762  : 	if(v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  001c3	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  001c8	0f 2f d0	 comiss	 xmm2, xmm0
  001cb	76 03		 jbe	 SHORT $LN12@OnMovement
  001cd	0f 28 d0	 movaps	 xmm2, xmm0
$LN12@OnMovement:

; 766  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001d0	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  001d5	f3 0f 5c cb	 subss	 xmm1, xmm3
  001d9	f3 0f 5c d4	 subss	 xmm2, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 766  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001dd	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  001e1	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001e5	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001e9	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 766  : 	if(GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001ed	0f 2f c1	 comiss	 xmm0, xmm1
  001f0	73 15		 jae	 SHORT $LN45@OnMovement

; 767  : 
; 768  : 	return false;
; 769  : }

  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	32 c0		 xor	 al, al
  001f6	5b		 pop	 ebx
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fa	33 cd		 xor	 ecx, ebp
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 04 00	 ret	 4
$LN45@OnMovement:
  00207	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020a	b0 01		 mov	 al, 1
  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	33 cd		 xor	 ecx, ebp
  00210	5b		 pop	 ebx
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	8b e5		 mov	 esp, ebp
  00218	5d		 pop	 ebp
  00219	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@COBBCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@COBBCollisionInstance@@MAEXXZ PROC		; COBBCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 823  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 824  : 	gs_oci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 825  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 825  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@COBBCollisionInstance@@MAEXXZ ENDP		; COBBCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; COBBCollisionInstance::Render, COMDAT
; _this$ = ecx

; 815  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 816  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 70		 jg	 SHORT $LN7@Render
$LN2@Render:

; 817  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 818  : 	s.RenderCube(m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z, m_attribute.matRot);

  00050	0f 10 46 1c	 movups	 xmm0, XMMWORD PTR [esi+28]
  00054	83 ec 40	 sub	 esp, 64			; 00000040H
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005c	8b c4		 mov	 eax, esp
  0005e	83 ec 18	 sub	 esp, 24			; 00000018H
  00061	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00064	0f 10 46 2c	 movups	 xmm0, XMMWORD PTR [esi+44]
  00068	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0006c	0f 10 46 3c	 movups	 xmm0, XMMWORD PTR [esi+60]
  00070	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  00074	0f 10 46 4c	 movups	 xmm0, XMMWORD PTR [esi+76]
  00078	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  0007c	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  00080	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00085	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0008a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00090	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	e8 00 00 00 00	 call	 ?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z ; CScreen::RenderCube

; 819  : 	return;
; 820  : }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5e		 pop	 esi
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN7@Render:

; 816  : 	static CScreen s;

  000b1	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b6	e8 00 00 00 00	 call	 __Init_thread_header
  000bb	83 c4 04	 add	 esp, 4
  000be	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000c5	0f 85 76 ff ff
	ff		 jne	 $LN2@Render
  000cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d7	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000dc	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000e1	e8 00 00 00 00	 call	 _atexit
  000e6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	e8 00 00 00 00	 call	 __Init_thread_footer
  000f7	83 c4 08	 add	 esp, 8
  000fa	e9 42 ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; COBBCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ
_TEXT	SEGMENT
?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ PROC ; COBBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 733  : 
; 734  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 735  : }

  00003	c3		 ret	 0
?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ ENDP ; COBBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ
_TEXT	SEGMENT
?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ PROC ; COBBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 728  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 729  : }

  00003	c3		 ret	 0
?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ENDP ; COBBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 658  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 659  : 
; 660  : 	//Tracef("OnGetCollisionMovementAdjust	v3Min.x = %f, v3Max.x = %f\n", m_attribute.v3Min.x, m_attribute.v3Max.x);
; 661  : 	/*
; 662  : 	float fARadius = D3DXVec3Length(&(m_attribute.v3Min - m_attribute.v3Max));
; 663  : 	if (D3DXVec3LengthSq(&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)))>=(s.fRadius+fARadius)*(fARadius+s.fRadius))
; 664  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 665  : 	D3DXVECTOR3 c;
; 666  : 	D3DXVec3Cross(&c, &(s.v3Position-s.v3LastPosition), &D3DXVECTOR3(0.0f,0.0f,1.0f) );
; 667  : 
; 668  : 	float sum = - D3DXVec3Dot(&c,&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)));
; 669  : 	float mul = (s.fRadius+fARadius)*(s.fRadius+fARadius)-D3DXVec3LengthSq(&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)));
; 670  : 
; 671  : 	if (sum*sum-4*mul<=0)
; 672  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 673  : 	float sq = sqrt(sum*sum-4*mul);
; 674  : 	float t1=-sum-sq, t2=-sum+sq;
; 675  : 	t1*=0.5f;
; 676  : 	t2*=0.5f;
; 677  : 
; 678  : 	if (fabs(t1)<=fabs(t2))
; 679  : 	{
; 680  : 		return (gc_fReduceMove*t1)*c;
; 681  : 	}
; 682  : 	else
; 683  : 		return (gc_fReduceMove*t2)*c;
; 684  : 	*/
; 685  : 
; 686  : 	D3DXVECTOR3 v3Temp;
; 687  : 	if(s.v3Position.x + s.fRadius <= m_attribute.v3Min.x)		{ v3Temp.x = m_attribute.v3Min.x; }
; 688  : 	else if(s.v3Position.x - s.fRadius >= m_attribute.v3Max.x)	{ v3Temp.x = m_attribute.v3Max.x; }
; 689  : 	else if(s.v3Position.x + s.fRadius >= m_attribute.v3Min.x && s.v3Position.x + s.fRadius <= m_attribute.v3Max.x) { v3Temp.x = s.v3Position.x + s.fRadius; }
; 690  : 	else																											{ v3Temp.x = s.v3Position.x - s.fRadius; }
; 691  : 
; 692  : 	if(s.v3Position.y + s.fRadius <= m_attribute.v3Min.y)		{ v3Temp.y = m_attribute.v3Min.y; }
; 693  : 	else if(s.v3Position.y - s.fRadius >= m_attribute.v3Max.y)	{ v3Temp.y = m_attribute.v3Max.y; }
; 694  : 	else if(s.v3Position.y + s.fRadius >= m_attribute.v3Min.y && s.v3Position.y + s.fRadius <= m_attribute.v3Max.y) { v3Temp.y = s.v3Position.y + s.fRadius; }
; 695  : 	else																											{ v3Temp.y = s.v3Position.y - s.fRadius; }
; 696  : 
; 697  : 	if(s.v3Position.z + s.fRadius <= m_attribute.v3Min.z)		{ v3Temp.z = m_attribute.v3Min.z; }
; 698  : 	else if(s.v3Position.z - s.fRadius >= m_attribute.v3Max.z)	{ v3Temp.z = m_attribute.v3Max.z; }
; 699  : 	else if(s.v3Position.z + s.fRadius >= m_attribute.v3Min.z && s.v3Position.z + s.fRadius <= m_attribute.v3Max.z) { v3Temp.z = s.v3Position.z + s.fRadius; }
; 700  : 	else																											{ v3Temp.z = s.v3Position.z - s.fRadius; }
; 701  : 
; 702  : 
; 703  : 	if(D3DXVec3LengthSq(&(v3Temp - s.v3Position)) < s.fRadius * s.fRadius)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 704  : 		return D3DXVECTOR3(.0f, .0f, .0f);
; 705  : 
; 706  : 	return D3DXVECTOR3(.0f, .0f, .0f);
; 707  : 
; 708  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
tv832 = 8						; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 618  : 	D3DXVECTOR3 v;
; 619  : 	memcpy(&v, &s.v3Position, sizeof(D3DXVECTOR3));

  00006	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]

; 620  : 
; 621  : 	if(v.x < m_attribute.v3Min.x) v.x = m_attribute.v3Min.x;

  00009	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0000e	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00012	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00015	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0
  0001a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0001f	0f 2f e8	 comiss	 xmm5, xmm0
  00022	89 45 fc	 mov	 DWORD PTR _v$[ebp+8], eax
  00025	76 03		 jbe	 SHORT $LN2@OnCollisio
  00027	0f 28 c5	 movaps	 xmm0, xmm5
$LN2@OnCollisio:

; 622  : 	if(v.x > m_attribute.v3Max.x) v.x = m_attribute.v3Max.x;

  0002a	f3 0f 10 59 10	 movss	 xmm3, DWORD PTR [ecx+16]
  0002f	0f 2f c3	 comiss	 xmm0, xmm3
  00032	76 03		 jbe	 SHORT $LN3@OnCollisio
  00034	0f 28 c3	 movaps	 xmm0, xmm3
$LN3@OnCollisio:

; 623  : 	if(v.y < m_attribute.v3Min.y) v.x = m_attribute.v3Min.y;

  00037	f3 0f 10 61 08	 movss	 xmm4, DWORD PTR [ecx+8]
  0003c	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _v$[ebp+4]
  00041	0f 2f e2	 comiss	 xmm4, xmm2
  00044	76 03		 jbe	 SHORT $LN4@OnCollisio
  00046	0f 28 c4	 movaps	 xmm0, xmm4
$LN4@OnCollisio:

; 624  : 	if(v.y > m_attribute.v3Max.y) v.x = m_attribute.v3Max.y;

  00049	f3 0f 10 71 14	 movss	 xmm6, DWORD PTR [ecx+20]
  0004e	0f 2f d6	 comiss	 xmm2, xmm6
  00051	76 03		 jbe	 SHORT $LN5@OnCollisio
  00053	0f 28 c6	 movaps	 xmm0, xmm6
$LN5@OnCollisio:

; 625  : 	if(v.z < m_attribute.v3Min.z) v.z = m_attribute.v3Min.z;

  00056	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]
  0005b	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _v$[ebp+8]
  00060	0f 2f f9	 comiss	 xmm7, xmm1
  00063	76 03		 jbe	 SHORT $LN6@OnCollisio
  00065	0f 28 cf	 movaps	 xmm1, xmm7
$LN6@OnCollisio:

; 626  : 	if(v.z > m_attribute.v3Max.z) v.z = m_attribute.v3Max.z;

  00068	f3 0f 10 79 18	 movss	 xmm7, DWORD PTR [ecx+24]
  0006d	0f 2f cf	 comiss	 xmm1, xmm7
  00070	76 03		 jbe	 SHORT $LN7@OnCollisio
  00072	0f 28 cf	 movaps	 xmm1, xmm7
$LN7@OnCollisio:

; 627  : 
; 628  : 	if(v.x > m_attribute.v3Min.x && v.x < m_attribute.v3Max.x &&
; 629  : 		v.y > m_attribute.v3Min.y && v.y < m_attribute.v3Max.y &&
; 630  : 		v.z > m_attribute.v3Min.z && v.z < m_attribute.v3Max.z) { return true; }

  00075	0f 2f c5	 comiss	 xmm0, xmm5
  00078	76 1e		 jbe	 SHORT $LN8@OnCollisio
  0007a	0f 2f d8	 comiss	 xmm3, xmm0
  0007d	76 19		 jbe	 SHORT $LN8@OnCollisio
  0007f	0f 2f d4	 comiss	 xmm2, xmm4
  00082	76 14		 jbe	 SHORT $LN8@OnCollisio
  00084	0f 2f f2	 comiss	 xmm6, xmm2
  00087	76 0f		 jbe	 SHORT $LN8@OnCollisio
  00089	0f 2f 49 0c	 comiss	 xmm1, DWORD PTR [ecx+12]
  0008d	76 09		 jbe	 SHORT $LN8@OnCollisio
  0008f	0f 2f f9	 comiss	 xmm7, xmm1
  00092	0f 87 ce 00 00
	00		 ja	 $LN23@OnCollisio
$LN8@OnCollisio:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00098	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  0009c	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 632  : 	if(GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000a1	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  000a6	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  000aa	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ae	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 632  : 	if(GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000b2	f3 0f 11 4d 08	 movss	 DWORD PTR tv832[ebp], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  000b7	f3 0f 58 c2	 addss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 632  : 	if(GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000bb	0f 2f c8	 comiss	 xmm1, xmm0
  000be	0f 83 a2 00 00
	00		 jae	 $LN23@OnCollisio

; 633  : 
; 634  : 
; 635  : 	memcpy(&v, &s.v3LastPosition, sizeof(D3DXVECTOR3));

  000c4	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  000c9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000cc	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0

; 636  : 
; 637  : 	if(v.x < m_attribute.v3Min.x) v.x = m_attribute.v3Min.x;

  000d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  000d6	0f 2f e8	 comiss	 xmm5, xmm0
  000d9	89 45 fc	 mov	 DWORD PTR _v$[ebp+8], eax
  000dc	76 03		 jbe	 SHORT $LN10@OnCollisio
  000de	0f 28 c5	 movaps	 xmm0, xmm5
$LN10@OnCollisio:

; 638  : 	if(v.x > m_attribute.v3Max.x) v.x = m_attribute.v3Max.x;

  000e1	0f 2f c3	 comiss	 xmm0, xmm3
  000e4	76 03		 jbe	 SHORT $LN11@OnCollisio
  000e6	0f 28 c3	 movaps	 xmm0, xmm3
$LN11@OnCollisio:

; 639  : 	if(v.y < m_attribute.v3Min.y) v.x = m_attribute.v3Min.y;

  000e9	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  000ee	0f 2f e1	 comiss	 xmm4, xmm1
  000f1	76 03		 jbe	 SHORT $LN12@OnCollisio
  000f3	0f 28 c4	 movaps	 xmm0, xmm4
$LN12@OnCollisio:

; 640  : 	if(v.y > m_attribute.v3Max.y) v.x = m_attribute.v3Max.y;

  000f6	0f 2f ce	 comiss	 xmm1, xmm6
  000f9	76 03		 jbe	 SHORT $LN13@OnCollisio
  000fb	0f 28 c6	 movaps	 xmm0, xmm6
$LN13@OnCollisio:

; 641  : 	if(v.z < m_attribute.v3Min.z) v.z = m_attribute.v3Min.z;

  000fe	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]
  00103	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _v$[ebp+8]
  00108	0f 2f fa	 comiss	 xmm7, xmm2
  0010b	f3 0f 10 79 18	 movss	 xmm7, DWORD PTR [ecx+24]
  00110	76 05		 jbe	 SHORT $LN14@OnCollisio
  00112	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [ecx+12]
$LN14@OnCollisio:

; 642  : 	if(v.z > m_attribute.v3Max.z) v.z = m_attribute.v3Max.z;

  00117	0f 2f d7	 comiss	 xmm2, xmm7
  0011a	76 03		 jbe	 SHORT $LN15@OnCollisio
  0011c	0f 28 d7	 movaps	 xmm2, xmm7
$LN15@OnCollisio:

; 643  : 
; 644  : 
; 645  : 
; 646  : 	if(v.x > m_attribute.v3Min.x && v.x < m_attribute.v3Max.x &&
; 647  : 		v.y > m_attribute.v3Min.y && v.y < m_attribute.v3Max.y &&
; 648  : 		v.z > m_attribute.v3Min.z && v.z < m_attribute.v3Max.z) { return true; }

  0011f	0f 2f c5	 comiss	 xmm0, xmm5
  00122	76 1a		 jbe	 SHORT $LN16@OnCollisio
  00124	0f 2f d8	 comiss	 xmm3, xmm0
  00127	76 15		 jbe	 SHORT $LN16@OnCollisio
  00129	0f 2f cc	 comiss	 xmm1, xmm4
  0012c	76 10		 jbe	 SHORT $LN16@OnCollisio
  0012e	0f 2f f1	 comiss	 xmm6, xmm1
  00131	76 0b		 jbe	 SHORT $LN16@OnCollisio
  00133	0f 2f 51 0c	 comiss	 xmm2, DWORD PTR [ecx+12]
  00137	76 05		 jbe	 SHORT $LN16@OnCollisio
  00139	0f 2f fa	 comiss	 xmm7, xmm2
  0013c	77 28		 ja	 SHORT $LN23@OnCollisio
$LN16@OnCollisio:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0013e	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00143	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]
  00148	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0014c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 650  : 	if(GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius) { return true; }

  00154	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR tv832[ebp]
  00159	0f 2f c8	 comiss	 xmm1, xmm0
  0015c	73 08		 jae	 SHORT $LN23@OnCollisio

; 651  : 
; 652  : 
; 653  : 
; 654  : 	return false;

  0015e	32 c0		 xor	 al, al

; 655  : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 04 00	 ret	 4
$LN23@OnCollisio:

; 650  : 	if(GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius) { return true; }

  00166	b0 01		 mov	 al, 1

; 655  : }

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 579  : 	D3DXVECTOR3 v;
; 580  : 	D3DXVECTOR3 v3center = (m_attribute.v3Min + m_attribute.v3Max) * 0.5f;
; 581  : 
; 582  : 	memcpy(&v, &s.v3Position, sizeof(D3DXVECTOR3));

  00006	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]

; 583  : 
; 584  : 	if(v.x < m_attribute.v3Min.x) v.x = m_attribute.v3Min.x;

  00009	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0000e	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00012	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0
  00017	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0001c	0f 2f e8	 comiss	 xmm5, xmm0
  0001f	76 03		 jbe	 SHORT $LN2@OnMovement
  00021	0f 28 c5	 movaps	 xmm0, xmm5
$LN2@OnMovement:

; 585  : 	if(v.x > m_attribute.v3Max.x) v.x = m_attribute.v3Max.x;

  00024	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 03		 jbe	 SHORT $LN3@OnMovement
  0002e	0f 28 c1	 movaps	 xmm0, xmm1
$LN3@OnMovement:

; 586  : 	if(v.y < m_attribute.v3Min.y) v.x = m_attribute.v3Min.y;

  00031	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  00036	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _v$[ebp+4]
  0003b	0f 2f dc	 comiss	 xmm3, xmm4
  0003e	76 03		 jbe	 SHORT $LN4@OnMovement
  00040	0f 28 c3	 movaps	 xmm0, xmm3
$LN4@OnMovement:

; 587  : 	if(v.y > m_attribute.v3Max.y) v.x = m_attribute.v3Max.y;

  00043	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  00048	0f 2f e2	 comiss	 xmm4, xmm2
  0004b	76 03		 jbe	 SHORT $LN5@OnMovement
  0004d	0f 28 c2	 movaps	 xmm0, xmm2
$LN5@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00050	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  00054	f3 0f 5c 62 04	 subss	 xmm4, DWORD PTR [edx+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 591  : 	if(GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius)

  00059	f3 0f 10 72 18	 movss	 xmm6, DWORD PTR [edx+24]
  0005e	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00062	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00066	f3 0f 59 e4	 mulss	 xmm4, xmm4
  0006a	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 591  : 	if(GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius)

  0006e	0f 2f f0	 comiss	 xmm6, xmm0
  00071	73 5a		 jae	 SHORT $LN29@OnMovement

; 592  : 	{
; 593  : 
; 594  : 		return true;
; 595  : 	}
; 596  : 
; 597  : 
; 598  : 	memcpy(&v, &s.v3LastPosition, sizeof(D3DXVECTOR3));

  00073	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  00078	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007b	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0

; 599  : 
; 600  : 	if(v.x < m_attribute.v3Min.x) v.x = m_attribute.v3Min.x;

  00080	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00085	0f 2f e8	 comiss	 xmm5, xmm0
  00088	76 03		 jbe	 SHORT $LN9@OnMovement
  0008a	0f 28 c5	 movaps	 xmm0, xmm5
$LN9@OnMovement:

; 601  : 	if(v.x > m_attribute.v3Max.x) v.x = m_attribute.v3Max.x;

  0008d	0f 2f c1	 comiss	 xmm0, xmm1
  00090	76 03		 jbe	 SHORT $LN10@OnMovement
  00092	0f 28 c1	 movaps	 xmm0, xmm1
$LN10@OnMovement:

; 602  : 	if(v.y < m_attribute.v3Min.y) v.x = m_attribute.v3Min.y;

  00095	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  0009a	0f 2f d9	 comiss	 xmm3, xmm1
  0009d	76 03		 jbe	 SHORT $LN11@OnMovement
  0009f	0f 28 c3	 movaps	 xmm0, xmm3
$LN11@OnMovement:

; 603  : 	if(v.y > m_attribute.v3Max.y) v.x = m_attribute.v3Max.y;

  000a2	0f 2f ca	 comiss	 xmm1, xmm2
  000a5	76 03		 jbe	 SHORT $LN12@OnMovement
  000a7	0f 28 c2	 movaps	 xmm0, xmm2
$LN12@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  000aa	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]
  000af	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  000b4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b8	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000bc	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 607  : 	if(GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius)

  000c0	0f 2f f0	 comiss	 xmm6, xmm0
  000c3	73 08		 jae	 SHORT $LN29@OnMovement

; 611  : 	}
; 612  : 
; 613  : 	return false;

  000c5	32 c0		 xor	 al, al

; 614  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
$LN29@OnMovement:

; 608  : 	{
; 609  : 
; 610  : 		return true;

  000cd	b0 01		 mov	 al, 1

; 614  : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CAABBCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CAABBCollisionInstance@@MAEXXZ PROC		; CAABBCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 720  : 	gs_aci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 721  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 721  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CAABBCollisionInstance@@MAEXXZ ENDP		; CAABBCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CAABBCollisionInstance::Render, COMDAT
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 712  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 4c		 jg	 SHORT $LN7@Render
$LN2@Render:

; 713  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 714  : 	s.RenderCube(m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z);

  00050	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  00054	83 ec 18	 sub	 esp, 24			; 00000018H
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005c	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00061	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00066	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?RenderCube@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderCube

; 715  : 	return;
; 716  : }

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN7@Render:

; 712  : 	static CScreen s;

  0008d	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00092	e8 00 00 00 00	 call	 __Init_thread_header
  00097	83 c4 04	 add	 esp, 4
  0009a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000a1	75 9e		 jne	 SHORT $LN2@Render
  000a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000af	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000b4	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000b9	e8 00 00 00 00	 call	 _atexit
  000be	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ca	e8 00 00 00 00	 call	 __Init_thread_footer
  000cf	83 c4 08	 add	 esp, 8
  000d2	e9 6a ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CAABBCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ
_TEXT	SEGMENT
?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ PROC ; CAABBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 573  : 
; 574  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 575  : }

  00003	c3		 ret	 0
?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ ENDP ; CAABBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ
_TEXT	SEGMENT
?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ PROC ; CAABBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 568  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 569  : }

  00003	c3		 ret	 0
?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ENDP ; CAABBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv901 = -8						; size = 8
_d$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
tv931 = 12						; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 362  : 	D3DXVECTOR3 advance = s.v3Position-s.v3LastPosition;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00009	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 361  : {

  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00011	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00016	f3 0f 10 62 04	 movss	 xmm4, DWORD PTR [edx+4]
  0001b	f3 0f 10 2a	 movss	 xmm5, DWORD PTR [edx]
  0001f	0f 28 c4	 movaps	 xmm0, xmm4
  00022	f3 0f 5c 42 10	 subss	 xmm0, DWORD PTR [edx+16]
  00027	f3 0f 5c 6a 0c	 subss	 xmm5, DWORD PTR [edx+12]
  0002c	f3 0f 10 72 08	 movss	 xmm6, DWORD PTR [edx+8]
  00031	f3 0f 5c 72 14	 subss	 xmm6, DWORD PTR [edx+20]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00036	f3 0f 10 59 18	 movss	 xmm3, DWORD PTR [ecx+24]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0003b	f3 0f 11 45 0c	 movss	 DWORD PTR tv931[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00040	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00044	f3 0f 11 45 08	 movss	 DWORD PTR _d$1$[ebp], xmm0
  00049	0f 28 c5	 movaps	 xmm0, xmm5
  0004c	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _d$1$[ebp]
  00051	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00055	f3 0f 58 f8	 addss	 xmm7, xmm0
  00059	0f 28 c6	 movaps	 xmm0, xmm6
  0005c	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00060	f3 0f 58 f8	 addss	 xmm7, xmm0
  00064	0f 28 c7	 movaps	 xmm0, xmm7
  00067	f3 0f 11 7d 08	 movss	 DWORD PTR _d$1$[ebp], xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 365  : 	if (d>=-0.0001 && d<=0.0001)

  0006c	f3 0f 10 3a	 movss	 xmm7, DWORD PTR [edx]
  00070	0f 5a c0	 cvtps2pd xmm0, xmm0
  00073	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bf1a36e2eb1c432d
  0007b	f2 0f 11 45 f8	 movsd	 QWORD PTR tv901[ebp], xmm0
  00080	72 29		 jb	 SHORT $LN2@OnGetColli
  00082	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  0008a	66 0f 2f 45 f8	 comisd	 xmm0, QWORD PTR tv901[ebp]
  0008f	72 1a		 jb	 SHORT $LN2@OnGetColli
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00091	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :     y = fy;

  00097	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 182  :     z = fz;

  0009e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 424  : }

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN2@OnGetColli:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ab	f3 0f 5c 61 08	 subss	 xmm4, DWORD PTR [ecx+8]
  000b0	f3 0f 5c 79 04	 subss	 xmm7, DWORD PTR [ecx+4]
  000b5	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  000ba	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000bf	f3 0f 59 e2	 mulss	 xmm4, xmm2
  000c3	f3 0f 59 f9	 mulss	 xmm7, xmm1
  000c7	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000cb	f3 0f 58 e7	 addss	 xmm4, xmm7
  000cf	f3 0f 58 e0	 addss	 xmm4, xmm0
  000d3	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 371  : 	if (D3DXVec3Dot(&m_attribute.v3Normal, &advance)>=0)

  000d8	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000dc	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000e0	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  000e7	f3 0f 5e 65 08	 divss	 xmm4, DWORD PTR _d$1$[ebp]
  000ec	f3 0f 59 d8	 mulss	 xmm3, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000f0	0f 28 fc	 movaps	 xmm7, xmm4
  000f3	f3 0f 59 ec	 mulss	 xmm5, xmm4
  000f7	f3 0f 59 7d 0c	 mulss	 xmm7, DWORD PTR tv931[ebp]
  000fc	f3 0f 59 f4	 mulss	 xmm6, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 371  : 	if (D3DXVec3Dot(&m_attribute.v3Normal, &advance)>=0)

  00100	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _d$1$[ebp]
  00105	0f 2f 25 00 00
	00 00		 comiss	 xmm4, DWORD PTR __real@00000000
  0010c	72 20		 jb	 SHORT $LN3@OnGetColli
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0010e	f3 0f 5c e9	 subss	 xmm5, xmm1

; 180  :     x = fx;

  00112	f3 0f 5c fa	 subss	 xmm7, xmm2

; 181  :     y = fy;

  00116	f3 0f 5c f3	 subss	 xmm6, xmm3
  0011a	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  0011e	f3 0f 11 78 04	 movss	 DWORD PTR [eax+4], xmm7

; 182  :     z = fz;

  00123	f3 0f 11 70 08	 movss	 DWORD PTR [eax+8], xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 424  : }

  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 08 00	 ret	 8
$LN3@OnGetColli:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0012e	f3 0f 58 cd	 addss	 xmm1, xmm5

; 180  :     x = fx;

  00132	f3 0f 58 d7	 addss	 xmm2, xmm7

; 181  :     y = fy;

  00136	f3 0f 58 de	 addss	 xmm3, xmm6
  0013a	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0013e	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2

; 182  :     z = fz;

  00143	f3 0f 11 58 08	 movss	 DWORD PTR [eax+8], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 424  : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_fPosition2$1$ = -4					; size = 4
tv984 = 8						; size = 4
_fPosition1$1$ = 8					; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00004	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00007	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00011	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  00016	f3 0f 11 45 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00024	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _fPosition1$1$[ebp]
  00029	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  0002e	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00032	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00037	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0003c	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00041	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00045	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0004a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0004f	f3 0f 11 7d 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00054	f3 0f 10 78 10	 movss	 xmm7, DWORD PTR [eax+16]
  00059	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0005e	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 343  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00063	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fPosition1$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00068	f3 0f 59 79 14	 mulss	 xmm7, DWORD PTR [ecx+20]
  0006d	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00071	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00076	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0007b	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00080	f3 0f 58 f8	 addss	 xmm7, xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 343  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00087	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0008a	f3 0f 11 7d fc	 movss	 DWORD PTR _fPosition2$1$[ebp], xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 343  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  0008f	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  00093	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _fPosition2$1$[ebp]
  00098	76 05		 jbe	 SHORT $LN4@OnCollisio
  0009a	0f 2f c2	 comiss	 xmm0, xmm2
  0009d	77 28		 ja	 SHORT $LN3@OnCollisio
$LN4@OnCollisio:
  0009f	0f 2f c1	 comiss	 xmm0, xmm1
  000a2	76 05		 jbe	 SHORT $LN5@OnCollisio
  000a4	0f 2f d0	 comiss	 xmm2, xmm0
  000a7	77 1e		 ja	 SHORT $LN3@OnCollisio
$LN5@OnCollisio:
  000a9	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000ae	0f 2f c1	 comiss	 xmm0, xmm1
  000b1	0f 82 f2 00 00
	00		 jb	 $LN9@OnCollisio
  000b7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000be	0f 2f c8	 comiss	 xmm1, xmm0
  000c1	0f 82 e2 00 00
	00		 jb	 $LN9@OnCollisio
$LN3@OnCollisio:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000c7	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  000cc	0f 28 df	 movaps	 xmm3, xmm7
  000cf	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]
  000d4	0f 28 c5	 movaps	 xmm0, xmm5
  000d7	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
  000dc	f3 0f 5c 59 1c	 subss	 xmm3, DWORD PTR [ecx+28]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000e1	f3 0f 10 49 50	 movss	 xmm1, DWORD PTR [ecx+80]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000e6	0f 28 f4	 movaps	 xmm6, xmm4
  000e9	f3 0f 5c 71 20	 subss	 xmm6, DWORD PTR [ecx+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 348  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000ee	f3 0f 10 50 18	 movss	 xmm2, DWORD PTR [eax+24]
  000f3	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000fa	f3 0f 5c 79 40	 subss	 xmm7, DWORD PTR [ecx+64]
  000ff	f3 0f 5c 61 44	 subss	 xmm4, DWORD PTR [ecx+68]
  00104	f3 0f 5c 69 48	 subss	 xmm5, DWORD PTR [ecx+72]
  00109	f3 0f 11 45 08	 movss	 DWORD PTR tv984[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0010e	0f 28 c3	 movaps	 xmm0, xmm3
  00111	f3 0f 59 41 4c	 mulss	 xmm0, DWORD PTR [ecx+76]
  00116	f3 0f 59 ce	 mulss	 xmm1, xmm6
  0011a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011e	f3 0f 10 41 54	 movss	 xmm0, DWORD PTR [ecx+84]
  00123	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv984[ebp]
  00128	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 348  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  0012c	0f 2f ca	 comiss	 xmm1, xmm2
  0012f	76 78		 jbe	 SHORT $LN9@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00131	f3 0f 10 49 5c	 movss	 xmm1, DWORD PTR [ecx+92]
  00136	f3 0f 59 59 58	 mulss	 xmm3, DWORD PTR [ecx+88]
  0013b	f3 0f 10 41 60	 movss	 xmm0, DWORD PTR [ecx+96]
  00140	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv984[ebp]
  00145	f3 0f 59 ce	 mulss	 xmm1, xmm6
  00149	f3 0f 58 cb	 addss	 xmm1, xmm3
  0014d	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 349  : 			if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[1]) > -s.fRadius/*0.0f*/)

  00151	0f 2f ca	 comiss	 xmm1, xmm2
  00154	76 53		 jbe	 SHORT $LN9@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00156	f3 0f 10 49 68	 movss	 xmm1, DWORD PTR [ecx+104]
  0015b	0f 28 c7	 movaps	 xmm0, xmm7
  0015e	f3 0f 59 41 64	 mulss	 xmm0, DWORD PTR [ecx+100]
  00163	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00167	f3 0f 58 c8	 addss	 xmm1, xmm0
  0016b	f3 0f 10 41 6c	 movss	 xmm0, DWORD PTR [ecx+108]
  00170	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00174	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 350  : 				if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[2]) > - s.fRadius/*0.0f*/)

  00178	0f 2f ca	 comiss	 xmm1, xmm2
  0017b	76 2c		 jbe	 SHORT $LN9@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0017d	f3 0f 10 49 74	 movss	 xmm1, DWORD PTR [ecx+116]
  00182	f3 0f 59 79 70	 mulss	 xmm7, DWORD PTR [ecx+112]
  00187	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0018c	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00190	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00194	f3 0f 58 cf	 addss	 xmm1, xmm7
  00198	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 351  : 					if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[3]) > - s.fRadius/*0.0f*/)

  0019c	0f 2f ca	 comiss	 xmm1, xmm2
  0019f	76 08		 jbe	 SHORT $LN9@OnCollisio

; 352  : 					{
; 353  : 						return true;

  001a1	b0 01		 mov	 al, 1

; 358  : }

  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 04 00	 ret	 4
$LN9@OnCollisio:

; 354  : 					}
; 355  : 	}
; 356  : 
; 357  : 	return false;

  001a9	32 c0		 xor	 al, al

; 358  : }

  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1226 = -8						; size = 4
tv1228 = -4						; size = 4
_fPosition2$1$ = -4					; size = 4
tv1227 = 8						; size = 4
_fPosition1$1$ = 8					; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00013	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  00018	f3 0f 11 45 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0001d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00021	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00026	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _fPosition1$1$[ebp]
  0002b	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  00030	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00034	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00039	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0003e	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00043	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00047	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0004c	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00051	f3 0f 11 7d 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00056	f3 0f 10 78 10	 movss	 xmm7, DWORD PTR [eax+16]
  0005b	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00060	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 313  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00065	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fPosition1$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0006a	f3 0f 59 79 14	 mulss	 xmm7, DWORD PTR [ecx+20]
  0006f	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00073	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00078	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0007d	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00082	f3 0f 58 f8	 addss	 xmm7, xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 313  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00089	0f 2f d0	 comiss	 xmm2, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0008c	f3 0f 11 7d fc	 movss	 DWORD PTR _fPosition2$1$[ebp], xmm7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 313  : 		|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00091	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  00095	f3 0f 10 65 fc	 movss	 xmm4, DWORD PTR _fPosition2$1$[ebp]
  0009a	76 05		 jbe	 SHORT $LN4@OnMovement
  0009c	0f 2f c4	 comiss	 xmm0, xmm4
  0009f	77 28		 ja	 SHORT $LN3@OnMovement
$LN4@OnMovement:
  000a1	0f 2f c2	 comiss	 xmm0, xmm2
  000a4	76 05		 jbe	 SHORT $LN5@OnMovement
  000a6	0f 2f e0	 comiss	 xmm4, xmm0
  000a9	77 1e		 ja	 SHORT $LN3@OnMovement
$LN5@OnMovement:
  000ab	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000b0	0f 2f c2	 comiss	 xmm0, xmm2
  000b3	0f 82 1f 01 00
	00		 jb	 $LN10@OnMovement
  000b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c0	0f 2f d0	 comiss	 xmm2, xmm0
  000c3	0f 82 0f 01 00
	00		 jb	 $LN10@OnMovement
$LN3@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000c9	f3 0f 10 68 04	 movss	 xmm5, DWORD PTR [eax+4]
  000ce	0f 28 c7	 movaps	 xmm0, xmm7
  000d1	f3 0f 10 70 08	 movss	 xmm6, DWORD PTR [eax+8]
  000d6	0f 28 cd	 movaps	 xmm1, xmm5
  000d9	f3 0f 5c 49 20	 subss	 xmm1, DWORD PTR [ecx+32]
  000de	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 318  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000e3	f3 0f 10 58 18	 movss	 xmm3, DWORD PTR [eax+24]
  000e8	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ef	f3 0f 5c 79 40	 subss	 xmm7, DWORD PTR [ecx+64]
  000f4	f3 0f 11 4d 08	 movss	 DWORD PTR tv1227[ebp], xmm1
  000f9	0f 28 ce	 movaps	 xmm1, xmm6
  000fc	f3 0f 5c 49 24	 subss	 xmm1, DWORD PTR [ecx+36]
  00101	f3 0f 5c 69 44	 subss	 xmm5, DWORD PTR [ecx+68]
  00106	f3 0f 5c 71 48	 subss	 xmm6, DWORD PTR [ecx+72]
  0010b	f3 0f 11 45 f8	 movss	 DWORD PTR tv1226[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00110	f3 0f 59 41 4c	 mulss	 xmm0, DWORD PTR [ecx+76]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00115	f3 0f 11 4d fc	 movss	 DWORD PTR tv1228[ebp], xmm1

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0011a	f3 0f 10 49 50	 movss	 xmm1, DWORD PTR [ecx+80]
  0011f	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR tv1227[ebp]
  00124	f3 0f 58 c8	 addss	 xmm1, xmm0
  00128	f3 0f 10 41 54	 movss	 xmm0, DWORD PTR [ecx+84]
  0012d	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR tv1228[ebp]
  00132	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 318  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  00136	0f 2f cb	 comiss	 xmm1, xmm3
  00139	0f 86 99 00 00
	00		 jbe	 $LN10@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0013f	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00144	f3 0f 10 49 5c	 movss	 xmm1, DWORD PTR [ecx+92]
  00149	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR tv1226[ebp]
  0014e	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR tv1227[ebp]
  00153	f3 0f 58 c8	 addss	 xmm1, xmm0
  00157	f3 0f 10 41 60	 movss	 xmm0, DWORD PTR [ecx+96]
  0015c	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR tv1228[ebp]
  00161	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 319  : 			if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[1]) > -s.fRadius/*0.0f*/)

  00165	0f 2f cb	 comiss	 xmm1, xmm3
  00168	76 6e		 jbe	 SHORT $LN10@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0016a	f3 0f 10 41 64	 movss	 xmm0, DWORD PTR [ecx+100]
  0016f	f3 0f 10 49 68	 movss	 xmm1, DWORD PTR [ecx+104]
  00174	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00178	f3 0f 59 cd	 mulss	 xmm1, xmm5
  0017c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00180	f3 0f 10 41 6c	 movss	 xmm0, DWORD PTR [ecx+108]
  00185	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00189	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 320  : 				if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[2]) > - s.fRadius/*0.0f*/)

  0018d	0f 2f cb	 comiss	 xmm1, xmm3
  00190	76 46		 jbe	 SHORT $LN10@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00192	f3 0f 10 49 74	 movss	 xmm1, DWORD PTR [ecx+116]
  00197	f3 0f 59 79 70	 mulss	 xmm7, DWORD PTR [ecx+112]
  0019c	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  001a1	f3 0f 59 cd	 mulss	 xmm1, xmm5
  001a5	f3 0f 59 c6	 mulss	 xmm0, xmm6
  001a9	f3 0f 58 cf	 addss	 xmm1, xmm7
  001ad	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 321  : 					if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[3]) > - s.fRadius/*0.0f*/)

  001b1	0f 2f cb	 comiss	 xmm1, xmm3
  001b4	76 22		 jbe	 SHORT $LN10@OnMovement

; 322  : 					{
; 323  : 						if (fabs(D3DXVec3Dot(&(s.v3Position - m_attribute.v3Position), &m_attribute.v3Normal)) <

  001b6	0f 5a d2	 cvtps2pd xmm2, xmm2
  001b9	0f 5a c4	 cvtps2pd xmm0, xmm4
  001bc	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  001c3	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  001ca	66 0f 2f c2	 comisd	 xmm0, xmm2
  001ce	76 08		 jbe	 SHORT $LN10@OnMovement

; 324  : 							fabs(D3DXVec3Dot(&(s.v3LastPosition - m_attribute.v3Position), &m_attribute.v3Normal)))
; 325  : 							return true;

  001d0	b0 01		 mov	 al, 1

; 330  : }

  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 04 00	 ret	 4
$LN10@OnMovement:

; 326  : 					}
; 327  : 	}
; 328  : 
; 329  : 	return false;

  001d8	32 c0		 xor	 al, al

; 330  : }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CPlaneCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CPlaneCollisionInstance@@MAEXXZ PROC		; CPlaneCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 434  : 	gs_pci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 435  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 435  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CPlaneCollisionInstance@@MAEXXZ ENDP		; CPlaneCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CPlaneCollisionInstance::Render, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 428  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 20		 jg	 SHORT $LN7@Render
$LN2@Render:

; 429  : 	s.RenderBar3d(m_attribute.v3QuadPosition);

  00041	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z ; CScreen::RenderBar3d

; 430  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN7@Render:

; 428  : 	static CScreen s;

  00061	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00066	e8 00 00 00 00	 call	 __Init_thread_header
  0006b	83 c4 04	 add	 esp, 4
  0006e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  00075	75 ca		 jne	 SHORT $LN2@Render
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00088	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  0008d	e8 00 00 00 00	 call	 _atexit
  00092	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	e8 00 00 00 00	 call	 __Init_thread_footer
  000a3	83 c4 08	 add	 esp, 8
  000a6	eb 99		 jmp	 SHORT $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CPlaneCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ
_TEXT	SEGMENT
?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ PROC ; CPlaneCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 301  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 302  : }

  00003	c3		 ret	 0
?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ ENDP ; CPlaneCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ
_TEXT	SEGMENT
?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ PROC ; CPlaneCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 296  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 297  : }

  00003	c3		 ret	 0
?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ENDP ; CPlaneCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1030 = -16						; size = 4
tv1031 = -12						; size = 4
tv1032 = -8						; size = 4
tv986 = -8						; size = 4
tv990 = -4						; size = 4
_sum$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 254  : {

  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00010	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00014	f3 0f 10 70 04	 movss	 xmm6, DWORD PTR [eax+4]
  00019	0f 28 cb	 movaps	 xmm1, xmm3
  0001c	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  00021	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00026	0f 28 fe	 movaps	 xmm7, xmm6
  00029	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]
  0002e	0f 28 e2	 movaps	 xmm4, xmm2
  00031	f3 0f 5c 61 0c	 subss	 xmm4, DWORD PTR [ecx+12]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00036	0f 28 c1	 movaps	 xmm0, xmm1
  00039	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  0003d	0f 28 ef	 movaps	 xmm5, xmm7
  00040	f3 0f 59 ef	 mulss	 xmm5, xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00044	f3 0f 11 64 24
	14		 movss	 DWORD PTR tv990[esp+24], xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004a	f3 0f 58 e8	 addss	 xmm5, xmm0
  0004e	0f 28 c4	 movaps	 xmm0, xmm4
  00051	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 255  : 	if (D3DXVec3LengthSq(&(s.v3Position-m_attribute.v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00055	f3 0f 10 60 18	 movss	 xmm4, DWORD PTR [eax+24]
  0005a	f3 0f 58 61 10	 addss	 xmm4, DWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0005f	f3 0f 58 e8	 addss	 xmm5, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 255  : 	if (D3DXVec3LengthSq(&(s.v3Position-m_attribute.v3Position))>=(s.fRadius+m_attribute.fRadius)*(m_attribute.fRadius+s.fRadius))

  00063	f3 0f 59 e4	 mulss	 xmm4, xmm4
  00067	0f 2f ec	 comiss	 xmm5, xmm4
  0006a	72 1d		 jb	 SHORT $LN2@OnGetColli
$LN49@OnGetColli:

; 290  : }

  0006c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00072	8b c6		 mov	 eax, esi
  00074	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 08 00	 ret	 8
$LN2@OnGetColli:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00089	f3 0f 5c 50 14	 subss	 xmm2, DWORD PTR [eax+20]
  0008e	f3 0f 5c 70 10	 subss	 xmm6, DWORD PTR [eax+16]
  00093	f3 0f 5c 58 0c	 subss	 xmm3, DWORD PTR [eax+12]
  00098	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 261  : 	float mul = (s.fRadius+m_attribute.fRadius)*(s.fRadius+m_attribute.fRadius)-D3DXVec3LengthSq(&(s.v3Position-m_attribute.v3Position));

  0009b	f3 0f 5c e5	 subss	 xmm4, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0009f	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a3	f3 0f 11 74 24
	10		 movss	 DWORD PTR tv986[esp+24], xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 263  : 	if (sum*sum-4*mul<=0)

  000a9	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@40800000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000b1	f3 0f 5c f2	 subss	 xmm6, xmm2

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000b5	f3 0f 5c d3	 subss	 xmm2, xmm3
  000b9	f3 0f 59 d8	 mulss	 xmm3, xmm0
  000bd	f3 0f 11 74 24
	08		 movss	 DWORD PTR tv1030[esp+24], xmm6

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000c3	f3 0f 10 74 24
	10		 movss	 xmm6, DWORD PTR tv986[esp+24]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000c9	f3 0f 59 4c 24
	08		 mulss	 xmm1, DWORD PTR tv1030[esp+24]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000cf	f3 0f 59 f0	 mulss	 xmm6, xmm0

; 182  :     z = fz;

  000d3	f3 0f 59 fa	 mulss	 xmm7, xmm2

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000d7	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv1031[esp+24], xmm2

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000dd	f3 0f 5c de	 subss	 xmm3, xmm6

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000e1	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR tv990[esp+24]
  000e7	f3 0f 58 cf	 addss	 xmm1, xmm7
  000eb	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000ef	f3 0f 11 5c 24
	10		 movss	 DWORD PTR tv1032[esp+24], xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000f5	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 260  : 	float sum = - D3DXVec3Dot(&c,&(s.v3Position-m_attribute.v3Position));

  000f9	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 263  : 	if (sum*sum-4*mul<=0)

  00100	0f 28 d1	 movaps	 xmm2, xmm1
  00103	f3 0f 11 4c 24
	14		 movss	 DWORD PTR _sum$1$[esp+24], xmm1
  00109	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0010d	f3 0f 5c d4	 subss	 xmm2, xmm4
  00111	0f 2f c2	 comiss	 xmm0, xmm2
  00114	0f 83 52 ff ff
	ff		 jae	 $LN49@OnGetColli

; 264  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 265  : 	float sq = sqrt(sum*sum-4*mul);

  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	0f 57 c9	 xorps	 xmm1, xmm1
  00120	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
  00124	66 0f 2e c8	 ucomisd xmm1, xmm0
  00128	77 06		 ja	 SHORT $LN45@OnGetColli
  0012a	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0012e	eb 05		 jmp	 SHORT $LN46@OnGetColli
$LN45@OnGetColli:
  00130	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN46@OnGetColli:

; 266  : 	float t1=-sum-sq, t2=-sum+sq;

  00135	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _sum$1$[esp+24]
  0013b	0f 57 e4	 xorps	 xmm4, xmm4
  0013e	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 267  : 	t1*=0.5f;
; 268  : 	t2*=0.5f;
; 269  : 
; 270  : 	if (fabs(t1)<=fabs(t2))

  00145	0f 57 d2	 xorps	 xmm2, xmm2
  00148	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  00150	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
  00154	f3 0f 5c dc	 subss	 xmm3, xmm4
  00158	f3 0f 5c 64 24
	14		 subss	 xmm4, DWORD PTR _sum$1$[esp+24]
  0015e	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00162	f3 0f 59 e5	 mulss	 xmm4, xmm5
  00166	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  0016a	0f 5a c4	 cvtps2pd xmm0, xmm4
  0016d	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00174	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0017b	66 0f 2f c2	 comisd	 xmm0, xmm2
  0017f	72 33		 jb	 SHORT $LN4@OnGetColli

; 271  : 	{
; 272  : 		return (gc_fReduceMove*t1)*c;

  00181	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 290  : }

  00185	8b c6		 mov	 eax, esi
  00187	0f 28 c3	 movaps	 xmm0, xmm3
  0018a	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1030[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00190	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00194	0f 28 c3	 movaps	 xmm0, xmm3

; 181  :     y = fy;

  00197	f3 0f 59 5c 24
	10		 mulss	 xmm3, DWORD PTR tv1032[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 290  : }

  0019d	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR tv1031[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001a3	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 290  : }

  001a8	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001ad	5e		 pop	 esi
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 08 00	 ret	 8
$LN4@OnGetColli:

; 273  : 	}
; 274  : 	else
; 275  : 		return (gc_fReduceMove*t2)*c;

  001b4	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 290  : }

  001b8	8b c6		 mov	 eax, esi
  001ba	0f 28 c4	 movaps	 xmm0, xmm4
  001bd	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1030[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001c3	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001c7	0f 28 c4	 movaps	 xmm0, xmm4

; 181  :     y = fy;

  001ca	f3 0f 59 64 24
	10		 mulss	 xmm4, DWORD PTR tv1032[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 290  : }

  001d0	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR tv1031[esp+24]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001d6	f3 0f 11 66 08	 movss	 DWORD PTR [esi+8], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 290  : }

  001db	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001e0	5e		 pop	 esi
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1141 = -8						; size = 4
tv1144 = -4						; size = 4
tv1147 = 8						; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 245  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition,s.v3Position,m_attribute.v3Position)<(m_attribute.fRadius+s.fRadius)*(m_attribute.fRadius+s.fRadius))

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00009	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  0000e	f3 0f 10 71 0c	 movss	 xmm6, DWORD PTR [ecx+12]
  00013	0f 28 d6	 movaps	 xmm2, xmm6
  00016	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0001b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00020	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]
  00024	f3 0f 5c 60 0c	 subss	 xmm4, DWORD PTR [eax+12]
  00029	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  0002e	f3 0f 5c 68 14	 subss	 xmm5, DWORD PTR [eax+20]
  00033	f3 0f 5c 58 10	 subss	 xmm3, DWORD PTR [eax+16]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00038	0f 28 f8	 movaps	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0003b	f3 0f 11 45 fc	 movss	 DWORD PTR tv1144[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00040	f3 0f 59 f8	 mulss	 xmm7, xmm0

; 182  :     z = fz;

  00044	0f 28 c4	 movaps	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00047	f3 0f 5c 50 14	 subss	 xmm2, DWORD PTR [eax+20]

; 182  :     z = fz;

  0004c	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00050	0f 28 cb	 movaps	 xmm1, xmm3
  00053	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR tv1144[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00058	f3 0f 58 f8	 addss	 xmm7, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0005c	f3 0f 11 6d 08	 movss	 DWORD PTR tv1147[ebp], xmm5

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00061	0f 28 c5	 movaps	 xmm0, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00064	f3 0f 11 65 f8	 movss	 DWORD PTR tv1141[ebp], xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00069	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006d	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  00072	0f 28 e5	 movaps	 xmm4, xmm5
  00075	f3 0f 5c 60 0c	 subss	 xmm4, DWORD PTR [eax+12]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0007a	f3 0f 58 f8	 addss	 xmm7, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0007e	0f 28 c4	 movaps	 xmm0, xmm4
  00081	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR tv1141[ebp]
  00086	f3 0f 58 c8	 addss	 xmm1, xmm0
  0008a	0f 28 c2	 movaps	 xmm0, xmm2
  0008d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv1147[ebp]
  00092	f3 0f 58 c8	 addss	 xmm1, xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 84   : 	if (d<=0.0f)

  00099	0f 2f c1	 comiss	 xmm0, xmm1
  0009c	72 16		 jb	 SHORT $LN5@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0009e	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000a2	f3 0f 59 e4	 mulss	 xmm4, xmm4
  000a6	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000aa	f3 0f 58 dc	 addss	 xmm3, xmm4
  000ae	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 86   : 		return D3DXVec3LengthSq(&(x-p1));

  000b2	eb 7c		 jmp	 SHORT $LN8@OnCollisio
$LN5@OnCollisio:

; 87   : 	}
; 88   : 	else if (d>=l)

  000b4	0f 2f cf	 comiss	 xmm1, xmm7
  000b7	72 29		 jb	 SHORT $LN7@OnCollisio
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000b9	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  000be	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  000c3	f3 0f 5c 28	 subss	 xmm5, DWORD PTR [eax]
  000c7	f3 0f 5c 70 08	 subss	 xmm6, DWORD PTR [eax+8]

; 182  :     z = fz;

  000cc	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000d0	f3 0f 59 ed	 mulss	 xmm5, xmm5
  000d4	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000d8	f3 0f 58 dd	 addss	 xmm3, xmm5
  000dc	f3 0f 58 de	 addss	 xmm3, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 90   : 		return D3DXVec3LengthSq(&(x-p2));

  000e0	eb 4e		 jmp	 SHORT $LN8@OnCollisio
$LN7@OnCollisio:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000e2	0f 28 cb	 movaps	 xmm1, xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000e5	0f 28 c2	 movaps	 xmm0, xmm2
  000e8	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR tv1144[ebp]

; 182  :     z = fz;

  000ed	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR tv1147[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000f2	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR tv1141[ebp]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000f7	f3 0f 59 5d f8	 mulss	 xmm3, DWORD PTR tv1141[ebp]
  000fc	f3 0f 5c c8	 subss	 xmm1, xmm0
  00100	0f 28 c4	 movaps	 xmm0, xmm4
  00103	f3 0f 59 65 fc	 mulss	 xmm4, DWORD PTR tv1144[ebp]
  00108	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv1147[ebp]
  0010d	f3 0f 5c e3	 subss	 xmm4, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00111	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00115	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00119	f3 0f 59 e4	 mulss	 xmm4, xmm4

; 1281 :     *pOut = v;

  0011d	0f 28 da	 movaps	 xmm3, xmm2
  00120	f3 0f 59 da	 mulss	 xmm3, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00124	f3 0f 58 d9	 addss	 xmm3, xmm1
  00128	f3 0f 58 dc	 addss	 xmm3, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 95   : 		return D3DXVec3LengthSq(D3DXVec3Cross(&c,&(x-p1),&(p2-p1)))/l;

  0012c	f3 0f 5e df	 divss	 xmm3, xmm7
$LN8@OnCollisio:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 245  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition,s.v3Position,m_attribute.v3Position)<(m_attribute.fRadius+s.fRadius)*(m_attribute.fRadius+s.fRadius))

  00130	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00135	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  0013a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0013e	0f 2f c3	 comiss	 xmm0, xmm3
  00141	0f 97 c0	 seta	 al

; 246  : 	{
; 247  : 		return true;
; 248  : 	}
; 249  : 
; 250  : 	return false;
; 251  : }

  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1257 = -24						; size = 4
tv1263 = -20						; size = 4
tv1260 = -16						; size = 4
_l$1$ = -12						; size = 4
tv1253 = -8						; size = 4
tv1256 = -4						; size = 4
tv1259 = 8						; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 231  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition,s.v3Position,m_attribute.v3Position) < (m_attribute.fRadius+s.fRadius)*(m_attribute.fRadius+s.fRadius))

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00009	f3 0f 10 61 0c	 movss	 xmm4, DWORD PTR [ecx+12]
  0000e	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00013	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00018	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]
  0001c	0f 28 c7	 movaps	 xmm0, xmm7
  0001f	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00024	f3 0f 10 70 0c	 movss	 xmm6, DWORD PTR [eax+12]
  00029	0f 28 dd	 movaps	 xmm3, xmm5
  0002c	f3 0f 11 55 e8	 movss	 DWORD PTR tv1257[ebp], xmm2
  00031	f3 0f 5c de	 subss	 xmm3, xmm6
  00035	f3 0f 5c 50 14	 subss	 xmm2, DWORD PTR [eax+20]
  0003a	f3 0f 5c 60 14	 subss	 xmm4, DWORD PTR [eax+20]
  0003f	f3 0f 11 45 fc	 movss	 DWORD PTR tv1256[ebp], xmm0
  00044	f3 0f 11 5d f8	 movss	 DWORD PTR tv1253[ebp], xmm3
  00049	f3 0f 11 55 08	 movss	 DWORD PTR tv1259[ebp], xmm2

; 182  :     z = fz;

  0004e	0f 28 d0	 movaps	 xmm2, xmm0
  00051	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00055	0f 28 c3	 movaps	 xmm0, xmm3
  00058	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0005c	f3 0f 58 d0	 addss	 xmm2, xmm0
  00060	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv1259[ebp]
  00065	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00069	f3 0f 58 d0	 addss	 xmm2, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00072	0f 28 d8	 movaps	 xmm3, xmm0
  00075	f3 0f 11 45 f0	 movss	 DWORD PTR tv1260[ebp], xmm0
  0007a	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0007f	f3 0f 5c de	 subss	 xmm3, xmm6
  00083	f3 0f 11 45 ec	 movss	 DWORD PTR tv1263[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00088	f3 0f 11 55 f4	 movss	 DWORD PTR _l$1$[ebp], xmm2

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0008d	0f 28 d0	 movaps	 xmm2, xmm0
  00090	f3 0f 5c 50 10	 subss	 xmm2, DWORD PTR [eax+16]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00095	0f 28 c3	 movaps	 xmm0, xmm3
  00098	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR tv1253[ebp]

; 182  :     z = fz;

  0009d	0f 28 ca	 movaps	 xmm1, xmm2
  000a0	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR tv1256[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000a5	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a9	0f 28 c4	 movaps	 xmm0, xmm4
  000ac	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv1259[ebp]
  000b1	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 84   : 	if (d<=0.0f)

  000b8	0f 2f c1	 comiss	 xmm0, xmm1
  000bb	72 19		 jb	 SHORT $LN6@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000bd	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000c1	f3 0f 59 db	 mulss	 xmm3, xmm3
  000c5	f3 0f 59 e4	 mulss	 xmm4, xmm4
  000c9	f3 0f 58 d3	 addss	 xmm2, xmm3
  000cd	f3 0f 58 d4	 addss	 xmm2, xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 86   : 		return D3DXVec3LengthSq(&(x-p1));

  000d1	e9 8d 00 00 00	 jmp	 $LN55@OnMovement
$LN6@OnMovement:

; 87   : 	}
; 88   : 	else if (d>=l)

  000d6	0f 2f 4d f4	 comiss	 xmm1, DWORD PTR _l$1$[ebp]
  000da	72 38		 jb	 SHORT $LN8@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000dc	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  000e1	f3 0f 10 61 08	 movss	 xmm4, DWORD PTR [ecx+8]
  000e6	0f 28 c3	 movaps	 xmm0, xmm3
  000e9	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  000ee	f3 0f 5c c5	 subss	 xmm0, xmm5
  000f2	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR tv1257[ebp]
  000f7	0f 28 d4	 movaps	 xmm2, xmm4
  000fa	f3 0f 5c d7	 subss	 xmm2, xmm7

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000fe	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00102	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 182  :     z = fz;

  00106	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0010a	f3 0f 58 d0	 addss	 xmm2, xmm0
  0010e	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 90   : 		return D3DXVec3LengthSq(&(x-p2));

  00112	eb 59		 jmp	 SHORT $LN9@OnMovement
$LN8@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00114	0f 28 ca	 movaps	 xmm1, xmm2

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00117	0f 28 c4	 movaps	 xmm0, xmm4
  0011a	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR tv1256[ebp]

; 182  :     z = fz;

  0011f	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR tv1259[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00124	f3 0f 59 65 f8	 mulss	 xmm4, DWORD PTR tv1253[ebp]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00129	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR tv1253[ebp]
  0012e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00132	0f 28 c3	 movaps	 xmm0, xmm3
  00135	f3 0f 59 5d fc	 mulss	 xmm3, DWORD PTR tv1256[ebp]
  0013a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR tv1259[ebp]
  0013f	f3 0f 5c da	 subss	 xmm3, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00143	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00147	f3 0f 5c e0	 subss	 xmm4, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0014b	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1281 :     *pOut = v;

  0014f	0f 28 d4	 movaps	 xmm2, xmm4
  00152	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00156	f3 0f 58 d1	 addss	 xmm2, xmm1
  0015a	f3 0f 58 d3	 addss	 xmm2, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 95   : 		return D3DXVec3LengthSq(D3DXVec3Cross(&c,&(x-p1),&(p2-p1)))/l;

  0015e	f3 0f 5e 55 f4	 divss	 xmm2, DWORD PTR _l$1$[ebp]
$LN55@OnMovement:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 231  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition,s.v3Position,m_attribute.v3Position) < (m_attribute.fRadius+s.fRadius)*(m_attribute.fRadius+s.fRadius))

  00163	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR tv1263[ebp]
  00168	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR tv1260[ebp]
$LN9@OnMovement:
  0016d	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00172	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00177	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0017b	0f 2f c2	 comiss	 xmm0, xmm2
  0017e	76 3a		 jbe	 SHORT $LN3@OnMovement
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00180	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00185	f3 0f 5c eb	 subss	 xmm5, xmm3
  00189	f3 0f 5c f3	 subss	 xmm6, xmm3
  0018d	f3 0f 5c fc	 subss	 xmm7, xmm4
  00191	f3 0f 5c c4	 subss	 xmm0, xmm4
  00195	f3 0f 59 ed	 mulss	 xmm5, xmm5
  00199	f3 0f 59 ff	 mulss	 xmm7, xmm7
  0019d	f3 0f 59 f6	 mulss	 xmm6, xmm6
  001a1	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001a5	f3 0f 58 ef	 addss	 xmm5, xmm7
  001a9	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 233  : 		if (GetVector3Distance(s.v3Position, m_attribute.v3Position) <

  001ad	0f 2f f5	 comiss	 xmm6, xmm5
  001b0	76 08		 jbe	 SHORT $LN3@OnMovement

; 234  : 			GetVector3Distance(s.v3LastPosition, m_attribute.v3Position))
; 235  : 			return true;

  001b2	b0 01		 mov	 al, 1

; 239  : }

  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 04 00	 ret	 4
$LN3@OnMovement:

; 236  : 	}
; 237  : 
; 238  : 	return false;

  001ba	32 c0		 xor	 al, al

; 239  : }

  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CSphereCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CSphereCollisionInstance@@MAEXXZ PROC	; CSphereCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 226  : 	gs_sci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 227  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 227  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CSphereCollisionInstance@@MAEXXZ ENDP	; CSphereCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CSphereCollisionInstance::Render, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 219  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 3b		 jg	 SHORT $LN7@Render
$LN2@Render:

; 220  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 221  : 	s.RenderSphere(NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z, m_attribute.fRadius, d3dFillMode);

  00050	ff 75 08	 push	 DWORD PTR _d3dFillMode$[ebp]
  00053	0f 10 46 04	 movups	 xmm0, XMMWORD PTR [esi+4]
  00057	83 ec 10	 sub	 esp, 16			; 00000010H
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005f	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere

; 222  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN7@Render:

; 219  : 	static CScreen s;

  0007c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00081	e8 00 00 00 00	 call	 __Init_thread_header
  00086	83 c4 04	 add	 esp, 4
  00089	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  00090	75 af		 jne	 SHORT $LN2@Render
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000a3	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000a8	e8 00 00 00 00	 call	 _atexit
  000ad	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b9	e8 00 00 00 00	 call	 __Init_thread_footer
  000be	83 c4 08	 add	 esp, 8
  000c1	e9 7b ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CSphereCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ
_TEXT	SEGMENT
?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ PROC ; CSphereCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 214  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 215  : }

  00003	c3		 ret	 0
?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ENDP ; CSphereCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ
_TEXT	SEGMENT
?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ PROC ; CSphereCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 209  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 210  : }

  00003	c3		 ret	 0
?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ENDP ; CSphereCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_v3Pos$1$sroa$1973$1$ = -324				; size = 4
_pMat$GSCopy$1$ = -324					; size = 4
tv3570 = -324						; size = 4
_v3Pos$1$sroa$2040$1$ = -320				; size = 4
tv3568 = -320						; size = 4
_pkNewData$2 = -320					; size = 4
_pkNewData$3 = -320					; size = 4
_pkNewData$4 = -320					; size = 4
$T5 = -320						; size = 4
_v3Pos$1$sroa$1967$1$ = -316				; size = 4
_PlaneData$1$ = -316					; size = 4
tv3569 = -316						; size = 4
_pkNewData$6 = -316					; size = 4
_pkNewData$7 = -316					; size = 4
_ppci$1$ = -312						; size = 4
$T8 = -312						; size = 4
$T9 = -312						; size = 4
$T10 = -312						; size = 4
$T11 = -312						; size = 4
_matTranslationLocal$12 = -308				; size = 64
_matTransform$13 = -308					; size = 64
_matRotation$14 = -244					; size = 64
$T15 = -244						; size = 64
$T16 = -180						; size = 64
$T17 = -180						; size = 64
_matTranslationLocal$18 = -180				; size = 64
_matTranslationLocal$19 = -180				; size = 64
_matTranslationLocal$20 = -116				; size = 64
_matTranslationLocal$21 = -116				; size = 64
_matTransform$22 = -116					; size = 64
_matRotation$23 = -116					; size = 64
_v3Line1$24 = -52					; size = 12
_v3Line0$25 = -40					; size = 12
_v3Max$26 = -28						; size = 12
_v3Line3$27 = -28					; size = 12
_v3Min$28 = -16						; size = 12
_v3Line2$29 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_pCollisionData$ = 8					; size = 4
_pMat$ = 12						; size = 4
?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z PROC ; CBaseCollisionInstance::BuildCollisionInstance, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _pMat$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _c_pCollisionData$[ebp]
  0001b	89 b5 bc fe ff
	ff		 mov	 DWORD PTR _pMat$GSCopy$1$[ebp], esi

; 37   : 	switch(c_pCollisionData->dwType)

  00021	8b 07		 mov	 eax, DWORD PTR [edi]
  00023	83 f8 05	 cmp	 eax, 5
  00026	0f 87 e1 0a 00
	00		 ja	 $LN2@BuildColli
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN179@BuildColli[eax*4]
$LN7@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00033	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20
  00038	39 05 10 00 00
	00		 cmp	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0003e	75 69		 jne	 SHORT $LN15@BuildColli

; 65   : 				T* pkNewData=new T;

  00040	6a 7c		 push	 124			; 0000007cH
  00042	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
  00050	89 85 c0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00056	85 c0		 test	 eax, eax
  00058	74 08		 je	 SHORT $LN17@BuildColli
  0005a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPlaneCollisionInstance@@6B@
  00060	eb 08		 jmp	 SHORT $LN18@BuildColli
$LN17@BuildColli:
  00062	33 c0		 xor	 eax, eax
  00064	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
$LN18@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0006a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00070	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00076	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+12
  0007c	74 11		 je	 SHORT $LN29@BuildColli

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0007e	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00080	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00087	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  0008d	eb 2b		 jmp	 SHORT $LN14@BuildColli
$LN29@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0008f	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$7[ebp]
  00095	50		 push	 eax
  00096	51		 push	 ecx
  00097	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
  0009c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@QAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a1	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  000a7	eb 11		 jmp	 SHORT $LN14@BuildColli
$LN15@BuildColli:

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000a9	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  000ac	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000af	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1338 :         --_Mylast;

  000b5	a3 14 00 00 00	 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, eax
$LN14@BuildColli:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 44   : 				D3DXMatrixRotationQuaternion(&matRotation, &c_pCollisionData->quatRotation);

  000ba	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000bd	50		 push	 eax
  000be	8d 45 8c	 lea	 eax, DWORD PTR _matRotation$23[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 45   : 				D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  000c7	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  000cc	8d 77 28	 lea	 esi, DWORD PTR [edi+40]
  000cf	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000d2	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$19[ebp]
  000d8	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000de	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  000e3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000e9	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  000f8	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$19[ebp]
  000fe	50		 push	 eax
  000ff	8d 45 8c	 lea	 eax, DWORD PTR _matRotation$23[ebp]
  00102	50		 push	 eax
  00103	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
  0010f	ff b5 bc fe ff
	ff		 push	 DWORD PTR _pMat$GSCopy$1$[ebp]
  00115	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0011b	50		 push	 eax
  0011c	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTransform$13[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 48   : 				TPlaneData & PlaneData = ppci->GetAttribute();

  00128	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _ppci$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute

; 49   : 				D3DXVec3TransformCoord(&PlaneData.v3Position, &c_pCollisionData->v3Position, pMat);

  00133	ff b5 bc fe ff
	ff		 push	 DWORD PTR _pMat$GSCopy$1$[ebp]
  00139	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _PlaneData$1$[ebp], eax
  0013f	56		 push	 esi
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 50   : 				float fHalfWidth = c_pCollisionData->fDimensions[0] / 2.0f;

  00146	f3 0f 10 67 34	 movss	 xmm4, DWORD PTR [edi+52]

; 51   : 				float fHalfLength = c_pCollisionData->fDimensions[1] / 2.0f;

  0014b	f3 0f 10 5f 38	 movss	 xmm3, DWORD PTR [edi+56]

; 52   : 
; 53   : 				PlaneData.v3QuadPosition[0].x = -fHalfWidth;

  00150	8b bd c4 fe ff
	ff		 mov	 edi, DWORD PTR _PlaneData$1$[ebp]
  00156	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3f000000
  0015e	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  00161	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000

; 54   : 				PlaneData.v3QuadPosition[0].y = -fHalfLength;
; 55   : 				PlaneData.v3QuadPosition[0].z = 0.0f;

  00169	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00170	0f 28 d4	 movaps	 xmm2, xmm4

; 56   : 				PlaneData.v3QuadPosition[1].x = +fHalfWidth;

  00173	f3 0f 11 67 24	 movss	 DWORD PTR [edi+36], xmm4
  00178	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0017f	0f 28 cb	 movaps	 xmm1, xmm3

; 57   : 				PlaneData.v3QuadPosition[1].y = -fHalfLength;
; 58   : 				PlaneData.v3QuadPosition[1].z = 0.0f;

  00182	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00189	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00190	f3 0f 11 4f 1c	 movss	 DWORD PTR [edi+28], xmm1
  00195	f3 0f 11 4f 28	 movss	 DWORD PTR [edi+40], xmm1

; 59   : 				PlaneData.v3QuadPosition[2].x = -fHalfWidth;

  0019a	f3 0f 11 57 30	 movss	 DWORD PTR [edi+48], xmm2

; 60   : 				PlaneData.v3QuadPosition[2].y = +fHalfLength;

  0019f	f3 0f 11 5f 34	 movss	 DWORD PTR [edi+52], xmm3

; 61   : 				PlaneData.v3QuadPosition[2].z = 0.0f;

  001a4	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0

; 62   : 				PlaneData.v3QuadPosition[3].x = +fHalfWidth;

  001ab	f3 0f 11 67 3c	 movss	 DWORD PTR [edi+60], xmm4

; 63   : 				PlaneData.v3QuadPosition[3].y = +fHalfLength;

  001b0	f3 0f 11 5f 40	 movss	 DWORD PTR [edi+64], xmm3

; 64   : 				PlaneData.v3QuadPosition[3].z = 0.0f;

  001b5	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  001bc	bf 04 00 00 00	 mov	 edi, 4
  001c1	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
$LL6@BuildColli:

; 65   : 				for (DWORD i = 0; i < 4; ++i)
; 66   : 					D3DXVec3TransformCoord(&PlaneData.v3QuadPosition[i], &PlaneData.v3QuadPosition[i], &matTransform);

  001c5	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTransform$13[ebp]
  001cb	50		 push	 eax
  001cc	56		 push	 esi
  001cd	56		 push	 esi
  001ce	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
  001d3	83 c6 0c	 add	 esi, 12			; 0000000cH
  001d6	83 ef 01	 sub	 edi, 1
  001d9	75 ea		 jne	 SHORT $LL6@BuildColli
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001db	8b bd c4 fe ff
	ff		 mov	 edi, DWORD PTR _PlaneData$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 71   : 				D3DXVec3Normalize(&v3Line0, &v3Line0);

  001e1	8d 45 d8	 lea	 eax, DWORD PTR _v3Line0$25[ebp]
  001e4	50		 push	 eax
  001e5	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e6	f3 0f 10 57 28	 movss	 xmm2, DWORD PTR [edi+40]
  001eb	f3 0f 5c 57 1c	 subss	 xmm2, DWORD PTR [edi+28]
  001f0	f3 0f 10 4f 2c	 movss	 xmm1, DWORD PTR [edi+44]
  001f5	f3 0f 5c 4f 20	 subss	 xmm1, DWORD PTR [edi+32]
  001fa	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  001ff	f3 0f 5c 47 18	 subss	 xmm0, DWORD PTR [edi+24]

; 181  :     y = fy;

  00204	f3 0f 11 55 dc	 movss	 DWORD PTR _v3Line0$25[ebp+4], xmm2

; 182  :     z = fz;

  00209	f3 0f 11 4d e0	 movss	 DWORD PTR _v3Line0$25[ebp+8], xmm1
  0020e	f3 0f 11 45 d8	 movss	 DWORD PTR _v3Line0$25[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00213	f3 0f 10 57 34	 movss	 xmm2, DWORD PTR [edi+52]
  00218	f3 0f 5c 57 1c	 subss	 xmm2, DWORD PTR [edi+28]
  0021d	f3 0f 10 4f 38	 movss	 xmm1, DWORD PTR [edi+56]
  00222	f3 0f 5c 4f 20	 subss	 xmm1, DWORD PTR [edi+32]
  00227	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0022c	f3 0f 5c 47 18	 subss	 xmm0, DWORD PTR [edi+24]

; 181  :     y = fy;

  00231	f3 0f 11 55 d0	 movss	 DWORD PTR _v3Line1$24[ebp+4], xmm2

; 182  :     z = fz;

  00236	f3 0f 11 4d d4	 movss	 DWORD PTR _v3Line1$24[ebp+8], xmm1
  0023b	f3 0f 11 45 cc	 movss	 DWORD PTR _v3Line1$24[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00240	f3 0f 10 57 28	 movss	 xmm2, DWORD PTR [edi+40]
  00245	f3 0f 10 4f 2c	 movss	 xmm1, DWORD PTR [edi+44]
  0024a	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0024f	f3 0f 5c 57 40	 subss	 xmm2, DWORD PTR [edi+64]
  00254	f3 0f 5c 4f 44	 subss	 xmm1, DWORD PTR [edi+68]
  00259	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 181  :     y = fy;

  0025e	f3 0f 11 55 f4	 movss	 DWORD PTR _v3Line2$29[ebp+4], xmm2

; 182  :     z = fz;

  00263	f3 0f 11 4d f8	 movss	 DWORD PTR _v3Line2$29[ebp+8], xmm1
  00268	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Line2$29[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0026d	f3 0f 10 57 34	 movss	 xmm2, DWORD PTR [edi+52]
  00272	f3 0f 10 4f 38	 movss	 xmm1, DWORD PTR [edi+56]
  00277	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0027c	f3 0f 5c 57 40	 subss	 xmm2, DWORD PTR [edi+64]
  00281	f3 0f 5c 4f 44	 subss	 xmm1, DWORD PTR [edi+68]
  00286	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 181  :     y = fy;

  0028b	f3 0f 11 55 e8	 movss	 DWORD PTR _v3Line3$27[ebp+4], xmm2

; 182  :     z = fz;

  00290	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Line3$27[ebp+8], xmm1
  00295	f3 0f 11 45 e4	 movss	 DWORD PTR _v3Line3$27[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 71   : 				D3DXVec3Normalize(&v3Line0, &v3Line0);

  0029a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 72   : 				D3DXVec3Normalize(&v3Line1, &v3Line1);

  0029f	8d 45 cc	 lea	 eax, DWORD PTR _v3Line1$24[ebp]
  002a2	50		 push	 eax
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 73   : 				D3DXVec3Normalize(&v3Line2, &v3Line2);

  002a9	8d 45 f0	 lea	 eax, DWORD PTR _v3Line2$29[ebp]
  002ac	50		 push	 eax
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 74   : 				D3DXVec3Normalize(&v3Line3, &v3Line3);

  002b3	8d 45 e4	 lea	 eax, DWORD PTR _v3Line3$27[ebp]
  002b6	50		 push	 eax
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002bd	f3 0f 10 6d d8	 movss	 xmm5, DWORD PTR _v3Line0$25[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 75   : 				D3DXVec3Cross(&PlaneData.v3Normal, &v3Line0, &v3Line1);

  002c2	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002c5	f3 0f 10 55 cc	 movss	 xmm2, DWORD PTR _v3Line1$24[ebp]
  002ca	0f 28 c5	 movaps	 xmm0, xmm5
  002cd	f3 0f 10 5d d4	 movss	 xmm3, DWORD PTR _v3Line1$24[ebp+8]
  002d2	0f 28 f2	 movaps	 xmm6, xmm2

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002d5	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _v3Line1$24[ebp+4]
  002da	f3 0f 59 75 e0	 mulss	 xmm6, DWORD PTR _v3Line0$25[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 76   : 				D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  002df	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002e0	f3 0f 59 55 dc	 mulss	 xmm2, DWORD PTR _v3Line0$25[ebp+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 76   : 				D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  002e5	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002e6	f3 0f 59 c3	 mulss	 xmm0, xmm3
  002ea	f3 0f 59 5d dc	 mulss	 xmm3, DWORD PTR _v3Line0$25[ebp+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002ef	f3 0f 59 e9	 mulss	 xmm5, xmm1
  002f3	f3 0f 5c f0	 subss	 xmm6, xmm0
  002f7	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _v3Line0$25[ebp+8]
  002fc	f3 0f 5c ea	 subss	 xmm5, xmm2
  00300	f3 0f 5c d9	 subss	 xmm3, xmm1

; 1280 : 
; 1281 :     *pOut = v;

  00304	f3 0f 11 1e	 movss	 DWORD PTR [esi], xmm3
  00308	f3 0f 11 76 04	 movss	 DWORD PTR [esi+4], xmm6
  0030d	f3 0f 11 6e 08	 movss	 DWORD PTR [esi+8], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 76   : 				D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  00312	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00317	f3 0f 10 6e 08	 movss	 xmm5, DWORD PTR [esi+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0031c	f3 0f 10 3e	 movss	 xmm7, DWORD PTR [esi]
  00320	0f 28 e5	 movaps	 xmm4, xmm5
  00323	f3 0f 10 76 04	 movss	 xmm6, DWORD PTR [esi+4]
  00328	0f 28 c7	 movaps	 xmm0, xmm7
  0032b	f3 0f 59 65 d8	 mulss	 xmm4, DWORD PTR _v3Line0$25[ebp]
  00330	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _v3Line0$25[ebp+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 83   : 				return ppci;

  00335	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _ppci$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0033b	f3 0f 59 6d dc	 mulss	 xmm5, DWORD PTR _v3Line0$25[ebp+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00340	f3 0f 59 7d dc	 mulss	 xmm7, DWORD PTR _v3Line0$25[ebp+4]
  00345	f3 0f 5c e0	 subss	 xmm4, xmm0
  00349	0f 28 c6	 movaps	 xmm0, xmm6
  0034c	f3 0f 59 75 e0	 mulss	 xmm6, DWORD PTR _v3Line0$25[ebp+8]
  00351	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _v3Line0$25[ebp]
  00356	f3 0f 5c f5	 subss	 xmm6, xmm5
  0035a	f3 0f 5c f8	 subss	 xmm7, xmm0

; 1280 : 
; 1281 :     *pOut = v;

  0035e	f3 0f 11 77 48	 movss	 DWORD PTR [edi+72], xmm6
  00363	f3 0f 11 67 4c	 movss	 DWORD PTR [edi+76], xmm4
  00368	f3 0f 11 7f 50	 movss	 DWORD PTR [edi+80], xmm7

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0036d	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]
  00372	f3 0f 10 76 04	 movss	 xmm6, DWORD PTR [esi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00377	0f 28 c7	 movaps	 xmm0, xmm7
  0037a	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0037e	0f 28 de	 movaps	 xmm3, xmm6
  00381	f3 0f 59 7d d0	 mulss	 xmm7, DWORD PTR _v3Line1$24[ebp+4]
  00386	0f 28 ea	 movaps	 xmm5, xmm2
  00389	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _v3Line1$24[ebp]
  0038e	f3 0f 59 75 d4	 mulss	 xmm6, DWORD PTR _v3Line1$24[ebp+8]
  00393	f3 0f 59 6d d4	 mulss	 xmm5, DWORD PTR _v3Line1$24[ebp+8]
  00398	f3 0f 59 5d cc	 mulss	 xmm3, DWORD PTR _v3Line1$24[ebp]
  0039d	f3 0f 5c fe	 subss	 xmm7, xmm6
  003a1	f3 0f 59 55 d0	 mulss	 xmm2, DWORD PTR _v3Line1$24[ebp+4]
  003a6	f3 0f 5c e8	 subss	 xmm5, xmm0

; 1280 : 
; 1281 :     *pOut = v;

  003aa	f3 0f 11 7f 54	 movss	 DWORD PTR [edi+84], xmm7
  003af	f3 0f 5c da	 subss	 xmm3, xmm2
  003b3	f3 0f 11 6f 58	 movss	 DWORD PTR [edi+88], xmm5
  003b8	f3 0f 11 5f 5c	 movss	 DWORD PTR [edi+92], xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003bd	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]
  003c2	f3 0f 10 76 04	 movss	 xmm6, DWORD PTR [esi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003c7	0f 28 c7	 movaps	 xmm0, xmm7
  003ca	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  003ce	0f 28 de	 movaps	 xmm3, xmm6
  003d1	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _v3Line2$29[ebp]
  003d6	0f 28 ea	 movaps	 xmm5, xmm2
  003d9	f3 0f 59 7d f4	 mulss	 xmm7, DWORD PTR _v3Line2$29[ebp+4]
  003de	f3 0f 59 75 f8	 mulss	 xmm6, DWORD PTR _v3Line2$29[ebp+8]
  003e3	f3 0f 59 6d f8	 mulss	 xmm5, DWORD PTR _v3Line2$29[ebp+8]
  003e8	f3 0f 59 5d f0	 mulss	 xmm3, DWORD PTR _v3Line2$29[ebp]
  003ed	f3 0f 5c fe	 subss	 xmm7, xmm6
  003f1	f3 0f 59 55 f4	 mulss	 xmm2, DWORD PTR _v3Line2$29[ebp+4]
  003f6	f3 0f 5c e8	 subss	 xmm5, xmm0

; 1280 : 
; 1281 :     *pOut = v;

  003fa	f3 0f 11 7f 60	 movss	 DWORD PTR [edi+96], xmm7
  003ff	f3 0f 5c da	 subss	 xmm3, xmm2
  00403	f3 0f 11 6f 64	 movss	 DWORD PTR [edi+100], xmm5
  00408	f3 0f 11 5f 68	 movss	 DWORD PTR [edi+104], xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0040d	f3 0f 10 6e 08	 movss	 xmm5, DWORD PTR [esi+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00412	f3 0f 10 3e	 movss	 xmm7, DWORD PTR [esi]
  00416	0f 28 e5	 movaps	 xmm4, xmm5
  00419	f3 0f 59 65 e4	 mulss	 xmm4, DWORD PTR _v3Line3$27[ebp]
  0041e	0f 28 c7	 movaps	 xmm0, xmm7
  00421	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _v3Line3$27[ebp+8]
  00426	f3 0f 10 76 04	 movss	 xmm6, DWORD PTR [esi+4]
  0042b	f3 0f 59 6d e8	 mulss	 xmm5, DWORD PTR _v3Line3$27[ebp+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00430	f3 0f 59 7d e8	 mulss	 xmm7, DWORD PTR _v3Line3$27[ebp+4]
  00435	f3 0f 5c e0	 subss	 xmm4, xmm0
  00439	0f 28 c6	 movaps	 xmm0, xmm6
  0043c	f3 0f 59 75 ec	 mulss	 xmm6, DWORD PTR _v3Line3$27[ebp+8]
  00441	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _v3Line3$27[ebp]
  00446	f3 0f 5c f5	 subss	 xmm6, xmm5
  0044a	f3 0f 5c f8	 subss	 xmm7, xmm0

; 1280 : 
; 1281 :     *pOut = v;

  0044e	f3 0f 11 77 6c	 movss	 DWORD PTR [edi+108], xmm6
  00453	f3 0f 11 67 70	 movss	 DWORD PTR [edi+112], xmm4
  00458	f3 0f 11 7f 74	 movss	 DWORD PTR [edi+116], xmm7
  0045d	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 197  : }

  0045e	5e		 pop	 esi
  0045f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00462	33 cd		 xor	 ecx, ebp
  00464	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00469	8b e5		 mov	 esp, ebp
  0046b	5d		 pop	 ebp
  0046c	c3		 ret	 0
$LN9@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0046d	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20
  00472	39 05 10 00 00
	00		 cmp	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00478	75 63		 jne	 SHORT $LN68@BuildColli

; 65   : 				T* pkNewData=new T;

  0047a	6a 1c		 push	 28			; 0000001cH
  0047c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00481	83 c4 04	 add	 esp, 4
  00484	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  0048a	85 c0		 test	 eax, eax
  0048c	74 08		 je	 SHORT $LN70@BuildColli
  0048e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAABBCollisionInstance@@6B@
  00494	eb 08		 jmp	 SHORT $LN71@BuildColli
$LN70@BuildColli:
  00496	33 c0		 xor	 eax, eax
  00498	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
$LN71@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0049e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  004a4	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  004aa	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+12
  004b0	74 11		 je	 SHORT $LN82@BuildColli

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  004b2	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  004b4	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  004bb	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  004c1	eb 2b		 jmp	 SHORT $LN67@BuildColli
$LN82@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004c3	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$6[ebp]
  004c9	50		 push	 eax
  004ca	51		 push	 ecx
  004cb	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
  004d0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@QAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  004d5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  004db	eb 11		 jmp	 SHORT $LN67@BuildColli
$LN68@BuildColli:

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  004dd	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  004e0	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  004e3	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1338 :         --_Mylast;

  004e9	a3 14 00 00 00	 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, eax
$LN67@BuildColli:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 94   : 				D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  004ee	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  004f3	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$18[ebp]
  004f9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004fc	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00502	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00507	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0050d	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	50		 push	 eax
  00518	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 95   : 				D3DXMATRIX matTransform = *pMat;

  0051d	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 96   : 
; 97   : 				D3DXVECTOR3 v3Pos;
; 98   : 				v3Pos.x = matTranslationLocal._41;
; 99   : 				v3Pos.y = matTranslationLocal._42;
; 100  : 				v3Pos.z = matTranslationLocal._43;
; 101  : 
; 102  : 				TAABBData & AABBData = paci->GetAttribute();

  00520	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T11[ebp]
  00526	0f 11 45 8c	 movups	 XMMWORD PTR _matTransform$22[ebp], xmm0
  0052a	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  0052e	0f 11 45 9c	 movups	 XMMWORD PTR _matTransform$22[ebp+16], xmm0
  00532	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00536	0f 11 45 ac	 movups	 XMMWORD PTR _matTransform$22[ebp+32], xmm0
  0053a	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  0053e	0f 11 45 bc	 movups	 XMMWORD PTR _matTransform$22[ebp+48], xmm0
  00542	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _matTranslationLocal$18[ebp+48]
  0054a	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _v3Pos$1$sroa$1967$1$[ebp], xmm0
  00552	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _matTranslationLocal$18[ebp+52]
  00557	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _v3Pos$1$sroa$1973$1$[ebp], xmm0
  0055f	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _matTranslationLocal$18[ebp+56]
  00564	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _v3Pos$1$sroa$2040$1$[ebp], xmm0
  0056c	e8 00 00 00 00	 call	 ?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute

; 103  : 				AABBData.v3Min.x = v3Pos.x - c_pCollisionData->fDimensions[0];

  00571	f3 0f 10 8d c4
	fe ff ff	 movss	 xmm1, DWORD PTR _v3Pos$1$sroa$1967$1$[ebp]

; 104  : 				AABBData.v3Min.y = v3Pos.y - c_pCollisionData->fDimensions[1];
; 105  : 				AABBData.v3Min.z = v3Pos.z - c_pCollisionData->fDimensions[2];
; 106  : 				AABBData.v3Max.x = v3Pos.x + c_pCollisionData->fDimensions[0];

  00579	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
  0057c	f3 0f 10 95 bc
	fe ff ff	 movss	 xmm2, DWORD PTR _v3Pos$1$sroa$1973$1$[ebp]

; 107  : 				AABBData.v3Max.y = v3Pos.y + c_pCollisionData->fDimensions[1];
; 108  : 				AABBData.v3Max.z = v3Pos.z + c_pCollisionData->fDimensions[2];
; 109  : 
; 110  : 				D3DXVec3TransformCoord(&AABBData.v3Min, &AABBData.v3Min, &matTransform);

  00584	8d 4d 8c	 lea	 ecx, DWORD PTR _matTransform$22[ebp]
  00587	f3 0f 10 9d c0
	fe ff ff	 movss	 xmm3, DWORD PTR _v3Pos$1$sroa$2040$1$[ebp]
  0058f	0f 28 c1	 movaps	 xmm0, xmm1
  00592	f3 0f 5c 47 34	 subss	 xmm0, DWORD PTR [edi+52]
  00597	51		 push	 ecx
  00598	50		 push	 eax
  00599	50		 push	 eax
  0059a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0059e	0f 28 c2	 movaps	 xmm0, xmm2
  005a1	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  005a6	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  005ab	0f 28 c3	 movaps	 xmm0, xmm3
  005ae	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]
  005b3	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  005b8	f3 0f 58 4f 34	 addss	 xmm1, DWORD PTR [edi+52]
  005bd	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  005c1	f3 0f 58 57 38	 addss	 xmm2, DWORD PTR [edi+56]
  005c6	f3 0f 11 50 10	 movss	 DWORD PTR [eax+16], xmm2
  005cb	f3 0f 58 5f 3c	 addss	 xmm3, DWORD PTR [edi+60]
  005d0	f3 0f 11 58 14	 movss	 DWORD PTR [eax+20], xmm3
  005d5	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 111  : 				D3DXVec3TransformCoord(&AABBData.v3Max, &AABBData.v3Max, &matTransform);

  005da	8d 45 8c	 lea	 eax, DWORD PTR _matTransform$22[ebp]
  005dd	50		 push	 eax
  005de	56		 push	 esi
  005df	56		 push	 esi
  005e0	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 112  : 
; 113  : 				return paci;

  005e5	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  005eb	5f		 pop	 edi

; 197  : }

  005ec	5e		 pop	 esi
  005ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005f0	33 cd		 xor	 ecx, ebp
  005f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005f7	8b e5		 mov	 esp, ebp
  005f9	5d		 pop	 ebp
  005fa	c3		 ret	 0
$LN10@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  005fb	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20
  00600	39 05 10 00 00
	00		 cmp	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00606	75 63		 jne	 SHORT $LN91@BuildColli

; 65   : 				T* pkNewData=new T;

  00608	6a 5c		 push	 92			; 0000005cH
  0060a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0060f	83 c4 04	 add	 esp, 4
  00612	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  00618	85 c0		 test	 eax, eax
  0061a	74 08		 je	 SHORT $LN93@BuildColli
  0061c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7COBBCollisionInstance@@6B@
  00622	eb 08		 jmp	 SHORT $LN94@BuildColli
$LN93@BuildColli:
  00624	33 c0		 xor	 eax, eax
  00626	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
$LN94@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0062c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00632	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _pkNewData$4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00638	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+12
  0063e	74 11		 je	 SHORT $LN105@BuildColli

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00640	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00642	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00649	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  0064f	eb 2b		 jmp	 SHORT $LN90@BuildColli
$LN105@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00651	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$4[ebp]
  00657	50		 push	 eax
  00658	51		 push	 ecx
  00659	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
  0065e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@QAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00663	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  00669	eb 11		 jmp	 SHORT $LN90@BuildColli
$LN91@BuildColli:

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  0066b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  0066e	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00671	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1338 :         --_Mylast;

  00677	a3 14 00 00 00	 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, eax
$LN90@BuildColli:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 120  : 				D3DXMATRIX matTranslationLocal; D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  0067c	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00681	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$12[ebp]
  00687	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0068a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00690	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00695	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0069b	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  006a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a5	50		 push	 eax
  006a6	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 121  : 				D3DXMATRIX matRotation; D3DXMatrixRotationQuaternion(&matRotation, &c_pCollisionData->quatRotation);

  006ab	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  006ae	50		 push	 eax
  006af	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _matRotation$14[ebp]
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 122  : 
; 123  : 				D3DXMATRIX matTranslationWorld; D3DXMatrixIdentity(&matTranslationWorld);
; 124  : 				matTranslationWorld._41 = pMat->_41; matTranslationWorld._42 = pMat->_42; matTranslationWorld._43 = pMat->_43; matTranslationWorld._44 = pMat->_44;
; 125  : 
; 126  : 				D3DXVECTOR3 v3Min, v3Max;
; 127  : 				v3Min.x = c_pCollisionData->v3Position.x - c_pCollisionData->fDimensions[0];

  006bb	f3 0f 10 6f 34	 movss	 xmm5, DWORD PTR [edi+52]

; 128  : 				v3Min.y = c_pCollisionData->v3Position.y - c_pCollisionData->fDimensions[1];
; 129  : 				v3Min.z = c_pCollisionData->v3Position.z - c_pCollisionData->fDimensions[2];
; 130  : 				v3Max.x = c_pCollisionData->v3Position.x + c_pCollisionData->fDimensions[0];
; 131  : 				v3Max.y = c_pCollisionData->v3Position.y + c_pCollisionData->fDimensions[1];
; 132  : 				v3Max.z = c_pCollisionData->v3Position.z + c_pCollisionData->fDimensions[2];
; 133  : 
; 134  : 				D3DXVec3TransformCoord(&v3Min, &v3Min, pMat);

  006c0	8d 45 f0	 lea	 eax, DWORD PTR _v3Min$28[ebp]
  006c3	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  006c8	f3 0f 10 5f 38	 movss	 xmm3, DWORD PTR [edi+56]
  006cd	f3 0f 5c c5	 subss	 xmm0, xmm5
  006d1	f3 0f 10 4f 3c	 movss	 xmm1, DWORD PTR [edi+60]
  006d6	f3 0f 58 6f 28	 addss	 xmm5, DWORD PTR [edi+40]
  006db	56		 push	 esi
  006dc	50		 push	 eax
  006dd	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Min$28[ebp], xmm0
  006e2	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  006e7	f3 0f 5c c3	 subss	 xmm0, xmm3
  006eb	f3 0f 11 6d e4	 movss	 DWORD PTR _v3Max$26[ebp], xmm5
  006f0	f3 0f 58 5f 2c	 addss	 xmm3, DWORD PTR [edi+44]
  006f5	50		 push	 eax
  006f6	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Min$28[ebp+4], xmm0
  006fb	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00700	f3 0f 5c c1	 subss	 xmm0, xmm1
  00704	f3 0f 11 5d e8	 movss	 DWORD PTR _v3Max$26[ebp+4], xmm3
  00709	f3 0f 58 4f 30	 addss	 xmm1, DWORD PTR [edi+48]
  0070e	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Min$28[ebp+8], xmm0
  00713	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Max$26[ebp+8], xmm1
  00718	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 135  : 				D3DXVec3TransformCoord(&v3Max, &v3Max, pMat);

  0071d	56		 push	 esi
  0071e	8d 45 e4	 lea	 eax, DWORD PTR _v3Max$26[ebp]
  00721	50		 push	 eax
  00722	50		 push	 eax
  00723	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00728	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _v3Max$26[ebp]
  0072d	f3 0f 58 4d f0	 addss	 xmm1, DWORD PTR _v3Min$28[ebp]

; 182  :     z = fz;

  00732	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 138  : 				TOBBData & OBBData = poci->GetAttribute();

  0073a	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00740	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00744	f3 0f 11 8d c0
	fe ff ff	 movss	 DWORD PTR tv3568[ebp], xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0074c	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _v3Max$26[ebp+4]
  00751	f3 0f 58 4d f4	 addss	 xmm1, DWORD PTR _v3Min$28[ebp+4]

; 180  :     x = fx;

  00756	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0075a	f3 0f 11 8d c4
	fe ff ff	 movss	 DWORD PTR tv3569[ebp], xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00762	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v3Max$26[ebp+8]
  00767	f3 0f 58 4d f8	 addss	 xmm1, DWORD PTR _v3Min$28[ebp+8]

; 181  :     y = fy;

  0076c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00770	f3 0f 11 8d bc
	fe ff ff	 movss	 DWORD PTR tv3570[ebp], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 138  : 				TOBBData & OBBData = poci->GetAttribute();

  00778	e8 00 00 00 00	 call	 ?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute

; 139  : 				OBBData.v3Min.x = v3Position.x - c_pCollisionData->fDimensions[0];

  0077d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv3568[ebp]
  00785	f3 0f 5c 47 34	 subss	 xmm0, DWORD PTR [edi+52]
  0078a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 140  : 				OBBData.v3Min.y = v3Position.y - c_pCollisionData->fDimensions[1];

  0078e	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv3569[ebp]
  00796	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  0079b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 141  : 				OBBData.v3Min.z = v3Position.z - c_pCollisionData->fDimensions[2];

  007a0	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv3570[ebp]
  007a8	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]
  007ad	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 142  : 				OBBData.v3Max.x = v3Position.x + c_pCollisionData->fDimensions[0];

  007b2	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  007b7	f3 0f 58 85 c0
	fe ff ff	 addss	 xmm0, DWORD PTR tv3568[ebp]
  007bf	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 143  : 				OBBData.v3Max.y = v3Position.y + c_pCollisionData->fDimensions[1];

  007c4	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  007c9	f3 0f 58 85 c4
	fe ff ff	 addss	 xmm0, DWORD PTR tv3569[ebp]
  007d1	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 144  : 				OBBData.v3Max.z = v3Position.z + c_pCollisionData->fDimensions[2];

  007d6	f3 0f 10 47 3c	 movss	 xmm0, DWORD PTR [edi+60]
  007db	f3 0f 58 85 bc
	fe ff ff	 addss	 xmm0, DWORD PTR tv3570[ebp]
  007e3	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  007e8	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  007ef	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  007f6	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  007fd	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0
  00804	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
  0080b	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  00812	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  00819	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  00820	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  00827	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  0082e	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00835	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0083c	c7 40 54 00 00
	80 3f		 mov	 DWORD PTR [eax+84], 1065353216 ; 3f800000H
  00843	c7 40 40 00 00
	80 3f		 mov	 DWORD PTR [eax+64], 1065353216 ; 3f800000H
  0084a	c7 40 2c 00 00
	80 3f		 mov	 DWORD PTR [eax+44], 1065353216 ; 3f800000H
  00851	c7 40 18 00 00
	80 3f		 mov	 DWORD PTR [eax+24], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 150  : 				D3DXMatrixIdentity(&OBBData.matRot); OBBData.matRot = *pMat;

  00858	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0085b	5f		 pop	 edi
  0085c	0f 11 40 18	 movups	 XMMWORD PTR [eax+24], xmm0
  00860	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00864	0f 11 40 28	 movups	 XMMWORD PTR [eax+40], xmm0
  00868	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  0086c	0f 11 40 38	 movups	 XMMWORD PTR [eax+56], xmm0
  00870	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]

; 197  : }

  00874	5e		 pop	 esi
  00875	0f 11 40 48	 movups	 XMMWORD PTR [eax+72], xmm0
  00879	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  00880	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00887	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0088e	c7 40 54 00 00
	80 3f		 mov	 DWORD PTR [eax+84], 1065353216 ; 3f800000H
  00895	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  0089b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0089e	33 cd		 xor	 ecx, ebp
  008a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008a5	8b e5		 mov	 esp, ebp
  008a7	5d		 pop	 ebp
  008a8	c3		 ret	 0
$LN11@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  008a9	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20
  008ae	39 05 10 00 00
	00		 cmp	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  008b4	75 63		 jne	 SHORT $LN126@BuildColli

; 65   : 				T* pkNewData=new T;

  008b6	6a 14		 push	 20			; 00000014H
  008b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  008bd	83 c4 04	 add	 esp, 4
  008c0	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  008c6	85 c0		 test	 eax, eax
  008c8	74 08		 je	 SHORT $LN128@BuildColli
  008ca	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSphereCollisionInstance@@6B@
  008d0	eb 08		 jmp	 SHORT $LN129@BuildColli
$LN128@BuildColli:
  008d2	33 c0		 xor	 eax, eax
  008d4	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
$LN129@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  008da	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  008e0	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _pkNewData$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  008e6	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+12
  008ec	74 11		 je	 SHORT $LN140@BuildColli

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  008ee	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  008f0	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  008f7	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  008fd	eb 2b		 jmp	 SHORT $LN125@BuildColli
$LN140@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  008ff	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  00905	50		 push	 eax
  00906	51		 push	 ecx
  00907	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
  0090c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@QAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00911	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  00917	eb 11		 jmp	 SHORT $LN125@BuildColli
$LN126@BuildColli:

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00919	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  0091c	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  0091f	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1338 :         --_Mylast;

  00925	a3 14 00 00 00	 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, eax
$LN125@BuildColli:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 164  : 				D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  0092a	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0092f	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$21[ebp]
  00932	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00935	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0093b	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00940	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00946	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  0094b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00950	50		 push	 eax
  00951	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00956	56		 push	 esi
  00957	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$21[ebp]
  0095a	50		 push	 eax
  0095b	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00961	50		 push	 eax
  00962	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 165  : 				matTranslationLocal = matTranslationLocal * *pMat;

  00967	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp]

; 166  : 
; 167  : 				TSphereData & SphereData = psci->GetAttribute();

  0096e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  00974	0f 11 45 8c	 movups	 XMMWORD PTR _matTranslationLocal$21[ebp], xmm0
  00978	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp+16]
  0097f	0f 11 45 9c	 movups	 XMMWORD PTR _matTranslationLocal$21[ebp+16], xmm0
  00983	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp+32]
  0098a	0f 11 45 ac	 movups	 XMMWORD PTR _matTranslationLocal$21[ebp+32], xmm0
  0098e	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp+48]
  00995	0f 11 45 bc	 movups	 XMMWORD PTR _matTranslationLocal$21[ebp+48], xmm0
  00999	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute

; 168  : 				SphereData.v3Position.x = matTranslationLocal._41;

  0099e	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp+48]
  009a5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 169  : 				SphereData.v3Position.y = matTranslationLocal._42;

  009a9	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _matTranslationLocal$21[ebp+52]
  009ae	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 170  : 				SphereData.v3Position.z = matTranslationLocal._43;

  009b3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _matTranslationLocal$21[ebp+56]
  009b8	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 171  : 				SphereData.fRadius = c_pCollisionData->fDimensions[0];

  009bd	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  009c0	5f		 pop	 edi
  009c1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 172  : 
; 173  : 				return psci;

  009c4	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]

; 197  : }

  009ca	5e		 pop	 esi
  009cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009ce	33 cd		 xor	 ecx, ebp
  009d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009d5	8b e5		 mov	 esp, ebp
  009d7	5d		 pop	 ebp
  009d8	c3		 ret	 0
$LN12@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  009d9	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20
  009de	39 05 10 00 00
	00		 cmp	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  009e4	75 63		 jne	 SHORT $LN151@BuildColli

; 65   : 				T* pkNewData=new T;

  009e6	6a 18		 push	 24			; 00000018H
  009e8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  009ed	83 c4 04	 add	 esp, 4
  009f0	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  009f6	85 c0		 test	 eax, eax
  009f8	74 08		 je	 SHORT $LN153@BuildColli
  009fa	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCylinderCollisionInstance@@6B@
  00a00	eb 08		 jmp	 SHORT $LN154@BuildColli
$LN153@BuildColli:
  00a02	33 c0		 xor	 eax, eax
  00a04	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
$LN154@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00a0a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00a10	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _pkNewData$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00a16	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+12
  00a1c	74 11		 je	 SHORT $LN165@BuildColli

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00a1e	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00a20	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00a27	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  00a2d	eb 2b		 jmp	 SHORT $LN150@BuildColli
$LN165@BuildColli:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a2f	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  00a35	50		 push	 eax
  00a36	51		 push	 ecx
  00a37	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
  00a3c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@QAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00a41	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+32

; 68   : 				return pkNewData;

  00a47	eb 11		 jmp	 SHORT $LN150@BuildColli
$LN151@BuildColli:

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00a49	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  00a4c	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00a4f	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1338 :         --_Mylast;

  00a55	a3 14 00 00 00	 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, eax
$LN150@BuildColli:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 181  : 				D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  00a5a	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00a5f	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$20[ebp]
  00a62	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00a65	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00a6b	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00a70	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00a76	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00a7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a80	50		 push	 eax
  00a81	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00a86	56		 push	 esi
  00a87	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$20[ebp]
  00a8a	50		 push	 eax
  00a8b	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00a91	50		 push	 eax
  00a92	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 182  : 				matTranslationLocal = matTranslationLocal * *pMat;

  00a97	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp]

; 183  : 
; 184  : 				TCylinderData & CylinderData = pcci->GetAttribute();

  00a9e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  00aa4	0f 11 45 8c	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp], xmm0
  00aa8	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+16]
  00aaf	0f 11 45 9c	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+16], xmm0
  00ab3	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+32]
  00aba	0f 11 45 ac	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+32], xmm0
  00abe	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+48]
  00ac5	0f 11 45 bc	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+48], xmm0
  00ac9	e8 00 00 00 00	 call	 ?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute

; 185  : 				CylinderData.fRadius = c_pCollisionData->fDimensions[0];

  00ace	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00ad1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 186  : 				CylinderData.fHeight = c_pCollisionData->fDimensions[1];

  00ad4	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00ad7	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 187  : 				CylinderData.v3Position.x = matTranslationLocal._41;

  00ada	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _matTranslationLocal$20[ebp+48]
  00adf	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 188  : 				CylinderData.v3Position.y = matTranslationLocal._42;

  00ae3	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _matTranslationLocal$20[ebp+52]
  00ae8	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 189  : 				CylinderData.v3Position.z = matTranslationLocal._43 /*+ CylinderData.fHeight/2.0f*/;

  00aed	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _matTranslationLocal$20[ebp+56]
  00af2	5f		 pop	 edi
  00af3	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 190  : 
; 191  : 				return pcci;

  00af8	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]

; 197  : }

  00afe	5e		 pop	 esi
  00aff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b02	33 cd		 xor	 ecx, ebp
  00b04	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b09	8b e5		 mov	 esp, ebp
  00b0b	5d		 pop	 ebp
  00b0c	c3		 ret	 0
$LN2@BuildColli:
  00b0d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b10	33 c0		 xor	 eax, eax
  00b12	5f		 pop	 edi
  00b13	33 cd		 xor	 ecx, ebp
  00b15	5e		 pop	 esi
  00b16	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b1b	8b e5		 mov	 esp, ebp
  00b1d	5d		 pop	 ebp
  00b1e	c3		 ret	 0
  00b1f	90		 npad	 1
$LN179@BuildColli:
  00b20	00 00 00 00	 DD	 $LN7@BuildColli
  00b24	00 00 00 00	 DD	 $LN2@BuildColli
  00b28	00 00 00 00	 DD	 $LN11@BuildColli
  00b2c	00 00 00 00	 DD	 $LN12@BuildColli
  00b30	00 00 00 00	 DD	 $LN9@BuildColli
  00b34	00 00 00 00	 DD	 $LN10@BuildColli
?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ENDP ; CBaseCollisionInstance::BuildCollisionInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?Destroy@CBaseCollisionInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CBaseCollisionInstance@@QAEXXZ PROC		; CBaseCollisionInstance::Destroy, COMDAT
; _this$ = ecx

; 201  : 	OnDestroy();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 10	 jmp	 DWORD PTR [eax+16]
?Destroy@CBaseCollisionInstance@@QAEXXZ ENDP		; CBaseCollisionInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp
;	COMDAT ?DestroyCollisionInstanceSystem@@YAXXZ
_TEXT	SEGMENT
?DestroyCollisionInstanceSystem@@YAXXZ PROC		; DestroyCollisionInstanceSystem, COMDAT

; 25   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 25   : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 19		 je	 SHORT $LN19@DestroyCol
$LL20@DestroyCol:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00012	6a 14		 push	 20			; 00000014H
  00014	ff 36		 push	 DWORD PTR [esi]
  00016	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001b	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroyCol
  00025	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
$LN19@DestroyCol:

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  0002b	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00031	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16
  00036	89 35 08 00 00
	00		 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003c	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00042	a3 14 00 00 00	 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00047	3b f7		 cmp	 esi, edi
  00049	74 1e		 je	 SHORT $LN40@DestroyCol
  0004b	0f 1f 44 00 00	 npad	 5
$LL41@DestroyCol:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00050	6a 18		 push	 24			; 00000018H
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00059	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  0005c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0005f	3b f7		 cmp	 esi, edi
  00061	75 ed		 jne	 SHORT $LL41@DestroyCol
  00063	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
$LN40@DestroyCol:

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  00069	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  0006f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16
  00074	89 35 08 00 00
	00		 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0007a	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00080	a3 14 00 00 00	 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00085	3b f7		 cmp	 esi, edi
  00087	74 20		 je	 SHORT $LN61@DestroyCol
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL62@DestroyCol:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00090	6a 7c		 push	 124			; 0000007cH
  00092	ff 36		 push	 DWORD PTR [esi]
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00099	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  0009c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0009f	3b f7		 cmp	 esi, edi
  000a1	75 ed		 jne	 SHORT $LL62@DestroyCol
  000a3	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
$LN61@DestroyCol:

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  000a9	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  000af	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16
  000b4	89 35 08 00 00
	00		 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  000ba	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  000c0	a3 14 00 00 00	 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  000c5	3b f7		 cmp	 esi, edi
  000c7	74 20		 je	 SHORT $LN82@DestroyCol
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL83@DestroyCol:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  000d0	6a 1c		 push	 28			; 0000001cH
  000d2	ff 36		 push	 DWORD PTR [esi]
  000d4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  000d9	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  000dc	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  000df	3b f7		 cmp	 esi, edi
  000e1	75 ed		 jne	 SHORT $LL83@DestroyCol
  000e3	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
$LN82@DestroyCol:

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  000e9	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  000ef	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16
  000f4	89 35 08 00 00
	00		 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  000fa	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00100	a3 14 00 00 00	 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00105	3b f7		 cmp	 esi, edi
  00107	74 31		 je	 SHORT $LN128@DestroyCol
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL104@DestroyCol:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00110	6a 5c		 push	 92			; 0000005cH
  00112	ff 36		 push	 DWORD PTR [esi]
  00114	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00119	83 c6 04	 add	 esi, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  0011c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0011f	3b f7		 cmp	 esi, edi
  00121	75 ed		 jne	 SHORT $LL104@DestroyCol
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00123	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
  00128	a3 08 00 00 00	 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 31   : }

  0012d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16
  00132	5f		 pop	 edi
  00133	a3 14 00 00 00	 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, eax
  00138	5e		 pop	 esi
  00139	c3		 ret	 0
$LN128@DestroyCol:
  0013a	a1 10 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16
  0013f	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00140	89 35 08 00 00
	00		 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\CollisionData.cpp

; 31   : }

  00146	a3 14 00 00 00	 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, eax
  0014b	5e		 pop	 esi
  0014c	c3		 ret	 0
?DestroyCollisionInstanceSystem@@YAXXZ ENDP		; DestroyCollisionInstanceSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
