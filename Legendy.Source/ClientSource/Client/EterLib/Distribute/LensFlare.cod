; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@FDOKIIIA@flare2?4dds@			; `string'
PUBLIC	??_C@_0L@NFHOPKCO@flare1?4dds@			; `string'
PUBLIC	??_C@_0L@MIHLMKJG@flare6?4dds@			; `string'
PUBLIC	??_C@_0L@IFLDGLJN@flare4?4dds@			; `string'
PUBLIC	??_C@_0L@JILGFLCF@flare3?4dds@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JILGFLCF@flare3?4dds@
CONST	SEGMENT
??_C@_0L@JILGFLCF@flare3?4dds@ DB 'flare3.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IFLDGLJN@flare4?4dds@
CONST	SEGMENT
??_C@_0L@IFLDGLJN@flare4?4dds@ DB 'flare4.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIHLMKJG@flare6?4dds@
CONST	SEGMENT
??_C@_0L@MIHLMKJG@flare6?4dds@ DB 'flare6.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFHOPKCO@flare1?4dds@
CONST	SEGMENT
??_C@_0L@NFHOPKCO@flare1?4dds@ DB 'flare1.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDOKIIIA@flare2?4dds@
CONST	SEGMENT
??_C@_0L@FDOKIIIA@flare2?4dds@ DB 'flare2.dds', 00H	; `string'
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Draw@CFlare@@QAEXMHHHH@Z			; CFlare::Draw
PUBLIC	?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
PUBLIC	??0CFlare@@QAE@XZ				; CFlare::CFlare
PUBLIC	??1CFlare@@UAE@XZ				; CFlare::~CFlare
PUBLIC	?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
PUBLIC	??_GCFlare@@UAEPAXI@Z				; CFlare::`scalar deleting destructor'
PUBLIC	??0CLensFlare@@QAE@XZ				; CLensFlare::CLensFlare
PUBLIC	??1CLensFlare@@UAE@XZ				; CLensFlare::~CLensFlare
PUBLIC	?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z	; CLensFlare::Compute
PUBLIC	?DrawBeforeFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawBeforeFlare
PUBLIC	?DrawAfterFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawAfterFlare
PUBLIC	?DrawFlare@CLensFlare@@QAEXXZ			; CLensFlare::DrawFlare
PUBLIC	?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; CLensFlare::SetMainFlare
PUBLIC	?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CLensFlare::Initialize
PUBLIC	?SetFlareLocation@CLensFlare@@QAEXNN@Z		; CLensFlare::SetFlareLocation
PUBLIC	?SetBrightnesses@CLensFlare@@QAEXMM@Z		; CLensFlare::SetBrightnesses
PUBLIC	?ReadControlPixels@CLensFlare@@QAEXXZ		; CLensFlare::ReadControlPixels
PUBLIC	?AdjustBrightness@CLensFlare@@QAEXXZ		; CLensFlare::AdjustBrightness
PUBLIC	?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ; CLensFlare::CharacterizeFlare
PUBLIC	?Interpolate@CLensFlare@@IAEMMMM@Z		; CLensFlare::Interpolate
PUBLIC	?ReadDepthPixels@CLensFlare@@AAEXPAM@Z		; CLensFlare::ReadDepthPixels
PUBLIC	?ClampBrightness@CLensFlare@@AAEXXZ		; CLensFlare::ClampBrightness
PUBLIC	??_GCLensFlare@@UAEPAXI@Z			; CLensFlare::`scalar deleting destructor'
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@QAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAXPAPAUSFlarePiece@CFlare@@QAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ; std::_Destroy_range<std::allocator<CFlare::SFlarePiece *> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ; std::_Uninitialized_move<CFlare::SFlarePiece * *,std::allocator<CFlare::SFlarePiece *> >
PUBLIC	??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CFlare@@6B@					; CFlare::`vftable'
PUBLIC	??_7CLensFlare@@6B@				; CLensFlare::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlare@@6B@				; CFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlare@@@8				; CFlare `RTTI Type Descriptor'
PUBLIC	??_R3CFlare@@8					; CFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlare@@8					; CFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlare@@8				; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLensFlare@@6B@				; CLensFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLensFlare@@@8				; CLensFlare `RTTI Type Descriptor'
PUBLIC	??_R3CLensFlare@@8				; CLensFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLensFlare@@8				; CLensFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLensFlare@@8			; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f59999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@43610000
PUBLIC	__real@437f0000
PUBLIC	__real@4cbebc20
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixOrthoOffCenterRH@28:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?ProjectPosition@CScreen@@QAEXMMMPAM0@Z:PROC	; CScreen::ProjectPosition
EXTRN	??_ECFlare@@UAEPAXI@Z:PROC			; CFlare::`vector deleting destructor'
EXTRN	??_ECLensFlare@@UAEPAXI@Z:PROC			; CLensFlare::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:BYTE ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matView
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 0d8H DUP (?) ; g_strFiles
_BSS	ENDS
CRT$XCU	SEGMENT
?g_strFiles$initializer$@@3P6AXXZA DD FLAT:??__Eg_strFiles@@YAXXZ ; g_strFiles$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$r	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLensFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLensFlare@@8 DD FLAT:??_R0?AVCLensFlare@@@8 ; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CLensFlare@@8
rdata$r	SEGMENT
??_R2CLensFlare@@8 DD FLAT:??_R1A@?0A@EA@CLensFlare@@8	; CLensFlare::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLensFlare@@8
rdata$r	SEGMENT
??_R3CLensFlare@@8 DD 00H				; CLensFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLensFlare@@@8
data$r	SEGMENT
??_R0?AVCLensFlare@@@8 DD FLAT:??_7type_info@@6B@	; CLensFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLensFlare@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLensFlare@@6B@
rdata$r	SEGMENT
??_R4CLensFlare@@6B@ DD 00H				; CLensFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLensFlare@@@8
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlare@@8 DD FLAT:??_R0?AVCFlare@@@8	; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlare@@8
rdata$r	SEGMENT
??_R2CFlare@@8 DD FLAT:??_R1A@?0A@EA@CFlare@@8		; CFlare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlare@@8
rdata$r	SEGMENT
??_R3CFlare@@8 DD 00H					; CFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlare@@@8
data$r	SEGMENT
??_R0?AVCFlare@@@8 DD FLAT:??_7type_info@@6B@		; CFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlare@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFlare@@6B@
rdata$r	SEGMENT
??_R4CFlare@@6B@ DD 00H					; CFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlare@@@8
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?g_fPosition@@3PAMA DD 0bf0ccccdr		; -0.55	; g_fPosition
	DD	0bf000000r			; -0.5
	DD	0bee66666r			; -0.45
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03f733333r			; 0.95
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
?g_fWidth@@3PAMA DD 041a00000r			; 20	; g_fWidth
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	042000000r			; 32
	DD	042c80000r			; 100
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	0437a0000r			; 250
?g_afColors@@3PAY03MA DD 03f800000r		; 1	; g_afColors
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f666666r			; 0.9
	DD	03ecccccdr			; 0.4
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03e99999ar			; 0.3
	DD	03ecccccdr			; 0.4
_DATA	ENDS
;	COMDAT ??_7CLensFlare@@6B@
CONST	SEGMENT
??_7CLensFlare@@6B@ DD FLAT:??_R4CLensFlare@@6B@	; CLensFlare::`vftable'
	DD	FLAT:??_ECLensFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFlare@@6B@
CONST	SEGMENT
??_7CFlare@@6B@ DD FLAT:??_R4CFlare@@6B@		; CFlare::`vftable'
	DD	FLAT:??_ECFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Eg_strFiles@@YAXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??__Eg_strFiles@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Eg_strFiles@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0
__ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLensFlare@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$2
__ehfuncinfo$??0CLensFlare@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CLensFlare@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z PROC ; std::_Uninitialized_move<CFlare::SFlarePiece * *,std::allocator<CFlare::SFlarePiece *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ENDP ; std::_Uninitialized_move<CFlare::SFlarePiece * *,std::allocator<CFlare::SFlarePiece *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4480 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]

; 4480 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00007	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL18@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL18@operator

; 2144 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2153 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@operator:

; 4096 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN14@operator

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN21@operator
$LL22@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN20@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL22@operator
$LN21@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN19@operator
$LN20@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN23@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN19@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN23@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN19@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN23@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN19@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN19@operator
$LN23@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN24@operator
$LN19@operator:
  0007c	33 c0		 xor	 eax, eax
$LN24@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN14@operator
  00082	5f		 pop	 edi
  00083	b0 01		 mov	 al, 1

; 4481 :     return _Left._Equal(_Right);
; 4482 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN14@operator:
  00088	5f		 pop	 edi

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 4481 :     return _Left._Equal(_Right);
; 4482 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAXPAPAUSFlarePiece@CFlare@@QAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAXPAPAUSFlarePiece@CFlare@@QAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CFlare::SFlarePiece *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAXPAPAUSFlarePiece@CFlare@@QAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CFlare::SFlarePiece *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@QAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@QAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ; std::_Uninitialized_move<CFlare::SFlarePiece * *,std::allocator<CFlare::SFlarePiece *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@YAPAPAUSFlarePiece@CFlare@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSFlarePiece@CFlare@@@0@@Z ; std::_Uninitialized_move<CFlare::SFlarePiece * *,std::allocator<CFlare::SFlarePiece *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@QAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
_TEXT	SEGMENT
__Left_size$1$ = -12					; size = 4
__Fancyptr$1 = -8					; size = 4
__New_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$1$ = 12						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4396 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 4397 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4398 :     const auto _Left_size  = _Left.size();

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Left$[ebp]
  0000a	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 4396 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  0000e	57		 push	 edi

; 4397 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4398 :     const auto _Left_size  = _Left.size();

  0000f	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00012	89 4d f4	 mov	 DWORD PTR __Left_size$1$[ebp], ecx

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00015	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL34@operator:
  00018	8a 06		 mov	 al, BYTE PTR [esi]
  0001a	46		 inc	 esi
  0001b	84 c0		 test	 al, al
  0001d	75 f9		 jne	 SHORT $LL34@operator

; 4399 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 4400 :     if (_Left.max_size() - _Left_size < _Right_size) {

  0001f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00024	2b f2		 sub	 esi, edx

; 4399 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 4400 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00026	2b c1		 sub	 eax, ecx
  00028	3b c6		 cmp	 eax, esi
  0002a	0f 82 a1 00 00
	00		 jb	 $LN37@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  00030	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00034	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@operator:

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2447 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  0003b	03 ce		 add	 ecx, esi

; 2448 :         size_type _New_capacity = _BUF_SIZE - 1;

  0003d	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00042	89 4d fc	 mov	 DWORD PTR __New_size$1$[ebp], ecx

; 2449 :         auto& _My_data          = _Mypair._Myval2;
; 2450 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00045	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0004f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2453 :         if (_New_capacity < _New_size) {

  00056	3b cf		 cmp	 ecx, edi
  00058	76 42		 jbe	 SHORT $LN16@operator

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005a	8b f9		 mov	 edi, ecx
  0005c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00065	76 07		 jbe	 SHORT $LN23@operator

; 4203 :             return _Max;

  00067	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0006c	eb 0a		 jmp	 SHORT $LN22@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0006e	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00073	3b f8		 cmp	 edi, eax
  00075	0f 42 f8	 cmovb	 edi, eax
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00078	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00081	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00084	89 45 f8	 mov	 DWORD PTR __Fancyptr$1[ebp], eax

; 2456 :             _Ptr                    = _Unfancy(_Fancyptr);
; 2457 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00087	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$1[ebp]
  0008a	50		 push	 eax
  0008b	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00093	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
$LN16@operator:

; 2461 :         _My_data._Myres  = _New_capacity;

  0009c	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009f	8b 7d f4	 mov	 edi, DWORD PTR __Left_size$1$[ebp]
  000a2	57		 push	 edi
  000a3	53		 push	 ebx
  000a4	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
  000a7	53		 push	 ebx

; 2460 :         _My_data._Mysize = _New_size;

  000a8	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	56		 push	 esi
  000b1	ff 75 10	 push	 DWORD PTR __Right$[ebp]

; 2463 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000b4	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _memcpy

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000bd	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c0	83 c4 18	 add	 esp, 24			; 00000018H

; 4402 :     }
; 4403 : 
; 4404 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000c3	5f		 pop	 edi

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000c4	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 4402 :     }
; 4403 : 
; 4404 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000c8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 4405 : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN37@operator:

; 4401 :         _Xlen_string();

  000d1	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN35@operator:
  000d6	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4496 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4497 :     return !(_Left == _Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0000e	83 c4 08	 add	 esp, 8
  00011	34 01		 xor	 al, 1

; 4498 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_strFiles@@YAXXZ
text$yd	SEGMENT
??__Fg_strFiles@@YAXXZ PROC				; `dynamic atexit destructor for 'g_strFiles'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	6a 09		 push	 9
  00007	6a 18		 push	 24			; 00000018H
  00009	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__Fg_strFiles@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_strFiles''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ??__Eg_strFiles@@YAXXZ
text$di	SEGMENT
__$EHRec$ = -12						; size = 12
??__Eg_strFiles@@YAXXZ PROC				; `dynamic initializer for 'g_strFiles'', COMDAT

; 50   : };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__Eg_strFiles@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 40   : {
; 41   : 	"flare2.dds",

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 42   : 	"flare1.dds",

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  00036	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 43   : 	"flare2.dds",

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  0004c	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 44   : 	"flare1.dds",

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  0005f	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00064	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 45   : 	"flare6.dds",

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MIHLMKJG@flare6?4dds@
  00072	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  00077	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 46   : 	"flare4.dds",

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IFLDGLJN@flare4?4dds@
  00085	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  0008a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0008e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 47   : 	"flare2.dds",

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00098	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  0009d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000a1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 48   : 	"flare3.dds",

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JILGFLCF@flare3?4dds@
  000ab	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  000b0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000b4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 49   : 	""

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000be	b9 c0 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+192
  000c3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cc	68 00 00 00 00	 push	 OFFSET ??__Fg_strFiles@@YAXXZ ; `dynamic atexit destructor for 'g_strFiles''
  000d1	e8 00 00 00 00	 call	 _atexit
  000d6	83 c4 04	 add	 esp, 4

; 39   : static string g_strFiles[] =

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Eg_strFiles@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$1:
  0000a	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0000f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$2:
  00014	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$3:
  0001e	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$4:
  00028	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$5:
  00032	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$6:
  0003c	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$7:
  00046	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$??__Eg_strFiles@@YAXXZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00061	33 c8		 xor	 ecx, eax
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__Eg_strFiles@@YAXXZ
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__Eg_strFiles@@YAXXZ ENDP				; `dynamic initializer for 'g_strFiles''
; Function compile flags: /Ogtp
;	COMDAT ??_GCLensFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLensFlare@@UAEPAXI@Z PROC				; CLensFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLensFlare@@UAE@XZ	; CLensFlare::~CLensFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 74		 push	 116			; 00000074H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLensFlare@@UAEPAXI@Z ENDP				; CLensFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?ClampBrightness@CLensFlare@@AAEXXZ
_TEXT	SEGMENT
?ClampBrightness@CLensFlare@@AAEXXZ PROC		; CLensFlare::ClampBrightness, COMDAT
; _this$ = ecx

; 458  : 	// before
; 459  :     if (m_fBeforeBright < 0.0f)

  00000	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  00005	0f 57 c9	 xorps	 xmm1, xmm1
  00008	0f 2f ca	 comiss	 xmm1, xmm2
  0000b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00013	76 05		 jbe	 SHORT $LN2@ClampBrigh

; 460  :         m_fBeforeBright = 0.0f;

  00015	0f 57 d2	 xorps	 xmm2, xmm2
  00018	eb 08		 jmp	 SHORT $LN4@ClampBrigh
$LN2@ClampBrigh:

; 461  :     else if (m_fBeforeBright > 1.0f)

  0001a	0f 2f d3	 comiss	 xmm2, xmm3
  0001d	76 03		 jbe	 SHORT $LN4@ClampBrigh

; 462  :         m_fBeforeBright = 1.0f;

  0001f	0f 28 d3	 movaps	 xmm2, xmm3
$LN4@ClampBrigh:

; 463  : 
; 464  : 	m_fBeforeBright *= m_fMaxBrightness;

  00022	f3 0f 10 61 40	 movss	 xmm4, DWORD PTR [ecx+64]
  00027	0f 28 c4	 movaps	 xmm0, xmm4
  0002a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0002e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 465  : 
; 466  :     if (m_fAfterBright < 0.0f)

  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2f c8	 comiss	 xmm1, xmm0
  0003b	77 0b		 ja	 SHORT $LN7@ClampBrigh

; 467  :         m_fAfterBright = 0.0f;
; 468  :     else if (m_fAfterBright > 1.0f)

  0003d	0f 2f c3	 comiss	 xmm0, xmm3
  00040	0f 28 c8	 movaps	 xmm1, xmm0
  00043	76 03		 jbe	 SHORT $LN7@ClampBrigh

; 469  :         m_fAfterBright = 1.0f;

  00045	0f 28 cb	 movaps	 xmm1, xmm3
$LN7@ClampBrigh:

; 470  : 
; 471  : 	m_fAfterBright *= m_fMaxBrightness;

  00048	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0004c	f3 0f 11 61 18	 movss	 DWORD PTR [ecx+24], xmm4

; 472  : }

  00051	c3		 ret	 0
?ClampBrightness@CLensFlare@@AAEXXZ ENDP		; CLensFlare::ClampBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?ReadDepthPixels@CLensFlare@@AAEXPAM@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z PROC		; CLensFlare::ReadDepthPixels, COMDAT
; _this$ = ecx

; 435  : 	/*
; 436  : 	LPDIRECT3DSURFACE8 lpSurface;
; 437  : 	if (FAILED(ms_lpd3dDevice->GetDepthStencilSurface(&lpSurface)))
; 438  : 		assert(false);
; 439  : 
; 440  : 	D3DLOCKED_RECT rect;
; 441  : 	lpSurface->LockRect(&rect, NULL, D3DLOCK_READONLY | D3DLOCK_NO_DIRTY_UPDATE);
; 442  : 
; 443  : 	lpSurface->UnlockRect();
; 444  : 	*/
; 445  : 	/*
; 446  : 	glReadPixels(GLint(m_afFlareWinPos[0] - c_nDepthTestDimension / 2),
; 447  : 				 GLint(m_afFlareWinPos[1] - c_nDepthTestDimension / 2),
; 448  : 				 c_nDepthTestDimension, c_nDepthTestDimension,
; 449  : 				 GL_DEPTH_COMPONENT, GL_FLOAT, pPixels);
; 450  : 	*/
; 451  : }

  00000	c2 04 00	 ret	 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z ENDP		; CLensFlare::ReadDepthPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?Interpolate@CLensFlare@@IAEMMMM@Z
_TEXT	SEGMENT
_fStart$ = 8						; size = 4
tv128 = 12						; size = 4
_fEnd$ = 12						; size = 4
_fPercent$ = 16						; size = 4
?Interpolate@CLensFlare@@IAEMMMM@Z PROC			; CLensFlare::Interpolate, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	return fStart + (fEnd - fStart) * fPercent;

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fEnd$[ebp]
  00008	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _fStart$[ebp]
  0000d	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fPercent$[ebp]
  00012	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fStart$[ebp]
  00017	f3 0f 11 4d 0c	 movss	 DWORD PTR tv128[ebp], xmm1
  0001c	d9 45 0c	 fld	 DWORD PTR tv128[ebp]

; 122  : }

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?Interpolate@CLensFlare@@IAEMMMM@Z ENDP			; CLensFlare::Interpolate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_bEnabled$ = 8						; size = 1
_bShowMainFlare$ = 12					; size = 1
_fMaxBrightness$ = 16					; size = 4
_c_rColor$ = 20						; size = 4
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z PROC ; CLensFlare::CharacterizeFlare, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 349  : 	m_bEnabled = bEnabled;

  00003	8a 45 08	 mov	 al, BYTE PTR _bEnabled$[ebp]

; 350  : 	m_bShowMainFlare = bShowMainFlare;
; 351  : 	m_fMaxBrightness = fMaxBrightness;
; 352  : 
; 353  : 	m_afColor[0] = c_rColor.r;

  00006	8b 55 14	 mov	 edx, DWORD PTR _c_rColor$[ebp]
  00009	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxBrightness$[ebp]
  0000e	88 41 3c	 mov	 BYTE PTR [ecx+60], al
  00011	8a 45 0c	 mov	 al, BYTE PTR _bShowMainFlare$[ebp]
  00014	88 41 3d	 mov	 BYTE PTR [ecx+61], al
  00017	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 354  : 	m_afColor[1] = c_rColor.g;

  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 355  : 	m_afColor[2] = c_rColor.b;

  00027	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 356  : }

  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ENDP ; CLensFlare::CharacterizeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?AdjustBrightness@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?AdjustBrightness@CLensFlare@@QAEXXZ PROC		; CLensFlare::AdjustBrightness, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 413  : 	if (m_bEnabled)

  0000c	80 7b 3c 00	 cmp	 BYTE PTR [ebx+60], 0
  00010	0f 84 6d 01 00
	00		 je	 $LN5@AdjustBrig

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00016	8b 73 38	 mov	 esi, DWORD PTR [ebx+56]
  00019	33 d2		 xor	 edx, edx
  0001b	8b 7b 34	 mov	 edi, DWORD PTR [ebx+52]
  0001e	0f 57 db	 xorps	 xmm3, xmm3
  00021	0f 28 25 00 00
	00 00		 movaps	 xmm4, XMMWORD PTR __xmm@00000001000000010000000100000001
  00028	0f 57 d2	 xorps	 xmm2, xmm2
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@AdjustBrig:
  00030	0f 10 04 96	 movups	 xmm0, XMMWORD PTR [esi+edx*4]
  00034	0f 10 0c 97	 movups	 xmm1, XMMWORD PTR [edi+edx*4]
  00038	0f c2 c8 04	 cmpneqps xmm1, xmm0

; 421  : 				++nDifferent;

  0003c	0f 28 c4	 movaps	 xmm0, xmm4
  0003f	66 0f fe c3	 paddd	 xmm0, xmm3
  00043	66 0f db c1	 pand	 xmm0, xmm1
  00047	66 0f df cb	 pandn	 xmm1, xmm3
  0004b	66 0f eb c1	 por	 xmm0, xmm1
  0004f	0f 10 4c 97 10	 movups	 xmm1, XMMWORD PTR [edi+edx*4+16]
  00054	0f 28 d8	 movaps	 xmm3, xmm0
  00057	0f 10 44 96 10	 movups	 xmm0, XMMWORD PTR [esi+edx*4+16]
  0005c	83 c2 08	 add	 edx, 8
  0005f	0f c2 c8 04	 cmpneqps xmm1, xmm0
  00063	0f 28 c4	 movaps	 xmm0, xmm4
  00066	66 0f fe c2	 paddd	 xmm0, xmm2
  0006a	66 0f db c1	 pand	 xmm0, xmm1
  0006e	66 0f df ca	 pandn	 xmm1, xmm2
  00072	66 0f eb c1	 por	 xmm0, xmm1
  00076	0f 28 d0	 movaps	 xmm2, xmm0
  00079	81 fa e0 00 00
	00		 cmp	 edx, 224		; 000000e0H
  0007f	7c af		 jl	 SHORT $LL4@AdjustBrig

; 414  : 	{
; 415  : 		ReadDepthPixels(m_pTestPixels);
; 416  : 
; 417  : 		int nDifferent = 0;

  00081	66 0f fe d3	 paddd	 xmm2, xmm3
  00085	0f 28 c2	 movaps	 xmm0, xmm2
  00088	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0008d	66 0f fe d0	 paddd	 xmm2, xmm0
  00091	0f 10 c2	 movups	 xmm0, xmm2
  00094	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00099	66 0f fe d0	 paddd	 xmm2, xmm0
  0009d	66 0f 7e d1	 movd	 ecx, xmm2

; 418  : 
; 419  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  000a1	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  000a7	0f 8d 8e 00 00
	00		 jge	 $LN19@AdjustBrig
  000ad	b8 e1 00 00 00	 mov	 eax, 225		; 000000e1H
  000b2	2b c2		 sub	 eax, edx
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	7c 60		 jl	 SHORT $LC20@AdjustBrig
  000b9	0f 1f 80 00 00
	00 00		 npad	 7

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

$LL25@AdjustBrig:
  000c0	f3 0f 10 04 96	 movss	 xmm0, DWORD PTR [esi+edx*4]
  000c5	0f 2e 04 97	 ucomiss xmm0, DWORD PTR [edi+edx*4]
  000c9	9f		 lahf
  000ca	f6 c4 44	 test	 ah, 68			; 00000044H
  000cd	7b 01		 jnp	 SHORT $LN21@AdjustBrig

; 421  : 				++nDifferent;

  000cf	41		 inc	 ecx
$LN21@AdjustBrig:

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000d0	f3 0f 10 44 96
	04		 movss	 xmm0, DWORD PTR [esi+edx*4+4]
  000d6	0f 2e 44 97 04	 ucomiss xmm0, DWORD PTR [edi+edx*4+4]
  000db	9f		 lahf
  000dc	f6 c4 44	 test	 ah, 68			; 00000044H
  000df	7b 01		 jnp	 SHORT $LN22@AdjustBrig

; 421  : 				++nDifferent;

  000e1	41		 inc	 ecx
$LN22@AdjustBrig:

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000e2	f3 0f 10 44 96
	08		 movss	 xmm0, DWORD PTR [esi+edx*4+8]
  000e8	0f 2e 44 97 08	 ucomiss xmm0, DWORD PTR [edi+edx*4+8]
  000ed	9f		 lahf
  000ee	f6 c4 44	 test	 ah, 68			; 00000044H
  000f1	7b 01		 jnp	 SHORT $LN23@AdjustBrig

; 421  : 				++nDifferent;

  000f3	41		 inc	 ecx
$LN23@AdjustBrig:

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000f4	f3 0f 10 44 96
	0c		 movss	 xmm0, DWORD PTR [esi+edx*4+12]
  000fa	0f 2e 44 97 0c	 ucomiss xmm0, DWORD PTR [edi+edx*4+12]
  000ff	9f		 lahf
  00100	f6 c4 44	 test	 ah, 68			; 00000044H
  00103	7b 01		 jnp	 SHORT $LN24@AdjustBrig

; 421  : 				++nDifferent;

  00105	41		 inc	 ecx
$LN24@AdjustBrig:
  00106	83 c2 04	 add	 edx, 4
  00109	81 fa de 00 00
	00		 cmp	 edx, 222		; 000000deH
  0010f	7c af		 jl	 SHORT $LL25@AdjustBrig

; 418  : 
; 419  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00111	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  00117	7d 22		 jge	 SHORT $LN19@AdjustBrig
$LC20@AdjustBrig:
  00119	c1 e2 02	 shl	 edx, 2
  0011c	0f 1f 40 00	 npad	 4
$LC30@AdjustBrig:

; 420  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00120	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  00125	0f 2e 04 3a	 ucomiss xmm0, DWORD PTR [edx+edi]
  00129	9f		 lahf
  0012a	f6 c4 44	 test	 ah, 68			; 00000044H
  0012d	7b 01		 jnp	 SHORT $LN13@AdjustBrig

; 421  : 				++nDifferent;

  0012f	41		 inc	 ecx
$LN13@AdjustBrig:

; 418  : 
; 419  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00130	83 c2 04	 add	 edx, 4
  00133	81 fa 84 03 00
	00		 cmp	 edx, 900		; 00000384H
  00139	7c e5		 jl	 SHORT $LC30@AdjustBrig
$LN19@AdjustBrig:
  0013b	66 0f 6e c1	 movd	 xmm0, ecx
  0013f	0f 57 c9	 xorps	 xmm1, xmm1

; 422  : 
; 423  : 		float fAdjust = (static_cast<float>(nDifferent) / (c_nDepthTestDimension * c_nDepthTestDimension));

  00142	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00145	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43610000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  0014d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00150	66 0f 2e c8	 ucomisd xmm1, xmm0
  00154	77 06		 ja	 SHORT $LN32@AdjustBrig
  00156	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0015a	eb 05		 jmp	 SHORT $LN33@AdjustBrig
$LN32@AdjustBrig:
  0015c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN33@AdjustBrig:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 425  : 		m_fAfterBright *= 1.0f - fAdjust;

  00161	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00169	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 424  : 		fAdjust = sqrtf(fAdjust) * 0.85f;

  0016d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f59999a

; 425  : 		m_fAfterBright *= 1.0f - fAdjust;

  00175	f3 0f 5c c8	 subss	 xmm1, xmm0
  00179	f3 0f 59 4b 18	 mulss	 xmm1, DWORD PTR [ebx+24]
  0017e	f3 0f 11 4b 18	 movss	 DWORD PTR [ebx+24], xmm1
$LN5@AdjustBrig:

; 426  : 	}
; 427  : }

  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
?AdjustBrightness@CLensFlare@@QAEXXZ ENDP		; CLensFlare::AdjustBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?ReadControlPixels@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?ReadControlPixels@CLensFlare@@QAEXXZ PROC		; CLensFlare::ReadControlPixels, COMDAT
; _this$ = ecx

; 403  : 	if (m_bEnabled)
; 404  : 		ReadDepthPixels(m_pControlPixels);
; 405  : }

  00000	c2 00 00	 ret	 0
?ReadControlPixels@CLensFlare@@QAEXXZ ENDP		; CLensFlare::ReadControlPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetBrightnesses@CLensFlare@@QAEXMM@Z
_TEXT	SEGMENT
_fBeforeBright$ = 8					; size = 4
_fAfterBright$ = 12					; size = 4
?SetBrightnesses@CLensFlare@@QAEXMM@Z PROC		; CLensFlare::SetBrightnesses, COMDAT
; _this$ = ecx

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 19		 je	 SHORT $LN2@SetBrightn

; 389  : 	{
; 390  : 	    m_fBeforeBright = fBeforeBright;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fBeforeBright$[ebp]
  0000e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 391  : 	    m_fAfterBright = fAfterBright;

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAfterBright$[ebp]
  00018	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 392  : 
; 393  : 		ClampBrightness();

  0001d	e8 00 00 00 00	 call	 ?ClampBrightness@CLensFlare@@AAEXXZ ; CLensFlare::ClampBrightness
$LN2@SetBrightn:

; 394  : 	}
; 395  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetBrightnesses@CLensFlare@@QAEXMM@Z ENDP		; CLensFlare::SetBrightnesses
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetFlareLocation@CLensFlare@@QAEXNN@Z
_TEXT	SEGMENT
_dX$ = 8						; size = 8
_dY$ = 16						; size = 8
?SetFlareLocation@CLensFlare@@QAEXNN@Z PROC		; CLensFlare::SetFlareLocation, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 372  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 66		 je	 SHORT $LN2@SetFlareLo

; 373  : 	{
; 374  : 		m_afFlareWinPos[0] = float(dX);

  00009	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _dX$[ebp]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	f2 0f 10 55 10	 movsd	 xmm2, QWORD PTR _dY$[ebp]
  00016	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 375  : 		m_afFlareWinPos[1] = float(dY);

  0001a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0001e	f3 0f 11 49 0c	 movss	 DWORD PTR [ecx+12], xmm1
  00023	f3 0f 11 51 10	 movss	 DWORD PTR [ecx+16], xmm2

; 376  : 
; 377  : 		m_afFlarePos[0] = float(dX) / ms_Viewport.Width;

  00028	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  0002d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 5e c8	 divss	 xmm1, xmm0
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1

; 378  : 		m_afFlarePos[1] = float(dY) / ms_Viewport.Height;

  0004d	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00062	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00066	f3 0f 5e d0	 divss	 xmm2, xmm0
  0006a	f3 0f 11 51 08	 movss	 DWORD PTR [ecx+8], xmm2
$LN2@SetFlareLo:

; 379  : 	}
; 380  : }

  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
?SetFlareLocation@CLensFlare@@QAEXNN@Z ENDP		; CLensFlare::SetFlareLocation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CLensFlare::Initialize, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 363  : 	if (m_bEnabled)

  00026	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	74 16		 je	 SHORT $LN2@Initialize

; 364  : 		m_cFlare.Init(strPath);

  00033	83 ec 18	 sub	 esp, 24			; 00000018H
  00036	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]
  00039	8b cc		 mov	 ecx, esp
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00044	e8 00 00 00 00	 call	 ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
$LN2@Initialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00049	8b 45 1c	 mov	 eax, DWORD PTR _strPath$[ebp+20]
  0004c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0004f	72 0d		 jb	 SHORT $LN10@Initialize

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00051	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00052	50		 push	 eax
  00053	ff 75 08	 push	 DWORD PTR _strPath$[ebp]
  00056	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005b	83 c4 08	 add	 esp, 8
$LN10@Initialize:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 365  : }

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CLensFlare::Initialize
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strSunFile$ = 8					; size = 24
_fSunSize$ = 32						; size = 4
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z PROC ; CLensFlare::SetMainFlare, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 286  : 	if (m_bEnabled && m_bShowMainFlare)

  00026	80 7f 3c 00	 cmp	 BYTE PTR [edi+60], 0
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	74 3f		 je	 SHORT $LN2@SetMainFla
  00033	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00037	74 39		 je	 SHORT $LN2@SetMainFla
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00039	83 7d 1c 10	 cmp	 DWORD PTR _strSunFile$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 288  : 		m_fSunSize = fSunSize;

  00040	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _fSunSize$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00045	0f 43 45 08	 cmovae	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 288  : 		m_fSunSize = fSunSize;

  00049	f3 0f 11 47 20	 movss	 DWORD PTR [edi+32], xmm0

; 289  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer(strSunFile.c_str());

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0005a	8b f0		 mov	 esi, eax

; 290  : 
; 291  : 		if (!pResource->IsType(CGraphicImage::Type()))

  0005c	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  00061	50		 push	 eax
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 292  : 			assert(false);
; 293  : 
; 294  : 		m_SunFlareImageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  00069	56		 push	 esi
  0006a	8d 4f 54	 lea	 ecx, DWORD PTR [edi+84]
  0006d	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN2@SetMainFla:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00072	8b 45 1c	 mov	 eax, DWORD PTR _strSunFile$[ebp+20]
  00075	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00078	72 0d		 jb	 SHORT $LN17@SetMainFla

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0007a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007b	50		 push	 eax
  0007c	ff 75 08	 push	 DWORD PTR _strSunFile$[ebp]
  0007f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00084	83 c4 08	 add	 esp, 8
$LN17@SetMainFla:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 296  : }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strSunFile$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ENDP ; CLensFlare::SetMainFlare
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matProj$1 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawFlare, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 304  : 	if (m_bEnabled && m_bFlareVisible && m_bDrawFlare && m_fAfterBright != 0.0f)

  00013	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00017	0f 84 b0 01 00
	00		 je	 $LN2@DrawFlare
  0001d	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  00021	0f 84 a6 01 00
	00		 je	 $LN2@DrawFlare
  00027	80 7e 1d 00	 cmp	 BYTE PTR [esi+29], 0
  0002b	0f 84 9c 01 00
	00		 je	 $LN2@DrawFlare
  00031	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	0f 2e c8	 ucomiss xmm1, xmm0
  0003c	9f		 lahf
  0003d	f6 c4 44	 test	 ah, 68			; 00000044H
  00040	0f 8b 87 01 00
	00		 jnp	 $LN2@DrawFlare

; 305  : 	{
; 306  :         //glPushAttrib(GL_ENABLE_BIT);
; 307  : 		STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE); // glDisable(GL_LIGHTING);

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004c	6a 00		 push	 0
  0004e	68 89 00 00 00	 push	 137			; 00000089H
  00053	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 308  : 		STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE); // glDisable(GL_DEPTH_TEST);

  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005e	6a 00		 push	 0
  00060	6a 07		 push	 7
  00062	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 309  : 		STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE); // glDisable(GL_CULL_FACE);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006d	6a 01		 push	 1
  0006f	6a 16		 push	 22			; 00000016H
  00071	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 310  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE); // glDisable(GL_ALPHA_TEST);

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007c	6a 00		 push	 0
  0007e	6a 0f		 push	 15			; 0000000fH
  00080	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 311  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE); // glEnable(GL_BLEND);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	6a 01		 push	 1
  0008d	6a 1b		 push	 27			; 0000001bH
  0008f	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 312  : 
; 313  : 		D3DXMATRIX matProj;
; 314  : 		D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, ms_Viewport.Width, ms_Viewport.Height, 0.0f, -1.0f, 1.0f);

  00094	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00099	83 ec 18	 sub	 esp, 24			; 00000018H
  0009c	66 0f 6e c0	 movd	 xmm0, eax
  000a0	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a4	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  000ac	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  000b4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b7	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  000bf	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000c8	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  000cd	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000d7	66 0f 6e c0	 movd	 xmm0, eax
  000db	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e2	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000eb	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  000ee	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f8	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 315  : 		STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0010b	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  0010e	50		 push	 eax
  0010f	6a 03		 push	 3
  00111	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 316  : 		STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011c	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00121	6a 02		 push	 2
  00123	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 317  : 
; 318  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00133	68 00 01 00 00	 push	 256			; 00000100H
  00138	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 319  : 		//glMatrixMode(GL_MODELVIEW);
; 320  : 		//glLoadIdentity();
; 321  : 
; 322  : 		//glDisable(GL_TEXTURE_2D);
; 323  : 		DrawAfterFlare();

  0013d	8b ce		 mov	 ecx, esi
  0013f	e8 00 00 00 00	 call	 ?DrawAfterFlare@CLensFlare@@QAEXXZ ; CLensFlare::DrawAfterFlare

; 324  : 
; 325  : 		//glEnable(GL_TEXTURE_2D);
; 326  : 		m_cFlare.Draw(m_fAfterBright,

  00144	f3 0f 2c 46 10	 cvttss2si eax, DWORD PTR [esi+16]
  00149	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  0014e	50		 push	 eax
  0014f	f3 0f 2c 46 0c	 cvttss2si eax, DWORD PTR [esi+12]
  00154	50		 push	 eax
  00155	ff 35 0c 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  0015b	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  00161	51		 push	 ecx
  00162	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?Draw@CFlare@@QAEXMHHHH@Z ; CFlare::Draw

; 327  : 					  ms_Viewport.Width,
; 328  : 					  ms_Viewport.Height,
; 329  : 					  static_cast<int>(m_afFlareWinPos[0]),
; 330  : 					  static_cast<int>(m_afFlareWinPos[1]));
; 331  : 
; 332  : 		STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING); // glDisable(GL_LIGHTING);

  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00175	68 89 00 00 00	 push	 137			; 00000089H
  0017a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 333  : 		STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00185	6a 07		 push	 7
  00187	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 334  : 		STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00192	6a 16		 push	 22			; 00000016H
  00194	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 335  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 1b		 push	 27			; 0000001bH
  001a1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 336  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  001a6	6a 0f		 push	 15			; 0000000fH
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ae	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 337  : 
; 338  : 		STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b9	6a 03		 push	 3
  001bb	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 339  : 		STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c6	6a 02		 push	 2
  001c8	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN2@DrawFlare:

; 340  : 		//glDisable(GL_TEXTURE_2D);
; 341  :         //glPopAttrib();
; 342  : 	}
; 343  : }

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d0	33 cd		 xor	 ecx, ebp
  001d2	5e		 pop	 esi
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
?DrawFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawAfterFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?DrawAfterFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawAfterFlare, COMDAT
; _this$ = ecx

; 272  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 273  : 	if (m_bEnabled && m_fAfterBright != 0.0f && m_bDrawBrightScreen)

  00003	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00007	74 76		 je	 SHORT $LN2@DrawAfterF
  00009	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	0f 2e c8	 ucomiss xmm1, xmm0
  00014	9f		 lahf
  00015	f6 c4 44	 test	 ah, 68			; 00000044H
  00018	7b 65		 jnp	 SHORT $LN2@DrawAfterF
  0001a	80 7e 1e 00	 cmp	 BYTE PTR [esi+30], 0
  0001e	74 5f		 je	 SHORT $LN2@DrawAfterF

; 274  : 	{
; 275  : 		SetDiffuseColor(m_afColor[0], m_afColor[1], m_afColor[2], m_fAfterBright);

  00020	f3 0f 10 46 4c	 movss	 xmm0, DWORD PTR [esi+76]
  00025	83 ec 10	 sub	 esp, 16			; 00000010H
  00028	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0002e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00034	f3 0f 10 46 48	 movss	 xmm0, DWORD PTR [esi+72]
  00039	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003f	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 276  : 		RenderBar2d(0.0f, 0.0f, 1024.0f, 1024.0f);

  0004e	83 ec 14	 sub	 esp, 20			; 00000014H
  00051	8b ce		 mov	 ecx, esi
  00053	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0005b	c7 44 24 0c 00
	00 80 44	 mov	 DWORD PTR [esp+12], 1149239296 ; 44800000H
  00063	c7 44 24 08 00
	00 80 44	 mov	 DWORD PTR [esp+8], 1149239296 ; 44800000H
  0006b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00073	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007a	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN2@DrawAfterF:

; 277  : 	}
; 278  : }

  0007f	5e		 pop	 esi
  00080	c3		 ret	 0
?DrawAfterFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawAfterFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawBeforeFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matWorld$ = -228					; size = 64
_matProj$ = -164					; size = 64
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?DrawBeforeFlare@CLensFlare@@QAEXXZ PROC		; CLensFlare::DrawBeforeFlare, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 184  :     if (!m_bFlareVisible || !m_bEnabled || !m_bShowMainFlare)

  00016	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  0001a	0f 84 82 03 00
	00		 je	 $LN3@DrawBefore
  00020	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00024	0f 84 78 03 00
	00		 je	 $LN3@DrawBefore
  0002a	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  0002e	0f 84 6e 03 00
	00		 je	 $LN3@DrawBefore

; 185  :         return;
; 186  : 
; 187  : 	if (m_SunFlareImageInstance.IsEmpty())

  00034	57		 push	 edi
  00035	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00038	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0003d	84 c0		 test	 al, al
  0003f	0f 85 5c 03 00
	00		 jne	 $LN91@DrawBefore

; 188  : 		return;
; 189  : 
; 190  : 	D3DXMATRIX matProj;
; 191  : 	D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, 1.0f, 1.0f, 0.0f, -1.0f, 1.0f);

  00045	83 ec 18	 sub	 esp, 24			; 00000018H
  00048	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  0004e	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  00056	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  0005e	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00066	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  0006e	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00076	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 192  : 	STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00089	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  0008f	50		 push	 eax
  00090	6a 03		 push	 3
  00092	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 193  : 	STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009d	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  000a2	6a 02		 push	 2
  000a4	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 194  : 
; 195  : 	D3DXMATRIX matWorld;
; 196  : 	D3DXMatrixTranslation(&matWorld, m_afFlarePos[0], m_afFlarePos[1], 0.0f);

  000a9	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ae	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000b4	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000b7	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000bf	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c5	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 197  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &matWorld);

  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000db	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000e1	50		 push	 eax
  000e2	68 00 01 00 00	 push	 256			; 00000100H
  000e7	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 198  : 
; 199  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f2	6a 00		 push	 0
  000f4	68 89 00 00 00	 push	 137			; 00000089H
  000f9	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 200  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE);					// glDisable(GL_DEPTH_TEST);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00104	6a 00		 push	 0
  00106	6a 07		 push	 7
  00108	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 201  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00113	6a 00		 push	 0
  00115	6a 0e		 push	 14			; 0000000eH
  00117	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 202  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);			// glDisable(GL_CULL_FACE);

  0011c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00122	6a 01		 push	 1
  00124	6a 16		 push	 22			; 00000016H
  00126	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 203  : 	STATEMANAGER.SaveRenderState(D3DRS_SHADEMODE, D3DSHADE_FLAT);		// glShadeModel(GL_FLAT);

  0012b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00131	6a 01		 push	 1
  00133	6a 09		 push	 9
  00135	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 204  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE);			// glDisable(GL_ALPHA_TEST);

  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00140	6a 00		 push	 0
  00142	6a 0f		 push	 15			; 0000000fH
  00144	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 205  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);			// glEnable(GL_BLEND);

  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014f	6a 01		 push	 1
  00151	6a 1b		 push	 27			; 0000001bH
  00153	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 206  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  00158	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015e	6a 05		 push	 5
  00160	6a 13		 push	 19			; 00000013H
  00162	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 207  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016d	6a 06		 push	 6
  0016f	6a 14		 push	 20			; 00000014H
  00171	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 208  : 
; 209  : 	float fAspectRatio = ms_Viewport.Width / float(ms_Viewport.Height);

  00176	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8

; 210  : 	float fHeight = m_fSunSize * fAspectRatio;

  0017b	f3 0f 10 66 20	 movss	 xmm4, DWORD PTR [esi+32]
  00180	66 0f 6e c0	 movd	 xmm0, eax
  00184	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00188	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018b	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00194	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00199	66 0f 5a d8	 cvtpd2ps xmm3, xmm0
  0019d	66 0f 6e c0	 movd	 xmm0, eax
  001a1	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001a8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]

; 211  : 	D3DXCOLOR color(1.0f, 1.0f, 1.0f, 1.0f);
; 212  : 
; 213  : 	SVertex vertices[4];
; 214  : 	vertices[0].x = -m_fSunSize;
; 215  : 	vertices[0].y = -fHeight;
; 216  : 	vertices[0].z = 0.0f;

  001b1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001b5	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0

; 217  : 	vertices[0].color = color;
; 218  : 	vertices[0].u = 0.0f;
; 219  : 	vertices[0].v = 0.0f;
; 220  : 
; 221  : 	vertices[1].x = -m_fSunSize;
; 222  : 	vertices[1].y = fHeight;
; 223  : 	vertices[1].z = 0.0f;
; 224  : 	vertices[1].color = color;
; 225  : 	vertices[1].u = 0.0f;
; 226  : 	vertices[1].v = 1.0f;
; 227  : 
; 228  : 	vertices[2].x = m_fSunSize;
; 229  : 	vertices[2].y = -fHeight;
; 230  : 	vertices[2].z = 0.0f;
; 231  : 	vertices[2].color = color;
; 232  : 	vertices[2].u = 1.0f;
; 233  : 	vertices[2].v = 0.0f;
; 234  : 
; 235  : 	vertices[3].x = m_fSunSize;
; 236  : 	vertices[3].y = fHeight;
; 237  : 	vertices[3].z = 0.0f;
; 238  : 	vertices[3].color = color;
; 239  : 	vertices[3].u = 1.0f;
; 240  : 	vertices[3].v = 1.0f;
; 241  : 
; 242  : 	STATEMANAGER.SetTexture(0, m_SunFlareImageInstance.GetTexturePointer()->GetD3DTexture());

  001bc	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  001bf	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+12], -1
  001c6	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  001cd	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  001d4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
  001db	0f 28 cc	 movaps	 xmm1, xmm4
  001de	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+36], -1
  001e5	f3 0f 5e d8	 divss	 xmm3, xmm0
  001e9	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  001f0	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+44], 1065353216 ; 3f800000H
  001f7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  001fe	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+60], -1
  00205	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+64], 1065353216 ; 3f800000H
  0020c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  00213	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0
  0021a	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+84], -1
  00221	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
  00228	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H
  0022f	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00236	f3 0f 59 dc	 mulss	 xmm3, xmm4
  0023a	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  0023f	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  00244	0f 28 d3	 movaps	 xmm2, xmm3
  00247	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  0024c	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00253	f3 0f 11 55 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm2
  00258	f3 0f 11 65 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm4
  0025d	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  00262	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  00267	f3 0f 11 5d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm3
  0026c	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00271	8b c8		 mov	 ecx, eax
  00273	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027e	50		 push	 eax
  0027f	6a 00		 push	 0
  00281	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 243  : 	STATEMANAGER.SetTexture(1, NULL);

  00286	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028c	6a 00		 push	 0
  0028e	6a 01		 push	 1
  00290	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 244  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00295	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029b	6a 04		 push	 4
  0029d	6a 01		 push	 1
  0029f	6a 00		 push	 0
  002a1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 245  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ac	6a 02		 push	 2
  002ae	6a 02		 push	 2
  002b0	6a 00		 push	 0
  002b2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 246  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  002b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002bd	6a 00		 push	 0
  002bf	6a 03		 push	 3
  002c1	6a 00		 push	 0
  002c3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 247  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ce	6a 02		 push	 2
  002d0	6a 04		 push	 4
  002d2	6a 00		 push	 0
  002d4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 248  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002df	6a 02		 push	 2
  002e1	6a 02		 push	 2
  002e3	6a 00		 push	 0
  002e5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 249  : 
; 250  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  002ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f0	68 42 01 00 00	 push	 322			; 00000142H
  002f5	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 251  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(SVertex));

  002fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00300	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00303	6a 18		 push	 24			; 00000018H
  00305	50		 push	 eax
  00306	6a 02		 push	 2
  00308	6a 05		 push	 5
  0030a	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 252  : 
; 253  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  0030f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00315	68 89 00 00 00	 push	 137			; 00000089H
  0031a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 254  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00325	6a 07		 push	 7
  00327	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 255  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  0032c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00332	6a 0e		 push	 14			; 0000000eH
  00334	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 256  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  00339	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0033f	6a 16		 push	 22			; 00000016H
  00341	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 257  : 	STATEMANAGER.RestoreRenderState(D3DRS_SHADEMODE); // glShadeModel(GL_FLAT);

  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0034c	6a 09		 push	 9
  0034e	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 258  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  00353	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00359	6a 0f		 push	 15			; 0000000fH
  0035b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 259  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00360	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00366	6a 1b		 push	 27			; 0000001bH
  00368	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 260  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  0036d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00373	6a 13		 push	 19			; 00000013H
  00375	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 261  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  0037a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00380	6a 14		 push	 20			; 00000014H
  00382	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 262  : 
; 263  : 	STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  00387	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0038d	6a 02		 push	 2
  0038f	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 264  : 	STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  00394	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039a	6a 03		 push	 3
  0039c	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN91@DrawBefore:
  003a1	5f		 pop	 edi
$LN3@DrawBefore:

; 265  : }

  003a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a5	33 cd		 xor	 ecx, ebp
  003a7	5e		 pop	 esi
  003a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ad	8b e5		 mov	 esp, ebp
  003af	5d		 pop	 ebp
  003b0	c3		 ret	 0
?DrawBeforeFlare@CLensFlare@@QAEXXZ ENDP		; CLensFlare::DrawBeforeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv192 = -40						; size = 4
tv187 = -36						; size = 4
tv190 = -32						; size = 4
_fY$ = -28						; size = 4
_fX$ = -24						; size = 4
_fY$1$ = -20						; size = 4
_fX$1$ = -16						; size = 4
__real@3f800000$1$ = -16				; size = 4
_v3Target$ = -12					; size = 12
_c_rv3LightDirection$ = 8				; size = 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z PROC	; CLensFlare::Compute, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 129  : 	float afSunPos[3];
; 130  : 
; 131  : 	D3DXVECTOR3 v3Target = CCameraManager::Instance().GetCurrentCamera()->GetTarget();

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00012	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 132  : 
; 133  : 	afSunPos[0]	= v3Target.x - c_rv3LightDirection.x * 99999999.0f;

  00017	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4cbebc20

; 134  : 	afSunPos[1]	= v3Target.y - c_rv3LightDirection.y * 99999999.0f;
; 135  : 	afSunPos[2]	= v3Target.z - c_rv3LightDirection.z * 99999999.0f;
; 136  : 
; 137  : 	float fX, fY;
; 138  : 	ProjectPosition(afSunPos[0], afSunPos[1], afSunPos[2], &fX, &fY);

  0001f	8b ce		 mov	 ecx, esi
  00021	f3 0f 7e 40 3c	 movq	 xmm0, QWORD PTR [eax+60]
  00026	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00029	89 44 24 2c	 mov	 DWORD PTR _v3Target$[esp+56], eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_rv3LightDirection$[ebp]
  00030	66 0f d6 44 24
	24		 movq	 QWORD PTR _v3Target$[esp+48], xmm0
  00036	f3 0f 10 5c 24
	24		 movss	 xmm3, DWORD PTR _v3Target$[esp+48]
  0003c	f3 0f 10 54 24
	28		 movss	 xmm2, DWORD PTR _v3Target$[esp+52]
  00042	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00046	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004a	f3 0f 5c d8	 subss	 xmm3, xmm0
  0004e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00053	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00057	f3 0f 5c d0	 subss	 xmm2, xmm0
  0005b	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR tv187[esp+48], xmm3
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	8d 44 24 14	 lea	 eax, DWORD PTR _fY$[esp+48]
  0006a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0006e	50		 push	 eax
  0006f	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR _v3Target$[esp+60]
  00075	8d 44 24 1c	 lea	 eax, DWORD PTR _fX$[esp+52]
  00079	50		 push	 eax
  0007a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007e	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv192[esp+56], xmm2
  00084	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00087	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0008d	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00093	f3 0f 11 4c 24
	24		 movss	 DWORD PTR tv190[esp+68], xmm1
  00099	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0009e	e8 00 00 00 00	 call	 ?ProjectPosition@CScreen@@QAEXMMMPAM0@Z ; CScreen::ProjectPosition

; 139  : 
; 140  : 	// set flare location
; 141  : 	SetFlareLocation(fX, fY);

  000a3	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _fY$[esp+48]
  000a9	83 ec 10	 sub	 esp, 16			; 00000010H
  000ac	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _fY$1$[esp+64], xmm0
  000b2	8b ce		 mov	 ecx, esi
  000b4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b7	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  000bd	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR _fX$[esp+64]
  000c3	f3 0f 11 44 24
	30		 movss	 DWORD PTR _fX$1$[esp+64], xmm0
  000c9	0f 5a c0	 cvtps2pd xmm0, xmm0
  000cc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d1	e8 00 00 00 00	 call	 ?SetFlareLocation@CLensFlare@@QAEXNN@Z ; CLensFlare::SetFlareLocation

; 142  : 
; 143  : 	// determine visibility
; 144  : 	float fSunVectorMagnitude = sqrtf(afSunPos[0] * afSunPos[0] +

  000d6	f3 0f 10 4c 24
	08		 movss	 xmm1, DWORD PTR tv192[esp+48]
  000dc	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv187[esp+48]
  000e2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000e6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ea	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ee	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR tv190[esp+48]
  000f4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000f8	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  000fc	0f 5a c1	 cvtps2pd xmm0, xmm1
  000ff	0f 57 c9	 xorps	 xmm1, xmm1
  00102	66 0f 2e c8	 ucomisd xmm1, xmm0
  00106	77 06		 ja	 SHORT $LN11@Compute
  00108	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0010c	eb 05		 jmp	 SHORT $LN12@Compute
$LN11@Compute:
  0010e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN12@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 148  : 	afSunVector[0] = -afSunPos[0] / fSunVectorMagnitude;

  00113	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR tv187[esp+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00119	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 149  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  0011c	f3 0f 10 5c 24
	08		 movss	 xmm3, DWORD PTR tv192[esp+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00122	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 149  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0012e	0f 57 d0	 xorps	 xmm2, xmm0
  00131	0f 57 d8	 xorps	 xmm3, xmm0
  00134	f3 0f 5e d1	 divss	 xmm2, xmm1
  00138	f3 0f 5e d9	 divss	 xmm3, xmm1

; 151  : 
; 152  : 	float afCameraDirection[3];
; 153  : 	afCameraDirection[0] = ms_matView._13;
; 154  : 	afCameraDirection[1] = ms_matView._23;
; 155  : 	afCameraDirection[2] = ms_matView._33;
; 156  : 
; 157  : 
; 158  : 	float fDotProduct =

  0013c	f3 0f 59 15 08
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+8
  00144	f3 0f 59 1d 18
	00 00 00	 mulss	 xmm3, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+24
  0014c	f3 0f 58 da	 addss	 xmm3, xmm2
  00150	f3 0f 10 54 24
	10		 movss	 xmm2, DWORD PTR tv190[esp+48]
  00156	0f 57 d0	 xorps	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  00159	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 150  : 	afSunVector[2] = -afSunPos[2] / fSunVectorMagnitude;

  0015c	f3 0f 5e d1	 divss	 xmm2, xmm1

; 151  : 
; 152  : 	float afCameraDirection[3];
; 153  : 	afCameraDirection[0] = ms_matView._13;
; 154  : 	afCameraDirection[1] = ms_matView._23;
; 155  : 	afCameraDirection[2] = ms_matView._33;
; 156  : 
; 157  : 
; 158  : 	float fDotProduct =

  00160	f3 0f 59 15 28
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+40
  00168	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 624  :             return (float)acos(_X);

  0016c	f3 0f 5a c3	 cvtss2sd xmm0, xmm3
  00170	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  00175	0f 57 c9	 xorps	 xmm1, xmm1
  00178	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 169  : 	fX /= ms_Viewport.Width;

  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00184	0f 2f c1	 comiss	 xmm0, xmm1
  00187	0f 57 c0	 xorps	 xmm0, xmm0
  0018a	0f 97 c0	 seta	 al
  0018d	88 46 1c	 mov	 BYTE PTR [esi+28], al

; 170  : 	fY /= ms_Viewport.Height;

  00190	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00195	f3 0f 10 5c 24
	1c		 movss	 xmm3, DWORD PTR _fY$1$[esp+48]

; 171  : 
; 172  : 	float fDistance = sqrtf(((0.5f - fX) * (0.5f - fX)) + ((0.5f - fY) * (0.5f - fY)));

  0019b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  001a3	0f 28 ca	 movaps	 xmm1, xmm2
  001a6	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001aa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ad	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001b6	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  001bb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001bf	f3 0f 5e d8	 divss	 xmm3, xmm0
  001c3	0f 57 c0	 xorps	 xmm0, xmm0
  001c6	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001ca	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001cd	f3 0f 5c cb	 subss	 xmm1, xmm3
  001d1	f3 0f 10 5c 24
	20		 movss	 xmm3, DWORD PTR _fX$1$[esp+48]
  001d7	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001e0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001e4	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001e8	f3 0f 5e d8	 divss	 xmm3, xmm0
  001ec	f3 0f 5c d3	 subss	 xmm2, xmm3
  001f0	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001f4	f3 0f 58 d1	 addss	 xmm2, xmm1
  001f8	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  001fb	0f 5a c2	 cvtps2pd xmm0, xmm2
  001fe	66 0f 2e c8	 ucomisd xmm1, xmm0
  00202	77 06		 ja	 SHORT $LN13@Compute
  00204	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00208	eb 05		 jmp	 SHORT $LN14@Compute
$LN13@Compute:
  0020a	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@Compute:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 174  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0020f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00217	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  0021a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 174  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0021e	8b ce		 mov	 ecx, esi
  00220	f3 0f 5c c8	 subss	 xmm1, xmm0
  00224	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0022a	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00232	f3 0f 11 4c 24
	2c		 movss	 DWORD PTR __real@3f800000$1$[esp+60], xmm1
  00238	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0023f	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  00244	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR __real@3f800000$1$[esp+48]

; 175  : 
; 176  : 	SetBrightnesses(fBeforeBright, fAfterBright);

  0024a	83 ec 10	 sub	 esp, 16			; 00000010H
  0024d	8b ce		 mov	 ecx, esi
  0024f	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00253	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00259	c7 44 24 04 66
	66 e6 3e	 mov	 DWORD PTR [esp+4], 1055286886 ; 3ee66666H
  00261	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00268	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  0026d	51		 push	 ecx
  0026e	8b ce		 mov	 ecx, esi
  00270	d9 1c 24	 fstp	 DWORD PTR [esp]
  00273	e8 00 00 00 00	 call	 ?SetBrightnesses@CLensFlare@@QAEXMM@Z ; CLensFlare::SetBrightnesses

; 177  : }

  00278	5e		 pop	 esi
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 04 00	 ret	 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CLensFlare::Compute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ??1CLensFlare@@UAE@XZ
_TEXT	SEGMENT
??1CLensFlare@@UAE@XZ PROC				; CLensFlare::~CLensFlare, COMDAT
; _this$ = ecx

; 111  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 112  :     delete[] m_pControlPixels;

  00003	ff 76 34	 push	 DWORD PTR [esi+52]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0000c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 113  :     delete[] m_pTestPixels;

  00011	ff 76 38	 push	 DWORD PTR [esi+56]
  00014	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00019	83 c4 08	 add	 esp, 8

; 114  : }

  0001c	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0001f	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00024	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00027	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0002c	8b ce		 mov	 ecx, esi
  0002e	5e		 pop	 esi
  0002f	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CLensFlare@@UAE@XZ ENDP				; CLensFlare::~CLensFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ??0CLensFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLensFlare@@QAE@XZ PROC				; CLensFlare::CLensFlare, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLensFlare@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002e	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00045	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004c	66 c7 46 1c 00
	01		 mov	 WORD PTR [esi+28], 256	; 00000100H
  00052	c6 46 1e 01	 mov	 BYTE PTR [esi+30], 1
  00056	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0005d	e8 00 00 00 00	 call	 ??0CFlare@@QAE@XZ	; CFlare::CFlare
  00062	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00069	66 c7 46 3c 01
	01		 mov	 WORD PTR [esi+60], 257	; 00000101H
  0006f	c7 46 40 00 00
	80 3f		 mov	 DWORD PTR [esi+64], 1065353216 ; 3f800000H
  00076	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 101  :     m_pControlPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  0007b	68 84 03 00 00	 push	 900			; 00000384H
  00080	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00084	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 102  :     m_pTestPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  00089	68 84 03 00 00	 push	 900			; 00000384H
  0008e	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00091	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00096	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00099	83 c4 08	 add	 esp, 8

; 103  : 	m_afColor[0] = m_afColor[1] = m_afColor[2] = 1.0f;

  0009c	c7 46 4c 00 00
	80 3f		 mov	 DWORD PTR [esi+76], 1065353216 ; 3f800000H

; 104  : }

  000a3	8b c6		 mov	 eax, esi
  000a5	c7 46 48 00 00
	80 3f		 mov	 DWORD PTR [esi+72], 1065353216 ; 3f800000H
  000ac	c7 46 44 00 00
	80 3f		 mov	 DWORD PTR [esi+68], 1065353216 ; 3f800000H
  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	5e		 pop	 esi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLensFlare@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CLensFlare@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 24	 add	 ecx, 36			; 00000024H
  0000e	e9 00 00 00 00	 jmp	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
__unwindfunclet$??0CLensFlare@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 54	 add	 ecx, 84			; 00000054H
  00019	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CLensFlare@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLensFlare@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLensFlare@@QAE@XZ ENDP				; CLensFlare::CLensFlare
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlare@@UAEPAXI@Z PROC				; CFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlare@@UAEPAXI@Z ENDP				; CFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ??1CFlare@@UAE@XZ
_TEXT	SEGMENT
??1CFlare@@UAE@XZ PROC					; CFlare::~CFlare, COMDAT
; _this$ = ecx

; 490  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlare@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CFlare

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN6@CFlare:
  00037	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 491  : }

  00038	c3		 ret	 0
??1CFlare@@UAE@XZ ENDP					; CFlare::~CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ??0CFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFlare@@QAE@XZ PROC					; CFlare::CFlare, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFlare@@6B@

; 483  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 483  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CFlare@@QAE@XZ ENDP					; CFlare::CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -116						; size = 4
_this$GSCopy$1$ = -112					; size = 4
__Right_size$1$ = -108					; size = 4
_pResource$1$ = -104					; size = 4
__New_array$3 = -104					; size = 4
__Result$1$ = -100					; size = 4
tv845 = -96						; size = 4
_i$1$ = -92						; size = 4
_pPiece$4 = -92						; size = 4
$T5 = -88						; size = 24
$T6 = -64						; size = 24
$T7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CFlare::Init, COMDAT
; _this$ = ecx

; 498  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 499  : 	int i = 0;
; 500  : 
; 501  : 	while (g_strFiles[i] != "")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00032	33 ff		 xor	 edi, edi
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00040	89 7d a4	 mov	 DWORD PTR _i$1$[ebp], edi
  00043	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00048	83 c4 08	 add	 esp, 8
  0004b	84 c0		 test	 al, al
  0004d	0f 84 05 02 00
	00		 je	 $LN3@Init

; 498  : {

  00053	be 00 00 00 00	 mov	 esi, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00058	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv845[ebp], OFFSET ?g_afColors@@3PAY03MA
  0005f	89 75 9c	 mov	 DWORD PTR __Result$1$[ebp], esi
  00062	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00067	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@Init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00070	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00074	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00077	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0
  0007e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00085	89 45 94	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00088	72 05		 jb	 SHORT $LN23@Init

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0008a	8b 36		 mov	 esi, DWORD PTR [esi]
  0008c	89 75 9c	 mov	 DWORD PTR __Result$1$[ebp], esi
$LN23@Init:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	73 10		 jae	 SHORT $LN20@Init

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00094	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00097	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009e	0f 11 45 d8	 movups	 XMMWORD PTR $T7[ebp], xmm0

; 2663 :             return;

  000a2	eb 43		 jmp	 SHORT $LN97@Init
$LN20@Init:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000a4	8b f8		 mov	 edi, eax
  000a6	83 cf 0f	 or	 edi, 15			; 0000000fH
  000a9	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  000af	0f 47 f9	 cmova	 edi, ecx

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000b2	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000bb	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000bd	8d 45 98	 lea	 eax, DWORD PTR __New_array$3[ebp]
  000c0	50		 push	 eax
  000c1	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  000c4	89 75 98	 mov	 DWORD PTR __New_array$3[ebp], esi
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000cd	8b 4d 94	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000d0	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000d1	51		 push	 ecx
  000d2	ff 75 9c	 push	 DWORD PTR __Result$1$[ebp]
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 _memcpy

; 2671 :         _My_data._Mysize = _Right_size;

  000db	8b 45 94	 mov	 eax, DWORD PTR __Right_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000de	83 c4 18	 add	 esp, 24			; 00000018H

; 2672 :         _My_data._Myres  = _New_capacity;

  000e1	89 7d ec	 mov	 DWORD PTR $T7[ebp+20], edi
  000e4	8b 7d a4	 mov	 edi, DWORD PTR _i$1$[ebp]
$LN97@Init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 503  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  000e7	89 45 e8	 mov	 DWORD PTR $T7[ebp+16], eax
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  000ef	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]
  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f6	50		 push	 eax
  000f7	8d 45 a8	 lea	 eax, DWORD PTR $T5[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00100	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  00103	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00107	51		 push	 ecx
  00108	50		 push	 eax
  00109	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00112	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00115	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 503  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00119	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0011d	72 02		 jb	 SHORT $LN38@Init

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0011f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN38@Init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 503  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00121	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0012d	8b 4d d4	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 503  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00130	8b f0		 mov	 esi, eax
  00132	89 75 98	 mov	 DWORD PTR _pResource$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00135	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00138	72 0d		 jb	 SHORT $LN46@Init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0013a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013b	51		 push	 ecx
  0013c	ff 75 c0	 push	 DWORD PTR $T6[ebp]
  0013f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00144	83 c4 08	 add	 esp, 8
$LN46@Init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00147	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0014a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00151	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00158	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0015c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0015f	72 0d		 jb	 SHORT $LN56@Init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00161	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00162	50		 push	 eax
  00163	ff 75 a8	 push	 DWORD PTR $T5[ebp]
  00166	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0016b	83 c4 08	 add	 esp, 8
$LN56@Init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0016e	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00171	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00178	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0017f	c6 45 a8 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 503  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00183	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00187	83 f8 10	 cmp	 eax, 16			; 00000010H
  0018a	72 0d		 jb	 SHORT $LN66@Init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0018c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	50		 push	 eax
  0018e	ff 75 d8	 push	 DWORD PTR $T7[ebp]
  00191	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00196	83 c4 08	 add	 esp, 8
$LN66@Init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 505  : 		if (!pResource->IsType(CGraphicImage::Type()))

  00199	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  0019e	50		 push	 eax
  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 508  : 		SFlarePiece * pPiece = new SFlarePiece;

  001a6	6a 2c		 push	 44			; 0000002cH
  001a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ad	8b f0		 mov	 esi, eax
  001af	83 c4 04	 add	 esp, 4
  001b2	89 75 8c	 mov	 DWORD PTR $T2[ebp], esi
  001b5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001b9	85 f6		 test	 esi, esi
  001bb	74 1e		 je	 SHORT $LN6@Init
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.h

; 65   : 	{

  001bd	8b ce		 mov	 ecx, esi
  001bf	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  001c4	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  001cb	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  001d2	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 508  : 		SFlarePiece * pPiece = new SFlarePiece;

  001d9	eb 02		 jmp	 SHORT $LN7@Init
$LN6@Init:
  001db	33 f6		 xor	 esi, esi
$LN7@Init:

; 509  : 
; 510  : 		pPiece->m_imageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  001dd	ff 75 98	 push	 DWORD PTR _pResource$1$[ebp]
  001e0	8b ce		 mov	 ecx, esi
  001e2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001e6	89 75 a4	 mov	 DWORD PTR _pPiece$4[ebp], esi
  001e9	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 511  : 		pPiece->m_fPosition = g_fPosition[i];

  001ee	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fPosition@@3PAMA[edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001f5	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 511  : 		pPiece->m_fPosition = g_fPosition[i];

  001f8	89 46 20	 mov	 DWORD PTR [esi+32], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001fb	83 c1 04	 add	 ecx, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 512  : 		pPiece->m_fWidth = g_fWidth[i];

  001fe	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fWidth@@3PAMA[edi*4]
  00205	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 513  : 		pPiece->m_pColor = g_afColors[i];

  00208	8b 45 a0	 mov	 eax, DWORD PTR tv845[ebp]
  0020b	89 46 28	 mov	 DWORD PTR [esi+40], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0020e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00211	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00214	74 08		 je	 SHORT $LN78@Init

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00216	89 30		 mov	 DWORD PTR [eax], esi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00218	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0021c	eb 0a		 jmp	 SHORT $LN77@Init
$LN78@Init:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0021e	8d 55 a4	 lea	 edx, DWORD PTR _pPiece$4[ebp]
  00221	52		 push	 edx
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@QAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
$LN77@Init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 516  : 		i++;

  00228	83 45 a0 10	 add	 DWORD PTR tv845[ebp], 16 ; 00000010H
  0022c	47		 inc	 edi
  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00232	89 7d a4	 mov	 DWORD PTR _i$1$[ebp], edi
  00235	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00238	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
  0023f	56		 push	 esi
  00240	89 75 9c	 mov	 DWORD PTR __Result$1$[ebp], esi
  00243	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00248	83 c4 08	 add	 esp, 8
  0024b	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00250	84 c0		 test	 al, al
  00252	0f 85 18 fe ff
	ff		 jne	 $LL2@Init
$LN3@Init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00258	8b 45 1c	 mov	 eax, DWORD PTR _strPath$[ebp+20]
  0025b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0025e	72 0d		 jb	 SHORT $LN86@Init

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00260	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00261	50		 push	 eax
  00262	ff 75 08	 push	 DWORD PTR _strPath$[ebp]
  00265	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0026a	83 c4 08	 add	 esp, 8
$LN86@Init:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 518  : }

  0026d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00270	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00277	59		 pop	 ecx
  00278	5f		 pop	 edi
  00279	5e		 pop	 esi
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027d	33 cd		 xor	 ecx, ebp
  0027f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00020	6a 2c		 push	 44			; 0000002cH
  00022	8b 45 8c	 mov	 eax, DWORD PTR $T2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
__ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00034	90		 npad	 1
  00035	90		 npad	 1
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CFlare::Init
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp
;	COMDAT ?Draw@CFlare@@QAEXMHHHH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -152					; size = 4
tv963 = -148						; size = 4
_fDY$1$ = -144						; size = 4
_fDX$1$ = -140						; size = 4
_i$1$ = -136						; size = 4
_fCenterX$1$ = -132					; size = 4
_fCenterY$1$ = -128					; size = 4
tv978 = -124						; size = 4
tv945 = -124						; size = 4
_d3dColor$1$sroa$486$1$ = -120				; size = 4
_d3dColor$1$sroa$489$1$ = -116				; size = 4
_d3dColor$1$sroa$493$1$ = -112				; size = 4
_d3dColor$1$sroa$495$1$ = -108				; size = 4
_fW$1$ = -104						; size = 4
_vertices$2 = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_fBrightScale$ = 8					; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
_nX$ = 20						; size = 4
_nY$ = 24						; size = 4
?Draw@CFlare@@QAEXMHHHH@Z PROC				; CFlare::Draw, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 525  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001c	6a 02		 push	 2
  0001e	6a 14		 push	 20			; 00000014H
  00020	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00026	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
  0002b	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _nWidth$[ebp]
  00030	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]

; 526  : 
; 527  : 	float fDX = float(nX) - float(nWidth) / 2.0f;

  00035	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 528  : 	float fDY = float(nY) - float(nHeight) / 2.0f;
; 529  : 
; 530  : 	STATEMANAGER.SetTexture(1, NULL);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	6a 00		 push	 0
  00040	6a 01		 push	 1
  00042	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00045	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0004d	f3 0f 5c d0	 subss	 xmm2, xmm0
  00051	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _nHeight$[ebp]
  00056	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00059	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _fDX$1$[ebp], xmm2
  00061	66 0f 6e 55 18	 movd	 xmm2, DWORD PTR _nY$[ebp]
  00066	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0006e	0f 5b ca	 cvtdq2ps xmm1, xmm2
  00071	f3 0f 5c c8	 subss	 xmm1, xmm0
  00075	f3 0f 11 8d 70
	ff ff ff	 movss	 DWORD PTR _fDY$1$[ebp], xmm1
  0007d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 531  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00088	68 42 01 00 00	 push	 322			; 00000142H
  0008d	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 532  : 
; 533  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00098	6a 02		 push	 2
  0009a	6a 02		 push	 2
  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 534  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a9	6a 00		 push	 0
  000ab	6a 03		 push	 3
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 535  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ba	6a 04		 push	 4
  000bc	6a 01		 push	 1
  000be	6a 00		 push	 0
  000c0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 536  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 02		 push	 2
  000cd	6a 05		 push	 5
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 537  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dc	6a 00		 push	 0
  000de	6a 06		 push	 6
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 538  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ed	6a 04		 push	 4
  000ef	6a 04		 push	 4
  000f1	6a 00		 push	 0
  000f3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 540  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  000fb	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00100	2b c1		 sub	 eax, ecx
  00102	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 540  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00105	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 a4 05 00
	00		 je	 $LN3@Draw
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00113	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  00118	53		 push	 ebx
  00119	57		 push	 edi
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Draw:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 542  : 		float fCenterX = float(nX) - (m_vFlares[i]->m_fPosition + 1.0f) * fDX;

  00120	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00123	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]
  00128	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _fDX$1$[ebp]
  00130	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 543  : 		float fCenterY = float(nY) - (m_vFlares[i]->m_fPosition + 1.0f) * fDY;
; 544  : 		float fW = m_vFlares[i]->m_fWidth;
; 545  : 
; 546  : 		D3DXCOLOR d3dColor(m_vFlares[i]->m_pColor[0] * fBrightScale,

  00133	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00136	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  0013b	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00143	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00147	f3 0f 5c d0	 subss	 xmm2, xmm0
  0014b	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _fDY$1$[ebp]
  00153	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00157	66 0f 6e 4d 18	 movd	 xmm1, DWORD PTR _nY$[ebp]
  0015c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0015f	f3 0f 11 95 7c
	ff ff ff	 movss	 DWORD PTR _fCenterX$1$[ebp], xmm2
  00167	f3 0f 5c c8	 subss	 xmm1, xmm0
  0016b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0016f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00173	f3 0f 11 45 94	 movss	 DWORD PTR _d3dColor$1$sroa$495$1$[ebp], xmm0
  00178	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0017d	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00181	f3 0f 11 4d 80	 movss	 DWORD PTR _fCenterY$1$[ebp], xmm1
  00186	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  0018b	f3 0f 11 45 90	 movss	 DWORD PTR _d3dColor$1$sroa$493$1$[ebp], xmm0
  00190	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00195	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00199	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  0019e	f3 0f 11 45 8c	 movss	 DWORD PTR _d3dColor$1$sroa$489$1$[ebp], xmm0
  001a3	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001a8	f3 0f 59 c3	 mulss	 xmm0, xmm3
  001ac	f3 0f 11 45 88	 movss	 DWORD PTR _d3dColor$1$sroa$486$1$[ebp], xmm0

; 547  : 						   m_vFlares[i]->m_pColor[1] * fBrightScale,
; 548  : 						   m_vFlares[i]->m_pColor[2] * fBrightScale,
; 549  : 						   m_vFlares[i]->m_pColor[3] * fBrightScale);
; 550  : 
; 551  : 		STATEMANAGER.SetTexture(0, m_vFlares[i]->m_imageInstance.GetTexturePointer()->GetD3DTexture());

  001b1	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  001b6	8b c8		 mov	 ecx, eax
  001b8	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  001bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c3	50		 push	 eax
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 552  : 
; 553  : 		TVertex vertices[4];
; 554  : 
; 555  : 		vertices[0].u = 0.0f;
; 556  : 		vertices[0].v = 0.0f;
; 557  : 		vertices[0].x = fCenterX - fW;

  001cb	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
  001d3	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]

; 558  : 		vertices[0].y = fCenterY - fW;
; 559  : 		vertices[0].z = 0.0f;

  001d8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$495$1$[ebp]
  001dd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001e4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+16], 0
  001eb	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+20], 0
  001f2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+8], 0
  001f9	f3 0f 11 4d 84	 movss	 DWORD PTR tv945[ebp], xmm1
  001fe	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$2[ebp], xmm1
  00203	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
  00208	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]
  0020d	f3 0f 11 8d 6c
	ff ff ff	 movss	 DWORD PTR tv963[ebp], xmm1
  00215	f3 0f 11 4d a0	 movss	 DWORD PTR _vertices$2[ebp+4], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0021a	0f 57 c9	 xorps	 xmm1, xmm1
  0021d	72 07		 jb	 SHORT $LN30@Draw
  0021f	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00224	eb 23		 jmp	 SHORT $LN29@Draw
$LN30@Draw:
  00226	0f 2f c8	 comiss	 xmm1, xmm0
  00229	72 04		 jb	 SHORT $LN28@Draw
  0022b	33 db		 xor	 ebx, ebx
  0022d	eb 1a		 jmp	 SHORT $LN29@Draw
$LN28@Draw:
  0022f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00237	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0023f	e8 00 00 00 00	 call	 __ftoui3
  00244	8b d8		 mov	 ebx, eax
  00246	0f 57 c9	 xorps	 xmm1, xmm1
$LN29@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00249	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$493$1$[ebp]
  0024e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00255	72 07		 jb	 SHORT $LN34@Draw
  00257	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0025c	eb 20		 jmp	 SHORT $LN33@Draw
$LN34@Draw:
  0025e	0f 2f c8	 comiss	 xmm1, xmm0
  00261	72 04		 jb	 SHORT $LN32@Draw
  00263	33 ff		 xor	 edi, edi
  00265	eb 17		 jmp	 SHORT $LN33@Draw
$LN32@Draw:
  00267	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0026f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00277	e8 00 00 00 00	 call	 __ftoui3
  0027c	8b f8		 mov	 edi, eax
$LN33@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0027e	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$489$1$[ebp]
  00283	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0028a	72 07		 jb	 SHORT $LN38@Draw
  0028c	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00291	eb 23		 jmp	 SHORT $LN37@Draw
$LN38@Draw:
  00293	0f 57 c9	 xorps	 xmm1, xmm1
  00296	0f 2f c8	 comiss	 xmm1, xmm0
  00299	72 04		 jb	 SHORT $LN36@Draw
  0029b	33 f6		 xor	 esi, esi
  0029d	eb 17		 jmp	 SHORT $LN37@Draw
$LN36@Draw:
  0029f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002a7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002af	e8 00 00 00 00	 call	 __ftoui3
  002b4	8b f0		 mov	 esi, eax
$LN37@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  002b6	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$486$1$[ebp]
  002bb	0f 57 c0	 xorps	 xmm0, xmm0
  002be	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002c5	72 07		 jb	 SHORT $LN42@Draw
  002c7	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  002cc	eb 24		 jmp	 SHORT $LN41@Draw
$LN42@Draw:
  002ce	0f 2f c1	 comiss	 xmm0, xmm1
  002d1	72 04		 jb	 SHORT $LN40@Draw
  002d3	33 c0		 xor	 eax, eax
  002d5	eb 1b		 jmp	 SHORT $LN41@Draw
$LN40@Draw:
  002d7	0f 28 c1	 movaps	 xmm0, xmm1
  002da	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002e2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002ea	e8 00 00 00 00	 call	 __ftoui3
  002ef	0f 57 c0	 xorps	 xmm0, xmm0
$LN41@Draw:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 564  : 		vertices[1].x = fCenterX - fW;

  002f2	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv945[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002f7	c1 e0 08	 shl	 eax, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 564  : 		vertices[1].x = fCenterX - fW;

  002fa	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$2[ebp+24], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002ff	0b c3		 or	 eax, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 565  : 		vertices[1].y = fCenterY + fW;

  00301	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  00306	f3 0f 58 4d 80	 addss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0030b	c1 e0 08	 shl	 eax, 8
  0030e	0b c7		 or	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 562  : 		vertices[1].u = 0.0f;

  00310	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+40], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00317	c1 e0 08	 shl	 eax, 8
  0031a	0b c6		 or	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 563  : 		vertices[1].v = 1.0f;

  0031c	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+44], 1065353216 ; 3f800000H

; 565  : 		vertices[1].y = fCenterY + fW;

  00323	f3 0f 11 4d 84	 movss	 DWORD PTR tv978[ebp], xmm1
  00328	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$2[ebp+28], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0032d	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$495$1$[ebp]
  00332	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 560  : 		vertices[0].color = d3dColor;

  00339	89 45 a8	 mov	 DWORD PTR _vertices$2[ebp+12], eax

; 566  : 		vertices[1].z = 0.0f;

  0033c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+32], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00343	72 07		 jb	 SHORT $LN48@Draw
  00345	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0034a	eb 23		 jmp	 SHORT $LN47@Draw
$LN48@Draw:
  0034c	0f 2f c1	 comiss	 xmm0, xmm1
  0034f	72 04		 jb	 SHORT $LN46@Draw
  00351	33 db		 xor	 ebx, ebx
  00353	eb 1a		 jmp	 SHORT $LN47@Draw
$LN46@Draw:
  00355	0f 28 c1	 movaps	 xmm0, xmm1
  00358	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00360	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00368	e8 00 00 00 00	 call	 __ftoui3
  0036d	8b d8		 mov	 ebx, eax
$LN47@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0036f	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$493$1$[ebp]
  00374	0f 57 c9	 xorps	 xmm1, xmm1
  00377	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0037e	72 07		 jb	 SHORT $LN52@Draw
  00380	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00385	eb 23		 jmp	 SHORT $LN51@Draw
$LN52@Draw:
  00387	0f 2f c8	 comiss	 xmm1, xmm0
  0038a	72 04		 jb	 SHORT $LN50@Draw
  0038c	33 ff		 xor	 edi, edi
  0038e	eb 1a		 jmp	 SHORT $LN51@Draw
$LN50@Draw:
  00390	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00398	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003a0	e8 00 00 00 00	 call	 __ftoui3
  003a5	8b f8		 mov	 edi, eax
  003a7	0f 57 c9	 xorps	 xmm1, xmm1
$LN51@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  003aa	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$489$1$[ebp]
  003af	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003b6	72 07		 jb	 SHORT $LN56@Draw
  003b8	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  003bd	eb 20		 jmp	 SHORT $LN55@Draw
$LN56@Draw:
  003bf	0f 2f c8	 comiss	 xmm1, xmm0
  003c2	72 04		 jb	 SHORT $LN54@Draw
  003c4	33 f6		 xor	 esi, esi
  003c6	eb 17		 jmp	 SHORT $LN55@Draw
$LN54@Draw:
  003c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003d0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003d8	e8 00 00 00 00	 call	 __ftoui3
  003dd	8b f0		 mov	 esi, eax
$LN55@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  003df	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$486$1$[ebp]
  003e4	0f 57 c0	 xorps	 xmm0, xmm0
  003e7	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  003ee	72 07		 jb	 SHORT $LN60@Draw
  003f0	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  003f5	eb 24		 jmp	 SHORT $LN59@Draw
$LN60@Draw:
  003f7	0f 2f c1	 comiss	 xmm0, xmm1
  003fa	72 04		 jb	 SHORT $LN58@Draw
  003fc	33 c0		 xor	 eax, eax
  003fe	eb 1b		 jmp	 SHORT $LN59@Draw
$LN58@Draw:
  00400	0f 28 c1	 movaps	 xmm0, xmm1
  00403	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0040b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00413	e8 00 00 00 00	 call	 __ftoui3
  00418	0f 57 c0	 xorps	 xmm0, xmm0
$LN59@Draw:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 571  : 		vertices[2].x = fCenterX + fW;

  0041b	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  00420	f3 0f 58 8d 7c
	ff ff ff	 addss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00428	c1 e0 08	 shl	 eax, 8
  0042b	0b c3		 or	 eax, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 569  : 		vertices[2].u = 1.0f;

  0042d	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+64], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00434	c1 e0 08	 shl	 eax, 8
  00437	0b c7		 or	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 570  : 		vertices[2].v = 0.0f;

  00439	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+68], 0

; 571  : 		vertices[2].x = fCenterX + fW;

  00440	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  00445	f3 0f 11 4d cc	 movss	 DWORD PTR _vertices$2[ebp+48], xmm1

; 572  : 		vertices[2].y = fCenterY - fW;

  0044a	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR tv963[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00452	c1 e0 08	 shl	 eax, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 572  : 		vertices[2].y = fCenterY - fW;

  00455	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$2[ebp+52], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0045a	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0045c	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$495$1$[ebp]
  00461	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 567  : 		vertices[1].color = d3dColor;

  00468	89 45 c0	 mov	 DWORD PTR _vertices$2[ebp+36], eax

; 573  : 		vertices[2].z = 0.0f;

  0046b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+56], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00472	72 07		 jb	 SHORT $LN66@Draw
  00474	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00479	eb 23		 jmp	 SHORT $LN65@Draw
$LN66@Draw:
  0047b	0f 2f c1	 comiss	 xmm0, xmm1
  0047e	72 04		 jb	 SHORT $LN64@Draw
  00480	33 db		 xor	 ebx, ebx
  00482	eb 1a		 jmp	 SHORT $LN65@Draw
$LN64@Draw:
  00484	0f 28 c1	 movaps	 xmm0, xmm1
  00487	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0048f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00497	e8 00 00 00 00	 call	 __ftoui3
  0049c	8b d8		 mov	 ebx, eax
$LN65@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0049e	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$493$1$[ebp]
  004a3	0f 57 c9	 xorps	 xmm1, xmm1
  004a6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004ad	72 07		 jb	 SHORT $LN70@Draw
  004af	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  004b4	eb 23		 jmp	 SHORT $LN69@Draw
$LN70@Draw:
  004b6	0f 2f c8	 comiss	 xmm1, xmm0
  004b9	72 04		 jb	 SHORT $LN68@Draw
  004bb	33 ff		 xor	 edi, edi
  004bd	eb 1a		 jmp	 SHORT $LN69@Draw
$LN68@Draw:
  004bf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004cf	e8 00 00 00 00	 call	 __ftoui3
  004d4	8b f8		 mov	 edi, eax
  004d6	0f 57 c9	 xorps	 xmm1, xmm1
$LN69@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  004d9	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$489$1$[ebp]
  004de	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004e5	72 07		 jb	 SHORT $LN74@Draw
  004e7	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  004ec	eb 20		 jmp	 SHORT $LN73@Draw
$LN74@Draw:
  004ee	0f 2f c8	 comiss	 xmm1, xmm0
  004f1	72 04		 jb	 SHORT $LN72@Draw
  004f3	33 f6		 xor	 esi, esi
  004f5	eb 17		 jmp	 SHORT $LN73@Draw
$LN72@Draw:
  004f7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004ff	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00507	e8 00 00 00 00	 call	 __ftoui3
  0050c	8b f0		 mov	 esi, eax
$LN73@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0050e	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$486$1$[ebp]
  00513	0f 57 c0	 xorps	 xmm0, xmm0
  00516	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0051d	72 07		 jb	 SHORT $LN78@Draw
  0051f	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00524	eb 24		 jmp	 SHORT $LN77@Draw
$LN78@Draw:
  00526	0f 2f c1	 comiss	 xmm0, xmm1
  00529	72 04		 jb	 SHORT $LN76@Draw
  0052b	33 c0		 xor	 eax, eax
  0052d	eb 1b		 jmp	 SHORT $LN77@Draw
$LN76@Draw:
  0052f	0f 28 c1	 movaps	 xmm0, xmm1
  00532	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0053a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00542	e8 00 00 00 00	 call	 __ftoui3
  00547	0f 57 c0	 xorps	 xmm0, xmm0
$LN77@Draw:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 578  : 		vertices[3].x = fCenterX + fW;

  0054a	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0054f	c1 e0 08	 shl	 eax, 8
  00552	0b c3		 or	 eax, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 578  : 		vertices[3].x = fCenterX + fW;

  00554	f3 0f 11 4d e4	 movss	 DWORD PTR _vertices$2[ebp+72], xmm1

; 579  : 		vertices[3].y = fCenterY + fW;

  00559	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv978[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0055e	c1 e0 08	 shl	 eax, 8
  00561	0b c7		 or	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 579  : 		vertices[3].y = fCenterY + fW;

  00563	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$2[ebp+76], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00568	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$495$1$[ebp]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0056d	c1 e0 08	 shl	 eax, 8
  00570	0b c6		 or	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 576  : 		vertices[3].u = 1.0f;

  00572	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+88], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00579	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 574  : 		vertices[2].color = d3dColor;

  00580	89 45 d8	 mov	 DWORD PTR _vertices$2[ebp+60], eax

; 577  : 		vertices[3].v = 1.0f;

  00583	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+92], 1065353216 ; 3f800000H

; 580  : 		vertices[3].z = 0.0f;

  0058a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+80], 0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00591	72 07		 jb	 SHORT $LN84@Draw
  00593	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00598	eb 23		 jmp	 SHORT $LN83@Draw
$LN84@Draw:
  0059a	0f 2f c1	 comiss	 xmm0, xmm1
  0059d	72 04		 jb	 SHORT $LN82@Draw
  0059f	33 db		 xor	 ebx, ebx
  005a1	eb 1a		 jmp	 SHORT $LN83@Draw
$LN82@Draw:
  005a3	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005ab	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005b3	0f 28 c1	 movaps	 xmm0, xmm1
  005b6	e8 00 00 00 00	 call	 __ftoui3
  005bb	8b d8		 mov	 ebx, eax
$LN83@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  005bd	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$493$1$[ebp]
  005c2	0f 57 c9	 xorps	 xmm1, xmm1
  005c5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005cc	72 07		 jb	 SHORT $LN88@Draw
  005ce	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  005d3	eb 23		 jmp	 SHORT $LN87@Draw
$LN88@Draw:
  005d5	0f 2f c8	 comiss	 xmm1, xmm0
  005d8	72 04		 jb	 SHORT $LN86@Draw
  005da	33 ff		 xor	 edi, edi
  005dc	eb 1a		 jmp	 SHORT $LN87@Draw
$LN86@Draw:
  005de	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005e6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005ee	e8 00 00 00 00	 call	 __ftoui3
  005f3	8b f8		 mov	 edi, eax
  005f5	0f 57 c9	 xorps	 xmm1, xmm1
$LN87@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  005f8	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$489$1$[ebp]
  005fd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00604	72 07		 jb	 SHORT $LN92@Draw
  00606	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0060b	eb 20		 jmp	 SHORT $LN91@Draw
$LN92@Draw:
  0060d	0f 2f c8	 comiss	 xmm1, xmm0
  00610	72 04		 jb	 SHORT $LN90@Draw
  00612	33 f6		 xor	 esi, esi
  00614	eb 17		 jmp	 SHORT $LN91@Draw
$LN90@Draw:
  00616	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0061e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00626	e8 00 00 00 00	 call	 __ftoui3
  0062b	8b f0		 mov	 esi, eax
$LN91@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0062d	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$486$1$[ebp]
  00632	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00639	72 07		 jb	 SHORT $LN96@Draw
  0063b	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00640	eb 21		 jmp	 SHORT $LN95@Draw
$LN96@Draw:
  00642	0f 57 c9	 xorps	 xmm1, xmm1
  00645	0f 2f c8	 comiss	 xmm1, xmm0
  00648	72 04		 jb	 SHORT $LN94@Draw
  0064a	33 c0		 xor	 eax, eax
  0064c	eb 15		 jmp	 SHORT $LN95@Draw
$LN94@Draw:
  0064e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00656	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0065e	e8 00 00 00 00	 call	 __ftoui3
$LN95@Draw:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 583  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  00663	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00669	c1 e0 08	 shl	 eax, 8
  0066c	0b c3		 or	 eax, ebx
  0066e	c1 e0 08	 shl	 eax, 8
  00671	0b c7		 or	 eax, edi
  00673	c1 e0 08	 shl	 eax, 8
  00676	0b c6		 or	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 583  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  00678	6a 18		 push	 24			; 00000018H
  0067a	89 45 f0	 mov	 DWORD PTR _vertices$2[ebp+84], eax
  0067d	8d 45 9c	 lea	 eax, DWORD PTR _vertices$2[ebp]
  00680	50		 push	 eax
  00681	6a 02		 push	 2
  00683	6a 05		 push	 5
  00685	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0068a	8b 9d 68 ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 540  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00690	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]
  00696	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  0069b	42		 inc	 edx
  0069c	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  006a2	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  006a5	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  006a8	2b c1		 sub	 eax, ecx
  006aa	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\LensFlare.cpp

; 540  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  006ad	3b d0		 cmp	 edx, eax
  006af	0f 82 6b fa ff
	ff		 jb	 $LL4@Draw
  006b5	5f		 pop	 edi
  006b6	5b		 pop	 ebx
$LN3@Draw:

; 584  : 	}
; 585  : 
; 586  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  006b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006bd	6a 14		 push	 20			; 00000014H
  006bf	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 587  : }

  006c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c7	33 cd		 xor	 ecx, ebp
  006c9	5e		 pop	 esi
  006ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006cf	8b e5		 mov	 esp, ebp
  006d1	5d		 pop	 ebp
  006d2	c2 14 00	 ret	 20			; 00000014H
?Draw@CFlare@@QAEXMHHHH@Z ENDP				; CFlare::Draw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4432 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4433 : #if _ITERATOR_DEBUG_LEVEL == 2
; 4434 :     _STL_VERIFY(_STD addressof(_Left) != _STD addressof(_Right),
; 4435 :         "You cannot concatenate the same moved string to itself. See "
; 4436 :         "N4849 [res.on.arguments]/1.3: If a function argument binds to an rvalue reference "
; 4437 :         "parameter, the implementation may assume that this parameter is a unique reference "
; 4438 :         "to this argument");
; 4439 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 4440 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00003	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR $T1[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4441 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -12					; size = 4
__Fancyptr$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__New_capacity$1$ = 16					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2469 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00011	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00018	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  0001f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  00022	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00025	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  00028	89 55 f4	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2477 : 
; 2478 :         const auto _Left_capacity  = _Left_data._Myres;
; 2479 :         const auto _Right_capacity = _Right_data._Myres;
; 2480 :         // overflow is OK due to max_size() checks:
; 2481 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  0002b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0002e	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2482 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	2b c1		 sub	 eax, ecx
  00036	3b d0		 cmp	 edx, eax

; 2483 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  00038	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003b	77 5a		 ja	 SHORT $LN2@basic_stri
  0003d	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00040	77 55		 ja	 SHORT $LN2@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00042	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00045	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  00048	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0004d	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00052	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00059	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00060	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2135 :         value_type* _Result = _Bx._Buf;

  00063	8b f3		 mov	 esi, ebx

; 2153 :         return _BUF_SIZE <= _Myres;

  00065	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN17@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN17@basic_stri:

; 2153 :         return _BUF_SIZE <= _Myres;

  0006d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00071	72 02		 jb	 SHORT $LN22@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00073	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN22@basic_stri:

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00075	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00078	50		 push	 eax

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00079	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007c	57		 push	 edi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memcpy

; 2489 :             _My_data._Mysize = _New_size;

  00083	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0008c	8b c3		 mov	 eax, ebx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
$LN2@basic_stri:

; 2490 :             return;
; 2491 :         }
; 2492 : 
; 2493 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  00097	2b c2		 sub	 eax, edx
  00099	3b c8		 cmp	 ecx, eax

; 2494 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  0009b	77 5a		 ja	 SHORT $LN3@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000a3	50		 push	 eax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a4	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000a7	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000ac	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b1	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b8	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bf	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2495 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2496 :             // At this point, we have tested:
; 2497 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2498 :             // therefore: (by De Morgan's Laws)
; 2499 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2500 :             // therefore: (by the distributive property)
; 2501 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2502 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2503 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2504 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2505 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2506 :             _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2507 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c2	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c4	57		 push	 edi

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000c5	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _memmove
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  000d1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000d5	72 02		 jb	 SHORT $LN37@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000d7	8b 36		 mov	 esi, DWORD PTR [esi]
$LN37@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000d9	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  000dc	56		 push	 esi
  000dd	57		 push	 edi
  000de	e8 00 00 00 00	 call	 _memcpy

; 2509 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2510 :             _My_data._Mysize = _New_size;

  000e3	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000ec	8b c3		 mov	 eax, ebx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
$LN3@basic_stri:

; 2511 :             return;
; 2512 :         }
; 2513 : 
; 2514 :         // can't use either buffer, reallocate
; 2515 :         const auto _Max = max_size();
; 2516 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000f7	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000fc	2b c1		 sub	 eax, ecx
  000fe	3b c2		 cmp	 eax, edx
  00100	0f 82 83 00 00
	00		 jb	 $LN70@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00106	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00109	83 c8 0f	 or	 eax, 15			; 0000000fH
  0010c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00111	76 07		 jbe	 SHORT $LN44@basic_stri

; 4203 :             return _Max;

  00113	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00118	eb 0a		 jmp	 SHORT $LN68@basic_stri
$LN44@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0011a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0011f	3b c1		 cmp	 eax, ecx
  00121	0f 42 c1	 cmovb	 eax, ecx
$LN68@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00124	89 45 10	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
  00127	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0012e	89 45 f8	 mov	 DWORD PTR __Fancyptr$[ebp], eax

; 2524 :         // nothrow hereafter
; 2525 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00131	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$[ebp]
  00134	50		 push	 eax
  00135	53		 push	 ebx
  00136	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2526 :         _My_data._Mysize = _New_size;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2527 :         _My_data._Myres  = _New_capacity;

  00141	8b 4d 10	 mov	 ecx, DWORD PTR __New_capacity$1$[ebp]
  00144	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00147	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0014a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0014e	72 02		 jb	 SHORT $LN52@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00150	8b 36		 mov	 esi, DWORD PTR [esi]
$LN52@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00152	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  00155	56		 push	 esi
  00156	8b 75 f8	 mov	 esi, DWORD PTR __Fancyptr$[ebp]
  00159	56		 push	 esi
  0015a	e8 00 00 00 00	 call	 _memcpy
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  00162	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00166	72 02		 jb	 SHORT $LN59@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00168	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN59@basic_stri:

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016a	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0016d	40		 inc	 eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0016e	50		 push	 eax

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016f	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00172	03 c6		 add	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _memcpy

; 2531 :         _Proxy._Release();
; 2532 :     }

  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	8b c3		 mov	 eax, ebx
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 0c 00	 ret	 12			; 0000000cH
$LN70@basic_stri:

; 2517 :             _Xlen_string();

  00189	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@basic_stri:
  0018e	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__New_ptr$1 = -8					; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  0000c	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000d	8b f9		 mov	 edi, ecx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL47@basic_stri:
  00023	8a 07		 mov	 al, BYTE PTR [edi]
  00025	47		 inc	 edi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL47@basic_stri
  0002a	2b fa		 sub	 edi, edx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002c	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0002f	77 1c		 ja	 SHORT $LN14@basic_stri

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	57		 push	 edi
  00032	51		 push	 ecx
  00033	53		 push	 ebx

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00034	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	e8 00 00 00 00	 call	 _memmove
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  00043	8b c3		 mov	 eax, ebx
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN14@basic_stri:

; 4221 :         if (_New_size > max_size()) {

  0004d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00053	77 5c		 ja	 SHORT $LN51@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00055	8b c7		 mov	 eax, edi
  00057	83 c8 0f	 or	 eax, 15			; 0000000fH
  0005a	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0005f	76 07		 jbe	 SHORT $LN31@basic_stri

; 4203 :             return _Max;

  00061	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00066	eb 0a		 jmp	 SHORT $LN49@basic_stri
$LN31@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00068	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0006d	3b c1		 cmp	 eax, ecx
  0006f	0f 42 c1	 cmovb	 eax, ecx
$LN49@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00072	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  00075	40		 inc	 eax
  00076	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007d	57		 push	 edi
  0007e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00081	8b f0		 mov	 esi, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00083	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00086	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00089	56		 push	 esi

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008a	89 75 f8	 mov	 DWORD PTR __New_ptr$1[ebp], esi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0008d	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	e8 00 00 00 00	 call	 _memcpy

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00095	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0009c	50		 push	 eax
  0009d	53		 push	 ebx
  0009e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000a3	83 c4 18	 add	 esp, 24			; 00000018H

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  000a6	8b c3		 mov	 eax, ebx

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000a8	5e		 pop	 esi

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  000a9	5f		 pop	 edi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN51@basic_stri:

; 4222 :             _Xlen_string(); // result too long

  000b1	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN48@basic_stri:
  000b6	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	5e		 pop	 esi

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2276 :         _Construct_lv_contents(_Right);
; 2277 :         _Proxy._Release();
; 2278 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
