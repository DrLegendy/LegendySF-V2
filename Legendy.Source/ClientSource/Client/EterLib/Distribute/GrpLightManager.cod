; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_fCurTime@CLightBase@@1MA			; CLightBase::ms_fCurTime
_BSS	SEGMENT
?ms_fCurTime@CLightBase@@1MA DD 01H DUP (?)		; CLightBase::ms_fCurTime
_BSS	ENDS
CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1CLightBase@@UAE@XZ				; CLightBase::~CLightBase
PUBLIC	??_GCLightBase@@UAEPAXI@Z			; CLightBase::`scalar deleting destructor'
PUBLIC	??0CLight@@QAE@XZ				; CLight::CLight
PUBLIC	??1CLight@@UAE@XZ				; CLight::~CLight
PUBLIC	?Initialize@CLight@@QAEXXZ			; CLight::Initialize
PUBLIC	?Clear@CLight@@QAEXXZ				; CLight::Clear
PUBLIC	?Update@CLight@@QAEXXZ				; CLight::Update
PUBLIC	?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z	; CLight::SetParameter
PUBLIC	?SetDistance@CLight@@QAEXM@Z			; CLight::SetDistance
PUBLIC	?SetDeviceLight@CLight@@QAEXH@Z			; CLight::SetDeviceLight
PUBLIC	?SetDiffuseColor@CLight@@QAEXMMMM@Z		; CLight::SetDiffuseColor
PUBLIC	?SetAmbientColor@CLight@@QAEXMMMM@Z		; CLight::SetAmbientColor
PUBLIC	?SetRange@CLight@@QAEXM@Z			; CLight::SetRange
PUBLIC	?SetPosition@CLight@@QAEXMMM@Z			; CLight::SetPosition
PUBLIC	?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ	; CLight::GetPosition
PUBLIC	?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendDiffuseColor
PUBLIC	?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendAmbientColor
PUBLIC	?BlendRange@CLight@@QAEXMMM@Z			; CLight::BlendRange
PUBLIC	??_GCLight@@UAEPAXI@Z				; CLight::`scalar deleting destructor'
PUBLIC	??1?$CSingleton@VCLightManager@@@@UAE@XZ	; CSingleton<CLightManager>::~CSingleton<CLightManager>
PUBLIC	??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z	; CSingleton<CLightManager>::`scalar deleting destructor'
PUBLIC	??0CLightManager@@QAE@XZ			; CLightManager::CLightManager
PUBLIC	??1CLightManager@@UAE@XZ			; CLightManager::~CLightManager
PUBLIC	?Destroy@CLightManager@@QAEXXZ			; CLightManager::Destroy
PUBLIC	?Initialize@CLightManager@@QAEXXZ		; CLightManager::Initialize
PUBLIC	?Update@CLightManager@@QAEXXZ			; CLightManager::Update
PUBLIC	?FlushLight@CLightManager@@QAEXXZ		; CLightManager::FlushLight
PUBLIC	?RestoreLight@CLightManager@@QAEXXZ		; CLightManager::RestoreLight
PUBLIC	?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ; CLightManager::RegisterLight
PUBLIC	?GetLight@CLightManager@@QAEPAVCLight@@K@Z	; CLightManager::GetLight
PUBLIC	?DeleteLight@CLightManager@@QAEXK@Z		; CLightManager::DeleteLight
PUBLIC	?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ; CLightManager::SetCenterPosition
PUBLIC	?SetLimitLightCount@CLightManager@@QAEXK@Z	; CLightManager::SetLimitLightCount
PUBLIC	?SetSkipIndex@CLightManager@@QAEXK@Z		; CLightManager::SetSkipIndex
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
PUBLIC	?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
PUBLIC	?NewLightID@CLightManager@@IAEKXZ		; CLightManager::NewLightID
PUBLIC	?ReleaseLightID@CLightManager@@IAEXK@Z		; CLightManager::ReleaseLightID
PUBLIC	??1?$CDynamicPool@VCLight@@@@UAE@XZ		; CDynamicPool<CLight>::~CDynamicPool<CLight>
PUBLIC	?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ; CDynamicPool<CLight>::Delete
PUBLIC	??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z		; CDynamicPool<CLight>::`scalar deleting destructor'
PUBLIC	??_GCLightManager@@UAEPAXI@Z			; CLightManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Emplace_back_internal@ABK@?$deque@KV?$allocator@K@std@@@std@@AAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Emplace_back_internal<unsigned long const &>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCLight@@@std@@@std@@YAXPAPAVCLight@@QAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ; std::_Destroy_range<std::allocator<CLight *> >
PUBLIC	??$_Destroy_in_place@PAK@std@@YAXAAPAK@Z	; std::_Destroy_in_place<unsigned long *>
PUBLIC	??$_Pocca@V?$allocator@PAVCLight@@@std@@@std@@YAXAAV?$allocator@PAVCLight@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CLight *> >
PUBLIC	??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ; std::_Uninitialized_move<CLight * *,std::allocator<CLight *> >
PUBLIC	??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
PUBLIC	??$_Destroy_range@PAPAK@std@@YAXPAPAKQAPAK@Z	; std::_Destroy_range<unsigned long * *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ; std::_Partition_by_median_guess_unchecked<CLight * *,LightComp>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
PUBLIC	??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
PUBLIC	??$_Refancy@PAPAVCLight@@$0A@@std@@YAPAPAVCLight@@PAPAV1@@Z ; std::_Refancy<CLight * *,0>
PUBLIC	??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
PUBLIC	??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z	; std::_Zero_range<unsigned long * *>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
PUBLIC	??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
PUBLIC	??$?0ABK$$Z$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>
PUBLIC	??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
PUBLIC	??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>
PUBLIC	??_ECLight@@W3AEPAXI@Z				; [thunk]:CLight::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W3AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W7AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_7CLightBase@@6B@				; CLightBase::`vftable'
PUBLIC	??_7CLight@@6BCGraphicBase@@@			; CLight::`vftable'
PUBLIC	??_7CLight@@6BCLightBase@@@			; CLight::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A ; CSingleton<CLightManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`vftable'
PUBLIC	??_7?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`vftable'
PUBLIC	??_7CLightManager@@6BCGraphicBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6BCLightBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CLightBase@@6B@				; CLightBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightBase@@@8				; CLightBase `RTTI Type Descriptor'
PUBLIC	??_R3CLightBase@@8				; CLightBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightBase@@8				; CLightBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLight@@6BCGraphicBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLight@@@8				; CLight `RTTI Type Descriptor'
PUBLIC	??_R3CLight@@8					; CLight::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLight@@8					; CLight::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLight@@8				; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CLight@@6BCLightBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6BCGraphicBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightManager@@@8			; CLightManager `RTTI Type Descriptor'
PUBLIC	??_R3CLightManager@@8				; CLightManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightManager@@8				; CLightManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightManager@@8			; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCLightManager@@@@@8	; CSingleton<CLightManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLightManager@@6BCLightBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCLight@@@@@8		; CDynamicPool<CLight> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8	; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECLightBase@@UAEPAXI@Z:PROC			; CLightBase::`vector deleting destructor'
EXTRN	??_ECLight@@UAEPAXI@Z:PROC			; CLight::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z:PROC ; CSingleton<CLightManager>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z:PROC	; CDynamicPool<CLight>::`vector deleting destructor'
EXTRN	??_ECLightManager@@UAEPAXI@Z:PROC		; CLightManager::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A DD 01H DUP (?) ; CSingleton<CLightManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCLight@@@@8 DD 00H			; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCLight@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCLight@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CLight> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCLight@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCLight@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCLight@@@@6B@ DD 00H		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCLightManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCLightManager@@@@6B@ DD 00H		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@
rdata$r	SEGMENT
??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD 00H ; CLightManager::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCLightBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCLightManager@@@@8 DD 00H		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCLightManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCLightManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CLightManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCLightManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightManager@@8 DD FLAT:??_R0?AVCLightManager@@@8 ; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightManager@@8
rdata$r	SEGMENT
??_R2CLightManager@@8 DD FLAT:??_R1A@?0A@EA@CLightManager@@8 ; CLightManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
	DD	FLAT:??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CLightManager@@8
rdata$r	SEGMENT
??_R3CLightManager@@8 DD 00H				; CLightManager::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightManager@@@8
data$r	SEGMENT
??_R0?AVCLightManager@@@8 DD FLAT:??_7type_info@@6B@	; CLightManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCGraphicBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLight@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCLightBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLight@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLight@@8 DD FLAT:??_R0?AVCLight@@@8	; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R2CLight@@8
rdata$r	SEGMENT
??_R2CLight@@8 DD FLAT:??_R1A@?0A@EA@CLight@@8		; CLight::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLight@@8
rdata$r	SEGMENT
??_R3CLight@@8 DD 00H					; CLight::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CLight@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLight@@@8
data$r	SEGMENT
??_R0?AVCLight@@@8 DD FLAT:??_7type_info@@6B@		; CLight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLight@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLight@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCGraphicBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightBase@@8
rdata$r	SEGMENT
??_R2CLightBase@@8 DD FLAT:??_R1A@?0A@EA@CLightBase@@8	; CLightBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLightBase@@8
rdata$r	SEGMENT
??_R3CLightBase@@8 DD 00H				; CLightBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightBase@@@8
data$r	SEGMENT
??_R0?AVCLightBase@@@8 DD FLAT:??_7type_info@@6B@	; CLightBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightBase@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLightBase@@6B@
rdata$r	SEGMENT
??_R4CLightBase@@6B@ DD 00H				; CLightBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightBase@@@8
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
CONST	SEGMENT
??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD FLAT:??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCLightBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCLightBase@@@ DD FLAT:??_R4CLightManager@@6BCLightBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCGraphicBase@@@ DD FLAT:??_R4CLightManager@@6BCGraphicBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCLight@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCLight@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCLight@@@@6B@ ; CDynamicPool<CLight>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCLightManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCLightManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCLightManager@@@@6B@ ; CSingleton<CLightManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCLightBase@@@
CONST	SEGMENT
??_7CLight@@6BCLightBase@@@ DD FLAT:??_R4CLight@@6BCLightBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLight@@6BCGraphicBase@@@ DD FLAT:??_R4CLight@@6BCGraphicBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightBase@@6B@
CONST	SEGMENT
??_7CLightBase@@6B@ DD FLAT:??_R4CLightBase@@6B@	; CLightBase::`vftable'
	DD	FLAT:??_ECLightBase@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z$2
__ehfuncinfo$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z$2
__ehfuncinfo$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$3
__ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLightManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$3
__ehfuncinfo$??0CLightManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CLightManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CLight@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W7AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W7AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W3AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W3AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLight@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLight@@W3AEPAXI@Z PROC				; [thunk]:CLight::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLight@@UAEPAXI@Z
??_ECLight@@W3AEPAXI@Z ENDP				; [thunk]:CLight::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 975  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	89 01		 mov	 DWORD PTR [ecx], eax
  0000c	8b c1		 mov	 eax, ecx
  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_backward_memmove<CLight * *,CLight * *>, COMDAT

; 4284 : _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4285 :     // implement copy_backward-like function as memmove
; 4286 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4287 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4288 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4289 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4290 :     return static_cast<_BidIt2>(_CSTD memmove(_Dest_ch - _Count, _First_ch, _Count));

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4291 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_backward_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0ABK$$Z$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -4						; size = 1
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABK$$Z$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z PROC ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>, COMDAT
; _this$ = ecx

; 981  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000b	8d 45 10	 lea	 eax, DWORD PTR __Val2$[ebp]
  0000e	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00011	c6 45 f8 00	 mov	 BYTE PTR $T1[ebp], 0
  00015	8b f1		 mov	 esi, ecx
  00017	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABK$$Z$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z
_TEXT	SEGMENT
tv1025 = -8						; size = 4
tv1018 = -8						; size = 4
tv1030 = -4						; size = 4
tv1029 = -4						; size = 4
__Tmp$1$ = -4						; size = 4
__Tmp$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv1024 = 16						; size = 4
$T1 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z PROC ; std::_Guess_median_unchecked<CLight * *,LightComp>, COMDAT

; 4019 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4020 :     // sort median element to middle
; 4021 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 4022 :     const _Diff _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	8b c7		 mov	 eax, edi
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2

; 4023 :     if (40 < _Count) { // Tukey's ninther

  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	0f 8e 50 01 00
	00		 jle	 $LN2@Guess_medi

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  0001e	40		 inc	 eax
  0001f	c1 f8 03	 sar	 eax, 3
  00022	53		 push	 ebx

; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00023	8d 1c c5 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*8]
  0002a	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00031	89 5d f8	 mov	 DWORD PTR tv1018[ebp], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  00039	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0003e	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00042	76 08		 jbe	 SHORT $LN15@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00044	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 108  :     _Right   = _STD move(_Tmp);

  00047	89 31		 mov	 DWORD PTR [ecx], esi
  00049	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
$LN15@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0004c	8b 04 0b	 mov	 eax, DWORD PTR [ebx+ecx]
  0004f	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00054	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00058	76 18		 jbe	 SHORT $LN27@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  0005a	89 34 0b	 mov	 DWORD PTR [ebx+ecx], esi

; 108  :     _Right   = _STD move(_Tmp);

  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00060	8b 31		 mov	 esi, DWORD PTR [ecx]
  00062	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00067	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0006b	76 05		 jbe	 SHORT $LN27@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  0006d	89 34 0a	 mov	 DWORD PTR [edx+ecx], esi

; 108  :     _Right   = _STD move(_Tmp);

  00070	89 01		 mov	 DWORD PTR [ecx], eax
$LN27@Guess_medi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00072	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00075	8b f0		 mov	 esi, eax
  00077	2b f2		 sub	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00079	8b 18		 mov	 ebx, DWORD PTR [eax]
  0007b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0007d	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  00082	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00086	76 08		 jbe	 SHORT $LN38@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00088	8b cf		 mov	 ecx, edi
  0008a	89 08		 mov	 DWORD PTR [eax], ecx

; 108  :     _Right   = _STD move(_Tmp);

  0008c	89 1e		 mov	 DWORD PTR [esi], ebx
  0008e	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN38@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00090	8b 3c 02	 mov	 edi, DWORD PTR [edx+eax]
  00093	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00098	89 7d fc	 mov	 DWORD PTR __Tmp$1$[ebp], edi
  0009b	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0009f	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000a2	76 1e		 jbe	 SHORT $LN50@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  000a4	89 1c 02	 mov	 DWORD PTR [edx+eax], ebx

; 108  :     _Right   = _STD move(_Tmp);

  000a7	8b 5d fc	 mov	 ebx, DWORD PTR __Tmp$1$[ebp]
  000aa	89 18		 mov	 DWORD PTR [eax], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000ac	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ae	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000b3	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000b7	76 09		 jbe	 SHORT $LN50@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  000b9	8b f9		 mov	 edi, ecx
  000bb	89 38		 mov	 DWORD PTR [eax], edi
  000bd	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]

; 108  :     _Right   = _STD move(_Tmp);

  000c0	89 1e		 mov	 DWORD PTR [esi], ebx
$LN50@Guess_medi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  000c2	8b df		 mov	 ebx, edi
  000c4	8b f7		 mov	 esi, edi
  000c6	2b 5d f8	 sub	 ebx, DWORD PTR tv1018[ebp]
  000c9	2b f2		 sub	 esi, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000cb	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000cf	89 4d 10	 mov	 DWORD PTR $T1[ebp], ecx
  000d2	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000d7	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000db	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000de	76 10		 jbe	 SHORT $LN61@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  000e0	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e2	89 06		 mov	 DWORD PTR [esi], eax

; 108  :     _Right   = _STD move(_Tmp);

  000e4	8b c1		 mov	 eax, ecx
  000e6	89 03		 mov	 DWORD PTR [ebx], eax
  000e8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ea	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  000ed	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
$LN61@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000f0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f2	89 4d fc	 mov	 DWORD PTR __Tmp$1$[ebp], ecx
  000f5	8b 4d 10	 mov	 ecx, DWORD PTR $T1[ebp]
  000f8	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR __Tmp$1$[ebp]
  00100	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00104	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00107	76 23		 jbe	 SHORT $LN73@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00109	8b 45 10	 mov	 eax, DWORD PTR $T1[ebp]
  0010c	89 07		 mov	 DWORD PTR [edi], eax

; 108  :     _Right   = _STD move(_Tmp);

  0010e	8b 7d fc	 mov	 edi, DWORD PTR __Tmp$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00113	8b 03		 mov	 eax, DWORD PTR [ebx]
  00115	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0011a	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0011e	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00121	76 09		 jbe	 SHORT $LN73@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00123	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00125	89 0e		 mov	 DWORD PTR [esi], ecx
  00127	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 108  :     _Right   = _STD move(_Tmp);

  0012a	89 3b		 mov	 DWORD PTR [ebx], edi
$LN73@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0012c	8b 1c 0a	 mov	 ebx, DWORD PTR [edx+ecx]
  0012f	8b 38		 mov	 edi, DWORD PTR [eax]
  00131	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00136	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0013a	76 07		 jbe	 SHORT $LN84@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  0013c	89 18		 mov	 DWORD PTR [eax], ebx

; 108  :     _Right   = _STD move(_Tmp);

  0013e	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi
  00141	8b 38		 mov	 edi, DWORD PTR [eax]
$LN84@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00143	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00145	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  0014a	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0014e	76 17		 jbe	 SHORT $LN120@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00150	89 3e		 mov	 DWORD PTR [esi], edi

; 108  :     _Right   = _STD move(_Tmp);

  00152	89 18		 mov	 DWORD PTR [eax], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00154	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  00157	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  0015c	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00160	76 05		 jbe	 SHORT $LN120@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00162	89 30		 mov	 DWORD PTR [eax], esi

; 108  :     _Right   = _STD move(_Tmp);

  00164	89 1c 0a	 mov	 DWORD PTR [edx+ecx], ebx
$LN120@Guess_medi:
  00167	5b		 pop	 ebx
$LN119@Guess_medi:
  00168	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4033 : }

  00169	5e		 pop	 esi
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN2@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0016e	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00171	8b 31		 mov	 esi, DWORD PTR [ecx]
  00173	8b 10		 mov	 edx, DWORD PTR [eax]
  00175	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  0017a	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0017e	76 06		 jbe	 SHORT $LN107@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00180	89 30		 mov	 DWORD PTR [eax], esi

; 108  :     _Right   = _STD move(_Tmp);

  00182	89 11		 mov	 DWORD PTR [ecx], edx
  00184	8b 10		 mov	 edx, DWORD PTR [eax]
$LN107@Guess_medi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00186	8b 37		 mov	 esi, DWORD PTR [edi]
  00188	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  0018d	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00191	76 d5		 jbe	 SHORT $LN119@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00193	89 17		 mov	 DWORD PTR [edi], edx

; 108  :     _Right   = _STD move(_Tmp);

  00195	89 30		 mov	 DWORD PTR [eax], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00197	8b 11		 mov	 edx, DWORD PTR [ecx]
  00199	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  0019e	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  001a2	76 c4		 jbe	 SHORT $LN119@Guess_medi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  001a4	89 10		 mov	 DWORD PTR [eax], edx
  001a6	5f		 pop	 edi

; 108  :     _Right   = _STD move(_Tmp);

  001a7	89 31		 mov	 DWORD PTR [ecx], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4033 : }

  001a9	5e		 pop	 esi
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ENDP ; std::_Guess_median_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z PROC ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;
; 3359 :     _Diff _Idx       = _Hole;
; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00004	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000c	8b ce		 mov	 ecx, esi
  0000e	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00011	89 4d 0c	 mov	 DWORD PTR __Top$1$[ebp], ecx
  00014	d1 f8		 sar	 eax, 1
  00016	8b de		 mov	 ebx, esi
  00018	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  0001b	57		 push	 edi

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0001f	3b f0		 cmp	 esi, eax
  00021	7d 31		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 3365 :         _Idx = 2 * _Idx + 2;

  00023	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 3367 :             --_Idx;
; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00026	33 db		 xor	 ebx, ebx
  00028	8b 44 97 04	 mov	 eax, DWORD PTR [edi+edx*4+4]
  0002c	8b 4c 97 08	 mov	 ecx, DWORD PTR [edi+edx*4+8]
  00030	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00035	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00039	0f 96 c3	 setbe	 bl
  0003c	43		 inc	 ebx
  0003d	03 da		 add	 ebx, edx
  0003f	8b 04 9f	 mov	 eax, DWORD PTR [edi+ebx*4]
  00042	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 3370 :         _Hole             = _Idx;

  00045	8b f3		 mov	 esi, ebx
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  0004a	3b d8		 cmp	 ebx, eax
  0004c	7c d5		 jl	 SHORT $LL2@Pop_heap_h
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Top$1$[ebp]
  00051	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 3371 :     }
; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00054	3b d8		 cmp	 ebx, eax
  00056	75 0f		 jne	 SHORT $LN5@Pop_heap_h
  00058	f6 c2 01	 test	 dl, 1
  0005b	75 0a		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0005d	8b 44 97 fc	 mov	 eax, DWORD PTR [edi+edx*4-4]
  00061	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 3375 :         _Hole             = _Bottom - 1;

  00064	8d 72 ff	 lea	 esi, DWORD PTR [edx-1]
$LN5@Pop_heap_h:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00067	3b ce		 cmp	 ecx, esi
  00069	7d 30		 jge	 SHORT $LN24@Pop_heap_h
  0006b	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0006e	66 90		 npad	 2
$LL12@Pop_heap_h:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00070	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00072	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00075	d1 f9		 sar	 ecx, 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00077	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0007c	8b 14 8f	 mov	 edx, DWORD PTR [edi+ecx*4]
  0007f	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00083	76 1b		 jbe	 SHORT $LN26@Pop_heap_h

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00085	89 14 b7	 mov	 DWORD PTR [edi+esi*4], edx

; 3325 :         _Hole             = _Idx;

  00088	8b f1		 mov	 esi, ecx
  0008a	39 4d 0c	 cmp	 DWORD PTR __Top$1$[ebp], ecx
  0008d	7c e1		 jl	 SHORT $LL12@Pop_heap_h

; 3326 :     }
; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);
; 3379 : }

  00091	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN24@Pop_heap_h:

; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  0009b	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN26@Pop_heap_h:

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);
; 3379 : }

  000a0	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ENDP ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z PROC		; std::_Zero_range<unsigned long * *>, COMDAT

; 1814 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1815 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1816 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1817 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1818 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1819 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ENDP		; std::_Zero_range<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z PROC	; std::_Copy_memmove<unsigned long * *,unsigned long * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ENDP	; std::_Copy_memmove<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAPAVCLight@@$0A@@std@@YAPAPAVCLight@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAPAVCLight@@$0A@@std@@YAPAPAVCLight@@PAPAV1@@Z PROC ; std::_Refancy<CLight * *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAPAVCLight@@$0A@@std@@YAPAPAVCLight@@PAPAV1@@Z ENDP ; std::_Refancy<CLight * *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CLight * *,CLight * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__Gfirst$1$ = -12					; size = 4
tv666 = -12						; size = 4
__Glast$1$ = -8						; size = 4
tv663 = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z PROC ; std::_Partition_by_median_guess_unchecked<CLight * *,LightComp>, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000f	2b c3		 sub	 eax, ebx
  00011	56		 push	 esi
  00012	c1 f8 03	 sar	 eax, 3
  00015	57		 push	 edi

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00016	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00019	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]
  0001c	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	53		 push	 ebx
  00022	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 4040 :     _RanIt _Pfirst = _Mid;
; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0002a	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0002d	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00030	3b de		 cmp	 ebx, esi
  00032	73 2c		 jae	 SHORT $LN107@Partition_
  00034	8b 16		 mov	 edx, DWORD PTR [esi]
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@Partition_:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00040	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00043	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  00048	f3 0f 10 49 78	 movss	 xmm1, DWORD PTR [ecx+120]
  0004d	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00050	77 0e		 ja	 SHORT $LN107@Partition_
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00052	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00055	77 09		 ja	 SHORT $LN107@Partition_

; 4045 :         --_Pfirst;

  00057	83 c6 fc	 add	 esi, -4			; fffffffcH
  0005a	8b d1		 mov	 edx, ecx
  0005c	3b de		 cmp	 ebx, esi
  0005e	72 e0		 jb	 SHORT $LL2@Partition_
$LN107@Partition_:

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00060	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00063	3b f9		 cmp	 edi, ecx
  00065	73 24		 jae	 SHORT $LN5@Partition_
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  0006e	66 90		 npad	 2
$LL4@Partition_:
  00070	8b 07		 mov	 eax, DWORD PTR [edi]
  00072	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00077	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0007a	77 0c		 ja	 SHORT $LN108@Partition_
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0007c	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0007f	77 07		 ja	 SHORT $LN108@Partition_

; 4049 :         ++_Plast;

  00081	83 c7 04	 add	 edi, 4
  00084	3b f9		 cmp	 edi, ecx
  00086	72 e8		 jb	 SHORT $LL4@Partition_
$LN108@Partition_:
  00088	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN5@Partition_:

; 4050 :     }
; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  0008b	8b d7		 mov	 edx, edi

; 4053 :     _RanIt _Glast  = _Pfirst;

  0008d	8b de		 mov	 ebx, esi
$LN113@Partition_:

; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  0008f	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN112@Partition_:
  00092	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LL6@Partition_:
  00095	3b d1		 cmp	 edx, ecx
  00097	73 3f		 jae	 SHORT $LN86@Partition_
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@Partition_:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000a2	8b 06		 mov	 eax, DWORD PTR [esi]
  000a4	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000a9	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000ae	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000b1	77 14		 ja	 SHORT $LN9@Partition_
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000b3	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000b6	77 17		 ja	 SHORT $LN109@Partition_

; 4059 :                 break;
; 4060 :             } else if (_Plast != _Gfirst) {

  000b8	3b fa		 cmp	 edi, edx
  000ba	74 08		 je	 SHORT $LN19@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  000bc	8b 07		 mov	 eax, DWORD PTR [edi]

; 107  :     _Left    = _STD move(_Right);

  000be	8b d9		 mov	 ebx, ecx
  000c0	89 1f		 mov	 DWORD PTR [edi], ebx

; 108  :     _Right   = _STD move(_Tmp);

  000c2	89 02		 mov	 DWORD PTR [edx], eax
$LN19@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000c4	83 c7 04	 add	 edi, 4
$LN9@Partition_:
  000c7	83 c2 04	 add	 edx, 4
  000ca	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  000cd	72 d1		 jb	 SHORT $LL11@Partition_
$LN109@Partition_:
  000cf	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000d2	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  000d5	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LN86@Partition_:

; 4068 :         for (; _First < _Glast; --_Glast) {

  000d8	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000db	3b d8		 cmp	 ebx, eax
  000dd	76 44		 jbe	 SHORT $LN111@Partition_
  000df	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  000e2	8b f8		 mov	 edi, eax
$LL14@Partition_:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e6	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000eb	8b 06		 mov	 eax, DWORD PTR [esi]
  000ed	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000f2	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  000f5	77 14		 ja	 SHORT $LN12@Partition_
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000f7	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  000fa	77 19		 ja	 SHORT $LN110@Partition_

; 4071 :                 break;
; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  000fc	83 ee 04	 sub	 esi, 4
  000ff	3b f1		 cmp	 esi, ecx
  00101	74 08		 je	 SHORT $LN12@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00103	8b 06		 mov	 eax, DWORD PTR [esi]

; 107  :     _Left    = _STD move(_Right);

  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	89 16		 mov	 DWORD PTR [esi], edx

; 108  :     _Right   = _STD move(_Tmp);

  00109	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4068 :         for (; _First < _Glast; --_Glast) {

  0010b	83 eb 04	 sub	 ebx, 4
  0010e	83 e9 04	 sub	 ecx, 4
  00111	3b fb		 cmp	 edi, ebx
  00113	72 cf		 jb	 SHORT $LL14@Partition_
$LN110@Partition_:
  00115	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 4074 :             }
; 4075 :         }
; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  00118	3b d8		 cmp	 ebx, eax
  0011a	8b 55 f4	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  0011d	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  00120	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN111@Partition_:
  00123	75 2d		 jne	 SHORT $LN27@Partition_
  00125	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  00128	74 7f		 je	 SHORT $LN88@Partition_

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 4082 :             if (_Plast != _Gfirst) {

  0012a	3b fa		 cmp	 edi, edx
  0012c	74 08		 je	 SHORT $LN63@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  0012e	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 107  :     _Left    = _STD move(_Right);

  00130	8b 07		 mov	 eax, DWORD PTR [edi]
  00132	89 06		 mov	 DWORD PTR [esi], eax

; 108  :     _Right   = _STD move(_Tmp);

  00134	89 0f		 mov	 DWORD PTR [edi], ecx
$LN63@Partition_:

; 106  :     _Ty _Tmp = _STD move(_Left);

  00136	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4086 :             ++_Plast;

  00138	83 c7 04	 add	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  0013b	8b 02		 mov	 eax, DWORD PTR [edx]
  0013d	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4088 :             ++_Pfirst;

  0013f	83 c6 04	 add	 esi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 108  :     _Right   = _STD move(_Tmp);

  00142	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4089 :             ++_Gfirst;

  00144	83 c2 04	 add	 edx, 4
  00147	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0014a	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  0014d	e9 40 ff ff ff	 jmp	 $LN112@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00152	83 c3 fc	 add	 ebx, -4			; fffffffcH
  00155	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  00158	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  0015b	75 39		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  0015d	83 ee 04	 sub	 esi, 4
  00160	3b de		 cmp	 ebx, esi
  00162	74 1c		 je	 SHORT $LN98@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00164	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  00166	83 ef 04	 sub	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00169	8b 06		 mov	 eax, DWORD PTR [esi]
  0016b	89 03		 mov	 DWORD PTR [ebx], eax

; 108  :     _Right   = _STD move(_Tmp);

  0016d	89 0e		 mov	 DWORD PTR [esi], ecx

; 107  :     _Left    = _STD move(_Right);

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	89 06		 mov	 DWORD PTR [esi], eax

; 108  :     _Right   = _STD move(_Tmp);

  00173	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4096 :         } else {

  00175	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00178	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  0017b	e9 15 ff ff ff	 jmp	 $LL6@Partition_
$LN98@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 108  :     _Right   = _STD move(_Tmp);

  00180	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  00182	83 ef 04	 sub	 edi, 4
  00185	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00188	8b 07		 mov	 eax, DWORD PTR [edi]
  0018a	89 06		 mov	 DWORD PTR [esi], eax

; 108  :     _Right   = _STD move(_Tmp);

  0018c	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4096 :         } else {

  0018e	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00191	e9 ff fe ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00196	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 107  :     _Left    = _STD move(_Right);

  00198	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019a	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4098 :             ++_Gfirst;

  0019c	83 c2 04	 add	 edx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 108  :     _Right   = _STD move(_Tmp);

  0019f	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4100 :     }

  001a1	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  001a4	e9 e6 fe ff ff	 jmp	 $LN113@Partition_
$LN88@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001a9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ac	89 78 04	 mov	 DWORD PTR [eax+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001af	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001b0	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx

; 4101 : }

  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAK@std@@YAXPAPAKQAPAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Destroy_range@PAPAK@std@@YAXPAPAKQAPAK@Z PROC	; std::_Destroy_range<unsigned long * *>, COMDAT

; 969  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 970  :     if _CONSTEXPR_IF (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 971  :         for (; _First != _Last; ++_First) {
; 972  :             _Destroy_in_place(*_First);
; 973  :         }
; 974  :     }
; 975  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@PAPAK@std@@YAXPAPAKQAPAK@Z ENDP	; std::_Destroy_range<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>, COMDAT

; 1874 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1879 :     } else {
; 1880 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1881 :         for (; 0 < _Count; --_Count) {
; 1882 :             _Backout._Emplace_back();
; 1883 :         }
; 1884 : 
; 1885 :         return _Backout._Release();
; 1886 :     }
; 1887 : }

  00012	5d		 pop	 ebp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ; std::_Zero_range<unsigned long * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z PROC ; std::uninitialized_copy<unsigned long * *,unsigned long * *>, COMDAT

; 1591 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1599 :     } else {
; 1600 :         _Uninitialized_backout<decltype(_UDest)> _Backout{_UDest};
; 1601 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1602 :             _Backout._Emplace_back(*_UFirst);
; 1603 :         }
; 1604 : 
; 1605 :         _UDest = _Backout._Release();
; 1606 :     }
; 1607 : 
; 1608 :     _Seek_wrapped(_Dest, _UDest);
; 1609 :     return _Dest;
; 1610 : }

  00003	5d		 pop	 ebp

; 1592 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1593 :     _Adl_verify_range(_First, _Last);
; 1594 :     auto _UFirst      = _Get_unwrapped(_First);
; 1595 :     const auto _ULast = _Get_unwrapped(_Last);
; 1596 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1597 :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 1598 :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ENDP ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z PROC ; std::_Uninitialized_move<CLight * *,std::allocator<CLight *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ENDP ; std::_Uninitialized_move<CLight * *,std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1084 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Obj$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))
; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 08		 push	 8
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8

; 999  :     // deallocate a plain pointer using an allocator
; 1000 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1001 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1002 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);
; 1003 :     } else {
; 1004 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1005 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1006 :     }
; 1007 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1708 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1716 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z
_TEXT	SEGMENT
__Mid$1 = -20						; size = 8
__Max_sequence_non_leaf$1$ = -16			; size = 4
tv941 = -12						; size = 4
__Hole$1$ = -8						; size = 4
__Bottom$1$ = -4					; size = 4
__Val$1$ = 8						; size = 4
__Val$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Val$2 = 12						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z PROC ; std::_Sort_unchecked<CLight * *,LightComp>, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 fc	 and	 eax, -4			; fffffffcH
  00015	57		 push	 edi
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	7e 71		 jle	 SHORT $LN67@Sort_unche
  0001d	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00020	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 4109 :             return;
; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00023	85 ff		 test	 edi, edi
  00025	0f 8e aa 00 00
	00		 jle	 $LN68@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 4115 :             return;
; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002b	51		 push	 ecx
  0002c	53		 push	 ebx
  0002d	8d 45 ec	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ; std::_Partition_by_median_guess_unchecked<CLight * *,LightComp>

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00037	8b 55 f0	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 f8 02	 sar	 eax, 2
  0003f	8b cb		 mov	 ecx, ebx
  00041	d1 ff		 sar	 edi, 1
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f8		 add	 edi, eax
  00048	2b ca		 sub	 ecx, edx
  0004a	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0004d	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00050	2b c6		 sub	 eax, esi
  00052	83 e0 fc	 and	 eax, -4			; fffffffcH
  00055	3b c1		 cmp	 eax, ecx
  00057	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	7d 0f		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00061	50		 push	 eax
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 4125 :             _First = _Mid.second;

  00068	8b 75 f0	 mov	 esi, DWORD PTR __Mid$1[ebp+4]

; 4126 :         } else { // loop on first half

  0006b	eb 0d		 jmp	 SHORT $LN92@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  0006d	53		 push	 ebx
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 4128 :             _Last = _Mid.first;

  00074	8b 5d ec	 mov	 ebx, DWORD PTR __Mid$1[ebp]
  00077	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
$LN92@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  0007a	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0007d	8b c3		 mov	 eax, ebx
  0007f	2b c6		 sub	 eax, esi
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	83 e0 fc	 and	 eax, -4			; fffffffcH
  00087	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0008c	7f 95		 jg	 SHORT $LL2@Sort_unche
$LN67@Sort_unche:

; 3981 :     if (_First != _Last) {

  0008e	3b f3		 cmp	 esi, ebx
  00090	0f 84 82 01 00
	00		 je	 $LN51@Sort_unche

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  00096	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00099	3b fb		 cmp	 edi, ebx
  0009b	0f 84 77 01 00
	00		 je	 $LN51@Sort_unche
$LL11@Sort_unche:

; 3983 :             _BidIt _Next1              = _Next;
; 3984 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  000a1	8b 07		 mov	 eax, DWORD PTR [edi]
  000a3	8b d7		 mov	 edx, edi
  000a5	89 45 08	 mov	 DWORD PTR __Val$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a8	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000b4	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000b7	0f 86 1e 01 00
	00		 jbe	 $LN18@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000bd	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000c0	50		 push	 eax
  000c1	57		 push	 edi
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3988 :                 *_First = _STD move(_Val);

  000c8	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3988 :                 *_First = _STD move(_Val);

  000ce	89 06		 mov	 DWORD PTR [esi], eax

; 3989 :             } else { // look for insertion point after first

  000d0	e9 38 01 00 00	 jmp	 $LN19@Sort_unche
$LN68@Sort_unche:

; 3419 :     _Diff _Bottom = _Last - _First;

  000d5	2b de		 sub	 ebx, esi
  000d7	8b c3		 mov	 eax, ebx
  000d9	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
  000dc	c1 f8 02	 sar	 eax, 2

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  000df	8b d0		 mov	 edx, eax
  000e1	89 45 fc	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  000e4	d1 fa		 sar	 edx, 1
  000e6	85 d2		 test	 edx, edx
  000e8	0f 8e a8 00 00
	00		 jle	 $LN31@Sort_unche
  000ee	48		 dec	 eax
  000ef	8b d8		 mov	 ebx, eax
  000f1	89 45 f4	 mov	 DWORD PTR tv941[ebp], eax
  000f4	d1 fb		 sar	 ebx, 1
  000f6	89 5d f0	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], ebx
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL30@Sort_unche:

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;
; 3423 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00100	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
  00104	4a		 dec	 edx
  00105	89 55 f8	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00108	8b fa		 mov	 edi, edx
  0010a	89 45 08	 mov	 DWORD PTR __Val$1$[ebp], eax

; 3359 :     _Diff _Idx       = _Hole;

  0010d	8b ca		 mov	 ecx, edx

; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0010f	3b d3		 cmp	 edx, ebx
  00111	7d 2e		 jge	 SHORT $LN36@Sort_unche
$LL35@Sort_unche:

; 3365 :         _Idx = 2 * _Idx + 2;

  00113	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 3367 :             --_Idx;
; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00116	8b 44 96 04	 mov	 eax, DWORD PTR [esi+edx*4+4]
  0011a	8b 4c 96 08	 mov	 ecx, DWORD PTR [esi+edx*4+8]
  0011e	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00123	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00127	b9 00 00 00 00	 mov	 ecx, 0
  0012c	0f 96 c1	 setbe	 cl
  0012f	41		 inc	 ecx
  00130	03 ca		 add	 ecx, edx
  00132	8b 04 8e	 mov	 eax, DWORD PTR [esi+ecx*4]
  00135	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 3370 :         _Hole             = _Idx;

  00138	8b f9		 mov	 edi, ecx
  0013a	3b cb		 cmp	 ecx, ebx
  0013c	7c d5		 jl	 SHORT $LL35@Sort_unche
  0013e	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN36@Sort_unche:

; 3371 :     }
; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00141	3b fb		 cmp	 edi, ebx
  00143	75 11		 jne	 SHORT $LN38@Sort_unche
  00145	8b 45 fc	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00148	a8 01		 test	 al, 1
  0014a	75 0a		 jne	 SHORT $LN38@Sort_unche

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0014c	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00150	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 3375 :         _Hole             = _Bottom - 1;

  00153	8b 7d f4	 mov	 edi, DWORD PTR tv941[ebp]
$LN38@Sort_unche:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00156	3b d7		 cmp	 edx, edi
  00158	7d 25		 jge	 SHORT $LN44@Sort_unche
  0015a	8b 5d 08	 mov	 ebx, DWORD PTR __Val$1$[ebp]
  0015d	0f 1f 00	 npad	 3
$LL45@Sort_unche:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00160	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00165	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00168	d1 f8		 sar	 eax, 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0016a	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
  0016d	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00171	76 09		 jbe	 SHORT $LN91@Sort_unche

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00173	89 0c be	 mov	 DWORD PTR [esi+edi*4], ecx

; 3325 :         _Hole             = _Idx;

  00176	8b f8		 mov	 edi, eax
  00178	3b d0		 cmp	 edx, eax
  0017a	7c e4		 jl	 SHORT $LL45@Sort_unche
$LN91@Sort_unche:
  0017c	8b 5d f0	 mov	 ebx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN44@Sort_unche:

; 3326 :     }
; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  0017f	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  00182	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  00185	85 d2		 test	 edx, edx
  00187	0f 8f 73 ff ff
	ff		 jg	 $LL30@Sort_unche
  0018d	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00190	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00193	8b 45 fc	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN31@Sort_unche:

; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  00196	83 f8 02	 cmp	 eax, 2
  00199	7c 7d		 jl	 SHORT $LN51@Sort_unche
  0019b	0f 1f 44 00 00	 npad	 5
$LL52@Sort_unche:

; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001a0	8b 44 1e fc	 mov	 eax, DWORD PTR [esi+ebx-4]
  001a4	89 45 0c	 mov	 DWORD PTR __Val$2[ebp], eax

; 3386 :     *_Dest      = _STD move(*_First);

  001a7	8b 06		 mov	 eax, DWORD PTR [esi]
  001a9	89 44 1e fc	 mov	 DWORD PTR [esi+ebx-4], eax

; 3387 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  001ad	8d 45 0c	 lea	 eax, DWORD PTR __Val$2[ebp]
  001b0	51		 push	 ecx
  001b1	50		 push	 eax
  001b2	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  001b5	c1 f8 02	 sar	 eax, 2
  001b8	50		 push	 eax
  001b9	6a 00		 push	 0
  001bb	56		 push	 esi
  001bc	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>

; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  001c1	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  001c4	83 eb 04	 sub	 ebx, 4
  001c7	8b c3		 mov	 eax, ebx

; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  001c9	83 c4 14	 add	 esp, 20			; 00000014H

; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  001cc	83 e0 fc	 and	 eax, -4			; fffffffcH
  001cf	83 f8 08	 cmp	 eax, 8
  001d2	7d cc		 jge	 SHORT $LL52@Sort_unche

; 4129 :         }
; 4130 :     }
; 4131 : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
$LN18@Sort_unche:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  001db	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  001de	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  001e1	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  001e6	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  001e9	76 1d		 jbe	 SHORT $LN89@Sort_unche
  001eb	8b 5d 08	 mov	 ebx, DWORD PTR __Val$1$[ebp]
  001ee	66 90		 npad	 2
$LL16@Sort_unche:

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down

  001f0	89 0a		 mov	 DWORD PTR [edx], ecx
  001f2	8b d0		 mov	 edx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  001f4	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  001f7	83 e8 04	 sub	 eax, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  001fa	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  001ff	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  00203	77 eb		 ja	 SHORT $LL16@Sort_unche
  00205	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
$LN89@Sort_unche:

; 3992 :                 }
; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole

  00208	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  0020b	89 02		 mov	 DWORD PTR [edx], eax
$LN19@Sort_unche:

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  0020d	83 c7 04	 add	 edi, 4
  00210	3b fb		 cmp	 edi, ebx
  00212	0f 85 89 fe ff
	ff		 jne	 $LL11@Sort_unche
$LN51@Sort_unche:
  00218	5f		 pop	 edi

; 4129 :         }
; 4130 :     }
; 4131 : }

  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ENDP ; std::_Sort_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@PAVCLight@@@std@@@std@@YAXAAV?$allocator@PAVCLight@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@PAVCLight@@@std@@@std@@YAXAAV?$allocator@PAVCLight@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<CLight *> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@PAVCLight@@@std@@@std@@YAXAAV?$allocator@PAVCLight@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAK@std@@YAXAAPAK@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAK@std@@YAXAAPAK@Z PROC		; std::_Destroy_in_place<unsigned long *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAK@std@@YAXAAPAK@Z ENDP		; std::_Destroy_in_place<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCLight@@@std@@@std@@YAXPAPAVCLight@@QAPAV1@AAV?$allocator@PAVCLight@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCLight@@@std@@@std@@YAXPAPAVCLight@@QAPAV1@AAV?$allocator@PAVCLight@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CLight *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCLight@@@std@@@std@@YAXPAPAVCLight@@QAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1027 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1028 :     using _Ty = typename _Alloc::value_type;
; 1029 :     _Ptr->~_Ty();
; 1030 :     _Deallocate_plain(_Al, _Ptr);

  00000	e9 00 00 00 00	 jmp	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??$_Emplace_back_internal@ABK@?$deque@KV?$allocator@K@std@@@std@@AAEXABK@Z
_TEXT	SEGMENT
tv641 = -8						; size = 4
__Newmap$1$ = -4					; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back_internal@ABK@?$deque@KV?$allocator@K@std@@@std@@AAEXABK@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Emplace_back_internal<unsigned long const &>, COMDAT
; _this$ = ecx

; 1113 :     void _Emplace_back_internal(_Tys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1114 :         _PUSH_BACK_BEGIN;

  0000b	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0000e	8b f1		 mov	 esi, ecx
  00010	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00013	8b d3		 mov	 edx, ebx
  00015	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00018	a8 03		 test	 al, 3
  0001a	0f 85 fb 00 00
	00		 jne	 $LN13@Emplace_ba
  00020	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00023	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00026	c1 e8 02	 shr	 eax, 2
  00029	3b d0		 cmp	 edx, eax
  0002b	0f 87 e8 00 00
	00		 ja	 $LN42@Emplace_ba

; 1429 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00031	85 d2		 test	 edx, edx
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	0f 45 c2	 cmovne	 eax, edx
  0003b	0f 1f 44 00 00	 npad	 5
$LL6@Emplace_ba:

; 1430 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

  00040	8b f0		 mov	 esi, eax
  00042	2b f2		 sub	 esi, edx
  00044	83 fe 01	 cmp	 esi, 1
  00047	72 05		 jb	 SHORT $LN8@Emplace_ba
  00049	83 f8 08	 cmp	 eax, 8
  0004c	73 13		 jae	 SHORT $LN7@Emplace_ba
$LN8@Emplace_ba:

; 1431 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1432 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

  0004e	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00053	2b c8		 sub	 ecx, eax
  00055	3b c8		 cmp	 ecx, eax
  00057	0f 82 19 01 00
	00		 jb	 $LN37@Emplace_ba

; 1434 :             }
; 1435 : 
; 1436 :             _Newsize *= 2;

  0005d	03 c0		 add	 eax, eax

; 1437 :         }

  0005f	eb df		 jmp	 SHORT $LL6@Emplace_ba
$LN7@Emplace_ba:

; 1438 :         _Count = _Newsize - _Mapsize();
; 1439 : 
; 1440 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

  00061	c1 eb 02	 shr	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00064	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00069	0f 87 02 01 00
	00		 ja	 $LN45@Emplace_ba

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0006f	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00078	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  00082	89 4d f8	 mov	 DWORD PTR tv641[ebp], ecx
  00085	03 c8		 add	 ecx, eax
  00087	51		 push	 ecx
  00088	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008b	89 45 fc	 mov	 DWORD PTR __Newmap$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0008e	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
  00091	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 1445 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a1	50		 push	 eax
  000a2	3b de		 cmp	 ebx, esi
  000a4	77 1d		 ja	 SHORT $LN10@Emplace_ba

; 1446 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a6	8d 04 99	 lea	 eax, DWORD PTR [ecx+ebx*4]
  000a9	50		 push	 eax
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1447 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b0	8b ce		 mov	 ecx, esi
  000b2	2b cb		 sub	 ecx, ebx
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>

; 1448 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  000bb	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  000be	83 c4 14	 add	 esp, 20			; 00000014H

; 1449 :         } else { // increment not greater than offset of initial block

  000c1	eb 24		 jmp	 SHORT $LN11@Emplace_ba
$LN10@Emplace_ba:

; 1450 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000c3	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1451 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000cd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d0	ff 75 fc	 push	 DWORD PTR __Newmap$1$[ebp]
  000d3	8b 45 f8	 mov	 eax, DWORD PTR tv641[ebp]
  000d6	03 c1		 add	 eax, ecx
  000d8	50		 push	 eax
  000d9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
  000e2	83 c4 18	 add	 esp, 24			; 00000018H

; 1452 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e5	8b de		 mov	 ebx, esi
$LN11@Emplace_ba:

; 1453 :         }
; 1454 : 
; 1455 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());
; 1456 :         if (_Map() != _Mapptr()) {

  000e7	53		 push	 ebx
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
  000ee	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f1	83 c4 08	 add	 esp, 8
  000f4	85 c9		 test	 ecx, ecx
  000f6	74 10		 je	 SHORT $LN12@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000fb	c1 e0 02	 shl	 eax, 2
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00105	83 c4 08	 add	 esp, 8
$LN12@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1460 :         _Map() = _Newmap; // point at new

  00108	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  0010b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1461 :         _Mapsize() += _Count;

  0010e	01 77 08	 add	 DWORD PTR [edi+8], esi
  00111	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00114	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00117	eb 02		 jmp	 SHORT $LN13@Emplace_ba
$LN42@Emplace_ba:

; 1114 :         _PUSH_BACK_BEGIN;

  00119	8b d3		 mov	 edx, ebx
$LN13@Emplace_ba:
  0011b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0011e	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00125	49		 dec	 ecx

; 1114 :         _PUSH_BACK_BEGIN;

  00126	23 c2		 and	 eax, edx
  00128	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0012b	03 f0		 add	 esi, eax

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0012d	8b c6		 mov	 eax, esi
  0012f	c1 e8 02	 shr	 eax, 2
  00132	23 c8		 and	 ecx, eax

; 1114 :         _PUSH_BACK_BEGIN;

  00134	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  0013b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0013e	83 3c 0b 00	 cmp	 DWORD PTR [ebx+ecx], 0
  00142	75 13		 jne	 SHORT $LN3@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00144	6a 10		 push	 16			; 00000010H
  00146	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0014e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  00151	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  00154	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
$LN3@Emplace_ba:

; 1115 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

  00157	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  0015a	83 e6 03	 and	 esi, 3
  0015d	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00160	8b 00		 mov	 eax, DWORD PTR [eax]
  00162	89 04 b1	 mov	 DWORD PTR [ecx+esi*4], eax

; 1116 :         _PUSH_BACK_END;

  00165	ff 47 10	 inc	 DWORD PTR [edi+16]
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx

; 1117 :     }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 04 00	 ret	 4
$LN45@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00171	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1433 :                 _Xlen(); // result too long

  00176	8b cf		 mov	 ecx, edi
  00178	e8 00 00 00 00	 call	 ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN43@Emplace_ba:
  0017d	cc		 int	 3
??$_Emplace_back_internal@ABK@?$deque@KV?$allocator@K@std@@@std@@AAEXABK@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Emplace_back_internal<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ; std::_Uninitialized_move<CLight * *,std::allocator<CLight *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@YAPAPAVCLight@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCLight@@@0@@Z ; std::_Uninitialized_move<CLight * *,std::allocator<CLight *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 64   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 64   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightManager@@UAEPAXI@Z PROC			; CLightManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLightManager@@UAE@XZ ; CLightManager::~CLightManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLightManager@@UAEPAXI@Z ENDP			; CLightManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z PROC		; CDynamicPool<CLight>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z ENDP		; CDynamicPool<CLight>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z PROC	; CDynamicPool<CLight>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ENDP	; CDynamicPool<CLight>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCLight@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCLight@@@@UAE@XZ PROC		; CDynamicPool<CLight>::~CDynamicPool<CLight>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCLight@@@@UAE@XZ ENDP		; CDynamicPool<CLight>::~CDynamicPool<CLight>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?ReleaseLightID@CLightManager@@IAEXK@Z
_TEXT	SEGMENT
_LightID$ = 8						; size = 4
?ReleaseLightID@CLightManager@@IAEXK@Z PROC		; CLightManager::ReleaseLightID, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  00003	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 154  : 	m_NonUsingLightIDDeque.push_back(LightID);

  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABK@?$deque@KV?$allocator@K@std@@@std@@AAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Emplace_back_internal<unsigned long const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 155  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?ReleaseLightID@CLightManager@@IAEXK@Z ENDP		; CLightManager::ReleaseLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?NewLightID@CLightManager@@IAEKXZ
_TEXT	SEGMENT
?NewLightID@CLightManager@@IAEKXZ PROC			; CLightManager::NewLightID, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1009 :         return _Mysize() == 0;

  00009	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 142  : 	if (!m_NonUsingLightIDDeque.empty())

  0000d	74 36		 je	 SHORT $LN2@NewLightID
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 921  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0000f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00012	56		 push	 esi
  00013	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00016	03 c6		 add	 eax, esi

; 97   :         _Myoff -= _Off;

  00018	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0001b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001e	48		 dec	 eax
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 02	 shr	 ecx, 2

; 57   :         return _Mycont->_Map[_Block][_Off];

  00024	83 e2 03	 and	 edx, 3

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00027	23 c8		 and	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 144  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1143 :         if (--_Mysize() == 0) {

  0002f	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00032	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 144  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00033	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1143 :         if (--_Mysize() == 0) {

  00036	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0e		 jne	 SHORT $LN1@NewLightID

; 1144 :             _Myoff() = 0;

  0003d	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  00040	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 150  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN2@NewLightID:

; 145  : 		m_NonUsingLightIDDeque.pop_back();
; 146  : 		return (id);
; 147  : 	}
; 148  : 
; 149  : 	return m_dwSkipIndex + m_LightMap.size();

  00045	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00048	03 47 24	 add	 eax, DWORD PTR [edi+36]
$LN1@NewLightID:
  0004b	5f		 pop	 edi

; 150  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?NewLightID@CLightManager@@IAEKXZ ENDP			; CLightManager::NewLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1186 = -8						; size = 4
tv1182 = -8						; size = 4
tv1149 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 504  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	75 18		 jne	 SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00027	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002b	74 04		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002d	8b f8		 mov	 edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0002f	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	3b ca		 cmp	 ecx, edx

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00039	0f 85 8b 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00046	75 03		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00050	75 05		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00052	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00055	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00057	39 16		 cmp	 DWORD PTR [esi], edx
  00059	75 04		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005b	89 3e		 mov	 DWORD PTR [esi], edi

; 529  :             } else {

  0005d	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  00062	8b 03		 mov	 eax, DWORD PTR [ebx]
  00064	39 10		 cmp	 DWORD PTR [eax], edx
  00066	75 2b		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00068	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006c	74 04		 je	 SHORT $LN42@Extract
  0006e	8b d6		 mov	 edx, esi
  00070	eb 1c		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00072	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00074	8b d7		 mov	 edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00076	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007a	75 12		 jne	 SHORT $LN48@Extract
  0007c	0f 1f 40 00	 npad	 4
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008e	89 10		 mov	 DWORD PTR [eax], edx
  00090	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00098	75 2b		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@Extract
  000a0	8b ce		 mov	 ecx, esi
  000a2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000a8	eb 7c		 jmp	 SHORT $LN55@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000ad	8b cf		 mov	 ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

  000b5	8b c8		 mov	 ecx, eax
  000b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000c2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000c5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000c8	eb 5c		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  000d1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000d4	75 04		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000d6	8b f1		 mov	 esi, ecx

; 548  :             } else { // successor further down, link in place of erased

  000d8	eb 1a		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

  000da	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000de	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e1	75 03		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000e3	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000e6	89 3e		 mov	 DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000e8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f6	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  000f9	75 05		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000fe	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00100	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00103	39 10		 cmp	 DWORD PTR [eax], edx
  00105	75 04		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00109	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00111	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00117	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0011a	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 108  :     _Right   = _STD move(_Tmp);

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00123	88 50 0c	 mov	 BYTE PTR [eax+12], dl
$LN55@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00126	80 fa 01	 cmp	 dl, 1
  00129	0f 85 46 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 37 01 00
	00		 je	 $LN3@Extract
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Extract:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f8	 mov	 DWORD PTR tv1186[ebp], esi
  00147	0f 85 24 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	3b f9		 cmp	 edi, ecx
  00151	0f 85 a2 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  00157	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0015a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0015e	75 43		 jne	 SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

  00160	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

  00167	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00176	75 03		 jne	 SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00178	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00181	8b 03		 mov	 eax, DWORD PTR [ebx]
  00183	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00186	75 05		 jne	 SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

  00188	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0018b	eb 0e		 jmp	 SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0018d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00190	3b 30		 cmp	 esi, DWORD PTR [eax]
  00192	75 04		 jne	 SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00194	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00196	eb 03		 jmp	 SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  0019b	89 31		 mov	 DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  0019d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

  001a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  001a3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a7	0f 85 b1 00 00
	00		 jne	 $LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  001b3	75 0d		 jne	 SHORT $LN89@Extract
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001bc	0f 84 98 00 00
	00		 je	 $LN93@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c5	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001c9	75 13		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  001cb	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  001cf	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

  001d3	51		 push	 ecx
  001d4	8b cb		 mov	 ecx, ebx
  001d6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  001db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  001de	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001e1	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

  001e4	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  001e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

  001eb	8b cb		 mov	 ecx, ebx
  001ed	56		 push	 esi
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  001f7	eb 78		 jmp	 SHORT $LN3@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  001f9	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001fd	75 44		 jne	 SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

  001ff	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00203	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

  00205	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00209	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020c	89 06		 mov	 DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0020e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	75 03		 jne	 SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00217	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0021a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	75 05		 jne	 SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

  00227	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0022a	eb 0f		 jmp	 SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0022c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0022f	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00232	75 05		 jne	 SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00237	eb 02		 jmp	 SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00239	89 08		 mov	 DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0023b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

  0023e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

  00241	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  00243	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00247	75 15		 jne	 SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  00250	75 3a		 jne	 SHORT $LN90@Extract
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00258	75 32		 jne	 SHORT $LN90@Extract
$LN93@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0025a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  0025e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00260	8b 4d f8	 mov	 ecx, DWORD PTR tv1186[ebp]
  00263	8b f9		 mov	 edi, ecx
  00265	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00268	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026b	0f 85 cf fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00271	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  00275	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00278	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0027b	85 c9		 test	 ecx, ecx
  0027d	74 04		 je	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  0027f	49		 dec	 ecx
  00280	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  0028c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028e	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00292	75 12		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00294	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  00298	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

  0029c	51		 push	 ecx
  0029d	8b cb		 mov	 ecx, ebx
  0029f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002a6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002a9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

  002ac	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  002b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

  002b2	8b cb		 mov	 ecx, ebx
  002b4	56		 push	 esi
  002b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
  002be	eb b1		 jmp	 SHORT $LN3@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1464 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1009 :         return _Mysize() == 0;

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	85 c9		 test	 ecx, ecx

; 1465 :         _Orphan_all();
; 1466 : 
; 1467 :         _Alpty _Almap(_Getal());
; 1468 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN30@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1143 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1144 :             _Myoff() = 0;

  0001c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN30@Tidy:
  0001f	57		 push	 edi

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00020	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00023	85 ff		 test	 edi, edi
  00025	74 1a		 je	 SHORT $LN5@Tidy
$LL25@Tidy:

; 1473 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	4f		 dec	 edi
  0002b	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN7@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	6a 10		 push	 16			; 00000010H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
$LN7@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0003d	85 ff		 test	 edi, edi
  0003f	75 e6		 jne	 SHORT $LL25@Tidy
$LN5@Tidy:

; 1474 :                 _Getal().deallocate(_Map()[_Block], _DEQUESIZ);
; 1475 :                 _Destroy_in_place(_Map()[_Block]);
; 1476 :             }
; 1477 :         }
; 1478 : 
; 1479 :         if (_Map() != _Mapptr()) {

  00041	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00044	5f		 pop	 edi
  00045	85 c9		 test	 ecx, ecx
  00047	74 10		 je	 SHORT $LN32@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004c	c1 e0 02	 shl	 eax, 2
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00056	83 c4 08	 add	 esp, 8
$LN32@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1485 :     }

  00059	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00060	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00067	5e		 pop	 esi
  00068	c3		 ret	 0
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1418 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Proxy_allocator$ = -1					; size = 1
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 868  :     ~deque() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 869  :         _Tidy();

  00007	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0000e	50		 push	 eax
  0000f	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi

; 872  :     }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetSkipIndex@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwSkipIndex$ = 8					; size = 4
?SetSkipIndex@CLightManager@@QAEXK@Z PROC		; CLightManager::SetSkipIndex, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	m_dwSkipIndex = dwSkipIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSkipIndex$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 90   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSkipIndex@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetSkipIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetLimitLightCount@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwLightCount$ = 8					; size = 4
?SetLimitLightCount@CLightManager@@QAEXK@Z PROC		; CLightManager::SetLimitLightCount, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	m_dwLimitLightCount = dwLightCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwLightCount$[ebp]
  00006	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 85   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLimitLightCount@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetLimitLightCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Position$ = 8					; size = 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CLightManager::SetCenterPosition, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	m_v3CenterPosition = c_rv3Position;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Position$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 34	 movq	 QWORD PTR [ecx+52], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 80   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CLightManager::SetCenterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?DeleteLight@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_pLight$1$ = 8						; size = 4
_pkData$ = 8						; size = 4
_LightID$ = 8						; size = 4
?DeleteLight@CLightManager@@QAEXK@Z PROC		; CLightManager::DeleteLight, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c1		 mov	 eax, ecx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 46   : 	TLightMap::iterator itor = m_LightMap.find(LightID);

  0000d	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00010	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
  00013	8b cf		 mov	 ecx, edi
  00015	50		 push	 eax
  00016	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001f	8b 75 f8	 mov	 esi, DWORD PTR __Loc$1[ebp+8]
  00022	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00026	75 5d		 jne	 SHORT $LN1@DeleteLigh
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	8b 5d 08	 mov	 ebx, DWORD PTR _LightID$[ebp]
  0002c	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002f	72 53		 jb	 SHORT $LN69@DeleteLigh

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00031	39 37		 cmp	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 48   : 	if (m_LightMap.end() == itor)

  00033	74 4f		 je	 SHORT $LN69@DeleteLigh

; 49   : 	{
; 50   : 		assert(!"CLightManager::DeleteLight - Failed to find light ID!");
; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	CLight * pLight = itor->second;

  00035	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 55   : 
; 56   : 	pLight->Clear();

  00038	8b c8		 mov	 ecx, eax
  0003a	89 45 08	 mov	 DWORD PTR _pLight$1$[ebp], eax
  0003d	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 81   : 			m_kVct_pkFree.push_back(pkData);

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 57   : 	m_LightPool.Free(pLight);

  00045	8b 55 08	 mov	 edx, DWORD PTR _pLight$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 81   : 			m_kVct_pkFree.push_back(pkData);

  00048	83 c1 58	 add	 ecx, 88			; 00000058H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 57   : 	m_LightPool.Free(pLight);

  0004b	89 55 08	 mov	 DWORD PTR _pkData$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00054	74 08		 je	 SHORT $LN42@DeleteLigh

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00056	89 10		 mov	 DWORD PTR [eax], edx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00058	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0005c	eb 0a		 jmp	 SHORT $LN41@DeleteLigh
$LN42@DeleteLigh:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0005e	8d 55 08	 lea	 edx, DWORD PTR _pkData$[ebp]
  00061	52		 push	 edx
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN41@DeleteLigh:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1389 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00068	56		 push	 esi
  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00070	6a 18		 push	 24			; 00000018H
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 61   : 	ReleaseLightID(LightID);

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0007b	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 61   : 	ReleaseLightID(LightID);

  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 ?ReleaseLightID@CLightManager@@IAEXK@Z ; CLightManager::ReleaseLightID
$LN69@DeleteLigh:
  00084	5b		 pop	 ebx
$LN1@DeleteLigh:
  00085	5f		 pop	 edi

; 62   : }

  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?DeleteLight@CLightManager@@QAEXK@Z ENDP		; CLightManager::DeleteLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?GetLight@CLightManager@@QAEPAVCLight@@K@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_LightID$ = 8						; size = 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z PROC		; CLightManager::GetLight, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
  0000a	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 66   : 	TLightMap::iterator itor = m_LightMap.find(LightID);

  0000b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00020	75 16		 jne	 SHORT $LN38@GetLight
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _LightID$[ebp]
  00025	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0e		 jb	 SHORT $LN38@GetLight

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 06		 cmp	 DWORD PTR [esi], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 68   : 	if (m_LightMap.end() == itor)

  0002c	74 0a		 je	 SHORT $LN38@GetLight

; 72   : 	}
; 73   : 
; 74   : 	return itor->second;

  0002e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00031	5e		 pop	 esi

; 75   : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN38@GetLight:

; 69   : 	{
; 70   : 		assert(!"CLightManager::SetLightData - Failed to find light ID!");
; 71   : 		return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi

; 75   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z ENDP		; CLightManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
$T5 = -20						; size = 4
_pkNewData$6 = -20					; size = 4
_ID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_poutLightID$ = 12					; size = 4
__Myhead$7 = 16						; size = 4
_LightData$ = 16					; size = 4
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z PROC ; CLightManager::RegisterLight, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0002a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002d	39 46 58	 cmp	 DWORD PTR [esi+88], eax
  00030	75 57		 jne	 SHORT $LN4@RegisterLi

; 64   : 			{
; 65   : 				T* pkNewData=new T;

  00032	68 f4 00 00 00	 push	 244			; 000000f4H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	85 c0		 test	 eax, eax
  0004b	74 0b		 je	 SHORT $LN6@RegisterLi
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ??0CLight@@QAE@XZ	; CLight::CLight
  00054	8b f8		 mov	 edi, eax
  00056	eb 02		 jmp	 SHORT $LN7@RegisterLi
$LN6@RegisterLi:
  00058	33 ff		 xor	 edi, edi
$LN7@RegisterLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0005a	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 66   : 				m_kVct_pkData.push_back(pkNewData);

  0005d	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 7d ec	 mov	 DWORD PTR _pkNewData$6[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 46 54	 cmp	 eax, DWORD PTR [esi+84]
  0006d	74 0b		 je	 SHORT $LN14@RegisterLi

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0006f	89 38		 mov	 DWORD PTR [eax], edi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00071	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00075	ff 46 68	 inc	 DWORD PTR [esi+104]

; 68   : 				return pkNewData;

  00078	eb 18		 jmp	 SHORT $LN3@RegisterLi
$LN14@RegisterLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0007a	8d 55 ec	 lea	 edx, DWORD PTR _pkNewData$6[ebp]
  0007d	52		 push	 edx
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00084	ff 46 68	 inc	 DWORD PTR [esi+104]

; 68   : 				return pkNewData;

  00087	eb 09		 jmp	 SHORT $LN3@RegisterLi
$LN4@RegisterLi:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00089	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  0008c	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1338 :         --_Mylast;

  0008f	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN3@RegisterLi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 38   : 	TLightID ID = NewLightID();

  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?NewLightID@CLightManager@@IAEKXZ ; CLightManager::NewLightID

; 39   : 	pLight->SetParameter(ID, LightData);

  00099	ff 75 10	 push	 DWORD PTR _LightData$[ebp]
  0009c	8b cf		 mov	 ecx, edi
  0009e	89 45 f0	 mov	 DWORD PTR _ID$[ebp], eax
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ; CLight::SetParameter
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000a7	8d 45 f0	 lea	 eax, DWORD PTR _ID$[ebp]
  000aa	50		 push	 eax
  000ab	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  000ae	8d 5e 20	 lea	 ebx, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000b1	50		 push	 eax
  000b2	8b cb		 mov	 ecx, ebx
  000b4	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000b9	8b 4d e4	 mov	 ecx, DWORD PTR __Loc$3[ebp+8]
  000bc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c0	75 0c		 jne	 SHORT $LN25@RegisterLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  000c5	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000c8	0f 83 81 00 00
	00		 jae	 $LN24@RegisterLi
$LN25@RegisterLi:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  000ce	81 7b 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+4], 178956970 ; 0aaaaaaaH
  000d5	0f 84 93 00 00
	00		 je	 $LN95@RegisterLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 184  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  000db	8b 03		 mov	 eax, DWORD PTR [ebx]
  000dd	89 45 10	 mov	 DWORD PTR __Myhead$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000e0	89 5d e8	 mov	 DWORD PTR $T4[ebp], ebx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000e3	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000e5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000ec	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000f3	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  000f8	8b f0		 mov	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

  000fa	8d 45 f0	 lea	 eax, DWORD PTR _ID$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000fd	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00100	51		 push	 ecx
  00101	8b d4		 mov	 edx, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

  00103	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00105	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ??$?0ABK$$Z$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00112	8d 45 10	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00115	50		 push	 eax
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0011c	8d 45 10	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  0011f	50		 push	 eax
  00120	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00129	8d 45 10	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  0012c	50		 push	 eax
  0012d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
  00136	83 c4 18	 add	 esp, 24			; 00000018H

; 810  :         this->_Ptr->_Color = _Red;

  00139	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 190  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0013f	8b cb		 mov	 ecx, ebx
  00141	56		 push	 esi
  00142	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
  00145	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
  00148	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
  0014d	8b c8		 mov	 ecx, eax
$LN24@RegisterLi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  0014f	89 79 14	 mov	 DWORD PTR [ecx+20], edi

; 41   : 	*poutLightID = ID;

  00152	8b 4d 0c	 mov	 ecx, DWORD PTR _poutLightID$[ebp]
  00155	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  00158	89 01		 mov	 DWORD PTR [ecx], eax

; 42   : }

  0015a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00164	59		 pop	 ecx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 0c 00	 ret	 12			; 0000000cH
$LN95@RegisterLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  0016e	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN93@RegisterLi:
  00173	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$0:
  00000	68 f4 00 00 00	 push	 244			; 000000f4H
  00005	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$3:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ENDP ; CLightManager::RegisterLight
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?RestoreLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreLight@CLightManager@@QAEXXZ PROC		; CLightManager::RestoreLight, COMDAT
; _this$ = ecx

; 133  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 134  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000a	68 89 00 00 00	 push	 137			; 00000089H
  0000f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00014	33 f6		 xor	 esi, esi
$LL4@RestoreLig:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  00019	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  0001c	2b d1		 sub	 edx, ecx
  0001e	c1 fa 02	 sar	 edx, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00021	39 57 40	 cmp	 DWORD PTR [edi+64], edx
  00024	0f 42 57 40	 cmovb	 edx, DWORD PTR [edi+64]
  00028	3b f2		 cmp	 esi, edx
  0002a	73 0d		 jae	 SHORT $LN3@RestoreLig

; 137  : 		m_LightSortVector[k]->SetDeviceLight(FALSE);

  0002c	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  00036	46		 inc	 esi
  00037	eb dd		 jmp	 SHORT $LL4@RestoreLig
$LN3@RestoreLig:
  00039	5f		 pop	 edi

; 138  : }

  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?RestoreLight@CLightManager@@QAEXXZ ENDP		; CLightManager::RestoreLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?FlushLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_itor$ = -12						; size = 4
$T1 = -8						; size = 1
_pLight$2 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?FlushLight@CLightManager@@QAEXXZ PROC			; CLightManager::FlushLight, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 08	 mov	 DWORD PTR __$ArrayPad$[esp+12], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b d9		 mov	 ebx, ecx

; 102  : 	Update();

  00019	e8 00 00 00 00	 call	 ?Update@CLightManager@@QAEXXZ ; CLightManager::Update

; 103  : 
; 104  : 	m_LightSortVector.clear();

  0001e	8b 7b 28	 mov	 edi, DWORD PTR [ebx+40]
  00021	89 7b 2c	 mov	 DWORD PTR [ebx+44], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00024	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 44 24 0c	 mov	 DWORD PTR _itor$[esp+24], eax
  0002d	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  0002f	0f 84 9e 00 00
	00		 je	 $LN87@FlushLight
$LL4@FlushLight:

; 110  : 	{
; 111  : 		CLight * pLight = itor->second;

  00035	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00038	8b cf		 mov	 ecx, edi
  0003a	89 7c 24 10	 mov	 DWORD PTR _pLight$2[esp+24], edi

; 112  : 
; 113  : 		D3DXVECTOR3 v3LightPos(pLight->GetPosition());

  0003e	e8 00 00 00 00	 call	 ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ; CLight::GetPosition
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00043	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00047	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0004c	f3 0f 5c 53 38	 subss	 xmm2, DWORD PTR [ebx+56]
  00051	f3 0f 5c 4b 34	 subss	 xmm1, DWORD PTR [ebx+52]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005b	f3 0f 5c 43 3c	 subss	 xmm0, DWORD PTR [ebx+60]

; 182  :     z = fz;

  00060	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00064	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00068	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0006c	f3 0f 58 d1	 addss	 xmm2, xmm1
  00070	0f 57 c9	 xorps	 xmm1, xmm1
  00073	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00077	0f 5a c2	 cvtps2pd xmm0, xmm2
  0007a	66 0f 2e c8	 ucomisd xmm1, xmm0
  0007e	77 06		 ja	 SHORT $LN88@FlushLight
  00080	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00084	eb 05		 jmp	 SHORT $LN89@FlushLight
$LN88@FlushLight:
  00086	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN89@FlushLight:
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 115  : 		pLight->SetDistance(D3DXVec3Length(&v3Distance));

  0008f	51		 push	 ecx
  00090	8b cf		 mov	 ecx, edi
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 ?SetDistance@CLight@@QAEXM@Z ; CLight::SetDistance
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0009c	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0009f	3b 43 30	 cmp	 eax, DWORD PTR [ebx+48]
  000a2	74 08		 je	 SHORT $LN54@FlushLight

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000a4	89 38		 mov	 DWORD PTR [eax], edi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  000a6	83 43 2c 04	 add	 DWORD PTR [ebx+44], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000aa	eb 0e		 jmp	 SHORT $LN2@FlushLight
$LN54@FlushLight:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000ac	8d 4c 24 10	 lea	 ecx, DWORD PTR _pLight$2[esp+24]
  000b0	51		 push	 ecx
  000b1	50		 push	 eax
  000b2	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  000b5	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN2@FlushLight:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 198  :         _Mybase::operator++();

  000ba	8d 4c 24 0c	 lea	 ecx, DWORD PTR _itor$[esp+24]
  000be	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  000c3	8b 44 24 0c	 mov	 eax, DWORD PTR _itor$[esp+24]
  000c7	3b 43 20	 cmp	 eax, DWORD PTR [ebx+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  000ca	0f 85 65 ff ff
	ff		 jne	 $LL4@FlushLight
  000d0	8b 7b 28	 mov	 edi, DWORD PTR [ebx+40]
$LN87@FlushLight:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000d3	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000d6	8b c1		 mov	 eax, ecx
  000d8	ff 74 24 10	 push	 DWORD PTR $T1[esp+24]
  000dc	2b c7		 sub	 eax, edi
  000de	c1 f8 02	 sar	 eax, 2
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	57		 push	 edi
  000e4	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000ef	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000f2	6a 01		 push	 1
  000f4	68 89 00 00 00	 push	 137			; 00000089H
  000f9	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  000fe	33 ff		 xor	 edi, edi
$LL7@FlushLight:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00100	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00103	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00106	2b d1		 sub	 edx, ecx
  00108	c1 fa 02	 sar	 edx, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0010b	39 53 40	 cmp	 DWORD PTR [ebx+64], edx
  0010e	0f 42 53 40	 cmovb	 edx, DWORD PTR [ebx+64]
  00112	3b fa		 cmp	 edi, edx
  00114	73 18		 jae	 SHORT $LN6@FlushLight

; 125  : 	{
; 126  : 		m_LightSortVector[k]->Update();

  00116	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00119	e8 00 00 00 00	 call	 ?Update@CLight@@QAEXXZ	; CLight::Update

; 127  : 		m_LightSortVector[k]->SetDeviceLight(TRUE);

  0011e	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00121	6a 01		 push	 1
  00123	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00126	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  0012b	47		 inc	 edi
  0012c	eb d2		 jmp	 SHORT $LL7@FlushLight
$LN6@FlushLight:

; 128  : 
; 129  : 	}
; 130  : }

  0012e	8b 4c 24 14	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+24]
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	33 cc		 xor	 ecx, esp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
?FlushLight@CLightManager@@QAEXXZ ENDP			; CLightManager::FlushLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Update@CLightManager@@QAEXXZ PROC			; CLightManager::Update, COMDAT
; _this$ = ecx

; 159  : 	//static DWORD s_dwStartTime = ELTimer_GetMSec();
; 160  : 	//ms_fCurTime = float(ELTimer_GetMSec() - s_dwStartTime) / 1000.0f;
; 161  : 	ms_fCurTime = CTimer::Instance().GetCurrentSecond();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0000b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?ms_fCurTime@CLightBase@@1MA ; CLightBase::ms_fCurTime

; 162  : }

  00011	c3		 ret	 0
?Update@CLightManager@@QAEXXZ ENDP			; CLightManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLightManager@@QAEXXZ
_TEXT	SEGMENT
__Last$1$ = -8						; size = 4
__First$1$ = -4						; size = 4
_this$1$ = -4						; size = 4
?Initialize@CLightManager@@QAEXXZ PROC			; CLightManager::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx

; 27   : 	SetSkipIndex(1);

  0000b	6a 01		 push	 1
  0000d	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00010	e8 00 00 00 00	 call	 ?SetSkipIndex@CLightManager@@QAEXK@Z ; CLightManager::SetSkipIndex

; 28   : 
; 29   : 	m_NonUsingLightIDDeque.clear();

  00015	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1325 :         _Tidy();

  00018	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 31   : 	m_LightMap.clear();

  0001d	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1447 :         auto _Head = _Scary->_Myhead;

  00020	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00022	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00025	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00029	75 25		 jne	 SHORT $LN9@Initialize
  0002b	0f 1f 44 00 00	 npad	 5
$LL8@Initialize:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00030	ff 76 08	 push	 DWORD PTR [esi+8]
  00033	8b cf		 mov	 ecx, edi
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003f	6a 18		 push	 24			; 00000018H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00047	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 e0		 je	 SHORT $LL8@Initialize
$LN9@Initialize:

; 1449 :         _Head->_Parent  = _Head;

  00050	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1450 :         _Head->_Left    = _Head;

  00053	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1451 :         _Head->_Right   = _Head;

  00055	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1452 :         _Scary->_Mysize = 0;

  00058	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 85   : 			m_kVct_pkFree=m_kVct_pkData;

  0005f	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00062	8d 47 4c	 lea	 eax, DWORD PTR [edi+76]
  00065	83 c7 58	 add	 edi, 88			; 00000058H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1168 :         if (this != _STD addressof(_Right)) {

  00068	3b f8		 cmp	 edi, eax
  0006a	0f 84 a7 00 00
	00		 je	 $LN55@Initialize

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  00073	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00075	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  00077	2b f0		 sub	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00079	8b 17		 mov	 edx, DWORD PTR [edi]

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0007b	89 4d f8	 mov	 DWORD PTR __Last$1$[ebp], ecx

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0007e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00081	2b ca		 sub	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  00083	c1 fe 02	 sar	 esi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00086	c1 f9 02	 sar	 ecx, 2

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00089	89 45 fc	 mov	 DWORD PTR __First$1$[ebp], eax

; 1108 :             if (_Newsize > _Oldcapacity) {

  0008c	3b f1		 cmp	 esi, ecx
  0008e	76 71		 jbe	 SHORT $LN53@Initialize

; 1285 :         if (_Newsize > max_size()) {

  00090	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00096	0f 87 82 00 00
	00		 ja	 $LN67@Initialize

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0009c	8b d9		 mov	 ebx, ecx
  0009e	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  000a3	d1 eb		 shr	 ebx, 1
  000a5	2b c3		 sub	 eax, ebx
  000a7	3b c8		 cmp	 ecx, eax
  000a9	77 0a		 ja	 SHORT $LN39@Initialize

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000ab	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000ae	3b c6		 cmp	 eax, esi
  000b0	0f 42 c6	 cmovb	 eax, esi
  000b3	8b f0		 mov	 esi, eax
$LN39@Initialize:

; 1291 :         if (_Myfirst) { // destroy and deallocate old array

  000b5	85 d2		 test	 edx, edx
  000b7	74 25		 je	 SHORT $LN35@Initialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b9	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  000c0	50		 push	 eax
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1295 :             _Myfirst = pointer();

  000c7	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cd	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1296 :             _Mylast  = pointer();

  000d0	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1297 :             _Myend   = pointer();

  000d7	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN35@Initialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000de	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  000e4	77 3d		 ja	 SHORT $LN68@Initialize

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000e6	c1 e6 02	 shl	 esi, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1643 :         _Myfirst           = _Newvec;

  000ef	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000f1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1644 :         _Mylast            = _Newvec;

  000f4	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1645 :         _Myend             = _Newvec + _Newcapacity;

  000f7	03 c6		 add	 eax, esi
  000f9	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000fc	8b 17		 mov	 edx, DWORD PTR [edi]
  000fe	8b 45 fc	 mov	 eax, DWORD PTR __First$1$[ebp]
$LN53@Initialize:

; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));

  00101	52		 push	 edx
  00102	ff 75 f8	 push	 DWORD PTR __Last$1$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??$_Refancy@PAPAVCLight@@$0A@@std@@YAPAPAVCLight@@PAPAV1@@Z ; std::_Refancy<CLight * *,0>
  00111	83 c4 10	 add	 esp, 16			; 00000010H
  00114	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN55@Initialize:
  00117	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 33   : }

  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$LN67@Initialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1286 :             _Xlength();

  0011e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN68@Initialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00123	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN65@Initialize:
  00128	cc		 int	 3
?Initialize@CLightManager@@QAEXXZ ENDP			; CLightManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Destroy@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CLightManager@@QAEXXZ PROC			; CLightManager::Destroy, COMDAT
; _this$ = ecx

; 21   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 5f 50	 mov	 ebx, DWORD PTR [edi+80]
  00008	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 17		 je	 SHORT $LN19@Destroy
  0000f	90		 npad	 1
$LL20@Destroy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN18@Destroy
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN18@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL20@Destroy
  00023	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
$LN19@Destroy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00026	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00029	89 77 50	 mov	 DWORD PTR [edi+80], esi
  0002c	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 23   : }

  00032	c3		 ret	 0
?Destroy@CLightManager@@QAEXXZ ENDP			; CLightManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLightManager@@UAE@XZ
_TEXT	SEGMENT
__Proxy_allocator$1 = -1				; size = 1
??1CLightManager@@UAE@XZ PROC				; CLightManager::~CLightManager, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 18   : }

  00008	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  00011	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  00018	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
  0001f	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00024	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00027	85 c9		 test	 ecx, ecx
  00029	74 27		 je	 SHORT $LN6@CLightMana

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002b	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0002e	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00030	83 e0 fc	 and	 eax, -4			; fffffffcH
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0003a	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00041	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00044	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 1699 :             _Myend   = pointer();

  0004b	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN6@CLightMana:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 18   : }

  00052	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00055	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 869  :         _Tidy();

  0005a	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0005d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00062	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00065	50		 push	 eax
  00066	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00069	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00076	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 19   : 	{

  00079	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00080	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 18   : }

  0008a	8b cf		 mov	 ecx, edi
  0008c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
  00093	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
??1CLightManager@@UAE@XZ ENDP				; CLightManager::~CLightManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLightManager@@QAE@XZ
_TEXT	SEGMENT
$T2 = -32						; size = 12
_this$ = -20						; size = 4
__Pnode$3 = -16						; size = 4
$T4 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLightManager@@QAE@XZ PROC				; CLightManager::CLightManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLightManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.h

; 22   : 		CLightBase() {};

  00039	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7CLightBase@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00040	8b c3		 mov	 eax, ebx
  00042	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
  00049	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, eax ; CSingleton<CLightManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 11   : {

  0004e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  00054	8d 7b 0c	 lea	 edi, DWORD PTR [ebx+12]
  00057	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  0005e	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00065	6a 08		 push	 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 11   : {

  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1092 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

  0006b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00071	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00078	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0007f	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00086	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1102 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  00092	8b f0		 mov	 esi, eax

; 1103 :         _Construct_in_place(*_New_proxy, this);

  00094	89 7d f0	 mov	 DWORD PTR $T4[ebp], edi
  00097	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1104 :         _Myproxy            = _New_proxy;

  000a1	89 37		 mov	 DWORD PTR [edi], esi

; 1105 :         _New_proxy->_Mycont = this;

  000a3	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 11   : {

  000a5	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  000a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ac	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000af	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000b1	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000b7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000be	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  000c3	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000c5	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  000c8	50		 push	 eax
  000c9	56		 push	 esi
  000ca	89 75 f0	 mov	 DWORD PTR __Pnode$3[ebp], esi
  000cd	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000d2	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  000d5	50		 push	 eax
  000d6	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000df	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  000e2	50		 push	 eax
  000e3	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  000ec	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H
  000f2	0f 57 c0	 xorps	 xmm0, xmm0

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000f5	89 37		 mov	 DWORD PTR [edi], esi

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000f7	83 c4 28	 add	 esp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000fa	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0
  00101	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  00108	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 12   : 		{

  0010f	c7 43 48 00 00
	00 00		 mov	 DWORD PTR [ebx+72], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00116	c7 43 4c 00 00
	00 00		 mov	 DWORD PTR [ebx+76], 0
  0011d	c7 43 50 00 00
	00 00		 mov	 DWORD PTR [ebx+80], 0
  00124	c7 43 54 00 00
	00 00		 mov	 DWORD PTR [ebx+84], 0
  0012b	c7 43 58 00 00
	00 00		 mov	 DWORD PTR [ebx+88], 0
  00132	c7 43 5c 00 00
	00 00		 mov	 DWORD PTR [ebx+92], 0
  00139	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  00140	c7 43 64 00 00
	00 00		 mov	 DWORD PTR [ebx+100], 0

; 15   : 			m_uUsedCapacity=0;

  00147	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [ebx+104], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0014e	0f 14 c0	 unpcklps xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00151	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00158	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp+8]
  0015b	66 0f d6 43 34	 movq	 QWORD PTR [ebx+52], xmm0
  00160	89 43 3c	 mov	 DWORD PTR [ebx+60], eax

; 13   : 	m_dwLimitLightCount			= LIGHT_LIMIT_DEFAULT;
; 14   : }

  00163	8b c3		 mov	 eax, ebx
  00165	c7 43 40 03 00
	00 00		 mov	 DWORD PTR [ebx+64], 3
  0016c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00176	59		 pop	 ecx
  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLightManager@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CLightManager@@QAE@XZ$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1CLightBase@@UAE@XZ	; CLightBase::~CLightBase
__unwindfunclet$??0CLightManager@@QAE@XZ$2:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCLightManager@@@@UAE@XZ ; CSingleton<CLightManager>::~CSingleton<CLightManager>
__unwindfunclet$??0CLightManager@@QAE@XZ$3:
  0001e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	e9 00 00 00 00	 jmp	 ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CLightManager@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLightManager@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLightManager@@QAE@XZ ENDP				; CLightManager::CLightManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z PROC	; CSingleton<CLightManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z ENDP	; CSingleton<CLightManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCLightManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCLightManager@@@@UAE@XZ PROC		; CSingleton<CLightManager>::~CSingleton<CLightManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCLightManager@@@@UAE@XZ ENDP		; CSingleton<CLightManager>::~CSingleton<CLightManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLight@@UAEPAXI@Z PROC				; CLight::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLight@@UAE@XZ	; CLight::~CLight
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 f4 00 00 00	 push	 244			; 000000f4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCLight@@UAEPAXI@Z ENDP				; CLight::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendRange@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendRange@CLight@@QAEXMMM@Z PROC			; CLight::BlendRange, COMDAT
; _this$ = ecx

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	m_RangeTransitor.SetTransition(m_d3dLight.Range, fRange, ms_fCurTime + fDelayTime, fBlendTime);

  00003	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  0000b	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00010	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 54   : 			m_TargetValue = c_rTargetValue;

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  00018	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax
  0001e	f3 0f 11 81 f0
	00 00 00	 movss	 DWORD PTR [ecx+240], xmm0

; 55   : 			m_fStartTime = fStartTime;

  00026	f3 0f 11 89 e4
	00 00 00	 movss	 DWORD PTR [ecx+228], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0002e	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00033	f3 0f 11 89 e8
	00 00 00	 movss	 DWORD PTR [ecx+232], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 290  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?BlendRange@CLight@@QAEXMMM@Z ENDP			; CLight::BlendRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendAmbientColor, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00006	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 54   : 			m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 284  : 	m_AmbientColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  00015	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  0001e	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _Color$[ebp]
  00022	0f 11 81 bc 00
	00 00		 movups	 XMMWORD PTR [ecx+188], xmm0

; 54   : 			m_TargetValue = c_rTargetValue;

  00029	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  0002c	f3 0f 11 89 b4
	00 00 00	 movss	 DWORD PTR [ecx+180], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  00034	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00039	0f 11 81 cc 00
	00 00		 movups	 XMMWORD PTR [ecx+204], xmm0
  00040	f3 0f 11 89 b8
	00 00 00	 movss	 DWORD PTR [ecx+184], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 285  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendDiffuseColor, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00006	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 54   : 			m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 278  : 	m_DiffuseColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  00015	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  0001e	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _Color$[ebp]
  00022	0f 11 81 8c 00
	00 00		 movups	 XMMWORD PTR [ecx+140], xmm0

; 54   : 			m_TargetValue = c_rTargetValue;

  00029	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  0002c	f3 0f 11 89 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  00034	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00039	0f 11 81 9c 00
	00 00		 movups	 XMMWORD PTR [ecx+156], xmm0
  00040	f3 0f 11 89 88
	00 00 00	 movss	 DWORD PTR [ecx+136], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 279  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ
_TEXT	SEGMENT
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ PROC		; CLight::GetPosition, COMDAT
; _this$ = ecx

; 256  : 	return m_d3dLight.Position;

  00000	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]

; 257  : }

  00003	c3		 ret	 0
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ENDP		; CLight::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetPosition@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CLight@@QAEXMMM@Z PROC			; CLight::SetPosition, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 261  : 	if (m_d3dLight.Position.x == fx && m_d3dLight.Position.y == fy && m_d3dLight.Position.z == fz)

  00003	f3 0f 10 41 40	 movss	 xmm0, DWORD PTR [ecx+64]
  00008	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  00012	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  00017	0f 2e c3	 ucomiss xmm0, xmm3
  0001a	9f		 lahf
  0001b	f6 c4 44	 test	 ah, 68			; 00000044H
  0001e	7a 1c		 jp	 SHORT $LN2@SetPositio
  00020	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [ecx+68]
  00025	0f 2e c2	 ucomiss xmm0, xmm2
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 0e		 jp	 SHORT $LN2@SetPositio
  0002e	f3 0f 10 41 48	 movss	 xmm0, DWORD PTR [ecx+72]
  00033	0f 2e c1	 ucomiss xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7b 16		 jnp	 SHORT $LN1@SetPositio
$LN2@SetPositio:

; 262  : 		return;
; 263  : 
; 264  : 	m_d3dLight.Position.x = fx;

  0003c	f3 0f 11 59 40	 movss	 DWORD PTR [ecx+64], xmm3

; 265  : 	m_d3dLight.Position.y = fy;

  00041	f3 0f 11 51 44	 movss	 DWORD PTR [ecx+68], xmm2

; 266  : 	m_d3dLight.Position.z = fz;

  00046	f3 0f 11 49 48	 movss	 DWORD PTR [ecx+72], xmm1

; 267  : 	m_isEdited = TRUE;

  0004b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetPositio:

; 268  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CLight@@QAEXMMM@Z ENDP			; CLight::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetRange@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
?SetRange@CLight@@QAEXM@Z PROC				; CLight::SetRange, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 	if (m_d3dLight.Range == fRange)

  00003	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00008	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  0000d	0f 2e c1	 ucomiss xmm0, xmm1
  00010	9f		 lahf
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7b 0c		 jnp	 SHORT $LN1@SetRange

; 248  : 		return;
; 249  : 
; 250  : 	m_d3dLight.Range = fRange;

  00016	f3 0f 11 49 58	 movss	 DWORD PTR [ecx+88], xmm1

; 251  : 	m_isEdited = TRUE;

  0001b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetRange:

; 252  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetRange@CLight@@QAEXM@Z ENDP				; CLight::SetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetAmbientColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetAmbientColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetAmbientColor, COMDAT
; _this$ = ecx

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  : 	if (m_d3dLight.Ambient.r == fr
; 233  : 		&& m_d3dLight.Ambient.g == fg
; 234  : 		&& m_d3dLight.Ambient.b == fb
; 235  : 		&& m_d3dLight.Ambient.a == fa

  00003	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetAmbient
  00025	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetAmbient
  00033	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetAmbient
  00041	f3 0f 10 41 3c	 movss	 xmm0, DWORD PTR [ecx+60]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetAmbient
$LN2@SetAmbient:

; 236  : 		)
; 237  : 		return;
; 238  : 	m_d3dLight.Ambient.r = fr;

  0004f	f3 0f 11 61 30	 movss	 DWORD PTR [ecx+48], xmm4

; 239  : 	m_d3dLight.Ambient.g = fg;

  00054	f3 0f 11 59 34	 movss	 DWORD PTR [ecx+52], xmm3

; 240  : 	m_d3dLight.Ambient.b = fb;

  00059	f3 0f 11 51 38	 movss	 DWORD PTR [ecx+56], xmm2

; 241  : 	m_d3dLight.Ambient.a = fa;

  0005e	f3 0f 11 49 3c	 movss	 DWORD PTR [ecx+60], xmm1

; 242  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetAmbient:

; 243  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetAmbientColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDiffuseColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetDiffuseColor, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 217  : 	if (m_d3dLight.Diffuse.r == fr
; 218  : 		&& m_d3dLight.Diffuse.g == fg
; 219  : 		&& m_d3dLight.Diffuse.b == fb
; 220  : 		&& m_d3dLight.Diffuse.a == fa

  00003	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetDiffuse
  00025	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetDiffuse
  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetDiffuse
  00041	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetDiffuse
$LN2@SetDiffuse:

; 221  : 		)
; 222  : 		return;
; 223  : 	m_d3dLight.Diffuse.r = fr;

  0004f	f3 0f 11 61 10	 movss	 DWORD PTR [ecx+16], xmm4

; 224  : 	m_d3dLight.Diffuse.g = fg;

  00054	f3 0f 11 59 14	 movss	 DWORD PTR [ecx+20], xmm3

; 225  : 	m_d3dLight.Diffuse.b = fb;

  00059	f3 0f 11 51 18	 movss	 DWORD PTR [ecx+24], xmm2

; 226  : 	m_d3dLight.Diffuse.a = fa;

  0005e	f3 0f 11 49 1c	 movss	 DWORD PTR [ecx+28], xmm1

; 227  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetDiffuse:

; 228  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDeviceLight@CLight@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetDeviceLight@CLight@@QAEXH@Z PROC			; CLight::SetDeviceLight, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	if (bActive && m_isEdited)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bActive$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 20		 je	 SHORT $LN3@SetDeviceL
  0000c	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00010	74 1a		 je	 SHORT $LN3@SetDeviceL

; 199  : 	{
; 200  : 		if (ms_lpd3dDevice)

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00018	85 d2		 test	 edx, edx
  0001a	74 29		 je	 SHORT $LN4@SetDeviceL

; 201  : 			ms_lpd3dDevice->SetLight(m_LightID, &m_d3dLight);

  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00021	50		 push	 eax
  00022	ff 76 08	 push	 DWORD PTR [esi+8]
  00025	52		 push	 edx
  00026	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
$LN3@SetDeviceL:

; 202  : 	}
; 203  : 	if (ms_lpd3dDevice)

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00032	85 c9		 test	 ecx, ecx
  00034	74 0f		 je	 SHORT $LN4@SetDeviceL

; 204  : 	{
; 205  : 		ms_lpd3dDevice->LightEnable(m_LightID, bActive);

  00036	ff 75 08	 push	 DWORD PTR _bActive$[ebp]
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	51		 push	 ecx
  0003f	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
$LN4@SetDeviceL:
  00045	5e		 pop	 esi

; 206  : 	}
; 207  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?SetDeviceLight@CLight@@QAEXH@Z ENDP			; CLight::SetDeviceLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDistance@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?SetDistance@CLight@@QAEXM@Z PROC			; CLight::SetDistance, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  : 	m_fDistance = fDistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00008	f3 0f 11 41 78	 movss	 DWORD PTR [ecx+120], xmm0

; 273  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetDistance@CLight@@QAEXM@Z ENDP			; CLight::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
_c_rLight$ = 12						; size = 4
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z PROC	; CLight::SetParameter, COMDAT
; _this$ = ecx

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 211  : 	m_LightID	= id;

  00003	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00006	56		 push	 esi

; 212  : 	m_d3dLight	= c_rLight;

  00007	8b 75 0c	 mov	 esi, DWORD PTR _c_rLight$[ebp]
  0000a	57		 push	 edi
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00011	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00016	f3 a5		 rep movsd
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 213  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ENDP	; CLight::SetParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLight@@QAEXXZ
_TEXT	SEGMENT
$T3 = -20						; size = 16
$T4 = -20						; size = 16
_Color$1$sroa$767$ = -4					; size = 4
_Color$1$sroa$740$ = -4					; size = 4
_Color$2$sroa$739$ = -4					; size = 4
_Color$2$sroa$738$ = -4					; size = 4
_Color$1$sroa$728$ = -4					; size = 4
_Color$1$sroa$727$ = -4					; size = 4
_Color$2$sroa$726$ = -4					; size = 4
_Color$2$sroa$725$ = -4					; size = 4
_fRange$5 = -4						; size = 4
?Update@CLight@@QAEXXZ PROC				; CLight::Update, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 293  : {

  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00011	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00019	0f 2f e0	 comiss	 xmm4, xmm0
  0001c	0f 83 f1 00 00
	00		 jae	 $LN4@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 296  : 		if (!m_AmbientColorTransitor.isActive())

  00022	83 be b0 00 00
	00 00		 cmp	 DWORD PTR [esi+176], 0
  00029	75 22		 jne	 SHORT $LN3@Update

; 297  : 		{
; 298  : 			m_AmbientColorTransitor.SetActive();

  0002b	c7 86 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+176], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00035	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  00039	0f 11 45 ec	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  0003d	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00041	0f 11 86 bc 00
	00 00		 movups	 XMMWORD PTR [esi+188], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 300  : 		}

  00048	e9 be 00 00 00	 jmp	 $LN92@Update
$LN3@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0004d	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  00055	0f 2f cc	 comiss	 xmm1, xmm4
  00058	73 7e		 jae	 SHORT $LN89@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0005a	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0005e	f3 0f 10 ae cc
	00 00 00	 movss	 xmm5, DWORD PTR [esi+204]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00066	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0006a	f3 0f 10 96 c4
	00 00 00	 movss	 xmm2, DWORD PTR [esi+196]
  00072	f3 0f 10 8e c0
	00 00 00	 movss	 xmm1, DWORD PTR [esi+192]
  0007a	f3 0f 10 9e c8
	00 00 00	 movss	 xmm3, DWORD PTR [esi+200]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00082	f3 0f 5e e0	 divss	 xmm4, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00086	f3 0f 10 86 bc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+188]
  0008e	f3 0f 5c e8	 subss	 xmm5, xmm0

; 923  :     a = fa;

  00092	f3 0f 59 ec	 mulss	 xmm5, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00096	f3 0f 58 e8	 addss	 xmm5, xmm0

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0009a	f3 0f 10 86 d0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+208]
  000a2	f3 0f 5c c1	 subss	 xmm0, xmm1

; 920  :     r = fr;

  000a6	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000aa	f3 0f 58 c1	 addss	 xmm0, xmm1

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  000ae	f3 0f 10 8e d4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+212]
  000b6	f3 0f 5c ca	 subss	 xmm1, xmm2

; 921  :     g = fg;

  000ba	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000be	f3 0f 58 ca	 addss	 xmm1, xmm2

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  000c2	f3 0f 10 96 d8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+216]
  000ca	f3 0f 5c d3	 subss	 xmm2, xmm3

; 922  :     b = fb;

  000ce	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000d2	f3 0f 58 d3	 addss	 xmm2, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  000d6	eb 14		 jmp	 SHORT $LN76@Update
$LN89@Update:
  000d8	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _Color$1$sroa$727$[ebp]
  000dd	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Color$1$sroa$728$[ebp]
  000e2	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Color$1$sroa$740$[ebp]
  000e7	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _Color$1$sroa$767$[ebp]
$LN76@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 306  : 			SetAmbientColor(Color.r, Color.g, Color.b, Color.a);

  000ec	83 ec 10	 sub	 esp, 16			; 00000010H
  000ef	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  000f5	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000fb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00101	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  00106	e8 00 00 00 00	 call	 ?SetAmbientColor@CLight@@QAEXMMMM@Z ; CLight::SetAmbientColor
$LN92@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  0010b	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN4@Update:
  00113	f3 0f 10 86 88
	00 00 00	 movss	 xmm0, DWORD PTR [esi+136]
  0011b	0f 2f e0	 comiss	 xmm4, xmm0
  0011e	0f 83 f3 00 00
	00		 jae	 $LN7@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 312  : 		if (!m_DiffuseColorTransitor.isActive())

  00124	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
  0012b	75 22		 jne	 SHORT $LN6@Update

; 313  : 		{
; 314  : 			m_DiffuseColorTransitor.SetActive();

  0012d	c7 86 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+128], 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00137	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  0013b	0f 11 45 ec	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  0013f	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00143	0f 11 86 8c 00
	00 00		 movups	 XMMWORD PTR [esi+140], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 316  : 		}

  0014a	e9 c0 00 00 00	 jmp	 $LN93@Update
$LN6@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0014f	f3 0f 10 8e 84
	00 00 00	 movss	 xmm1, DWORD PTR [esi+132]
  00157	0f 2f cc	 comiss	 xmm1, xmm4
  0015a	73 7e		 jae	 SHORT $LN90@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0015c	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00160	f3 0f 10 ae 9c
	00 00 00	 movss	 xmm5, DWORD PTR [esi+156]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00168	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0016c	f3 0f 10 96 94
	00 00 00	 movss	 xmm2, DWORD PTR [esi+148]
  00174	f3 0f 10 8e 90
	00 00 00	 movss	 xmm1, DWORD PTR [esi+144]
  0017c	f3 0f 10 9e 98
	00 00 00	 movss	 xmm3, DWORD PTR [esi+152]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00184	f3 0f 5e e0	 divss	 xmm4, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00188	f3 0f 10 86 8c
	00 00 00	 movss	 xmm0, DWORD PTR [esi+140]
  00190	f3 0f 5c e8	 subss	 xmm5, xmm0

; 923  :     a = fa;

  00194	f3 0f 59 ec	 mulss	 xmm5, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00198	f3 0f 58 e8	 addss	 xmm5, xmm0

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0019c	f3 0f 10 86 a0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+160]
  001a4	f3 0f 5c c1	 subss	 xmm0, xmm1

; 920  :     r = fr;

  001a8	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001ac	f3 0f 58 c1	 addss	 xmm0, xmm1

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001b0	f3 0f 10 8e a4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+164]
  001b8	f3 0f 5c ca	 subss	 xmm1, xmm2

; 921  :     g = fg;

  001bc	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001c0	f3 0f 58 ca	 addss	 xmm1, xmm2

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001c4	f3 0f 10 96 a8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+168]
  001cc	f3 0f 5c d3	 subss	 xmm2, xmm3

; 922  :     b = fb;

  001d0	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001d4	f3 0f 58 d3	 addss	 xmm2, xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  001d8	eb 14		 jmp	 SHORT $LN81@Update
$LN90@Update:
  001da	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _Color$2$sroa$725$[ebp]
  001df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Color$2$sroa$726$[ebp]
  001e4	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Color$2$sroa$738$[ebp]
  001e9	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _Color$2$sroa$739$[ebp]
$LN81@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 321  : 			SetDiffuseColor(Color.r, Color.g, Color.b, Color.a);

  001ee	83 ec 10	 sub	 esp, 16			; 00000010H
  001f1	8b ce		 mov	 ecx, esi
  001f3	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  001f9	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  001ff	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00205	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  0020a	e8 00 00 00 00	 call	 ?SetDiffuseColor@CLight@@QAEXMMMM@Z ; CLight::SetDiffuseColor
$LN93@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  0020f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN7@Update:
  00217	f3 0f 10 86 e8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+232]
  0021f	0f 2f e0	 comiss	 xmm4, xmm0
  00222	73 7a		 jae	 SHORT $LN10@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 327  : 		if (!m_RangeTransitor.isActive())

  00224	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  0022b	75 18		 jne	 SHORT $LN9@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  0022d	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 329  : 			m_RangeTransitor.SetActive();

  00230	c7 86 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+224], 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  0023a	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  00240	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 339  : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
$LN9@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  00245	f3 0f 10 96 e4
	00 00 00	 movss	 xmm2, DWORD PTR [esi+228]
  0024d	0f 2f d4	 comiss	 xmm2, xmm4
  00250	73 3a		 jae	 SHORT $LN91@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00252	f3 0f 5c e2	 subss	 xmm4, xmm2

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00256	f3 0f 10 8e ec
	00 00 00	 movss	 xmm1, DWORD PTR [esi+236]
  0025e	f3 0f 5c c2	 subss	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 336  : 			SetRange(fRange);

  00262	51		 push	 ecx
  00263	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00265	f3 0f 5e e0	 divss	 xmm4, xmm0

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00269	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  00271	f3 0f 5c c1	 subss	 xmm0, xmm1
  00275	f3 0f 59 e0	 mulss	 xmm4, xmm0
  00279	f3 0f 58 e1	 addss	 xmm4, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 336  : 			SetRange(fRange);

  0027d	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00282	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
  00287	5e		 pop	 esi

; 339  : }

  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c3		 ret	 0
$LN91@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0028c	f3 0f 10 65 fc	 movss	 xmm4, DWORD PTR _fRange$5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 336  : 			SetRange(fRange);

  00291	51		 push	 ecx
  00292	8b ce		 mov	 ecx, esi
  00294	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00299	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
$LN10@Update:
  0029e	5e		 pop	 esi

; 339  : }

  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c3		 ret	 0
?Update@CLight@@QAEXXZ ENDP				; CLight::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Clear@CLight@@QAEXXZ
_TEXT	SEGMENT
?Clear@CLight@@QAEXXZ PROC				; CLight::Clear, COMDAT
; _this$ = ecx

; 190  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 	if (m_LightID)

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	74 07		 je	 SHORT $LN2@Clear

; 192  : 		SetDeviceLight(FALSE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
$LN2@Clear:

; 193  : 	Initialize();

  00010	8b ce		 mov	 ecx, esi
  00012	5e		 pop	 esi
  00013	e9 00 00 00 00	 jmp	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize
?Clear@CLight@@QAEXXZ ENDP				; CLight::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLight@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CLight@@QAEXXZ PROC				; CLight::Initialize, COMDAT
; _this$ = ecx

; 176  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 177  : 	m_LightID	= 0;
; 178  : 	m_isEdited	= TRUE;
; 179  : 	m_fDistance	= 0.0f;
; 180  : 
; 181  : 	memset(&m_d3dLight, 0, sizeof(m_d3dLight));

  00004	6a 68		 push	 104			; 00000068H
  00006	6a 00		 push	 0
  00008	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0000b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00012	56		 push	 esi
  00013	c7 47 74 01 00
	00 00		 mov	 DWORD PTR [edi+116], 1
  0001a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  : 
; 183  : 	m_d3dLight.Type			= D3DLIGHT_POINT;
; 184  : 	m_d3dLight.Attenuation0	= 0.0f;

  00029	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 185  : 	m_d3dLight.Attenuation1	= 1.0f;

  00030	c7 47 64 00 00
	80 3f		 mov	 DWORD PTR [edi+100], 1065353216 ; 3f800000H

; 186  : 	m_d3dLight.Attenuation2	= 0.0f;

  00037	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0003e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 187  : }

  00046	c3		 ret	 0
?Initialize@CLight@@QAEXXZ ENDP				; CLight::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLight@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CLight@@UAE@XZ PROC					; CLight::~CLight, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLight@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0002b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@

; 172  : 	Clear();

  00032	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear

; 173  : }

  00037	8b ce		 mov	 ecx, esi
  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
  00040	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CLight@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLight@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLight@@UAE@XZ ENDP					; CLight::~CLight
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLight@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLight@@QAE@XZ PROC					; CLight::CLight, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.h

; 22   : 		CLightBase() {};

  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.cpp

; 167  : 	Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@
  00025	e8 00 00 00 00	 call	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize

; 168  : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CLight@@QAE@XZ ENDP					; CLight::CLight
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightBase@@UAEPAXI@Z PROC				; CLightBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLightBase@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GCLightBase@@UAEPAXI@Z ENDP				; CLightBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpLightManager.h
;	COMDAT ??1CLightBase@@UAE@XZ
_TEXT	SEGMENT
??1CLightBase@@UAE@XZ PROC				; CLightBase::~CLightBase, COMDAT
; _this$ = ecx

; 23   : 		virtual ~CLightBase() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLightBase@@6B@
  00006	c3		 ret	 0
??1CLightBase@@UAE@XZ ENDP				; CLightBase::~CLightBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
