; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CGraphicVertexBuffer@@QAE@XZ			; CGraphicVertexBuffer::CGraphicVertexBuffer
PUBLIC	??1CGraphicVertexBuffer@@UAE@XZ			; CGraphicVertexBuffer::~CGraphicVertexBuffer
PUBLIC	?Destroy@CGraphicVertexBuffer@@QAEXXZ		; CGraphicVertexBuffer::Destroy
PUBLIC	?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z ; CGraphicVertexBuffer::Create
PUBLIC	?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::DestroyDeviceObjects
PUBLIC	?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z		; CGraphicVertexBuffer::Copy
PUBLIC	?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z	; CGraphicVertexBuffer::LockRange
PUBLIC	?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z	; CGraphicVertexBuffer::Lock
PUBLIC	?Unlock@CGraphicVertexBuffer@@QBE_NXZ		; CGraphicVertexBuffer::Unlock
PUBLIC	?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z	; CGraphicVertexBuffer::LockDynamic
PUBLIC	?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z	; CGraphicVertexBuffer::Lock
PUBLIC	?Unlock@CGraphicVertexBuffer@@QAE_NXZ		; CGraphicVertexBuffer::Unlock
PUBLIC	?SetStream@CGraphicVertexBuffer@@QBEXHH@Z	; CGraphicVertexBuffer::SetStream
PUBLIC	?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ	; CGraphicVertexBuffer::GetVertexCount
PUBLIC	?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ	; CGraphicVertexBuffer::GetVertexStride
PUBLIC	?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ ; CGraphicVertexBuffer::GetFlexibleVertexFormat
PUBLIC	?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ		; CGraphicVertexBuffer::IsEmpty
PUBLIC	?Initialize@CGraphicVertexBuffer@@IAEXXZ	; CGraphicVertexBuffer::Initialize
PUBLIC	??_GCGraphicVertexBuffer@@UAEPAXI@Z		; CGraphicVertexBuffer::`scalar deleting destructor'
PUBLIC	??_7CGraphicVertexBuffer@@6B@			; CGraphicVertexBuffer::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_R4CGraphicVertexBuffer@@6B@			; CGraphicVertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicVertexBuffer@@@8		; CGraphicVertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicVertexBuffer@@8			; CGraphicVertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicVertexBuffer@@8			; CGraphicVertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicVertexBuffer@@8		; CGraphicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_D3DXGetFVFVertexSize@4:PROC
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECGraphicVertexBuffer@@UAEPAXI@Z:PROC	; CGraphicVertexBuffer::`vector deleting destructor'
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicVertexBuffer@@8 DD FLAT:??_R0?AVCGraphicVertexBuffer@@@8 ; CGraphicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R2CGraphicVertexBuffer@@8 DD FLAT:??_R1A@?0A@EA@CGraphicVertexBuffer@@8 ; CGraphicVertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R3CGraphicVertexBuffer@@8 DD 00H			; CGraphicVertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicVertexBuffer@@@8
data$r	SEGMENT
??_R0?AVCGraphicVertexBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicVertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicVertexBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicVertexBuffer@@6B@
rdata$r	SEGMENT
??_R4CGraphicVertexBuffer@@6B@ DD 00H			; CGraphicVertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicVertexBuffer@@@8
	DD	FLAT:??_R3CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7CGraphicVertexBuffer@@6B@
CONST	SEGMENT
??_7CGraphicVertexBuffer@@6B@ DD FLAT:??_R4CGraphicVertexBuffer@@6B@ ; CGraphicVertexBuffer::`vftable'
	DD	FLAT:??_ECGraphicVertexBuffer@@UAEPAXI@Z
	DD	FLAT:?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z
	DD	FLAT:?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicVertexBuffer@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicVertexBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicVertexBuffer@@UAEPAXI@Z PROC		; CGraphicVertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 20		 push	 32			; 00000020H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicVertexBuffer@@UAEPAXI@Z ENDP		; CGraphicVertexBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Initialize@CGraphicVertexBuffer@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicVertexBuffer@@IAEXXZ PROC		; CGraphicVertexBuffer::Initialize, COMDAT
; _this$ = ecx

; 166  : 	m_lpd3dVB = NULL;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 167  : 	m_vtxCount = 0;

  00007	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 168  : 	m_dwBufferSize = 0;

  0000e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 169  : }

  00015	c3		 ret	 0
?Initialize@CGraphicVertexBuffer@@IAEXXZ ENDP		; CGraphicVertexBuffer::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ PROC		; CGraphicVertexBuffer::IsEmpty, COMDAT
; _this$ = ecx

; 64   : 	if (m_lpd3dVB)

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	0f 95 c0	 setne	 al

; 65   : 		return true;
; 66   : 	else
; 67   : 		return false;
; 68   : }

  00007	c3		 ret	 0
?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ ENDP		; CGraphicVertexBuffer::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ
_TEXT	SEGMENT
?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ PROC ; CGraphicVertexBuffer::GetFlexibleVertexFormat, COMDAT
; _this$ = ecx

; 14   : 	return m_dwFVF;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 15   : }

  00003	c3		 ret	 0
?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ ENDP ; CGraphicVertexBuffer::GetFlexibleVertexFormat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ
_TEXT	SEGMENT
?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ PROC	; CGraphicVertexBuffer::GetVertexStride, COMDAT
; _this$ = ecx

; 8    : 	int retSize = D3DXGetFVFVertexSize(m_dwFVF);

  00000	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00003	e8 00 00 00 00	 call	 _D3DXGetFVFVertexSize@4

; 9    : 	return retSize;
; 10   : }

  00008	c3		 ret	 0
?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ENDP	; CGraphicVertexBuffer::GetVertexStride
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ
_TEXT	SEGMENT
?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ PROC	; CGraphicVertexBuffer::GetVertexCount, COMDAT
; _this$ = ecx

; 19   : 	return m_vtxCount;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 20   : }

  00003	c3		 ret	 0
?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ENDP	; CGraphicVertexBuffer::GetVertexCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?SetStream@CGraphicVertexBuffer@@QBEXHH@Z
_TEXT	SEGMENT
_stride$ = 8						; size = 4
_layer$ = 12						; size = 4
?SetStream@CGraphicVertexBuffer@@QBEXHH@Z PROC		; CGraphicVertexBuffer::SetStream, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	assert(ms_lpd3dDevice != NULL);
; 25   : 	STATEMANAGER.SetStreamSource(layer, m_lpd3dVB, stride);

  00003	ff 75 08	 push	 DWORD PTR _stride$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000f	ff 75 0c	 push	 DWORD PTR _layer$[ebp]
  00012	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 26   : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetStream@CGraphicVertexBuffer@@QBEXHH@Z ENDP		; CGraphicVertexBuffer::SetStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Unlock@CGraphicVertexBuffer@@QAE_NXZ
_TEXT	SEGMENT
?Unlock@CGraphicVertexBuffer@@QAE_NXZ PROC		; CGraphicVertexBuffer::Unlock, COMDAT
; _this$ = ecx

; 94   : 	if (!m_lpd3dVB)

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 0d		 je	 SHORT $LN5@Unlock

; 95   : 		return false;
; 96   : 
; 97   : 	if ( FAILED(m_lpd3dVB->Unlock()) )

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	51		 push	 ecx
  0000a	ff 50 30	 call	 DWORD PTR [eax+48]
  0000d	85 c0		 test	 eax, eax
  0000f	78 03		 js	 SHORT $LN5@Unlock

; 99   : 	return true;

  00011	b0 01		 mov	 al, 1

; 100  : }

  00013	c3		 ret	 0
$LN5@Unlock:

; 98   : 		return false;

  00014	32 c0		 xor	 al, al

; 100  : }

  00016	c3		 ret	 0
?Unlock@CGraphicVertexBuffer@@QAE_NXZ ENDP		; CGraphicVertexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z
_TEXT	SEGMENT
_pretVertices$ = 8					; size = 4
?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z PROC		; CGraphicVertexBuffer::Lock, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   : 	if (!m_lpd3dVB)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	85 d2		 test	 edx, edx
  00008	74 1a		 je	 SHORT $LN5@Lock

; 84   : 		return false;
; 85   : 
; 86   : 	if (FAILED(m_lpd3dVB->Lock(0, 0, (BYTE**)pretVertices, m_dwLockFlag)))

  0000a	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	52		 push	 edx
  00017	ff 50 2c	 call	 DWORD PTR [eax+44]
  0001a	85 c0		 test	 eax, eax
  0001c	78 06		 js	 SHORT $LN5@Lock

; 88   : 
; 89   : 	return true;

  0001e	b0 01		 mov	 al, 1

; 90   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN5@Lock:

; 87   : 		return false;

  00024	32 c0		 xor	 al, al

; 90   : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z ENDP		; CGraphicVertexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z
_TEXT	SEGMENT
_pretVertices$ = 8					; size = 4
?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z PROC	; CGraphicVertexBuffer::LockDynamic, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	if (!m_lpd3dVB)

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 19		 je	 SHORT $LN5@LockDynami

; 73   : 		return false;
; 74   : 
; 75   : 	if (FAILED(m_lpd3dVB->Lock(0, 0, (BYTE**)pretVertices, 0)))

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 00		 push	 0
  0000e	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	51		 push	 ecx
  00016	ff 50 2c	 call	 DWORD PTR [eax+44]
  00019	85 c0		 test	 eax, eax
  0001b	78 06		 js	 SHORT $LN5@LockDynami

; 77   : 
; 78   : 	return true;

  0001d	b0 01		 mov	 al, 1

; 79   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN5@LockDynami:

; 76   : 		return false;

  00023	32 c0		 xor	 al, al

; 79   : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z ENDP	; CGraphicVertexBuffer::LockDynamic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Unlock@CGraphicVertexBuffer@@QBE_NXZ
_TEXT	SEGMENT
?Unlock@CGraphicVertexBuffer@@QBE_NXZ PROC		; CGraphicVertexBuffer::Unlock, COMDAT
; _this$ = ecx

; 54   : 	if (!m_lpd3dVB)

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 0d		 je	 SHORT $LN5@Unlock

; 55   : 		return false;
; 56   : 
; 57   : 	if ( FAILED(m_lpd3dVB->Unlock()) )

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	51		 push	 ecx
  0000a	ff 50 30	 call	 DWORD PTR [eax+48]
  0000d	85 c0		 test	 eax, eax
  0000f	78 03		 js	 SHORT $LN5@Unlock

; 59   : 	return true;

  00011	b0 01		 mov	 al, 1

; 60   : }

  00013	c3		 ret	 0
$LN5@Unlock:

; 58   : 		return false;

  00014	32 c0		 xor	 al, al

; 60   : }

  00016	c3		 ret	 0
?Unlock@CGraphicVertexBuffer@@QBE_NXZ ENDP		; CGraphicVertexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z
_TEXT	SEGMENT
_pretVertices$ = 8					; size = 4
?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z PROC		; CGraphicVertexBuffer::Lock, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 42   : 	if (!m_lpd3dVB)

  00006	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0000a	74 30		 je	 SHORT $LN5@Lock

; 43   : 		return false;
; 44   : 
; 45   : 	DWORD dwLockSize=GetVertexStride()*GetVertexCount();

  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexStride
  00012	8b cf		 mov	 ecx, edi
  00014	8b f0		 mov	 esi, eax
  00016	e8 00 00 00 00	 call	 ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexCount

; 46   : 	if (FAILED(m_lpd3dVB->Lock(0, dwLockSize, (BYTE **) pretVertices, m_dwLockFlag)))

  0001b	ff 77 1c	 push	 DWORD PTR [edi+28]
  0001e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00021	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  00024	0f af f0	 imul	 esi, eax
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	56		 push	 esi
  0002a	6a 00		 push	 0
  0002c	51		 push	 ecx
  0002d	ff 52 2c	 call	 DWORD PTR [edx+44]
  00030	5e		 pop	 esi
  00031	85 c0		 test	 eax, eax
  00033	78 07		 js	 SHORT $LN5@Lock

; 48   : 
; 49   : 	return true;

  00035	b0 01		 mov	 al, 1
  00037	5f		 pop	 edi

; 50   : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN5@Lock:

; 47   : 		return false;

  0003c	32 c0		 xor	 al, al
  0003e	5f		 pop	 edi

; 50   : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z ENDP		; CGraphicVertexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z
_TEXT	SEGMENT
_count$ = 8						; size = 4
_pretVertices$ = 12					; size = 4
?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z PROC	; CGraphicVertexBuffer::LockRange, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 30   : 	if (!m_lpd3dVB)

  00006	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000a	74 26		 je	 SHORT $LN5@LockRange

; 31   : 		return false;
; 32   : 
; 33   : 	DWORD dwLockSize=GetVertexStride() * count;

  0000c	e8 00 00 00 00	 call	 ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexStride

; 34   : 	if (FAILED(m_lpd3dVB->Lock(0, dwLockSize, (BYTE **) pretVertices, m_dwLockFlag)))

  00011	ff 76 1c	 push	 DWORD PTR [esi+28]
  00014	0f af 45 08	 imul	 eax, DWORD PTR _count$[ebp]
  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001b	ff 75 0c	 push	 DWORD PTR _pretVertices$[ebp]
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	51		 push	 ecx
  00024	ff 52 2c	 call	 DWORD PTR [edx+44]
  00027	85 c0		 test	 eax, eax
  00029	78 07		 js	 SHORT $LN5@LockRange

; 36   : 
; 37   : 	return true;

  0002b	b0 01		 mov	 al, 1
  0002d	5e		 pop	 esi

; 38   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN5@LockRange:

; 35   : 		return false;

  00032	32 c0		 xor	 al, al
  00034	5e		 pop	 esi

; 38   : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z ENDP	; CGraphicVertexBuffer::LockRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z
_TEXT	SEGMENT
_dstVertices$ = -4					; size = 4
_bufSize$ = 8						; size = 4
_srcVertices$ = 12					; size = 4
?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z PROC		; CGraphicVertexBuffer::Copy, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 104  : 	void * dstVertices;
; 105  : 
; 106  : 	if (!Lock(&dstVertices))

  00007	8d 4d fc	 lea	 ecx, DWORD PTR _dstVertices$[ebp]
  0000a	51		 push	 ecx
  0000b	8b ce		 mov	 ecx, esi
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	ff d0		 call	 eax
  00014	84 c0		 test	 al, al
  00016	75 07		 jne	 SHORT $LN2@Copy
  00018	5e		 pop	 esi

; 113  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
$LN2@Copy:

; 107  : 		return false;
; 108  : 
; 109  : 	memcpy(dstVertices, srcVertices, bufSize);

  0001f	ff 75 08	 push	 DWORD PTR _bufSize$[ebp]
  00022	ff 75 0c	 push	 DWORD PTR _srcVertices$[ebp]
  00025	ff 75 fc	 push	 DWORD PTR _dstVertices$[ebp]
  00028	e8 00 00 00 00	 call	 _memcpy
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 110  : 
; 111  : 	Unlock();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?Unlock@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::Unlock

; 112  : 	return true;

  00037	b0 01		 mov	 al, 1
  00039	5e		 pop	 esi

; 113  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z ENDP		; CGraphicVertexBuffer::Copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ PROC	; CGraphicVertexBuffer::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 134  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 138  : 	if (!rpObject)

  00003	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@DestroyDev

; 139  : 		return;
; 140  : 
; 141  : 	rpObject->Release();

  0000a	8b 02		 mov	 eax, DWORD PTR [edx]
  0000c	52		 push	 edx
  0000d	ff 50 08	 call	 DWORD PTR [eax+8]

; 142  : 	rpObject = NULL;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@DestroyDev:
  00017	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp

; 136  : }

  00018	c3		 ret	 0
?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ENDP	; CGraphicVertexBuffer::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ PROC	; CGraphicVertexBuffer::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 117  : 	assert(ms_lpd3dDevice != NULL);
; 118  : 	assert(m_lpd3dVB == NULL);
; 119  : 
; 120  : 	if (FAILED(

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	ff 71 14	 push	 DWORD PTR [ecx+20]
  0000e	8b 32		 mov	 esi, DWORD PTR [edx]
  00010	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00013	ff 71 10	 push	 DWORD PTR [ecx+16]
  00016	ff 71 08	 push	 DWORD PTR [ecx+8]
  00019	52		 push	 edx
  0001a	ff 56 5c	 call	 DWORD PTR [esi+92]
  0001d	85 c0		 test	 eax, eax
  0001f	5e		 pop	 esi
  00020	0f 99 c0	 setns	 al

; 121  : 		ms_lpd3dDevice->CreateVertexBuffer(
; 122  : 		m_dwBufferSize,
; 123  : 		m_dwUsage,
; 124  : 		m_dwFVF,
; 125  : 		m_d3dPool,
; 126  : 		&m_lpd3dVB)
; 127  : 		))
; 128  : 		return false;
; 129  : 
; 130  : 	return true;
; 131  : }

  00023	c3		 ret	 0
?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ENDP	; CGraphicVertexBuffer::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z
_TEXT	SEGMENT
_vtxCount$ = 8						; size = 4
_fvf$ = 12						; size = 4
_usage$ = 16						; size = 4
_d3dPool$ = 20						; size = 4
?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z PROC ; CGraphicVertexBuffer::Create, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 140  : 	assert(ms_lpd3dDevice != NULL);
; 141  : 	assert(vtxCount > 0);
; 142  : 
; 143  : 	Destroy();

  00007	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 144  : 
; 145  : 	m_vtxCount = vtxCount;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _vtxCount$[ebp]

; 146  : 	m_dwBufferSize = D3DXGetFVFVertexSize(fvf) * m_vtxCount;

  0000f	8b 75 0c	 mov	 esi, DWORD PTR _fvf$[ebp]
  00012	56		 push	 esi
  00013	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00016	e8 00 00 00 00	 call	 _D3DXGetFVFVertexSize@4
  0001b	0f af 47 18	 imul	 eax, DWORD PTR [edi+24]

; 147  : 	m_d3dPool = d3dPool;
; 148  : 	m_dwUsage = usage;
; 149  : 	m_dwFVF = fvf;

  0001f	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  00022	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00025	8b 45 14	 mov	 eax, DWORD PTR _d3dPool$[ebp]
  00028	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0002b	8b 45 10	 mov	 eax, DWORD PTR _usage$[ebp]
  0002e	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 150  : 
; 151  : 	if (usage == D3DUSAGE_WRITEONLY || usage == D3DUSAGE_DYNAMIC)

  00031	83 f8 08	 cmp	 eax, 8
  00034	74 1c		 je	 SHORT $LN4@Create
  00036	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  0003b	74 15		 je	 SHORT $LN4@Create

; 153  : 	else
; 154  : 		m_dwLockFlag = D3DLOCK_READONLY;

  0003d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H

; 155  : 
; 156  : 	return CreateDeviceObjects();

  00042	8b cf		 mov	 ecx, edi
  00044	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00047	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::CreateDeviceObjects
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 157  : }

  0004e	5d		 pop	 ebp
  0004f	c2 10 00	 ret	 16			; 00000010H
$LN4@Create:

; 152  : 		m_dwLockFlag = 0;

  00052	33 c0		 xor	 eax, eax

; 155  : 
; 156  : 	return CreateDeviceObjects();

  00054	8b cf		 mov	 ecx, edi
  00056	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00059	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::CreateDeviceObjects
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 157  : }

  00060	5d		 pop	 ebp
  00061	c2 10 00	 ret	 16			; 00000010H
?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z ENDP ; CGraphicVertexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Destroy@CGraphicVertexBuffer@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicVertexBuffer@@QAEXXZ PROC		; CGraphicVertexBuffer::Destroy, COMDAT
; _this$ = ecx

; 161  : 	DestroyDeviceObjects();

  00000	e9 00 00 00 00	 jmp	 ?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::DestroyDeviceObjects
?Destroy@CGraphicVertexBuffer@@QAEXXZ ENDP		; CGraphicVertexBuffer::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ??1CGraphicVertexBuffer@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicVertexBuffer@@UAE@XZ PROC			; CGraphicVertexBuffer::~CGraphicVertexBuffer, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicVertexBuffer@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicVertexBuffer@@6B@

; 178  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 179  : }

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicVertexBuffer@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicVertexBuffer@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicVertexBuffer@@UAE@XZ ENDP			; CGraphicVertexBuffer::~CGraphicVertexBuffer
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ??0CGraphicVertexBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGraphicVertexBuffer@@QAE@XZ PROC			; CGraphicVertexBuffer::CGraphicVertexBuffer, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase

; 173  : 	Initialize();

  0000f	8b ce		 mov	 ecx, esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicVertexBuffer@@6B@
  00017	e8 00 00 00 00	 call	 ?Initialize@CGraphicVertexBuffer@@IAEXXZ ; CGraphicVertexBuffer::Initialize

; 174  : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CGraphicVertexBuffer@@QAE@XZ ENDP			; CGraphicVertexBuffer::CGraphicVertexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
