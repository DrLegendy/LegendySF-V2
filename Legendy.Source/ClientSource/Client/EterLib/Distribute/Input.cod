; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A	; CInputDevice::ms_lpDI
PUBLIC	?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
PUBLIC	?ms_bPressedKey@CInputKeyboard@@1PA_NA		; CInputKeyboard::ms_bPressedKey
PUBLIC	?ms_diks@CInputKeyboard@@1PADA			; CInputKeyboard::ms_diks
_BSS	SEGMENT
?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A DD 01H DUP (?) ; CInputDevice::ms_lpDI
?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A DD 01H DUP (?) ; CInputKeyboard::ms_lpKeyboard
?ms_bPressedKey@CInputKeyboard@@1PA_NA DB 0100H DUP (?)	; CInputKeyboard::ms_bPressedKey
?ms_diks@CInputKeyboard@@1PADA DB 0100H DUP (?)		; CInputKeyboard::ms_diks
_BSS	ENDS
PUBLIC	??0CInputDevice@@QAE@XZ				; CInputDevice::CInputDevice
PUBLIC	??1CInputDevice@@UAE@XZ				; CInputDevice::~CInputDevice
PUBLIC	?CreateDevice@CInputDevice@@QAEJPAUHWND__@@@Z	; CInputDevice::CreateDevice
PUBLIC	??_GCInputDevice@@UAEPAXI@Z			; CInputDevice::`scalar deleting destructor'
PUBLIC	??0CInputKeyboard@@QAE@XZ			; CInputKeyboard::CInputKeyboard
PUBLIC	??1CInputKeyboard@@UAE@XZ			; CInputKeyboard::~CInputKeyboard
PUBLIC	?InitializeKeyboard@CInputKeyboard@@QAE_NPAUHWND__@@@Z ; CInputKeyboard::InitializeKeyboard
PUBLIC	?UpdateKeyboard@CInputKeyboard@@QAEXXZ		; CInputKeyboard::UpdateKeyboard
PUBLIC	?ResetKeyboard@CInputKeyboard@@QAEXXZ		; CInputKeyboard::ResetKeyboard
PUBLIC	?IsPressed@CInputKeyboard@@QAE_NH@Z		; CInputKeyboard::IsPressed
PUBLIC	?KeyDown@CInputKeyboard@@QAEXH@Z		; CInputKeyboard::KeyDown
PUBLIC	?KeyUp@CInputKeyboard@@QAEXH@Z			; CInputKeyboard::KeyUp
PUBLIC	??_GCInputKeyboard@@UAEPAXI@Z			; CInputKeyboard::`scalar deleting destructor'
PUBLIC	??_7CInputDevice@@6B@				; CInputDevice::`vftable'
PUBLIC	??_7CInputKeyboard@@6B@				; CInputKeyboard::`vftable'
PUBLIC	??_R4CInputDevice@@6B@				; CInputDevice::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCInputDevice@@@8			; CInputDevice `RTTI Type Descriptor'
PUBLIC	??_R3CInputDevice@@8				; CInputDevice::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CInputDevice@@8				; CInputDevice::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CInputDevice@@8			; CInputDevice::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CInputKeyboard@@6B@			; CInputKeyboard::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCInputKeyboard@@@8			; CInputKeyboard `RTTI Type Descriptor'
PUBLIC	??_R3CInputKeyboard@@8				; CInputKeyboard::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CInputKeyboard@@8				; CInputKeyboard::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CInputKeyboard@@8			; CInputKeyboard::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	_DirectInput8Create@20:PROC
EXTRN	??_ECInputDevice@@UAEPAXI@Z:PROC		; CInputDevice::`vector deleting destructor'
EXTRN	??_ECInputKeyboard@@UAEPAXI@Z:PROC		; CInputKeyboard::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IDirectInput8A:BYTE
EXTRN	_GUID_SysKeyboard:BYTE
EXTRN	_c_dfDIKeyboard:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CInputKeyboard@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CInputKeyboard@@8 DD FLAT:??_R0?AVCInputKeyboard@@@8 ; CInputKeyboard::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CInputKeyboard@@8
rdata$r	ENDS
;	COMDAT ??_R2CInputKeyboard@@8
rdata$r	SEGMENT
??_R2CInputKeyboard@@8 DD FLAT:??_R1A@?0A@EA@CInputKeyboard@@8 ; CInputKeyboard::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CInputDevice@@8
rdata$r	ENDS
;	COMDAT ??_R3CInputKeyboard@@8
rdata$r	SEGMENT
??_R3CInputKeyboard@@8 DD 00H				; CInputKeyboard::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CInputKeyboard@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCInputKeyboard@@@8
data$r	SEGMENT
??_R0?AVCInputKeyboard@@@8 DD FLAT:??_7type_info@@6B@	; CInputKeyboard `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCInputKeyboard@@', 00H
data$r	ENDS
;	COMDAT ??_R4CInputKeyboard@@6B@
rdata$r	SEGMENT
??_R4CInputKeyboard@@6B@ DD 00H				; CInputKeyboard::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCInputKeyboard@@@8
	DD	FLAT:??_R3CInputKeyboard@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CInputDevice@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CInputDevice@@8 DD FLAT:??_R0?AVCInputDevice@@@8 ; CInputDevice::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CInputDevice@@8
rdata$r	ENDS
;	COMDAT ??_R2CInputDevice@@8
rdata$r	SEGMENT
??_R2CInputDevice@@8 DD FLAT:??_R1A@?0A@EA@CInputDevice@@8 ; CInputDevice::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CInputDevice@@8
rdata$r	SEGMENT
??_R3CInputDevice@@8 DD 00H				; CInputDevice::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CInputDevice@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCInputDevice@@@8
data$r	SEGMENT
??_R0?AVCInputDevice@@@8 DD FLAT:??_7type_info@@6B@	; CInputDevice `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCInputDevice@@', 00H
data$r	ENDS
;	COMDAT ??_R4CInputDevice@@6B@
rdata$r	SEGMENT
??_R4CInputDevice@@6B@ DD 00H				; CInputDevice::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCInputDevice@@@8
	DD	FLAT:??_R3CInputDevice@@8
rdata$r	ENDS
;	COMDAT ??_7CInputKeyboard@@6B@
CONST	SEGMENT
??_7CInputKeyboard@@6B@ DD FLAT:??_R4CInputKeyboard@@6B@ ; CInputKeyboard::`vftable'
	DD	FLAT:??_ECInputKeyboard@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CInputDevice@@6B@
CONST	SEGMENT
??_7CInputDevice@@6B@ DD FLAT:??_R4CInputDevice@@6B@	; CInputDevice::`vftable'
	DD	FLAT:??_ECInputDevice@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CInputKeyboard@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CInputDevice@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCInputKeyboard@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCInputKeyboard@@UAEPAXI@Z PROC			; CInputKeyboard::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CInputKeyboard@@UAE@XZ ; CInputKeyboard::~CInputKeyboard
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCInputKeyboard@@UAEPAXI@Z ENDP			; CInputKeyboard::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?KeyUp@CInputKeyboard@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?KeyUp@CInputKeyboard@@QAEXH@Z PROC			; CInputKeyboard::KeyUp, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 	ms_bPressedKey[iIndex] = false;

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0000c	73 10		 jae	 SHORT $LN3@KeyUp
  0000e	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?ms_bPressedKey@CInputKeyboard@@1PA_NA[edx], 0

; 126  : 	OnKeyUp(iIndex);

  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	89 55 08	 mov	 DWORD PTR _iIndex$[ebp], edx

; 127  : }

  0001a	5d		 pop	 ebp

; 126  : 	OnKeyUp(iIndex);

  0001b	ff 60 08	 jmp	 DWORD PTR [eax+8]
$LN3@KeyUp:

; 125  : 	ms_bPressedKey[iIndex] = false;

  0001e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN6@KeyUp:
  00023	cc		 int	 3
?KeyUp@CInputKeyboard@@QAEXH@Z ENDP			; CInputKeyboard::KeyUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?KeyDown@CInputKeyboard@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?KeyDown@CInputKeyboard@@QAEXH@Z PROC			; CInputKeyboard::KeyDown, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	ms_bPressedKey[iIndex] = true;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	c6 80 00 00 00
	00 01		 mov	 BYTE PTR ?ms_bPressedKey@CInputKeyboard@@1PA_NA[eax], 1

; 120  : 	OnKeyDown(iIndex);

  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 45 08	 mov	 DWORD PTR _iIndex$[ebp], eax

; 121  : }

  00012	5d		 pop	 ebp

; 120  : 	OnKeyDown(iIndex);

  00013	ff 62 04	 jmp	 DWORD PTR [edx+4]
?KeyDown@CInputKeyboard@@QAEXH@Z ENDP			; CInputKeyboard::KeyDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?IsPressed@CInputKeyboard@@QAE_NH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?IsPressed@CInputKeyboard@@QAE_NH@Z PROC		; CInputKeyboard::IsPressed, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	return ms_bPressedKey[iIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?ms_bPressedKey@CInputKeyboard@@1PA_NA[eax]

; 132  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?IsPressed@CInputKeyboard@@QAE_NH@Z ENDP		; CInputKeyboard::IsPressed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?ResetKeyboard@CInputKeyboard@@QAEXXZ
_TEXT	SEGMENT
?ResetKeyboard@CInputKeyboard@@QAEXXZ PROC		; CInputKeyboard::ResetKeyboard, COMDAT
; _this$ = ecx

; 52   : 	memset(ms_diks, 0, sizeof(ms_diks));

  00000	68 00 01 00 00	 push	 256			; 00000100H
  00005	6a 00		 push	 0
  00007	68 00 00 00 00	 push	 OFFSET ?ms_diks@CInputKeyboard@@1PADA ; CInputKeyboard::ms_diks
  0000c	e8 00 00 00 00	 call	 _memset

; 53   : 	memset(ms_bPressedKey, 0, sizeof(ms_bPressedKey));

  00011	68 00 01 00 00	 push	 256			; 00000100H
  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET ?ms_bPressedKey@CInputKeyboard@@1PA_NA ; CInputKeyboard::ms_bPressedKey
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 18	 add	 esp, 24			; 00000018H

; 54   : }

  00025	c3		 ret	 0
?ResetKeyboard@CInputKeyboard@@QAEXXZ ENDP		; CInputKeyboard::ResetKeyboard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?UpdateKeyboard@CInputKeyboard@@QAEXXZ
_TEXT	SEGMENT
?UpdateKeyboard@CInputKeyboard@@QAEXXZ PROC		; CInputKeyboard::UpdateKeyboard, COMDAT
; _this$ = ecx

; 89   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 90   : 	if (!ms_lpKeyboard)

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00009	85 c9		 test	 ecx, ecx
  0000b	74 59		 je	 SHORT $LN3@UpdateKeyb

; 91   : 		return;
; 92   : 
; 93   : 	HRESULT hr;
; 94   : 
; 95   : 	hr = ms_lpKeyboard->GetDeviceState(sizeof(ms_diks), &ms_diks);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	68 00 00 00 00	 push	 OFFSET ?ms_diks@CInputKeyboard@@1PADA ; CInputKeyboard::ms_diks
  00014	68 00 01 00 00	 push	 256			; 00000100H
  00019	51		 push	 ecx
  0001a	ff 50 24	 call	 DWORD PTR [eax+36]

; 96   : 
; 97   : 	if (FAILED(hr))

  0001d	85 c0		 test	 eax, eax
  0001f	79 0d		 jns	 SHORT $LN6@UpdateKeyb

; 98   : 	{
; 99   : 		hr = ms_lpKeyboard->Acquire();

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00026	50		 push	 eax
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	ff 51 1c	 call	 DWORD PTR [ecx+28]
  0002c	5f		 pop	 edi

; 114  : 	}
; 115  : }

  0002d	c3		 ret	 0
$LN6@UpdateKeyb:
  0002e	56		 push	 esi

; 100  : 
; 101  : 		//if (hr == DIERR_OTHERAPPHASPRIO || hr == DIERR_NOTACQUIRED);
; 102  : 		return;
; 103  : 	}
; 104  : 
; 105  : 	for (int i = 0; i < 256; ++i)

  0002f	33 f6		 xor	 esi, esi
$LL4@UpdateKeyb:

; 106  : 	{
; 107  : 		if (ms_diks[i] & 0x80)

  00031	56		 push	 esi
  00032	8b cf		 mov	 ecx, edi
  00034	e8 00 00 00 00	 call	 ?IsPressed@CInputKeyboard@@QAE_NH@Z ; CInputKeyboard::IsPressed
  00039	80 be 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_diks@CInputKeyboard@@1PADA[esi], 0
  00040	7d 0e		 jge	 SHORT $LN7@UpdateKeyb

; 108  : 		{
; 109  : 			if (!IsPressed(i))

  00042	84 c0		 test	 al, al
  00044	75 16		 jne	 SHORT $LN2@UpdateKeyb

; 110  : 				KeyDown(i);

  00046	56		 push	 esi
  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?KeyDown@CInputKeyboard@@QAEXH@Z ; CInputKeyboard::KeyDown

; 111  : 		}

  0004e	eb 0c		 jmp	 SHORT $LN2@UpdateKeyb
$LN7@UpdateKeyb:

; 112  : 		else if (IsPressed(i))

  00050	84 c0		 test	 al, al
  00052	74 08		 je	 SHORT $LN2@UpdateKeyb

; 113  : 			KeyUp(i);

  00054	56		 push	 esi
  00055	8b cf		 mov	 ecx, edi
  00057	e8 00 00 00 00	 call	 ?KeyUp@CInputKeyboard@@QAEXH@Z ; CInputKeyboard::KeyUp
$LN2@UpdateKeyb:

; 100  : 
; 101  : 		//if (hr == DIERR_OTHERAPPHASPRIO || hr == DIERR_NOTACQUIRED);
; 102  : 		return;
; 103  : 	}
; 104  : 
; 105  : 	for (int i = 0; i < 256; ++i)

  0005c	46		 inc	 esi
  0005d	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  00063	7c cc		 jl	 SHORT $LL4@UpdateKeyb
  00065	5e		 pop	 esi
$LN3@UpdateKeyb:
  00066	5f		 pop	 edi

; 114  : 	}
; 115  : }

  00067	c3		 ret	 0
?UpdateKeyboard@CInputKeyboard@@QAEXXZ ENDP		; CInputKeyboard::UpdateKeyboard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?InitializeKeyboard@CInputKeyboard@@QAE_NPAUHWND__@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_hWnd$ = 8						; size = 4
?InitializeKeyboard@CInputKeyboard@@QAE_NPAUHWND__@@@Z PROC ; CInputKeyboard::InitializeKeyboard, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 58   : 	NANOBEGIN

  0000a	eb		 DB	 -21			; ffffffebH
  0000b	03		 DB	 3
  0000c	d6		 DB	 -42			; ffffffd6H
  0000d	d7		 DB	 -41			; ffffffd7H
  0000e	01		 DB	 1
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A, 0 ; CInputKeyboard::ms_lpKeyboard
  00016	75 62		 jne	 SHORT $LN9@Initialize

; 59   : 
; 60   : 	if (ms_lpKeyboard)
; 61   : 		return true;
; 62   : 
; 63   : 	if (FAILED(CreateDevice(hWnd)))

  00018	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0001e	e8 00 00 00 00	 call	 ?CreateDevice@CInputDevice@@QAEJPAUHWND__@@@Z ; CInputDevice::CreateDevice
  00023	85 c0		 test	 eax, eax
  00025	78 5e		 js	 SHORT $LN8@Initialize

; 64   : 		return false;
; 65   : 
; 66   : 	HRESULT hr;
; 67   : 
; 68   : 	// Obtain an interface to the system keyboard device.
; 69   : 	if (FAILED(hr = ms_lpDI->CreateDevice(GUID_SysKeyboard, &ms_lpKeyboard, NULL)))

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A ; CInputDevice::ms_lpDI
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00033	68 00 00 00 00	 push	 OFFSET _GUID_SysKeyboard
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	50		 push	 eax
  0003b	ff 51 0c	 call	 DWORD PTR [ecx+12]
  0003e	85 c0		 test	 eax, eax
  00040	78 43		 js	 SHORT $LN8@Initialize

; 70   : 		return false;
; 71   : 
; 72   : 	if (FAILED(hr = ms_lpKeyboard->SetDataFormat(&c_dfDIKeyboard)))

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00047	68 00 00 00 00	 push	 OFFSET _c_dfDIKeyboard
  0004c	50		 push	 eax
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	ff 51 2c	 call	 DWORD PTR [ecx+44]
  00052	85 c0		 test	 eax, eax
  00054	78 2f		 js	 SHORT $LN8@Initialize

; 73   : 		return false;
; 74   : 
; 75   : //	DWORD dwCoopFlags = DISCL_FOREGROUND | DISCL_EXCLUSIVE;
; 76   : //	DWORD dwCoopFlags = DISCL_NONEXCLUSIVE | DISCL_BACKGROUND;
; 77   : 	DWORD dwCoopFlags = DISCL_FOREGROUND | DISCL_NONEXCLUSIVE;
; 78   : 
; 79   : 	if (FAILED(hr = ms_lpKeyboard->SetCooperativeLevel(hWnd, dwCoopFlags)))

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  0005b	6a 06		 push	 6
  0005d	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	50		 push	 eax
  00063	ff 51 34	 call	 DWORD PTR [ecx+52]
  00066	85 c0		 test	 eax, eax
  00068	78 1b		 js	 SHORT $LN8@Initialize

; 80   : 		return false;
; 81   : 
; 82   : 	ms_lpKeyboard->Acquire();

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  0006f	50		 push	 eax
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	ff 51 1c	 call	 DWORD PTR [ecx+28]

; 83   : 
; 84   : 	NANOEND

  00075	eb		 DB	 -21			; ffffffebH
  00076	03		 DB	 3
  00077	d6		 DB	 -42			; ffffffd6H
  00078	d7		 DB	 -41			; ffffffd7H
  00079	00		 DB	 0
$LN9@Initialize:

; 85   : 	return true;
; 86   : }

  0007a	b0 01		 mov	 al, 1
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN8@Initialize:
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	32 c0		 xor	 al, al
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?InitializeKeyboard@CInputKeyboard@@QAE_NPAUHWND__@@@Z ENDP ; CInputKeyboard::InitializeKeyboard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ??1CInputKeyboard@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CInputKeyboard@@UAE@XZ PROC				; CInputKeyboard::~CInputKeyboard, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CInputKeyboard@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CInputKeyboard@@6B@

; 44   : 	if (ms_lpKeyboard)

  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00031	85 d2		 test	 edx, edx
  00033	74 20		 je	 SHORT $LN3@CInputKeyb

; 45   : 		ms_lpKeyboard->Unacquire();

  00035	8b 02		 mov	 eax, DWORD PTR [edx]
  00037	52		 push	 edx
  00038	ff 50 20	 call	 DWORD PTR [eax+32]

; 46   : 
; 47   : 	SAFE_RELEASE(ms_lpKeyboard);

  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A ; CInputKeyboard::ms_lpKeyboard
  00041	85 c9		 test	 ecx, ecx
  00043	74 10		 je	 SHORT $LN3@CInputKeyb
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	51		 push	 ecx
  00048	ff 50 08	 call	 DWORD PTR [eax+8]
  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpKeyboard@CInputKeyboard@@1PAUIDirectInputDevice8A@@A, 0 ; CInputKeyboard::ms_lpKeyboard
$LN3@CInputKeyb:

; 48   : }

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ??1CInputDevice@@UAE@XZ	; CInputDevice::~CInputDevice
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CInputKeyboard@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CInputKeyboard@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CInputKeyboard@@UAE@XZ ENDP				; CInputKeyboard::~CInputKeyboard
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ??0CInputKeyboard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInputKeyboard@@QAE@XZ PROC				; CInputKeyboard::CInputKeyboard, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CInputDevice@@QAE@XZ	; CInputDevice::CInputDevice

; 39   : 	ResetKeyboard();

  0000f	8b ce		 mov	 ecx, esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CInputKeyboard@@6B@
  00017	e8 00 00 00 00	 call	 ?ResetKeyboard@CInputKeyboard@@QAEXXZ ; CInputKeyboard::ResetKeyboard

; 40   : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CInputKeyboard@@QAE@XZ ENDP				; CInputKeyboard::CInputKeyboard
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCInputDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCInputDevice@@UAEPAXI@Z PROC			; CInputDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CInputDevice@@UAE@XZ	; CInputDevice::~CInputDevice
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCInputDevice@@UAEPAXI@Z ENDP			; CInputDevice::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ?CreateDevice@CInputDevice@@QAEJPAUHWND__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?CreateDevice@CInputDevice@@QAEJPAUHWND__@@@Z PROC	; CInputDevice::CreateDevice, COMDAT
; _this$ = ecx

; 20   : 	if (ms_lpDI)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A ; CInputDevice::ms_lpDI
  00006	85 c9		 test	 ecx, ecx
  00008	74 0b		 je	 SHORT $LN2@CreateDevi

; 21   : 	{
; 22   : 		ms_lpDI->AddRef();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	51		 push	 ecx
  0000d	ff 50 04	 call	 DWORD PTR [eax+4]

; 23   : 		return S_OK;

  00010	33 c0		 xor	 eax, eax

; 30   : 					IID_IDirectInput8, (VOID**) &ms_lpDI, NULL)))
; 31   : 		return hr;
; 32   : 
; 33   : 	return S_OK;
; 34   : }

  00012	c2 04 00	 ret	 4
$LN2@CreateDevi:

; 24   : 	}
; 25   : 
; 26   : 	HRESULT hr;
; 27   : 
; 28   : 	// Create a DInput object
; 29   : 	if (FAILED(hr = DirectInput8Create(GetModuleHandle(NULL), DIRECTINPUT_VERSION,

  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET ?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A ; CInputDevice::ms_lpDI
  0001c	68 00 00 00 00	 push	 OFFSET _IID_IDirectInput8A
  00021	68 00 08 00 00	 push	 2048			; 00000800H
  00026	6a 00		 push	 0
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _DirectInput8Create@20
  00034	33 c9		 xor	 ecx, ecx
  00036	85 c0		 test	 eax, eax
  00038	0f 48 c8	 cmovs	 ecx, eax
  0003b	8b c1		 mov	 eax, ecx

; 30   : 					IID_IDirectInput8, (VOID**) &ms_lpDI, NULL)))
; 31   : 		return hr;
; 32   : 
; 33   : 	return S_OK;
; 34   : }

  0003d	c2 04 00	 ret	 4
?CreateDevice@CInputDevice@@QAEJPAUHWND__@@@Z ENDP	; CInputDevice::CreateDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ??1CInputDevice@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CInputDevice@@UAE@XZ PROC				; CInputDevice::~CInputDevice, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CInputDevice@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CInputDevice@@6B@

; 15   : 	SAFE_RELEASE(ms_lpDI);

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A ; CInputDevice::ms_lpDI
  0002e	85 c9		 test	 ecx, ecx
  00030	74 10		 je	 SHORT $LN2@CInputDevi
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	51		 push	 ecx
  00035	ff 50 08	 call	 DWORD PTR [eax+8]
  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpDI@CInputDevice@@1PAUIDirectInput8A@@A, 0 ; CInputDevice::ms_lpDI
$LN2@CInputDevi:

; 16   : }

  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CInputDevice@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CInputDevice@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CInputDevice@@UAE@XZ ENDP				; CInputDevice::~CInputDevice
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Input.cpp
;	COMDAT ??0CInputDevice@@QAE@XZ
_TEXT	SEGMENT
??0CInputDevice@@QAE@XZ PROC				; CInputDevice::CInputDevice, COMDAT
; _this$ = ecx

; 10   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CInputDevice@@6B@

; 11   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CInputDevice@@QAE@XZ ENDP				; CInputDevice::CInputDevice
_TEXT	ENDS
END
