; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CrossProduct2D@@YAMMMMM@Z			; CrossProduct2D
PUBLIC	?IsInTriangle2D@@YA_NMMMMMMMM@Z			; IsInTriangle2D
PUBLIC	?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z ; D3DXVec3Rotation
PUBLIC	?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z ; GetRotationFromMatrix
PUBLIC	?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ; GetPivotAndRotationFromMatrix
PUBLIC	?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z		; ExtractMovement
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
EXTRN	_D3DXMatrixRotationY@8:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIatan2:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z
_TEXT	SEGMENT
_v3Pivot$ = -476					; size = 12
_v3Rotation$ = -464					; size = 12
$T1 = -452						; size = 64
_matTranslation$ = -388					; size = 64
$T2 = -324						; size = 64
_matRotationZ$ = -260					; size = 64
_matRotationX$ = -196					; size = 64
_matRotationY$ = -132					; size = 64
$T3 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pTargetMatrix$ = 8					; size = 4
_pSourceMatrix$ = 12					; size = 4
?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z PROC		; ExtractMovement, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pTargetMatrix$[ebp]

; 121  : 	D3DXVECTOR3 v3Pivot;
; 122  : 	D3DXVECTOR3 v3Rotation;
; 123  : 	GetPivotAndRotationFromMatrix(pSourceMatrix, &v3Pivot, &v3Rotation);

  00017	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _v3Rotation$[ebp]
  0001d	50		 push	 eax
  0001e	8d 85 24 fe ff
	ff		 lea	 eax, DWORD PTR _v3Pivot$[ebp]
  00024	50		 push	 eax
  00025	ff 75 0c	 push	 DWORD PTR _pSourceMatrix$[ebp]
  00028	e8 00 00 00 00	 call	 ?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ; GetPivotAndRotationFromMatrix

; 124  : 
; 125  : 	D3DXMATRIX matRotationX;
; 126  : 	D3DXMatrixRotationX(&matRotationX, v3Rotation.x);

  0002d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp]
  00035	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matRotationX$[ebp]
  0003b	83 c4 08	 add	 esp, 8
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _D3DXMatrixRotationX@8

; 127  : 	D3DXMATRIX matRotationY;
; 128  : 	D3DXMatrixRotationY(&matRotationY, v3Rotation.y);

  00049	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp+4]
  00051	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matRotationY$[ebp]
  00057	51		 push	 ecx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _D3DXMatrixRotationY@8

; 129  : 	D3DXMATRIX matRotationZ;
; 130  : 	D3DXMatrixRotationZ(&matRotationZ, v3Rotation.z);

  00063	f3 0f 10 85 38
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp+8]
  0006b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matRotationZ$[ebp]
  00071	51		 push	 ecx
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 131  : 
; 132  : 	D3DXMATRIX matTranslation;
; 133  : 	D3DXMatrixTranslation(&matTranslation, v3Pivot.x, v3Pivot.y, v3Pivot.z);

  0007d	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp+8]
  00085	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0008b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0008e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00094	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp+4]
  0009c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a2	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp]
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  000b5	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matRotationY$[ebp]
  000bb	50		 push	 eax
  000bc	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matRotationX$[ebp]
  000c2	50		 push	 eax
  000c3	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
  000cf	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matRotationZ$[ebp]
  000d5	50		 push	 eax
  000d6	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000dc	50		 push	 eax
  000dd	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
  000e9	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  000ef	50		 push	 eax
  000f0	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000f6	50		 push	 eax
  000f7	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 135  : 	*pTargetMatrix = matRotationX * matRotationY * matRotationZ * matTranslation;

  00100	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR $T3[ebp]

; 136  : }

  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0010c	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR $T3[ebp+16]
  00110	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00114	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR $T3[ebp+32]
  00118	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  0011c	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T3[ebp+48]
  00120	0f 11 46 30	 movups	 XMMWORD PTR [esi+48], xmm0
  00124	5e		 pop	 esi
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z ENDP		; ExtractMovement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_x$1$ = -16						; size = 4
_x$ = -16						; size = 4
_z$ = -12						; size = 4
tv320 = -8						; size = 8
tv317 = -8						; size = 8
tv310 = -8						; size = 8
tv307 = -8						; size = 8
tv299 = -8						; size = 8
tv296 = -8						; size = 8
tv288 = -8						; size = 8
tv285 = -8						; size = 8
$T1 = -8						; size = 8
_pMatrix$ = 8						; size = 4
_pPivot$ = 12						; size = 4
_pRotation$ = 16					; size = 4
?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z PROC ; GetPivotAndRotationFromMatrix, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 88   : 	float sx = pMatrix->_32;
; 89   : 	float cx = sqrtf(1.0f - sx * sx);

  00006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000e	83 ec 14	 sub	 esp, 20			; 00000014H
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _pMatrix$[ebp]
  00015	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [esi+36]
  0001a	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00022	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00025	0f 5a c0	 cvtps2pd xmm0, xmm0
  00028	66 0f 2e c8	 ucomisd xmm1, xmm0
  0002c	77 06		 ja	 SHORT $LN17@GetPivotAn
  0002e	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00032	eb 05		 jmp	 SHORT $LN18@GetPivotAn
$LN17@GetPivotAn:
  00034	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN18@GetPivotAn:
  00039	0f 57 c9	 xorps	 xmm1, xmm1
  0003c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 92   : 	if (cx < 0.00001f)

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  00048	0f 2f c1	 comiss	 xmm0, xmm1
  0004b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  00050	76 51		 jbe	 SHORT $LN2@GetPivotAn

; 93   : 	{
; 94   : 		if (sx > 0)

  00052	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00059	76 0a		 jbe	 SHORT $LN4@GetPivotAn

; 95   : 			x = D3DX_PI / 2;

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00063	eb 08		 jmp	 SHORT $LN19@GetPivotAn
$LN4@GetPivotAn:

; 96   : 		else
; 97   : 			x = -D3DX_PI / 2;

  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
$LN19@GetPivotAn:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  0006d	f3 0f 11 44 24
	08		 movss	 DWORD PTR _x$1$[esp+24], xmm0
  00073	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]
  00078	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007b	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv320[esp+24], xmm0
  00081	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00085	dd 44 24 10	 fld	 QWORD PTR tv320[esp+24]
  00089	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008c	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv317[esp+24], xmm0
  00092	dd 44 24 10	 fld	 QWORD PTR tv317[esp+24]
  00096	e8 00 00 00 00	 call	 __CIatan2
  0009b	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 101  : 	}

  0009e	e9 8f 00 00 00	 jmp	 $LN20@GetPivotAn
$LN2@GetPivotAn:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000a3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a6	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv310[esp+24], xmm0
  000ac	dd 44 24 10	 fld	 QWORD PTR tv310[esp+24]
  000b0	0f 5a c1	 cvtps2pd xmm0, xmm1
  000b3	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv307[esp+24], xmm0
  000b9	dd 44 24 10	 fld	 QWORD PTR tv307[esp+24]
  000bd	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 106  : 		z = atan2f(-pMatrix->_12, pMatrix->_22);

  000c2	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000c7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000ce	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 104  : 		x = atan2f(sx, cx);

  000d2	d9 5c 24 08	 fstp	 DWORD PTR _x$[esp+24]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000d6	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv299[esp+24], xmm0
  000dc	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  000e1	dd 44 24 10	 fld	 QWORD PTR tv299[esp+24]
  000e5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e8	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv296[esp+24], xmm0
  000ee	dd 44 24 10	 fld	 QWORD PTR tv296[esp+24]
  000f2	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 105  : 		y = atan2f(-pMatrix->_31, pMatrix->_33);

  000f7	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00103	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 106  : 		z = atan2f(-pMatrix->_12, pMatrix->_22);

  00107	d9 5c 24 0c	 fstp	 DWORD PTR _z$[esp+24]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  0010b	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv288[esp+24], xmm0
  00111	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  00116	dd 44 24 10	 fld	 QWORD PTR tv288[esp+24]
  0011a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011d	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv285[esp+24], xmm0
  00123	dd 44 24 10	 fld	 QWORD PTR tv285[esp+24]
  00127	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 106  : 		z = atan2f(-pMatrix->_12, pMatrix->_22);

  0012c	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR _z$[esp+24]
$LN20@GetPivotAn:

; 107  : 	}
; 108  : 
; 109  : 	pRotation->x = x;

  00132	8b 45 10	 mov	 eax, DWORD PTR _pRotation$[ebp]
  00135	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR _x$[esp+24]

; 110  : 	pRotation->y = y;
; 111  : 	pRotation->z = z;
; 112  : 
; 113  : 	pPivot->x = pMatrix->_41;

  0013b	8b 4d 0c	 mov	 ecx, DWORD PTR _pPivot$[ebp]
  0013e	dd 5c 24 10	 fstp	 QWORD PTR $T1[esp+24]
  00142	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00146	f2 0f 10 44 24
	10		 movsd	 xmm0, QWORD PTR $T1[esp+24]
  0014c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00150	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
  00155	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  0015a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0015d	89 01		 mov	 DWORD PTR [ecx], eax

; 114  : 	pPivot->y = pMatrix->_42;

  0015f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 115  : 	pPivot->z = pMatrix->_43;

  00165	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00168	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 116  : }

  0016b	5e		 pop	 esi
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ENDP ; GetPivotAndRotationFromMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
tv279 = -8						; size = 8
tv276 = -8						; size = 8
tv267 = -8						; size = 8
tv264 = -8						; size = 8
tv256 = -8						; size = 8
tv253 = -8						; size = 8
tv245 = -8						; size = 8
tv242 = -8						; size = 8
$T1 = -8						; size = 4
_pRotation$ = 8						; size = 4
_c_pMatrix$ = 12					; size = 4
?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z PROC ; GetRotationFromMatrix, COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 65   : 	float sx = c_pMatrix->_32;
; 66   : 	float cx = sqrtf(1.0f - sx * sx);

  00006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR _c_pMatrix$[ebp]
  00016	f3 0f 10 4f 24	 movss	 xmm1, DWORD PTR [edi+36]
  0001b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00023	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00026	0f 5a c0	 cvtps2pd xmm0, xmm0
  00029	66 0f 2e c8	 ucomisd xmm1, xmm0
  0002d	77 06		 ja	 SHORT $LN17@GetRotatio
  0002f	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00033	eb 05		 jmp	 SHORT $LN18@GetRotatio
$LN17@GetRotatio:
  00035	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN18@GetRotatio:
  0003a	0f 57 c9	 xorps	 xmm1, xmm1
  0003d	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 68   : 	if (cx < 0.00001f)

  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  00049	0f 2f c1	 comiss	 xmm0, xmm1
  0004c	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  00051	76 5a		 jbe	 SHORT $LN2@GetRotatio

; 69   : 	{
; 70   : 		if (sx > 0)

  00053	0f 57 c9	 xorps	 xmm1, xmm1
  00056	0f 2f c1	 comiss	 xmm0, xmm1
  00059	76 0a		 jbe	 SHORT $LN4@GetRotatio

; 71   : 			pRotation->x = D3DX_PI / 2;

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00063	eb 08		 jmp	 SHORT $LN5@GetRotatio
$LN4@GetRotatio:

; 72   : 		else
; 73   : 			pRotation->x = -D3DX_PI / 2;

  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
$LN5@GetRotatio:

; 75   : 		pRotation->y = atan2f(c_pMatrix->_31, c_pMatrix->_11);

  0006d	8b 75 08	 mov	 esi, DWORD PTR _pRotation$[ebp]
  00070	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00074	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00079	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007c	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv279[esp+16], xmm0
  00082	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00086	dd 44 24 08	 fld	 QWORD PTR tv279[esp+16]
  0008a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008d	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv276[esp+16], xmm0
  00093	dd 44 24 08	 fld	 QWORD PTR tv276[esp+16]
  00097	e8 00 00 00 00	 call	 __CIatan2
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 75   : 		pRotation->y = atan2f(c_pMatrix->_31, c_pMatrix->_11);

  0009f	d9 5e 04	 fstp	 DWORD PTR [esi+4]

; 83   : 	}
; 84   : }

  000a2	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN2@GetRotatio:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000ad	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b0	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv267[esp+16], xmm0
  000b6	dd 44 24 08	 fld	 QWORD PTR tv267[esp+16]
  000ba	0f 5a c1	 cvtps2pd xmm0, xmm1
  000bd	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv264[esp+16], xmm0
  000c3	dd 44 24 08	 fld	 QWORD PTR tv264[esp+16]
  000c7	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 80   : 		pRotation->x = atan2f(sx, cx);

  000cc	8b 75 08	 mov	 esi, DWORD PTR _pRotation$[ebp]
  000cf	d9 1e		 fstp	 DWORD PTR [esi]

; 81   : 		pRotation->y = atan2f(-c_pMatrix->_31, c_pMatrix->_33);

  000d1	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]
  000d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000e1	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv256[esp+16], xmm0
  000e7	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  000ec	dd 44 24 08	 fld	 QWORD PTR tv256[esp+16]
  000f0	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f3	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv253[esp+16], xmm0
  000f9	dd 44 24 08	 fld	 QWORD PTR tv253[esp+16]
  000fd	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 81   : 		pRotation->y = atan2f(-c_pMatrix->_31, c_pMatrix->_33);

  00102	d9 5e 04	 fstp	 DWORD PTR [esi+4]

; 82   : 		pRotation->z = atan2f(-c_pMatrix->_12, c_pMatrix->_22);

  00105	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  0010a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00111	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00115	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv245[esp+16], xmm0
  0011b	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00120	dd 44 24 08	 fld	 QWORD PTR tv245[esp+16]
  00124	0f 5a c0	 cvtps2pd xmm0, xmm0
  00127	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv242[esp+16], xmm0
  0012d	dd 44 24 08	 fld	 QWORD PTR tv242[esp+16]
  00131	e8 00 00 00 00	 call	 __CIatan2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 82   : 		pRotation->z = atan2f(-c_pMatrix->_12, c_pMatrix->_22);

  00136	d9 5c 24 08	 fstp	 DWORD PTR $T1[esp+16]

; 83   : 	}
; 84   : }

  0013a	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR $T1[esp+16]
  00140	5f		 pop	 edi
  00141	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  00146	5e		 pop	 esi
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z ENDP ; GetRotationFromMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_qtSrc$ = -32						; size = 16
_qtRet$ = -16						; size = 16
_pvtOut$ = 8						; size = 4
_c_pvtSrc$ = 12						; size = 4
_c_pqtRot$ = 16						; size = 4
?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z PROC ; D3DXVec3Rotation, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_pvtSrc$[ebp]

; 1616 :     pOut->x = -pQ->x;

  00009	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 47   : {

  00011	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1616 :     pOut->x = -pQ->x;

  00012	8b 75 10	 mov	 esi, DWORD PTR _c_pqtRot$[ebp]

; 667  :     x = fx;

  00015	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00019	f3 0f 11 45 e0	 movss	 DWORD PTR _qtSrc$[ebp], xmm0

; 668  :     y = fy;

  0001e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00023	f3 0f 11 45 e4	 movss	 DWORD PTR _qtSrc$[ebp+4], xmm0

; 669  :     z = fz;

  00028	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  0002d	8d 45 f0	 lea	 eax, DWORD PTR _qtRet$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 669  :     z = fz;

  00030	f3 0f 11 45 e8	 movss	 DWORD PTR _qtSrc$[ebp+8], xmm0

; 1616 :     pOut->x = -pQ->x;

  00035	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00039	0f 57 c1	 xorps	 xmm0, xmm1

; 670  :     w = fw;

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _qtSrc$[ebp+12], 0

; 1616 :     pOut->x = -pQ->x;

  00043	f3 0f 11 45 f0	 movss	 DWORD PTR _qtRet$[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  00048	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0004d	0f 57 c1	 xorps	 xmm0, xmm1
  00050	f3 0f 11 45 f4	 movss	 DWORD PTR _qtRet$[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00055	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  0005a	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1618 :     pOut->z = -pQ->z;

  0005b	0f 57 c1	 xorps	 xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  0005e	8d 45 e0	 lea	 eax, DWORD PTR _qtSrc$[ebp]
  00061	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1618 :     pOut->z = -pQ->z;

  00062	f3 0f 11 45 f8	 movss	 DWORD PTR _qtRet$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  00067	8d 45 f0	 lea	 eax, DWORD PTR _qtRet$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  0006a	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  0006f	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  00070	f3 0f 11 45 fc	 movss	 DWORD PTR _qtRet$[ebp+12], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  00075	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 52   : 	D3DXQuaternionMultiply(&qtRet, c_pqtRot, &qtRet);

  0007a	8d 45 f0	 lea	 eax, DWORD PTR _qtRet$[ebp]
  0007d	50		 push	 eax
  0007e	56		 push	 esi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 53   : 
; 54   : 	pvtOut->x=qtRet.x;

  00085	8b 45 08	 mov	 eax, DWORD PTR _pvtOut$[ebp]
  00088	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _qtRet$[ebp]

; 55   : 	pvtOut->y=qtRet.y;
; 56   : 	pvtOut->z=qtRet.z;
; 57   : 
; 58   : 	return pvtOut;

  0008d	5e		 pop	 esi
  0008e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00092	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _qtRet$[ebp+4]
  00097	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  0009c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _qtRet$[ebp+8]
  000a1	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 59   : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z ENDP ; D3DXVec3Rotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?IsInTriangle2D@@YA_NMMMMMMMM@Z
_TEXT	SEGMENT
_c3$ = -12						; size = 4
tv208 = -8						; size = 4
_c1$ = -4						; size = 4
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_bx$ = 16						; size = 4
_by$ = 20						; size = 4
_cx$ = 24						; size = 4
_cy$ = 28						; size = 4
_tx$ = 32						; size = 4
_ty$ = 36						; size = 4
?IsInTriangle2D@@YA_NMMMMMMMM@Z PROC			; IsInTriangle2D, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 11   : 	float c1 = CrossProduct2D(bx-ax, by-ay, tx-ax, ty-ay);

  00006	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  0000b	83 ec 10	 sub	 esp, 16			; 00000010H
  0000e	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _ay$[ebp]
  00013	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00019	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  0001e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _ax$[ebp]
  00023	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00029	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _by$[ebp]
  0002e	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _ay$[ebp]
  00033	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00039	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _bx$[ebp]
  0003e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _ax$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D

; 12   : 	float c2 = CrossProduct2D(cx-bx, cy-by, tx-bx, ty-by);
; 13   : 	float c3 = CrossProduct2D(ax-cx, ay-cy, tx-cx, ty-cy);

  0004d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  00052	f3 0f 5c 45 1c	 subss	 xmm0, DWORD PTR _cy$[ebp]
  00057	d9 5d fc	 fstp	 DWORD PTR _c1$[ebp]
  0005a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00060	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  00065	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _cx$[ebp]
  0006a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00070	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _ay$[ebp]
  00075	f3 0f 5c 45 1c	 subss	 xmm0, DWORD PTR _cy$[ebp]
  0007a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00080	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _ax$[ebp]
  00085	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _cx$[ebp]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D
  00094	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  00099	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _by$[ebp]
  0009e	d9 5d f4	 fstp	 DWORD PTR _c3$[ebp]
  000a1	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a7	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  000ac	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bx$[ebp]
  000b1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000b7	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _cy$[ebp]
  000bc	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _by$[ebp]
  000c1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c7	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _cx$[ebp]
  000cc	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bx$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D

; 14   : 
; 15   : 	if (c1 * c2 > 0.0f && c1 * c3 > 0.0f)

  000db	d8 4d fc	 fmul	 DWORD PTR _c1$[ebp]
  000de	0f 57 d2	 xorps	 xmm2, xmm2
  000e1	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _c3$[ebp]
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
  000e9	d9 5d f8	 fstp	 DWORD PTR tv208[ebp]
  000ec	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR tv208[ebp]
  000f1	0f 2f ca	 comiss	 xmm1, xmm2
  000f4	76 0d		 jbe	 SHORT $LN2@IsInTriang
  000f6	0f 28 c3	 movaps	 xmm0, xmm3
  000f9	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _c1$[ebp]
  000fe	0f 2f c2	 comiss	 xmm0, xmm2
  00101	77 71		 ja	 SHORT $LN15@IsInTriang
$LN2@IsInTriang:

; 16   : 		return true;
; 17   : 
; 18   : 	if (c1 * c2 * c3 == 0.0f)

  00103	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00107	0f 2e ca	 ucomiss xmm1, xmm2
  0010a	9f		 lahf
  0010b	f6 c4 44	 test	 ah, 68			; 00000044H
  0010e	7a 6a		 jp	 SHORT $LN3@IsInTriang

; 19   : 	{
; 20   : 		if (tx < ax)

  00110	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  00115	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _ax$[ebp]
  0011a	0f 2f c8	 comiss	 xmm1, xmm0
  0011d	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _bx$[ebp]
  00122	f3 0f 10 5d 18	 movss	 xmm3, DWORD PTR _cx$[ebp]
  00127	76 0a		 jbe	 SHORT $LN6@IsInTriang

; 21   : 			if (tx < bx)

  00129	0f 2f d0	 comiss	 xmm2, xmm0
  0012c	76 05		 jbe	 SHORT $LN6@IsInTriang

; 22   : 				if (tx < cx)

  0012e	0f 2f d8	 comiss	 xmm3, xmm0
  00131	77 47		 ja	 SHORT $LN3@IsInTriang
$LN6@IsInTriang:

; 23   : 					return false;
; 24   : 
; 25   : 		if (tx > ax)

  00133	0f 2f c1	 comiss	 xmm0, xmm1
  00136	76 0a		 jbe	 SHORT $LN9@IsInTriang

; 26   : 			if (tx > bx)

  00138	0f 2f c2	 comiss	 xmm0, xmm2
  0013b	76 05		 jbe	 SHORT $LN9@IsInTriang

; 27   : 				if (tx > cx)

  0013d	0f 2f c3	 comiss	 xmm0, xmm3
  00140	77 38		 ja	 SHORT $LN3@IsInTriang
$LN9@IsInTriang:

; 28   : 					return false;
; 29   : 
; 30   : 		if (ty < ay)

  00142	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  00147	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _ay$[ebp]
  0014c	0f 2f d8	 comiss	 xmm3, xmm0
  0014f	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _by$[ebp]
  00154	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _cy$[ebp]
  00159	76 0a		 jbe	 SHORT $LN12@IsInTriang

; 31   : 			if (ty < by)

  0015b	0f 2f d0	 comiss	 xmm2, xmm0
  0015e	76 05		 jbe	 SHORT $LN12@IsInTriang

; 32   : 				if (ty < cy)

  00160	0f 2f c8	 comiss	 xmm1, xmm0
  00163	77 15		 ja	 SHORT $LN3@IsInTriang
$LN12@IsInTriang:

; 33   : 					return false;
; 34   : 
; 35   : 		if (ty > ay)

  00165	0f 2f c3	 comiss	 xmm0, xmm3
  00168	76 0a		 jbe	 SHORT $LN15@IsInTriang

; 36   : 			if (ty > by)

  0016a	0f 2f c2	 comiss	 xmm0, xmm2
  0016d	76 05		 jbe	 SHORT $LN15@IsInTriang

; 37   : 				if (ty > cy)

  0016f	0f 2f c1	 comiss	 xmm0, xmm1
  00172	77 06		 ja	 SHORT $LN3@IsInTriang
$LN15@IsInTriang:

; 38   : 					return false;
; 39   : 
; 40   : 		return true;

  00174	b0 01		 mov	 al, 1

; 44   : }

  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c3		 ret	 0
$LN3@IsInTriang:

; 41   : 	}
; 42   : 
; 43   : 	return false;

  0017a	32 c0		 xor	 al, al

; 44   : }

  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
?IsInTriangle2D@@YA_NMMMMMMMM@Z ENDP			; IsInTriangle2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpMath.cpp
;	COMDAT ?CrossProduct2D@@YAMMMMM@Z
_TEXT	SEGMENT
tv67 = 8						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?CrossProduct2D@@YAMMMMM@Z PROC				; CrossProduct2D, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6    : 	return x1*y2-y1*x2;

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _x1$[ebp]
  00008	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0000d	f3 0f 59 4d 14	 mulss	 xmm1, DWORD PTR _y2$[ebp]
  00012	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _x2$[ebp]
  00017	f3 0f 5c c8	 subss	 xmm1, xmm0
  0001b	f3 0f 11 4d 08	 movss	 DWORD PTR tv67[ebp], xmm1
  00020	d9 45 08	 fld	 DWORD PTR tv67[ebp]

; 7    : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?CrossProduct2D@@YAMMMMM@Z ENDP				; CrossProduct2D
_TEXT	ENDS
END
