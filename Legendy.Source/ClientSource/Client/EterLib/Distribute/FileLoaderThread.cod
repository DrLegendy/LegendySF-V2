; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CFileLoaderThread@@QAE@XZ			; CFileLoaderThread::CFileLoaderThread
PUBLIC	??1CFileLoaderThread@@QAE@XZ			; CFileLoaderThread::~CFileLoaderThread
PUBLIC	?Create@CFileLoaderThread@@QAEHPAX@Z		; CFileLoaderThread::Create
PUBLIC	?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFileLoaderThread::Request
PUBLIC	?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z	; CFileLoaderThread::Fetch
PUBLIC	?Shutdown@CFileLoaderThread@@QAEXXZ		; CFileLoaderThread::Shutdown
PUBLIC	?EntryPoint@CFileLoaderThread@@KGIPAX@Z		; CFileLoaderThread::EntryPoint
PUBLIC	?Run@CFileLoaderThread@@IAEIPAX@Z		; CFileLoaderThread::Run
PUBLIC	?Setup@CFileLoaderThread@@IAEIXZ		; CFileLoaderThread::Setup
PUBLIC	?Execute@CFileLoaderThread@@IAEIPAX@Z		; CFileLoaderThread::Execute
PUBLIC	?Destroy@CFileLoaderThread@@IAEXXZ		; CFileLoaderThread::Destroy
PUBLIC	?Process@CFileLoaderThread@@IAEXXZ		; CFileLoaderThread::Process
PUBLIC	??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
PUBLIC	?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@ABEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
PUBLIC	?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
PUBLIC	??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
PUBLIC	??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Emplace_back_internal<CFileLoaderThread::SData * const &>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_in_place@PAPAUSData@CFileLoaderThread@@@std@@YAXAAPAPAUSData@CFileLoaderThread@@@Z ; std::_Destroy_in_place<CFileLoaderThread::SData * *>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
PUBLIC	??$_Destroy_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAXPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@@Z ; std::_Destroy_range<CFileLoaderThread::SData * * *>
PUBLIC	??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
PUBLIC	??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ; std::_Zero_range<CFileLoaderThread::SData * * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@ ; `string'
PUBLIC	??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReleaseSemaphore@12:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__CreateSemaphoreA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	??0Mutex@@QAE@XZ:PROC				; Mutex::Mutex
EXTRN	??1Mutex@@QAE@XZ:PROC				; Mutex::~Mutex
EXTRN	?Lock@Mutex@@QAEXXZ:PROC			; Mutex::Lock
EXTRN	?Unlock@Mutex@@QAEXXZ:PROC			; Mutex::Unlock
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_iLoadingDelayTime@@3HA:DWORD			; g_iLoadingDelayTime
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@
CONST	SEGMENT
??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@ DB 'CFileLoaderTh'
	DB	'read::Request: ReleaseSemaphore error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@
CONST	SEGMENT
??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@ DB 'CFileLoaderTh'
	DB	'read::Execute: Timeout occured while time-out interval is INI'
	DB	'FITE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFileLoaderThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$2
__ehfuncinfo$??0CFileLoaderThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFileLoaderThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SData@CFileLoaderThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SData@CFileLoaderThread@@QAE@XZ$0
__ehfuncinfo$??0SData@CFileLoaderThread@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SData@CFileLoaderThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z PROC ; std::_Zero_range<CFileLoaderThread::SData * * *>, COMDAT

; 1814 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1815 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1816 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1817 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1818 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1819 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ENDP ; std::_Zero_range<CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z PROC ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ENDP ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAXPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Destroy_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAXPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@@Z PROC ; std::_Destroy_range<CFileLoaderThread::SData * * *>, COMDAT

; 969  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 970  :     if _CONSTEXPR_IF (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 971  :         for (; _First != _Last; ++_First) {
; 972  :             _Destroy_in_place(*_First);
; 973  :         }
; 974  :     }
; 975  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAXPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@@Z ENDP ; std::_Destroy_range<CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>, COMDAT

; 1874 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1879 :     } else {
; 1880 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1881 :         for (; 0 < _Count; --_Count) {
; 1882 :             _Backout._Emplace_back();
; 1883 :         }
; 1884 : 
; 1885 :         return _Backout._Release();
; 1886 :     }
; 1887 : }

  00012	5d		 pop	 ebp

; 1875 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1876 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1877 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1878 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ; std::_Zero_range<CFileLoaderThread::SData * * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z PROC ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>, COMDAT

; 1591 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1599 :     } else {
; 1600 :         _Uninitialized_backout<decltype(_UDest)> _Backout{_UDest};
; 1601 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1602 :             _Backout._Emplace_back(*_UFirst);
; 1603 :         }
; 1604 : 
; 1605 :         _UDest = _Backout._Release();
; 1606 :     }
; 1607 : 
; 1608 :     _Seek_wrapped(_Dest, _UDest);
; 1609 :     return _Dest;
; 1610 : }

  00003	5d		 pop	 ebp

; 1592 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1593 :     _Adl_verify_range(_First, _Last);
; 1594 :     auto _UFirst      = _Get_unwrapped(_First);
; 1595 :     const auto _ULast = _Get_unwrapped(_Last);
; 1596 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1597 :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 1598 :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ENDP ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1084 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Obj$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))
; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 08		 push	 8
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8

; 999  :     // deallocate a plain pointer using an allocator
; 1000 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1001 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1002 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);
; 1003 :     } else {
; 1004 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1005 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1006 :     }
; 1007 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUSData@CFileLoaderThread@@@std@@YAXAAPAPAUSData@CFileLoaderThread@@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAPAUSData@CFileLoaderThread@@@std@@YAXAAPAPAUSData@CFileLoaderThread@@@Z PROC ; std::_Destroy_in_place<CFileLoaderThread::SData * *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAPAUSData@CFileLoaderThread@@@std@@YAXAAPAPAUSData@CFileLoaderThread@@@Z ENDP ; std::_Destroy_in_place<CFileLoaderThread::SData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1027 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1028 :     using _Ty = typename _Alloc::value_type;
; 1029 :     _Ptr->~_Ty();
; 1030 :     _Deallocate_plain(_Al, _Ptr);

  00000	e9 00 00 00 00	 jmp	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z
_TEXT	SEGMENT
tv641 = -8						; size = 4
__Newmap$1$ = -4					; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Emplace_back_internal<CFileLoaderThread::SData * const &>, COMDAT
; _this$ = ecx

; 1113 :     void _Emplace_back_internal(_Tys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1114 :         _PUSH_BACK_BEGIN;

  0000b	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0000e	8b f1		 mov	 esi, ecx
  00010	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00013	8b d3		 mov	 edx, ebx
  00015	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00018	a8 03		 test	 al, 3
  0001a	0f 85 fb 00 00
	00		 jne	 $LN13@Emplace_ba
  00020	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00023	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00026	c1 e8 02	 shr	 eax, 2
  00029	3b d0		 cmp	 edx, eax
  0002b	0f 87 e8 00 00
	00		 ja	 $LN42@Emplace_ba

; 1429 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00031	85 d2		 test	 edx, edx
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	0f 45 c2	 cmovne	 eax, edx
  0003b	0f 1f 44 00 00	 npad	 5
$LL6@Emplace_ba:

; 1430 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

  00040	8b f0		 mov	 esi, eax
  00042	2b f2		 sub	 esi, edx
  00044	83 fe 01	 cmp	 esi, 1
  00047	72 05		 jb	 SHORT $LN8@Emplace_ba
  00049	83 f8 08	 cmp	 eax, 8
  0004c	73 13		 jae	 SHORT $LN7@Emplace_ba
$LN8@Emplace_ba:

; 1431 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1432 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

  0004e	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00053	2b c8		 sub	 ecx, eax
  00055	3b c8		 cmp	 ecx, eax
  00057	0f 82 19 01 00
	00		 jb	 $LN37@Emplace_ba

; 1434 :             }
; 1435 : 
; 1436 :             _Newsize *= 2;

  0005d	03 c0		 add	 eax, eax

; 1437 :         }

  0005f	eb df		 jmp	 SHORT $LL6@Emplace_ba
$LN7@Emplace_ba:

; 1438 :         _Count = _Newsize - _Mapsize();
; 1439 : 
; 1440 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

  00061	c1 eb 02	 shr	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00064	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00069	0f 87 02 01 00
	00		 ja	 $LN45@Emplace_ba

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0006f	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00078	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  00082	89 4d f8	 mov	 DWORD PTR tv641[ebp], ecx
  00085	03 c8		 add	 ecx, eax
  00087	51		 push	 ecx
  00088	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008b	89 45 fc	 mov	 DWORD PTR __Newmap$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1444 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0008e	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
  00091	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 1445 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a1	50		 push	 eax
  000a2	3b de		 cmp	 ebx, esi
  000a4	77 1d		 ja	 SHORT $LN10@Emplace_ba

; 1446 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a6	8d 04 99	 lea	 eax, DWORD PTR [ecx+ebx*4]
  000a9	50		 push	 eax
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>

; 1447 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b0	8b ce		 mov	 ecx, esi
  000b2	2b cb		 sub	 ecx, ebx
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>

; 1448 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  000bb	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  000be	83 c4 14	 add	 esp, 20			; 00000014H

; 1449 :         } else { // increment not greater than offset of initial block

  000c1	eb 24		 jmp	 SHORT $LN11@Emplace_ba
$LN10@Emplace_ba:

; 1450 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000c3	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>

; 1451 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000cd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d0	ff 75 fc	 push	 DWORD PTR __Newmap$1$[ebp]
  000d3	8b 45 f8	 mov	 eax, DWORD PTR tv641[ebp]
  000d6	03 c1		 add	 eax, ecx
  000d8	50		 push	 eax
  000d9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
  000e2	83 c4 18	 add	 esp, 24			; 00000018H

; 1452 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e5	8b de		 mov	 ebx, esi
$LN11@Emplace_ba:

; 1453 :         }
; 1454 : 
; 1455 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());
; 1456 :         if (_Map() != _Mapptr()) {

  000e7	53		 push	 ebx
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
  000ee	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f1	83 c4 08	 add	 esp, 8
  000f4	85 c9		 test	 ecx, ecx
  000f6	74 10		 je	 SHORT $LN12@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000fb	c1 e0 02	 shl	 eax, 2
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00105	83 c4 08	 add	 esp, 8
$LN12@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1460 :         _Map() = _Newmap; // point at new

  00108	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$1$[ebp]
  0010b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1461 :         _Mapsize() += _Count;

  0010e	01 77 08	 add	 DWORD PTR [edi+8], esi
  00111	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00114	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00117	eb 02		 jmp	 SHORT $LN13@Emplace_ba
$LN42@Emplace_ba:

; 1114 :         _PUSH_BACK_BEGIN;

  00119	8b d3		 mov	 edx, ebx
$LN13@Emplace_ba:
  0011b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0011e	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00125	49		 dec	 ecx

; 1114 :         _PUSH_BACK_BEGIN;

  00126	23 c2		 and	 eax, edx
  00128	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0012b	03 f0		 add	 esi, eax

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0012d	8b c6		 mov	 eax, esi
  0012f	c1 e8 02	 shr	 eax, 2
  00132	23 c8		 and	 ecx, eax

; 1114 :         _PUSH_BACK_BEGIN;

  00134	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  0013b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0013e	83 3c 0b 00	 cmp	 DWORD PTR [ebx+ecx], 0
  00142	75 13		 jne	 SHORT $LN3@Emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00144	6a 10		 push	 16			; 00000010H
  00146	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0014e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1114 :         _PUSH_BACK_BEGIN;

  00151	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  00154	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
$LN3@Emplace_ba:

; 1115 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

  00157	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  0015a	83 e6 03	 and	 esi, 3
  0015d	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00160	8b 00		 mov	 eax, DWORD PTR [eax]
  00162	89 04 b1	 mov	 DWORD PTR [ecx+esi*4], eax

; 1116 :         _PUSH_BACK_END;

  00165	ff 47 10	 inc	 DWORD PTR [edi+16]
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx

; 1117 :     }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 04 00	 ret	 4
$LN45@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00171	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1433 :                 _Xlen(); // result too long

  00176	8b cf		 mov	 ecx, edi
  00178	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@ABEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
$LN43@Emplace_ba:
  0017d	cc		 int	 3
??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Emplace_back_internal<CFileLoaderThread::SData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
;	COMDAT ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z
_TEXT	SEGMENT
tv512 = -8						; size = 4
tv511 = -4						; size = 4
_container$ = 8						; size = 4
??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z PROC ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 255  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _container$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 94   : {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 255  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0000a	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 94   : {

  0000d	56		 push	 esi
  0000e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1166 :             _Myproxy = _Parent_proxy;

  0000f	8b 39		 mov	 edi, DWORD PTR [ecx]
$LL94@stl_wipe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 905  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 350  :         return this->_Myoff == _Right._Myoff;

  00017	3b d8		 cmp	 ebx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  00019	0f 84 95 00 00
	00		 je	 $LN3@stl_wipe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1180 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001f	85 ff		 test	 edi, edi
  00021	74 04		 je	 SHORT $LN56@stl_wipe
  00023	8b 07		 mov	 eax, DWORD PTR [edi]
  00025	eb 02		 jmp	 SHORT $LN57@stl_wipe
$LN56@stl_wipe:
  00027	33 c0		 xor	 eax, eax
$LN57@stl_wipe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00029	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002c	8b cb		 mov	 ecx, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 97   : 		delete *i;

  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00031	4e		 dec	 esi
  00032	c1 e9 02	 shr	 ecx, 2

; 268  :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  00035	8b d3		 mov	 edx, ebx

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00037	23 f1		 and	 esi, ecx
  00039	89 4d f8	 mov	 DWORD PTR tv512[ebp], ecx

; 268  :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  0003c	83 e2 03	 and	 edx, 3

; 269  :         return _Mycont->_Map[_Block][_Off];

  0003f	c1 e2 02	 shl	 edx, 2
  00042	89 55 fc	 mov	 DWORD PTR tv511[ebp], edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 97   : 		delete *i;

  00045	8b 34 b0	 mov	 esi, DWORD PTR [eax+esi*4]
  00048	8b 34 32	 mov	 esi, DWORD PTR [edx+esi]
  0004b	85 f6		 test	 esi, esi
  0004d	74 3e		 je	 SHORT $LN61@stl_wipe
  0004f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00052	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00057	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005a	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0005d	72 0c		 jb	 SHORT $LN70@stl_wipe

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0005f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00060	50		 push	 eax
  00061	ff 36		 push	 DWORD PTR [esi]
  00063	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00068	83 c4 08	 add	 esp, 8
$LN70@stl_wipe:
  0006b	68 64 01 00 00	 push	 356			; 00000164H
  00070	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00071	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00078	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0007f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	8b 55 fc	 mov	 edx, DWORD PTR tv511[ebp]
  0008a	83 c4 08	 add	 esp, 8
$LN61@stl_wipe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1180 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0008d	85 ff		 test	 edi, edi
  0008f	74 04		 je	 SHORT $LN82@stl_wipe
  00091	8b 07		 mov	 eax, DWORD PTR [edi]
  00093	eb 02		 jmp	 SHORT $LN83@stl_wipe
$LN82@stl_wipe:
  00095	33 c0		 xor	 eax, eax
$LN83@stl_wipe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00097	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 98   : 		*i = NULL;

  0009a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0009d	49		 dec	 ecx
  0009e	23 4d f8	 and	 ecx, DWORD PTR tv512[ebp]

; 283  :         ++_Myoff;

  000a1	43		 inc	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 98   : 		*i = NULL;

  000a2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 283  :         ++_Myoff;

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _container$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 98   : 		*i = NULL;

  000a8	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 283  :         ++_Myoff;

  000af	e9 5d ff ff ff	 jmp	 $LL94@stl_wipe
$LN3@stl_wipe:

; 1325 :         _Tidy();

  000b4	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 102  : }

  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ENDP ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy, COMDAT
; _this$ = ecx

; 1464 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1009 :         return _Mysize() == 0;

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	85 c9		 test	 ecx, ecx

; 1465 :         _Orphan_all();
; 1466 : 
; 1467 :         _Alpty _Almap(_Getal());
; 1468 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN30@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1143 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1144 :             _Myoff() = 0;

  0001c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN30@Tidy:
  0001f	57		 push	 edi

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00020	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00023	85 ff		 test	 edi, edi
  00025	74 1a		 je	 SHORT $LN5@Tidy
$LL25@Tidy:

; 1473 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	4f		 dec	 edi
  0002b	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN7@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	6a 10		 push	 16			; 00000010H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
$LN7@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1472 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0003d	85 ff		 test	 edi, edi
  0003f	75 e6		 jne	 SHORT $LL25@Tidy
$LN5@Tidy:

; 1474 :                 _Getal().deallocate(_Map()[_Block], _DEQUESIZ);
; 1475 :                 _Destroy_in_place(_Map()[_Block]);
; 1476 :             }
; 1477 :         }
; 1478 : 
; 1479 :         if (_Map() != _Mapptr()) {

  00041	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00044	5f		 pop	 edi
  00045	85 c9		 test	 ecx, ecx
  00047	74 10		 je	 SHORT $LN32@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004c	c1 e0 02	 shl	 eax, 2
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00056	83 c4 08	 add	 esp, 8
$LN32@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1485 :     }

  00059	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00060	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00067	5e		 pop	 esi
  00068	c3		 ret	 0
?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@ABEXXZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen, COMDAT
; _this$ = ecx

; 1418 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@ABEXXZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
;	COMDAT ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Proxy_allocator$ = -1					; size = 1
??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >, COMDAT
; _this$ = ecx

; 868  :     ~deque() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 869  :         _Tidy();

  00007	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0000e	50		 push	 eax
  0000f	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi

; 872  :     }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Process@CFileLoaderThread@@IAEXXZ
_TEXT	SEGMENT
_pData$ = -8						; size = 4
_pvBuf$ = -4						; size = 4
?Process@CFileLoaderThread@@IAEXXZ PROC			; CFileLoaderThread::Process, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 153  : 	m_RequestMutex.Lock();

  0000a	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0000d	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1009 :         return _Mysize() == 0;

  00012	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 155  : 	if (m_pRequestDeque.empty())

  00016	75 0e		 jne	 SHORT $LN2@Process

; 156  : 	{
; 157  : 		m_RequestMutex.Unlock();

  00018	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0001b	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  00020	5f		 pop	 edi

; 180  : }

  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@Process:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00026	8b 57 18	 mov	 edx, DWORD PTR [edi+24]

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00029	8b ca		 mov	 ecx, edx
  0002b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  0002e	83 e2 03	 and	 edx, 3

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00031	48		 dec	 eax
  00032	c1 e9 02	 shr	 ecx, 2
  00035	23 c8		 and	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 161  : 	TData * pData = m_pRequestDeque.front();

  00037	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0003a	56		 push	 esi
  0003b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0003e	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1103 :         if (--_Mysize() == 0) {

  00041	83 47 1c ff	 add	 DWORD PTR [edi+28], -1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 161  : 	TData * pData = m_pRequestDeque.front();

  00045	89 75 f8	 mov	 DWORD PTR _pData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1103 :         if (--_Mysize() == 0) {

  00048	75 09		 jne	 SHORT $LN22@Process

; 1104 :             _Myoff() = 0;

  0004a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 1105 :         } else {

  00051	eb 03		 jmp	 SHORT $LN23@Process
$LN22@Process:

; 1106 :             ++_Myoff();

  00053	ff 47 18	 inc	 DWORD PTR [edi+24]
$LN23@Process:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 164  : 	m_RequestMutex.Unlock();

  00056	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00059	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0005e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00062	8b c6		 mov	 eax, esi

; 2145 :         if (_Large_string_engaged()) {

  00064	72 02		 jb	 SHORT $LN32@Process

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00066	8b 06		 mov	 eax, DWORD PTR [esi]
$LN32@Process:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 168  : 	if (CEterPackManager::Instance().Get(pData->File, pData->stFileName.c_str(), &pvBuf))

  00068	8d 4d fc	 lea	 ecx, DWORD PTR _pvBuf$[ebp]
  0006b	51		 push	 ecx
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00072	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  00075	50		 push	 eax
  00076	53		 push	 ebx
  00077	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0007c	84 c0		 test	 al, al
  0007e	74 2b		 je	 SHORT $LN3@Process

; 169  : 	{
; 170  : 		pData->dwSize	= pData->File.Size();

  00080	8b cb		 mov	 ecx, ebx
  00082	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 171  : 		pData->pvBuf	= new char [pData->dwSize];

  00087	50		 push	 eax
  00088	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  0008e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00093	89 86 5c 01 00
	00		 mov	 DWORD PTR [esi+348], eax

; 172  : 		memcpy(pData->pvBuf, pvBuf, pData->dwSize);

  00099	ff b6 60 01 00
	00		 push	 DWORD PTR [esi+352]
  0009f	ff 75 fc	 push	 DWORD PTR _pvBuf$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _memcpy
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@Process:

; 173  : 	}
; 174  : 
; 175  : 	m_CompleteMutex.Lock();

  000ab	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000ae	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  000b3	8d 45 f8	 lea	 eax, DWORD PTR _pData$[ebp]
  000b6	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 176  : 	m_pCompleteDeque.push_back(pData);

  000b7	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  000ba	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Emplace_back_internal<CFileLoaderThread::SData * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 177  : 	m_CompleteMutex.Unlock();

  000bf	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000c2	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock

; 178  : 
; 179  : 	Sleep(g_iLoadingDelayTime);

  000c7	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iLoadingDelayTime@@3HA ; g_iLoadingDelayTime
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  000d3	5e		 pop	 esi
  000d4	5f		 pop	 edi

; 180  : }

  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?Process@CFileLoaderThread@@IAEXXZ ENDP			; CFileLoaderThread::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Destroy@CFileLoaderThread@@IAEXXZ
_TEXT	SEGMENT
?Destroy@CFileLoaderThread@@IAEXXZ PROC			; CFileLoaderThread::Destroy, COMDAT
; _this$ = ecx

; 44   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : 	if (m_hSemaphore)

  00003	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN2@Destroy

; 46   : 	{
; 47   : 		CloseHandle(m_hSemaphore);

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 48   : 		m_hSemaphore = NULL;

  00011	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN2@Destroy:

; 49   : 	}
; 50   : 
; 51   : 	stl_wipe(m_pRequestDeque);

  00018	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >

; 52   : 	stl_wipe(m_pCompleteDeque);

  00021	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
  0002a	83 c4 08	 add	 esp, 8
  0002d	5e		 pop	 esi

; 53   : }

  0002e	c3		 ret	 0
?Destroy@CFileLoaderThread@@IAEXXZ ENDP			; CFileLoaderThread::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Execute@CFileLoaderThread@@IAEIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Execute@CFileLoaderThread@@IAEIPAX@Z PROC		; CFileLoaderThread::Execute, COMDAT
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 87   : 	while (!m_bShutdowned)

  00003	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00007	75 3c		 jne	 SHORT $LN14@Execute
  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__WaitForSingleObject@8
$LL2@Execute:

; 88   : 	{
; 89   : 		DWORD dwWaitResult;
; 90   : 
; 91   : 		dwWaitResult = WaitForSingleObject(m_hSemaphore, INFINITE);

  00010	6a ff		 push	 -1
  00012	ff 76 64	 push	 DWORD PTR [esi+100]
  00015	ff d7		 call	 edi

; 92   : 
; 93   : 		if (m_bShutdowned)

  00017	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  0001b	75 27		 jne	 SHORT $LN15@Execute

; 94   : 			break;
; 95   : 
; 96   : 		switch (dwWaitResult)

  0001d	85 c0		 test	 eax, eax
  0001f	74 16		 je	 SHORT $LN7@Execute
  00021	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00026	75 16		 jne	 SHORT $LN4@Execute

; 101  : 				}
; 102  : 				break;
; 103  : 
; 104  : 			case WAIT_TIMEOUT:
; 105  : 				TraceError("CFileLoaderThread::Execute: Timeout occured while time-out interval is INIFITE");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 04	 add	 esp, 4
  00035	eb 07		 jmp	 SHORT $LN4@Execute
$LN7@Execute:

; 97   : 		{
; 98   : 			case WAIT_OBJECT_0:
; 99   : 				{
; 100  : 					Process();

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?Process@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Process
$LN4@Execute:

; 87   : 	while (!m_bShutdowned)

  0003e	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00042	74 cc		 je	 SHORT $LL2@Execute
$LN15@Execute:
  00044	5f		 pop	 edi
$LN14@Execute:

; 106  : 				break;
; 107  : 		}
; 108  : 	}
; 109  : 
; 110  : 	Destroy();

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?Destroy@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Destroy

; 111  : 	return 1;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	5e		 pop	 esi

; 112  : }

  00052	c2 04 00	 ret	 4
?Execute@CFileLoaderThread@@IAEIPAX@Z ENDP		; CFileLoaderThread::Execute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Setup@CFileLoaderThread@@IAEIXZ
_TEXT	SEGMENT
?Setup@CFileLoaderThread@@IAEIXZ PROC			; CFileLoaderThread::Setup, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi

; 57   : 	m_hSemaphore = CreateSemaphore(NULL,		// no security attributes

  00001	6a 00		 push	 0
  00003	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSemaphoreA@16

; 58   : 								   0,			// initial count
; 59   : 								   65535,		// maximum count
; 60   : 								   NULL);		// unnamed semaphore
; 61   : 	if (!m_hSemaphore)

  00014	33 c9		 xor	 ecx, ecx
  00016	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00019	85 c0		 test	 eax, eax
  0001b	5e		 pop	 esi
  0001c	0f 95 c1	 setne	 cl
  0001f	8b c1		 mov	 eax, ecx

; 62   : 		return 0;
; 63   : 
; 64   : 	return 1;
; 65   : }

  00021	c3		 ret	 0
?Setup@CFileLoaderThread@@IAEIXZ ENDP			; CFileLoaderThread::Setup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Run@CFileLoaderThread@@IAEIPAX@Z
_TEXT	SEGMENT
_arg$ = 8						; size = 4
?Run@CFileLoaderThread@@IAEIPAX@Z PROC			; CFileLoaderThread::Run, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 29   : 	if (!Setup())

  00006	e8 00 00 00 00	 call	 ?Setup@CFileLoaderThread@@IAEIXZ ; CFileLoaderThread::Setup
  0000b	85 c0		 test	 eax, eax
  0000d	75 05		 jne	 SHORT $LN2@Run
  0000f	5e		 pop	 esi

; 33   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@Run:

; 30   : 		return 0;
; 31   : 
; 32   : 	return (Execute(arg));

  00014	ff 75 08	 push	 DWORD PTR _arg$[ebp]
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?Execute@CFileLoaderThread@@IAEIPAX@Z ; CFileLoaderThread::Execute
  0001e	5e		 pop	 esi

; 33   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Run@CFileLoaderThread@@IAEIPAX@Z ENDP			; CFileLoaderThread::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?EntryPoint@CFileLoaderThread@@KGIPAX@Z
_TEXT	SEGMENT
_pThis$ = 8						; size = 4
?EntryPoint@CFileLoaderThread@@KGIPAX@Z PROC		; CFileLoaderThread::EntryPoint, COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	CFileLoaderThread * pThread = (CFileLoaderThread *) pThis;
; 39   : 	return pThread->Run(pThread->Arg());

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	e8 00 00 00 00	 call	 ?Run@CFileLoaderThread@@IAEIPAX@Z ; CFileLoaderThread::Run

; 40   : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?EntryPoint@CFileLoaderThread@@KGIPAX@Z ENDP		; CFileLoaderThread::EntryPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Shutdown@CFileLoaderThread@@QAEXXZ
_TEXT	SEGMENT
?Shutdown@CFileLoaderThread@@QAEXXZ PROC		; CFileLoaderThread::Shutdown, COMDAT
; _this$ = ecx

; 68   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 69   : 	if (!m_hSemaphore)

  00003	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00007	74 26		 je	 SHORT $LN1@Shutdown

; 70   : 		return;
; 71   : 
; 72   : 	BOOL bRet;
; 73   : 
; 74   : 	m_bShutdowned = true;

  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ReleaseSemaphore@12
  00010	c6 46 6c 01	 mov	 BYTE PTR [esi+108], 1
$LL4@Shutdown:

; 75   : 
; 76   : 	do
; 77   : 	{
; 78   : 		bRet = ReleaseSemaphore(m_hSemaphore, 1, NULL);

  00014	6a 00		 push	 0
  00016	6a 01		 push	 1
  00018	ff 76 64	 push	 DWORD PTR [esi+100]
  0001b	ff d7		 call	 edi

; 79   : 	}
; 80   : 	while (!bRet);

  0001d	85 c0		 test	 eax, eax
  0001f	74 f3		 je	 SHORT $LL4@Shutdown

; 81   : 
; 82   : 	WaitForSingleObject(m_hThread, 10000);

  00021	68 10 27 00 00	 push	 10000			; 00002710H
  00026	ff 36		 push	 DWORD PTR [esi]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
  0002e	5f		 pop	 edi
$LN1@Shutdown:

; 83   : }

  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?Shutdown@CFileLoaderThread@@QAEXXZ ENDP		; CFileLoaderThread::Shutdown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z
_TEXT	SEGMENT
_ppData$ = 8						; size = 4
?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z PROC	; CFileLoaderThread::Fetch, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 136  : 	m_CompleteMutex.Lock();

  00007	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0000a	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1009 :         return _Mysize() == 0;

  0000f	83 7e 48 00	 cmp	 DWORD PTR [esi+72], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 138  : 	if (m_pCompleteDeque.empty())

  00013	75 10		 jne	 SHORT $LN2@Fetch

; 139  : 	{
; 140  : 		m_CompleteMutex.Unlock();

  00015	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00018	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  0001d	5f		 pop	 edi

; 141  : 		return false;

  0001e	32 c0		 xor	 al, al

; 149  : }

  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@Fetch:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00025	8b 56 44	 mov	 edx, DWORD PTR [esi+68]

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00028	8b c2		 mov	 eax, edx
  0002a	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  0002d	83 e2 03	 and	 edx, 3

; 547  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00030	c1 e8 02	 shr	 eax, 2
  00033	49		 dec	 ecx
  00034	23 c8		 and	 ecx, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 144  : 	*ppData = m_pCompleteDeque.front();

  00036	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00039	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0003c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0003f	8b 45 08	 mov	 eax, DWORD PTR _ppData$[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1103 :         if (--_Mysize() == 0) {

  00044	83 46 48 ff	 add	 DWORD PTR [esi+72], -1
  00048	75 17		 jne	 SHORT $LN21@Fetch
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  0004a	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1104 :             _Myoff() = 0;

  0004d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  00054	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  00059	5f		 pop	 edi

; 148  : 	return true;

  0005a	b0 01		 mov	 al, 1

; 149  : }

  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN21@Fetch:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1106 :             ++_Myoff();

  00061	ff 46 44	 inc	 DWORD PTR [esi+68]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  00064	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00067	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  0006c	5f		 pop	 edi

; 148  : 	return true;

  0006d	b0 01		 mov	 al, 1

; 149  : }

  0006f	5e		 pop	 esi
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z ENDP	; CFileLoaderThread::Fetch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pData$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_rstFileName$ = 8					; size = 4
?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CFileLoaderThread::Request, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 116  : 	TData * pData = new TData;

  00027	68 64 01 00 00	 push	 356			; 00000164H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	8b f0		 mov	 esi, eax
  00033	83 c4 04	 add	 esp, 4
  00036	89 75 f0	 mov	 DWORD PTR $T2[ebp], esi
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	85 f6		 test	 esi, esi
  00042	74 1f		 je	 SHORT $LN4@Request
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00052	c6 06 00	 mov	 BYTE PTR [esi], 0
  00055	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00058	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005c	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 116  : 	TData * pData = new TData;

  00061	eb 02		 jmp	 SHORT $LN5@Request
$LN4@Request:
  00063	33 f6		 xor	 esi, esi
$LN5@Request:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00065	8b 45 08	 mov	 eax, DWORD PTR _c_rstFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 118  : 	pData->dwSize = 0;

  00068	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], 0
  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	89 75 f0	 mov	 DWORD PTR _pData$[ebp], esi

; 119  : 	pData->pvBuf = NULL;

  0007c	c7 86 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+348], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  00086	3b f0		 cmp	 esi, eax
  00088	74 15		 je	 SHORT $LN21@Request

; 2153 :         return _BUF_SIZE <= _Myres;

  0008a	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0008e	8b c8		 mov	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  00090	72 02		 jb	 SHORT $LN26@Request

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN26@Request:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00094	ff 70 10	 push	 DWORD PTR [eax+16]
  00097	51		 push	 ecx
  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN21@Request:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 122  : 	m_RequestMutex.Lock();

  0009f	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  000a2	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  000a7	8d 45 f0	 lea	 eax, DWORD PTR _pData$[ebp]
  000aa	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 123  : 	m_pRequestDeque.push_back(pData);

  000ab	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 1122 :         _Emplace_back_internal(_Val);

  000ae	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABQAUSData@CFileLoaderThread@@@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Emplace_back_internal<CFileLoaderThread::SData * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 124  : 	m_RequestMutex.Unlock();

  000b3	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  000b6	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock

; 125  : 
; 126  : 	++m_iRestSemCount;

  000bb	ff 47 68	 inc	 DWORD PTR [edi+104]

; 127  : 
; 128  : 	if (!ReleaseSemaphore(m_hSemaphore, m_iRestSemCount, NULL))

  000be	6a 00		 push	 0
  000c0	ff 77 68	 push	 DWORD PTR [edi+104]
  000c3	ff 77 64	 push	 DWORD PTR [edi+100]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseSemaphore@12
  000cc	85 c0		 test	 eax, eax
  000ce	75 0d		 jne	 SHORT $LN32@Request

; 129  : 		TraceError("CFileLoaderThread::Request: ReleaseSemaphore error");

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@
  000d5	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000da	83 c4 04	 add	 esp, 4
$LN32@Request:

; 130  : 
; 131  : 	--m_iRestSemCount;
; 132  : }

  000dd	ff 4f 68	 dec	 DWORD PTR [edi+104]
  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	68 64 01 00 00	 push	 356			; 00000164H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00012	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CFileLoaderThread::Request
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Create@CFileLoaderThread@@QAEHPAX@Z
_TEXT	SEGMENT
_arg$ = 8						; size = 4
?Create@CFileLoaderThread@@QAEHPAX@Z PROC		; CFileLoaderThread::Create, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	Arg(arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR _arg$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 18   : 	m_hThread = (HANDLE) _beginthreadex(NULL, 0, EntryPoint, this, 0, &m_uThreadID);

  0000c	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000f	50		 push	 eax
  00010	6a 00		 push	 0
  00012	56		 push	 esi
  00013	68 00 00 00 00	 push	 OFFSET ?EntryPoint@CFileLoaderThread@@KGIPAX@Z ; CFileLoaderThread::EntryPoint
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 __beginthreadex
  00021	83 c4 18	 add	 esp, 24			; 00000018H
  00024	89 06		 mov	 DWORD PTR [esi], eax
  00026	5e		 pop	 esi

; 19   : 
; 20   : 	if (!m_hThread)

  00027	85 c0		 test	 eax, eax
  00029	75 04		 jne	 SHORT $LN2@Create

; 25   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN2@Create:

; 21   : 		return false;
; 22   : 
; 23   : 	SetThreadPriority(m_hThread, THREAD_PRIORITY_NORMAL);

  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8

; 24   : 	return true;

  00038	b8 01 00 00 00	 mov	 eax, 1

; 25   : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Create@CFileLoaderThread@@QAEHPAX@Z ENDP		; CFileLoaderThread::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ??1CFileLoaderThread@@QAE@XZ
_TEXT	SEGMENT
__Proxy_allocator$1 = -1				; size = 1
__Proxy_allocator$2 = -1				; size = 1
??1CFileLoaderThread@@QAE@XZ PROC			; CFileLoaderThread::~CFileLoaderThread, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 12   : 	Destroy();

  00008	e8 00 00 00 00	 call	 ?Destroy@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Destroy

; 13   : }

  0000d	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  00010	e8 00 00 00 00	 call	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 869  :         _Tidy();

  00015	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001d	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00020	50		 push	 eax
  00021	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00024	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00031	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 13   : }

  00034	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00037	e8 00 00 00 00	 call	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 869  :         _Tidy();

  0003c	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0003f	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00044	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00047	50		 push	 eax
  00048	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0004b	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 871  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00058	83 c4 08	 add	 esp, 8
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 13   : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??1CFileLoaderThread@@QAE@XZ ENDP			; CFileLoaderThread::~CFileLoaderThread
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ??0CFileLoaderThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFileLoaderThread@@QAE@XZ PROC			; CFileLoaderThread::CFileLoaderThread, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFileLoaderThread@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 6    : CFileLoaderThread::CFileLoaderThread() : m_bShutdowned(false), m_pArg(NULL), m_hThread(NULL), m_uThreadID(0)

  0002d	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 7    : {

  00033	8d 7b 0c	 lea	 edi, DWORD PTR [ebx+12]
  00036	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  0003d	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00044	6a 08		 push	 8

; 1092 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  0004c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00053	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0005a	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00061	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00068	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1102 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0006d	8b f0		 mov	 esi, eax

; 1103 :         _Construct_in_place(*_New_proxy, this);

  0006f	89 7d f0	 mov	 DWORD PTR $T3[ebp], edi
  00072	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  00075	50		 push	 eax
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1104 :         _Myproxy            = _New_proxy;

  0007c	89 37		 mov	 DWORD PTR [edi], esi
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1105 :         _New_proxy->_Mycont = this;

  00081	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 7    : {

  00083	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008d	e8 00 00 00 00	 call	 ??0Mutex@@QAE@XZ	; Mutex::Mutex
  00092	8d 7b 38	 lea	 edi, DWORD PTR [ebx+56]
  00095	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00099	6a 08		 push	 8

; 1092 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

  0009b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  000a1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  000a8	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000af	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  000b6	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000bd	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1102 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  000c2	8b f0		 mov	 esi, eax

; 1103 :         _Construct_in_place(*_New_proxy, this);

  000c4	89 7d f0	 mov	 DWORD PTR $T2[ebp], edi
  000c7	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000ca	50		 push	 eax
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1104 :         _Myproxy            = _New_proxy;

  000d1	89 37		 mov	 DWORD PTR [edi], esi
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1105 :         _New_proxy->_Mycont = this;

  000d6	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\FileLoaderThread.cpp

; 7    : {

  000d8	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
  000db	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000df	e8 00 00 00 00	 call	 ??0Mutex@@QAE@XZ	; Mutex::Mutex

; 6    : CFileLoaderThread::CFileLoaderThread() : m_bShutdowned(false), m_pArg(NULL), m_hThread(NULL), m_uThreadID(0)

  000e4	c6 43 6c 00	 mov	 BYTE PTR [ebx+108], 0

; 8    : }

  000e8	8b c3		 mov	 eax, ebx
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$1:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$2:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 38	 add	 ecx, 56			; 00000038H
  0001c	e9 00 00 00 00	 jmp	 ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??0CFileLoaderThread@@QAE@XZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFileLoaderThread@@QAE@XZ
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFileLoaderThread@@QAE@XZ ENDP			; CFileLoaderThread::CFileLoaderThread
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
