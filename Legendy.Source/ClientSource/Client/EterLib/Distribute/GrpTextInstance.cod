; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@	; CDynamicPool<CGraphicTextInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CDynamicPool<CGraphicTextInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 ; CDynamicPool<CGraphicTextInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8	; CDynamicPool<CGraphicTextInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8	; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CGraphicTextInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
CONST	SEGMENT
?c_FillRectIndices@@3QBGB DW 00H			; c_FillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8 DD 00H	; CDynamicPool<CGraphicTextInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CGraphicTextInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCGraphicTextInstance@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ DD 00H	; CDynamicPool<CGraphicTextInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CDynamicPool<CGraphicTextInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	___local_stdio_printf_options
PUBLIC	_snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z ; CGraphicTextInstance::Hyperlink_UpdateMousePos
PUBLIC	?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z ; CGraphicTextInstance::Hyperlink_GetText
PUBLIC	??0CGraphicTextInstance@@QAE@XZ			; CGraphicTextInstance::CGraphicTextInstance
PUBLIC	??1CGraphicTextInstance@@UAE@XZ			; CGraphicTextInstance::~CGraphicTextInstance
PUBLIC	?Destroy@CGraphicTextInstance@@QAEXXZ		; CGraphicTextInstance::Destroy
PUBLIC	?Update@CGraphicTextInstance@@QAEXXZ		; CGraphicTextInstance::Update
PUBLIC	?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ; CGraphicTextInstance::Render
PUBLIC	?ShowCursor@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::ShowCursor
PUBLIC	?HideCursor@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::HideCursor
PUBLIC	?ShowOutLine@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::ShowOutLine
PUBLIC	?HideOutLine@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::HideOutLine
PUBLIC	?SetColor@CGraphicTextInstance@@QAEXK@Z		; CGraphicTextInstance::SetColor
PUBLIC	?SetColor@CGraphicTextInstance@@QAEXMMMM@Z	; CGraphicTextInstance::SetColor
PUBLIC	?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z	; CGraphicTextInstance::SetOutLineColor
PUBLIC	?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetOutLineColor
PUBLIC	?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetHorizonalAlign
PUBLIC	?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z	; CGraphicTextInstance::SetVerticalAlign
PUBLIC	?SetMax@CGraphicTextInstance@@QAEXH@Z		; CGraphicTextInstance::SetMax
PUBLIC	?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ; CGraphicTextInstance::SetTextPointer
PUBLIC	?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CGraphicTextInstance::SetValueString
PUBLIC	?SetValue@CGraphicTextInstance@@QAEXPBDI@Z	; CGraphicTextInstance::SetValue
PUBLIC	?SetPosition@CGraphicTextInstance@@QAEXMMM@Z	; CGraphicTextInstance::SetPosition
PUBLIC	?SetSecret@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetSecret
PUBLIC	?SetOutline@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetOutline
PUBLIC	?SetFeather@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetFeather
PUBLIC	?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetMultiLine
PUBLIC	?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z	; CGraphicTextInstance::SetLimitWidth
PUBLIC	?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z	; CGraphicTextInstance::GetTextSize
PUBLIC	?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicTextInstance::GetValueStringReference
PUBLIC	?GetTextLineCount@CGraphicTextInstance@@QAEGXZ	; CGraphicTextInstance::GetTextLineCount
PUBLIC	?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ; CGraphicTextInstance::PixelPositionToCharacterPosition
PUBLIC	?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ ; CGraphicTextInstance::GetHorizontalAlign
PUBLIC	?__Initialize@CGraphicTextInstance@@IAEXXZ	; CGraphicTextInstance::__Initialize
PUBLIC	?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
PUBLIC	?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z	; CGraphicTextInstance::__GetTextPos
PUBLIC	??1SHyperlink@CGraphicTextInstance@@QAE@XZ	; CGraphicTextInstance::SHyperlink::~SHyperlink
PUBLIC	??1?$CRef@VCGraphicText@@@@QAE@XZ		; CRef<CGraphicText>::~CRef<CGraphicText>
PUBLIC	??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
PUBLIC	?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate
PUBLIC	??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
PUBLIC	?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy
PUBLIC	?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
PUBLIC	??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
PUBLIC	?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
PUBLIC	?CreateSystem@CGraphicTextInstance@@SAXI@Z	; CGraphicTextInstance::CreateSystem
PUBLIC	?DestroySystem@CGraphicTextInstance@@SAXXZ	; CGraphicTextInstance::DestroySystem
PUBLIC	?New@CGraphicTextInstance@@SAPAV1@XZ		; CGraphicTextInstance::New
PUBLIC	?Delete@CGraphicTextInstance@@SAXPAV1@@Z	; CGraphicTextInstance::Delete
PUBLIC	??_GCGraphicTextInstance@@UAEPAXI@Z		; CGraphicTextInstance::`scalar deleting destructor'
PUBLIC	?FindToken@@YAPBDPBD0@Z				; FindToken
PUBLIC	?ReadToken@@YAHPBD@Z				; ReadToken
PUBLIC	??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
PUBLIC	?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z ; CDynamicPool<CGraphicTextInstance>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
PUBLIC	?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
PUBLIC	?isNumberic@@YA_ND@Z				; isNumberic
PUBLIC	?IsValidToken@@YA_NPBD@Z			; IsValidToken
PUBLIC	??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
PUBLIC	??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
PUBLIC	??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
PUBLIC	??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
PUBLIC	??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
PUBLIC	??$_Destroy_range@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAXPAUSEmoji@CGraphicTextInstance@@QAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SEmoji> >
PUBLIC	??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
PUBLIC	??$_Destroy_range@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAXPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
PUBLIC	??$_Pocca@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@ABV10@@Z ; std::_Pocca<std::allocator<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAXPAPAVCGraphicTextInstance@@QAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance *> >
PUBLIC	??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >
PUBLIC	??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
PUBLIC	??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SEmoji *,std::allocator<CGraphicTextInstance::SEmoji> >
PUBLIC	??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
PUBLIC	??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >
PUBLIC	??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicFontTexture::SCharacterInfomation * *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A ; CGraphicTextInstance::ms_kPool
PUBLIC	??_7CGraphicTextInstance@@6B@			; CGraphicTextInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@ ; `string'
PUBLIC	??_C@_0BC@DJBDGBIO@icon?1emoji?1?$CFs?4png@	; `string'
PUBLIC	??_C@_0BC@NDOKGGPB@trying?5to?5load?5?$CFs@	; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicTextInstance@@6B@			; CGraphicTextInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicTextInstance@@@8		; CGraphicTextInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicTextInstance@@8			; CGraphicTextInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicTextInstance@@8			; CGraphicTextInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicTextInstance@@8		; CGraphicTextInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@437f0000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?SelectTexture@CGraphicFontTexture@@QAEXK@Z:PROC ; CGraphicFontTexture::SelectTexture
EXTRN	?UpdateTexture@CGraphicFontTexture@@QAE_NXZ:PROC ; CGraphicFontTexture::UpdateTexture
EXTRN	?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z:PROC ; CGraphicFontTexture::GetCharacterInfomation
EXTRN	?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ:PROC ; CGraphicText::GetFontTexturePointer
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?Render@CGraphicImageInstance@@QAEXXZ:PROC	; CGraphicImageInstance::Render
EXTRN	?SetPosition@CGraphicImageInstance@@QAEXMM@Z:PROC ; CGraphicImageInstance::SetPosition
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	?New@CGraphicImageInstance@@SAPAV1@XZ:PROC	; CGraphicImageInstance::New
EXTRN	?Delete@CGraphicImageInstance@@SAXPAV1@@Z:PROC	; CGraphicImageInstance::Delete
EXTRN	??_ECGraphicTextInstance@@UAEPAXI@Z:PROC	; CGraphicTextInstance::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z:PROC ; CStateManager::DrawIndexedPrimitiveUP
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	?GetCurPos@CIME@@SAHXZ:PROC			; CIME::GetCurPos
EXTRN	?GetCompLen@CIME@@SAHXZ:PROC			; CIME::GetCompLen
EXTRN	?GetULBegin@CIME@@SAHXZ:PROC			; CIME::GetULBegin
EXTRN	?GetULEnd@CIME@@SAHXZ:PROC			; CIME::GetULEnd
EXTRN	?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:PROC ; GetTextTag
EXTRN	?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z:PROC ; Ymir_WideCharToMultiByte
EXTRN	?Ymir_MultiByteToWideChar@@YAHIKPBDHPA_WH@Z:PROC ; Ymir_MultiByteToWideChar
EXTRN	?Arabic_ConvSymbol@@YA_W_W@Z:PROC		; Arabic_ConvSymbol
EXTRN	?Arabic_IsInSymbol@@YA_N_W@Z:PROC		; Arabic_IsInSymbol
EXTRN	?Arabic_IsInPresentation@@YA_N_W@Z:PROC		; Arabic_IsInPresentation
EXTRN	?Arabic_HasPresentation@@YA_NPA_WH@Z:PROC	; Arabic_HasPresentation
EXTRN	?Arabic_MakeShape@@YAIPA_WI0I@Z:PROC		; Arabic_MakeShape
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?gs_mx@@3HA DD	01H DUP (?)				; gs_mx
?gs_my@@3HA DD	01H DUP (?)				; gs_my
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CGraphicTextInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CGraphicTextInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicTextInstance@@8 DD FLAT:??_R0?AVCGraphicTextInstance@@@8 ; CGraphicTextInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R2CGraphicTextInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicTextInstance@@8 ; CGraphicTextInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R3CGraphicTextInstance@@8 DD 00H			; CGraphicTextInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicTextInstance@@@8
data$r	SEGMENT
??_R0?AVCGraphicTextInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicTextInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicTextInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicTextInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicTextInstance@@6B@ DD 00H			; CGraphicTextInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicTextInstance@@@8
	DD	FLAT:??_R3CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NDOKGGPB@trying?5to?5load?5?$CFs@
CONST	SEGMENT
??_C@_0BC@NDOKGGPB@trying?5to?5load?5?$CFs@ DB 'trying to load %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJBDGBIO@icon?1emoji?1?$CFs?4png@
CONST	SEGMENT
??_C@_0BC@DJBDGBIO@icon?1emoji?1?$CFs?4png@ DB 'icon/emoji/%s.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@
CONST	SEGMENT
??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@ DB 'CGraphicText'
	DB	'Instance::Update - Font has not been set', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicTextInstance@@6B@
CONST	SEGMENT
??_7CGraphicTextInstance@@6B@ DD FLAT:??_R4CGraphicTextInstance@@6B@ ; CGraphicTextInstance::`vftable'
	DD	FLAT:??_ECGraphicTextInstance@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CGraphicTextInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A DW 00H ; gs_hyperlinkText
	DB	18 DUP(00H)
	DD	07H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CGraphicTextInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CGraphicTextInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CGraphicTextInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CGraphicTextInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicText@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Update@CGraphicTextInstance@@QAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Update@CGraphicTextInstance@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update@CGraphicTextInstance@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicTextInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CGraphicTextInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CGraphicTextInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CGraphicTextInstance@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CGraphicTextInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CGraphicTextInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$5
xdata$x	ENDS
CRT$XCU	SEGMENT
?gs_hyperlinkText$initializer$@@3P6AXXZA DD FLAT:??__Egs_hyperlinkText@@YAXXZ ; gs_hyperlinkText$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicFontTexture::SCharacterInfomation * *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicFontTexture::SCharacterInfomation * *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  0000a	57		 push	 edi

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b cf		 cmp	 ecx, edi
  00010	74 5f		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00012	8b d6		 mov	 edx, esi
  00014	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00017	2b d1		 sub	 edx, ecx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Uninitiali:
  00020	0f b7 48 e8	 movzx	 ecx, WORD PTR [eax-24]

; 1509 :         ++_Last;

  00024	8d 40 1c	 lea	 eax, DWORD PTR [eax+28]
  00027	66 89 0e	 mov	 WORD PTR [esi], cx
  0002a	0f b7 48 ce	 movzx	 ecx, WORD PTR [eax-50]
  0002e	66 89 4e 02	 mov	 WORD PTR [esi+2], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	33 c9		 xor	 ecx, ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00034	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0003b	c7 44 02 e4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-28], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00043	0f 10 40 d0	 movups	 xmm0, XMMWORD PTR [eax-48]
  00047	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
  0004b	f3 0f 7e 40 e0	 movq	 xmm0, QWORD PTR [eax-32]
  00050	66 0f d6 46 14	 movq	 QWORD PTR [esi+20], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  00055	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00058	66 89 48 d0	 mov	 WORD PTR [eax-48], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0005c	8d 48 e8	 lea	 ecx, DWORD PTR [eax-24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0005f	c7 40 e0 00 00
	00 00		 mov	 DWORD PTR [eax-32], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00066	c7 40 e4 07 00
	00 00		 mov	 DWORD PTR [eax-28], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0006d	3b cf		 cmp	 ecx, edi
  0006f	75 af		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00071	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00074	56		 push	 esi
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  0007e	8b c6		 mov	 eax, esi
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicTextInstance::SEmoji *,std::allocator<CGraphicTextInstance::SEmoji> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00009	56		 push	 esi

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 1508 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 1509 :         ++_Last;

  00018	83 c1 08	 add	 ecx, 8
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	83 c0 08	 add	 eax, 8

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:
  00025	5e		 pop	 esi

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicTextInstance::SEmoji *,std::allocator<CGraphicTextInstance::SEmoji> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAXPAPAVCGraphicTextInstance@@QAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAXPAPAVCGraphicTextInstance@@QAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicTextInstance *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAXPAPAVCGraphicTextInstance@@QAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicTextInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<wchar_t> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAXPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAXPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicFontTexture::SCharacterInfomation *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAXPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 3a		 je	 SHORT $LN3@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00017	72 13		 jb	 SHORT $LN18@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00020	50		 push	 eax
  00021	ff 76 ec	 push	 DWORD PTR [esi-20]
  00024	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00029	83 c4 08	 add	 esp, 8
$LN18@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002c	33 c0		 xor	 eax, eax
  0002e	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  00035	66 89 46 ec	 mov	 WORD PTR [esi-20], ax
  00039	c7 06 07 00 00
	00		 mov	 DWORD PTR [esi], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  0003f	83 c6 1c	 add	 esi, 28			; 0000001cH
  00042	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00045	3b c7		 cmp	 eax, edi
  00047	75 c9		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00049	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAXPAUSEmoji@CGraphicTextInstance@@QAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAXPAUSEmoji@CGraphicTextInstance@@QAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SEmoji> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAXPAUSEmoji@CGraphicTextInstance@@QAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SEmoji> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicFontTexture::SCharacterInfomation * *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicFontTexture::SCharacterInfomation * *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Newvec$ = -44						; size = 4
_this$ = -40						; size = 4
tv379 = -36						; size = 4
tv380 = -32						; size = 4
__Newsize$1$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
__Constructed_last$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00032	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00037	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b f3		 sub	 esi, ebx
  0003f	f7 ee		 imul	 esi
  00041	2b cb		 sub	 ecx, ebx
  00043	03 d6		 add	 edx, esi
  00045	c1 fa 04	 sar	 edx, 4
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
  0004f	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00052	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00057	f7 e9		 imul	 ecx
  00059	03 d1		 add	 edx, ecx
  0005b	c1 fa 04	 sar	 edx, 4
  0005e	8b f2		 mov	 esi, edx
  00060	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00063	03 f2		 add	 esi, edx

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00065	81 fe 49 92 24
	09		 cmp	 esi, 153391689		; 09249249H
  0006b	0f 84 56 01 00
	00		 je	 $LN42@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00071	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00074	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00079	2b cb		 sub	 ecx, ebx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0007b	46		 inc	 esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0007c	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0007e	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00083	89 75 e4	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00086	03 d1		 add	 edx, ecx
  00088	c1 fa 04	 sar	 edx, 4
  0008b	8b ca		 mov	 ecx, edx
  0008d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00090	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00092	8b d1		 mov	 edx, ecx
  00094	d1 ea		 shr	 edx, 1
  00096	2b c2		 sub	 eax, edx
  00098	3b c8		 cmp	 ecx, eax
  0009a	76 07		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0009c	8b c6		 mov	 eax, esi
  0009e	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000a1	eb 0b		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000a3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  000a6	3b c6		 cmp	 eax, esi
  000a8	0f 42 c6	 cmovb	 eax, esi
  000ab	89 45 e8	 mov	 DWORD PTR __Newcapacity$[ebp], eax
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000ae	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  000b3	0f 87 13 01 00
	00		 ja	 $LN43@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b9	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000c0	2b c8		 sub	 ecx, eax
  000c2	c1 e1 02	 shl	 ecx, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c5	51		 push	 ecx

; 65   :     return _Count * _Ty_size;

  000c6	89 4d e0	 mov	 DWORD PTR tv380[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000ce	8b 4d ec	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d1	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d3	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d6	89 5d d4	 mov	 DWORD PTR __Newvec$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 748  :         _TRY_BEGIN

  000d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000e0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000e7	2b c1		 sub	 eax, ecx
  000e9	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ec	51		 push	 ecx
  000ed	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  000f0	89 4d dc	 mov	 DWORD PTR tv379[ebp], ecx
  000f3	57		 push	 edi
  000f4	89 45 ec	 mov	 DWORD PTR __Constructed_last$[ebp], eax
  000f7	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>

; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000fc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ff	83 c4 10	 add	 esp, 16			; 00000010H
  00102	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00105	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00107	3b d0		 cmp	 edx, eax
  00109	75 04		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0010b	8b d3		 mov	 edx, ebx

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0010d	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0010f	57		 push	 edi
  00110	53		 push	 ebx
  00111	52		 push	 edx
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
  00118	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00121	8b 55 ec	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00124	57		 push	 edi
  00125	52		 push	 edx
  00126	50		 push	 eax
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  0012d	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0012f	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00132	85 c9		 test	 ecx, ecx
  00134	74 3d		 je	 SHORT $LN33@Emplace_re

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00136	57		 push	 edi
  00137	ff 77 04	 push	 DWORD PTR [edi+4]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00140	8b 37		 mov	 esi, DWORD PTR [edi]
  00142	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00147	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0014a	2b ce		 sub	 ecx, esi
  0014c	f7 e9		 imul	 ecx
  0014e	03 d1		 add	 edx, ecx
  00150	c1 fa 04	 sar	 edx, 4
  00153	8b ca		 mov	 ecx, edx
  00155	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00158	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015a	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00161	2b c1		 sub	 eax, ecx
  00163	c1 e0 02	 shl	 eax, 2
  00166	50		 push	 eax
  00167	56		 push	 esi
  00168	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0016d	8b 75 e4	 mov	 esi, DWORD PTR __Newsize$1$[ebp]
  00170	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 766  :         return _Newvec + _Whereoff;

  00173	8b 45 dc	 mov	 eax, DWORD PTR tv379[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00176	8d 0c f5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*8]
  0017d	2b ce		 sub	 ecx, esi
  0017f	89 1f		 mov	 DWORD PTR [edi], ebx
  00181	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00184	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00187	8b 4d e0	 mov	 ecx, DWORD PTR tv380[ebp]
  0018a	03 cb		 add	 ecx, ebx
  0018c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 767  :     }

  0018f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00192	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00199	59		 pop	 ecx
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	5b		 pop	 ebx
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  001a3	8b 45 ec	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001a6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a9	50		 push	 eax
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b0	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001b3	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b6	ff 75 d4	 push	 DWORD PTR __Newvec$[ebp]
  001b9	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate

; 762  :         _RERAISE;

  001be	6a 00		 push	 0
  001c0	6a 00		 push	 0
  001c2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@Emplace_re:

; 738  :             _Xlength();

  001c7	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
$LN43@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001cc	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN40@Emplace_re:
  001d1	cc		 int	 3
  001d2	cc		 int	 3
  001d3	cc		 int	 3
  001d4	cc		 int	 3
  001d5	cc		 int	 3
  001d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z
_TEXT	SEGMENT
__New_capacity$1$ = -4					; size = 4
___formal$ = 8						; size = 4
__New_array$1 = 12					; size = 4
__Ptr$ = 12						; size = 4
__Right_size$1$ = 16					; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>, COMDAT

; 693  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000a	53		 push	 ebx
  0000b	57		 push	 edi
  0000c	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0000f	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00012	66 89 01	 mov	 WORD PTR [ecx], ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2655 :         auto& _Right_data             = _Right._Mypair._Myval2;

  00015	8d 5a 04	 lea	 ebx, DWORD PTR [edx+4]
  00018	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0001c	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00020	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00027	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0002e	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00032	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00035	89 45 10	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00038	72 02		 jb	 SHORT $LN16@construct

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN16@construct:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0003c	83 f8 08	 cmp	 eax, 8
  0003f	73 16		 jae	 SHORT $LN13@construct
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00041	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  00044	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2661 :             _My_data._Mysize = _Right_size;

  00047	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004a	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7
  00051	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 695  :     }

  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN13@construct:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00057	83 c8 07	 or	 eax, 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0005a	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
  0005f	3b c1		 cmp	 eax, ecx
  00061	0f 47 c1	 cmova	 eax, ecx
  00064	89 45 fc	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00067	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00068	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0006d	77 40		 ja	 SHORT $LN42@construct

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0006f	03 c0		 add	 eax, eax
  00071	56		 push	 esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00078	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  0007a	8d 45 0c	 lea	 eax, DWORD PTR __New_array$1[ebp]
  0007d	50		 push	 eax
  0007e	57		 push	 edi
  0007f	89 75 0c	 mov	 DWORD PTR __New_array$1[ebp], esi
  00082	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00087	8b 4d 10	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  0008a	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  00091	51		 push	 ecx
  00092	53		 push	 ebx
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2671 :         _My_data._Mysize = _Right_size;

  00099	8b 45 10	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0009c	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2671 :         _My_data._Mysize = _Right_size;

  0009f	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2672 :         _My_data._Myres  = _New_capacity;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  000a5	89 47 14	 mov	 DWORD PTR [edi+20], eax
  000a8	5e		 pop	 esi
  000a9	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 695  :     }

  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN42@construct:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000af	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN40@construct:
  000b4	cc		 int	 3
??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 03	 sar	 ebx, 3
  0001a	c1 f8 03	 sar	 eax, 3

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00022	0f 84 c4 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 03	 sar	 ecx, 3

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00056	0f 87 95 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 03	 shl	 eax, 3

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 55 0c	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00080	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00083	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00086	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00088	3b da		 cmp	 ebx, edx
  0008a	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008c	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008f	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00091	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00093	56		 push	 esi
  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SEmoji *,std::allocator<CGraphicTextInstance::SEmoji> >
  0009c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0009f	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a7	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
$LN5@Emplace_re:
  000aa	56		 push	 esi
  000ab	50		 push	 eax
  000ac	52		 push	 edx
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@YAPAUSEmoji@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USEmoji@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SEmoji *,std::allocator<CGraphicTextInstance::SEmoji> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000b5	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b8	85 c9		 test	 ecx, ecx
  000ba	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000bc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bf	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c1	83 e0 f8	 and	 eax, -8			; fffffff8H
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cb	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000ce	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000d1	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000d3	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000d5	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  000d8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000de	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e0	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000e1	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 767  :     }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000ec	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f1	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f6	cc		 int	 3
??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?IsValidToken@@YA_NPBD@Z
_TEXT	SEGMENT
_iter$ = 8						; size = 4
?IsValidToken@@YA_NPBD@Z PROC				; IsValidToken, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 91   : 	return	iter[0]=='@' &&

  00004	8b 75 08	 mov	 esi, DWORD PTR _iter$[ebp]
  00007	80 3e 40	 cmp	 BYTE PTR [esi], 64	; 00000040H
  0000a	75 49		 jne	 SHORT $LN3@IsValidTok
  0000c	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00016	83 c4 04	 add	 esp, 4
  00019	84 c0		 test	 al, al
  0001b	74 38		 je	 SHORT $LN3@IsValidTok
  0001d	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00027	83 c4 04	 add	 esp, 4
  0002a	84 c0		 test	 al, al
  0002c	74 27		 je	 SHORT $LN3@IsValidTok
  0002e	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00038	83 c4 04	 add	 esp, 4
  0003b	84 c0		 test	 al, al
  0003d	74 16		 je	 SHORT $LN3@IsValidTok
  0003f	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00049	83 c4 04	 add	 esp, 4
  0004c	84 c0		 test	 al, al
  0004e	74 05		 je	 SHORT $LN3@IsValidTok
  00050	b0 01		 mov	 al, 1
  00052	5e		 pop	 esi

; 92   : 		isNumberic(iter[1]) &&
; 93   : 		isNumberic(iter[2]) &&
; 94   : 		isNumberic(iter[3]) &&
; 95   : 		isNumberic(iter[4]);
; 96   : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@IsValidTok:

; 91   : 	return	iter[0]=='@' &&

  00055	32 c0		 xor	 al, al
  00057	5e		 pop	 esi

; 92   : 		isNumberic(iter[1]) &&
; 93   : 		isNumberic(iter[2]) &&
; 94   : 		isNumberic(iter[3]) &&
; 95   : 		isNumberic(iter[4]);
; 96   : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?IsValidToken@@YA_NPBD@Z ENDP				; IsValidToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?isNumberic@@YA_ND@Z
_TEXT	SEGMENT
_chr$ = 8						; size = 1
?isNumberic@@YA_ND@Z PROC				; isNumberic, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	if (chr >= '0' && chr <= '9')

  00003	8a 45 08	 mov	 al, BYTE PTR _chr$[ebp]
  00006	2c 30		 sub	 al, 48			; 00000030H
  00008	3c 09		 cmp	 al, 9
  0000a	0f 96 c0	 setbe	 al

; 85   : 		return true;
; 86   : 	return false;
; 87   : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?isNumberic@@YA_ND@Z ENDP				; isNumberic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??__Fgs_hyperlinkText@@YAXXZ
text$yd	SEGMENT
??__Fgs_hyperlinkText@@YAXXZ PROC			; `dynamic atexit destructor for 'gs_hyperlinkText'', COMDAT

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 08		 cmp	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00007	72 28		 jb	 SHORT $LN7@dynamic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A

; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00010	68 00 00 00 00	 push	 OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  00015	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ; std::_Destroy_in_place<wchar_t *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20
  0001f	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00026	50		 push	 eax
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	5e		 pop	 esi
$LN7@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00031	33 c0		 xor	 eax, eax
  00033	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16, 0
  0003d	c7 05 14 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 7
  00047	66 a3 00 00 00
	00		 mov	 WORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A, ax
  0004d	c3		 ret	 0
??__Fgs_hyperlinkText@@YAXXZ ENDP			; `dynamic atexit destructor for 'gs_hyperlinkText''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??__Egs_hyperlinkText@@YAXXZ
text$di	SEGMENT
??__Egs_hyperlinkText@@YAXXZ PROC			; `dynamic initializer for 'gs_hyperlinkText'', COMDAT

; 22   : static std::wstring gs_hyperlinkText;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_hyperlinkText@@YAXXZ ; `dynamic atexit destructor for 'gs_hyperlinkText''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_hyperlinkText@@YAXXZ ENDP			; `dynamic initializer for 'gs_hyperlinkText''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A ; CGraphicTextInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicTextInstance::ms_kPool'', COMDAT

; 17   : CDynamicPool<CGraphicTextInstance>		CGraphicTextInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicTextInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv254 = 8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;
; 1254 :         pointer& _Myfirst = _My_data._Myfirst;
; 1255 :         pointer& _Mylast  = _My_data._Mylast;
; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0000e	2b 3e		 sub	 edi, DWORD PTR [esi]
  00010	c1 ff 02	 sar	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00013	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00018	77 4c		 ja	 SHORT $LN26@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0001a	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0001d	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  0001e	89 45 08	 mov	 DWORD PTR tv254[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00021	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00026	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00027	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00029	53		 push	 ebx
  0002a	ff 76 04	 push	 DWORD PTR [esi+4]
  0002d	ff 36		 push	 DWORD PTR [esi]
  0002f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@YAPAPAVCGraphicTextInstance@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance * *,std::allocator<CGraphicTextInstance *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00034	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00039	85 c9		 test	 ecx, ecx
  0003b	74 12		 je	 SHORT $LN20@Reallocate

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 e0 fc	 and	 eax, -4			; fffffffcH
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004c	83 c4 08	 add	 esp, 8
$LN20@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0004f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00052	89 1e		 mov	 DWORD PTR [esi], ebx
  00054	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00057	8b 45 08	 mov	 eax, DWORD PTR tv254[ebp]
  0005a	03 c3		 add	 eax, ebx
  0005c	5f		 pop	 edi
  0005d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 1269 :     }

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN26@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00066	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN24@Reallocate:
  0006b	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z PROC ; CDynamicPool<CGraphicTextInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z ENDP ; CDynamicPool<CGraphicTextInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ PROC	; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CDynamicPo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 fc	 and	 eax, -4			; fffffffcH
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1699 :             _Myend   = pointer();

  0005e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN13@CDynamicPo:
  00065	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 26   : 		}

  00066	c3		 ret	 0
??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ENDP	; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ReadToken@@YAHPBD@Z
_TEXT	SEGMENT
_token$ = 8						; size = 4
?ReadToken@@YAHPBD@Z PROC				; ReadToken, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	int nRet = (token[1]-'0')*1000 + (token[2]-'0')*100 + (token[3]-'0')*10 + (token[4]-'0');

  00003	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  00006	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  0000a	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0000d	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  00011	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00014	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00017	0f be 42 03	 movsx	 eax, BYTE PTR [edx+3]
  0001b	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0001e	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00021	0f be 42 04	 movsx	 eax, BYTE PTR [edx+4]
  00025	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 120  : 	if (nRet == 9999)

  00028	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  0002d	05 b0 2f ff ff	 add	 eax, -53328		; ffff2fb0H
  00032	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  00037	0f 44 c1	 cmove	 eax, ecx

; 121  : 		return CP_UTF8;
; 122  : 	return nRet;
; 123  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ReadToken@@YAHPBD@Z ENDP				; ReadToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?FindToken@@YAPBDPBD0@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?FindToken@@YAPBDPBD0@Z PROC				; FindToken, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 100  : 	while(begin < end)

  00004	8b 75 08	 mov	 esi, DWORD PTR _begin$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _end$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	73 33		 jae	 SHORT $LN18@FindToken
  0000f	90		 npad	 1
$LL2@FindToken:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5154 :     _First =

  00010	8b c7		 mov	 eax, edi
  00012	2b c6		 sub	 eax, esi
  00014	50		 push	 eax
  00015	6a 40		 push	 64			; 00000040H
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _memchr
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5155 :         static_cast<_InIt>(_CSTD memchr(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
; 5156 :     return _First ? _First : _Last;

  00020	8b f7		 mov	 esi, edi
  00022	85 c0		 test	 eax, eax
  00024	0f 45 f0	 cmovne	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 104  : 		if(end-begin>5 && IsValidToken(begin))

  00027	8b c7		 mov	 eax, edi
  00029	2b c6		 sub	 eax, esi
  0002b	83 f8 05	 cmp	 eax, 5
  0002e	7e 0d		 jle	 SHORT $LN4@FindToken
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?IsValidToken@@YA_NPBD@Z ; IsValidToken
  00036	83 c4 04	 add	 esp, 4
  00039	84 c0		 test	 al, al
  0003b	75 0b		 jne	 SHORT $LN15@FindToken
$LN4@FindToken:

; 107  : 		}
; 108  : 		else
; 109  : 		{
; 110  : 			++begin;

  0003d	46		 inc	 esi
  0003e	3b f7		 cmp	 esi, edi
  00040	72 ce		 jb	 SHORT $LL2@FindToken
$LN18@FindToken:

; 111  : 		}
; 112  : 	}
; 113  : 
; 114  : 	return end;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi

; 115  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN15@FindToken:
  00048	5f		 pop	 edi

; 105  : 		{
; 106  : 			return begin;

  00049	8b c6		 mov	 eax, esi

; 115  : }

  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?FindToken@@YAPBDPBD0@Z ENDP				; FindToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicTextInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicTextInstance@@UAEPAXI@Z PROC		; CGraphicTextInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicTextInstance@@UAE@XZ ; CGraphicTextInstance::~CGraphicTextInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 7c		 push	 124			; 0000007cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicTextInstance@@UAEPAXI@Z ENDP		; CGraphicTextInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Delete@CGraphicTextInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CGraphicTextInstance@@SAXPAV1@@Z PROC		; CGraphicTextInstance::Delete, COMDAT

; 958  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  : 	pkInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 960  : 	ms_kPool.Free(pkInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 961  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
  00039	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 961  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CGraphicTextInstance@@SAXPAV1@@Z ENDP		; CGraphicTextInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?New@CGraphicTextInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CGraphicTextInstance@@SAPAV1@XZ PROC		; CGraphicTextInstance::New, COMDAT

; 953  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CGraphicTextInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16, ecx
  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	6a 7c		 push	 124			; 0000007cH
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0CGraphicTextInstance@@QAE@XZ ; CGraphicTextInstance::CGraphicTextInstance
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+12
  00070	74 21		 je	 SHORT $LN14@New

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 954  : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+32
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 955  : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+32
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 954  : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 955  : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1559 :         return _My_data._Mylast[-1];

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1338 :         --_Mylast;

  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 955  : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CGraphicTextInstance@@SAPAV1@XZ$0:
  00000	6a 7c		 push	 124			; 0000007cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CGraphicTextInstance@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CGraphicTextInstance@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CGraphicTextInstance@@SAPAV1@XZ ENDP		; CGraphicTextInstance::New
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?DestroySystem@CGraphicTextInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CGraphicTextInstance@@SAXXZ PROC		; CGraphicTextInstance::DestroySystem, COMDAT

; 948  : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 948  : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 234  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 235  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 950  : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00041	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 950  : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CGraphicTextInstance@@SAXXZ ENDP		; CGraphicTextInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?CreateSystem@CGraphicTextInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CGraphicTextInstance@@SAXI@Z PROC		; CGraphicTextInstance::CreateSystem, COMDAT

; 943  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 943  : {

  0000e	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  0000f	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+28, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 13		 jbe	 SHORT $LN6@CreateSyst

; 1307 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	77 33		 ja	 SHORT $LN19@CreateSyst

; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00027	56		 push	 esi
  00028	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  0002d	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00032	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+24
  00037	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  0003d	c1 f8 02	 sar	 eax, 2

; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00040	3b f0		 cmp	 esi, eax
  00042	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1307 :             if (_Newcapacity > max_size()) {

  00044	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004a	77 0e		 ja	 SHORT $LN19@CreateSyst

; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  0004c	56		 push	 esi
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00052	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
$LN13@CreateSyst:
  00057	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 945  : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN19@CreateSyst:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1308 :                 _Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
$LN20@CreateSyst:
  0005f	cc		 int	 3
?CreateSystem@CGraphicTextInstance@@SAXI@Z ENDP		; CGraphicTextInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	85 c0		 test	 eax, eax
  00007	74 4d		 je	 SHORT $LN4@vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	ff 77 04	 push	 DWORD PTR [edi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00016	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001d	f7 e9		 imul	 ecx
  0001f	03 d1		 add	 edx, ecx
  00021	c1 fa 04	 sar	 edx, 4
  00024	8b ca		 mov	 ecx, edx
  00026	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00029	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00032	2b c1		 sub	 eax, ecx
  00034	c1 e0 02	 shl	 eax, 2
  00037	50		 push	 eax
  00038	ff 37		 push	 DWORD PTR [edi]
  0003a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0003f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00048	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1699 :             _Myend   = pointer();

  0004f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00056	5f		 pop	 edi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00057	c3		 ret	 0
??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z PROC ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000d	2b c8		 sub	 ecx, eax
  0000f	c1 e1 02	 shl	 ecx, 2
  00012	51		 push	 ecx
  00013	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8

; 804  :     }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ENDP ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
;	COMDAT ??1?$CRef@VCGraphicText@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CRef@VCGraphicText@@@@QAE@XZ PROC			; CRef<CGraphicText>::~CRef<CGraphicText>, COMDAT
; _this$ = ecx

; 37   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CRef@VCGraphicText@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 53   : 			if (m_pObject)

  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00027	85 c9		 test	 ecx, ecx
  00029	74 0b		 je	 SHORT $LN4@CRef

; 54   : 			{
; 55   : 				m_pObject->Release();

  0002b	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@CRef:

; 38   : 			Clear();
; 39   : 		}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5e		 pop	 esi
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CRef@VCGraphicText@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CRef@VCGraphicText@@@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CRef@VCGraphicText@@@@QAE@XZ ENDP			; CRef<CGraphicText>::~CRef<CGraphicText>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
_TEXT	SEGMENT
??1SHyperlink@CGraphicTextInstance@@QAE@XZ PROC		; CGraphicTextInstance::SHyperlink::~SHyperlink, COMDAT
; _this$ = ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 13		 jb	 SHORT $LN7@SHyperlink
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00012	50		 push	 eax
  00013	ff 76 04	 push	 DWORD PTR [esi+4]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
$LN7@SHyperlink:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001e	33 c0		 xor	 eax, eax
  00020	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00027	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0002e	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
??1SHyperlink@CGraphicTextInstance@@QAE@XZ ENDP		; CGraphicTextInstance::SHyperlink::~SHyperlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z PROC	; CGraphicTextInstance::__GetTextPos, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 71 50	 mov	 esi, DWORD PTR [ecx+80]
  00007	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 59   : {

  0000a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 79 4c	 mov	 edi, DWORD PTR [ecx+76]
  0000e	0f 57 db	 xorps	 xmm3, xmm3
  00011	2b f7		 sub	 esi, edi
  00013	0f 57 d2	 xorps	 xmm2, xmm2
  00016	c1 fe 02	 sar	 esi, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 60   : 	index = min(index, m_pCharInfoVector.size());

  00019	39 75 08	 cmp	 DWORD PTR _index$[ebp], esi
  0001c	0f 42 75 08	 cmovb	 esi, DWORD PTR _index$[ebp]
  00020	33 d2		 xor	 edx, edx

; 61   : 
; 62   : 	float sx = 0;
; 63   : 	float sy = 0;
; 64   : 	float fFontMaxHeight = 0;
; 65   : 
; 66   : 	for(DWORD i=0; i<index; ++i)

  00022	85 f6		 test	 esi, esi
  00024	74 47		 je	 SHORT $LN3@GetTextPos

; 67   : 	{
; 68   : 		if (sx+float(m_pCharInfoVector[i]->width) > m_fLimitWidth)

  00026	f3 0f 10 61 14	 movss	 xmm4, DWORD PTR [ecx+20]
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@GetTextPos:
  00030	8b 0c 97	 mov	 ecx, DWORD PTR [edi+edx*4]
  00033	0f bf 41 02	 movsx	 eax, WORD PTR [ecx+2]
  00037	66 0f 6e c0	 movd	 xmm0, eax
  0003b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0003e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00042	0f 2f c4	 comiss	 xmm0, xmm4
  00045	76 0a		 jbe	 SHORT $LN5@GetTextPos

; 69   : 		{
; 70   : 			sx = 0;
; 71   : 			sy += fFontMaxHeight;

  00047	0f 28 c2	 movaps	 xmm0, xmm2
  0004a	0f 57 c9	 xorps	 xmm1, xmm1
  0004d	f3 0f 58 d8	 addss	 xmm3, xmm0
$LN5@GetTextPos:

; 72   : 		}
; 73   : 
; 74   : 		sx += float(m_pCharInfoVector[i]->advance);
; 75   : 		fFontMaxHeight = max(float(m_pCharInfoVector[i]->height), fFontMaxHeight);

  00051	0f bf 41 04	 movsx	 eax, WORD PTR [ecx+4]
  00055	42		 inc	 edx
  00056	f3 0f 58 49 18	 addss	 xmm1, DWORD PTR [ecx+24]
  0005b	66 0f 6e c0	 movd	 xmm0, eax
  0005f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00062	f3 0f 5f c2	 maxss	 xmm0, xmm2
  00066	0f 28 d0	 movaps	 xmm2, xmm0
  00069	3b d6		 cmp	 edx, esi
  0006b	72 c3		 jb	 SHORT $LL4@GetTextPos
$LN3@GetTextPos:

; 76   : 	}
; 77   : 
; 78   : 	*x = sx;

  0006d	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]

; 79   : 	*y = sy;

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00076	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00079	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3

; 80   : }

  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ENDP	; CGraphicTextInstance::__GetTextPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z
_TEXT	SEGMENT
_pFontTexture$ = 8					; size = 4
_codePage$ = 12						; size = 2
_text$ = 16						; size = 2
_pInsCharInfo$ = 16					; size = 4
_dwColor$ = 20						; size = 4
?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z PROC ; CGraphicTextInstance::__DrawCharacter, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 43   : 	CGraphicFontTexture::TCharacterInfomation* pInsCharInfo = pFontTexture->GetCharacterInfomation(codePage, text);

  00005	ff 75 10	 push	 DWORD PTR _text$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pFontTexture$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _codePage$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
  00015	8b f8		 mov	 edi, eax
  00017	89 7d 10	 mov	 DWORD PTR _pInsCharInfo$[ebp], edi

; 44   : 
; 45   : 	if (pInsCharInfo)

  0001a	85 ff		 test	 edi, edi
  0001c	74 78		 je	 SHORT $LN2@DrawCharac
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0001e	8b 53 5c	 mov	 edx, DWORD PTR [ebx+92]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 47   : 		m_dwColorInfoVector.push_back(dwColor);

  00021	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00024	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00027	74 0b		 je	 SHORT $LN9@DrawCharac

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 45 14	 mov	 eax, DWORD PTR _dwColor$[ebp]
  0002c	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  0002e	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00032	eb 0a		 jmp	 SHORT $LN8@DrawCharac
$LN9@DrawCharac:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00034	8d 45 14	 lea	 eax, DWORD PTR _dwColor$[ebp]
  00037	50		 push	 eax
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
$LN8@DrawCharac:

; 704  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 48   : 		m_pCharInfoVector.push_back(pInsCharInfo);

  00041	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00044	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00047	74 08		 je	 SHORT $LN16@DrawCharac

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00049	89 38		 mov	 DWORD PTR [eax], edi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  0004b	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0004f	eb 0a		 jmp	 SHORT $LN15@DrawCharac
$LN16@DrawCharac:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00051	8d 55 10	 lea	 edx, DWORD PTR _pInsCharInfo$[ebp]
  00054	52		 push	 edx
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
$LN15@DrawCharac:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 50   : 		m_textWidth += pInsCharInfo->advance;

  0005b	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]

; 51   : 		m_textHeight = max(pInsCharInfo->height, m_textHeight);

  0005f	0f b7 4b 0e	 movzx	 ecx, WORD PTR [ebx+14]
  00063	56		 push	 esi
  00064	66 0f 6e c0	 movd	 xmm0, eax
  00068	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006b	f3 0f 58 47 18	 addss	 xmm0, DWORD PTR [edi+24]
  00070	f3 0f 2c c0	 cvttss2si eax, xmm0
  00074	66 89 43 0c	 mov	 WORD PTR [ebx+12], ax
  00078	8b c1		 mov	 eax, ecx
  0007a	0f bf 77 04	 movsx	 esi, WORD PTR [edi+4]
  0007e	3b f1		 cmp	 esi, ecx
  00080	0f b7 d6	 movzx	 edx, si

; 52   : 		return pInsCharInfo->advance;

  00083	5e		 pop	 esi
  00084	0f 4e d0	 cmovle	 edx, eax
  00087	66 89 53 0e	 mov	 WORD PTR [ebx+14], dx
  0008b	f3 0f 2c 47 18	 cvttss2si eax, DWORD PTR [edi+24]
  00090	5f		 pop	 edi

; 56   : }

  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
$LN2@DrawCharac:
  00096	5f		 pop	 edi

; 53   : 	}
; 54   : 
; 55   : 	return 0;

  00097	33 c0		 xor	 eax, eax

; 56   : }

  00099	5b		 pop	 ebx
  0009a	5d		 pop	 ebp
  0009b	c2 10 00	 ret	 16			; 00000010H
?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ENDP ; CGraphicTextInstance::__DrawCharacter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__Initialize@CGraphicTextInstance@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGraphicTextInstance@@IAEXXZ PROC		; CGraphicTextInstance::__Initialize, COMDAT
; _this$ = ecx

; 1146 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00003	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]

; 68   : 
; 69   : 			m_pObject = pObject;

  00006	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 70   : 
; 71   : 			if (m_pObject)
; 72   : 				m_pObject->AddReference();
; 73   : 
; 74   : 			if (pOldObject)

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 05		 je	 SHORT $LN7@Initialize

; 75   : 				pOldObject->Release();

  00011	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@Initialize:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1164 : 	m_textWidth = 0;

  00016	33 c0		 xor	 eax, eax
  00018	c7 46 10 01 10
	00 00		 mov	 DWORD PTR [esi+16], 4097 ; 00001001H
  0001f	c7 46 14 00 00
	c8 44		 mov	 DWORD PTR [esi+20], 1153957888 ; 44c80000H
  00026	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0002d	c7 46 1c 00 00
	00 3f		 mov	 DWORD PTR [esi+28], 1056964608 ; 3f000000H
  00034	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
  00038	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1165 : 	m_textHeight = 0;
; 1166 : 
; 1167 : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  0003b	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0003e	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00041	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 1168 : 
; 1169 : 	m_dwOutLineColor=0xff000000;

  00044	c7 46 08 00 00
	00 ff		 mov	 DWORD PTR [esi+8], -16777216 ; ff000000H
  0004b	5e		 pop	 esi

; 1170 : }

  0004c	c3		 ret	 0
?__Initialize@CGraphicTextInstance@@IAEXXZ ENDP		; CGraphicTextInstance::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ
_TEXT	SEGMENT
?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ PROC	; CGraphicTextInstance::GetHorizontalAlign, COMDAT
; _this$ = ecx

; 1142 : 	return m_hAlign;

  00000	0f b6 41 10	 movzx	 eax, BYTE PTR [ecx+16]

; 1143 : }

  00004	c3		 ret	 0
?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ ENDP	; CGraphicTextInstance::GetHorizontalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z
_TEXT	SEGMENT
_iPixelPosition$ = 8					; size = 4
?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z PROC ; CGraphicTextInstance::PixelPositionToCharacterPosition, COMDAT
; _this$ = ecx

; 1126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1128 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 79 50	 mov	 edi, DWORD PTR [ecx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1127 : 	int icurPosition = 0;

  0000e	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00010	2b fa		 sub	 edi, edx
  00012	c1 ff 02	 sar	 edi, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1128 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00015	85 ff		 test	 edi, edi
  00017	7e 1b		 jle	 SHORT $LN3@PixelPosit
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _iPixelPosition$[ebp]
  0001c	0f 1f 40 00	 npad	 4
$LL4@PixelPosit:

; 1129 : 	{
; 1130 : 		CGraphicFontTexture::TCharacterInfomation* pCurCharInfo = m_pCharInfoVector[i];
; 1131 : 		icurPosition += pCurCharInfo->width;

  00020	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00022	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  00026	03 f1		 add	 esi, ecx

; 1132 : 
; 1133 : 		if (iPixelPosition < icurPosition)

  00028	3b de		 cmp	 ebx, esi
  0002a	7c 0b		 jl	 SHORT $LN1@PixelPosit

; 1128 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  0002c	40		 inc	 eax
  0002d	83 c2 04	 add	 edx, 4
  00030	3b c7		 cmp	 eax, edi
  00032	7c ec		 jl	 SHORT $LL4@PixelPosit
$LN3@PixelPosit:

; 1134 : 			return i;
; 1135 : 	}
; 1136 : 
; 1137 : 	return -1;

  00034	83 c8 ff	 or	 eax, -1
$LN1@PixelPosit:
  00037	5f		 pop	 edi

; 1138 : }

  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ENDP ; CGraphicTextInstance::PixelPositionToCharacterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextLineCount@CGraphicTextInstance@@QAEGXZ
_TEXT	SEGMENT
?GetTextLineCount@CGraphicTextInstance@@QAEGXZ PROC	; CGraphicTextInstance::GetTextLineCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00000	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00003	0f 57 c0	 xorps	 xmm0, xmm0
  00006	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1093 : {

  00009	57		 push	 edi

; 1094 : 	CGraphicFontTexture::TCharacterInfomation* pCurCharInfo;
; 1095 : 	CGraphicFontTexture::TPCharacterInfomationVector::iterator itor;
; 1096 : 
; 1097 : 	float fx = 0.0f;
; 1098 : 	WORD wLineCount = 1;

  0000a	bf 01 00 00 00	 mov	 edi, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000f	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1099 : 	for (itor=m_pCharInfoVector.begin(); itor!=m_pCharInfoVector.end(); ++itor)

  00011	74 4e		 je	 SHORT $LN35@GetTextLin

; 1105 : 		//float fFontHeight=float(pCurCharInfo->height);
; 1106 : 
; 1107 : 		if (fx+fFontWidth > m_fLimitWidth)

  00013	f3 0f 10 59 14	 movss	 xmm3, DWORD PTR [ecx+20]
  00018	56		 push	 esi
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetTextLin:

; 1100 : 	{
; 1101 : 		pCurCharInfo = *itor;
; 1102 : 
; 1103 : 		float fFontWidth=float(pCurCharInfo->width);
; 1104 : 		float fFontAdvance=float(pCurCharInfo->advance);

  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	f3 0f 10 51 18	 movss	 xmm2, DWORD PTR [ecx+24]

; 1105 : 		//float fFontHeight=float(pCurCharInfo->height);
; 1106 : 
; 1107 : 		if (fx+fFontWidth > m_fLimitWidth)

  00027	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  0002b	66 0f 6e c9	 movd	 xmm1, ecx
  0002f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00032	f3 0f 58 c8	 addss	 xmm1, xmm0
  00036	0f 2f cb	 comiss	 xmm1, xmm3
  00039	76 03		 jbe	 SHORT $LN5@GetTextLin
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
$LN5@GetTextLin:

; 1113 : 		fx += fFontAdvance;

  0003e	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00041	0f b7 f1	 movzx	 esi, cx
  00044	f3 0f 58 c2	 addss	 xmm0, xmm2
  00048	0f b7 cf	 movzx	 ecx, di
  0004b	0f 46 f1	 cmovbe	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  0004e	83 c0 04	 add	 eax, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1113 : 		fx += fFontAdvance;

  00051	0f b7 ce	 movzx	 ecx, si
  00054	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00056	8b f9		 mov	 edi, ecx

; 149  :         return _Ptr == _Right._Ptr;

  00058	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1099 : 	for (itor=m_pCharInfoVector.begin(); itor!=m_pCharInfoVector.end(); ++itor)

  0005a	75 c4		 jne	 SHORT $LL4@GetTextLin

; 1114 : 	}
; 1115 : 
; 1116 : 	return wLineCount;

  0005c	8b c6		 mov	 eax, esi
  0005e	5e		 pop	 esi
  0005f	5f		 pop	 edi

; 1117 : }

  00060	c3		 ret	 0
$LN35@GetTextLin:

; 1114 : 	}
; 1115 : 
; 1116 : 	return wLineCount;

  00061	66 8b c7	 mov	 ax, di
  00064	5f		 pop	 edi

; 1117 : }

  00065	c3		 ret	 0
?GetTextLineCount@CGraphicTextInstance@@QAEGXZ ENDP	; CGraphicTextInstance::GetTextLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CGraphicTextInstance::GetValueStringReference, COMDAT
; _this$ = ecx

; 1089 : 	return m_stText;

  00000	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]

; 1090 : }

  00003	c3		 ret	 0
?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CGraphicTextInstance::GetValueStringReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z
_TEXT	SEGMENT
_pRetWidth$ = 8						; size = 4
_pRetHeight$ = 12					; size = 4
?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z PROC	; CGraphicTextInstance::GetTextSize, COMDAT
; _this$ = ecx

; 1120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1121 : 	*pRetWidth = m_textWidth;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pRetWidth$[ebp]
  00006	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0000a	89 10		 mov	 DWORD PTR [eax], edx

; 1122 : 	*pRetHeight = m_textHeight;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pRetHeight$[ebp]
  0000f	0f b7 49 0e	 movzx	 ecx, WORD PTR [ecx+14]
  00013	89 08		 mov	 DWORD PTR [eax], ecx

; 1123 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z ENDP	; CGraphicTextInstance::GetTextSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z
_TEXT	SEGMENT
_fWidth$ = 8						; size = 4
?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z PROC	; CGraphicTextInstance::SetLimitWidth, COMDAT
; _this$ = ecx

; 1053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1054 : 	m_fLimitWidth = fWidth;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fWidth$[ebp]
  00008	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1055 : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z ENDP	; CGraphicTextInstance::SetLimitWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z PROC	; CGraphicTextInstance::SetMultiLine, COMDAT
; _this$ = ecx

; 1033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1034 : 	m_isMultiLine = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 1a	 mov	 BYTE PTR [ecx+26], al

; 1035 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z ENDP	; CGraphicTextInstance::SetMultiLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetFeather@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetFeather@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetFeather, COMDAT
; _this$ = ecx

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1022 : 	if (Value)

  00003	80 7d 08 00	 cmp	 BYTE PTR _Value$[ebp], 0
  00007	74 11		 je	 SHORT $LN2@SetFeather

; 1023 : 	{
; 1024 : 		m_fFontFeather = c_fFontFeather;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000

; 1025 : 	}
; 1026 : 	else
; 1027 : 	{
; 1028 : 		m_fFontFeather = 0.0f;
; 1029 : 	}
; 1030 : }

  00011	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@SetFeather:
  0001a	0f 57 c0	 xorps	 xmm0, xmm0
  0001d	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetFeather@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetFeather
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutline@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetOutline@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetOutline, COMDAT
; _this$ = ecx

; 1016 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1017 : 	m_isOutline = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 1b	 mov	 BYTE PTR [ecx+27], al

; 1018 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetOutline@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetOutline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetSecret@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetSecret@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetSecret, COMDAT
; _this$ = ecx

; 1011 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1012 : 	m_isSecret = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 19	 mov	 BYTE PTR [ecx+25], al

; 1013 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSecret@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetSecret
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetPosition@CGraphicTextInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CGraphicTextInstance@@QAEXMMM@Z PROC	; CGraphicTextInstance::SetPosition, COMDAT
; _this$ = ecx

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1077 : 	m_v3Position.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 38	 movss	 DWORD PTR [ecx+56], xmm0

; 1078 : 	m_v3Position.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 3c	 movss	 DWORD PTR [ecx+60], xmm0

; 1079 : 	m_v3Position.z = fz;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001c	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 1080 : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CGraphicTextInstance@@QAEXMMM@Z ENDP	; CGraphicTextInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetValue@CGraphicTextInstance@@QAEXPBDI@Z
_TEXT	SEGMENT
_c_szText$ = 8						; size = 4
_len$ = 12						; size = 4
?SetValue@CGraphicTextInstance@@QAEXPBDI@Z PROC		; CGraphicTextInstance::SetValue, COMDAT
; _this$ = ecx

; 1067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00006	8b 7d 08	 mov	 edi, DWORD PTR _c_szText$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1067 : {

  00009	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b d7		 mov	 edx, edi
  0000d	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL19@SetValue:
  00010	8a 02		 mov	 al, BYTE PTR [edx]
  00012	42		 inc	 edx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL19@SetValue
  00017	2b d1		 sub	 edx, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  00019	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]

; 2153 :         return _BUF_SIZE <= _Myres;

  0001c	83 7b 34 10	 cmp	 DWORD PTR [ebx+52], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00020	72 03		 jb	 SHORT $LN9@SetValue

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
$LN9@SetValue:

; 4151 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00025	52		 push	 edx
  00026	57		 push	 edi
  00027	ff 73 30	 push	 DWORD PTR [ebx+48]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00030	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1068 : 	if (0 == m_stText.compare(c_szText))

  00033	85 c0		 test	 eax, eax
  00035	74 20		 je	 SHORT $LN1@SetValue
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00037	8b d7		 mov	 edx, edi
  00039	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0003c	0f 1f 40 00	 npad	 4
$LL20@SetValue:
  00040	8a 02		 mov	 al, BYTE PTR [edx]
  00042	42		 inc	 edx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL20@SetValue
  00047	2b d1		 sub	 edx, ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00049	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  0004c	52		 push	 edx
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1072 : 	m_isUpdate = false;

  00053	c6 43 44 00	 mov	 BYTE PTR [ebx+68], 0
$LN1@SetValue:

; 1073 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?SetValue@CGraphicTextInstance@@QAEXPBDI@Z ENDP		; CGraphicTextInstance::SetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv288 = 8						; size = 4
_c_stValue$ = 8						; size = 4
?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CGraphicTextInstance::SetValueString, COMDAT
; _this$ = ecx

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_stValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1058 : {

  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  0000b	8b ce		 mov	 ecx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  0000d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1059 : 	if (0 == m_stText.compare(c_stValue))

  00011	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00014	72 02		 jb	 SHORT $LN27@SetValueSt

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN27@SetValueSt:

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  0001c	8b c7		 mov	 eax, edi

; 2145 :         if (_Large_string_engaged()) {

  0001e	72 02		 jb	 SHORT $LN12@SetValueSt

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00020	8b 07		 mov	 eax, DWORD PTR [edi]
$LN12@SetValueSt:

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00022	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00025	52		 push	 edx
  00026	51		 push	 ecx
  00027	ff 77 10	 push	 DWORD PTR [edi+16]
  0002a	89 55 08	 mov	 DWORD PTR tv288[ebp], edx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00033	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1059 : 	if (0 == m_stText.compare(c_stValue))

  00036	85 c0		 test	 eax, eax
  00038	74 1b		 je	 SHORT $LN1@SetValueSt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  0003a	3b fe		 cmp	 edi, esi
  0003c	74 13		 je	 SHORT $LN17@SetValueSt

; 2153 :         return _BUF_SIZE <= _Myres;

  0003e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00042	72 02		 jb	 SHORT $LN22@SetValueSt

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00044	8b 36		 mov	 esi, DWORD PTR [esi]
$LN22@SetValueSt:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00046	ff 75 08	 push	 DWORD PTR tv288[ebp]
  00049	8b cf		 mov	 ecx, edi
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN17@SetValueSt:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1063 : 	m_isUpdate = false;

  00051	c6 43 44 00	 mov	 BYTE PTR [ebx+68], 0
$LN1@SetValueSt:
  00055	5f		 pop	 edi

; 1064 : }

  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CGraphicTextInstance::SetValueString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z
_TEXT	SEGMENT
_pText$ = 8						; size = 4
?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z PROC ; CGraphicTextInstance::SetTextPointer, COMDAT
; _this$ = ecx

; 1083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 69   : 			m_pObject = pObject;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1083 : {

  00006	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00007	8b 71 48	 mov	 esi, DWORD PTR [ecx+72]

; 69   : 			m_pObject = pObject;

  0000a	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 70   : 
; 71   : 			if (m_pObject)

  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN6@SetTextPoi

; 72   : 				m_pObject->AddReference();

  00011	8b c8		 mov	 ecx, eax
  00013	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN6@SetTextPoi:

; 73   : 
; 74   : 			if (pOldObject)

  00018	85 f6		 test	 esi, esi
  0001a	74 07		 je	 SHORT $LN7@SetTextPoi

; 75   : 				pOldObject->Release();

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@SetTextPoi:
  00023	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1085 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ENDP ; CGraphicTextInstance::SetTextPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetMax@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_iMax$ = 8						; size = 4
?SetMax@CGraphicTextInstance@@QAEXH@Z PROC		; CGraphicTextInstance::SetMax, COMDAT
; _this$ = ecx

; 1048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1049 : 	m_iMax = iMax;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _iMax$[ebp]
  00007	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 1050 : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetMax@CGraphicTextInstance@@QAEXH@Z ENDP		; CGraphicTextInstance::SetMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_vAlign$ = 8						; size = 4
?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z PROC	; CGraphicTextInstance::SetVerticalAlign, COMDAT
; _this$ = ecx

; 1043 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1044 : 	m_vAlign = vAlign;

  00003	8a 45 08	 mov	 al, BYTE PTR _vAlign$[ebp]
  00006	88 41 11	 mov	 BYTE PTR [ecx+17], al

; 1045 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z ENDP	; CGraphicTextInstance::SetVerticalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_hAlign$ = 8						; size = 4
?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z PROC	; CGraphicTextInstance::SetHorizonalAlign, COMDAT
; _this$ = ecx

; 1038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1039 : 	m_hAlign = hAlign;

  00003	8a 45 08	 mov	 al, BYTE PTR _hAlign$[ebp]
  00006	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 1040 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ENDP	; CGraphicTextInstance::SetHorizonalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z PROC	; CGraphicTextInstance::SetOutLineColor, COMDAT
; _this$ = ecx

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 923  :     a = fa;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00009	0f 57 c9	 xorps	 xmm1, xmm1

; 923  :     a = fa;

  0000c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1006 : {

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00021	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00029	72 07		 jb	 SHORT $LN9@SetOutLine
  0002b	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00030	eb 2b		 jmp	 SHORT $LN8@SetOutLine
$LN9@SetOutLine:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 04		 jb	 SHORT $LN7@SetOutLine
  00037	33 db		 xor	 ebx, ebx
  00039	eb 22		 jmp	 SHORT $LN8@SetOutLine
$LN7@SetOutLine:
  0003b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0003f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00043	e8 00 00 00 00	 call	 __ftoui3
  00048	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00050	8b d8		 mov	 ebx, eax
  00052	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0005a	0f 57 c9	 xorps	 xmm1, xmm1
$LN8@SetOutLine:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0005d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00062	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00069	72 07		 jb	 SHORT $LN13@SetOutLine
  0006b	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00070	eb 18		 jmp	 SHORT $LN12@SetOutLine
$LN13@SetOutLine:
  00072	0f 2f c8	 comiss	 xmm1, xmm0
  00075	72 04		 jb	 SHORT $LN11@SetOutLine
  00077	33 ff		 xor	 edi, edi
  00079	eb 0f		 jmp	 SHORT $LN12@SetOutLine
$LN11@SetOutLine:
  0007b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0007f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00083	e8 00 00 00 00	 call	 __ftoui3
  00088	8b f8		 mov	 edi, eax
$LN12@SetOutLine:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0008a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  0008f	0f 57 c9	 xorps	 xmm1, xmm1
  00092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00099	72 07		 jb	 SHORT $LN17@SetOutLine
  0009b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a0	eb 23		 jmp	 SHORT $LN16@SetOutLine
$LN17@SetOutLine:
  000a2	0f 2f c8	 comiss	 xmm1, xmm0
  000a5	72 04		 jb	 SHORT $LN15@SetOutLine
  000a7	33 f6		 xor	 esi, esi
  000a9	eb 1a		 jmp	 SHORT $LN16@SetOutLine
$LN15@SetOutLine:
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bb	e8 00 00 00 00	 call	 __ftoui3
  000c0	8b f0		 mov	 esi, eax
  000c2	0f 57 c9	 xorps	 xmm1, xmm1
$LN16@SetOutLine:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  000ca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d1	72 07		 jb	 SHORT $LN21@SetOutLine
  000d3	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000d8	eb 1e		 jmp	 SHORT $LN20@SetOutLine
$LN21@SetOutLine:
  000da	0f 2f c8	 comiss	 xmm1, xmm0
  000dd	72 04		 jb	 SHORT $LN19@SetOutLine
  000df	33 c0		 xor	 eax, eax
  000e1	eb 15		 jmp	 SHORT $LN20@SetOutLine
$LN19@SetOutLine:
  000e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f3	e8 00 00 00 00	 call	 __ftoui3
$LN20@SetOutLine:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1007 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000fb	c1 e0 08	 shl	 eax, 8
  000fe	0b c3		 or	 eax, ebx
  00100	c1 e0 08	 shl	 eax, 8
  00103	0b c7		 or	 eax, edi
  00105	c1 e0 08	 shl	 eax, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1007 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  00108	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00109	0b c6		 or	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1007 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  0010b	5e		 pop	 esi
  0010c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0010f	5b		 pop	 ebx

; 1008 : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 10 00	 ret	 16			; 00000010H
?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ENDP	; CGraphicTextInstance::SetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z PROC	; CGraphicTextInstance::SetOutLineColor, COMDAT
; _this$ = ecx

; 1001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1002 : 	m_dwOutLineColor=color;

  00003	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1003 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z ENDP	; CGraphicTextInstance::SetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetColor@CGraphicTextInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetColor@CGraphicTextInstance@@QAEXMMMM@Z PROC		; CGraphicTextInstance::SetColor, COMDAT
; _this$ = ecx

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 923  :     a = fa;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00009	0f 57 c9	 xorps	 xmm1, xmm1

; 923  :     a = fa;

  0000c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 996  : {

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00021	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00029	72 07		 jb	 SHORT $LN9@SetColor
  0002b	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00030	eb 2b		 jmp	 SHORT $LN8@SetColor
$LN9@SetColor:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 04		 jb	 SHORT $LN7@SetColor
  00037	33 db		 xor	 ebx, ebx
  00039	eb 22		 jmp	 SHORT $LN8@SetColor
$LN7@SetColor:
  0003b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0003f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00043	e8 00 00 00 00	 call	 __ftoui3
  00048	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00050	8b d8		 mov	 ebx, eax
  00052	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0005a	0f 57 c9	 xorps	 xmm1, xmm1
$LN8@SetColor:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0005d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00062	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00069	72 07		 jb	 SHORT $LN13@SetColor
  0006b	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00070	eb 18		 jmp	 SHORT $LN12@SetColor
$LN13@SetColor:
  00072	0f 2f c8	 comiss	 xmm1, xmm0
  00075	72 04		 jb	 SHORT $LN11@SetColor
  00077	33 ff		 xor	 edi, edi
  00079	eb 0f		 jmp	 SHORT $LN12@SetColor
$LN11@SetColor:
  0007b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0007f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00083	e8 00 00 00 00	 call	 __ftoui3
  00088	8b f8		 mov	 edi, eax
$LN12@SetColor:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0008a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  0008f	0f 57 c9	 xorps	 xmm1, xmm1
  00092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00099	72 07		 jb	 SHORT $LN17@SetColor
  0009b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a0	eb 23		 jmp	 SHORT $LN16@SetColor
$LN17@SetColor:
  000a2	0f 2f c8	 comiss	 xmm1, xmm0
  000a5	72 04		 jb	 SHORT $LN15@SetColor
  000a7	33 f6		 xor	 esi, esi
  000a9	eb 1a		 jmp	 SHORT $LN16@SetColor
$LN15@SetColor:
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bb	e8 00 00 00 00	 call	 __ftoui3
  000c0	8b f0		 mov	 esi, eax
  000c2	0f 57 c9	 xorps	 xmm1, xmm1
$LN16@SetColor:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  000ca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d1	72 07		 jb	 SHORT $LN21@SetColor
  000d3	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000d8	eb 1e		 jmp	 SHORT $LN20@SetColor
$LN21@SetColor:
  000da	0f 2f c8	 comiss	 xmm1, xmm0
  000dd	72 04		 jb	 SHORT $LN19@SetColor
  000df	33 c0		 xor	 eax, eax
  000e1	eb 15		 jmp	 SHORT $LN20@SetColor
$LN19@SetColor:
  000e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f3	e8 00 00 00 00	 call	 __ftoui3
$LN20@SetColor:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 997  : 	SetColor(D3DXCOLOR(r, g, b, a));

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000fb	c1 e0 08	 shl	 eax, 8
  000fe	0b c3		 or	 eax, ebx
  00100	c1 e0 08	 shl	 eax, 8
  00103	0b c7		 or	 eax, edi
  00105	c1 e0 08	 shl	 eax, 8
  00108	0b c6		 or	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 997  : 	SetColor(D3DXCOLOR(r, g, b, a));

  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXK@Z ; CGraphicTextInstance::SetColor
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx

; 998  : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 10 00	 ret	 16			; 00000010H
?SetColor@CGraphicTextInstance@@QAEXMMMM@Z ENDP		; CGraphicTextInstance::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetColor@CGraphicTextInstance@@QAEXK@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
?SetColor@CGraphicTextInstance@@QAEXK@Z PROC		; CGraphicTextInstance::SetColor, COMDAT
; _this$ = ecx

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 985  : 	if (m_dwTextColor != color)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _color$[ebp]
  00007	39 79 04	 cmp	 DWORD PTR [ecx+4], edi
  0000a	74 35		 je	 SHORT $LN5@SetColor
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000c	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 987  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0000f	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00011	2b 41 4c	 sub	 eax, DWORD PTR [ecx+76]
  00014	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 987  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00017	85 c0		 test	 eax, eax
  00019	74 23		 je	 SHORT $LN3@SetColor
  0001b	56		 push	 esi
  0001c	0f 1f 40 00	 npad	 4
$LL4@SetColor:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00020	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00023	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 988  : 			if (m_dwColorInfoVector[i] == m_dwTextColor)

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0002b	75 02		 jne	 SHORT $LN2@SetColor

; 989  : 				m_dwColorInfoVector[i] = color;

  0002d	89 3e		 mov	 DWORD PTR [esi], edi
$LN2@SetColor:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002f	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 987  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00032	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00033	2b 41 4c	 sub	 eax, DWORD PTR [ecx+76]
  00036	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 987  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00039	3b d0		 cmp	 edx, eax
  0003b	72 e3		 jb	 SHORT $LL4@SetColor
  0003d	5e		 pop	 esi
$LN3@SetColor:

; 990  : 
; 991  : 		m_dwTextColor = color;

  0003e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
$LN5@SetColor:
  00041	5f		 pop	 edi

; 992  : 	}
; 993  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetColor@CGraphicTextInstance@@QAEXK@Z ENDP		; CGraphicTextInstance::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?HideOutLine@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?HideOutLine@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::HideOutLine, COMDAT
; _this$ = ecx

; 980  : 	m_isOutline = false;

  00000	c6 41 1b 00	 mov	 BYTE PTR [ecx+27], 0

; 981  : }

  00004	c3		 ret	 0
?HideOutLine@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::HideOutLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ShowOutLine@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?ShowOutLine@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::ShowOutLine, COMDAT
; _this$ = ecx

; 975  : 	m_isOutline = true;

  00000	c6 41 1b 01	 mov	 BYTE PTR [ecx+27], 1

; 976  : }

  00004	c3		 ret	 0
?ShowOutLine@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::ShowOutLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?HideCursor@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?HideCursor@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::HideCursor, COMDAT
; _this$ = ecx

; 970  : 	m_isCursor = false;

  00000	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 971  : }

  00004	c3		 ret	 0
?HideCursor@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::HideCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ShowCursor@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?ShowCursor@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::ShowCursor, COMDAT
; _this$ = ecx

; 965  : 	m_isCursor = true;

  00000	c6 41 18 01	 mov	 BYTE PTR [ecx+24], 1

; 966  : }

  00004	c3		 ret	 0
?ShowCursor@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::ShowCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
tv2269 = -168						; size = 8
_dwLighting$1$ = -164					; size = 4
_dwFogEnable$1$ = -160					; size = 4
_ulend$1$ = -156					; size = 4
_defCodePage$1$ = -156					; size = 4
_fFontSx$2$ = -152					; size = 4
tv2131 = -152						; size = 4
$T1 = -148						; size = 12
$T2 = -148						; size = 12
$T3 = -148						; size = 12
$T4 = -148						; size = 12
$T5 = -148						; size = 12
$T6 = -148						; size = 12
$T7 = -148						; size = 12
$T8 = -148						; size = 12
_fFontEy$1$ = -136					; size = 4
_fFontSy$2$ = -136					; size = 4
_fFontEy$2$ = -132					; size = 4
_fFontSy$1$ = -132					; size = 4
_fFontEx$2$ = -128					; size = 4
_fFontEx$1$ = -128					; size = 4
_fCurY$2$ = -124					; size = 4
_fCurY$1$ = -124					; size = 4
_fStanY$1$ = -120					; size = 4
_fFontSx$1$ = -116					; size = 4
tv2169 = -116						; size = 4
_ex$9 = -116						; size = 4
_pFontTexture$1$ = -112					; size = 4
_sy$10 = -112						; size = 4
_fStanX$1$ = -108					; size = 4
_fCurX$2$ = -104					; size = 4
_fCurX$1$ = -104					; size = 4
_sx$11 = -104						; size = 4
_vertices$12 = -100					; size = 96
_akVertex$13 = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_pClipRect$ = 8						; size = 4
?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z PROC	; CGraphicTextInstance::Render, COMDAT
; _this$ = ecx

; 516  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b f9		 mov	 edi, ecx

; 517  : 	if (!m_isUpdate)

  00016	80 7f 44 00	 cmp	 BYTE PTR [edi+68], 0
  0001a	0f 84 3d 0b 00
	00		 je	 $LN19@Render

; 518  : 		return;
; 519  : 
; 520  : 	CGraphicText* pkText=m_roText.GetPointer();

  00020	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]

; 521  : 	if (!pkText)

  00023	85 c9		 test	 ecx, ecx
  00025	0f 84 32 0b 00
	00		 je	 $LN19@Render

; 522  : 		return;
; 523  : 
; 524  : 	CGraphicFontTexture* pFontTexture = pkText->GetFontTexturePointer();

  0002b	e8 00 00 00 00	 call	 ?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ ; CGraphicText::GetFontTexturePointer
  00030	89 45 90	 mov	 DWORD PTR _pFontTexture$1$[ebp], eax

; 525  : 	if (!pFontTexture)

  00033	85 c0		 test	 eax, eax
  00035	0f 84 22 0b 00
	00		 je	 $LN19@Render

; 526  : 		return;
; 527  : 
; 528  : 	float fStanX = m_v3Position.x;

  0003b	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  00040	f3 0f 11 45 94	 movss	 DWORD PTR _fStanX$1$[ebp], xmm0

; 529  : 	float fStanY = m_v3Position.y + 1.0f;

  00045	f3 0f 10 47 3c	 movss	 xmm0, DWORD PTR [edi+60]
  0004a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00052	f3 0f 11 45 88	 movss	 DWORD PTR _fStanY$1$[ebp], xmm0

; 530  : 
; 531  : 	UINT defCodePage = GetDefaultCodePage();

  00057	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  0005c	0f b6 4f 10	 movzx	 ecx, BYTE PTR [edi+16]
  00060	89 85 64 ff ff
	ff		 mov	 DWORD PTR _defCodePage$1$[ebp], eax

; 532  : 
; 533  : 	if (defCodePage == CP_ARABIC)

  00066	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  0006b	75 41		 jne	 SHORT $LN24@Render

; 534  : 	{
; 535  : 		switch (m_hAlign)

  0006d	83 e9 01	 sub	 ecx, 1
  00070	74 46		 je	 SHORT $LN26@Render
  00072	83 e9 01	 sub	 ecx, 1
  00075	75 1f		 jne	 SHORT $LN4@Render
$LN29@Render:

; 549  : 		{
; 550  : 			case HORIZONTAL_ALIGN_RIGHT:
; 551  : 				fStanX -= m_textWidth;
; 552  : 				break;
; 553  : 
; 554  : 			case HORIZONTAL_ALIGN_CENTER:
; 555  : 				fStanX -= float(m_textWidth / 2);
; 556  : 				break;
; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : 	switch (m_vAlign)

  00077	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  0007b	66 d1 e8	 shr	 ax, 1
  0007e	0f b7 c0	 movzx	 eax, ax
$LN202@Render:
  00081	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fStanX$1$[ebp]
  00086	66 0f 6e c0	 movd	 xmm0, eax
  0008a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00091	f3 0f 11 4d 94	 movss	 DWORD PTR _fStanX$1$[ebp], xmm1
$LN4@Render:
  00096	8a 47 11	 mov	 al, BYTE PTR [edi+17]
  00099	3c 20		 cmp	 al, 32			; 00000020H
  0009b	74 21		 je	 SHORT $LN31@Render
  0009d	3c 30		 cmp	 al, 48			; 00000030H
  0009f	75 3e		 jne	 SHORT $LN6@Render

; 561  : 	{
; 562  : 		case VERTICAL_ALIGN_BOTTOM:
; 563  : 			fStanY -= m_textHeight;

  000a1	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  000a5	66 0f 6e c0	 movd	 xmm0, eax
  000a9	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 564  : 			break;

  000ac	eb 23		 jmp	 SHORT $LN203@Render
$LN24@Render:

; 536  : 		{
; 537  : 			case HORIZONTAL_ALIGN_LEFT:
; 538  : 				fStanX -= m_textWidth;
; 539  : 				break;
; 540  : 
; 541  : 			case HORIZONTAL_ALIGN_CENTER:
; 542  : 				fStanX -= float(m_textWidth / 2);
; 543  : 				break;
; 544  : 		}
; 545  : 	}
; 546  : 	else
; 547  : 	{
; 548  : 		switch (m_hAlign)

  000ae	83 e9 02	 sub	 ecx, 2
  000b1	74 c4		 je	 SHORT $LN29@Render
  000b3	83 e9 01	 sub	 ecx, 1
  000b6	75 de		 jne	 SHORT $LN4@Render
$LN26@Render:

; 549  : 		{
; 550  : 			case HORIZONTAL_ALIGN_RIGHT:
; 551  : 				fStanX -= m_textWidth;
; 552  : 				break;
; 553  : 
; 554  : 			case HORIZONTAL_ALIGN_CENTER:
; 555  : 				fStanX -= float(m_textWidth / 2);
; 556  : 				break;
; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : 	switch (m_vAlign)

  000b8	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  000bc	eb c3		 jmp	 SHORT $LN202@Render
$LN31@Render:

; 565  : 
; 566  : 		case VERTICAL_ALIGN_CENTER:
; 567  : 			fStanY -= float(m_textHeight) / 2.0f;

  000be	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  000c2	66 0f 6e c0	 movd	 xmm0, eax
  000c6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
$LN203@Render:

; 568  : 			break;
; 569  : 	}
; 570  : 
; 571  : 	//WORD FillRectIndices[6] = { 0, 2, 1, 2, 3, 1 };
; 572  : 
; 573  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  000d1	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _fStanY$1$[ebp]
  000d6	f3 0f 5c c8	 subss	 xmm1, xmm0
  000da	f3 0f 11 4d 88	 movss	 DWORD PTR _fStanY$1$[ebp], xmm1
$LN6@Render:
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e5	53		 push	 ebx
  000e6	56		 push	 esi
  000e7	6a 05		 push	 5
  000e9	6a 13		 push	 19			; 00000013H
  000eb	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 574  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f6	6a 06		 push	 6
  000f8	6a 14		 push	 20			; 00000014H
  000fa	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 575  : 	DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00105	6a 1c		 push	 28			; 0000001cH
  00107	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 576  : 	DWORD dwLighting = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00112	68 89 00 00 00	 push	 137			; 00000089H
  00117	89 85 60 ff ff
	ff		 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  0011d	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 577  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00128	6a 00		 push	 0
  0012a	6a 1c		 push	 28			; 0000001cH
  0012c	89 85 5c ff ff
	ff		 mov	 DWORD PTR _dwLighting$1$[ebp], eax
  00132	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 578  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013d	6a 00		 push	 0
  0013f	68 89 00 00 00	 push	 137			; 00000089H
  00144	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 579  : 
; 580  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014f	68 42 01 00 00	 push	 322			; 00000142H
  00154	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 581  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015f	6a 02		 push	 2
  00161	6a 02		 push	 2
  00163	6a 00		 push	 0
  00165	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 582  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00170	6a 00		 push	 0
  00172	6a 03		 push	 3
  00174	6a 00		 push	 0
  00176	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 583  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00181	6a 04		 push	 4
  00183	6a 01		 push	 1
  00185	6a 00		 push	 0
  00187	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 584  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00192	6a 02		 push	 2
  00194	6a 05		 push	 5
  00196	6a 00		 push	 0
  00198	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 585  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  0019d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a3	6a 00		 push	 0
  001a5	6a 06		 push	 6
  001a7	6a 00		 push	 0
  001a9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 586  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  001ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b4	6a 04		 push	 4
  001b6	6a 04		 push	 4
  001b8	6a 00		 push	 0
  001ba	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 587  : 
; 588  : 	{
; 589  : 		const float fFontHalfWeight=1.0f;
; 590  : 
; 591  : 		float fCurX;
; 592  : 		float fCurY;
; 593  : 
; 594  : 		float fFontSx;
; 595  : 		float fFontSy;
; 596  : 		float fFontEx;
; 597  : 		float fFontEy;
; 598  : 		float fFontWidth;
; 599  : 		float fFontHeight;
; 600  : 		float fFontMaxHeight;
; 601  : 		float fFontAdvance;
; 602  : 
; 603  : 		SVertex akVertex[4];
; 604  : 		akVertex[0].z=m_v3Position.z;
; 605  : 		akVertex[1].z=m_v3Position.z;
; 606  : 		akVertex[2].z=m_v3Position.z;
; 607  : 		akVertex[3].z=m_v3Position.z;
; 608  : 
; 609  : 		CGraphicFontTexture::TCharacterInfomation* pCurCharInfo;
; 610  : 
; 611  : 		if (m_isOutline)

  001bf	80 7f 1b 00	 cmp	 BYTE PTR [edi+27], 0
  001c3	0f 57 c9	 xorps	 xmm1, xmm1
  001c6	f3 0f 10 47 40	 movss	 xmm0, DWORD PTR [edi+64]
  001cb	f3 0f 11 45 a4	 movss	 DWORD PTR _akVertex$13[ebp+8], xmm0
  001d0	f3 0f 11 45 bc	 movss	 DWORD PTR _akVertex$13[ebp+32], xmm0
  001d5	f3 0f 11 45 d4	 movss	 DWORD PTR _akVertex$13[ebp+56], xmm0
  001da	f3 0f 11 45 ec	 movss	 DWORD PTR _akVertex$13[ebp+80], xmm0
  001df	0f 84 47 03 00
	00		 je	 $LN196@Render

; 613  : 			fCurX=fStanX;

  001e5	f3 0f 10 55 94	 movss	 xmm2, DWORD PTR _fStanX$1$[ebp]

; 614  : 			fCurY=fStanY;

  001ea	f3 0f 10 5d 88	 movss	 xmm3, DWORD PTR _fStanY$1$[ebp]
  001ef	0f 28 e2	 movaps	 xmm4, xmm2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  001f2	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 613  : 			fCurX=fStanX;

  001f5	f3 0f 11 65 98	 movss	 DWORD PTR _fCurX$1$[ebp], xmm4

; 614  : 			fCurY=fStanY;

  001fa	f3 0f 11 5d 84	 movss	 DWORD PTR _fCurY$1$[ebp], xmm3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  001ff	3b 77 50	 cmp	 esi, DWORD PTR [edi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 618  : 			for (i=m_pCharInfoVector.begin(); i!=m_pCharInfoVector.end(); ++i)

  00202	0f 84 24 03 00
	00		 je	 $LN196@Render
  00208	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL10@Render:

; 619  : 			{
; 620  : 				pCurCharInfo = *i;

  00210	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 621  : 
; 622  : 				fFontWidth=float(pCurCharInfo->width);

  00212	0f bf 43 02	 movsx	 eax, WORD PTR [ebx+2]

; 623  : 				fFontHeight=float(pCurCharInfo->height);
; 624  : 				fFontAdvance=float(pCurCharInfo->advance);

  00216	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR [ebx+24]
  0021b	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv2131[ebp], xmm0
  00223	66 0f 6e e8	 movd	 xmm5, eax
  00227	0f bf 43 04	 movsx	 eax, WORD PTR [ebx+4]
  0022b	0f 5b ed	 cvtdq2ps xmm5, xmm5
  0022e	66 0f 6e f0	 movd	 xmm6, eax

; 625  : 
; 626  : 				if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  00232	0f 28 c5	 movaps	 xmm0, xmm5
  00235	f3 0f 58 c4	 addss	 xmm0, xmm4
  00239	0f 5b f6	 cvtdq2ps xmm6, xmm6
  0023c	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  00241	0f 2f 47 14	 comiss	 xmm0, DWORD PTR [edi+20]
  00245	76 1b		 jbe	 SHORT $LN35@Render

; 627  : 				{
; 628  : 					if (m_isMultiLine)

  00247	80 7f 1a 00	 cmp	 BYTE PTR [edi+26], 0
  0024b	0f 84 db 02 00
	00		 je	 $LN196@Render

; 629  : 					{
; 630  : 						fCurX=fStanX;
; 631  : 						fCurY+=fFontMaxHeight;

  00251	f3 0f 58 d9	 addss	 xmm3, xmm1
  00255	0f 28 e2	 movaps	 xmm4, xmm2
  00258	f3 0f 11 65 98	 movss	 DWORD PTR _fCurX$1$[ebp], xmm4
  0025d	f3 0f 11 5d 84	 movss	 DWORD PTR _fCurY$1$[ebp], xmm3
$LN35@Render:

; 632  : 					}
; 633  : 					else
; 634  : 					{
; 635  : 						break;
; 636  : 					}
; 637  : 				}
; 638  : 
; 639  : 				if (pClipRect)

  00262	8b 45 08	 mov	 eax, DWORD PTR _pClipRect$[ebp]
  00265	85 c0		 test	 eax, eax
  00267	74 11		 je	 SHORT $LN37@Render

; 640  : 				{
; 641  : 					if (fCurY <= pClipRect->top)

  00269	66 0f 6e 40 04	 movd	 xmm0, DWORD PTR [eax+4]
  0026e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00271	0f 2f c3	 comiss	 xmm0, xmm3
  00274	0f 83 99 02 00
	00		 jae	 $LN8@Render
$LN37@Render:

; 642  : 					{
; 643  : 						fCurX += fFontAdvance;
; 644  : 						continue;
; 645  : 					}
; 646  : 				}
; 647  : 
; 648  : 				fFontSx = fCurX - 0.5f;
; 649  : 				fFontSy = fCurY - 0.5f;
; 650  : 				fFontEx = fFontSx + fFontWidth;
; 651  : 				fFontEy = fFontSy + fFontHeight;
; 652  : 
; 653  : 				pFontTexture->SelectTexture(pCurCharInfo->index);

  0027a	0f bf 03	 movsx	 eax, WORD PTR [ebx]
  0027d	0f 28 cc	 movaps	 xmm1, xmm4
  00280	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f000000
  00288	8b 4d 90	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  0028b	0f 28 c3	 movaps	 xmm0, xmm3
  0028e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00296	50		 push	 eax
  00297	f3 0f 11 4d 8c	 movss	 DWORD PTR _fFontSx$1$[ebp], xmm1
  0029c	f3 0f 58 cd	 addss	 xmm1, xmm5
  002a0	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _fFontSy$1$[ebp], xmm0
  002a8	f3 0f 58 c6	 addss	 xmm0, xmm6
  002ac	f3 0f 11 4d 80	 movss	 DWORD PTR _fFontEx$1$[ebp], xmm1
  002b1	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _fFontEy$1$[ebp], xmm0
  002b9	e8 00 00 00 00	 call	 ?SelectTexture@CGraphicFontTexture@@QAEXK@Z ; CGraphicFontTexture::SelectTexture

; 654  : 				STATEMANAGER.SetTexture(0, pFontTexture->GetD3DTexture());

  002be	8b 4d 90	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  002c1	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  002c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002cc	50		 push	 eax
  002cd	6a 00		 push	 0
  002cf	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 655  : 
; 656  : 				akVertex[0].u=pCurCharInfo->left;

  002d4	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  002d9	0f 57 d2	 xorps	 xmm2, xmm2
  002dc	f3 0f 11 45 ac	 movss	 DWORD PTR _akVertex$13[ebp+16], xmm0

; 657  : 				akVertex[0].v=pCurCharInfo->top;

  002e1	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  002e6	f3 0f 11 45 b0	 movss	 DWORD PTR _akVertex$13[ebp+20], xmm0

; 658  : 				akVertex[1].u=pCurCharInfo->left;

  002eb	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  002f0	f3 0f 11 45 c4	 movss	 DWORD PTR _akVertex$13[ebp+40], xmm0

; 659  : 				akVertex[1].v=pCurCharInfo->bottom;

  002f5	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR [ebx+20]
  002fa	f3 0f 11 45 c8	 movss	 DWORD PTR _akVertex$13[ebp+44], xmm0

; 660  : 				akVertex[2].u=pCurCharInfo->right;

  002ff	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00304	f3 0f 11 45 dc	 movss	 DWORD PTR _akVertex$13[ebp+64], xmm0

; 661  : 				akVertex[2].v=pCurCharInfo->top;

  00309	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  0030e	f3 0f 11 45 e0	 movss	 DWORD PTR _akVertex$13[ebp+68], xmm0

; 662  : 				akVertex[3].u=pCurCharInfo->right;

  00313	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00318	f3 0f 11 45 f4	 movss	 DWORD PTR _akVertex$13[ebp+88], xmm0

; 663  : 				akVertex[3].v=pCurCharInfo->bottom;

  0031d	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR [ebx+20]
  00322	f3 0f 11 45 f8	 movss	 DWORD PTR _akVertex$13[ebp+92], xmm0

; 664  : 
; 665  : 				akVertex[3].color = akVertex[2].color = akVertex[1].color = akVertex[0].color = m_dwOutLineColor;
; 666  : 
; 667  : 
; 668  : 				float feather = 0.0f; // m_fFontFeather
; 669  : 
; 670  : 				akVertex[0].y=fFontSy-feather;
; 671  : 				akVertex[1].y=fFontEy+feather;

  00327	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontEy$1$[ebp]
  0032f	f3 0f 58 c2	 addss	 xmm0, xmm2
  00333	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00336	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fFontSy$1$[ebp]
  0033e	f3 0f 5c ca	 subss	 xmm1, xmm2
  00342	89 45 a8	 mov	 DWORD PTR _akVertex$13[ebp+12], eax
  00345	89 45 c0	 mov	 DWORD PTR _akVertex$13[ebp+36], eax
  00348	89 45 d8	 mov	 DWORD PTR _akVertex$13[ebp+60], eax
  0034b	f3 0f 11 45 b8	 movss	 DWORD PTR _akVertex$13[ebp+28], xmm0

; 672  : 				akVertex[2].y=fFontSy-feather;
; 673  : 				akVertex[3].y=fFontEy+feather;

  00350	f3 0f 11 45 e8	 movss	 DWORD PTR _akVertex$13[ebp+76], xmm0

; 674  : 
; 675  : 				akVertex[0].x=fFontSx-fFontHalfWeight-feather;

  00355	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]
  0035a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00362	89 45 f0	 mov	 DWORD PTR _akVertex$13[ebp+84], eax

; 676  : 				akVertex[1].x=fFontSx-fFontHalfWeight-feather;
; 677  : 				akVertex[2].x=fFontEx-fFontHalfWeight+feather;
; 678  : 				akVertex[3].x=fFontEx-fFontHalfWeight+feather;
; 679  : 
; 680  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  00365	8d 45 9c	 lea	 eax, DWORD PTR _akVertex$13[ebp]
  00368	6a 04		 push	 4
  0036a	50		 push	 eax
  0036b	f3 0f 11 4d a0	 movss	 DWORD PTR _akVertex$13[ebp+4], xmm1
  00370	f3 0f 5c c2	 subss	 xmm0, xmm2
  00374	f3 0f 11 4d d0	 movss	 DWORD PTR _akVertex$13[ebp+52], xmm1
  00379	f3 0f 11 45 9c	 movss	 DWORD PTR _akVertex$13[ebp], xmm0
  0037e	f3 0f 11 45 b4	 movss	 DWORD PTR _akVertex$13[ebp+24], xmm0
  00383	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  00388	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00390	f3 0f 58 c2	 addss	 xmm0, xmm2
  00394	f3 0f 11 45 cc	 movss	 DWORD PTR _akVertex$13[ebp+48], xmm0
  00399	f3 0f 11 45 e4	 movss	 DWORD PTR _akVertex$13[ebp+72], xmm0
  0039e	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  003a3	83 c4 08	 add	 esp, 8
  003a6	84 c0		 test	 al, al
  003a8	74 11		 je	 SHORT $LN38@Render

; 681  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  003aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003b0	6a 02		 push	 2
  003b2	6a 00		 push	 0
  003b4	6a 05		 push	 5
  003b6	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN38@Render:

; 682  : 
; 683  : 
; 684  : 				akVertex[0].x=fFontSx+fFontHalfWeight-feather;

  003bb	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]

; 685  : 				akVertex[1].x=fFontSx+fFontHalfWeight-feather;
; 686  : 				akVertex[2].x=fFontEx+fFontHalfWeight+feather;
; 687  : 				akVertex[3].x=fFontEx+fFontHalfWeight+feather;
; 688  : 
; 689  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  003c0	8d 45 9c	 lea	 eax, DWORD PTR _akVertex$13[ebp]
  003c3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	6a 04		 push	 4
  003d0	50		 push	 eax
  003d1	f3 0f 5c c1	 subss	 xmm0, xmm1
  003d5	f3 0f 11 45 9c	 movss	 DWORD PTR _akVertex$13[ebp], xmm0
  003da	f3 0f 11 45 b4	 movss	 DWORD PTR _akVertex$13[ebp+24], xmm0
  003df	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  003e4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  003ec	f3 0f 58 c1	 addss	 xmm0, xmm1
  003f0	f3 0f 11 45 cc	 movss	 DWORD PTR _akVertex$13[ebp+48], xmm0
  003f5	f3 0f 11 45 e4	 movss	 DWORD PTR _akVertex$13[ebp+72], xmm0
  003fa	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  003ff	83 c4 08	 add	 esp, 8
  00402	84 c0		 test	 al, al
  00404	74 11		 je	 SHORT $LN39@Render

; 690  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  00406	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0040c	6a 02		 push	 2
  0040e	6a 00		 push	 0
  00410	6a 05		 push	 5
  00412	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN39@Render:

; 691  : 
; 692  : 				akVertex[0].x=fFontSx-feather;

  00417	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]

; 693  : 				akVertex[1].x=fFontSx-feather;
; 694  : 				akVertex[2].x=fFontEx+feather;
; 695  : 				akVertex[3].x=fFontEx+feather;
; 696  : 
; 697  : 				akVertex[0].y=fFontSy-fFontHalfWeight-feather;
; 698  : 				akVertex[1].y=fFontEy-fFontHalfWeight+feather;
; 699  : 				akVertex[2].y=fFontSy-fFontHalfWeight-feather;
; 700  : 				akVertex[3].y=fFontEy-fFontHalfWeight+feather;
; 701  : 
; 702  : 				// 20041216.myevan.DrawPrimitiveUP
; 703  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  0041c	8d 45 9c	 lea	 eax, DWORD PTR _akVertex$13[ebp]
  0041f	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fFontSy$1$[ebp]
  00427	0f 57 d2	 xorps	 xmm2, xmm2
  0042a	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00432	f3 0f 5c c2	 subss	 xmm0, xmm2
  00436	6a 04		 push	 4
  00438	50		 push	 eax
  00439	f3 0f 5c ca	 subss	 xmm1, xmm2
  0043d	f3 0f 11 45 9c	 movss	 DWORD PTR _akVertex$13[ebp], xmm0
  00442	f3 0f 11 45 b4	 movss	 DWORD PTR _akVertex$13[ebp+24], xmm0
  00447	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  0044c	f3 0f 58 c2	 addss	 xmm0, xmm2
  00450	f3 0f 11 4d a0	 movss	 DWORD PTR _akVertex$13[ebp+4], xmm1
  00455	f3 0f 11 4d d0	 movss	 DWORD PTR _akVertex$13[ebp+52], xmm1
  0045a	f3 0f 11 45 cc	 movss	 DWORD PTR _akVertex$13[ebp+48], xmm0
  0045f	f3 0f 11 45 e4	 movss	 DWORD PTR _akVertex$13[ebp+72], xmm0
  00464	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontEy$1$[ebp]
  0046c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00474	f3 0f 58 c2	 addss	 xmm0, xmm2
  00478	f3 0f 11 45 b8	 movss	 DWORD PTR _akVertex$13[ebp+28], xmm0
  0047d	f3 0f 11 45 e8	 movss	 DWORD PTR _akVertex$13[ebp+76], xmm0
  00482	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00487	83 c4 08	 add	 esp, 8
  0048a	84 c0		 test	 al, al
  0048c	74 11		 je	 SHORT $LN40@Render

; 704  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  0048e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00494	6a 02		 push	 2
  00496	6a 00		 push	 0
  00498	6a 05		 push	 5
  0049a	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN40@Render:

; 705  : 
; 706  : 				akVertex[0].y=fFontSy+fFontHalfWeight-feather;

  0049f	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontSy$1$[ebp]

; 707  : 				akVertex[1].y=fFontEy+fFontHalfWeight+feather;
; 708  : 				akVertex[2].y=fFontSy+fFontHalfWeight-feather;
; 709  : 				akVertex[3].y=fFontEy+fFontHalfWeight+feather;
; 710  : 
; 711  : 				// 20041216.myevan.DrawPrimitiveUP
; 712  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  004a7	8d 45 9c	 lea	 eax, DWORD PTR _akVertex$13[ebp]
  004aa	f3 0f 10 95 78
	ff ff ff	 movss	 xmm2, DWORD PTR _fFontEy$1$[ebp]
  004b2	0f 57 c9	 xorps	 xmm1, xmm1
  004b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  004bd	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@3f800000
  004c5	6a 04		 push	 4
  004c7	50		 push	 eax
  004c8	f3 0f 5c c1	 subss	 xmm0, xmm1
  004cc	f3 0f 58 d1	 addss	 xmm2, xmm1
  004d0	f3 0f 11 45 a0	 movss	 DWORD PTR _akVertex$13[ebp+4], xmm0
  004d5	f3 0f 11 55 b8	 movss	 DWORD PTR _akVertex$13[ebp+28], xmm2
  004da	f3 0f 11 45 d0	 movss	 DWORD PTR _akVertex$13[ebp+52], xmm0
  004df	f3 0f 11 55 e8	 movss	 DWORD PTR _akVertex$13[ebp+76], xmm2
  004e4	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  004e9	83 c4 08	 add	 esp, 8
  004ec	84 c0		 test	 al, al
  004ee	74 11		 je	 SHORT $LN198@Render

; 713  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  004f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004f6	6a 02		 push	 2
  004f8	6a 00		 push	 0
  004fa	6a 05		 push	 5
  004fc	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN198@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00501	f3 0f 10 65 98	 movss	 xmm4, DWORD PTR _fCurX$1$[ebp]
  00506	0f 57 c9	 xorps	 xmm1, xmm1
  00509	f3 0f 10 5d 84	 movss	 xmm3, DWORD PTR _fCurY$1$[ebp]
  0050e	f3 0f 10 55 94	 movss	 xmm2, DWORD PTR _fStanX$1$[ebp]
$LN8@Render:
  00513	f3 0f 58 a5 68
	ff ff ff	 addss	 xmm4, DWORD PTR tv2131[ebp]
  0051b	83 c6 04	 add	 esi, 4

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0051e	f3 0f 11 65 98	 movss	 DWORD PTR _fCurX$1$[ebp], xmm4

; 149  :         return _Ptr == _Right._Ptr;

  00523	3b 77 50	 cmp	 esi, DWORD PTR [edi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 618  : 			for (i=m_pCharInfoVector.begin(); i!=m_pCharInfoVector.end(); ++i)

  00526	0f 85 e4 fc ff
	ff		 jne	 $LL10@Render
$LN196@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0052c	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0052f	33 db		 xor	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00531	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00534	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 719  : 		fCurX=fStanX;

  00536	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fStanX$1$[ebp]

; 720  : 		fCurY=fStanY;

  0053b	f3 0f 10 5d 88	 movss	 xmm3, DWORD PTR _fStanY$1$[ebp]
  00540	0f 28 d1	 movaps	 xmm2, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00543	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 719  : 		fCurX=fStanX;

  00546	f3 0f 11 55 98	 movss	 DWORD PTR _fCurX$2$[ebp], xmm2

; 720  : 		fCurY=fStanY;

  0054b	f3 0f 11 5d 84	 movss	 DWORD PTR _fCurY$2$[ebp], xmm3

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00550	85 c0		 test	 eax, eax
  00552	0f 84 ca 01 00
	00		 je	 $LN197@Render
  00558	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@Render:

; 724  : 		{
; 725  : 			pCurCharInfo = m_pCharInfoVector[i];

  00560	8b 34 99	 mov	 esi, DWORD PTR [ecx+ebx*4]

; 726  : 
; 727  : 			fFontWidth=float(pCurCharInfo->width);

  00563	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]

; 728  : 			fFontHeight=float(pCurCharInfo->height);
; 729  : 			fFontMaxHeight=max(fFontHeight, pCurCharInfo->height);
; 730  : 			fFontAdvance=float(pCurCharInfo->advance);

  00567	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  0056c	f3 0f 11 45 8c	 movss	 DWORD PTR tv2169[ebp], xmm0
  00571	66 0f 6e e8	 movd	 xmm5, eax
  00575	0f bf 46 04	 movsx	 eax, WORD PTR [esi+4]
  00579	0f 5b ed	 cvtdq2ps xmm5, xmm5
  0057c	66 0f 6e e0	 movd	 xmm4, eax

; 731  : 
; 732  : 			if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  00580	0f 28 c5	 movaps	 xmm0, xmm5
  00583	f3 0f 58 c2	 addss	 xmm0, xmm2
  00587	0f 5b e4	 cvtdq2ps xmm4, xmm4
  0058a	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  0058f	0f 2f 47 14	 comiss	 xmm0, DWORD PTR [edi+20]
  00593	76 1e		 jbe	 SHORT $LN44@Render

; 733  : 			{
; 734  : 				if (m_isMultiLine)

  00595	80 7f 1a 00	 cmp	 BYTE PTR [edi+26], 0
  00599	0f 84 83 01 00
	00		 je	 $LN197@Render

; 735  : 				{
; 736  : 					fCurX=fStanX;
; 737  : 					fCurY+=fFontMaxHeight;

  0059f	0f 28 c4	 movaps	 xmm0, xmm4
  005a2	0f 28 d1	 movaps	 xmm2, xmm1
  005a5	f3 0f 58 d8	 addss	 xmm3, xmm0
  005a9	f3 0f 11 55 98	 movss	 DWORD PTR _fCurX$2$[ebp], xmm2
  005ae	f3 0f 11 5d 84	 movss	 DWORD PTR _fCurY$2$[ebp], xmm3
$LN44@Render:

; 738  : 				}
; 739  : 				else
; 740  : 				{
; 741  : 					break;
; 742  : 				}
; 743  : 			}
; 744  : 
; 745  : 			if (pClipRect)

  005b3	8b 45 08	 mov	 eax, DWORD PTR _pClipRect$[ebp]
  005b6	85 c0		 test	 eax, eax
  005b8	74 11		 je	 SHORT $LN46@Render

; 746  : 			{
; 747  : 				if (fCurY <= pClipRect->top)

  005ba	66 0f 6e 40 04	 movd	 xmm0, DWORD PTR [eax+4]
  005bf	0f 5b c0	 cvtdq2ps xmm0, xmm0
  005c2	0f 2f c3	 comiss	 xmm0, xmm3
  005c5	0f 83 39 01 00
	00		 jae	 $LN11@Render
$LN46@Render:

; 748  : 				{
; 749  : 					fCurX += fFontAdvance;
; 750  : 					continue;
; 751  : 				}
; 752  : 			}
; 753  : 
; 754  : 			fFontSx = fCurX-0.5f;
; 755  : 			fFontSy = fCurY-0.5f;
; 756  : 			fFontEx = fFontSx + fFontWidth;
; 757  : 			fFontEy = fFontSy + fFontHeight;
; 758  : 
; 759  : 			pFontTexture->SelectTexture(pCurCharInfo->index);

  005cb	0f bf 06	 movsx	 eax, WORD PTR [esi]
  005ce	0f 28 c2	 movaps	 xmm0, xmm2
  005d1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  005d9	8b 4d 90	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  005dc	0f 28 cb	 movaps	 xmm1, xmm3
  005df	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f000000
  005e7	50		 push	 eax
  005e8	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _fFontSx$2$[ebp], xmm0
  005f0	f3 0f 58 c5	 addss	 xmm0, xmm5
  005f4	f3 0f 11 8d 78
	ff ff ff	 movss	 DWORD PTR _fFontSy$2$[ebp], xmm1
  005fc	f3 0f 11 45 80	 movss	 DWORD PTR _fFontEx$2$[ebp], xmm0
  00601	0f 28 c1	 movaps	 xmm0, xmm1
  00604	f3 0f 58 c4	 addss	 xmm0, xmm4
  00608	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _fFontEy$2$[ebp], xmm0
  00610	e8 00 00 00 00	 call	 ?SelectTexture@CGraphicFontTexture@@QAEXK@Z ; CGraphicFontTexture::SelectTexture

; 760  : 			STATEMANAGER.SetTexture(0, pFontTexture->GetD3DTexture());

  00615	8b 4d 90	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  00618	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0061d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00623	50		 push	 eax
  00624	6a 00		 push	 0
  00626	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 761  : 
; 762  : 			akVertex[0].x=fFontSx;

  0062b	f3 0f 10 8d 68
	ff ff ff	 movss	 xmm1, DWORD PTR _fFontSx$2$[ebp]

; 763  : 			akVertex[0].y=fFontSy;

  00633	f3 0f 10 95 78
	ff ff ff	 movss	 xmm2, DWORD PTR _fFontSy$2$[ebp]

; 764  : 			akVertex[0].u=pCurCharInfo->left;
; 765  : 			akVertex[0].v=pCurCharInfo->top;
; 766  : 
; 767  : 			akVertex[1].x=fFontSx;
; 768  : 			akVertex[1].y=fFontEy;
; 769  : 			akVertex[1].u=pCurCharInfo->left;
; 770  : 			akVertex[1].v=pCurCharInfo->bottom;
; 771  : 
; 772  : 			akVertex[2].x=fFontEx;

  0063b	f3 0f 10 5d 80	 movss	 xmm3, DWORD PTR _fFontEx$2$[ebp]

; 773  : 			akVertex[2].y=fFontSy;
; 774  : 			akVertex[2].u=pCurCharInfo->right;
; 775  : 			akVertex[2].v=pCurCharInfo->top;
; 776  : 
; 777  : 			akVertex[3].x=fFontEx;
; 778  : 			akVertex[3].y=fFontEy;
; 779  : 			akVertex[3].u=pCurCharInfo->right;
; 780  : 			akVertex[3].v=pCurCharInfo->bottom;
; 781  : 
; 782  : 			//m_dwColorInfoVector[i];
; 783  : 			//m_dwTextColor;
; 784  : 			akVertex[0].color = akVertex[1].color = akVertex[2].color = akVertex[3].color = m_dwColorInfoVector[i];

  00640	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00643	f3 0f 11 4d 9c	 movss	 DWORD PTR _akVertex$13[ebp], xmm1
  00648	f3 0f 11 55 a0	 movss	 DWORD PTR _akVertex$13[ebp+4], xmm2
  0064d	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00652	f3 0f 11 45 ac	 movss	 DWORD PTR _akVertex$13[ebp+16], xmm0
  00657	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0065c	f3 0f 11 4d b4	 movss	 DWORD PTR _akVertex$13[ebp+24], xmm1
  00661	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fFontEy$2$[ebp]
  00669	f3 0f 11 45 b0	 movss	 DWORD PTR _akVertex$13[ebp+20], xmm0
  0066e	f3 0f 11 4d b8	 movss	 DWORD PTR _akVertex$13[ebp+28], xmm1
  00673	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00678	f3 0f 11 45 c4	 movss	 DWORD PTR _akVertex$13[ebp+40], xmm0
  0067d	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00682	f3 0f 11 45 c8	 movss	 DWORD PTR _akVertex$13[ebp+44], xmm0
  00687	f3 0f 11 5d cc	 movss	 DWORD PTR _akVertex$13[ebp+48], xmm3
  0068c	f3 0f 11 55 d0	 movss	 DWORD PTR _akVertex$13[ebp+52], xmm2
  00691	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00696	f3 0f 11 45 dc	 movss	 DWORD PTR _akVertex$13[ebp+64], xmm0
  0069b	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  006a0	f3 0f 11 45 e0	 movss	 DWORD PTR _akVertex$13[ebp+68], xmm0
  006a5	f3 0f 11 5d e4	 movss	 DWORD PTR _akVertex$13[ebp+72], xmm3
  006aa	f3 0f 11 4d e8	 movss	 DWORD PTR _akVertex$13[ebp+76], xmm1
  006af	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  006b4	f3 0f 11 45 f4	 movss	 DWORD PTR _akVertex$13[ebp+88], xmm0
  006b9	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  006be	f3 0f 11 45 f8	 movss	 DWORD PTR _akVertex$13[ebp+92], xmm0
  006c3	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  006c6	89 45 f0	 mov	 DWORD PTR _akVertex$13[ebp+84], eax
  006c9	89 45 d8	 mov	 DWORD PTR _akVertex$13[ebp+60], eax
  006cc	89 45 c0	 mov	 DWORD PTR _akVertex$13[ebp+36], eax
  006cf	89 45 a8	 mov	 DWORD PTR _akVertex$13[ebp+12], eax

; 785  : 
; 786  : 			// 20041216.myevan.DrawPrimitiveUP
; 787  : 			if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  006d2	8d 45 9c	 lea	 eax, DWORD PTR _akVertex$13[ebp]
  006d5	6a 04		 push	 4
  006d7	50		 push	 eax
  006d8	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  006dd	83 c4 08	 add	 esp, 8
  006e0	84 c0		 test	 al, al
  006e2	74 11		 je	 SHORT $LN199@Render

; 788  : 				STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  006e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006ea	6a 02		 push	 2
  006ec	6a 00		 push	 0
  006ee	6a 05		 push	 5
  006f0	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN199@Render:

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  006f5	f3 0f 10 5d 84	 movss	 xmm3, DWORD PTR _fCurY$2$[ebp]
  006fa	f3 0f 10 55 98	 movss	 xmm2, DWORD PTR _fCurX$2$[ebp]
  006ff	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fStanX$1$[ebp]
$LN11@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00704	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00707	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00708	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  0070b	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0070d	f3 0f 58 55 8c	 addss	 xmm2, DWORD PTR tv2169[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00712	c1 f8 02	 sar	 eax, 2
  00715	f3 0f 11 55 98	 movss	 DWORD PTR _fCurX$2$[ebp], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 723  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0071a	3b d8		 cmp	 ebx, eax
  0071c	0f 82 3e fe ff
	ff		 jb	 $LL13@Render
$LN197@Render:

; 789  : 			//STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, akVertex, sizeof(SVertex));
; 790  : 
; 791  : 			fCurX += fFontAdvance;
; 792  : 		}
; 793  : 	}
; 794  : 
; 795  : 	if (m_isCursor)

  00722	80 7f 18 00	 cmp	 BYTE PTR [edi+24], 0
  00726	0f 84 c6 02 00
	00		 je	 $LN56@Render

; 796  : 	{
; 797  : 		// Draw Cursor
; 798  : 		float sx, sy, ex, ey;
; 799  : 		TDiffuse diffuse;
; 800  : 
; 801  : 		int curpos = CIME::GetCurPos();

  0072c	e8 00 00 00 00	 call	 ?GetCurPos@CIME@@SAHXZ	; CIME::GetCurPos
  00731	8b d8		 mov	 ebx, eax

; 802  : 		int compend = curpos + CIME::GetCompLen();

  00733	e8 00 00 00 00	 call	 ?GetCompLen@CIME@@SAHXZ	; CIME::GetCompLen

; 803  : 
; 804  : 		__GetTextPos(curpos, &sx, &sy);

  00738	8b cf		 mov	 ecx, edi
  0073a	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  0073d	8d 45 90	 lea	 eax, DWORD PTR _sy$10[ebp]
  00740	50		 push	 eax
  00741	8d 45 98	 lea	 eax, DWORD PTR _sx$11[ebp]
  00744	50		 push	 eax
  00745	53		 push	 ebx
  00746	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 805  : 
; 806  : 		// If Composition
; 807  : 		if(curpos<compend)

  0074b	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _sx$11[ebp]
  00750	3b de		 cmp	 ebx, esi
  00752	7d 21		 jge	 SHORT $LN49@Render

; 808  : 		{
; 809  : 			diffuse = 0x7fffffff;
; 810  : 			__GetTextPos(compend, &ex, &sy);

  00754	8d 45 90	 lea	 eax, DWORD PTR _sy$10[ebp]
  00757	8b cf		 mov	 ecx, edi
  00759	50		 push	 eax
  0075a	8d 45 8c	 lea	 eax, DWORD PTR _ex$9[ebp]
  0075d	50		 push	 eax
  0075e	56		 push	 esi
  0075f	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 811  : 		}

  00764	f3 0f 10 65 8c	 movss	 xmm4, DWORD PTR _ex$9[ebp]
  00769	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0076e	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _sx$11[ebp]
  00773	eb 0e		 jmp	 SHORT $LN50@Render
$LN49@Render:

; 812  : 		else
; 813  : 		{
; 814  : 			diffuse = 0xffffffff;
; 815  : 			ex = sx + 2;

  00775	0f 28 e1	 movaps	 xmm4, xmm1
  00778	83 ca ff	 or	 edx, -1
  0077b	f3 0f 58 25 00
	00 00 00	 addss	 xmm4, DWORD PTR __real@40000000
$LN50@Render:

; 816  : 		}
; 817  : 
; 818  : 		// FOR_ARABIC_ALIGN
; 819  : 		if (defCodePage == CP_ARABIC)

  00783	81 bd 64 ff ff
	ff e8 04 00 00	 cmp	 DWORD PTR _defCodePage$1$[ebp], 1256 ; 000004e8H
  0078d	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
  00791	f3 0f 10 57 38	 movss	 xmm2, DWORD PTR [edi+56]
  00796	66 0f 6e e9	 movd	 xmm5, ecx
  0079a	0f 5b ed	 cvtdq2ps xmm5, xmm5
  0079d	75 0f		 jne	 SHORT $LN51@Render

; 820  : 		{
; 821  : 			sx += m_v3Position.x - m_textWidth;

  0079f	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  007a3	66 0f 6e c0	 movd	 xmm0, eax
  007a7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  007aa	f3 0f 5c d0	 subss	 xmm2, xmm0
$LN51@Render:

; 822  : 			ex += m_v3Position.x - m_textWidth;
; 823  : 			sy += m_v3Position.y;
; 824  : 			ey = sy + m_textHeight;
; 825  : 		}
; 826  : 		else
; 827  : 		{
; 828  : 			sx += m_v3Position.x;
; 829  : 			sy += m_v3Position.y;
; 830  : 			ex += m_v3Position.x;
; 831  : 			ey = sy + m_textHeight;
; 832  : 		}
; 833  : 
; 834  : 		switch (m_vAlign)

  007ae	0f 28 da	 movaps	 xmm3, xmm2
  007b1	8b c1		 mov	 eax, ecx
  007b3	8a 4f 11	 mov	 cl, BYTE PTR [edi+17]
  007b6	f3 0f 58 d9	 addss	 xmm3, xmm1
  007ba	f3 0f 10 4f 3c	 movss	 xmm1, DWORD PTR [edi+60]
  007bf	f3 0f 58 d4	 addss	 xmm2, xmm4
  007c3	f3 0f 58 4d 90	 addss	 xmm1, DWORD PTR _sy$10[ebp]
  007c8	f3 0f 11 5d 98	 movss	 DWORD PTR _sx$11[ebp], xmm3
  007cd	f3 0f 11 55 8c	 movss	 DWORD PTR _ex$9[ebp], xmm2
  007d2	f3 0f 11 4d 90	 movss	 DWORD PTR _sy$10[ebp], xmm1
  007d7	0f 28 e1	 movaps	 xmm4, xmm1
  007da	f3 0f 58 e9	 addss	 xmm5, xmm1
  007de	80 f9 20	 cmp	 cl, 32			; 00000020H
  007e1	74 11		 je	 SHORT $LN54@Render
  007e3	80 f9 30	 cmp	 cl, 48			; 00000030H
  007e6	75 2a		 jne	 SHORT $LN97@Render

; 835  : 		{
; 836  : 			case VERTICAL_ALIGN_BOTTOM:
; 837  : 				sy -= m_textHeight;

  007e8	0f b7 c0	 movzx	 eax, ax
  007eb	66 0f 6e c0	 movd	 xmm0, eax
  007ef	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 838  : 				break;

  007f2	eb 12		 jmp	 SHORT $LN204@Render
$LN54@Render:

; 839  : 
; 840  : 			case VERTICAL_ALIGN_CENTER:
; 841  : 				sy -= float(m_textHeight) / 2.0f;

  007f4	0f b7 c0	 movzx	 eax, ax
  007f7	66 0f 6e c0	 movd	 xmm0, eax
  007fb	0f 5b c0	 cvtdq2ps xmm0, xmm0
  007fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
$LN204@Render:

; 842  : 				break;
; 843  : 		}
; 844  : 
; 845  : 		TPDTVertex vertices[4];
; 846  : 		vertices[0].diffuse = diffuse;

  00806	0f 28 cc	 movaps	 xmm1, xmm4
  00809	f3 0f 5c c8	 subss	 xmm1, xmm0
  0080d	f3 0f 11 4d 90	 movss	 DWORD PTR _sy$10[ebp], xmm1
$LN97@Render:

; 854  : 
; 855  : 		STATEMANAGER.SetTexture(0, NULL);

  00812	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00818	0f 28 c3	 movaps	 xmm0, xmm3
  0081b	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0081e	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 850  : 		vertices[0].position = TPosition(sx, sy, 0.0f);

  00828	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  0082e	89 45 a4	 mov	 DWORD PTR _vertices$12[ebp+8], eax
  00831	66 0f d6 45 9c	 movq	 QWORD PTR _vertices$12[ebp], xmm0

; 851  : 		vertices[1].position = TPosition(ex, sy, 0.0f);

  00836	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00839	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 851  : 		vertices[1].position = TPosition(ex, sy, 0.0f);

  00843	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+8]
  00849	89 45 bc	 mov	 DWORD PTR _vertices$12[ebp+32], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0084c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 852  : 		vertices[2].position = TPosition(sx, ey, 0.0f);

  00856	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]

; 854  : 
; 855  : 		STATEMANAGER.SetTexture(0, NULL);

  0085c	6a 00		 push	 0
  0085e	0f 14 c1	 unpcklps xmm0, xmm1
  00861	0f 14 dd	 unpcklps xmm3, xmm5
  00864	89 45 d4	 mov	 DWORD PTR _vertices$12[ebp+56], eax
  00867	0f 14 d5	 unpcklps xmm2, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0086a	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 853  : 		vertices[3].position = TPosition(ex, ey, 0.0f);

  00874	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+8]

; 854  : 
; 855  : 		STATEMANAGER.SetTexture(0, NULL);

  0087a	6a 00		 push	 0
  0087c	89 55 a8	 mov	 DWORD PTR _vertices$12[ebp+12], edx
  0087f	89 55 c0	 mov	 DWORD PTR _vertices$12[ebp+36], edx
  00882	89 55 d8	 mov	 DWORD PTR _vertices$12[ebp+60], edx
  00885	89 55 f0	 mov	 DWORD PTR _vertices$12[ebp+84], edx
  00888	66 0f d6 45 b4	 movq	 QWORD PTR _vertices$12[ebp+24], xmm0
  0088d	66 0f d6 5d cc	 movq	 QWORD PTR _vertices$12[ebp+48], xmm3
  00892	66 0f d6 55 e4	 movq	 QWORD PTR _vertices$12[ebp+72], xmm2
  00897	89 45 ec	 mov	 DWORD PTR _vertices$12[ebp+80], eax
  0089a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 856  : 
; 857  : 
; 858  : 		// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 859  : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  0089f	6a 05		 push	 5
  008a1	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 860  : 		if (CGraphicBase::SetPDTStream(vertices, 4))

  008a6	8d 45 9c	 lea	 eax, DWORD PTR _vertices$12[ebp]
  008a9	6a 04		 push	 4
  008ab	50		 push	 eax
  008ac	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  008b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b4	84 c0		 test	 al, al
  008b6	74 15		 je	 SHORT $LN55@Render

; 861  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  008b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  008be	6a 02		 push	 2
  008c0	6a 00		 push	 0
  008c2	6a 04		 push	 4
  008c4	6a 00		 push	 0
  008c6	6a 04		 push	 4
  008c8	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN55@Render:

; 862  : 
; 863  : 		int ulbegin = CIME::GetULBegin();

  008cd	e8 00 00 00 00	 call	 ?GetULBegin@CIME@@SAHXZ	; CIME::GetULBegin
  008d2	8b f0		 mov	 esi, eax

; 864  : 		int ulend = CIME::GetULEnd();

  008d4	e8 00 00 00 00	 call	 ?GetULEnd@CIME@@SAHXZ	; CIME::GetULEnd
  008d9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _ulend$1$[ebp], eax

; 865  : 
; 866  : 		if(ulbegin < ulend)

  008df	3b f0		 cmp	 esi, eax
  008e1	0f 8d 0b 01 00
	00		 jge	 $LN56@Render

; 867  : 		{
; 868  : 			__GetTextPos(curpos+ulbegin, &sx, &sy);

  008e7	8d 45 90	 lea	 eax, DWORD PTR _sy$10[ebp]
  008ea	50		 push	 eax
  008eb	8d 45 98	 lea	 eax, DWORD PTR _sx$11[ebp]
  008ee	50		 push	 eax
  008ef	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  008f2	51		 push	 ecx
  008f3	8b cf		 mov	 ecx, edi
  008f5	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 869  : 			__GetTextPos(curpos+ulend, &ex, &sy);

  008fa	8d 45 90	 lea	 eax, DWORD PTR _sy$10[ebp]
  008fd	8b cf		 mov	 ecx, edi
  008ff	50		 push	 eax
  00900	8d 45 8c	 lea	 eax, DWORD PTR _ex$9[ebp]
  00903	50		 push	 eax
  00904	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _ulend$1$[ebp]
  0090a	03 c3		 add	 eax, ebx
  0090c	50		 push	 eax
  0090d	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 870  : 
; 871  : 			sx += m_v3Position.x;
; 872  : 			sy += m_v3Position.y + m_textHeight;

  00912	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00916	f3 0f 10 67 38	 movss	 xmm4, DWORD PTR [edi+56]

; 884  : 
; 885  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  0091b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00921	0f 28 dc	 movaps	 xmm3, xmm4
  00924	f3 0f 58 5d 98	 addss	 xmm3, DWORD PTR _sx$11[ebp]
  00929	f3 0f 58 65 8c	 addss	 xmm4, DWORD PTR _ex$9[ebp]
  0092e	66 0f 6e c8	 movd	 xmm1, eax
  00932	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00935	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 880  : 			vertices[0].position = TPosition(sx, sy, 0.0f);

  0093f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  00945	89 45 a4	 mov	 DWORD PTR _vertices$12[ebp+8], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00948	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 881  : 			vertices[1].position = TPosition(ex, sy, 0.0f);

  00952	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+8]
  00958	0f 28 c3	 movaps	 xmm0, xmm3
  0095b	f3 0f 58 4f 3c	 addss	 xmm1, DWORD PTR [edi+60]
  00960	89 45 bc	 mov	 DWORD PTR _vertices$12[ebp+32], eax

; 884  : 
; 885  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  00963	6a 18		 push	 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00965	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 882  : 			vertices[2].position = TPosition(sx, ey, 0.0f);

  0096f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  00975	f3 0f 58 4d 90	 addss	 xmm1, DWORD PTR _sy$10[ebp]
  0097a	89 45 d4	 mov	 DWORD PTR _vertices$12[ebp+56], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0097d	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 883  : 			vertices[3].position = TPosition(ex, ey, 0.0f);

  00987	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  0098d	89 45 ec	 mov	 DWORD PTR _vertices$12[ebp+80], eax

; 884  : 
; 885  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  00990	8d 45 9c	 lea	 eax, DWORD PTR _vertices$12[ebp]
  00993	50		 push	 eax
  00994	6a 65		 push	 101			; 00000065H
  00996	68 00 00 00 00	 push	 OFFSET ?c_FillRectIndices@@3QBGB
  0099b	0f 28 d1	 movaps	 xmm2, xmm1
  0099e	0f 14 c1	 unpcklps xmm0, xmm1
  009a1	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@40000000
  009a9	6a 02		 push	 2
  009ab	66 0f d6 45 9c	 movq	 QWORD PTR _vertices$12[ebp], xmm0
  009b0	0f 28 c4	 movaps	 xmm0, xmm4
  009b3	6a 04		 push	 4
  009b5	6a 00		 push	 0
  009b7	0f 14 c1	 unpcklps xmm0, xmm1
  009ba	0f 14 da	 unpcklps xmm3, xmm2
  009bd	0f 14 e2	 unpcklps xmm4, xmm2
  009c0	6a 04		 push	 4
  009c2	c7 45 a8 00 00
	ff ff		 mov	 DWORD PTR _vertices$12[ebp+12], -65536 ; ffff0000H
  009c9	c7 45 c0 00 00
	ff ff		 mov	 DWORD PTR _vertices$12[ebp+36], -65536 ; ffff0000H
  009d0	c7 45 d8 00 00
	ff ff		 mov	 DWORD PTR _vertices$12[ebp+60], -65536 ; ffff0000H
  009d7	c7 45 f0 00 00
	ff ff		 mov	 DWORD PTR _vertices$12[ebp+84], -65536 ; ffff0000H
  009de	66 0f d6 45 b4	 movq	 QWORD PTR _vertices$12[ebp+24], xmm0
  009e3	66 0f d6 5d cc	 movq	 QWORD PTR _vertices$12[ebp+48], xmm3
  009e8	66 0f d6 65 e4	 movq	 QWORD PTR _vertices$12[ebp+72], xmm4
  009ed	e8 00 00 00 00	 call	 ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
$LN56@Render:

; 886  : 		}
; 887  : 	}
; 888  : 
; 889  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  009f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  009f8	6a 13		 push	 19			; 00000013H
  009fa	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 890  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  009ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00a05	6a 14		 push	 20			; 00000014H
  00a07	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 891  : 
; 892  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  00a0c	ff b5 60 ff ff
	ff		 push	 DWORD PTR _dwFogEnable$1$[ebp]
  00a12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00a18	6a 1c		 push	 28			; 0000001cH
  00a1a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 893  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLighting);

  00a1f	ff b5 5c ff ff
	ff		 push	 DWORD PTR _dwLighting$1$[ebp]
  00a25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00a2b	68 89 00 00 00	 push	 137			; 00000089H
  00a30	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00a35	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  00a38	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00a3d	2b 4f 64	 sub	 ecx, DWORD PTR [edi+100]
  00a40	f7 e9		 imul	 ecx
  00a42	03 d1		 add	 edx, ecx
  00a44	c1 fa 04	 sar	 edx, 4
  00a47	8b c2		 mov	 eax, edx
  00a49	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00a4c	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 895  : 	if (m_hyperlinkVector.size() != 0)

  00a4e	0f 84 88 00 00
	00		 je	 $LN195@Render

; 896  : 	{
; 897  : 		int lx = gs_mx - m_v3Position.x;

  00a54	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_mx@@3HA
  00a5c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00a5f	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  00a64	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00a68	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_my@@3HA

; 898  : 		int ly = gs_my - m_v3Position.y;

  00a70	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00a73	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]
  00a78	f3 0f 2c f0	 cvttss2si esi, xmm0

; 899  : 
; 900  : 		if (GetDefaultCodePage() == CP_ARABIC) {

  00a7c	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00a81	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00a86	75 0a		 jne	 SHORT $LN194@Render

; 901  : 			lx = -lx;
; 902  : 			ly = -ly + m_textHeight;

  00a88	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00a8c	f7 db		 neg	 ebx
  00a8e	2b c6		 sub	 eax, esi
  00a90	8b f0		 mov	 esi, eax
$LN194@Render:

; 903  : 		}
; 904  : 
; 905  : 		if (lx >= 0 && ly >= 0 && lx < m_textWidth && ly < m_textHeight)

  00a92	85 db		 test	 ebx, ebx
  00a94	78 46		 js	 SHORT $LN195@Render
  00a96	85 f6		 test	 esi, esi
  00a98	78 42		 js	 SHORT $LN195@Render
  00a9a	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00a9e	3b d8		 cmp	 ebx, eax
  00aa0	7d 3a		 jge	 SHORT $LN195@Render
  00aa2	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00aa6	3b f0		 cmp	 esi, eax
  00aa8	7d 32		 jge	 SHORT $LN195@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00aaa	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00aad	8b 57 68	 mov	 edx, DWORD PTR [edi+104]
  00ab0	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 909  : 			while (it != m_hyperlinkVector.end())

  00ab2	74 28		 je	 SHORT $LN195@Render
$LL16@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 265  :         _Vector_iterator _Tmp = *this;

  00ab4	8b c8		 mov	 ecx, eax

; 75   :         ++_Ptr;

  00ab6	83 c0 1c	 add	 eax, 28			; 0000001cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 912  : 				if (lx >= link.sx && lx < link.ex)

  00ab9	0f bf 31	 movsx	 esi, WORD PTR [ecx]
  00abc	3b de		 cmp	 ebx, esi
  00abe	7c 08		 jl	 SHORT $LN60@Render
  00ac0	0f bf 71 02	 movsx	 esi, WORD PTR [ecx+2]
  00ac4	3b de		 cmp	 ebx, esi
  00ac6	7c 06		 jl	 SHORT $LN145@Render
$LN60@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00ac8	3b c2		 cmp	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 909  : 			while (it != m_hyperlinkVector.end())

  00aca	75 e8		 jne	 SHORT $LL16@Render
  00acc	eb 0e		 jmp	 SHORT $LN195@Render
$LN145@Render:

; 913  : 				{
; 914  : 					gs_hyperlinkText = link.text;

  00ace	83 c1 04	 add	 ecx, 4
  00ad1	51		 push	 ecx
  00ad2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  00ad7	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN195@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00adc	8b 5f 74	 mov	 ebx, DWORD PTR [edi+116]
  00adf	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
  00ae2	3b f3		 cmp	 esi, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 927  : 	if (m_emojiVector.empty() == false)

  00ae4	74 75		 je	 SHORT $LN200@Render
$LL20@Render:

; 930  : 		{
; 931  : 			if (rEmo.pInstance)

  00ae6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00ae9	85 c9		 test	 ecx, ecx
  00aeb	74 67		 je	 SHORT $LN18@Render

; 932  : 			{
; 933  : 				rEmo.pInstance->SetPosition(fStanX + rEmo.x, (fStanY + 7.0) - (rEmo.pInstance->GetHeight() / 2));

  00aed	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _fStanY$1$[ebp]
  00af2	0f 5a c0	 cvtps2pd xmm0, xmm0
  00af5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  00afd	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv2269[ebp], xmm0
  00b05	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  00b0a	f2 0f 10 8d 58
	ff ff ff	 movsd	 xmm1, QWORD PTR tv2269[ebp]
  00b12	83 ec 08	 sub	 esp, 8
  00b15	99		 cdq
  00b16	2b c2		 sub	 eax, edx
  00b18	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00b1b	d1 f8		 sar	 eax, 1
  00b1d	66 0f 6e c0	 movd	 xmm0, eax
  00b21	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00b24	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00b28	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00b2c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00b30	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00b36	66 0f 6e c0	 movd	 xmm0, eax
  00b3a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00b3d	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _fStanX$1$[ebp]
  00b42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b47	e8 00 00 00 00	 call	 ?SetPosition@CGraphicImageInstance@@QAEXMM@Z ; CGraphicImageInstance::SetPosition

; 934  : 				rEmo.pInstance->Render();

  00b4c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00b4f	e8 00 00 00 00	 call	 ?Render@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Render
$LN18@Render:

; 928  : 	{
; 929  : 		for(auto& rEmo : m_emojiVector)

  00b54	83 c6 08	 add	 esi, 8
  00b57	3b f3		 cmp	 esi, ebx
  00b59	75 8b		 jne	 SHORT $LL20@Render
$LN200@Render:
  00b5b	5e		 pop	 esi
  00b5c	5b		 pop	 ebx
$LN19@Render:

; 935  : 			}
; 936  : 		}
; 937  : 	}
; 938  : #endif
; 939  : 
; 940  : }

  00b5d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b60	33 cd		 xor	 ecx, ebp
  00b62	5f		 pop	 edi
  00b63	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b68	8b e5		 mov	 esp, ebp
  00b6a	5d		 pop	 ebp
  00b6b	c2 04 00	 ret	 4
?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ENDP	; CGraphicTextInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Update@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
_token$1$ = -1536					; size = 4
_len$2 = -1532						; size = 4
_defCodePage$1$ = -1528					; size = 4
_wTextMax$1$ = -1524					; size = 4
_this$1$ = -1520					; size = 4
_kEmoji$3 = -1516					; size = 8
_len$4 = -1508						; size = 4
_wText$1$ = -1504					; size = 4
_pSpaceInfo$1$ = -1500					; size = 4
_end$1$ = -1496						; size = 4
__Result$2$ = -1492					; size = 4
tv4170 = -1492						; size = 4
__New_ptr$5 = -1492					; size = 4
__Old_size$1$ = -1488					; size = 4
tv4261 = -1488						; size = 4
__New_ptr$6 = -1488					; size = 4
_i$1$ = -1484						; size = 4
_wArabicTextLen$1$ = -1484				; size = 4
_isEnglish$1$ = -1477					; size = 1
_pFontTexture$1$ = -1476				; size = 4
_dataCodePage$1$ = -1472				; size = 4
__Result$2$ = -1468					; size = 4
__Su$1$ = -1468						; size = 4
__New_size$1$ = -1468					; size = 4
_x$1$ = -1468						; size = 4
_wTextLen$1$ = -1468					; size = 4
_no_hyperlink$1$ = -1464				; size = 4
_wArabicText$1$ = -1460					; size = 4
__Old_capacity$1$ = -1456				; size = 4
_x$1$ = -1456						; size = 4
_emojiStep$1$ = -1452					; size = 4
_nEnglishBase$1$ = -1452				; size = 4
__Result$2$ = -1448					; size = 4
_hyperlinkStep$1$ = -1448				; size = 4
tv4084 = -1448						; size = 4
tv3909 = -1444						; size = 4
__New_ptr$7 = -1444					; size = 4
__Ch$1$ = -1440						; size = 4
_hyperlinkStep$1$ = -1440				; size = 4
_e$1$ = -1440						; size = 4
tv3917 = -1440						; size = 4
__New_ptr$8 = -1440					; size = 4
_this$GSCopy$1$ = -1436					; size = 4
_dwColor$1$ = -1432					; size = 4
__Old_capacity$1$ = -1428				; size = 4
_e$1$ = -1428						; size = 4
_i$1$ = -1428						; size = 4
_emojiBuffer$9 = -1424					; size = 24
_kHyperlink$10 = -1400					; size = 28
_hyperlinkBuffer$11 = -1372				; size = 24
_kHyperlink$12 = -1348					; size = 28
_hyperlinkBuffer$13 = -1320				; size = 24
_retBuf$14 = -1296					; size = 1024
_szPath$15 = -272					; size = 255
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Update@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::Update, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Update@CGraphicTextInstance@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 05 00
	00		 sub	 esp, 1524		; 000005f4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	89 bd 64 fa ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi

; 127  : 	if (m_isUpdate)

  00036	80 7f 44 00	 cmp	 BYTE PTR [edi+68], 0
  0003a	0f 85 fe 14 00
	00		 jne	 $LN1@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 62   : 			return m_pObject == NULL ? true : false;

  00040	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  00043	85 c9		 test	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 130  : 	if (m_roText.IsNull())

  00045	75 12		 jne	 SHORT $LN38@Update

; 131  : 	{
; 132  : 		Tracef("CGraphicTextInstance::Update - Font has not been set\n");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@
  0004c	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00051	83 c4 04	 add	 esp, 4

; 133  : 		return;

  00054	e9 e5 14 00 00	 jmp	 $LN1@Update
$LN38@Update:

; 134  : 	}
; 135  : 
; 136  : 	if (m_roText->IsEmpty())

  00059	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0005e	84 c0		 test	 al, al
  00060	0f 85 d8 14 00
	00		 jne	 $LN1@Update

; 137  : 		return;
; 138  : 
; 139  : 	CGraphicFontTexture* pFontTexture = m_roText->GetFontTexturePointer();

  00066	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  00069	e8 00 00 00 00	 call	 ?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ ; CGraphicText::GetFontTexturePointer
  0006e	8b d8		 mov	 ebx, eax
  00070	89 9d 3c fa ff
	ff		 mov	 DWORD PTR _pFontTexture$1$[ebp], ebx

; 140  : 	if (!pFontTexture)

  00076	85 db		 test	 ebx, ebx
  00078	0f 84 c0 14 00
	00		 je	 $LN1@Update

; 141  : 		return;
; 142  : 
; 143  : 	UINT defCodePage = GetDefaultCodePage();

  0007e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 144  : 
; 145  : 	UINT dataCodePage = defCodePage;
; 146  : 
; 147  : 	CGraphicFontTexture::TCharacterInfomation* pSpaceInfo = pFontTexture->GetCharacterInfomation(dataCodePage, ' ');

  00083	6a 20		 push	 32			; 00000020H
  00085	50		 push	 eax
  00086	8b cb		 mov	 ecx, ebx
  00088	89 85 08 fa ff
	ff		 mov	 DWORD PTR _defCodePage$1$[ebp], eax
  0008e	89 85 40 fa ff
	ff		 mov	 DWORD PTR _dataCodePage$1$[ebp], eax
  00094	e8 00 00 00 00	 call	 ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
  00099	89 85 24 fa ff
	ff		 mov	 DWORD PTR _pSpaceInfo$1$[ebp], eax

; 148  : 
; 149  : 	int spaceHeight = pSpaceInfo ? pSpaceInfo->height : 12;

  0009f	85 c0		 test	 eax, eax
  000a1	74 06		 je	 SHORT $LN116@Update
  000a3	0f b7 58 04	 movzx	 ebx, WORD PTR [eax+4]
  000a7	eb 05		 jmp	 SHORT $LN117@Update
$LN116@Update:
  000a9	bb 0c 00 00 00	 mov	 ebx, 12			; 0000000cH
$LN117@Update:

; 150  : 
; 151  : 	m_pCharInfoVector.clear();

  000ae	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]

; 152  : 	m_dwColorInfoVector.clear();
; 153  : 	m_hyperlinkVector.clear();

  000b1	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  000b4	89 47 50	 mov	 DWORD PTR [edi+80], eax
  000b7	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  000ba	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000bd	56		 push	 esi
  000be	ff 76 04	 push	 DWORD PTR [esi+4]
  000c1	ff 36		 push	 DWORD PTR [esi]
  000c3	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >

; 1390 :         _Mylast = _Myfirst;

  000c8	8b 06		 mov	 eax, DWORD PTR [esi]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  000cd	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 155  : 	for (auto& rEmo : m_emojiVector)

  000d0	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  000d3	8b 30		 mov	 esi, DWORD PTR [eax]
  000d5	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  000d8	89 85 10 fa ff
	ff		 mov	 DWORD PTR _this$1$[ebp], eax
  000de	3b f7		 cmp	 esi, edi
  000e0	74 1f		 je	 SHORT $LN3@Update
$LL4@Update:

; 156  : 		if (rEmo.pInstance)

  000e2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e5	85 c0		 test	 eax, eax
  000e7	74 09		 je	 SHORT $LN2@Update

; 157  : 			CGraphicImageInstance::Delete(rEmo.pInstance);

  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  000ef	83 c4 04	 add	 esp, 4
$LN2@Update:

; 155  : 	for (auto& rEmo : m_emojiVector)

  000f2	83 c6 08	 add	 esi, 8
  000f5	3b f7		 cmp	 esi, edi
  000f7	75 e9		 jne	 SHORT $LL4@Update
  000f9	8b 85 10 fa ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  000ff	8b 30		 mov	 esi, DWORD PTR [eax]
$LN3@Update:

; 162  : 	m_textWidth = 0;

  00101	8b bd 64 fa ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00107	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0010a	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  0010c	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 162  : 	m_textWidth = 0;

  0010f	66 89 47 0c	 mov	 WORD PTR [edi+12], ax

; 163  : 	m_textHeight = spaceHeight;

  00113	66 89 5f 0e	 mov	 WORD PTR [edi+14], bx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00117	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0011b	72 02		 jb	 SHORT $LN134@Update

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0011d	8b 36		 mov	 esi, DWORD PTR [esi]
$LN134@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 168  : 	const char* end = begin + m_stText.length();

  0011f	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00122	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 169  : 
; 170  : 	int wTextMax = (end - begin) * 2;

  00125	03 c0		 add	 eax, eax
  00127	89 85 0c fa ff
	ff		 mov	 DWORD PTR _wTextMax$1$[ebp], eax

; 171  : 	wchar_t* wText = (wchar_t*)_alloca(sizeof(wchar_t)*wTextMax);

  0012d	03 c0		 add	 eax, eax
  0012f	89 8d 28 fa ff
	ff		 mov	 DWORD PTR _end$1$[ebp], ecx
  00135	e8 00 00 00 00	 call	 __alloca_probe_16

; 172  : 
; 173  : 	DWORD dwColor = m_dwTextColor;
; 174  : 
; 175  : 	/* wstring end */
; 176  : 	while (begin < end)

  0013a	8b 85 28 fa ff
	ff		 mov	 eax, DWORD PTR _end$1$[ebp]
  00140	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00143	89 a5 20 fa ff
	ff		 mov	 DWORD PTR _wText$1$[ebp], esp
  00149	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  0014f	3b f0		 cmp	 esi, eax
  00151	0f 83 d8 13 00
	00		 jae	 $LN719@Update
$LL5@Update:

; 177  : 	{
; 178  : 		const char * token = FindToken(begin, end);

  00157	50		 push	 eax
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 ?FindToken@@YAPBDPBD0@Z	; FindToken

; 179  : 
; 180  : 		int wTextLen = Ymir_MultiByteToWideChar(dataCodePage, 0, begin, token - begin, wText, wTextMax);

  0015e	ff b5 0c fa ff
	ff		 push	 DWORD PTR _wTextMax$1$[ebp]
  00164	89 85 00 fa ff
	ff		 mov	 DWORD PTR _token$1$[ebp], eax
  0016a	2b c6		 sub	 eax, esi
  0016c	ff b5 20 fa ff
	ff		 push	 DWORD PTR _wText$1$[ebp]
  00172	50		 push	 eax
  00173	56		 push	 esi
  00174	6a 00		 push	 0
  00176	ff b5 40 fa ff
	ff		 push	 DWORD PTR _dataCodePage$1$[ebp]
  0017c	e8 00 00 00 00	 call	 ?Ymir_MultiByteToWideChar@@YAHIKPBDHPA_WH@Z ; Ymir_MultiByteToWideChar
  00181	83 c4 20	 add	 esp, 32			; 00000020H
  00184	8b f0		 mov	 esi, eax

; 181  : 
; 182  : 		if (m_isSecret)

  00186	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  0018a	89 b5 44 fa ff
	ff		 mov	 DWORD PTR _wTextLen$1$[ebp], esi
  00190	74 2e		 je	 SHORT $LN42@Update

; 183  : 		{
; 184  : 			for(int i=0; i<wTextLen; ++i)

  00192	85 f6		 test	 esi, esi
  00194	0f 8e 67 13 00
	00		 jle	 $LN621@Update
  0019a	66 0f 1f 44 00
	00		 npad	 6
$LL9@Update:

; 185  : 				__DrawCharacter(pFontTexture, dataCodePage, '*', dwColor);

  001a0	53		 push	 ebx
  001a1	6a 2a		 push	 42			; 0000002aH
  001a3	ff b5 40 fa ff
	ff		 push	 DWORD PTR _dataCodePage$1$[ebp]
  001a9	8b cf		 mov	 ecx, edi
  001ab	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  001b1	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  001b6	83 ee 01	 sub	 esi, 1
  001b9	75 e5		 jne	 SHORT $LL9@Update

; 186  : 		}

  001bb	e9 41 13 00 00	 jmp	 $LN621@Update
$LN42@Update:

; 187  : 		else
; 188  : 		{
; 189  : 			if (defCodePage == CP_ARABIC) // ARABIC

  001c0	81 bd 08 fa ff
	ff e8 04 00 00	 cmp	 DWORD PTR _defCodePage$1$[ebp], 1256 ; 000004e8H
  001ca	0f 85 90 0c 00
	00		 jne	 $LN44@Update

; 190  : 			{
; 191  : 
; 192  : 				wchar_t* wArabicText = (wchar_t*)_alloca(sizeof(wchar_t) * wTextLen);

  001d0	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  001d3	e8 00 00 00 00	 call	 __alloca_probe_16
  001d8	8b c4		 mov	 eax, esp

; 193  : 				int wArabicTextLen = Arabic_MakeShape(wText, wTextLen, wArabicText, wTextLen);

  001da	56		 push	 esi
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	ff b5 20 fa ff
	ff		 push	 DWORD PTR _wText$1$[ebp]
  001e3	89 85 4c fa ff
	ff		 mov	 DWORD PTR _wArabicText$1$[ebp], eax
  001e9	e8 00 00 00 00	 call	 ?Arabic_MakeShape@@YAIPA_WI0I@Z ; Arabic_MakeShape
  001ee	8b c8		 mov	 ecx, eax

; 194  : 
; 195  : 				bool isEnglish = true;

  001f0	c6 85 3b fa ff
	ff 01		 mov	 BYTE PTR _isEnglish$1$[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001f7	be 07 00 00 00	 mov	 esi, 7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 193  : 				int wArabicTextLen = Arabic_MakeShape(wText, wTextLen, wArabicText, wTextLen);

  001fc	89 8d 34 fa ff
	ff		 mov	 DWORD PTR _wArabicTextLen$1$[ebp], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 87   : 			SHyperlink() : sx(0), ex(0) { }

  00202	33 ff		 xor	 edi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 198  : 				int x = 0;

  00204	c7 85 44 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$1$[ebp], 0

; 199  : 
; 200  : 				int len;
; 201  : 				int hyperlinkStep = 0;

  0020e	c7 85 58 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
  00218	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 87   : 			SHyperlink() : sx(0), ex(0) { }

  0021b	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 196  : 				int nEnglishBase = wArabicTextLen - 1;

  00221	89 85 54 fa ff
	ff		 mov	 DWORD PTR _nEnglishBase$1$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 87   : 			SHyperlink() : sx(0), ex(0) { }

  00227	33 c0		 xor	 eax, eax
  00229	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0022f	89 85 d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00235	89 b5 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
  0023b	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00241	66 89 85 c0 fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+4], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 202  : 				SHyperlink kHyperlink;

  00248	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0024b	89 bd e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], edi

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00251	89 b5 ec fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+20], esi

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00257	66 89 85 d8 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$13[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 206  : 				if (Arabic_IsInSymbol(wArabicText[wArabicTextLen - 1]))

  0025e	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  00264	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00268	89 bd 48 fa ff
	ff		 mov	 DWORD PTR _no_hyperlink$1$[ebp], edi
  0026e	0f b7 44 48 fe	 movzx	 eax, WORD PTR [eax+ecx*2-2]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  00279	0f b6 8d 3b fa
	ff ff		 movzx	 ecx, BYTE PTR _isEnglish$1$[ebp]
  00280	33 d2		 xor	 edx, edx
  00282	83 c4 14	 add	 esp, 20			; 00000014H
  00285	84 c0		 test	 al, al
  00287	0f 45 ca	 cmovne	 ecx, edx

; 207  : 				{
; 208  : 					isEnglish = false;
; 209  : 				}
; 210  : 
; 211  : 				int i = 0;
; 212  : 				for (i = wArabicTextLen - 1 ; i >= 0; --i)

  0028a	8b 95 54 fa ff
	ff		 mov	 edx, DWORD PTR _nEnglishBase$1$[ebp]
  00290	8b c2		 mov	 eax, edx
  00292	89 8d 60 fa ff
	ff		 mov	 DWORD PTR tv3917[ebp], ecx
  00298	89 85 6c fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  0029e	85 c0		 test	 eax, eax
  002a0	0f 88 24 06 00
	00		 js	 $LN11@Update
  002a6	8b f2		 mov	 esi, edx
  002a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@Update:

; 213  : 				{
; 214  : 					wchar_t wArabicChar = wArabicText[i];

  002b0	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  002b6	0f b7 34 70	 movzx	 esi, WORD PTR [eax+esi*2]

; 215  : 
; 216  : 					if (isEnglish)

  002ba	56		 push	 esi
  002bb	84 c9		 test	 cl, cl
  002bd	0f 84 f2 04 00
	00		 je	 $LN47@Update

; 217  : 					{
; 218  : 
; 219  : 						//	(2)
; 220  : 						//		or
; 221  : 						//
; 222  : 						//
; 223  : 						if (Arabic_IsInSymbol(wArabicChar) && (

  002c3	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  002c8	83 c4 04	 add	 esp, 4
  002cb	84 c0		 test	 al, al
  002cd	74 63		 je	 SHORT $LN712@Update
  002cf	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  002d5	85 c0		 test	 eax, eax
  002d7	0f 84 c0 05 00
	00		 je	 $LN736@Update
  002dd	48		 dec	 eax
  002de	50		 push	 eax
  002df	ff b5 4c fa ff
	ff		 push	 DWORD PTR _wArabicText$1$[ebp]
  002e5	e8 00 00 00 00	 call	 ?Arabic_HasPresentation@@YA_NPA_WH@Z ; Arabic_HasPresentation
  002ea	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  002f0	83 c4 08	 add	 esp, 8
  002f3	84 c0		 test	 al, al
  002f5	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  002fb	75 2a		 jne	 SHORT $LN52@Update
  002fd	0f b7 44 41 02	 movzx	 eax, WORD PTR [ecx+eax*2+2]
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  00308	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  0030e	83 c4 04	 add	 esp, 4
  00311	84 c0		 test	 al, al
  00313	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00319	75 0c		 jne	 SHORT $LN52@Update
  0031b	66 83 7c 41 02
	7c		 cmp	 WORD PTR [ecx+eax*2+2], 124 ; 0000007cH
  00321	0f 85 76 05 00
	00		 jne	 $LN736@Update
$LN52@Update:
  00327	66 83 3c 41 7c	 cmp	 WORD PTR [ecx+eax*2], 124 ; 0000007cH
  0032c	0f 84 6b 05 00
	00		 je	 $LN736@Update
$LN712@Update:

; 224  : 								(i == 0) ||
; 225  : 								(i > 0 &&
; 226  : 									!(Arabic_HasPresentation(wArabicText, i - 1) || Arabic_IsInPresentation(wArabicText[i + 1]))  &&
; 227  : 									wArabicText[i+1] != '|'
; 228  : 								) ||
; 229  : 								wArabicText[i] == '|'
; 230  : 							))//if end.
; 231  : 						{
; 232  : 							// pass
; 233  : 							int temptest = 1;
; 234  : 						}
; 235  : 						else if (Arabic_IsInPresentation(wArabicChar) || Arabic_IsInSymbol(wArabicChar))

  00332	56		 push	 esi
  00333	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  00338	83 c4 04	 add	 esp, 4
  0033b	84 c0		 test	 al, al
  0033d	75 11		 jne	 SHORT $LN54@Update
  0033f	56		 push	 esi
  00340	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  00345	83 c4 04	 add	 esp, 4
  00348	84 c0		 test	 al, al
  0034a	0f 84 4d 05 00
	00		 je	 $LN736@Update
$LN54@Update:

; 236  : 						{
; 237  : 							for (int e = i + 1; e <= nEnglishBase;) {

  00350	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00356	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00359	89 8d 60 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  0035f	3b 8d 54 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  00365	0f 8f 9c 03 00
	00		 jg	 $LN14@Update
  0036b	0f 1f 44 00 00	 npad	 5
$LL13@Update:

; 238  : 								int ret = GetTextTag(&wArabicText[e], wArabicTextLen - e, len, hyperlinkBuffer);

  00370	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  00376	8d 34 48	 lea	 esi, DWORD PTR [eax+ecx*2]
  00379	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  0037f	50		 push	 eax
  00380	8d 85 1c fa ff
	ff		 lea	 eax, DWORD PTR _len$4[ebp]
  00386	50		 push	 eax
  00387	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicTextLen$1$[ebp]
  0038d	2b c1		 sub	 eax, ecx
  0038f	50		 push	 eax
  00390	56		 push	 esi
  00391	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 239  : 
; 240  : 								if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  00399	85 c0		 test	 eax, eax
  0039b	0f 84 93 02 00
	00		 je	 $LN57@Update
  003a1	83 f8 01	 cmp	 eax, 1
  003a4	0f 84 8a 02 00
	00		 je	 $LN57@Update

; 258  : 										}
; 259  : 									}
; 260  : 								}
; 261  : 								else
; 262  : 								{
; 263  : 									if (ret == TEXT_TAG_COLOR)

  003aa	83 f8 02	 cmp	 eax, 2
  003ad	0f 85 80 00 00
	00		 jne	 $LN61@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  003b3	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  003ba	8d bd d8 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  003c0	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  003c3	0f 43 bd d8 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  003ca	33 db		 xor	 ebx, ebx
  003cc	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx

; 150  :     s += size;
; 151  : 
; 152  :     while (t <= --s)

  003d2	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  003d5	3b fa		 cmp	 edi, edx
  003d7	0f 87 00 03 00
	00		 ja	 $LN171@Update
  003dd	0f 1f 00	 npad	 3
$LL172@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  003e0	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  003e3	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  003e6	66 83 f8 09	 cmp	 ax, 9
  003ea	77 05		 ja	 SHORT $LN174@Update

; 155  :             x += y * (*s - L'0');

  003ec	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  003ef	eb 1a		 jmp	 SHORT $LN179@Update
$LN174@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  003f1	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  003f4	66 83 f8 05	 cmp	 ax, 5
  003f8	77 05		 ja	 SHORT $LN176@Update

; 157  :             x += y * (*s - L'a' + 10);

  003fa	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  003fd	eb 0c		 jmp	 SHORT $LN179@Update
$LN176@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  003ff	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00402	66 83 f8 05	 cmp	 ax, 5
  00406	77 1d		 ja	 SHORT $LN178@Update

; 159  :             x += y * (10 + *s - L'A');

  00408	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN179@Update:

; 162  :         y <<= 4;

  0040b	0f af c6	 imul	 eax, esi
  0040e	83 ea 02	 sub	 edx, 2
  00411	c1 e6 04	 shl	 esi, 4
  00414	03 d8		 add	 ebx, eax
  00416	3b fa		 cmp	 edi, edx
  00418	76 c6		 jbe	 SHORT $LL172@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 264  : 										dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  0041a	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  00420	e9 b8 02 00 00	 jmp	 $LN171@Update
$LN178@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  00425	83 cb ff	 or	 ebx, -1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 264  : 										dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  00428	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  0042e	e9 aa 02 00 00	 jmp	 $LN171@Update
$LN61@Update:

; 265  : 									else if (ret == TEXT_TAG_RESTORE_COLOR)

  00433	83 f8 05	 cmp	 eax, 5
  00436	75 14		 jne	 SHORT $LN63@Update

; 266  : 										dwColor = m_dwTextColor;

  00438	8b 85 64 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0043e	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00441	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  00447	e9 97 02 00 00	 jmp	 $LN645@Update
$LN63@Update:

; 267  : 									else if (ret == TEXT_TAG_HYPERLINK_START)

  0044c	83 f8 03	 cmp	 eax, 3
  0044f	75 21		 jne	 SHORT $LN65@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00451	6a 00		 push	 0
  00453	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00458	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 269  : 										hyperlinkStep = 1;

  0045e	c7 85 58 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00468	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 271  : 									}

  0046d	e9 71 02 00 00	 jmp	 $LN645@Update
$LN65@Update:

; 272  : 									else if (ret == TEXT_TAG_HYPERLINK_END)

  00472	83 f8 04	 cmp	 eax, 4
  00475	0f 85 68 02 00
	00		 jne	 $LN645@Update

; 273  : 									{
; 274  : 										if (hyperlinkStep == 1)

  0047b	83 bd 58 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  00482	75 1f		 jne	 SHORT $LN68@Update

; 275  : 										{
; 276  : 											++hyperlinkStep;
; 277  : 											kHyperlink.ex = kHyperlink.sx = 0;

  00484	33 c0		 xor	 eax, eax
  00486	c7 85 58 fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2
  00490	33 ff		 xor	 edi, edi
  00492	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
  00498	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi

; 278  : 										}

  0049e	e9 40 02 00 00	 jmp	 $LN645@Update
$LN68@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  004a3	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  004aa	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004b0	8b 9d e8 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$13[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  004b6	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004bd	8b 95 50 fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  004c3	89 85 58 fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004c9	3b da		 cmp	 ebx, edx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  004cb	77 2f		 ja	 SHORT $LN198@Update

; 2136 :         if (_Large_string_engaged()) {

  004cd	83 fa 08	 cmp	 edx, 8

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  004d0	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  004d6	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  004d9	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  004da	8d bd c0 fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 2136 :         if (_Large_string_engaged()) {

  004e0	0f 43 bd c0 fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$12[ebp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  004e7	50		 push	 eax
  004e8	57		 push	 edi
  004e9	e8 00 00 00 00	 call	 _memmove
  004ee	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  004f1	33 c0		 xor	 eax, eax
  004f3	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 2971 :             return *this;

  004f7	e9 c3 00 00 00	 jmp	 $LN212@Update
$LN198@Update:

; 4221 :         if (_New_size > max_size()) {

  004fc	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  00502	0f 87 62 10 00
	00		 ja	 $LN653@Update

; 4222 :             _Xlen_string(); // result too long
; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00508	8b f3		 mov	 esi, ebx
  0050a	83 ce 07	 or	 esi, 7

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0050d	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00513	76 0a		 jbe	 SHORT $LN217@Update

; 4203 :             return _Max;

  00515	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0051a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0051d	eb 2f		 jmp	 SHORT $LN717@Update
$LN217@Update:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0051f	8b ca		 mov	 ecx, edx
  00521	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00526	d1 e9		 shr	 ecx, 1
  00528	2b c1		 sub	 eax, ecx
  0052a	3b d0		 cmp	 edx, eax
  0052c	76 0a		 jbe	 SHORT $LN218@Update

; 4207 :             return _Max;

  0052e	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00533	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00536	eb 16		 jmp	 SHORT $LN717@Update
$LN218@Update:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00538	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0053b	3b f0		 cmp	 esi, eax
  0053d	0f 42 f0	 cmovb	 esi, eax

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00540	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00543	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00548	0f 87 17 10 00
	00		 ja	 $LN654@Update
$LN717@Update:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0054e	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00550	50		 push	 eax
  00551	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00556	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi
  0055c	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0055e	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00561	89 bd 5c fa ff
	ff		 mov	 DWORD PTR __New_ptr$7[ebp], edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00567	56		 push	 esi
  00568	ff b5 58 fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0056e	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00574	57		 push	 edi
  00575	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0057a	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0057c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0057f	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  00583	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  00589	83 f8 08	 cmp	 eax, 8
  0058c	72 1b		 jb	 SHORT $LN211@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0058e	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00595	50		 push	 eax
  00596	ff b5 c0 fa ff
	ff		 push	 DWORD PTR _kHyperlink$12[ebp+4]
  0059c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  005a1	89 bd c0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+4], edi

; 4236 :         } else {

  005a7	eb 13		 jmp	 SHORT $LN745@Update
$LN211@Update:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  005a9	8d 85 5c fa ff
	ff		 lea	 eax, DWORD PTR __New_ptr$7[ebp]
  005af	50		 push	 eax
  005b0	8d 85 c0 fa ff
	ff		 lea	 eax, DWORD PTR _kHyperlink$12[ebp+4]
  005b6	50		 push	 eax
  005b7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN745@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  005bc	83 c4 08	 add	 esp, 8
$LN212@Update:
  005bf	8b 9d 64 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  005c5	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  005cb	83 c3 64	 add	 ebx, 100		; 00000064H
  005ce	51		 push	 ecx
  005cf	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  005d2	50		 push	 eax
  005d3	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  005d6	74 0f		 je	 SHORT $LN244@Update

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  005d8	53		 push	 ebx
  005d9	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  005de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  005e1	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  005e5	eb 07		 jmp	 SHORT $LN243@Update
$LN244@Update:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  005e7	8b cb		 mov	 ecx, ebx
  005e9	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN243@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 283  : 											no_hyperlink++;

  005ee	ff 85 48 fa ff
	ff		 inc	 DWORD PTR _no_hyperlink$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005f4	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  005fa	6a 00		 push	 0
  005fc	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 286  : 											hyperlinkStep = 0;

  00601	c7 85 58 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0060b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00610	66 8b bd be fa
	ff ff		 mov	 di, WORD PTR _kHyperlink$12[ebp+2]
  00617	8b 85 d4 fa ff
	ff		 mov	 eax, DWORD PTR _kHyperlink$12[ebp+24]
  0061d	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
  00623	89 85 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], eax
  00629	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  0062f	e9 af 00 00 00	 jmp	 $LN645@Update
$LN57@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 242  : 									if (hyperlinkStep == 1)

  00634	83 bd 58 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  0063b	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  0063e	75 13		 jne	 SHORT $LN58@Update

; 243  : 										hyperlinkBuffer.append(1, wArabicText[e]);

  00640	51		 push	 ecx
  00641	6a 01		 push	 1
  00643	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00649	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0064e	e9 90 00 00 00	 jmp	 $LN645@Update
$LN58@Update:

; 244  : 									else
; 245  : 									{
; 246  : 										int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wArabicText[e], dwColor);

  00653	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  00659	53		 push	 ebx
  0065a	51		 push	 ecx
  0065b	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00661	0f b7 c0	 movzx	 eax, ax
  00664	50		 push	 eax
  00665	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  0066b	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 247  : 										kHyperlink.ex += charWidth;

  00670	66 03 f8	 add	 di, ax

; 250  : 										for (int j = 1; j <= no_hyperlink; j++)

  00673	be 01 00 00 00	 mov	 esi, 1
  00678	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  0067e	66 89 bd be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], di
  00685	39 b5 48 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  0068b	7c 56		 jl	 SHORT $LN645@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0068d	0f b7 c0	 movzx	 eax, ax
$LL18@Update:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00690	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00696	0f b7 f8	 movzx	 edi, ax
  00699	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0069e	8b 59 64	 mov	 ebx, DWORD PTR [ecx+100]
  006a1	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  006a4	2b cb		 sub	 ecx, ebx
  006a6	f7 e9		 imul	 ecx
  006a8	03 d1		 add	 edx, ecx
  006aa	c1 fa 04	 sar	 edx, 4
  006ad	8b ca		 mov	 ecx, edx
  006af	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  006b2	03 ca		 add	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 252  : 											if(m_hyperlinkVector.size() < j)

  006b4	3b ce		 cmp	 ecx, esi
  006b6	72 1f		 jb	 SHORT $LN728@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  006b8	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 250  : 										for (int j = 1; j <= no_hyperlink; j++)

  006ba	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  006bb	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  006c2	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 256  : 											tempLink.ex += charWidth;

  006c4	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 257  : 											tempLink.sx += charWidth;

  006c9	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  006cd	8b c7		 mov	 eax, edi
  006cf	3b b5 48 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  006d5	7e b9		 jle	 SHORT $LL18@Update
$LN728@Update:
  006d7	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
$LN171@Update:

; 287  : 											hyperlinkBuffer = L"";
; 288  : 										}
; 289  : 									}
; 290  : 								}
; 291  : 								e += len;

  006dd	8b bd 5c fa ff
	ff		 mov	 edi, DWORD PTR tv3909[ebp]
$LN645@Update:
  006e3	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _e$1$[ebp]
  006e9	03 8d 1c fa ff
	ff		 add	 ecx, DWORD PTR _len$4[ebp]
  006ef	89 8d 60 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  006f5	3b 8d 54 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  006fb	0f 8e 6f fc ff
	ff		 jle	 $LL13@Update
  00701	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
$LN14@Update:

; 292  : 							}
; 293  : 
; 294  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, Arabic_ConvSymbol(wArabicText[i]), dwColor);

  00707	8b 8d 40 fa ff
	ff		 mov	 ecx, DWORD PTR _dataCodePage$1$[ebp]
  0070d	0f b7 f1	 movzx	 esi, cx
  00710	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  00716	53		 push	 ebx
  00717	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0071b	50		 push	 eax
  0071c	e8 00 00 00 00	 call	 ?Arabic_ConvSymbol@@YA_W_W@Z ; Arabic_ConvSymbol
  00721	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00727	83 c4 04	 add	 esp, 4
  0072a	0f b7 c0	 movzx	 eax, ax
  0072d	50		 push	 eax
  0072e	56		 push	 esi
  0072f	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  00735	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 295  : 							kHyperlink.ex += charWidth;

  0073a	0f b7 d8	 movzx	 ebx, ax

; 297  : 							for (int j = 1; j <= no_hyperlink; j++)

  0073d	be 01 00 00 00	 mov	 esi, 1
  00742	66 03 fb	 add	 di, bx
  00745	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  0074b	66 89 bd be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], di
  00752	39 b5 48 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00758	7c 48		 jl	 SHORT $LN648@Update
  0075a	66 0f 1f 44 00
	00		 npad	 6
$LL21@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00760	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00766	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0076b	8b 79 64	 mov	 edi, DWORD PTR [ecx+100]
  0076e	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00771	2b cf		 sub	 ecx, edi
  00773	f7 e9		 imul	 ecx
  00775	03 d1		 add	 edx, ecx
  00777	c1 fa 04	 sar	 edx, 4
  0077a	8b ca		 mov	 ecx, edx
  0077c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0077f	03 ca		 add	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 299  : 								if(m_hyperlinkVector.size() < j)

  00781	3b ce		 cmp	 ecx, esi
  00783	72 1d		 jb	 SHORT $LN648@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00785	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 297  : 							for (int j = 1; j <= no_hyperlink; j++)

  00787	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00788	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0078f	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 303  : 								tempLink.ex += charWidth;

  00791	66 01 5c 87 02	 add	 WORD PTR [edi+eax*4+2], bx

; 304  : 								tempLink.sx += charWidth;

  00796	66 01 1c 87	 add	 WORD PTR [edi+eax*4], bx
  0079a	3b b5 48 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  007a0	7e be		 jle	 SHORT $LL21@Update
$LN648@Update:

; 305  : 							}
; 306  : 
; 307  : 							isEnglish = false;
; 308  : 						}
; 309  : 					}

  007a2	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
  007a8	32 c9		 xor	 cl, cl
  007aa	89 8d 60 fa ff
	ff		 mov	 DWORD PTR tv3917[ebp], ecx
  007b0	e9 ee 00 00 00	 jmp	 $LN746@Update
$LN47@Update:

; 310  : 					else
; 311  : 					{
; 312  : 						if (Arabic_IsInPresentation(wArabicChar) || Arabic_IsInSymbol(wArabicChar))

  007b5	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  007ba	83 c4 04	 add	 esp, 4
  007bd	84 c0		 test	 al, al
  007bf	75 29		 jne	 SHORT $LN73@Update
  007c1	56		 push	 esi
  007c2	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  007c7	83 c4 04	 add	 esp, 4
  007ca	84 c0		 test	 al, al
  007cc	75 1c		 jne	 SHORT $LN73@Update

; 326  : 							}
; 327  : 						}
; 328  : 						else
; 329  : 						{
; 330  : 							nEnglishBase = i;

  007ce	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]

; 331  : 							isEnglish = true;

  007d4	b9 01 00 00 00	 mov	 ecx, 1
  007d9	89 95 54 fa ff
	ff		 mov	 DWORD PTR _nEnglishBase$1$[ebp], edx
  007df	89 8d 60 fa ff
	ff		 mov	 DWORD PTR tv3917[ebp], ecx
  007e5	e9 bf 00 00 00	 jmp	 $LN10@Update
$LN73@Update:

; 313  : 						{
; 314  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, Arabic_ConvSymbol(wArabicText[i]), dwColor);

  007ea	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  007f0	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  007f6	0f b7 f0	 movzx	 esi, ax
  007f9	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  007ff	53		 push	 ebx
  00800	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00804	50		 push	 eax
  00805	e8 00 00 00 00	 call	 ?Arabic_ConvSymbol@@YA_W_W@Z ; Arabic_ConvSymbol
  0080a	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00810	83 c4 04	 add	 esp, 4
  00813	0f b7 c0	 movzx	 eax, ax
  00816	50		 push	 eax
  00817	56		 push	 esi
  00818	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  0081e	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 315  : 							kHyperlink.ex += charWidth;
; 316  : 							x += charWidth;

  00823	01 85 44 fa ff
	ff		 add	 DWORD PTR _x$1$[ebp], eax
  00829	66 03 f8	 add	 di, ax

; 318  : 							for (int j = 1; j <= no_hyperlink; j++)

  0082c	be 01 00 00 00	 mov	 esi, 1
  00831	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  00837	66 89 bd be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], di
  0083e	39 b5 48 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00844	7c 57		 jl	 SHORT $LN736@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00846	0f b7 c0	 movzx	 eax, ax
  00849	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@Update:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00850	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00856	0f b7 f8	 movzx	 edi, ax
  00859	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0085e	8b 59 64	 mov	 ebx, DWORD PTR [ecx+100]
  00861	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00864	2b cb		 sub	 ecx, ebx
  00866	f7 e9		 imul	 ecx
  00868	03 d1		 add	 edx, ecx
  0086a	c1 fa 04	 sar	 edx, 4
  0086d	8b ca		 mov	 ecx, edx
  0086f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00872	03 ca		 add	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 320  : 								if(m_hyperlinkVector.size() < j)

  00874	3b ce		 cmp	 ecx, esi
  00876	72 1f		 jb	 SHORT $LN730@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00878	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 318  : 							for (int j = 1; j <= no_hyperlink; j++)

  0087a	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  0087b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00882	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 324  : 								tempLink.ex += charWidth;

  00884	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 325  : 								tempLink.sx += charWidth;

  00889	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  0088d	8b c7		 mov	 eax, edi
  0088f	3b b5 48 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00895	7e b9		 jle	 SHORT $LL24@Update
$LN730@Update:

; 217  : 					{
; 218  : 
; 219  : 						//	(2)
; 220  : 						//		or
; 221  : 						//
; 222  : 						//
; 223  : 						if (Arabic_IsInSymbol(wArabicChar) && (

  00897	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
$LN736@Update:

; 207  : 				{
; 208  : 					isEnglish = false;
; 209  : 				}
; 210  : 
; 211  : 				int i = 0;
; 212  : 				for (i = wArabicTextLen - 1 ; i >= 0; --i)

  0089d	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR tv3917[ebp]
$LN746@Update:
  008a3	8b 95 54 fa ff
	ff		 mov	 edx, DWORD PTR _nEnglishBase$1$[ebp]
$LN10@Update:
  008a9	8b b5 6c fa ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
  008af	8b bd 5c fa ff
	ff		 mov	 edi, DWORD PTR tv3909[ebp]
  008b5	83 ee 01	 sub	 esi, 1
  008b8	89 b5 6c fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  008be	0f 89 ec f9 ff
	ff		 jns	 $LL12@Update
  008c4	8b b5 50 fa ff
	ff		 mov	 esi, DWORD PTR __Old_capacity$1$[ebp]
$LN11@Update:

; 332  : 						}
; 333  : 					}
; 334  : 				}
; 335  : 
; 336  : 				if (isEnglish)

  008ca	84 c9		 test	 cl, cl
  008cc	0f 84 25 05 00
	00		 je	 $LN723@Update

; 337  : 				{
; 338  : 					for (int e = i + 1; e <= nEnglishBase;) {

  008d2	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
  008d8	41		 inc	 ecx
  008d9	89 8d 6c fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  008df	3b ca		 cmp	 ecx, edx
  008e1	0f 8f 10 05 00
	00		 jg	 $LN723@Update
  008e7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL25@Update:

; 339  : 						int ret = GetTextTag(&wArabicText[e], wArabicTextLen - e, len, hyperlinkBuffer);

  008f0	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  008f6	8d 34 48	 lea	 esi, DWORD PTR [eax+ecx*2]
  008f9	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  008ff	50		 push	 eax
  00900	8d 85 1c fa ff
	ff		 lea	 eax, DWORD PTR _len$4[ebp]
  00906	50		 push	 eax
  00907	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicTextLen$1$[ebp]
  0090d	2b c1		 sub	 eax, ecx
  0090f	50		 push	 eax
  00910	56		 push	 esi
  00911	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00916	83 c4 10	 add	 esp, 16			; 00000010H

; 340  : 
; 341  : 						if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  00919	85 c0		 test	 eax, eax
  0091b	0f 84 93 02 00
	00		 je	 $LN78@Update
  00921	83 f8 01	 cmp	 eax, 1
  00924	0f 84 8a 02 00
	00		 je	 $LN78@Update

; 358  : 								}
; 359  : 							}
; 360  : 						}
; 361  : 						else
; 362  : 						{
; 363  : 							if (ret == TEXT_TAG_COLOR)

  0092a	83 f8 02	 cmp	 eax, 2
  0092d	0f 85 80 00 00
	00		 jne	 $LN82@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00933	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  0093a	8d bd d8 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  00940	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00943	0f 43 bd d8 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  0094a	33 db		 xor	 ebx, ebx
  0094c	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx

; 150  :     s += size;
; 151  : 
; 152  :     while (t <= --s)

  00952	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  00955	3b fa		 cmp	 edi, edx
  00957	0f 87 70 04 00
	00		 ja	 $LN343@Update
  0095d	0f 1f 00	 npad	 3
$LL344@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  00960	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00963	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00966	66 83 f8 09	 cmp	 ax, 9
  0096a	77 05		 ja	 SHORT $LN346@Update

; 155  :             x += y * (*s - L'0');

  0096c	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0096f	eb 1a		 jmp	 SHORT $LN351@Update
$LN346@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  00971	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00974	66 83 f8 05	 cmp	 ax, 5
  00978	77 05		 ja	 SHORT $LN348@Update

; 157  :             x += y * (*s - L'a' + 10);

  0097a	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  0097d	eb 0c		 jmp	 SHORT $LN351@Update
$LN348@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  0097f	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00982	66 83 f8 05	 cmp	 ax, 5
  00986	77 1d		 ja	 SHORT $LN350@Update

; 159  :             x += y * (10 + *s - L'A');

  00988	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN351@Update:

; 162  :         y <<= 4;

  0098b	0f af c6	 imul	 eax, esi
  0098e	83 ea 02	 sub	 edx, 2
  00991	c1 e6 04	 shl	 esi, 4
  00994	03 d8		 add	 ebx, eax
  00996	3b fa		 cmp	 edi, edx
  00998	76 c6		 jbe	 SHORT $LL344@Update
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 364  : 								dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  0099a	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  009a0	e9 28 04 00 00	 jmp	 $LN343@Update
$LN350@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  009a5	83 cb ff	 or	 ebx, -1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 364  : 								dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  009a8	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  009ae	e9 1a 04 00 00	 jmp	 $LN343@Update
$LN82@Update:

; 365  : 							else if (ret == TEXT_TAG_RESTORE_COLOR)

  009b3	83 f8 05	 cmp	 eax, 5
  009b6	75 14		 jne	 SHORT $LN84@Update

; 366  : 								dwColor = m_dwTextColor;

  009b8	8b 85 64 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  009be	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  009c1	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  009c7	e9 07 04 00 00	 jmp	 $LN722@Update
$LN84@Update:

; 367  : 							else if (ret == TEXT_TAG_HYPERLINK_START)

  009cc	83 f8 03	 cmp	 eax, 3
  009cf	75 21		 jne	 SHORT $LN86@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  009d1	6a 00		 push	 0
  009d3	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  009d8	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 369  : 								hyperlinkStep = 1;

  009de	c7 85 58 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  009e8	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 371  : 							}

  009ed	e9 e1 03 00 00	 jmp	 $LN722@Update
$LN86@Update:

; 372  : 							else if (ret == TEXT_TAG_HYPERLINK_END)

  009f2	83 f8 04	 cmp	 eax, 4
  009f5	0f 85 d8 03 00
	00		 jne	 $LN722@Update

; 373  : 							{
; 374  : 								if (hyperlinkStep == 1)

  009fb	83 bd 58 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  00a02	75 1f		 jne	 SHORT $LN89@Update

; 375  : 								{
; 376  : 									++hyperlinkStep;
; 377  : 									kHyperlink.ex = kHyperlink.sx = 0;

  00a04	33 c0		 xor	 eax, eax
  00a06	c7 85 58 fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2
  00a10	33 ff		 xor	 edi, edi
  00a12	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
  00a18	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi

; 378  : 								}

  00a1e	e9 b0 03 00 00	 jmp	 $LN722@Update
$LN89@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00a23	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  00a2a	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00a30	8b 9d e8 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$13[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  00a36	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00a3d	8b 95 50 fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  00a43	89 85 44 fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00a49	3b da		 cmp	 ebx, edx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00a4b	77 2f		 ja	 SHORT $LN370@Update

; 2136 :         if (_Large_string_engaged()) {

  00a4d	83 fa 08	 cmp	 edx, 8

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00a50	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00a56	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  00a59	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00a5a	8d bd c0 fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 2136 :         if (_Large_string_engaged()) {

  00a60	0f 43 bd c0 fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$12[ebp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00a67	50		 push	 eax
  00a68	57		 push	 edi
  00a69	e8 00 00 00 00	 call	 _memmove
  00a6e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00a71	33 c0		 xor	 eax, eax
  00a73	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 2971 :             return *this;

  00a77	e9 c3 00 00 00	 jmp	 $LN384@Update
$LN370@Update:

; 4221 :         if (_New_size > max_size()) {

  00a7c	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  00a82	0f 87 e2 0a 00
	00		 ja	 $LN653@Update

; 4222 :             _Xlen_string(); // result too long
; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00a88	8b f3		 mov	 esi, ebx
  00a8a	83 ce 07	 or	 esi, 7

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00a8d	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00a93	76 0a		 jbe	 SHORT $LN389@Update

; 4203 :             return _Max;

  00a95	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00a9a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00a9d	eb 2f		 jmp	 SHORT $LN716@Update
$LN389@Update:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00a9f	8b ca		 mov	 ecx, edx
  00aa1	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00aa6	d1 e9		 shr	 ecx, 1
  00aa8	2b c1		 sub	 eax, ecx
  00aaa	3b d0		 cmp	 edx, eax
  00aac	76 0a		 jbe	 SHORT $LN390@Update

; 4207 :             return _Max;

  00aae	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00ab3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00ab6	eb 16		 jmp	 SHORT $LN716@Update
$LN390@Update:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00ab8	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00abb	3b f0		 cmp	 esi, eax
  00abd	0f 42 f0	 cmovb	 esi, eax

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00ac0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00ac3	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00ac8	0f 87 97 0a 00
	00		 ja	 $LN654@Update
$LN716@Update:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00ace	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00ad0	50		 push	 eax
  00ad1	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00ad6	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi
  00adc	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00ade	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00ae1	89 bd 60 fa ff
	ff		 mov	 DWORD PTR __New_ptr$8[ebp], edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00ae7	56		 push	 esi
  00ae8	ff b5 44 fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00aee	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00af4	57		 push	 edi
  00af5	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00afa	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00afc	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00aff	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  00b03	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  00b09	83 f8 08	 cmp	 eax, 8
  00b0c	72 1b		 jb	 SHORT $LN383@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00b0e	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00b15	50		 push	 eax
  00b16	ff b5 c0 fa ff
	ff		 push	 DWORD PTR _kHyperlink$12[ebp+4]
  00b1c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00b21	89 bd c0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+4], edi

; 4236 :         } else {

  00b27	eb 13		 jmp	 SHORT $LN748@Update
$LN383@Update:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00b29	8d 85 60 fa ff
	ff		 lea	 eax, DWORD PTR __New_ptr$8[ebp]
  00b2f	50		 push	 eax
  00b30	8d 85 c0 fa ff
	ff		 lea	 eax, DWORD PTR _kHyperlink$12[ebp+4]
  00b36	50		 push	 eax
  00b37	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN748@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00b3c	83 c4 08	 add	 esp, 8
$LN384@Update:
  00b3f	8b 9d 64 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00b45	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  00b4b	83 c3 64	 add	 ebx, 100		; 00000064H
  00b4e	51		 push	 ecx
  00b4f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00b52	50		 push	 eax
  00b53	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00b56	74 0f		 je	 SHORT $LN415@Update

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00b58	53		 push	 ebx
  00b59	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  00b5e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00b61	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00b65	eb 07		 jmp	 SHORT $LN414@Update
$LN415@Update:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00b67	8b cb		 mov	 ecx, ebx
  00b69	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN414@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 383  : 									no_hyperlink++;

  00b6e	ff 85 48 fa ff
	ff		 inc	 DWORD PTR _no_hyperlink$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00b74	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00b7a	6a 00		 push	 0
  00b7c	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 385  : 									hyperlinkStep = 0;

  00b81	c7 85 58 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00b8b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00b90	66 8b bd be fa
	ff ff		 mov	 di, WORD PTR _kHyperlink$12[ebp+2]
  00b97	8b 85 d4 fa ff
	ff		 mov	 eax, DWORD PTR _kHyperlink$12[ebp+24]
  00b9d	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
  00ba3	89 85 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], eax
  00ba9	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  00baf	e9 1f 02 00 00	 jmp	 $LN722@Update
$LN78@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 343  : 							if (hyperlinkStep == 1)

  00bb4	83 bd 58 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  00bbb	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00bbe	0f 85 7a 01 00
	00		 jne	 $LN79@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2884 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00bc4	8b 9d ec fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$13[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 344  : 								hyperlinkBuffer.append(1, wArabicText[e]);

  00bca	8b d1		 mov	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2884 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00bcc	8b 8d e8 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp+16]
  00bd2	8b c3		 mov	 eax, ebx
  00bd4	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 344  : 								hyperlinkBuffer.append(1, wArabicText[e]);

  00bd6	89 95 60 fa ff
	ff		 mov	 DWORD PTR __Ch$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2884 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00bdc	89 8d 30 fa ff
	ff		 mov	 DWORD PTR __Old_size$1$[ebp], ecx

; 2885 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00be2	83 f8 01	 cmp	 eax, 1
  00be5	72 2f		 jb	 SHORT $LN267@Update

; 2886 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00be7	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2136 :         if (_Large_string_engaged()) {

  00bea	83 fb 08	 cmp	 ebx, 8

; 2890 :             return *this;

  00bed	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
  00bf3	89 85 e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00bf9	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2136 :         if (_Large_string_engaged()) {

  00bff	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 261  :             *_Su = _C;

  00c06	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2889 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00c0a	33 d2		 xor	 edx, edx
  00c0c	66 89 54 48 02	 mov	 WORD PTR [eax+ecx*2+2], dx

; 2890 :             return *this;

  00c11	e9 bd 01 00 00	 jmp	 $LN722@Update
$LN267@Update:

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00c16	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00c1b	2b c1		 sub	 eax, ecx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00c1d	83 f8 01	 cmp	 eax, 1
  00c20	0f 82 44 09 00
	00		 jb	 $LN653@Update

; 4250 :             _Xlen_string(); // result too long
; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00c26	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00c29	8b f0		 mov	 esi, eax

; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00c2b	89 85 44 fa ff
	ff		 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00c31	83 ce 07	 or	 esi, 7
  00c34	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00c3a	76 0a		 jbe	 SHORT $LN289@Update

; 4203 :             return _Max;

  00c3c	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00c41	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00c44	eb 2f		 jmp	 SHORT $LN715@Update
$LN289@Update:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00c46	8b cb		 mov	 ecx, ebx
  00c48	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00c4d	d1 e9		 shr	 ecx, 1
  00c4f	2b c1		 sub	 eax, ecx
  00c51	3b d8		 cmp	 ebx, eax
  00c53	76 0a		 jbe	 SHORT $LN290@Update

; 4207 :             return _Max;

  00c55	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00c5a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00c5d	eb 16		 jmp	 SHORT $LN715@Update
$LN290@Update:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00c5f	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00c62	3b f0		 cmp	 esi, eax
  00c64	0f 42 f0	 cmovb	 esi, eax

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00c67	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00c6a	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00c6f	0f 87 f0 08 00
	00		 ja	 $LN654@Update
$LN715@Update:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00c75	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00c77	50		 push	 eax
  00c78	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00c7d	8b f8		 mov	 edi, eax

; 4260 :         _My_data._Myres       = _New_capacity;

  00c7f	89 b5 ec fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+20], esi
  00c85	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00c8b	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  00c8e	89 85 e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], eax

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00c94	8b 85 30 fa ff
	ff		 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  00c9a	89 bd 2c fa ff
	ff		 mov	 DWORD PTR __New_ptr$5[ebp], edi
  00ca0	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00ca3	8d 14 39	 lea	 edx, DWORD PTR [ecx+edi]
  00ca6	89 95 44 fa ff
	ff		 mov	 DWORD PTR __Su$1$[ebp], edx
  00cac	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  00caf	89 b5 30 fa ff
	ff		 mov	 DWORD PTR tv4261[ebp], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00cb5	51		 push	 ecx
  00cb6	83 fb 08	 cmp	 ebx, 8
  00cb9	72 45		 jb	 SHORT $LN283@Update

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00cbb	8b b5 d8 fa ff
	ff		 mov	 esi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00cc1	56		 push	 esi
  00cc2	57		 push	 edi
  00cc3	e8 00 00 00 00	 call	 _memcpy

; 261  :             *_Su = _C;

  00cc8	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR __Su$1$[ebp]
  00cce	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR __Ch$1$[ebp]
  00cd4	66 89 08	 mov	 WORD PTR [eax], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00cd7	33 c9		 xor	 ecx, ecx
  00cd9	8b 85 30 fa ff
	ff		 mov	 eax, DWORD PTR tv4261[ebp]
  00cdf	66 89 4c 07 02	 mov	 WORD PTR [edi+eax+2], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ce4	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  00ceb	50		 push	 eax
  00cec	56		 push	 esi
  00ced	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00cf2	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00cf5	89 bd d8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp], edi

; 4267 :         } else {

  00cfb	e9 c7 00 00 00	 jmp	 $LN731@Update
$LN283@Update:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00d00	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  00d06	50		 push	 eax
  00d07	57		 push	 edi
  00d08	e8 00 00 00 00	 call	 _memcpy

; 261  :             *_Su = _C;

  00d0d	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR __Su$1$[ebp]
  00d13	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR __Ch$1$[ebp]
  00d19	66 89 08	 mov	 WORD PTR [eax], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00d1c	33 c0		 xor	 eax, eax
  00d1e	66 89 44 37 02	 mov	 WORD PTR [edi+esi+2], ax

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00d23	8d 85 2c fa ff
	ff		 lea	 eax, DWORD PTR __New_ptr$5[ebp]
  00d29	50		 push	 eax
  00d2a	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  00d30	50		 push	 eax
  00d31	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  00d36	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 344  : 								hyperlinkBuffer.append(1, wArabicText[e]);

  00d39	e9 89 00 00 00	 jmp	 $LN731@Update
$LN79@Update:

; 345  : 							else
; 346  : 							{
; 347  : 								int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wArabicText[e], dwColor);

  00d3e	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  00d44	53		 push	 ebx
  00d45	51		 push	 ecx
  00d46	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00d4c	0f b7 c0	 movzx	 eax, ax
  00d4f	50		 push	 eax
  00d50	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  00d56	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 348  : 								kHyperlink.ex += charWidth;

  00d5b	66 03 f8	 add	 di, ax

; 350  : 								for (int j = 1; j <= no_hyperlink; j++)

  00d5e	be 01 00 00 00	 mov	 esi, 1
  00d63	89 bd 5c fa ff
	ff		 mov	 DWORD PTR tv3909[ebp], edi
  00d69	66 89 bd be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], di
  00d70	39 b5 48 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00d76	7c 5b		 jl	 SHORT $LN722@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00d78	0f b7 c0	 movzx	 eax, ax
  00d7b	0f 1f 44 00 00	 npad	 5
$LL30@Update:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00d80	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00d86	0f b7 f8	 movzx	 edi, ax
  00d89	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00d8e	8b 59 64	 mov	 ebx, DWORD PTR [ecx+100]
  00d91	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00d94	2b cb		 sub	 ecx, ebx
  00d96	f7 e9		 imul	 ecx
  00d98	03 d1		 add	 edx, ecx
  00d9a	c1 fa 04	 sar	 edx, 4
  00d9d	8b ca		 mov	 ecx, edx
  00d9f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00da2	03 ca		 add	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 352  : 									if(m_hyperlinkVector.size() < j)

  00da4	3b ce		 cmp	 ecx, esi
  00da6	72 1f		 jb	 SHORT $LN731@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00da8	2b ce		 sub	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 350  : 								for (int j = 1; j <= no_hyperlink; j++)

  00daa	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00dab	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00db2	2b c1		 sub	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 356  : 									tempLink.ex += charWidth;

  00db4	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 357  : 									tempLink.sx += charWidth;

  00db9	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  00dbd	8b c7		 mov	 eax, edi
  00dbf	3b b5 48 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00dc5	7e b9		 jle	 SHORT $LL30@Update
$LN731@Update:

; 386  : 									hyperlinkBuffer = L"";
; 387  : 								}
; 388  : 							}
; 389  : 						}
; 390  : 						e += len;

  00dc7	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
$LN343@Update:
  00dcd	8b bd 5c fa ff
	ff		 mov	 edi, DWORD PTR tv3909[ebp]
$LN722@Update:
  00dd3	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR _e$1$[ebp]
  00dd9	03 8d 1c fa ff
	ff		 add	 ecx, DWORD PTR _len$4[ebp]
  00ddf	89 8d 6c fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  00de5	3b 8d 54 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  00deb	0f 8e ff fa ff
	ff		 jle	 $LL25@Update
  00df1	8b b5 50 fa ff
	ff		 mov	 esi, DWORD PTR __Old_capacity$1$[ebp]
$LN723@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00df7	8b 85 ec fa ff
	ff		 mov	 eax, DWORD PTR _hyperlinkBuffer$13[ebp+20]
  00dfd	83 f8 08	 cmp	 eax, 8
  00e00	72 16		 jb	 SHORT $LN429@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00e02	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00e09	50		 push	 eax
  00e0a	ff b5 d8 fa ff
	ff		 push	 DWORD PTR _hyperlinkBuffer$13[ebp]
  00e10	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00e15	83 c4 08	 add	 esp, 8
$LN429@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00e18	33 c0		 xor	 eax, eax
  00e1a	c7 85 e8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], 0
  00e24	c7 85 ec fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 7
  00e2e	66 89 85 d8 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$13[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 394  : 			}

  00e35	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00e3c	83 fe 08	 cmp	 esi, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00e3f	0f 82 b6 06 00
	00		 jb	 $LN741@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00e45	8d 04 75 02 00
	00 00		 lea	 eax, DWORD PTR [esi*2+2]
  00e4c	50		 push	 eax
  00e4d	ff b5 c0 fa ff
	ff		 push	 DWORD PTR _kHyperlink$12[ebp+4]
  00e53	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00e58	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 394  : 			}

  00e5b	e9 9b 06 00 00	 jmp	 $LN741@Update
$LN44@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 87   : 			SHyperlink() : sx(0), ex(0) { }

  00e60	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 397  : 				int x = 0;

  00e62	33 ff		 xor	 edi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00e64	bb 07 00 00 00	 mov	 ebx, 7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 397  : 				int x = 0;

  00e69	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi

; 398  : 				int len;
; 399  : 				int hyperlinkStep = 0;

  00e6f	89 bd 60 fa ff
	ff		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 87   : 			SHyperlink() : sx(0), ex(0) { }

  00e75	89 85 88 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp], eax
  00e7b	89 85 58 fa ff
	ff		 mov	 DWORD PTR tv4084[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00e81	89 85 9c fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+20], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00e87	89 9d 6c fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ebx
  00e8d	89 9d a0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+24], ebx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00e93	66 89 85 8c fa
	ff ff		 mov	 WORD PTR _kHyperlink$10[ebp+4], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 400  : 				SHyperlink kHyperlink;

  00e9a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00ea1	89 85 b4 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00ea7	89 9d b8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+20], ebx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00ead	66 89 85 a4 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$11[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.h

; 95   : 			SEmoji() : x(0)

  00eb4	66 89 85 14 fa
	ff ff		 mov	 WORD PTR _kEmoji$3[ebp], ax

; 96   : 			{
; 97   : 				pInstance = NULL;

  00ebb	89 85 18 fa ff
	ff		 mov	 DWORD PTR _kEmoji$3[ebp+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 404  : 				int emojiStep = 0;

  00ec1	89 85 54 fa ff
	ff		 mov	 DWORD PTR _emojiStep$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00ec7	89 85 80 fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$9[ebp+16], eax

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00ecd	89 9d 84 fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$9[ebp+20], ebx

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00ed3	66 89 85 70 fa
	ff ff		 mov	 WORD PTR _emojiBuffer$9[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 408  : 				for (int i = 0; i < wTextLen; )

  00eda	33 c9		 xor	 ecx, ecx
  00edc	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00ee0	89 8d 34 fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  00ee6	85 f6		 test	 esi, esi
  00ee8	0f 8e 8a 05 00
	00		 jle	 $LN725@Update
  00eee	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _wTextLen$1$[ebp]
$LL31@Update:

; 409  : 				{
; 410  : 					int ret = GetTextTag(&wText[i], wTextLen - i, len, hyperlinkBuffer);

  00ef4	8b 95 20 fa ff
	ff		 mov	 edx, DWORD PTR _wText$1$[ebp]
  00efa	2b c1		 sub	 eax, ecx
  00efc	8d 34 4a	 lea	 esi, DWORD PTR [edx+ecx*2]
  00eff	8d 95 a4 fa ff
	ff		 lea	 edx, DWORD PTR _hyperlinkBuffer$11[ebp]
  00f05	52		 push	 edx
  00f06	8d 95 04 fa ff
	ff		 lea	 edx, DWORD PTR _len$2[ebp]
  00f0c	52		 push	 edx
  00f0d	50		 push	 eax
  00f0e	56		 push	 esi
  00f0f	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00f14	83 c4 10	 add	 esp, 16			; 00000010H

; 411  : 
; 412  : 					if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  00f17	85 c0		 test	 eax, eax
  00f19	0f 84 95 04 00
	00		 je	 $LN93@Update
  00f1f	83 f8 01	 cmp	 eax, 1
  00f22	0f 84 8c 04 00
	00		 je	 $LN93@Update

; 425  : 						}
; 426  : 					}
; 427  : 					else
; 428  : 					{
; 429  : 						if (ret == TEXT_TAG_COLOR)

  00f28	83 f8 02	 cmp	 eax, 2
  00f2b	0f 85 85 00 00
	00		 jne	 $LN98@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00f31	83 bd b8 fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 8
  00f38	8d bd a4 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  00f3e	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00f41	0f 43 bd a4 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  00f48	33 db		 xor	 ebx, ebx
  00f4a	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx

; 150  :     s += size;
; 151  : 
; 152  :     while (t <= --s)

  00f50	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  00f53	3b fa		 cmp	 edi, edx
  00f55	0f 87 d0 04 00
	00		 ja	 $LN486@Update
  00f5b	0f 1f 44 00 00	 npad	 5
$LL487@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  00f60	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00f63	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00f66	66 83 f8 09	 cmp	 ax, 9
  00f6a	77 05		 ja	 SHORT $LN489@Update

; 155  :             x += y * (*s - L'0');

  00f6c	83 e9 30	 sub	 ecx, 48			; 00000030H
  00f6f	eb 1a		 jmp	 SHORT $LN494@Update
$LN489@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  00f71	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00f74	66 83 f8 05	 cmp	 ax, 5
  00f78	77 05		 ja	 SHORT $LN491@Update

; 157  :             x += y * (*s - L'a' + 10);

  00f7a	83 e9 57	 sub	 ecx, 87			; 00000057H
  00f7d	eb 0c		 jmp	 SHORT $LN494@Update
$LN491@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  00f7f	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00f82	66 83 f8 05	 cmp	 ax, 5
  00f86	77 1f		 ja	 SHORT $LN493@Update

; 159  :             x += y * (10 + *s - L'A');

  00f88	83 e9 37	 sub	 ecx, 55			; 00000037H
$LN494@Update:

; 162  :         y <<= 4;

  00f8b	8b c6		 mov	 eax, esi
  00f8d	83 ea 02	 sub	 edx, 2
  00f90	0f af c1	 imul	 eax, ecx
  00f93	c1 e6 04	 shl	 esi, 4
  00f96	03 d8		 add	 ebx, eax
  00f98	3b fa		 cmp	 edi, edx
  00f9a	76 c4		 jbe	 SHORT $LL487@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00f9c	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  00fa2	e9 84 04 00 00	 jmp	 $LN486@Update
$LN493@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  00fa7	c7 85 68 fa ff
	ff ff ff ff ff	 mov	 DWORD PTR _dwColor$1$[ebp], -1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 430  : 							dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  00fb1	e9 75 04 00 00	 jmp	 $LN486@Update
$LN98@Update:

; 431  : 						else if (ret == TEXT_TAG_RESTORE_COLOR)

  00fb6	83 f8 05	 cmp	 eax, 5
  00fb9	75 14		 jne	 SHORT $LN100@Update

; 432  : 							dwColor = m_dwTextColor;

  00fbb	8b 85 64 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00fc1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00fc4	89 85 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], eax
  00fca	e9 5c 04 00 00	 jmp	 $LN486@Update
$LN100@Update:

; 433  : 						else if (ret == TEXT_TAG_HYPERLINK_START)

  00fcf	83 f8 03	 cmp	 eax, 3
  00fd2	75 21		 jne	 SHORT $LN102@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00fd4	6a 00		 push	 0
  00fd6	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00fdb	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 435  : 							hyperlinkStep = 1;

  00fe1	c7 85 60 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00feb	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 437  : 						}

  00ff0	e9 36 04 00 00	 jmp	 $LN486@Update
$LN102@Update:

; 438  : 						else if (ret == TEXT_TAG_HYPERLINK_END)

  00ff5	83 f8 04	 cmp	 eax, 4
  00ff8	0f 85 b4 01 00
	00		 jne	 $LN104@Update

; 439  : 						{
; 440  : 							if (hyperlinkStep == 1)

  00ffe	83 bd 60 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  01005	75 26		 jne	 SHORT $LN106@Update

; 441  : 							{
; 442  : 								++hyperlinkStep;
; 443  : 								kHyperlink.ex = kHyperlink.sx = x;

  01007	0f b7 c7	 movzx	 eax, di
  0100a	c7 85 60 fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2
  01014	66 89 bd 88 fa
	ff ff		 mov	 WORD PTR _kHyperlink$10[ebp], di
  0101b	89 85 58 fa ff
	ff		 mov	 DWORD PTR tv4084[ebp], eax
  01021	66 89 85 8a fa
	ff ff		 mov	 WORD PTR _kHyperlink$10[ebp+2], ax

; 444  : 							}

  01028	e9 fe 03 00 00	 jmp	 $LN486@Update
$LN106@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0102d	83 bd b8 fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 8
  01034	8d 85 a4 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0103a	8b 9d b4 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$11[ebp+16]

; 2145 :         if (_Large_string_engaged()) {

  01040	0f 43 85 a4 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  01047	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2145 :         if (_Large_string_engaged()) {

  0104d	89 85 2c fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  01053	3b da		 cmp	 ebx, edx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  01055	77 2f		 ja	 SHORT $LN513@Update

; 2136 :         if (_Large_string_engaged()) {

  01057	83 fa 08	 cmp	 edx, 8

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0105a	89 9d 9c fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  01060	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  01063	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  01064	8d bd 8c fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$10[ebp+4]

; 2136 :         if (_Large_string_engaged()) {

  0106a	0f 43 bd 8c fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$10[ebp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  01071	50		 push	 eax
  01072	57		 push	 edi
  01073	e8 00 00 00 00	 call	 _memmove
  01078	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0107b	33 c0		 xor	 eax, eax
  0107d	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 2971 :             return *this;

  01081	e9 c3 00 00 00	 jmp	 $LN527@Update
$LN513@Update:

; 4221 :         if (_New_size > max_size()) {

  01086	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  0108c	0f 87 d8 04 00
	00		 ja	 $LN653@Update

; 4222 :             _Xlen_string(); // result too long
; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  01092	8b f3		 mov	 esi, ebx
  01094	83 ce 07	 or	 esi, 7

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  01097	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0109d	76 0a		 jbe	 SHORT $LN532@Update

; 4203 :             return _Max;

  0109f	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  010a4	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  010a7	eb 2f		 jmp	 SHORT $LN714@Update
$LN532@Update:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  010a9	8b ca		 mov	 ecx, edx
  010ab	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  010b0	d1 e9		 shr	 ecx, 1
  010b2	2b c1		 sub	 eax, ecx
  010b4	3b d0		 cmp	 edx, eax
  010b6	76 0a		 jbe	 SHORT $LN533@Update

; 4207 :             return _Max;

  010b8	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  010bd	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  010c0	eb 16		 jmp	 SHORT $LN714@Update
$LN533@Update:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  010c2	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  010c5	3b f0		 cmp	 esi, eax
  010c7	0f 42 f0	 cmovb	 esi, eax

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  010ca	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  010cd	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  010d2	0f 87 8d 04 00
	00		 ja	 $LN654@Update
$LN714@Update:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  010d8	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  010da	50		 push	 eax
  010db	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  010e0	89 b5 a0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+24], esi
  010e6	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  010e8	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  010eb	89 bd 30 fa ff
	ff		 mov	 DWORD PTR __New_ptr$6[ebp], edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  010f1	56		 push	 esi
  010f2	ff b5 2c fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  010f8	89 9d 9c fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+20], ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  010fe	57		 push	 edi
  010ff	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  01104	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  01106	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  01109	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0110d	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  01113	83 f8 08	 cmp	 eax, 8
  01116	72 1b		 jb	 SHORT $LN526@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01118	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  0111f	50		 push	 eax
  01120	ff b5 8c fa ff
	ff		 push	 DWORD PTR _kHyperlink$10[ebp+4]
  01126	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  0112b	89 bd 8c fa ff
	ff		 mov	 DWORD PTR _kHyperlink$10[ebp+4], edi

; 4236 :         } else {

  01131	eb 13		 jmp	 SHORT $LN749@Update
$LN526@Update:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  01133	8d 85 30 fa ff
	ff		 lea	 eax, DWORD PTR __New_ptr$6[ebp]
  01139	50		 push	 eax
  0113a	8d 85 8c fa ff
	ff		 lea	 eax, DWORD PTR _kHyperlink$10[ebp+4]
  01140	50		 push	 eax
  01141	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN749@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  01146	83 c4 08	 add	 esp, 8
$LN527@Update:
  01149	8b 9d 64 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0114f	8d 8d 88 fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$10[ebp]
  01155	83 c3 64	 add	 ebx, 100		; 00000064H
  01158	51		 push	 ecx
  01159	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0115c	50		 push	 eax
  0115d	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  01160	74 0f		 je	 SHORT $LN558@Update

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  01162	53		 push	 ebx
  01163	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  01168	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  0116b	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0116f	eb 07		 jmp	 SHORT $LN557@Update
$LN558@Update:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  01171	8b cb		 mov	 ecx, ebx
  01173	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN557@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01178	6a 00		 push	 0
  0117a	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0117f	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 450  : 								hyperlinkStep = 0;

  01185	c7 85 60 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0118f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 453  : 						}

  01194	0f b7 85 8a fa
	ff ff		 movzx	 eax, WORD PTR _kHyperlink$10[ebp+2]
  0119b	8b 9d a0 fa ff
	ff		 mov	 ebx, DWORD PTR _kHyperlink$10[ebp+24]
  011a1	89 9d 6c fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ebx
  011a7	89 85 58 fa ff
	ff		 mov	 DWORD PTR tv4084[ebp], eax
  011ad	e9 7f 02 00 00	 jmp	 $LN97@Update
$LN104@Update:

; 454  : #ifdef ENABLE_EMOJI_SYSTEM
; 455  : 						else if (ret == TEXT_TAG_EMOJI_START)

  011b2	83 f8 06	 cmp	 eax, 6
  011b5	75 21		 jne	 SHORT $LN108@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  011b7	6a 00		 push	 0
  011b9	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  011be	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 457  : 							emojiStep = 1;

  011c4	c7 85 54 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _emojiStep$1$[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  011ce	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 459  : 						}

  011d3	e9 53 02 00 00	 jmp	 $LN486@Update
$LN108@Update:

; 460  : 
; 461  : 						else if (ret == TEXT_TAG_EMOJI_END)

  011d8	83 f8 07	 cmp	 eax, 7
  011db	0f 85 4a 02 00
	00		 jne	 $LN486@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  011e1	83 bd 84 fa ff
	ff 08		 cmp	 DWORD PTR _emojiBuffer$9[ebp+20], 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 466  : 							int retLen = Ymir_WideCharToMultiByte(GetDefaultCodePage(), 0, emojiBuffer.c_str(), emojiBuffer.length(), retBuf, sizeof(retBuf) - 1, NULL, NULL);

  011e8	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _retBuf$14[ebp]
  011ee	6a 00		 push	 0
  011f0	6a 00		 push	 0
  011f2	68 ff 03 00 00	 push	 1023			; 000003ffH
  011f7	51		 push	 ecx
  011f8	ff b5 80 fa ff
	ff		 push	 DWORD PTR _emojiBuffer$9[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  011fe	8d 85 70 fa ff
	ff		 lea	 eax, DWORD PTR _emojiBuffer$9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 463  : 							kEmoji.x = x;

  01204	66 89 bd 14 fa
	ff ff		 mov	 WORD PTR _kEmoji$3[ebp], di
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0120b	0f 43 85 70 fa
	ff ff		 cmovae	 eax, DWORD PTR _emojiBuffer$9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 466  : 							int retLen = Ymir_WideCharToMultiByte(GetDefaultCodePage(), 0, emojiBuffer.c_str(), emojiBuffer.length(), retBuf, sizeof(retBuf) - 1, NULL, NULL);

  01212	50		 push	 eax
  01213	6a 00		 push	 0
  01215	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  0121a	50		 push	 eax
  0121b	e8 00 00 00 00	 call	 ?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z ; Ymir_WideCharToMultiByte
  01220	83 c4 20	 add	 esp, 32			; 00000020H

; 467  : 							retBuf[retLen] = '\0';

  01223	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  01228	0f 83 32 03 00
	00		 jae	 $LN118@Update
  0122e	c6 84 05 f0 fa
	ff ff 00	 mov	 BYTE PTR _retBuf$14[ebp+eax], 0

; 468  : 
; 469  : 							char szPath[255];
; 470  : 							snprintf(szPath, sizeof(szPath), "icon/emoji/%s.png", retBuf);

  01236	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR _retBuf$14[ebp]
  0123c	50		 push	 eax
  0123d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DJBDGBIO@icon?1emoji?1?$CFs?4png@
  01242	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  01248	68 ff 00 00 00	 push	 255			; 000000ffH
  0124d	50		 push	 eax
  0124e	e8 00 00 00 00	 call	 _snprintf

; 471  : 							TraceError("trying to load %s", szPath);

  01253	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  01259	50		 push	 eax
  0125a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NDOKGGPB@trying?5to?5load?5?$CFs@
  0125f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 472  : 
; 473  : 							if (CResourceManager::Instance().IsFileExist(szPath))

  01264	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0126a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  01270	83 c4 18	 add	 esp, 24			; 00000018H
  01273	50		 push	 eax
  01274	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  01279	84 c0		 test	 al, al
  0127b	0f 84 12 01 00
	00		 je	 $LN112@Update

; 474  : 							{
; 475  : 								CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer(szPath);

  01281	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  01287	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  0128d	50		 push	 eax
  0128e	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  01293	8b d8		 mov	 ebx, eax

; 476  : 								kEmoji.pInstance = CGraphicImageInstance::New();

  01295	e8 00 00 00 00	 call	 ?New@CGraphicImageInstance@@SAPAV1@XZ ; CGraphicImageInstance::New
  0129a	8b f0		 mov	 esi, eax

; 477  : 								kEmoji.pInstance->SetImagePointer(pImage);

  0129c	53		 push	 ebx
  0129d	8b ce		 mov	 ecx, esi
  0129f	89 b5 18 fa ff
	ff		 mov	 DWORD PTR _kEmoji$3[ebp+4], esi
  012a5	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  012aa	8b 95 10 fa ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
  012b0	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  012b3	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  012b6	74 11		 je	 SHORT $LN584@Update

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  012b8	8b 85 14 fa ff
	ff		 mov	 eax, DWORD PTR _kEmoji$3[ebp]
  012be	89 01		 mov	 DWORD PTR [ecx], eax
  012c0	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  012c3	83 42 04 08	 add	 DWORD PTR [edx+4], 8

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  012c7	eb 0f		 jmp	 SHORT $LN583@Update
$LN584@Update:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  012c9	8d 85 14 fa ff
	ff		 lea	 eax, DWORD PTR _kEmoji$3[ebp]
  012cf	50		 push	 eax
  012d0	51		 push	 ecx
  012d1	8b ca		 mov	 ecx, edx
  012d3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
$LN583@Update:
  012d8	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 482  : 								for (int i = 0; i < pImage->GetWidth() / (pSpaceInfo->width-1); ++i)

  012db	8b cb		 mov	 ecx, ebx
  012dd	66 0f 13 85 14
	fa ff ff	 movlpd	 QWORD PTR _kEmoji$3[ebp], xmm0
  012e5	33 f6		 xor	 esi, esi
  012e7	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  012ec	8b 8d 24 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  012f2	99		 cdq
  012f3	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  012f7	49		 dec	 ecx
  012f8	f7 f9		 idiv	 ecx
  012fa	85 c0		 test	 eax, eax
  012fc	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  01302	7e 50		 jle	 SHORT $LN693@Update
  01304	0f b7 f8	 movzx	 edi, ax
  01307	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL36@Update:

; 483  : 									x += __DrawCharacter(pFontTexture, dataCodePage, ' ', dwColor);

  01310	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  01316	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0131c	6a 20		 push	 32			; 00000020H
  0131e	57		 push	 edi
  0131f	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  01325	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  0132a	01 85 50 fa ff
	ff		 add	 DWORD PTR _x$1$[ebp], eax
  01330	8b cb		 mov	 ecx, ebx
  01332	46		 inc	 esi
  01333	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  01338	8b 8d 24 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  0133e	99		 cdq
  0133f	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  01343	49		 dec	 ecx
  01344	f7 f9		 idiv	 ecx
  01346	3b f0		 cmp	 esi, eax
  01348	7c c6		 jl	 SHORT $LL36@Update
  0134a	8b f7		 mov	 esi, edi
  0134c	8b bd 50 fa ff
	ff		 mov	 edi, DWORD PTR _x$1$[ebp]
  01352	eb 03		 jmp	 SHORT $LN35@Update
$LN693@Update:
  01354	0f b7 f0	 movzx	 esi, ax
$LN35@Update:

; 484  : 								if (pImage->GetWidth() % (pSpaceInfo->width - 1) > 1)

  01357	8b cb		 mov	 ecx, ebx
  01359	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  0135e	8b 8d 24 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  01364	99		 cdq
  01365	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  01369	49		 dec	 ecx
  0136a	f7 f9		 idiv	 ecx
  0136c	83 fa 01	 cmp	 edx, 1
  0136f	7e 22		 jle	 SHORT $LN112@Update

; 485  : 									x += __DrawCharacter(pFontTexture, dataCodePage, ' ', dwColor);

  01371	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  01377	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0137d	6a 20		 push	 32			; 00000020H
  0137f	56		 push	 esi
  01380	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  01386	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  0138b	03 f8		 add	 edi, eax
  0138d	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
$LN112@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01393	6a 00		 push	 0
  01395	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0139a	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$9[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 488  : 							emojiStep = 0;

  013a0	c7 85 54 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _emojiStep$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  013aa	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  013af	e9 77 00 00 00	 jmp	 $LN486@Update
$LN93@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 414  : 						if (hyperlinkStep == 1)

  013b4	83 bd 60 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  013bb	0f b7 06	 movzx	 eax, WORD PTR [esi]
  013be	75 10		 jne	 SHORT $LN94@Update

; 415  : 							hyperlinkBuffer.append(1, wText[i]);

  013c0	50		 push	 eax
  013c1	6a 01		 push	 1
  013c3	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
  013c9	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  013ce	eb 5b		 jmp	 SHORT $LN486@Update
$LN94@Update:

; 416  : #ifdef ENABLE_EMOJI_SYSTEM
; 417  : 						else if (emojiStep == 1)

  013d0	83 bd 54 fa ff
	ff 01		 cmp	 DWORD PTR _emojiStep$1$[ebp], 1
  013d7	8b c8		 mov	 ecx, eax
  013d9	75 10		 jne	 SHORT $LN96@Update

; 418  : 							emojiBuffer.append(1, wText[i]);

  013db	51		 push	 ecx
  013dc	6a 01		 push	 1
  013de	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$9[ebp]
  013e4	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  013e9	eb 40		 jmp	 SHORT $LN486@Update
$LN96@Update:

; 419  : #endif
; 420  : 						else
; 421  : 						{
; 422  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wText[i], dwColor);

  013eb	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  013f1	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  013f7	51		 push	 ecx
  013f8	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  013fe	0f b7 c0	 movzx	 eax, ax
  01401	50		 push	 eax
  01402	ff b5 3c fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  01408	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 423  : 							kHyperlink.ex += charWidth;

  0140d	8b 8d 58 fa ff
	ff		 mov	 ecx, DWORD PTR tv4084[ebp]
  01413	66 03 c8	 add	 cx, ax

; 424  : 							x += charWidth;

  01416	03 f8		 add	 edi, eax
  01418	89 8d 58 fa ff
	ff		 mov	 DWORD PTR tv4084[ebp], ecx
  0141e	66 89 8d 8a fa
	ff ff		 mov	 WORD PTR _kHyperlink$10[ebp+2], cx
  01425	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
$LN486@Update:

; 489  : 							emojiBuffer = L"";
; 490  : 						}
; 491  : #endif
; 492  : 					}
; 493  : 					i += len;

  0142b	8b 9d 6c fa ff
	ff		 mov	 ebx, DWORD PTR __Old_capacity$1$[ebp]
$LN97@Update:
  01431	8b 8d 34 fa ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
  01437	03 8d 04 fa ff
	ff		 add	 ecx, DWORD PTR _len$2[ebp]
  0143d	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _wTextLen$1$[ebp]
  01443	8b bd 50 fa ff
	ff		 mov	 edi, DWORD PTR _x$1$[ebp]
  01449	89 8d 34 fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  0144f	3b c8		 cmp	 ecx, eax
  01451	0f 8c 9d fa ff
	ff		 jl	 $LL31@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01457	8b 85 84 fa ff
	ff		 mov	 eax, DWORD PTR _emojiBuffer$9[ebp+20]
  0145d	83 f8 08	 cmp	 eax, 8
  01460	72 16		 jb	 SHORT $LN725@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01462	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  01469	50		 push	 eax
  0146a	ff b5 70 fa ff
	ff		 push	 DWORD PTR _emojiBuffer$9[ebp]
  01470	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  01475	83 c4 08	 add	 esp, 8
$LN725@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  01478	33 c0		 xor	 eax, eax
  0147a	c7 85 80 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _emojiBuffer$9[ebp+16], 0
  01484	66 89 85 70 fa
	ff ff		 mov	 WORD PTR _emojiBuffer$9[ebp], ax

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0148b	8b 85 b8 fa ff
	ff		 mov	 eax, DWORD PTR _hyperlinkBuffer$11[ebp+20]

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  01491	c7 85 84 fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _emojiBuffer$9[ebp+20], 7

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0149b	83 f8 08	 cmp	 eax, 8
  0149e	72 16		 jb	 SHORT $LN608@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  014a0	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  014a7	50		 push	 eax
  014a8	ff b5 a4 fa ff
	ff		 push	 DWORD PTR _hyperlinkBuffer$11[ebp]
  014ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  014b3	83 c4 08	 add	 esp, 8
$LN608@Update:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  014b6	33 c0		 xor	 eax, eax
  014b8	c7 85 b4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+16], 0
  014c2	c7 85 b8 fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 7
  014cc	66 89 85 a4 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$11[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 495  : 			}

  014d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  014da	83 fb 08	 cmp	 ebx, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  014dd	72 16		 jb	 SHORT $LN737@Update
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  014df	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  014e6	50		 push	 eax
  014e7	ff b5 8c fa ff
	ff		 push	 DWORD PTR _kHyperlink$10[ebp+4]
  014ed	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  014f2	83 c4 08	 add	 esp, 8
$LN737@Update:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 498  : 		if (token < end)

  014f5	8b 9d 68 fa ff
	ff		 mov	 ebx, DWORD PTR _dwColor$1$[ebp]
$LN741@Update:
  014fb	8b bd 64 fa ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN621@Update:
  01501	8b b5 00 fa ff
	ff		 mov	 esi, DWORD PTR _token$1$[ebp]
  01507	3b b5 28 fa ff
	ff		 cmp	 esi, DWORD PTR _end$1$[ebp]
  0150d	73 20		 jae	 SHORT $LN719@Update

; 499  : 		{
; 500  : 			int newCodePage = ReadToken(token);

  0150f	56		 push	 esi
  01510	e8 00 00 00 00	 call	 ?ReadToken@@YAHPBD@Z	; ReadToken

; 501  : 			dataCodePage = newCodePage;

  01515	89 85 40 fa ff
	ff		 mov	 DWORD PTR _dataCodePage$1$[ebp], eax

; 502  : 			begin = token + 5;

  0151b	83 c6 05	 add	 esi, 5
  0151e	8b 85 28 fa ff
	ff		 mov	 eax, DWORD PTR _end$1$[ebp]
  01524	83 c4 04	 add	 esp, 4
  01527	3b f0		 cmp	 esi, eax
  01529	0f 82 28 ec ff
	ff		 jb	 $LL5@Update
$LN719@Update:

; 503  : 		}
; 504  : 		else
; 505  : 		{
; 506  : 			begin = token;
; 507  : 		}
; 508  : 	}
; 509  : 
; 510  : 	pFontTexture->UpdateTexture();

  0152f	8b 8d 3c fa ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  01535	e8 00 00 00 00	 call	 ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::UpdateTexture

; 511  : 
; 512  : 	m_isUpdate = true;

  0153a	c6 47 44 01	 mov	 BYTE PTR [edi+68], 1
$LN1@Update:

; 513  : }

  0153e	8d a5 f0 f9 ff
	ff		 lea	 esp, DWORD PTR [ebp-1552]
  01544	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01547	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0154e	59		 pop	 ecx
  0154f	5f		 pop	 edi
  01550	5e		 pop	 esi
  01551	5b		 pop	 ebx
  01552	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01555	33 cd		 xor	 ecx, ebp
  01557	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0155c	8b e5		 mov	 esp, ebp
  0155e	5d		 pop	 ebp
  0155f	c3		 ret	 0
$LN118@Update:

; 467  : 							retBuf[retLen] = '\0';

  01560	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN654@Update:

; 513  : }

  01565	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN653@Update:
  0156a	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN743@Update:
  0156f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$0:
  00000	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$1:
  0000b	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$2:
  00016	8d 8d 88 fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$10[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$3:
  00021	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$4:
  0002c	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$9[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?Update@CGraphicTextInstance@@QAEXXZ:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a fc f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1540]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Update@CGraphicTextInstance@@QAEXXZ
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Update@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::Update
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Destroy@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::Destroy, COMDAT
; _this$ = ecx

; 1173 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00005	6a 00		 push	 0
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1174 : 	m_stText="";

  0000c	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1175 : 	m_pCharInfoVector.clear();

  00014	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]

; 1176 : 	m_dwColorInfoVector.clear();
; 1177 : 	m_hyperlinkVector.clear();

  00017	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  0001a	89 47 50	 mov	 DWORD PTR [edi+80], eax
  0001d	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00020	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00023	56		 push	 esi
  00024	ff 76 04	 push	 DWORD PTR [esi+4]
  00027	ff 36		 push	 DWORD PTR [esi]
  00029	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAXPAUSHyperlink@CGraphicTextInstance@@QAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicTextInstance::SHyperlink> >

; 1390 :         _Mylast = _Myfirst;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1179 : 	for (auto & rEmo : m_emojiVector)

  00036	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
  00039	8b 5f 74	 mov	 ebx, DWORD PTR [edi+116]
  0003c	3b f3		 cmp	 esi, ebx
  0003e	74 1a		 je	 SHORT $LN3@Destroy
$LL4@Destroy:

; 1180 : 	{
; 1181 : 		if (rEmo.pInstance)

  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	85 c0		 test	 eax, eax
  00045	74 09		 je	 SHORT $LN2@Destroy

; 1182 : 			CGraphicImageInstance::Delete(rEmo.pInstance);

  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  0004d	83 c4 04	 add	 esp, 4
$LN2@Destroy:

; 1179 : 	for (auto & rEmo : m_emojiVector)

  00050	83 c6 08	 add	 esi, 8
  00053	3b f3		 cmp	 esi, ebx
  00055	75 e9		 jne	 SHORT $LL4@Destroy
  00057	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
$LN3@Destroy:

; 1183 : 	}
; 1184 : 	m_emojiVector.clear();

  0005a	89 77 74	 mov	 DWORD PTR [edi+116], esi

; 1185 : #endif
; 1186 : 
; 1187 : 	__Initialize();

  0005d	8b cf		 mov	 ecx, edi
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	e9 00 00 00 00	 jmp	 ?__Initialize@CGraphicTextInstance@@IAEXXZ ; CGraphicTextInstance::__Initialize
?Destroy@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??1CGraphicTextInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicTextInstance@@UAE@XZ PROC			; CGraphicTextInstance::~CGraphicTextInstance, COMDAT
; _this$ = ecx

; 1196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicTextInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicTextInstance@@6B@

; 1197 : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00033	85 c9		 test	 ecx, ecx
  00035	74 27		 je	 SHORT $LN6@CGraphicTe

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00037	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  0003a	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003c	83 e0 f8	 and	 eax, -8			; fffffff8H
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00046	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00050	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1699 :             _Myend   = pointer();

  00057	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
$LN6@CGraphicTe:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1198 : }

  0005e	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  00061	e8 00 00 00 00	 call	 ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00066	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 27		 je	 SHORT $LN13@CGraphicTe

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006d	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00070	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00072	83 e0 fc	 and	 eax, -4			; fffffffcH
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0007c	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00086	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1699 :             _Myend   = pointer();

  0008d	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN13@CGraphicTe:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00094	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00097	85 c9		 test	 ecx, ecx
  00099	74 27		 je	 SHORT $LN20@CGraphicTe

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0009b	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0009e	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	83 e0 fc	 and	 eax, -4			; fffffffcH
  000a3	50		 push	 eax
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  000aa	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b1	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  000b4	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 1699 :             _Myend   = pointer();

  000bb	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN20@CGraphicTe:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 53   : 			if (m_pObject)

  000c2	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]

; 37   : 		{

  000c5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 			if (m_pObject)

  000cc	85 c9		 test	 ecx, ecx
  000ce	74 0c		 je	 SHORT $LN28@CGraphicTe

; 54   : 			{
; 55   : 				m_pObject->Release();

  000d0	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  000d5	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN28@CGraphicTe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000dc	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000df	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000e2	72 0d		 jb	 SHORT $LN34@CGraphicTe

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000e4	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e5	50		 push	 eax
  000e6	ff 76 20	 push	 DWORD PTR [esi+32]
  000e9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000ee	83 c4 08	 add	 esp, 8
$LN34@CGraphicTe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  000f1	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000f8	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000ff	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1198 : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5e		 pop	 esi
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
  00113	cc		 int	 3
  00114	cc		 int	 3
  00115	cc		 int	 3
  00116	cc		 int	 3
  00117	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicTextInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicTextInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicTextInstance@@UAE@XZ ENDP			; CGraphicTextInstance::~CGraphicTextInstance
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??0CGraphicTextInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicTextInstance@@QAE@XZ PROC			; CGraphicTextInstance::CGraphicTextInstance, COMDAT
; _this$ = ecx

; 1191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicTextInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicTextInstance@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0002f	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00036	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003d	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1191 : {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\Ref.h

; 20   : 		CRef() : m_pObject(NULL)

  00048	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004f	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00056	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0005d	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00064	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0006b	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00072	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00079	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  00080	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00087	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  0008e	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  00095	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  0009c	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 1191 : {

  000a3	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 1192 : 	__Initialize();

  000a7	e8 00 00 00 00	 call	 ?__Initialize@CGraphicTextInstance@@IAEXXZ ; CGraphicTextInstance::__Initialize

; 1193 : }

  000ac	8b c6		 mov	 eax, esi
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b8	59		 pop	 ecx
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 20	 add	 ecx, 32			; 00000020H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 48	 add	 ecx, 72			; 00000048H
  00011	e9 00 00 00 00	 jmp	 ??1?$CRef@VCGraphicText@@@@QAE@XZ ; CRef<CGraphicText>::~CRef<CGraphicText>
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 58	 add	 ecx, 88			; 00000058H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 64	 add	 ecx, 100		; 00000064H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 70	 add	 ecx, 112		; 00000070H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
__ehhandler$??0CGraphicTextInstance@@QAE@XZ:
  00047	90		 npad	 1
  00048	90		 npad	 1
  00049	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00050	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicTextInstance@@QAE@XZ
  0005f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicTextInstance@@QAE@XZ ENDP			; CGraphicTextInstance::CGraphicTextInstance
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z PROC	; CGraphicTextInstance::Hyperlink_GetText, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3764 :         return size() == 0;

  00003	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16, 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 33   : 	if (gs_hyperlinkText.empty())

  0000a	75 04		 jne	 SHORT $LN2@Hyperlink_

; 34   : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 39   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@Hyperlink_:

; 35   : 
; 36   : 	int codePage = GetDefaultCodePage();

  00010	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00015	83 3d 14 00 00
	00 08		 cmp	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 8

; 2144 :         const value_type* _Result = _Bx._Buf;

  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 38   : 	return Ymir_WideCharToMultiByte(codePage, 0, gs_hyperlinkText.c_str(), gs_hyperlinkText.length(), buf, len, NULL, NULL);

  00021	6a 00		 push	 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00023	0f 43 0d 00 00
	00 00		 cmovae	 ecx, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 38   : 	return Ymir_WideCharToMultiByte(codePage, 0, gs_hyperlinkText.c_str(), gs_hyperlinkText.length(), buf, len, NULL, NULL);

  0002a	6a 00		 push	 0
  0002c	ff 75 0c	 push	 DWORD PTR _len$[ebp]
  0002f	ff 75 08	 push	 DWORD PTR _buf$[ebp]
  00032	ff 35 10 00 00
	00		 push	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16
  00038	51		 push	 ecx
  00039	6a 00		 push	 0
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z ; Ymir_WideCharToMultiByte
  00041	83 c4 20	 add	 esp, 32			; 00000020H

; 39   : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z ENDP	; CGraphicTextInstance::Hyperlink_GetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z PROC ; CGraphicTextInstance::Hyperlink_UpdateMousePos, COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	gs_mx = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  0000b	6a 00		 push	 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 26   : 	gs_mx = x;

  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?gs_mx@@3HA, eax

; 27   : 	gs_my = y;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 27   : 	gs_my = y;

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?gs_my@@3HA, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpTextInstance.cpp

; 29   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z ENDP ; CGraphicTextInstance::Hyperlink_UpdateMousePos
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z PROC		; std::_Destroy_in_place<wchar_t *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ENDP		; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 510  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 511  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 512  : 
; 513  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN4@Traits_com

; 514  :         return _Ans;
; 515  :     }
; 516  : 
; 517  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 522  :         return 1;
; 523  :     }
; 524  : 
; 525  :     return 0;
; 526  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 518  :         return -1;
; 519  :     }
; 520  : 
; 521  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN4@Traits_com:

; 522  :         return 1;
; 523  :     }
; 524  : 
; 525  :     return 0;
; 526  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__New_ptr$1 = -4					; size = 4
__Ptr$ = 8						; size = 4
__Result$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0000f	3b c3		 cmp	 eax, ebx
  00011	77 34		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00013	89 7d 0c	 mov	 DWORD PTR __Result$1$[ebp], edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00016	83 fb 08	 cmp	 ebx, 8

; 2136 :         if (_Large_string_engaged()) {

  00019	72 05		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001d	89 4d 0c	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN5@assign:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00020	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00026	56		 push	 esi
  00027	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Result$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00036	33 c9		 xor	 ecx, ecx
  00038	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx

; 2981 :     }

  0003c	8b c7		 mov	 eax, edi
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  00047	3d fe ff ff 7f	 cmp	 eax, 2147483646		; 7ffffffeH
  0004c	0f 87 a6 00 00
	00		 ja	 $LN46@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00052	8b f0		 mov	 esi, eax
  00054	83 ce 07	 or	 esi, 7
  00057	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0005d	77 23		 ja	 SHORT $LN43@assign

; 4203 :             return _Max;
; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005f	8b cb		 mov	 ecx, ebx
  00061	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00066	d1 e9		 shr	 ecx, 1
  00068	2b c1		 sub	 eax, ecx
  0006a	3b d8		 cmp	 ebx, eax
  0006c	77 14		 ja	 SHORT $LN43@assign

; 4207 :             return _Max;
; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0006e	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00071	3b f0		 cmp	 esi, eax
  00073	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00076	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00079	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0007e	77 7d		 ja	 SHORT $LN47@assign
  00080	eb 0a		 jmp	 SHORT $LN29@assign
$LN43@assign:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00082	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00087	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN29@assign:
  0008c	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00094	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00097	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0009a	89 45 fc	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  0009d	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000a0	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  000a3	56		 push	 esi
  000a4	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000ad	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1[ebp]
  000b0	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000b2	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000b5	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000b9	83 fb 08	 cmp	 ebx, 8
  000bc	72 22		 jb	 SHORT $LN15@assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000be	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  000c5	50		 push	 eax
  000c6	ff 37		 push	 DWORD PTR [edi]
  000c8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000cd	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2981 :     }

  000d0	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000d3	89 07		 mov	 DWORD PTR [edi], eax

; 2981 :     }

  000d5	8b c7		 mov	 eax, edi
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
$LN15@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000e0	8d 45 fc	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000e3	50		 push	 eax
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2981 :     }

  000ea	83 c4 08	 add	 esp, 8
  000ed	8b c7		 mov	 eax, edi
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN46@assign:

; 4222 :             _Xlen_string(); // result too long

  000f8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fd	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN42@assign:
  00102	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
_TEXT	SEGMENT
__Old_ptr$1$ = -16					; size = 4
__Old_size$1$ = -16					; size = 4
tv488 = -12						; size = 4
__Old$1$ = -12						; size = 4
__New_ptr$1 = -8					; size = 4
__New_size$1$ = -4					; size = 4
__Su$1$ = 8						; size = 4
$T2 = 8							; size = 4
__Result$1$ = 8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 2883 :     basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) { // append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2884 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2885 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f0	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f4	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 4e		 ja	 SHORT $LN2@append

; 2135 :         value_type* _Result = _Bx._Buf;

  00022	89 75 08	 mov	 DWORD PTR __Result$1$[ebp], esi

; 2886 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00025	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00028	89 45 f4	 mov	 DWORD PTR tv488[ebp], eax
  0002b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  0002e	8b c6		 mov	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00030	83 fa 08	 cmp	 edx, 8

; 2136 :         if (_Large_string_engaged()) {

  00033	72 05		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN5@append:

; 2887 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2888 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0003a	8d 3c 48	 lea	 edi, DWORD PTR [eax+ecx*2]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 259  :         for (; 0 < _N; ++_Su, --_N)

  0003d	85 db		 test	 ebx, ebx
  0003f	74 1b		 je	 SHORT $LN14@append
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 211  :         return reinterpret_cast<_Elem*>(_CSTD wmemset(reinterpret_cast<wchar_t*>(_First), _Ch, _Count));

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  00044	8b cb		 mov	 ecx, ebx
  00046	0f b7 d0	 movzx	 edx, ax
  00049	8b c2		 mov	 eax, edx
  0004b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0004e	0b c2		 or	 eax, edx
  00050	d1 e9		 shr	 ecx, 1
  00052	f3 ab		 rep stosd
  00054	13 c9		 adc	 ecx, ecx
  00056	66 f3 ab	 rep stosw
  00059	8b 45 08	 mov	 eax, DWORD PTR __Result$1$[ebp]
$LN14@append:

; 2889 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0005c	8b 4d f4	 mov	 ecx, DWORD PTR tv488[ebp]
  0005f	33 d2		 xor	 edx, edx
  00061	5f		 pop	 edi
  00062	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2902 :     }

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00070	bf fe ff ff 7f	 mov	 edi, 2147483646		; 7ffffffeH
  00075	8b c7		 mov	 eax, edi
  00077	2b c1		 sub	 eax, ecx
  00079	3b c3		 cmp	 eax, ebx
  0007b	0f 82 26 01 00
	00		 jb	 $LN81@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00081	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00084	8b c8		 mov	 ecx, eax

; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00086	89 45 fc	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00089	83 c9 07	 or	 ecx, 7
  0008c	3b cf		 cmp	 ecx, edi

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0008e	0f 86 97 00 00
	00		 jbe	 $LN24@append

; 4203 :             return _Max;

  00094	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
$LN78@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 65   :     return _Count * _Ty_size;

  00097	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN32@append:
  0009c	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a4	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a6	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000ac	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  000b2	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8b 45 f0	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  000b8	03 c0		 add	 eax, eax
  000ba	89 7d f8	 mov	 DWORD PTR __New_ptr$1[ebp], edi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d f4 08	 cmp	 DWORD PTR __Old$1$[ebp], 8
  000c1	50		 push	 eax
  000c2	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000c5	89 4d 08	 mov	 DWORD PTR __Su$1$[ebp], ecx
  000c8	0f 82 8c 00 00
	00		 jb	 $LN18@append

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000d0	51		 push	 ecx
  000d1	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d2	89 4d f0	 mov	 DWORD PTR __Old_ptr$1$[ebp], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000d5	e8 00 00 00 00	 call	 _memcpy
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 259  :         for (; 0 < _N; ++_Su, --_N)

  000dd	85 db		 test	 ebx, ebx
  000df	74 1e		 je	 SHORT $LN47@append
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000e1	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  000e4	8b cb		 mov	 ecx, ebx
  000e6	8b 7d 08	 mov	 edi, DWORD PTR __Su$1$[ebp]
  000e9	0f b7 d0	 movzx	 edx, ax
  000ec	8b c2		 mov	 eax, edx
  000ee	c1 e2 10	 shl	 edx, 16			; 00000010H
  000f1	0b c2		 or	 eax, edx
  000f3	d1 e9		 shr	 ecx, 1
  000f5	f3 ab		 rep stosd
  000f7	13 c9		 adc	 ecx, ecx
  000f9	66 f3 ab	 rep stosw
  000fc	8b 7d f8	 mov	 edi, DWORD PTR __New_ptr$1[ebp]
$LN47@append:

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000ff	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00102	33 c9		 xor	 ecx, ecx
  00104	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00108	8b 45 f4	 mov	 eax, DWORD PTR __Old$1$[ebp]
  0010b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00112	50		 push	 eax
  00113	ff 75 f0	 push	 DWORD PTR __Old_ptr$1$[ebp]
  00116	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2902 :     }

  0011b	83 c4 08	 add	 esp, 8

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  0011e	89 3e		 mov	 DWORD PTR [esi], edi

; 2902 :     }

  00120	8b c6		 mov	 eax, esi
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 08 00	 ret	 8
$LN24@append:

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0012b	8b c2		 mov	 eax, edx
  0012d	d1 e8		 shr	 eax, 1
  0012f	2b f8		 sub	 edi, eax
  00131	3b d7		 cmp	 edx, edi
  00133	76 0c		 jbe	 SHORT $LN25@append

; 4207 :             return _Max;

  00135	c7 45 08 fe ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483646 ; 7ffffffeH
  0013c	e9 56 ff ff ff	 jmp	 $LN78@append
$LN25@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00141	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00143	3b c8		 cmp	 ecx, eax
  00145	0f 42 c8	 cmovb	 ecx, eax
  00148	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0014b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0014e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00153	77 57		 ja	 SHORT $LN82@append
  00155	e9 42 ff ff ff	 jmp	 $LN32@append
$LN18@append:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0015a	56		 push	 esi
  0015b	57		 push	 edi
  0015c	e8 00 00 00 00	 call	 _memcpy
  00161	83 c4 0c	 add	 esp, 12			; 0000000cH

; 259  :         for (; 0 < _N; ++_Su, --_N)

  00164	85 db		 test	 ebx, ebx
  00166	74 1e		 je	 SHORT $LN62@append

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00168	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0016b	8b cb		 mov	 ecx, ebx
  0016d	8b 7d 08	 mov	 edi, DWORD PTR __Su$1$[ebp]
  00170	0f b7 d0	 movzx	 edx, ax
  00173	8b c2		 mov	 eax, edx
  00175	c1 e2 10	 shl	 edx, 16			; 00000010H
  00178	0b c2		 or	 eax, edx
  0017a	d1 e9		 shr	 ecx, 1
  0017c	f3 ab		 rep stosd
  0017e	13 c9		 adc	 ecx, ecx
  00180	66 f3 ab	 rep stosw
  00183	8b 7d f8	 mov	 edi, DWORD PTR __New_ptr$1[ebp]
$LN62@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2899 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00186	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00189	33 c9		 xor	 ecx, ecx
  0018b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0018f	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  00192	50		 push	 eax
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2902 :     }

  00199	83 c4 08	 add	 esp, 8
  0019c	8b c6		 mov	 eax, esi
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 08 00	 ret	 8
$LN81@append:

; 4250 :             _Xlen_string(); // result too long

  001a7	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN82@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001ac	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN77@append:
  001b1	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 2784 :     basic_string& operator=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2785 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b f0		 cmp	 esi, eax
  0000b	74 15		 je	 SHORT $LN11@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8

; 2144 :         const value_type* _Result = _Bx._Buf;

  00011	8b c8		 mov	 ecx, eax

; 2145 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN7@operator:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	51		 push	 ecx
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN11@operator:

; 2786 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 2787 :         }
; 2788 : 
; 2789 :         return *this;
; 2790 :     }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 12		 jb	 SHORT $LN4@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	33 c0		 xor	 eax, eax
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0002d	66 89 06	 mov	 WORD PTR [esi], ax
  00030	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00031	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 02	 or	 ecx, 2
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);
; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1954 :         __crt_va_end(_ArgList);
; 1955 :         return _Result;
; 1956 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
