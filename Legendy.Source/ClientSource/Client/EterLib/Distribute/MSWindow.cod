; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A	; CMSWindow::ms_hInstance
_BSS	SEGMENT
?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A DD 01H DUP (?) ; CMSWindow::ms_hInstance
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CMSWindow@@QAE@XZ				; CMSWindow::CMSWindow
PUBLIC	??1CMSWindow@@UAE@XZ				; CMSWindow::~CMSWindow
PUBLIC	?Destroy@CMSWindow@@QAEXXZ			; CMSWindow::Destroy
PUBLIC	?Create@CMSWindow@@QAE_NPBDHKKPAUHICON__@@H@Z	; CMSWindow::Create
PUBLIC	?Show@CMSWindow@@QAEXXZ				; CMSWindow::Show
PUBLIC	?Hide@CMSWindow@@QAEXXZ				; CMSWindow::Hide
PUBLIC	?SetVisibleMode@CMSWindow@@QAEX_N@Z		; CMSWindow::SetVisibleMode
PUBLIC	?SetPosition@CMSWindow@@QAEXHH@Z		; CMSWindow::SetPosition
PUBLIC	?SetCenterPosition@CMSWindow@@QAEXXZ		; CMSWindow::SetCenterPosition
PUBLIC	?SetText@CMSWindow@@QAEXPBD@Z			; CMSWindow::SetText
PUBLIC	?AdjustSize@CMSWindow@@QAEXHH@Z			; CMSWindow::AdjustSize
PUBLIC	?SetSize@CMSWindow@@QAEXHH@Z			; CMSWindow::SetSize
PUBLIC	?IsVisible@CMSWindow@@QAE_NXZ			; CMSWindow::IsVisible
PUBLIC	?IsActive@CMSWindow@@QAE_NXZ			; CMSWindow::IsActive
PUBLIC	?GetMousePosition@CMSWindow@@QAEXPAUtagPOINT@@@Z ; CMSWindow::GetMousePosition
PUBLIC	?GetClientRect@CMSWindow@@QAEXPAUtagRECT@@@Z	; CMSWindow::GetClientRect
PUBLIC	?GetWindowRect@CMSWindow@@QAEXPAUtagRECT@@@Z	; CMSWindow::GetWindowRect
PUBLIC	?GetScreenWidth@CMSWindow@@QAEHXZ		; CMSWindow::GetScreenWidth
PUBLIC	?GetScreenHeight@CMSWindow@@QAEHXZ		; CMSWindow::GetScreenHeight
PUBLIC	?GetWindowHandle@CMSWindow@@QAEPAUHWND__@@XZ	; CMSWindow::GetWindowHandle
PUBLIC	?GetInstance@CMSWindow@@QAEPAUHINSTANCE__@@XZ	; CMSWindow::GetInstance
PUBLIC	?WindowProcedure@CMSWindow@@UAEJPAUHWND__@@IIJ@Z ; CMSWindow::WindowProcedure
PUBLIC	?OnSize@CMSWindow@@UAEXIJ@Z			; CMSWindow::OnSize
PUBLIC	?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z ; CMSWindow::RegisterWindowClass
PUBLIC	??_GCMSWindow@@UAEPAXI@Z			; CMSWindow::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::~_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEPAU?$_Tree_node@PADPAX@2@U?$_Tree_id@PAU?$_Tree_node@PADPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Insert_node
PUBLIC	?MSWindowProcedure@@YGJPAUHWND__@@IIJ@Z		; MSWindowProcedure
PUBLIC	??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::_Find_lower_bound<char *>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Erase_tree<std::allocator<std::_Tree_node<char *,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@PADPAX@std@@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<char *,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet
PUBLIC	??_7CMSWindow@@6B@				; CMSWindow::`vftable'
PUBLIC	??_C@_0BE@MCPGLNBN@eter?5?9?5s?$CFx?3b?$CFx?3p?3?$CFx@ ; `string'
PUBLIC	??_R4CMSWindow@@6B@				; CMSWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMSWindow@@@8				; CMSWindow `RTTI Type Descriptor'
PUBLIC	??_R3CMSWindow@@8				; CMSWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMSWindow@@8				; CMSWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMSWindow@@8			; CMSWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__GetMenu@4:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__AdjustWindowRectEx@16:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__ScreenToClient@8:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?stl_static_string@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; stl_static_string
EXTRN	??_ECMSWindow@@UAEPAXI@Z:PROC			; CMSWindow::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A DQ 01H DUP (?) ; CMSWindow::ms_stWCSet
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_stWCSet$initializer$@CMSWindow@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ ; ??ms_stWCSet$initializer$@CMSWindow@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMSWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMSWindow@@8 DD FLAT:??_R0?AVCMSWindow@@@8 ; CMSWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMSWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2CMSWindow@@8
rdata$r	SEGMENT
??_R2CMSWindow@@8 DD FLAT:??_R1A@?0A@EA@CMSWindow@@8	; CMSWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMSWindow@@8
rdata$r	SEGMENT
??_R3CMSWindow@@8 DD 00H				; CMSWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMSWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMSWindow@@@8
data$r	SEGMENT
??_R0?AVCMSWindow@@@8 DD FLAT:??_7type_info@@6B@	; CMSWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMSWindow@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMSWindow@@6B@
rdata$r	SEGMENT
??_R4CMSWindow@@6B@ DD 00H				; CMSWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMSWindow@@@8
	DD	FLAT:??_R3CMSWindow@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@MCPGLNBN@eter?5?9?5s?$CFx?3b?$CFx?3p?3?$CFx@
CONST	SEGMENT
??_C@_0BE@MCPGLNBN@eter?5?9?5s?$CFx?3b?$CFx?3p?3?$CFx@ DB 'eter - s%x:b%x'
	DB	':p:%x', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CMSWindow@@6B@
CONST	SEGMENT
??_7CMSWindow@@6B@ DD FLAT:??_R4CMSWindow@@6B@		; CMSWindow::`vftable'
	DD	FLAT:??_ECMSWindow@@UAEPAXI@Z
	DD	FLAT:?WindowProcedure@CMSWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?OnSize@CMSWindow@@UAEXIJ@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PAD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@$$QAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PAD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@$$QAPAD@Z$1
__ehfuncinfo$??$?0PAD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@$$QAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PAD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@$$QAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PADPAX@std@@_N@1@$$QAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PADPAX@std@@_N@1@$$QAPAD@Z$2
__ehfuncinfo$??$_Emplace@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PADPAX@std@@_N@1@$$QAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PADPAX@std@@_N@1@$$QAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@@std@@_N@1@$$QAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@@std@@_N@1@$$QAPAD@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@@std@@_N@1@$$QAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@@std@@_N@1@$$QAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z$2
__ehfuncinfo$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@PADPAX@std@@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@PADPAX@std@@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<char *,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@PADPAX@std@@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Erase_tree<std::allocator<std::_Tree_node<char *,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Erase_tree<std::allocator<std::_Tree_node<char *,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Erase_tree<std::allocator<std::_Tree_node<char *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z PROC ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::_Find_lower_bound<char *>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 55		 jne	 SHORT $LN16@Find_lower
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 88   : 		return (strcmp(left, right) < 0);

  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00022	53		 push	 ebx
  00023	8b 18		 mov	 ebx, DWORD PTR [eax]
$LL2@Find_lower:
  00025	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00028	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  0002a	89 37		 mov	 DWORD PTR [edi], esi
  0002c	0f 1f 40 00	 npad	 4
$LL12@Find_lower:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 88   : 		return (strcmp(left, right) < 0);

  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	3a 10		 cmp	 dl, BYTE PTR [eax]
  00034	75 1a		 jne	 SHORT $LN13@Find_lower
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN14@Find_lower
  0003a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0003d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00040	75 0e		 jne	 SHORT $LN13@Find_lower
  00042	83 c1 02	 add	 ecx, 2
  00045	83 c0 02	 add	 eax, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL12@Find_lower
$LN14@Find_lower:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN15@Find_lower
$LN13@Find_lower:
  00050	1b c0		 sbb	 eax, eax
  00052	83 c8 01	 or	 eax, 1
$LN15@Find_lower:
  00055	85 c0		 test	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00057	79 07		 jns	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  00059	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0005c	33 c0		 xor	 eax, eax

; 1708 :             } else {

  0005e	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  00060	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0006a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00071	74 b2		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00073	5b		 pop	 ebx
$LN16@Find_lower:

; 1716 :     }

  00074	8b c7		 mov	 eax, edi
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z ENDP ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::_Find_lower_bound<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?MSWindowProcedure@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_uiMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?MSWindowProcedure@@YGJPAUHWND__@@IIJ@Z PROC		; MSWindowProcedure, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 11   : 	CMSWindow * pWnd = (CMSWindow *) GetWindowLong(hWnd, GWL_USERDATA);

  00004	8b 75 08	 mov	 esi, DWORD PTR _hWnd$[ebp]
  00007	6a eb		 push	 -21			; ffffffebH
  00009	56		 push	 esi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 12   : 
; 13   : 	if (pWnd)

  00010	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00013	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00016	ff 75 0c	 push	 DWORD PTR _uiMsg$[ebp]
  00019	56		 push	 esi
  0001a	85 c0		 test	 eax, eax
  0001c	74 0c		 je	 SHORT $LN2@MSWindowPr

; 14   : 		return pWnd->WindowProcedure(hWnd, uiMsg, wParam, lParam);

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	ff 52 04	 call	 DWORD PTR [edx+4]
  00025	5e		 pop	 esi

; 17   : }

  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
$LN2@MSWindowPr:

; 15   : 
; 16   : 	return DefWindowProc(hWnd, uiMsg, wParam, lParam);

  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  00030	5e		 pop	 esi

; 17   : }

  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
?MSWindowProcedure@@YGJPAUHWND__@@IIJ@Z ENDP		; MSWindowProcedure
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CMSWindow::ms_stWCSet'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::~_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >
??__F?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CMSWindow::ms_stWCSet''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ??__E?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ
text$di	SEGMENT
__Pnode$1 = -4						; size = 4
??__E?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CMSWindow::ms_stWCSet'', COMDAT

; 6    : CMSWindow::TWindowClassSet CMSWindow::ms_stWCSet;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00004	6a 14		 push	 20			; 00000014H
  00006	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000b	8d 4d fc	 lea	 ecx, DWORD PTR __Pnode$1[ebp]
  0000e	89 45 fc	 mov	 DWORD PTR __Pnode$1[ebp], eax
  00011	51		 push	 ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00018	8d 45 fc	 lea	 eax, DWORD PTR __Pnode$1[ebp]
  0001b	50		 push	 eax
  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  0001f	83 c0 04	 add	 eax, 4
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00028	8d 45 fc	 lea	 eax, DWORD PTR __Pnode$1[ebp]
  0002b	50		 push	 eax
  0002c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  0002f	83 c0 08	 add	 eax, 8
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 6    : CMSWindow::TWindowClassSet CMSWindow::ms_stWCSet;

  0003b	68 00 00 00 00	 push	 OFFSET ??__F?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CMSWindow::ms_stWCSet''
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 347  :         _Pnode->_Color = _Black;

  00040	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 348  :         _Pnode->_Isnil = true;

  00044	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  00047	c6 40 0d 01	 mov	 BYTE PTR [eax+13], 1

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0004b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 6    : CMSWindow::TWindowClassSet CMSWindow::ms_stWCSet;

  00053	e8 00 00 00 00	 call	 _atexit
  00058	83 c4 20	 add	 esp, 32			; 00000020H
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
??__E?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CMSWindow::ms_stWCSet''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEPAU?$_Tree_node@PADPAX@2@U?$_Tree_id@PAU?$_Tree_node@PADPAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEPAU?$_Tree_node@PADPAX@2@U?$_Tree_id@PAU?$_Tree_node@PADPAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEPAU?$_Tree_node@PADPAX@2@U?$_Tree_id@PAU?$_Tree_node@PADPAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::~_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PADPAX@std@@@1@PAU?$_Tree_node@PADPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Erase_tree<std::allocator<std::_Tree_node<char *,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 14		 push	 20			; 00000014H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::~_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMSWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMSWindow@@UAEPAXI@Z PROC				; CMSWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMSWindow@@UAE@XZ	; CMSWindow::~CMSWindow
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMSWindow@@UAEPAXI@Z ENDP				; CMSWindow::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z
_TEXT	SEGMENT
$T2 = -1116						; size = 12
$T3 = -1112						; size = 8
_wc$ = -1104						; size = 40
__Loc$4 = -1064						; size = 12
__Loc$5 = -1064						; size = 12
_brush$GSCopy$1$ = -1052				; size = 4
_pfnWndProc$GSCopy$1$ = -1048				; size = 4
__Myhead$6 = -1044					; size = 4
$T7 = -1044						; size = 4
$T8 = -1044						; size = 4
_szClassName$ = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_style$ = 8						; size = 4
_brush$ = 12						; size = 4
_pfnWndProc$ = 16					; size = 4
_hIcon$ = 20						; size = 4
_iCursorResource$ = 24					; size = 4
?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z PROC ; CMSWindow::RegisterWindowClass, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 04 00
	00		 sub	 esp, 1104		; 00000450H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 10	 mov	 eax, DWORD PTR _pfnWndProc$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _brush$[ebp]
  00034	8b 5d 14	 mov	 ebx, DWORD PTR _hIcon$[ebp]

; 210  : 	char szClassName[1024];
; 211  : 	sprintf(szClassName, "eter - s%x:b%x:p:%x", style, brush, (DWORD) pfnWndProc);

  00037	50		 push	 eax
  00038	51		 push	 ecx
  00039	ff 75 08	 push	 DWORD PTR _style$[ebp]
  0003c	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _pfnWndProc$GSCopy$1$[ebp], eax
  00042	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MCPGLNBN@eter?5?9?5s?$CFx?3b?$CFx?3p?3?$CFx@
  0004d	50		 push	 eax
  0004e	89 8d e4 fb ff
	ff		 mov	 DWORD PTR _brush$GSCopy$1$[ebp], ecx
  00054	e8 00 00 00 00	 call	 _sprintf
  00059	83 c4 14	 add	 esp, 20			; 00000014H

; 212  : 
; 213  : 	TWindowClassSet::iterator f = ms_stWCSet.find((char*) szClassName);

  0005c	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  00062	89 85 ec fb ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet
  0006d	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00073	50		 push	 eax
  00074	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR __Loc$5[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::_Find_lower_bound<char *>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00080	8b b5 e0 fb ff
	ff		 mov	 esi, DWORD PTR __Loc$5[ebp+8]
  00086	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0008a	75 43		 jne	 SHORT $LN2@RegisterWi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 88   : 		return (strcmp(left, right) < 0);

  0008c	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0008f	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  00095	8b cf		 mov	 ecx, edi
$LL106@RegisterWi:
  00097	8a 10		 mov	 dl, BYTE PTR [eax]
  00099	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0009b	75 1a		 jne	 SHORT $LN107@RegisterWi
  0009d	84 d2		 test	 dl, dl
  0009f	74 12		 je	 SHORT $LN108@RegisterWi
  000a1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a7	75 0e		 jne	 SHORT $LN107@RegisterWi
  000a9	83 c0 02	 add	 eax, 2
  000ac	83 c1 02	 add	 ecx, 2
  000af	84 d2		 test	 dl, dl
  000b1	75 e4		 jne	 SHORT $LL106@RegisterWi
$LN108@RegisterWi:
  000b3	33 c0		 xor	 eax, eax
  000b5	eb 05		 jmp	 SHORT $LN109@RegisterWi
$LN107@RegisterWi:
  000b7	1b c0		 sbb	 eax, eax
  000b9	83 c8 01	 or	 eax, 1
$LN109@RegisterWi:
  000bc	85 c0		 test	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000be	78 0f		 js	 SHORT $LN2@RegisterWi

; 232  :         return this->_Ptr == _Right._Ptr;

  000c0	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 215  : 	if (f != ms_stWCSet.end())

  000c6	74 07		 je	 SHORT $LN2@RegisterWi

; 216  : 		return *f;

  000c8	8b c7		 mov	 eax, edi
  000ca	e9 b8 01 00 00	 jmp	 $LN3@RegisterWi
$LN2@RegisterWi:

; 218  : 	const char* c_szStaticClassName = stl_static_string(szClassName).c_str();

  000cf	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?stl_static_string@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; stl_static_string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  000db	8b f8		 mov	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 218  : 	const char* c_szStaticClassName = stl_static_string(szClassName).c_str();

  000dd	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000e0	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000e4	72 02		 jb	 SHORT $LN37@RegisterWi

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000e6	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN37@RegisterWi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  000e8	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 220  : 	ms_stWCSet.insert((char * const) c_szStaticClassName);

  000ee	89 bd ec fb ff
	ff		 mov	 DWORD PTR $T7[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  000f4	50		 push	 eax
  000f5	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAD@?$_Tree@V?$_Tset_traits@PADUstl_sz_less@@V?$allocator@PAD@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PADPAX@std@@@1@ABQAD@Z ; std::_Tree<std::_Tset_traits<char *,stl_sz_less,std::allocator<char *>,0> >::_Find_lower_bound<char *>
  00106	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00109	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0010d	66 0f d6 85 d8
	fb ff ff	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00115	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00119	75 32		 jne	 SHORT $LN49@RegisterWi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 88   : 		return (strcmp(left, right) < 0);

  0011b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0011e	8b c7		 mov	 eax, edi
$LL110@RegisterWi:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN111@RegisterWi
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN112@RegisterWi
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN111@RegisterWi
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL110@RegisterWi
$LN112@RegisterWi:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN113@RegisterWi
$LN111@RegisterWi:
  00140	1b c0		 sbb	 eax, eax
  00142	83 c8 01	 or	 eax, 1
$LN113@RegisterWi:
  00145	85 c0		 test	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00147	0f 89 8f 00 00
	00		 jns	 $LN95@RegisterWi
$LN49@RegisterWi:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  0014d	81 3d 04 00 00
	00 cc cc cc 0c	 cmp	 DWORD PTR ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A+4, 214748364 ; 0cccccccH
  00157	0f 84 48 01 00
	00		 je	 $LN117@RegisterWi

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A
  00162	89 85 ec fb ff
	ff		 mov	 DWORD PTR __Myhead$6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00168	c7 85 a8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], OFFSET ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00172	6a 14		 push	 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00174	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0017b	c7 85 ac fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00185	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  0018a	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0018c	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR __Myhead$6[ebp]
  00192	50		 push	 eax
  00193	56		 push	 esi
  00194	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00197	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0019c	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR __Myhead$6[ebp]
  001a2	50		 push	 eax
  001a3	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  001ac	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR __Myhead$6[ebp]
  001b2	50		 push	 eax
  001b3	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PADPAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PADPAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<char *,void *> *,std::_Tree_node<char *,void *> * &>
  001bc	83 c4 1c	 add	 esp, 28			; 0000001cH

; 810  :         this->_Ptr->_Color = _Red;

  001bf	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_stWCSet@CMSWindow@@1V?$set@PADUstl_sz_less@@V?$allocator@PAD@std@@@std@@A ; CMSWindow::ms_stWCSet
  001ca	56		 push	 esi
  001cb	ff b5 dc fb ff
	ff		 push	 DWORD PTR __Loc$4[ebp+4]
  001d1	ff b5 d8 fb ff
	ff		 push	 DWORD PTR __Loc$4[ebp]
  001d7	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAD@std@@@std@@QAEPAU?$_Tree_node@PADPAX@2@U?$_Tree_id@PAU?$_Tree_node@PADPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<char *> >::_Insert_node
$LN95@RegisterWi:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp

; 227  : 	wc.lpfnWndProc		= pfnWndProc;

  001dc	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _pfnWndProc$GSCopy$1$[ebp]
  001e2	89 85 b4 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+4], eax

; 228  : 	wc.hCursor			= LoadCursor(ms_hInstance, MAKEINTRESOURCE(iCursorResource));

  001e8	0f b7 45 18	 movzx	 eax, WORD PTR _iCursorResource$[ebp]
  001ec	50		 push	 eax
  001ed	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A ; CMSWindow::ms_hInstance
  001f3	c7 85 b0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp], 0
  001fd	c7 85 b8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+8], 0
  00207	c7 85 bc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+12], 0
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00217	89 85 c8 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+24], eax

; 229  : 	wc.hIcon			= hIcon ? hIcon : LoadIcon(ms_hInstance, IDI_APPLICATION);

  0021d	85 db		 test	 ebx, ebx
  0021f	74 08		 je	 SHORT $LN5@RegisterWi
  00221	89 9d c4 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+20], ebx
  00227	eb 17		 jmp	 SHORT $LN6@RegisterWi
$LN5@RegisterWi:
  00229	68 00 7f 00 00	 push	 32512			; 00007f00H
  0022e	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A ; CMSWindow::ms_hInstance
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8
  0023a	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+20], eax
$LN6@RegisterWi:

; 230  : 	wc.hbrBackground	= (HBRUSH) GetStockObject(brush);

  00240	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _brush$GSCopy$1$[ebp]
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  0024c	89 85 cc fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+28], eax

; 231  : 	wc.hInstance		= ms_hInstance;

  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A ; CMSWindow::ms_hInstance
  00257	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+16], eax

; 232  : 	wc.lpszClassName	= c_szStaticClassName;
; 233  : 	wc.lpszMenuName		= "";
; 234  : 
; 235  : 	if (!RegisterClass(&wc))

  0025d	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _wc$[ebp]
  00263	50		 push	 eax
  00264	89 bd d4 fb ff
	ff		 mov	 DWORD PTR _wc$[ebp+36], edi
  0026a	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+32], OFFSET ??_C@_00CNPNBAHC@@
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  0027a	66 85 c0	 test	 ax, ax
  0027d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@@
  00282	0f 45 cf	 cmovne	 ecx, edi
  00285	8b c1		 mov	 eax, ecx
$LN3@RegisterWi:

; 239  : }

  00287	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00291	59		 pop	 ecx
  00292	5f		 pop	 edi
  00293	5e		 pop	 esi
  00294	5b		 pop	 ebx
  00295	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00298	33 cd		 xor	 ecx, ebp
  0029a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c2 14 00	 ret	 20			; 00000014H
$LN117@RegisterWi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  002a5	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN115@RegisterWi:
  002aa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z$2:
  00000	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PADPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<char *,void *> > >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1120]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z ENDP ; CMSWindow::RegisterWindowClass
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?OnSize@CMSWindow@@UAEXIJ@Z
_TEXT	SEGMENT
_wParam$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnSize@CMSWindow@@UAEXIJ@Z PROC			; CMSWindow::OnSize, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 	if (wParam == SIZE_MINIMIZED)

  00003	83 7d 08 01	 cmp	 DWORD PTR _wParam$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	75 18		 jne	 SHORT $LN2@OnSize

; 38   : 	{
; 39   : 		InvalidateRect(m_hWnd, NULL, true);

  0000c	6a 01		 push	 1
  0000e	6a 00		 push	 0
  00010	ff 76 04	 push	 DWORD PTR [esi+4]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 40   : 		m_isActive = false;
; 41   : 		m_isVisible = false;
; 42   : 	}
; 43   : 	else
; 44   : 	{
; 45   : 		m_isActive = true;
; 46   : 		m_isVisible = true;
; 47   : 	}
; 48   : }

  00019	66 c7 46 18 00
	00		 mov	 WORD PTR [esi+24], 0
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN2@OnSize:
  00024	66 c7 46 18 01
	01		 mov	 WORD PTR [esi+24], 257	; 00000101H
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?OnSize@CMSWindow@@UAEXIJ@Z ENDP			; CMSWindow::OnSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?WindowProcedure@CMSWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_uiMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WindowProcedure@CMSWindow@@UAEJPAUHWND__@@IIJ@Z PROC	; CMSWindow::WindowProcedure, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 21   : 	switch (uiMsg)

  00004	8b 75 10	 mov	 esi, DWORD PTR _wParam$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _uiMsg$[ebp]
  0000b	83 ff 05	 cmp	 edi, 5
  0000e	74 41		 je	 SHORT $LN4@WindowProc
  00010	83 ff 1c	 cmp	 edi, 28			; 0000001cH
  00013	75 45		 jne	 SHORT $LN2@WindowProc

; 25   : 			break;
; 26   : 
; 27   : 		case WM_ACTIVATEAPP:
; 28   : 			m_isActive = (wParam == WA_ACTIVE) || (wParam == WA_CLICKACTIVE);

  00015	83 fe 01	 cmp	 esi, 1
  00018	74 1e		 je	 SHORT $LN7@WindowProc
  0001a	83 fe 02	 cmp	 esi, 2
  0001d	74 19		 je	 SHORT $LN7@WindowProc

; 29   : 			break;
; 30   : 	}
; 31   : 
; 32   : 	return DefWindowProc(hWnd, uiMsg, wParam, lParam);

  0001f	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00022	32 c0		 xor	 al, al
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00029	88 41 18	 mov	 BYTE PTR [ecx+24], al
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 33   : }

  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
$LN7@WindowProc:

; 29   : 			break;
; 30   : 	}
; 31   : 
; 32   : 	return DefWindowProc(hWnd, uiMsg, wParam, lParam);

  00038	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0003b	b0 01		 mov	 al, 1
  0003d	56		 push	 esi
  0003e	57		 push	 edi
  0003f	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00042	88 41 18	 mov	 BYTE PTR [ecx+24], al
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 33   : }

  0004d	5d		 pop	 ebp
  0004e	c2 10 00	 ret	 16			; 00000010H
$LN4@WindowProc:

; 22   : 	{
; 23   : 		case WM_SIZE:
; 24   : 			OnSize(wParam, lParam);

  00051	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	56		 push	 esi
  00057	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@WindowProc:

; 29   : 			break;
; 30   : 	}
; 31   : 
; 32   : 	return DefWindowProc(hWnd, uiMsg, wParam, lParam);

  0005a	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 33   : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?WindowProcedure@CMSWindow@@UAEJPAUHWND__@@IIJ@Z ENDP	; CMSWindow::WindowProcedure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetInstance@CMSWindow@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
?GetInstance@CMSWindow@@QAEPAUHINSTANCE__@@XZ PROC	; CMSWindow::GetInstance, COMDAT
; _this$ = ecx

; 126  : 	return ms_hInstance;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A ; CMSWindow::ms_hInstance

; 127  : }

  00005	c3		 ret	 0
?GetInstance@CMSWindow@@QAEPAUHINSTANCE__@@XZ ENDP	; CMSWindow::GetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetWindowHandle@CMSWindow@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
?GetWindowHandle@CMSWindow@@QAEPAUHWND__@@XZ PROC	; CMSWindow::GetWindowHandle, COMDAT
; _this$ = ecx

; 131  : 	return m_hWnd;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 132  : }

  00003	c3		 ret	 0
?GetWindowHandle@CMSWindow@@QAEPAUHWND__@@XZ ENDP	; CMSWindow::GetWindowHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetScreenHeight@CMSWindow@@QAEHXZ
_TEXT	SEGMENT
?GetScreenHeight@CMSWindow@@QAEHXZ PROC			; CMSWindow::GetScreenHeight, COMDAT
; _this$ = ecx

; 141  : 	return GetSystemMetrics(SM_CYSCREEN);

  00000	6a 01		 push	 1
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4

; 142  : }

  00008	c3		 ret	 0
?GetScreenHeight@CMSWindow@@QAEHXZ ENDP			; CMSWindow::GetScreenHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetScreenWidth@CMSWindow@@QAEHXZ
_TEXT	SEGMENT
?GetScreenWidth@CMSWindow@@QAEHXZ PROC			; CMSWindow::GetScreenWidth, COMDAT
; _this$ = ecx

; 136  : 	return GetSystemMetrics(SM_CXSCREEN);

  00000	6a 00		 push	 0
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4

; 137  : }

  00008	c3		 ret	 0
?GetScreenWidth@CMSWindow@@QAEHXZ ENDP			; CMSWindow::GetScreenWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetWindowRect@CMSWindow@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8						; size = 4
?GetWindowRect@CMSWindow@@QAEXPAUtagRECT@@@Z PROC	; CMSWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	::GetWindowRect(m_hWnd, prc);

  00003	ff 75 08	 push	 DWORD PTR _prc$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 147  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetWindowRect@CMSWindow@@QAEXPAUtagRECT@@@Z ENDP	; CMSWindow::GetWindowRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetClientRect@CMSWindow@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8						; size = 4
?GetClientRect@CMSWindow@@QAEXPAUtagRECT@@@Z PROC	; CMSWindow::GetClientRect, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 152  : 	::GetClientRect(m_hWnd, prc);

  00003	ff 75 08	 push	 DWORD PTR _prc$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 153  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetClientRect@CMSWindow@@QAEXPAUtagRECT@@@Z ENDP	; CMSWindow::GetClientRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?GetMousePosition@CMSWindow@@QAEXPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8						; size = 4
?GetMousePosition@CMSWindow@@QAEXPAUtagPOINT@@@Z PROC	; CMSWindow::GetMousePosition, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 157  : 	GetCursorPos(ppt);

  00004	ff 75 08	 push	 DWORD PTR _ppt$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4

; 158  : 	ScreenToClient(m_hWnd, ppt);

  0000f	ff 75 08	 push	 DWORD PTR _ppt$[ebp]
  00012	ff 77 04	 push	 DWORD PTR [edi+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  0001b	5f		 pop	 edi

; 159  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetMousePosition@CMSWindow@@QAEXPAUtagPOINT@@@Z ENDP	; CMSWindow::GetMousePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?IsActive@CMSWindow@@QAE_NXZ
_TEXT	SEGMENT
?IsActive@CMSWindow@@QAE_NXZ PROC			; CMSWindow::IsActive, COMDAT
; _this$ = ecx

; 121  : 	return m_isActive;

  00000	8a 41 18	 mov	 al, BYTE PTR [ecx+24]

; 122  : }

  00003	c3		 ret	 0
?IsActive@CMSWindow@@QAE_NXZ ENDP			; CMSWindow::IsActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?IsVisible@CMSWindow@@QAE_NXZ
_TEXT	SEGMENT
?IsVisible@CMSWindow@@QAE_NXZ PROC			; CMSWindow::IsVisible, COMDAT
; _this$ = ecx

; 116  : 	return m_isVisible;

  00000	8a 41 19	 mov	 al, BYTE PTR [ecx+25]

; 117  : }

  00003	c3		 ret	 0
?IsVisible@CMSWindow@@QAE_NXZ ENDP			; CMSWindow::IsVisible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?SetSize@CMSWindow@@QAEXHH@Z
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?SetSize@CMSWindow@@QAEXHH@Z PROC			; CMSWindow::SetSize, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 	SetWindowPos(m_hWnd, NULL, 0, 0, width, height, SWP_NOZORDER|SWP_NOMOVE);

  00003	6a 06		 push	 6
  00005	ff 75 0c	 push	 DWORD PTR _height$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _width$[ebp]
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	ff 71 04	 push	 DWORD PTR [ecx+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 206  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetSize@CMSWindow@@QAEXHH@Z ENDP			; CMSWindow::SetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?AdjustSize@CMSWindow@@QAEXHH@Z
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?AdjustSize@CMSWindow@@QAEXHH@Z PROC			; CMSWindow::AdjustSize, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 180  : 	SetRect(&m_rect, 0, 0, width, height);

  00005	ff 75 0c	 push	 DWORD PTR _height$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	ff 75 08	 push	 DWORD PTR _width$[ebp]
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  00014	57		 push	 edi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 181  : 
; 182  : 	AdjustWindowRectEx(&m_rect,

  0001b	6a ec		 push	 -20			; ffffffecH
  0001d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00026	50		 push	 eax
  00027	ff 73 04	 push	 DWORD PTR [ebx+4]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	f7 d8		 neg	 eax
  00036	50		 push	 eax
  00037	6a f0		 push	 -16			; fffffff0H
  00039	ff 73 04	 push	 DWORD PTR [ebx+4]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00042	50		 push	 eax
  00043	57		 push	 edi
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16

; 183  : 						GetWindowStyle(m_hWnd),
; 184  : 						GetMenu(m_hWnd ) != NULL,
; 185  : 						GetWindowExStyle(m_hWnd ) );
; 186  : 
; 187  : 	MoveWindow

  0004a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0004d	2b 43 0c	 sub	 eax, DWORD PTR [ebx+12]
  00050	6a 00		 push	 0
  00052	50		 push	 eax
  00053	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00056	2b 07		 sub	 eax, DWORD PTR [edi]
  00058	50		 push	 eax
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00066	5f		 pop	 edi
  00067	5b		 pop	 ebx

; 188  : 	(
; 189  : 		m_hWnd,
; 190  : 		0,
; 191  : 		0,
; 192  : 		m_rect.right - m_rect.left,
; 193  : 		m_rect.bottom - m_rect.top,
; 194  : 		FALSE
; 195  : 	);
; 196  : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?AdjustSize@CMSWindow@@QAEXHH@Z ENDP			; CMSWindow::AdjustSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?SetText@CMSWindow@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szText$ = 8						; size = 4
?SetText@CMSWindow@@QAEXPBD@Z PROC			; CMSWindow::SetText, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 	SetWindowText(m_hWnd, c_szText);

  00003	ff 75 08	 push	 DWORD PTR _c_szText$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 201  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetText@CMSWindow@@QAEXPBD@Z ENDP			; CMSWindow::SetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?SetCenterPosition@CMSWindow@@QAEXXZ
_TEXT	SEGMENT
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetCenterPosition@CMSWindow@@QAEXXZ PROC		; CMSWindow::SetCenterPosition, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 168  : 	RECT rc;
; 169  : 
; 170  : 	GetClientRect(&rc);

  00013	8d 45 ec	 lea	 eax, DWORD PTR _rc$[ebp]
  00016	8b d9		 mov	 ebx, ecx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?GetClientRect@CMSWindow@@QAEXPAUtagRECT@@@Z ; CMSWindow::GetClientRect

; 171  : 
; 172  : 	int windowWidth = rc.right - rc.left;

  0001e	8b 7d f4	 mov	 edi, DWORD PTR _rc$[ebp+8]

; 173  : 	int windowHeight = rc.bottom - rc.top;
; 174  : 
; 175  : 	SetPosition((GetScreenWidth()-windowWidth)/2, (GetScreenHeight()-windowHeight)/2);

  00021	8b cb		 mov	 ecx, ebx
  00023	8b 75 f8	 mov	 esi, DWORD PTR _rc$[ebp+12]
  00026	2b 7d ec	 sub	 edi, DWORD PTR _rc$[ebp]
  00029	2b 75 f0	 sub	 esi, DWORD PTR _rc$[ebp+4]
  0002c	e8 00 00 00 00	 call	 ?GetScreenHeight@CMSWindow@@QAEHXZ ; CMSWindow::GetScreenHeight
  00031	2b c6		 sub	 eax, esi
  00033	8b cb		 mov	 ecx, ebx
  00035	99		 cdq
  00036	2b c2		 sub	 eax, edx
  00038	d1 f8		 sar	 eax, 1
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?GetScreenWidth@CMSWindow@@QAEHXZ ; CMSWindow::GetScreenWidth
  00040	2b c7		 sub	 eax, edi
  00042	8b cb		 mov	 ecx, ebx
  00044	99		 cdq
  00045	2b c2		 sub	 eax, edx
  00047	d1 f8		 sar	 eax, 1
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?SetPosition@CMSWindow@@QAEXHH@Z ; CMSWindow::SetPosition

; 176  : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	33 cd		 xor	 ecx, ebp
  00056	5b		 pop	 ebx
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?SetCenterPosition@CMSWindow@@QAEXXZ ENDP		; CMSWindow::SetCenterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?SetPosition@CMSWindow@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetPosition@CMSWindow@@QAEXHH@Z PROC			; CMSWindow::SetPosition, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  : 	SetWindowPos(m_hWnd, NULL, x, y, 0, 0, SWP_NOZORDER|SWP_NOSIZE);

  00003	6a 05		 push	 5
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000f	6a 00		 push	 0
  00011	ff 71 04	 push	 DWORD PTR [ecx+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 164  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetPosition@CMSWindow@@QAEXHH@Z ENDP			; CMSWindow::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?SetVisibleMode@CMSWindow@@QAEX_N@Z
_TEXT	SEGMENT
_isVisible$ = 8						; size = 1
?SetVisibleMode@CMSWindow@@QAEX_N@Z PROC		; CMSWindow::SetVisibleMode, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	m_isVisible = isVisible;

  00003	8a 45 08	 mov	 al, BYTE PTR _isVisible$[ebp]
  00006	88 41 19	 mov	 BYTE PTR [ecx+25], al

; 91   : 
; 92   : 	if (m_isVisible)

  00009	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000c	84 c0		 test	 al, al
  0000e	74 0d		 je	 SHORT $LN2@SetVisible

; 93   : 	{
; 94   : 		ShowWindow(m_hWnd, SW_SHOW);

  00010	6a 05		 push	 5

; 99   : 	}
; 100  : }

  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN2@SetVisible:

; 95   : 	}
; 96   : 	else
; 97   : 	{
; 98   : 		ShowWindow(m_hWnd, SW_HIDE);

  0001d	6a 00		 push	 0

; 99   : 	}
; 100  : }

  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetVisibleMode@CMSWindow@@QAEX_N@Z ENDP		; CMSWindow::SetVisibleMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?Hide@CMSWindow@@QAEXXZ
_TEXT	SEGMENT
?Hide@CMSWindow@@QAEXXZ PROC				; CMSWindow::Hide, COMDAT
; _this$ = ecx

; 110  : 	m_isVisible = false;
; 111  : 	ShowWindow(m_hWnd, SW_HIDE);

  00000	6a 00		 push	 0
  00002	ff 71 04	 push	 DWORD PTR [ecx+4]
  00005	c6 41 19 00	 mov	 BYTE PTR [ecx+25], 0
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 112  : }

  0000f	c3		 ret	 0
?Hide@CMSWindow@@QAEXXZ ENDP				; CMSWindow::Hide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?Show@CMSWindow@@QAEXXZ
_TEXT	SEGMENT
?Show@CMSWindow@@QAEXXZ PROC				; CMSWindow::Show, COMDAT
; _this$ = ecx

; 104  : 	m_isVisible = true;
; 105  : 	ShowWindow(m_hWnd, SW_SHOW);

  00000	6a 05		 push	 5
  00002	ff 71 04	 push	 DWORD PTR [ecx+4]
  00005	c6 41 19 01	 mov	 BYTE PTR [ecx+25], 1
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 106  : }

  0000f	c3		 ret	 0
?Show@CMSWindow@@QAEXXZ ENDP				; CMSWindow::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?Create@CMSWindow@@QAE_NPBDHKKPAUHICON__@@H@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
_brush$ = 12						; size = 4
_cs$ = 16						; size = 4
_ws$ = 20						; size = 4
_hIcon$ = 24						; size = 4
_iCursorResource$ = 28					; size = 4
?Create@CMSWindow@@QAE_NPBDHKKPAUHICON__@@H@Z PROC	; CMSWindow::Create, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 64   : 	//assert(ms_hInstance != NULL);
; 65   : 	Destroy();

  00006	e8 00 00 00 00	 call	 ?Destroy@CMSWindow@@QAEXXZ ; CMSWindow::Destroy

; 66   : 
; 67   : 	const char* c_szClassName = RegisterWindowClass(cs, brush, MSWindowProcedure, hIcon, iCursorResource);

  0000b	ff 75 1c	 push	 DWORD PTR _iCursorResource$[ebp]
  0000e	8b ce		 mov	 ecx, esi
  00010	ff 75 18	 push	 DWORD PTR _hIcon$[ebp]
  00013	68 00 00 00 00	 push	 OFFSET ?MSWindowProcedure@@YGJPAUHWND__@@IIJ@Z ; MSWindowProcedure
  00018	ff 75 0c	 push	 DWORD PTR _brush$[ebp]
  0001b	ff 75 10	 push	 DWORD PTR _cs$[ebp]
  0001e	e8 00 00 00 00	 call	 ?RegisterWindowClass@CMSWindow@@IAEPBDKHP6GJPAUHWND__@@IIJ@ZPAUHICON__@@H@Z ; CMSWindow::RegisterWindowClass

; 68   : 
; 69   : 	m_hWnd = CreateWindow(

  00023	6a 00		 push	 0
  00025	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hInstance@CMSWindow@@1PAUHINSTANCE__@@A ; CMSWindow::ms_hInstance
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	ff 75 14	 push	 DWORD PTR _ws$[ebp]
  0003a	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  0003d	50		 push	 eax
  0003e	6a 00		 push	 0
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  00046	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 70   : 						c_szClassName,
; 71   : 						c_szName,
; 72   : 						ws,
; 73   : 						0, 0, 0, 0,
; 74   : 						NULL,
; 75   : 						NULL,
; 76   : 						ms_hInstance,
; 77   : 						NULL);
; 78   : 
; 79   : 	if (!m_hWnd)

  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN2@Create

; 80   : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	5e		 pop	 esi

; 86   : }

  00050	5d		 pop	 ebp
  00051	c2 18 00	 ret	 24			; 00000018H
$LN2@Create:

; 81   : 
; 82   : 	SetWindowLong(m_hWnd, GWL_USERDATA, (DWORD) this);

  00054	56		 push	 esi
  00055	6a eb		 push	 -21			; ffffffebH
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 83   : 	//DestroyWindow(ImmGetDefaultIMEWnd(m_hWnd));
; 84   : 
; 85   : 	return true;

  0005e	b0 01		 mov	 al, 1
  00060	5e		 pop	 esi

; 86   : }

  00061	5d		 pop	 ebp
  00062	c2 18 00	 ret	 24			; 00000018H
?Create@CMSWindow@@QAE_NPBDHKKPAUHICON__@@H@Z ENDP	; CMSWindow::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ?Destroy@CMSWindow@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CMSWindow@@QAEXXZ PROC				; CMSWindow::Destroy, COMDAT
; _this$ = ecx

; 51   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 52   : 	if (!m_hWnd)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 1f		 je	 SHORT $LN1@Destroy

; 53   : 		return;
; 54   : 
; 55   : 	if (IsWindow(m_hWnd))

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00011	85 c0		 test	 eax, eax
  00013	74 09		 je	 SHORT $LN3@Destroy

; 56   : 		DestroyWindow(m_hWnd);

  00015	ff 76 04	 push	 DWORD PTR [esi+4]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN3@Destroy:

; 57   : 
; 58   : 	m_hWnd = NULL;

  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 59   : 	m_isVisible = false;

  00025	c6 46 19 00	 mov	 BYTE PTR [esi+25], 0
$LN1@Destroy:

; 60   : }

  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
?Destroy@CMSWindow@@QAEXXZ ENDP				; CMSWindow::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ??1CMSWindow@@UAE@XZ
_TEXT	SEGMENT
??1CMSWindow@@UAE@XZ PROC				; CMSWindow::~CMSWindow, COMDAT
; _this$ = ecx

; 248  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMSWindow@@6B@

; 249  : }

  00006	c3		 ret	 0
??1CMSWindow@@UAE@XZ ENDP				; CMSWindow::~CMSWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\MSWindow.cpp
;	COMDAT ??0CMSWindow@@QAE@XZ
_TEXT	SEGMENT
??0CMSWindow@@QAE@XZ PROC				; CMSWindow::CMSWindow, COMDAT
; _this$ = ecx

; 242  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMSWindow@@6B@

; 243  : 	m_hWnd=NULL;
; 244  : 	m_isVisible=false;
; 245  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c6 41 19 00	 mov	 BYTE PTR [ecx+25], 0
  00013	c3		 ret	 0
??0CMSWindow@@QAE@XZ ENDP				; CMSWindow::CMSWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
