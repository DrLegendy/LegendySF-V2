; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A	; CGraphicBase::ms_lpSphereMesh
PUBLIC	?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpCylinderMesh
PUBLIC	?ms_hLastResult@CGraphicBase@@1JA		; CGraphicBase::ms_hLastResult
PUBLIC	?ms_iWidth@CGraphicBase@@1HA			; CGraphicBase::ms_iWidth
PUBLIC	?ms_iHeight@CGraphicBase@@1HA			; CGraphicBase::ms_iHeight
PUBLIC	?ms_iD3DAdapterInfo@CGraphicBase@@1IA		; CGraphicBase::ms_iD3DAdapterInfo
PUBLIC	?ms_iD3DDevInfo@CGraphicBase@@1IA		; CGraphicBase::ms_iD3DDevInfo
PUBLIC	?ms_iD3DModeInfo@CGraphicBase@@1IA		; CGraphicBase::ms_iD3DModeInfo
PUBLIC	?ms_hWnd@CGraphicBase@@1PAUHWND__@@A		; CGraphicBase::ms_hWnd
PUBLIC	?ms_hDC@CGraphicBase@@1PAUHDC__@@A		; CGraphicBase::ms_hDC
PUBLIC	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A	; CGraphicBase::ms_lpd3d
PUBLIC	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
PUBLIC	?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
PUBLIC	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A	; CGraphicBase::ms_Viewport
PUBLIC	?ms_faceCount@CGraphicBase@@1KA			; CGraphicBase::ms_faceCount
PUBLIC	?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A	; CGraphicBase::ms_d3dCaps
PUBLIC	?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
PUBLIC	?ms_dwD3DBehavior@CGraphicBase@@1KA		; CGraphicBase::ms_dwD3DBehavior
PUBLIC	?ms_ptVS@CGraphicBase@@1KA			; CGraphicBase::ms_ptVS
PUBLIC	?ms_pntVS@CGraphicBase@@1KA			; CGraphicBase::ms_pntVS
PUBLIC	?ms_pnt2VS@CGraphicBase@@1KA			; CGraphicBase::ms_pnt2VS
PUBLIC	?ms_fFieldOfView@CGraphicBase@@1MA		; CGraphicBase::ms_fFieldOfView
PUBLIC	?ms_fAspect@CGraphicBase@@1MA			; CGraphicBase::ms_fAspect
PUBLIC	?ms_fNearY@CGraphicBase@@1MA			; CGraphicBase::ms_fNearY
PUBLIC	?ms_fFarY@CGraphicBase@@1MA			; CGraphicBase::ms_fFarY
PUBLIC	?ms_dwWavingEndTime@CGraphicBase@@1KA		; CGraphicBase::ms_dwWavingEndTime
PUBLIC	?ms_iWavingPower@CGraphicBase@@1HA		; CGraphicBase::ms_iWavingPower
PUBLIC	?ms_dwFlashingEndTime@CGraphicBase@@1KA		; CGraphicBase::ms_dwFlashingEndTime
PUBLIC	?ms_bSupportDXT@CGraphicBase@@1_NA		; CGraphicBase::ms_bSupportDXT
PUBLIC	?ms_isLowTextureMemory@CGraphicBase@@1_NA	; CGraphicBase::ms_isLowTextureMemory
PUBLIC	?ms_isHighTextureMemory@CGraphicBase@@1_NA	; CGraphicBase::ms_isHighTextureMemory
PUBLIC	?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A ; CGraphicBase::ms_alpd3dPDTVB
PUBLIC	?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A ; CGraphicBase::ms_alpd3dDefIB
_BSS	SEGMENT
?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A DD 01H DUP (?) ; CGraphicBase::ms_lpSphereMesh
?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A DD 01H DUP (?) ; CGraphicBase::ms_lpCylinderMesh
?ms_hLastResult@CGraphicBase@@1JA DD 01H DUP (?)	; CGraphicBase::ms_hLastResult
?ms_iWidth@CGraphicBase@@1HA DD 01H DUP (?)		; CGraphicBase::ms_iWidth
?ms_iHeight@CGraphicBase@@1HA DD 01H DUP (?)		; CGraphicBase::ms_iHeight
?ms_iD3DAdapterInfo@CGraphicBase@@1IA DD 01H DUP (?)	; CGraphicBase::ms_iD3DAdapterInfo
?ms_iD3DDevInfo@CGraphicBase@@1IA DD 01H DUP (?)	; CGraphicBase::ms_iD3DDevInfo
?ms_iD3DModeInfo@CGraphicBase@@1IA DD 01H DUP (?)	; CGraphicBase::ms_iD3DModeInfo
?ms_hWnd@CGraphicBase@@1PAUHWND__@@A DD 01H DUP (?)	; CGraphicBase::ms_hWnd
?ms_hDC@CGraphicBase@@1PAUHDC__@@A DD 01H DUP (?)	; CGraphicBase::ms_hDC
?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A DD 01H DUP (?) ; CGraphicBase::ms_lpd3d
?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A DD 01H DUP (?) ; CGraphicBase::ms_lpd3dDevice
?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A DD 01H DUP (?) ; CGraphicBase::ms_lpd3dMatStack
?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A DB 018H DUP (?) ; CGraphicBase::ms_Viewport
?ms_faceCount@CGraphicBase@@1KA DD 01H DUP (?)		; CGraphicBase::ms_faceCount
?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A DB 0d4H DUP (?) ; CGraphicBase::ms_d3dCaps
?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A DB 034H DUP (?) ; CGraphicBase::ms_d3dPresentParameter
?ms_dwD3DBehavior@CGraphicBase@@1KA DD 01H DUP (?)	; CGraphicBase::ms_dwD3DBehavior
?ms_ptVS@CGraphicBase@@1KA DD 01H DUP (?)		; CGraphicBase::ms_ptVS
?ms_pntVS@CGraphicBase@@1KA DD 01H DUP (?)		; CGraphicBase::ms_pntVS
?ms_pnt2VS@CGraphicBase@@1KA DD 01H DUP (?)		; CGraphicBase::ms_pnt2VS
?ms_fFieldOfView@CGraphicBase@@1MA DD 01H DUP (?)	; CGraphicBase::ms_fFieldOfView
?ms_fAspect@CGraphicBase@@1MA DD 01H DUP (?)		; CGraphicBase::ms_fAspect
?ms_fNearY@CGraphicBase@@1MA DD 01H DUP (?)		; CGraphicBase::ms_fNearY
?ms_fFarY@CGraphicBase@@1MA DD 01H DUP (?)		; CGraphicBase::ms_fFarY
?ms_dwWavingEndTime@CGraphicBase@@1KA DD 01H DUP (?)	; CGraphicBase::ms_dwWavingEndTime
?ms_iWavingPower@CGraphicBase@@1HA DD 01H DUP (?)	; CGraphicBase::ms_iWavingPower
?ms_dwFlashingEndTime@CGraphicBase@@1KA DD 01H DUP (?)	; CGraphicBase::ms_dwFlashingEndTime
?ms_isLowTextureMemory@CGraphicBase@@1_NA DB 01H DUP (?) ; CGraphicBase::ms_isLowTextureMemory
	ALIGN	4

?ms_isHighTextureMemory@CGraphicBase@@1_NA DB 01H DUP (?) ; CGraphicBase::ms_isHighTextureMemory
	ALIGN	4

?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A DD 064H DUP (?) ; CGraphicBase::ms_alpd3dPDTVB
?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A DD 07H DUP (?) ; CGraphicBase::ms_alpd3dDefIB
_BSS	ENDS
_DATA	SEGMENT
?ms_bSupportDXT@CGraphicBase@@1_NA DB 01H		; CGraphicBase::ms_bSupportDXT
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z ; PixelPositionToD3DXVECTOR3
PUBLIC	?D3DXVECTOR3ToPixelPosition@@YAXABUD3DXVECTOR3@@PAU1@@Z ; D3DXVECTOR3ToPixelPosition
PUBLIC	?GetAvailableTextureMemory@CGraphicBase@@SAKXZ	; CGraphicBase::GetAvailableTextureMemory
PUBLIC	?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ; CGraphicBase::GetViewMatrix
PUBLIC	?GetIdentityMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ; CGraphicBase::GetIdentityMatrix
PUBLIC	??0CGraphicBase@@QAE@XZ				; CGraphicBase::CGraphicBase
PUBLIC	??1CGraphicBase@@UAE@XZ				; CGraphicBase::~CGraphicBase
PUBLIC	?SetSimpleCamera@CGraphicBase@@QAEXMMMMM@Z	; CGraphicBase::SetSimpleCamera
PUBLIC	?SetEyeCamera@CGraphicBase@@QAEXMMMMMMMMM@Z	; CGraphicBase::SetEyeCamera
PUBLIC	?SetAroundCamera@CGraphicBase@@QAEXMMMM@Z	; CGraphicBase::SetAroundCamera
PUBLIC	?SetPositionCamera@CGraphicBase@@QAEXMMMMMM@Z	; CGraphicBase::SetPositionCamera
PUBLIC	?GetTargetPosition@CGraphicBase@@QAEXPAM00@Z	; CGraphicBase::GetTargetPosition
PUBLIC	?GetCameraPosition@CGraphicBase@@QAEXPAM00@Z	; CGraphicBase::GetCameraPosition
PUBLIC	?SetOrtho2D@CGraphicBase@@QAEXMMM@Z		; CGraphicBase::SetOrtho2D
PUBLIC	?SetOrtho3D@CGraphicBase@@QAEXMMMM@Z		; CGraphicBase::SetOrtho3D
PUBLIC	?SetPerspective@CGraphicBase@@QAEXMMMM@Z	; CGraphicBase::SetPerspective
PUBLIC	?GetFOV@CGraphicBase@@QAEMXZ			; CGraphicBase::GetFOV
PUBLIC	?PushMatrix@CGraphicBase@@QAEXXZ		; CGraphicBase::PushMatrix
PUBLIC	?MultMatrix@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z	; CGraphicBase::MultMatrix
PUBLIC	?MultMatrixLocal@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z ; CGraphicBase::MultMatrixLocal
PUBLIC	?Translate@CGraphicBase@@QAEXMMM@Z		; CGraphicBase::Translate
PUBLIC	?Rotate@CGraphicBase@@QAEXMMMM@Z		; CGraphicBase::Rotate
PUBLIC	?RotateLocal@CGraphicBase@@QAEXMMMM@Z		; CGraphicBase::RotateLocal
PUBLIC	?RotateYawPitchRollLocal@CGraphicBase@@QAEXMMM@Z ; CGraphicBase::RotateYawPitchRollLocal
PUBLIC	?Scale@CGraphicBase@@QAEXMMM@Z			; CGraphicBase::Scale
PUBLIC	?PopMatrix@CGraphicBase@@QAEXXZ			; CGraphicBase::PopMatrix
PUBLIC	?LoadMatrix@CGraphicBase@@QAEXABUD3DXMATRIX@@@Z	; CGraphicBase::LoadMatrix
PUBLIC	?GetMatrix@CGraphicBase@@QBEXPAUD3DXMATRIX@@@Z	; CGraphicBase::GetMatrix
PUBLIC	?GetMatrixPointer@CGraphicBase@@QBEPBUD3DXMATRIX@@XZ ; CGraphicBase::GetMatrixPointer
PUBLIC	?GetSphereMatrix@CGraphicBase@@QAEXPAUD3DXMATRIX@@M@Z ; CGraphicBase::GetSphereMatrix
PUBLIC	?InitScreenEffect@CGraphicBase@@QAEXXZ		; CGraphicBase::InitScreenEffect
PUBLIC	?SetScreenEffectWaving@CGraphicBase@@QAEXMH@Z	; CGraphicBase::SetScreenEffectWaving
PUBLIC	?SetScreenEffectFlashing@CGraphicBase@@QAEXMABUD3DXCOLOR@@@Z ; CGraphicBase::SetScreenEffectFlashing
PUBLIC	?GetColor@CGraphicBase@@QAEKMMMM@Z		; CGraphicBase::GetColor
PUBLIC	?GetFaceCount@CGraphicBase@@QAEKXZ		; CGraphicBase::GetFaceCount
PUBLIC	?ResetFaceCount@CGraphicBase@@QAEXXZ		; CGraphicBase::ResetFaceCount
PUBLIC	?GetLastResult@CGraphicBase@@QAEJXZ		; CGraphicBase::GetLastResult
PUBLIC	?UpdateProjMatrix@CGraphicBase@@QAEXXZ		; CGraphicBase::UpdateProjMatrix
PUBLIC	?UpdateViewMatrix@CGraphicBase@@QAEXXZ		; CGraphicBase::UpdateViewMatrix
PUBLIC	?SetViewport@CGraphicBase@@QAEXKKKKMM@Z		; CGraphicBase::SetViewport
PUBLIC	?GetBackBufferSize@CGraphicBase@@SAXPAI0@Z	; CGraphicBase::GetBackBufferSize
PUBLIC	?IsTLVertexClipping@CGraphicBase@@SA_NXZ	; CGraphicBase::IsTLVertexClipping
PUBLIC	?IsFastTNL@CGraphicBase@@SA_NXZ			; CGraphicBase::IsFastTNL
PUBLIC	?IsLowTextureMemory@CGraphicBase@@SA_NXZ	; CGraphicBase::IsLowTextureMemory
PUBLIC	?IsHighTextureMemory@CGraphicBase@@SA_NXZ	; CGraphicBase::IsHighTextureMemory
PUBLIC	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z	; CGraphicBase::SetDefaultIndexBuffer
PUBLIC	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
PUBLIC	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
PUBLIC	?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ	; CGraphicBase::UpdatePipeLineMatrix
PUBLIC	??_GCGraphicBase@@UAEPAXI@Z			; CGraphicBase::`scalar deleting destructor'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matIdentity
PUBLIC	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matView
PUBLIC	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matProj
PUBLIC	?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matInverseView
PUBLIC	?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matInverseViewYAxis
PUBLIC	?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matWorld
PUBLIC	?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matWorldView
PUBLIC	?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
PUBLIC	?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matScreen0
PUBLIC	?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matScreen1
PUBLIC	?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A	; CGraphicBase::ms_matScreen2
PUBLIC	?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
PUBLIC	?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A	; CGraphicBase::ms_vtPickRayDir
PUBLIC	?ms_FlashingColor@CGraphicBase@@1UD3DXCOLOR@@A	; CGraphicBase::ms_FlashingColor
PUBLIC	?ms_Ray@CGraphicBase@@1VCRay@@A			; CGraphicBase::ms_Ray
PUBLIC	??_7CGraphicBase@@6B@				; CGraphicBase::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_R4CGraphicBase@@6B@				; CGraphicBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c8efa35
PUBLIC	__real@41200000
PUBLIC	__real@437f0000
PUBLIC	__real@c47a0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixPerspectiveFovRH@20:PROC
EXTRN	_D3DXMatrixOrthoRH@20:PROC
EXTRN	_D3DXMatrixOrthoOffCenterRH@28:PROC
EXTRN	?fMIN@@YAMMM@Z:PROC				; fMIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?GetCurrentMillisecond@CTimer@@QAEKXZ:PROC	; CTimer::GetCurrentMillisecond
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	??0D3D_CDisplayModeAutoDetector@@QAE@XZ:PROC	; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
EXTRN	??1D3D_CDisplayModeAutoDetector@@QAE@XZ:PROC	; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
EXTRN	??_ECGraphicBase@@UAEPAXI@Z:PROC		; CGraphicBase::`vector deleting destructor'
EXTRN	?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z:PROC ; CCamera::SetViewParams
EXTRN	?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z:PROC	; CCamera::SetTarget
EXTRN	?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z:PROC	; CCamera::Move
EXTRN	?RotateEyeAroundTarget@CCamera@@QAEXMM@Z:PROC	; CCamera::RotateEyeAroundTarget
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z:PROC ; CStateManager::GetTransform
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matIdentity
?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matView
?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matProj
?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matInverseView
?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matInverseViewYAxis
?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matWorld
?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matWorldView
?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A DB 031974H DUP (?) ; CGraphicBase::ms_kD3DDetector
?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matScreen0
?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matScreen1
?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A DB 040H DUP (?) ; CGraphicBase::ms_matScreen2
?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A DB 0cH DUP (?) ; CGraphicBase::ms_vtPickRayOrig
?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A DB 0cH DUP (?) ; CGraphicBase::ms_vtPickRayDir
?ms_FlashingColor@CGraphicBase@@1UD3DXCOLOR@@A DB 010H DUP (?) ; CGraphicBase::ms_FlashingColor
?ms_Ray@CGraphicBase@@1VCRay@@A DB 028H DUP (?)		; CGraphicBase::ms_Ray
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_dwVBPos@?1??SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z@4KA
_BSS	SEGMENT
?s_dwVBPos@?1??SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z@4KA DD 01H DUP (?) ; `CGraphicBase::SetPDTStream'::`2'::s_dwVBPos
_BSS	ENDS
;	COMDAT ?s_dwNextUpdateTime@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA
_BSS	SEGMENT
?s_dwNextUpdateTime@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicBase::GetAvailableTextureMemory'::`2'::s_dwNextUpdateTime
_BSS	ENDS
;	COMDAT ?s_dwTexMemSize@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA
_BSS	SEGMENT
?s_dwTexMemSize@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicBase::GetAvailableTextureMemory'::`2'::s_dwTexMemSize
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kD3DDetector$initializer$@CGraphicBase@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ ; ??ms_kD3DDetector$initializer$@CGraphicBase@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicBase@@6B@
rdata$r	SEGMENT
??_R4CGraphicBase@@6B@ DD 00H				; CGraphicBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicBase@@@8
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_7CGraphicBase@@6B@
CONST	SEGMENT
??_7CGraphicBase@@6B@ DD FLAT:??_R4CGraphicBase@@6B@	; CGraphicBase::`vftable'
	DD	FLAT:??_ECGraphicBase@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicBase::ms_kD3DDetector'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  00005	e9 00 00 00 00	 jmp	 ??1D3D_CDisplayModeAutoDetector@@QAE@XZ ; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
??__F?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicBase::ms_kD3DDetector''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ??__E?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicBase::ms_kD3DDetector'', COMDAT

; 25   : D3D_CDisplayModeAutoDetector				CGraphicBase::ms_kD3DDetector;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  00005	e8 00 00 00 00	 call	 ??0D3D_CDisplayModeAutoDetector@@QAE@XZ ; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicBase::ms_kD3DDetector''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicBase::ms_kD3DDetector''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicBase@@UAEPAXI@Z PROC			; CGraphicBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicBase@@UAEPAXI@Z ENDP			; CGraphicBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ
_TEXT	SEGMENT
?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ PROC		; CGraphicBase::UpdatePipeLineMatrix, COMDAT
; _this$ = ecx

; 345  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 346  : 	UpdateProjMatrix();

  00003	e8 00 00 00 00	 call	 ?UpdateProjMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateProjMatrix

; 347  : 	UpdateViewMatrix();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix
?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ ENDP		; CGraphicBase::UpdatePipeLineMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z
_TEXT	SEGMENT
_pVertices$ = 8						; size = 4
_uVtxCount$ = 12					; size = 4
?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z PROC	; CGraphicBase::SetPDTStream, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : }

  00003	5d		 pop	 ebp

; 146  : 	return SetPDTStream((SPDTVertexRaw*)pVertices, uVtxCount);

  00004	e9 00 00 00 00	 jmp	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ENDP	; CGraphicBase::SetPDTStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z
_TEXT	SEGMENT
_pSrcVertices$ = 8					; size = 4
_pDstVertices$ = 12					; size = 4
_uVtxCount$ = 12					; size = 4
?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z PROC ; CGraphicBase::SetPDTStream, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 151  : 	if (!uVtxCount)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _uVtxCount$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 7e		 je	 SHORT $LN7@SetPDTStre

; 152  : 		return false;
; 153  : 
; 154  : 	static DWORD s_dwVBPos=0;
; 155  : 
; 156  : 	if (s_dwVBPos>=PDT_VERTEXBUFFER_NUM)

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_dwVBPos@?1??SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z@4KA
  00010	83 f8 64	 cmp	 eax, 100		; 00000064H
  00013	1b c9		 sbb	 ecx, ecx
  00015	23 c8		 and	 ecx, eax

; 157  : 		s_dwVBPos=0;
; 158  : 
; 159  : 	IDirect3DVertexBuffer8* plpd3dFillRectVB=ms_alpd3dPDTVB[s_dwVBPos];

  00017	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR ?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A[ecx*4]

; 160  : 	++s_dwVBPos;

  0001e	41		 inc	 ecx
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?s_dwVBPos@?1??SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z@4KA, ecx

; 161  : 
; 162  : 	assert(PDT_VERTEX_NUM>=uVtxCount);
; 163  : 	if (uVtxCount >= PDT_VERTEX_NUM)

  00025	83 fa 10	 cmp	 edx, 16			; 00000010H
  00028	73 5f		 jae	 SHORT $LN7@SetPDTStre

; 165  : 
; 166  : 	TPDTVertex* pDstVertices;
; 167  : 	if (FAILED(

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8d 4d 0c	 lea	 ecx, DWORD PTR _pDstVertices$[ebp]
  0002f	57		 push	 edi
  00030	68 00 20 00 00	 push	 8192			; 00002000H
  00035	8d 3c 52	 lea	 edi, DWORD PTR [edx+edx*2]
  00038	51		 push	 ecx
  00039	c1 e7 03	 shl	 edi, 3
  0003c	57		 push	 edi
  0003d	6a 00		 push	 0
  0003f	56		 push	 esi
  00040	ff 50 2c	 call	 DWORD PTR [eax+44]
  00043	85 c0		 test	 eax, eax
  00045	79 17		 jns	 SHORT $LN5@SetPDTStre

; 168  : 		plpd3dFillRectVB->Lock(0, sizeof(TPDTVertex)*uVtxCount, (BYTE**)&pDstVertices, D3DLOCK_DISCARD)
; 169  : 	))
; 170  : 	{
; 171  : 		STATEMANAGER.SetStreamSource(0, NULL, 0);

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
  00058	5f		 pop	 edi

; 172  : 		return false;

  00059	32 c0		 xor	 al, al
  0005b	5e		 pop	 esi

; 183  : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN5@SetPDTStre:

; 173  : 	}
; 174  : 
; 175  : 
; 176  : 	memcpy(pDstVertices, pSrcVertices, sizeof(TPDTVertex)*uVtxCount);

  0005e	57		 push	 edi
  0005f	ff 75 08	 push	 DWORD PTR _pSrcVertices$[ebp]
  00062	ff 75 0c	 push	 DWORD PTR _pDstVertices$[ebp]
  00065	e8 00 00 00 00	 call	 _memcpy

; 177  : 
; 178  : 	plpd3dFillRectVB->Unlock();

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	56		 push	 esi
  00070	ff 50 30	 call	 DWORD PTR [eax+48]

; 179  : 
; 180  : 	STATEMANAGER.SetStreamSource(0, plpd3dFillRectVB, sizeof(TPDTVertex));

  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00079	6a 18		 push	 24			; 00000018H
  0007b	56		 push	 esi
  0007c	6a 00		 push	 0
  0007e	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
  00083	5f		 pop	 edi

; 181  : 
; 182  : 	return true;

  00084	b0 01		 mov	 al, 1
  00086	5e		 pop	 esi

; 183  : }

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN7@SetPDTStre:

; 164  : 		return false;

  00089	32 c0		 xor	 al, al
  0008b	5e		 pop	 esi

; 183  : }

  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ENDP ; CGraphicBase::SetPDTStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z
_TEXT	SEGMENT
_eDefIB$ = 8						; size = 4
?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z PROC	; CGraphicBase::SetDefaultIndexBuffer, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	if (eDefIB>=DEFAULT_IB_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _eDefIB$[ebp]
  00006	83 f8 07	 cmp	 eax, 7
  00009	73 14		 jae	 SHORT $LN1@SetDefault

; 139  : 		return;
; 140  : 
; 141  : 	STATEMANAGER.SetIndices(ms_alpd3dDefIB[eDefIB], 0);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00011	6a 00		 push	 0
  00013	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A[eax*4]
  0001a	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN1@SetDefault:

; 142  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ENDP	; CGraphicBase::SetDefaultIndexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?IsHighTextureMemory@CGraphicBase@@SA_NXZ
_TEXT	SEGMENT
?IsHighTextureMemory@CGraphicBase@@SA_NXZ PROC		; CGraphicBase::IsHighTextureMemory, COMDAT

; 108  : 	return ms_isHighTextureMemory;

  00000	a0 00 00 00 00	 mov	 al, BYTE PTR ?ms_isHighTextureMemory@CGraphicBase@@1_NA ; CGraphicBase::ms_isHighTextureMemory

; 109  : }

  00005	c3		 ret	 0
?IsHighTextureMemory@CGraphicBase@@SA_NXZ ENDP		; CGraphicBase::IsHighTextureMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?IsLowTextureMemory@CGraphicBase@@SA_NXZ
_TEXT	SEGMENT
?IsLowTextureMemory@CGraphicBase@@SA_NXZ PROC		; CGraphicBase::IsLowTextureMemory, COMDAT

; 103  : 	return ms_isLowTextureMemory;

  00000	a0 00 00 00 00	 mov	 al, BYTE PTR ?ms_isLowTextureMemory@CGraphicBase@@1_NA ; CGraphicBase::ms_isLowTextureMemory

; 104  : }

  00005	c3		 ret	 0
?IsLowTextureMemory@CGraphicBase@@SA_NXZ ENDP		; CGraphicBase::IsLowTextureMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?IsFastTNL@CGraphicBase@@SA_NXZ
_TEXT	SEGMENT
?IsFastTNL@CGraphicBase@@SA_NXZ PROC			; CGraphicBase::IsFastTNL, COMDAT

; 112  : {

  00000	f6 05 00 00 00
	00 c0		 test	 BYTE PTR ?ms_dwD3DBehavior@CGraphicBase@@1KA, 192 ; 000000c0H

; 113  : 	if (ms_dwD3DBehavior & D3DCREATE_HARDWARE_VERTEXPROCESSING ||

  00007	74 0f		 je	 SHORT $LN4@IsFastTNL

; 114  : 		ms_dwD3DBehavior & D3DCREATE_MIXED_VERTEXPROCESSING)
; 115  : 	{
; 116  : 		if (ms_d3dCaps.VertexShaderVersion>D3DVS_VERSION(1,0))

  00009	81 3d c4 00 00
	00 00 01 fe ff	 cmp	 DWORD PTR ?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A+196, -130816 ; fffe0100H
  00013	76 03		 jbe	 SHORT $LN4@IsFastTNL

; 117  : 			return true;

  00015	b0 01		 mov	 al, 1

; 120  : }

  00017	c3		 ret	 0
$LN4@IsFastTNL:

; 118  : 	}
; 119  : 	return false;

  00018	32 c0		 xor	 al, al

; 120  : }

  0001a	c3		 ret	 0
?IsFastTNL@CGraphicBase@@SA_NXZ ENDP			; CGraphicBase::IsFastTNL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?IsTLVertexClipping@CGraphicBase@@SA_NXZ
_TEXT	SEGMENT
?IsTLVertexClipping@CGraphicBase@@SA_NXZ PROC		; CGraphicBase::IsTLVertexClipping, COMDAT

; 124  : 	if (ms_d3dCaps.PrimitiveMiscCaps & D3DPMISCCAPS_CLIPTLVERTS)

  00000	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A+32
  00005	c1 e8 09	 shr	 eax, 9
  00008	24 01		 and	 al, 1

; 125  : 		return true;
; 126  : 
; 127  : 	return false;
; 128  : }

  0000a	c3		 ret	 0
?IsTLVertexClipping@CGraphicBase@@SA_NXZ ENDP		; CGraphicBase::IsTLVertexClipping
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetBackBufferSize@CGraphicBase@@SAXPAI0@Z
_TEXT	SEGMENT
_puWidth$ = 8						; size = 4
_puHeight$ = 12						; size = 4
?GetBackBufferSize@CGraphicBase@@SAXPAI0@Z PROC		; CGraphicBase::GetBackBufferSize, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 132  : 	*puWidth=ms_d3dPresentParameter.BackBufferWidth;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _puWidth$[ebp]
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 133  : 	*puHeight=ms_d3dPresentParameter.BackBufferHeight;

  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _puHeight$[ebp]
  00010	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 134  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetBackBufferSize@CGraphicBase@@SAXPAI0@Z ENDP		; CGraphicBase::GetBackBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetViewport@CGraphicBase@@QAEXKKKKMM@Z
_TEXT	SEGMENT
_dwX$ = 8						; size = 4
_dwY$ = 12						; size = 4
_dwWidth$ = 16						; size = 4
_dwHeight$ = 20						; size = 4
_fMinZ$ = 24						; size = 4
_fMaxZ$ = 28						; size = 4
?SetViewport@CGraphicBase@@QAEXKKKKMM@Z PROC		; CGraphicBase::SetViewport, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 352  : 	ms_Viewport.X = dwX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwX$[ebp]

; 353  : 	ms_Viewport.Y = dwY;
; 354  : 	ms_Viewport.Width = dwWidth;
; 355  : 	ms_Viewport.Height = dwHeight;
; 356  : 	ms_Viewport.MinZ = fMinZ;

  00006	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fMinZ$[ebp]
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A, eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _dwY$[ebp]
  00013	a3 04 00 00 00	 mov	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+4, eax
  00018	8b 45 10	 mov	 eax, DWORD PTR _dwWidth$[ebp]
  0001b	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+16, xmm0

; 357  : 	ms_Viewport.MaxZ = fMaxZ;

  00023	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fMaxZ$[ebp]
  00028	a3 08 00 00 00	 mov	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8, eax
  0002d	8b 45 14	 mov	 eax, DWORD PTR _dwHeight$[ebp]
  00030	a3 0c 00 00 00	 mov	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12, eax
  00035	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+20, xmm0

; 358  : }

  0003d	5d		 pop	 ebp
  0003e	c2 18 00	 ret	 24			; 00000018H
?SetViewport@CGraphicBase@@QAEXKKKKMM@Z ENDP		; CGraphicBase::SetViewport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?UpdateViewMatrix@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?UpdateViewMatrix@CGraphicBase@@QAEXXZ PROC		; CGraphicBase::UpdateViewMatrix, COMDAT
; _this$ = ecx

; 330  : 	CCamera* pkCamera=CCameraManager::Instance().GetCurrentCamera();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 331  : 	if (!pkCamera)

  0000b	85 c0		 test	 eax, eax
  0000d	0f 84 95 00 00
	00		 je	 $LN1@UpdateView

; 332  : 		return;
; 333  : 
; 334  : 	ms_matView = pkCamera->GetViewMatrix();

  00013	0f 10 40 6c	 movups	 xmm0, XMMWORD PTR [eax+108]

; 335  : 	STATEMANAGER.SetTransform(D3DTS_VIEW, &ms_matView);

  00017	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001d	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  00022	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  00029	6a 02		 push	 2
  0002b	0f 10 40 7c	 movups	 xmm0, XMMWORD PTR [eax+124]
  0002f	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0
  00036	0f 10 80 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [eax+140]
  0003d	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32, xmm0
  00044	0f 10 80 9c 00
	00 00		 movups	 xmm0, XMMWORD PTR [eax+156]
  0004b	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48, xmm0
  00052	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 336  : 
; 337  : 	D3DXMatrixInverse(&ms_matInverseView, NULL, &ms_matView);

  00057	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0005c	6a 00		 push	 0
  0005e	68 00 00 00 00	 push	 OFFSET ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matInverseView
  00063	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12

; 338  : 	ms_matInverseViewYAxis._11 = ms_matInverseView._11;

  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A
  00070	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A, xmm0

; 339  : 	ms_matInverseViewYAxis._12 = ms_matInverseView._12;

  00078	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+4
  00080	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+4, xmm0

; 340  : 	ms_matInverseViewYAxis._21 = ms_matInverseView._21;

  00088	f3 0f 10 05 10
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+16
  00090	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0

; 341  : 	ms_matInverseViewYAxis._22 = ms_matInverseView._22;

  00098	f3 0f 10 05 14
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+20
  000a0	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+20, xmm0
$LN1@UpdateView:

; 342  : }

  000a8	c3		 ret	 0
?UpdateViewMatrix@CGraphicBase@@QAEXXZ ENDP		; CGraphicBase::UpdateViewMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?UpdateProjMatrix@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?UpdateProjMatrix@CGraphicBase@@QAEXXZ PROC		; CGraphicBase::UpdateProjMatrix, COMDAT
; _this$ = ecx

; 325  : 	STATEMANAGER.SetTransform(D3DTS_PROJECTION, &ms_matProj);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  0000b	6a 03		 push	 3
  0000d	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 326  : }

  00012	c3		 ret	 0
?UpdateProjMatrix@CGraphicBase@@QAEXXZ ENDP		; CGraphicBase::UpdateProjMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetLastResult@CGraphicBase@@QAEJXZ
_TEXT	SEGMENT
?GetLastResult@CGraphicBase@@QAEJXZ PROC		; CGraphicBase::GetLastResult, COMDAT
; _this$ = ecx

; 501  : 	return ms_hLastResult;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_hLastResult@CGraphicBase@@1JA ; CGraphicBase::ms_hLastResult

; 502  : }

  00005	c3		 ret	 0
?GetLastResult@CGraphicBase@@QAEJXZ ENDP		; CGraphicBase::GetLastResult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?ResetFaceCount@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?ResetFaceCount@CGraphicBase@@QAEXXZ PROC		; CGraphicBase::ResetFaceCount, COMDAT
; _this$ = ecx

; 496  : 	ms_faceCount = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_faceCount

; 497  : }

  0000a	c3		 ret	 0
?ResetFaceCount@CGraphicBase@@QAEXXZ ENDP		; CGraphicBase::ResetFaceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetFaceCount@CGraphicBase@@QAEKXZ
_TEXT	SEGMENT
?GetFaceCount@CGraphicBase@@QAEKXZ PROC			; CGraphicBase::GetFaceCount, COMDAT
; _this$ = ecx

; 491  : 	return ms_faceCount;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount

; 492  : }

  00005	c3		 ret	 0
?GetFaceCount@CGraphicBase@@QAEKXZ ENDP			; CGraphicBase::GetFaceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetColor@CGraphicBase@@QAEKMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?GetColor@CGraphicBase@@QAEKMMMM@Z PROC			; CGraphicBase::GetColor, COMDAT
; _this$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 458  : 	BYTE argb[4] =
; 459  : 	{
; 460  : 		(BYTE) (255.0f * b),
; 461  : 		(BYTE) (255.0f * g),
; 462  : 		(BYTE) (255.0f * r),
; 463  : 		(BYTE) (255.0f * a)

  00003	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@437f0000
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00010	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00014	f3 0f 2c c0	 cvttss2si eax, xmm0
  00018	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0001d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00021	0f b6 d0	 movzx	 edx, al
  00024	c1 e2 08	 shl	 edx, 8
  00027	f3 0f 2c c0	 cvttss2si eax, xmm0
  0002b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00030	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00034	0f b6 c0	 movzx	 eax, al
  00037	0b c2		 or	 eax, edx
  00039	c1 e0 08	 shl	 eax, 8
  0003c	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00045	0f b6 c9	 movzx	 ecx, cl
  00048	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004c	0b c1		 or	 eax, ecx
  0004e	c1 e0 08	 shl	 eax, 8
  00051	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00055	0f b6 c9	 movzx	 ecx, cl
  00058	0b c1		 or	 eax, ecx

; 464  : 	};
; 465  : 
; 466  : 	return *((DWORD *) argb);
; 467  : }

  0005a	5d		 pop	 ebp
  0005b	c2 10 00	 ret	 16			; 00000010H
?GetColor@CGraphicBase@@QAEKMMMM@Z ENDP			; CGraphicBase::GetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetScreenEffectFlashing@CGraphicBase@@QAEXMABUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_fDuringTime$ = 8					; size = 4
_c_rColor$ = 12						; size = 4
?SetScreenEffectFlashing@CGraphicBase@@QAEXMABUD3DXCOLOR@@@Z PROC ; CGraphicBase::SetScreenEffectFlashing, COMDAT
; _this$ = ecx

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 485  : 	ms_dwFlashingEndTime = CTimer::Instance().GetCurrentMillisecond() + long(fDuringTime * 1000.0f);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00009	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDuringTime$[ebp]
  00013	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c47a0000
  0001b	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0001f	2b c1		 sub	 eax, ecx
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwFlashingEndTime@CGraphicBase@@1KA, eax ; CGraphicBase::ms_dwFlashingEndTime

; 486  : 	ms_FlashingColor = c_rColor;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _c_rColor$[ebp]
  00029	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002c	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_FlashingColor@CGraphicBase@@1UD3DXCOLOR@@A, xmm0

; 487  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetScreenEffectFlashing@CGraphicBase@@QAEXMABUD3DXCOLOR@@@Z ENDP ; CGraphicBase::SetScreenEffectFlashing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetScreenEffectWaving@CGraphicBase@@QAEXMH@Z
_TEXT	SEGMENT
_fDuringTime$ = 8					; size = 4
_iPower$ = 12						; size = 4
?SetScreenEffectWaving@CGraphicBase@@QAEXMH@Z PROC	; CGraphicBase::SetScreenEffectWaving, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 479  : 	ms_dwWavingEndTime = CTimer::Instance().GetCurrentMillisecond() + long(fDuringTime * 1000.0f);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00009	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDuringTime$[ebp]
  00013	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c47a0000
  0001b	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0001f	2b c1		 sub	 eax, ecx
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwWavingEndTime@CGraphicBase@@1KA, eax ; CGraphicBase::ms_dwWavingEndTime

; 480  : 	ms_iWavingPower = iPower;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _iPower$[ebp]
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA, eax ; CGraphicBase::ms_iWavingPower

; 481  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?SetScreenEffectWaving@CGraphicBase@@QAEXMH@Z ENDP	; CGraphicBase::SetScreenEffectWaving
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?InitScreenEffect@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?InitScreenEffect@CGraphicBase@@QAEXXZ PROC		; CGraphicBase::InitScreenEffect, COMDAT
; _this$ = ecx

; 470  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 471  : 	ms_dwWavingEndTime = 0;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_dwWavingEndTime@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_dwWavingEndTime

; 472  : 	ms_dwFlashingEndTime = 0;

  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_dwFlashingEndTime@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_dwFlashingEndTime

; 473  : 	ms_iWavingPower = 0;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA, 0 ; CGraphicBase::ms_iWavingPower

; 474  : 	ms_FlashingColor = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.0f);

  00021	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_FlashingColor@CGraphicBase@@1UD3DXCOLOR@@A, xmm0

; 475  : }

  00028	c3		 ret	 0
?InitScreenEffect@CGraphicBase@@QAEXXZ ENDP		; CGraphicBase::InitScreenEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetSphereMatrix@CGraphicBase@@QAEXPAUD3DXMATRIX@@M@Z
_TEXT	SEGMENT
_pMatrix$ = 8						; size = 4
_fValue$ = 12						; size = 4
?GetSphereMatrix@CGraphicBase@@QAEXPAUD3DXMATRIX@@M@Z PROC ; CGraphicBase::GetSphereMatrix, COMDAT
; _this$ = ecx

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00003	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 389  : 	pMatrix->_11 = fValue * ms_matWorldView._11;

  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0000b	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  00012	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  00019	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  00020	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00027	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00035	c7 40 14 00 00
	80 3f		 mov	 DWORD PTR [eax+20], 1065353216 ; 3f800000H
  0003c	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H
  00042	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  00049	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  00050	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00057	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0005e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00065	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0006c	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H
  00073	c7 40 28 00 00
	80 3f		 mov	 DWORD PTR [eax+40], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 389  : 	pMatrix->_11 = fValue * ms_matWorldView._11;

  0007a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A
  00082	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00086	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 390  : 	pMatrix->_21 = fValue * ms_matWorldView._21;

  0008a	f3 0f 10 05 10
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A+16
  00092	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00096	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 391  : 	pMatrix->_31 = fValue * ms_matWorldView._31;

  0009b	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A+32
  000a3	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 392  : 	pMatrix->_41 = fValue;

  000a7	f3 0f 11 48 30	 movss	 DWORD PTR [eax+48], xmm1

; 393  : 	pMatrix->_12 = -fValue * ms_matWorldView._12;

  000ac	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  000b3	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0
  000b8	0f 28 c1	 movaps	 xmm0, xmm1
  000bb	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A+4
  000c3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 394  : 	pMatrix->_22 = -fValue * ms_matWorldView._22;

  000c8	0f 28 c1	 movaps	 xmm0, xmm1
  000cb	f3 0f 59 05 14
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A+20
  000d3	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 395  : 	pMatrix->_32 = -fValue * ms_matWorldView._32;

  000d8	0f 28 c1	 movaps	 xmm0, xmm1
  000db	f3 0f 59 05 24
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A+36

; 396  : 	pMatrix->_42 = -fValue;

  000e3	f3 0f 11 48 34	 movss	 DWORD PTR [eax+52], xmm1
  000e8	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 397  : }

  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
?GetSphereMatrix@CGraphicBase@@QAEXPAUD3DXMATRIX@@M@Z ENDP ; CGraphicBase::GetSphereMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetMatrixPointer@CGraphicBase@@QBEPBUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetMatrixPointer@CGraphicBase@@QBEPBUD3DXMATRIX@@XZ PROC ; CGraphicBase::GetMatrixPointer, COMDAT
; _this$ = ecx

; 382  : 	assert(ms_lpd3dMatStack!=NULL);
; 383  : 	return ms_lpd3dMatStack->GetTop();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00005	50		 push	 eax
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	ff 51 44	 call	 DWORD PTR [ecx+68]

; 384  : }

  0000b	c3		 ret	 0
?GetMatrixPointer@CGraphicBase@@QBEPBUD3DXMATRIX@@XZ ENDP ; CGraphicBase::GetMatrixPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetMatrix@CGraphicBase@@QBEXPAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pRetMatrix$ = 8					; size = 4
?GetMatrix@CGraphicBase@@QBEXPAUD3DXMATRIX@@@Z PROC	; CGraphicBase::GetMatrix, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 	assert(ms_lpd3dMatStack != NULL);
; 377  : 	*pRetMatrix = *ms_lpd3dMatStack->GetTop();

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00008	50		 push	 eax
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	ff 51 44	 call	 DWORD PTR [ecx+68]
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _pRetMatrix$[ebp]
  00011	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001b	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001f	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00023	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  00027	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0002b	0f 11 41 30	 movups	 XMMWORD PTR [ecx+48], xmm0

; 378  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?GetMatrix@CGraphicBase@@QBEXPAUD3DXMATRIX@@@Z ENDP	; CGraphicBase::GetMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?LoadMatrix@CGraphicBase@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_c_rSrcMatrix$ = 8					; size = 4
?LoadMatrix@CGraphicBase@@QAEXABUD3DXMATRIX@@@Z PROC	; CGraphicBase::LoadMatrix, COMDAT
; _this$ = ecx

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 448  : 	ms_lpd3dMatStack->LoadMatrix(&c_rSrcMatrix);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00008	ff 75 08	 push	 DWORD PTR _c_rSrcMatrix$[ebp]
  0000b	50		 push	 eax
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	ff 51 18	 call	 DWORD PTR [ecx+24]

; 449  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?LoadMatrix@CGraphicBase@@QAEXABUD3DXMATRIX@@@Z ENDP	; CGraphicBase::LoadMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?PopMatrix@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?PopMatrix@CGraphicBase@@QAEXXZ PROC			; CGraphicBase::PopMatrix, COMDAT
; _this$ = ecx

; 453  : 	ms_lpd3dMatStack->Pop();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00005	50		 push	 eax
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	ff 51 0c	 call	 DWORD PTR [ecx+12]

; 454  : }

  0000b	c3		 ret	 0
?PopMatrix@CGraphicBase@@QAEXXZ ENDP			; CGraphicBase::PopMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?Scale@CGraphicBase@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@CGraphicBase@@QAEXMMM@Z PROC			; CGraphicBase::Scale, COMDAT
; _this$ = ecx

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 411  : 	ms_lpd3dMatStack->Scale(x, y, z);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00010	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	50		 push	 eax
  0002e	ff 51 34	 call	 DWORD PTR [ecx+52]

; 412  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?Scale@CGraphicBase@@QAEXMMM@Z ENDP			; CGraphicBase::Scale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?RotateYawPitchRollLocal@CGraphicBase@@QAEXMMM@Z
_TEXT	SEGMENT
_fYaw$ = 8						; size = 4
_fPitch$ = 12						; size = 4
_fRoll$ = 16						; size = 4
?RotateYawPitchRollLocal@CGraphicBase@@QAEXMMM@Z PROC	; CGraphicBase::RotateYawPitchRollLocal, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 438  : 	ms_lpd3dMatStack->RotateYawPitchRollLocal(D3DXToRadian(fYaw), D3DXToRadian(fPitch), D3DXToRadian(fRoll));

  00003	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  0000b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRoll$[ebp]
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00018	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00024	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fPitch$[ebp]
  00029	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fYaw$[ebp]
  00038	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	50		 push	 eax
  00042	ff 51 30	 call	 DWORD PTR [ecx+48]

; 439  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?RotateYawPitchRollLocal@CGraphicBase@@QAEXMMM@Z ENDP	; CGraphicBase::RotateYawPitchRollLocal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?RotateLocal@CGraphicBase@@QAEXMMMM@Z
_TEXT	SEGMENT
_vec$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_degree$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?RotateLocal@CGraphicBase@@QAEXMMMM@Z PROC		; CGraphicBase::RotateLocal, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 423  : 	ms_lpd3dMatStack->RotateAxisLocal(&vec, D3DXToRadian(degree));

  00015	8d 55 f0	 lea	 edx, DWORD PTR _vec$[ebp]
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0001d	f3 0f 11 45 f0	 movss	 DWORD PTR _vec$[ebp], xmm0

; 181  :     y = fy;

  00022	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  00027	f3 0f 11 45 f4	 movss	 DWORD PTR _vec$[ebp+4], xmm0

; 182  :     z = fz;

  0002c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _z$[ebp]
  00031	f3 0f 11 45 f8	 movss	 DWORD PTR _vec$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 423  : 	ms_lpd3dMatStack->RotateAxisLocal(&vec, D3DXToRadian(degree));

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _degree$[ebp]
  0003b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	ff 51 28	 call	 DWORD PTR [ecx+40]

; 424  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
?RotateLocal@CGraphicBase@@QAEXMMMM@Z ENDP		; CGraphicBase::RotateLocal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?Rotate@CGraphicBase@@QAEXMMMM@Z
_TEXT	SEGMENT
_vec$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_degree$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?Rotate@CGraphicBase@@QAEXMMMM@Z PROC			; CGraphicBase::Rotate, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 417  : 	ms_lpd3dMatStack->RotateAxis(&vec, D3DXToRadian(degree));

  00015	8d 55 f0	 lea	 edx, DWORD PTR _vec$[ebp]
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0001d	f3 0f 11 45 f0	 movss	 DWORD PTR _vec$[ebp], xmm0

; 181  :     y = fy;

  00022	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  00027	f3 0f 11 45 f4	 movss	 DWORD PTR _vec$[ebp+4], xmm0

; 182  :     z = fz;

  0002c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _z$[ebp]
  00031	f3 0f 11 45 f8	 movss	 DWORD PTR _vec$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 417  : 	ms_lpd3dMatStack->RotateAxis(&vec, D3DXToRadian(degree));

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _degree$[ebp]
  0003b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	ff 51 24	 call	 DWORD PTR [ecx+36]

; 418  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
?Rotate@CGraphicBase@@QAEXMMMM@Z ENDP			; CGraphicBase::Rotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?Translate@CGraphicBase@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@CGraphicBase@@QAEXMMM@Z PROC			; CGraphicBase::Translate, COMDAT
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  : 	ms_lpd3dMatStack->Translate(x, y, z);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00010	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	50		 push	 eax
  0002e	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 444  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?Translate@CGraphicBase@@QAEXMMM@Z ENDP			; CGraphicBase::Translate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?MultMatrixLocal@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pMat$ = 8						; size = 4
?MultMatrixLocal@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z PROC ; CGraphicBase::MultMatrixLocal, COMDAT
; _this$ = ecx

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 433  : 	ms_lpd3dMatStack->MultMatrixLocal(pMat);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00008	ff 75 08	 push	 DWORD PTR _pMat$[ebp]
  0000b	50		 push	 eax
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	ff 51 20	 call	 DWORD PTR [ecx+32]

; 434  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?MultMatrixLocal@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z ENDP ; CGraphicBase::MultMatrixLocal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?MultMatrix@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pMat$ = 8						; size = 4
?MultMatrix@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z PROC	; CGraphicBase::MultMatrix, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	ms_lpd3dMatStack->MultMatrix(pMat);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00008	ff 75 08	 push	 DWORD PTR _pMat$[ebp]
  0000b	50		 push	 eax
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	ff 51 1c	 call	 DWORD PTR [ecx+28]

; 429  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?MultMatrix@CGraphicBase@@QAEXPBUD3DXMATRIX@@@Z ENDP	; CGraphicBase::MultMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?PushMatrix@CGraphicBase@@QAEXXZ
_TEXT	SEGMENT
?PushMatrix@CGraphicBase@@QAEXXZ PROC			; CGraphicBase::PushMatrix, COMDAT
; _this$ = ecx

; 406  : 	ms_lpd3dMatStack->Push();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00005	50		 push	 eax
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	ff 51 10	 call	 DWORD PTR [ecx+16]

; 407  : }

  0000b	c3		 ret	 0
?PushMatrix@CGraphicBase@@QAEXXZ ENDP			; CGraphicBase::PushMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetFOV@CGraphicBase@@QAEMXZ
_TEXT	SEGMENT
?GetFOV@CGraphicBase@@QAEMXZ PROC			; CGraphicBase::GetFOV, COMDAT
; _this$ = ecx

; 401  : 	return ms_fFieldOfView;

  00000	d9 05 00 00 00
	00		 fld	 DWORD PTR ?ms_fFieldOfView@CGraphicBase@@1MA ; CGraphicBase::ms_fFieldOfView

; 402  : }

  00006	c3		 ret	 0
?GetFOV@CGraphicBase@@QAEMXZ ENDP			; CGraphicBase::GetFOV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetPerspective@CGraphicBase@@QAEXMMMM@Z
_TEXT	SEGMENT
_fov$ = 8						; size = 4
_aspect$ = 12						; size = 4
_nearz$ = 16						; size = 4
_farz$ = 20						; size = 4
?SetPerspective@CGraphicBase@@QAEXMMMM@Z PROC		; CGraphicBase::SetPerspective, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 306  : 	ms_fFieldOfView = fov;

  00003	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fov$[ebp]

; 307  : 
; 308  : 
; 309  : 	//if (ms_d3dPresentParameter.BackBufferWidth>0 && ms_d3dPresentParameter.BackBufferHeight>0)
; 310  : 	//	ms_fAspect = float(ms_d3dPresentParameter.BackBufferWidth)/float(ms_d3dPresentParameter.BackBufferHeight);
; 311  : 	//else
; 312  : 	ms_fAspect = aspect;
; 313  : 
; 314  : 	ms_fNearY = nearz;
; 315  : 	ms_fFarY = farz;

  00008	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _farz$[ebp]
  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _nearz$[ebp]
  00012	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _aspect$[ebp]
  00017	56		 push	 esi

; 316  : 
; 317  : 	//CCameraManager::Instance().SetCurrentCamera(CCameraManager::DEFAULT_PERSPECTIVE_CAMERA);
; 318  : 	D3DXMatrixPerspectiveFovRH(&ms_matProj, D3DXToRadian(fov), ms_fAspect, nearz, farz);

  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	f3 0f 11 1d 00
	00 00 00	 movss	 DWORD PTR ?ms_fFieldOfView@CGraphicBase@@1MA, xmm3
  00023	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3c8efa35
  0002b	8b f1		 mov	 esi, ecx
  0002d	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?ms_fAspect@CGraphicBase@@1MA, xmm2
  00035	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0003b	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00041	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00047	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0004c	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00051	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?ms_fNearY@CGraphicBase@@1MA, xmm1
  00059	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ms_fFarY@CGraphicBase@@1MA, xmm0
  00061	e8 00 00 00 00	 call	 _D3DXMatrixPerspectiveFovRH@20

; 319  : 	//UpdatePipeLineMatrix();
; 320  : 	UpdateProjMatrix();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?UpdateProjMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateProjMatrix
  0006d	5e		 pop	 esi

; 321  : }

  0006e	5d		 pop	 ebp
  0006f	c2 10 00	 ret	 16			; 00000010H
?SetPerspective@CGraphicBase@@QAEXMMMM@Z ENDP		; CGraphicBase::SetPerspective
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetOrtho3D@CGraphicBase@@QAEXMMMM@Z
_TEXT	SEGMENT
_hres$ = 8						; size = 4
_vres$ = 12						; size = 4
_zmin$ = 16						; size = 4
_zmax$ = 20						; size = 4
?SetOrtho3D@CGraphicBase@@QAEXMMMM@Z PROC		; CGraphicBase::SetOrtho3D, COMDAT
; _this$ = ecx

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 298  : 	//CCameraManager::Instance().SetCurrentCamera(CCameraManager::DEFAULT_PERSPECTIVE_CAMERA);
; 299  : 	D3DXMatrixOrthoRH(&ms_matProj, hres, vres, zmin, zmax);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _zmax$[ebp]
  00008	56		 push	 esi
  00009	83 ec 10	 sub	 esp, 16			; 00000010H
  0000c	8b f1		 mov	 esi, ecx
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _vres$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _hres$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00039	e8 00 00 00 00	 call	 _D3DXMatrixOrthoRH@20

; 300  : 	//UpdatePipeLineMatrix();
; 301  : 	UpdateProjMatrix();

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?UpdateProjMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateProjMatrix
  00045	5e		 pop	 esi

; 302  : }

  00046	5d		 pop	 ebp
  00047	c2 10 00	 ret	 16			; 00000010H
?SetOrtho3D@CGraphicBase@@QAEXMMMM@Z ENDP		; CGraphicBase::SetOrtho3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetOrtho2D@CGraphicBase@@QAEXMMM@Z
_TEXT	SEGMENT
_hres$ = 8						; size = 4
_vres$ = 12						; size = 4
_zres$ = 16						; size = 4
?SetOrtho2D@CGraphicBase@@QAEXMMM@Z PROC		; CGraphicBase::SetOrtho2D, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 	//CCameraManager::Instance().SetCurrentCamera(CCameraManager::DEFAULT_ORTHO_CAMERA);
; 291  : 	D3DXMatrixOrthoOffCenterRH(&ms_matProj, 0, hres, vres, 0, 0, zres);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _zres$[ebp]
  00008	56		 push	 esi
  00009	83 ec 18	 sub	 esp, 24			; 00000018H
  0000c	8b f1		 mov	 esi, ecx
  0000e	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00014	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _vres$[ebp]
  00019	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00021	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00029	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _hres$[ebp]
  00034	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00041	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00046	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 292  : 	//UpdatePipeLineMatrix();
; 293  : 	UpdateProjMatrix();

  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?UpdateProjMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateProjMatrix
  00052	5e		 pop	 esi

; 294  : }

  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
?SetOrtho2D@CGraphicBase@@QAEXMMM@Z ENDP		; CGraphicBase::SetOrtho2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetCameraPosition@CGraphicBase@@QAEXPAM00@Z
_TEXT	SEGMENT
_px$ = 8						; size = 4
_py$ = 12						; size = 4
_pz$ = 16						; size = 4
?GetCameraPosition@CGraphicBase@@QAEXPAM00@Z PROC	; CGraphicBase::GetCameraPosition, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  : 	*px = CCameraManager::Instance().GetCurrentCamera()->GetEye().x;

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00009	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  0000e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00011	8b 45 08	 mov	 eax, DWORD PTR _px$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 370  : 	*py = CCameraManager::Instance().GetCurrentCamera()->GetEye().y;

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001c	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00021	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00024	8b 45 0c	 mov	 eax, DWORD PTR _py$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 	*pz = CCameraManager::Instance().GetCurrentCamera()->GetEye().z;

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0002f	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00034	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00037	8b 45 10	 mov	 eax, DWORD PTR _pz$[ebp]
  0003a	89 08		 mov	 DWORD PTR [eax], ecx

; 372  : }

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?GetCameraPosition@CGraphicBase@@QAEXPAM00@Z ENDP	; CGraphicBase::GetCameraPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetTargetPosition@CGraphicBase@@QAEXPAM00@Z
_TEXT	SEGMENT
_px$ = 8						; size = 4
_py$ = 12						; size = 4
_pz$ = 16						; size = 4
?GetTargetPosition@CGraphicBase@@QAEXPAM00@Z PROC	; CGraphicBase::GetTargetPosition, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 362  : 	*px = CCameraManager::Instance().GetCurrentCamera()->GetTarget().x;

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00009	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  0000e	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00011	8b 45 08	 mov	 eax, DWORD PTR _px$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 363  : 	*py = CCameraManager::Instance().GetCurrentCamera()->GetTarget().y;

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001c	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00021	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00024	8b 45 0c	 mov	 eax, DWORD PTR _py$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 364  : 	*pz = CCameraManager::Instance().GetCurrentCamera()->GetTarget().z;

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0002f	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00034	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00037	8b 45 10	 mov	 eax, DWORD PTR _pz$[ebp]
  0003a	89 08		 mov	 DWORD PTR [eax], ecx

; 365  : }

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetPosition@CGraphicBase@@QAEXPAM00@Z ENDP	; CGraphicBase::GetTargetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetPositionCamera@CGraphicBase@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_fz$1$ = -52						; size = 4
_fy$1$ = -48						; size = 4
_fx$GSCopy$1$ = -44					; size = 4
$T1 = -40						; size = 12
$T2 = -28						; size = 12
$T3 = -16						; size = 12
$T4 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_distance$ = 20						; size = 4
_pitch$ = 24						; size = 4
_roll$ = 28						; size = 4
?SetPositionCamera@CGraphicBase@@QAEXMMMMMM@Z PROC	; CGraphicBase::SetPositionCamera, COMDAT
; _this$ = ecx

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b f9		 mov	 edi, ecx
  00019	f3 0f 11 45 d4	 movss	 DWORD PTR _fx$GSCopy$1$[ebp], xmm0

; 260  : 	// I wanna downward this code to the game control level. - [levites]
; 261  : 	if (ms_dwWavingEndTime > CTimer::Instance().GetCurrentMillisecond())

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00024	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  00029	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_dwWavingEndTime@CGraphicBase@@1KA, eax ; CGraphicBase::ms_dwWavingEndTime
  0002f	76 7a		 jbe	 SHORT $LN14@SetPositio

; 262  : 	{
; 263  : 		if (ms_iWavingPower>0)

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA, 0 ; CGraphicBase::ms_iWavingPower
  00038	7e 71		 jle	 SHORT $LN14@SetPositio

; 264  : 		{
; 265  : 			fx += float(rand() % ms_iWavingPower) / 10.0f;

  0003a	e8 00 00 00 00	 call	 _rand
  0003f	99		 cdq
  00040	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA ; CGraphicBase::ms_iWavingPower
  00046	66 0f 6e c2	 movd	 xmm0, edx
  0004a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0004d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  00055	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _fx$GSCopy$1$[ebp]
  0005a	f3 0f 11 45 d4	 movss	 DWORD PTR _fx$GSCopy$1$[ebp], xmm0

; 266  : 			fy += float(rand() % ms_iWavingPower) / 10.0f;

  0005f	e8 00 00 00 00	 call	 _rand
  00064	99		 cdq
  00065	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA ; CGraphicBase::ms_iWavingPower
  0006b	66 0f 6e c2	 movd	 xmm0, edx
  0006f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00072	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0007a	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _fy$[ebp]
  0007f	f3 0f 11 45 d0	 movss	 DWORD PTR _fy$1$[ebp], xmm0

; 267  : 			fz += float(rand() % ms_iWavingPower) / 10.0f;

  00084	e8 00 00 00 00	 call	 _rand
  00089	99		 cdq
  0008a	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?ms_iWavingPower@CGraphicBase@@1HA ; CGraphicBase::ms_iWavingPower
  00090	66 0f 6e c2	 movd	 xmm0, edx
  00094	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00097	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0009f	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _fz$[ebp]
  000a4	f3 0f 11 45 cc	 movss	 DWORD PTR _fz$1$[ebp], xmm0
  000a9	eb 14		 jmp	 SHORT $LN3@SetPositio
$LN14@SetPositio:

; 262  : 	{
; 263  : 		if (ms_iWavingPower>0)

  000ab	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _fz$1$[ebp], xmm0
  000b5	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  000ba	f3 0f 11 45 d0	 movss	 DWORD PTR _fy$1$[ebp], xmm0
$LN3@SetPositio:

; 268  : 		}
; 269  : 	}
; 270  : 
; 271  : 	CCamera * pCamera = CCameraManager::Instance().GetCurrentCamera();

  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  000c5	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  000ca	8b f0		 mov	 esi, eax

; 272  : 	if (!pCamera)

  000cc	85 f6		 test	 esi, esi
  000ce	0f 84 fe 00 00
	00		 je	 $LN1@SetPositio

; 275  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  000d4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _distance$[ebp]
  000d9	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e3	8b ce		 mov	 ecx, esi
  000e5	50		 push	 eax
  000e6	8d 45 d8	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000e9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 275  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  000f0	50		 push	 eax
  000f1	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  000f4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 275  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  000fb	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000fc	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR $T2[ebp+8], 1065353216 ; 3f800000H

; 180  :     x = fx;

  00103	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 181  :     y = fy;

  0010a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 182  :     z = fz;

  00111	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0

; 180  :     x = fx;

  00118	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0

; 181  :     y = fy;

  0011f	f3 0f 11 45 f4	 movss	 DWORD PTR $T4[ebp+4], xmm0

; 182  :     z = fz;

  00124	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 275  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0012b	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 276  : 	pitch = fMIN(80.0f, fMAX(-80.0f, pitch) );

  00130	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00135	83 ec 08	 sub	 esp, 8
  00138	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013e	c7 04 24 00 00
	a0 c2		 mov	 DWORD PTR [esp], -1029701632 ; c2a00000H
  00145	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  0014a	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0014e	c7 04 24 00 00
	a0 42		 mov	 DWORD PTR [esp], 1117782016 ; 42a00000H
  00155	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN

; 277  : //	Tracef("SetPosition Camera : %f, %f\n", pitch, roll);
; 278  : 	pCamera->RotateEyeAroundTarget(pitch, roll);

  0015a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0015f	8b ce		 mov	 ecx, esi
  00161	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00167	d9 5d 18	 fstp	 DWORD PTR _pitch$[ebp]
  0016a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00179	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 279  : 	pCamera->Move(D3DXVECTOR3(fx, fy, fz));

  0017e	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00181	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _fx$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 279  : 	pCamera->Move(D3DXVECTOR3(fx, fy, fz));

  00186	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00188	f3 0f 11 45 f4	 movss	 DWORD PTR $T3[ebp+4], xmm0

; 182  :     z = fz;

  0018d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _fz$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 279  : 	pCamera->Move(D3DXVECTOR3(fx, fy, fz));

  00192	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00193	f3 0f 11 4d f0	 movss	 DWORD PTR $T3[ebp], xmm1

; 182  :     z = fz;

  00198	f3 0f 11 45 f8	 movss	 DWORD PTR $T3[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 279  : 	pCamera->Move(D3DXVECTOR3(fx, fy, fz));

  0019d	e8 00 00 00 00	 call	 ?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z ; CCamera::Move

; 280  : 
; 281  : 	UpdateViewMatrix();

  001a2	8b cf		 mov	 ecx, edi
  001a4	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 282  : 
; 283  : 	// This is levites's virtual(?) code which you should not trust.
; 284  : 	STATEMANAGER.GetTransform(D3DTS_WORLD, &ms_matWorld);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001af	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  001b4	68 00 01 00 00	 push	 256			; 00000100H
  001b9	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 285  : 	D3DXMatrixMultiply(&ms_matWorldView, &ms_matWorld, &ms_matView);

  001be	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  001c3	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  001c8	68 00 00 00 00	 push	 OFFSET ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorldView
  001cd	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
$LN1@SetPositio:

; 286  : }

  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	5f		 pop	 edi
  001d6	33 cd		 xor	 ecx, ebp
  001d8	5e		 pop	 esi
  001d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 18 00	 ret	 24			; 00000018H
?SetPositionCamera@CGraphicBase@@QAEXMMMMMM@Z ENDP	; CGraphicBase::SetPositionCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetAroundCamera@CGraphicBase@@QAEXMMMM@Z
_TEXT	SEGMENT
_v3Target$ = -52					; size = 12
$T1 = -40						; size = 12
$T2 = -28						; size = 12
$T3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_distance$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
_lookAtZ$ = 20						; size = 4
?SetAroundCamera@CGraphicBase@@QAEXMMMM@Z PROC		; CGraphicBase::SetAroundCamera, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 243  : 	CCamera * pCamera = CCameraManager::Instance().GetCurrentCamera();

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001a	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 244  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00024	8b f0		 mov	 esi, eax
  00026	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0002d	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  00030	50		 push	 eax
  00031	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00034	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 244  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0003b	50		 push	 eax
  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 244  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00049	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+8], 1065353216 ; 3f800000H

; 180  :     x = fx;

  00050	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 181  :     y = fy;

  00057	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 182  :     z = fz;

  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0

; 180  :     x = fx;

  00065	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 181  :     y = fy;

  0006c	f3 0f 11 45 dc	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 182  :     z = fz;

  00071	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 244  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, -distance, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00078	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 245  : 	pCamera->RotateEyeAroundTarget(pitch, roll);

  0007d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00082	83 ec 08	 sub	 esp, 8
  00085	8b ce		 mov	 ecx, esi
  00087	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 246  : 	D3DXVECTOR3 v3Target = pCamera->GetTarget();

  0009c	f3 0f 7e 46 3c	 movq	 xmm0, QWORD PTR [esi+60]

; 247  : 	v3Target.z = lookAtZ;
; 248  : 	pCamera->SetTarget(v3Target);

  000a1	8d 45 cc	 lea	 eax, DWORD PTR _v3Target$[ebp]
  000a4	66 0f d6 45 cc	 movq	 QWORD PTR _v3Target$[ebp], xmm0
  000a9	8b ce		 mov	 ecx, esi
  000ab	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _lookAtZ$[ebp]
  000b0	50		 push	 eax
  000b1	f3 0f 11 45 d4	 movss	 DWORD PTR _v3Target$[ebp+8], xmm0
  000b6	e8 00 00 00 00	 call	 ?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z ; CCamera::SetTarget

; 249  : // 	pCamera->Move(v3Target);
; 250  : 
; 251  : 	UpdateViewMatrix();

  000bb	8b cf		 mov	 ecx, edi
  000bd	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 252  : 
; 253  : 	// This is levites's virtual(?) code which you should not trust.
; 254  : 	ms_lpd3dDevice->GetTransform(D3DTS_WORLD, &ms_matWorld);

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000c7	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  000cc	68 00 01 00 00	 push	 256			; 00000100H
  000d1	50		 push	 eax
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	ff 91 98 00 00
	00		 call	 DWORD PTR [ecx+152]

; 255  : 	D3DXMatrixMultiply(&ms_matWorldView, &ms_matWorld, &ms_matView);

  000da	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  000df	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  000e4	68 00 00 00 00	 push	 OFFSET ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorldView
  000e9	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 256  : }

  000ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f1	5f		 pop	 edi
  000f2	33 cd		 xor	 ecx, ebp
  000f4	5e		 pop	 esi
  000f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 10 00	 ret	 16			; 00000010H
?SetAroundCamera@CGraphicBase@@QAEXMMMM@Z ENDP		; CGraphicBase::SetAroundCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetEyeCamera@CGraphicBase@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_vectorEye$ = -40					; size = 12
_vectorCenter$ = -28					; size = 12
_vectorUp$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_xEye$ = 8						; size = 4
_yEye$ = 12						; size = 4
_zEye$ = 16						; size = 4
_xCenter$ = 20						; size = 4
_yCenter$ = 24						; size = 4
_zCenter$ = 28						; size = 4
_xUp$ = 32						; size = 4
_yUp$ = 36						; size = 4
_zUp$ = 40						; size = 4
?SetEyeCamera@CGraphicBase@@QAEXMMMMMMMMM@Z PROC	; CGraphicBase::SetEyeCamera, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xEye$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _vectorUp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00018	f3 0f 11 45 d8	 movss	 DWORD PTR _vectorEye$[ebp], xmm0

; 181  :     y = fy;

  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yEye$[ebp]
  00022	f3 0f 11 45 dc	 movss	 DWORD PTR _vectorEye$[ebp+4], xmm0

; 182  :     z = fz;

  00027	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _zEye$[ebp]
  0002c	f3 0f 11 45 e0	 movss	 DWORD PTR _vectorEye$[ebp+8], xmm0

; 180  :     x = fx;

  00031	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _xCenter$[ebp]
  00036	f3 0f 11 45 e4	 movss	 DWORD PTR _vectorCenter$[ebp], xmm0

; 181  :     y = fy;

  0003b	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _yCenter$[ebp]
  00040	f3 0f 11 45 e8	 movss	 DWORD PTR _vectorCenter$[ebp+4], xmm0

; 182  :     z = fz;

  00045	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _zCenter$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 215  : {

  0004a	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0004b	f3 0f 11 45 ec	 movss	 DWORD PTR _vectorCenter$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 215  : {

  00050	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00052	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _xUp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0005d	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0005e	f3 0f 11 45 f0	 movss	 DWORD PTR _vectorUp$[ebp], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  00063	8d 45 e4	 lea	 eax, DWORD PTR _vectorCenter$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00066	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _yUp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  0006b	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0006c	f3 0f 11 45 f4	 movss	 DWORD PTR _vectorUp$[ebp+4], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  00071	8d 45 d8	 lea	 eax, DWORD PTR _vectorEye$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00074	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zUp$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  00079	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0007a	f3 0f 11 45 f8	 movss	 DWORD PTR _vectorUp$[ebp+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 221  : 	CCameraManager::Instance().GetCurrentCamera()->SetViewParams(vectorEye, vectorCenter, vectorUp);

  0007f	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00084	8b c8		 mov	 ecx, eax
  00086	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 222  : 	UpdateViewMatrix();

  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 223  : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	5e		 pop	 esi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 24 00	 ret	 36			; 00000024H
?SetEyeCamera@CGraphicBase@@QAEXMMMMMMMMM@Z ENDP	; CGraphicBase::SetEyeCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?SetSimpleCamera@CGraphicBase@@QAEXMMMMM@Z
_TEXT	SEGMENT
_vectorEye$ = -52					; size = 12
$T1 = -40						; size = 12
$T2 = -28						; size = 12
$T3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pitch$ = 20						; size = 4
_roll$ = 24						; size = 4
?SetSimpleCamera@CGraphicBase@@QAEXMMMMM@Z PROC		; CGraphicBase::SetSimpleCamera, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 227  : 	CCamera * pCamera = CCameraManager::Instance().GetCurrentCamera();

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001a	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 227  : 	CCamera * pCamera = CCameraManager::Instance().GetCurrentCamera();

  00024	8b f0		 mov	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00026	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 230  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, y, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0002b	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00032	f3 0f 11 45 cc	 movss	 DWORD PTR _vectorEye$[ebp], xmm0

; 182  :     z = fz;

  00037	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 230  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, y, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0003c	8b ce		 mov	 ecx, esi
  0003e	50		 push	 eax
  0003f	8d 45 d8	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00042	f3 0f 11 4d d0	 movss	 DWORD PTR _vectorEye$[ebp+4], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 230  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, y, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00047	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00048	f3 0f 11 45 d4	 movss	 DWORD PTR _vectorEye$[ebp+8], xmm0

; 180  :     x = fx;

  0004d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 181  :     y = fy;

  00054	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 182  :     z = fz;

  0005b	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+8], 1065353216 ; 3f800000H

; 180  :     x = fx;

  00062	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 181  :     y = fy;

  00069	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 182  :     z = fz;

  00070	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0

; 180  :     x = fx;

  00077	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 181  :     y = fy;

  0007e	f3 0f 11 4d dc	 movss	 DWORD PTR $T1[ebp+4], xmm1

; 182  :     z = fz;

  00083	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp

; 230  : 	pCamera->SetViewParams(D3DXVECTOR3(0.0f, y, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0008a	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 231  : 	pCamera->RotateEyeAroundTarget(pitch, roll);

  0008f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00094	83 ec 08	 sub	 esp, 8
  00097	8b ce		 mov	 ecx, esi
  00099	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0009f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 232  : 	pCamera->Move(vectorEye);

  000ae	8d 45 cc	 lea	 eax, DWORD PTR _vectorEye$[ebp]
  000b1	8b ce		 mov	 ecx, esi
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z ; CCamera::Move

; 233  : 
; 234  : 	UpdateViewMatrix();

  000b9	8b cf		 mov	 ecx, edi
  000bb	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 235  : 
; 236  : 	// This is levites's virtual(?) code which you should not trust.
; 237  : 	ms_lpd3dDevice->GetTransform(D3DTS_WORLD, &ms_matWorld);

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000c5	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  000ca	68 00 01 00 00	 push	 256			; 00000100H
  000cf	50		 push	 eax
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	ff 91 98 00 00
	00		 call	 DWORD PTR [ecx+152]

; 238  : 	D3DXMatrixMultiply(&ms_matWorldView, &ms_matWorld, &ms_matView);

  000d8	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  000dd	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  000e2	68 00 00 00 00	 push	 OFFSET ?ms_matWorldView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorldView
  000e7	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 239  : }

  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	5f		 pop	 edi
  000f0	33 cd		 xor	 ecx, ebp
  000f2	5e		 pop	 esi
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 14 00	 ret	 20			; 00000014H
?SetSimpleCamera@CGraphicBase@@QAEXMMMMM@Z ENDP		; CGraphicBase::SetSimpleCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ??1CGraphicBase@@UAE@XZ
_TEXT	SEGMENT
??1CGraphicBase@@UAE@XZ PROC				; CGraphicBase::~CGraphicBase, COMDAT
; _this$ = ecx

; 509  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGraphicBase@@6B@

; 510  : }

  00006	c3		 ret	 0
??1CGraphicBase@@UAE@XZ ENDP				; CGraphicBase::~CGraphicBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ??0CGraphicBase@@QAE@XZ
_TEXT	SEGMENT
??0CGraphicBase@@QAE@XZ PROC				; CGraphicBase::CGraphicBase, COMDAT
; _this$ = ecx

; 505  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGraphicBase@@6B@

; 506  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CGraphicBase@@QAE@XZ ENDP				; CGraphicBase::CGraphicBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetIdentityMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetIdentityMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ PROC ; CGraphicBase::GetIdentityMatrix, COMDAT

; 209  : 	return ms_matIdentity;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity

; 210  : }

  00005	c3		 ret	 0
?GetIdentityMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ENDP ; CGraphicBase::GetIdentityMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ PROC	; CGraphicBase::GetViewMatrix, COMDAT

; 204  : 	return ms_matView;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView

; 205  : }

  00005	c3		 ret	 0
?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ENDP	; CGraphicBase::GetViewMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?GetAvailableTextureMemory@CGraphicBase@@SAKXZ
_TEXT	SEGMENT
?GetAvailableTextureMemory@CGraphicBase@@SAKXZ PROC	; CGraphicBase::GetAvailableTextureMemory, COMDAT

; 187  : 	assert(ms_lpd3dDevice!=NULL && "CGraphicBase::GetAvailableTextureMemory - D3DDevice is EMPTY");
; 188  : 
; 189  : 	static DWORD s_dwNextUpdateTime=0;
; 190  : 	static DWORD s_dwTexMemSize=0;//ms_lpd3dDevice->GetAvailableTextureMem();
; 191  : 
; 192  : 	DWORD dwCurTime=ELTimer_GetMSec();

  00000	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 193  : 	if (s_dwNextUpdateTime<dwCurTime)

  00005	39 05 00 00 00
	00		 cmp	 DWORD PTR ?s_dwNextUpdateTime@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA, eax
  0000b	73 1b		 jae	 SHORT $LN4@GetAvailab

; 194  : 	{
; 195  : 		s_dwNextUpdateTime=dwCurTime+5000;

  0000d	05 88 13 00 00	 add	 eax, 5000		; 00001388H
  00012	a3 00 00 00 00	 mov	 DWORD PTR ?s_dwNextUpdateTime@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA, eax

; 196  : 		s_dwTexMemSize=ms_lpd3dDevice->GetAvailableTextureMem();

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0001c	50		 push	 eax
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	ff 51 10	 call	 DWORD PTR [ecx+16]
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?s_dwTexMemSize@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA, eax

; 200  : }

  00027	c3		 ret	 0
$LN4@GetAvailab:

; 197  : 	}
; 198  : 
; 199  : 	return s_dwTexMemSize;

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_dwTexMemSize@?1??GetAvailableTextureMemory@CGraphicBase@@SAKXZ@4KA

; 200  : }

  0002d	c3		 ret	 0
?GetAvailableTextureMemory@CGraphicBase@@SAKXZ ENDP	; CGraphicBase::GetAvailableTextureMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?D3DXVECTOR3ToPixelPosition@@YAXABUD3DXVECTOR3@@PAU1@@Z
_TEXT	SEGMENT
_c_rv3Src$ = 8						; size = 4
_pv3Dst$ = 12						; size = 4
?D3DXVECTOR3ToPixelPosition@@YAXABUD3DXVECTOR3@@PAU1@@Z PROC ; D3DXVECTOR3ToPixelPosition, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	pv3Dst->x=+c_rv3Src.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_rv3Src$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pv3Dst$[ebp]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 18   : 	pv3Dst->y=-c_rv3Src.y;

  0000d	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00012	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00019	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 19   : 	pv3Dst->z=+c_rv3Src.z;

  0001e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00021	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 20   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?D3DXVECTOR3ToPixelPosition@@YAXABUD3DXVECTOR3@@PAU1@@Z ENDP ; D3DXVECTOR3ToPixelPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpBase.cpp
;	COMDAT ?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z
_TEXT	SEGMENT
_c_rkPPosSrc$ = 8					; size = 4
_pv3Dst$ = 12						; size = 4
?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z PROC ; PixelPositionToD3DXVECTOR3, COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	pv3Dst->x=+c_rkPPosSrc.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_rkPPosSrc$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pv3Dst$[ebp]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 11   : 	pv3Dst->y=-c_rkPPosSrc.y;

  0000d	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00012	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00019	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 12   : 	pv3Dst->z=+c_rkPPosSrc.z;

  0001e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00021	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 13   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?PixelPositionToD3DXVECTOR3@@YAXABUD3DXVECTOR3@@PAU1@@Z ENDP ; PixelPositionToD3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
